Sections:
00: "DATA" (0-423)
01: "CODE" (0-4C3C)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+
                            	     7: ;          | startup sp,pc  | 8 B
                            	     8: ; 00000008 +----------------+
                            	     9: ;					 |    vectors     |
                            	    10: ; 00000400 +----------------+
                            	    11: ;					 |   bios mem     |
                            	    12: ; 00000800 +----------------+
                            	    13: ;					 |   bios code    |
                            	    14: ; 00008000 +----------------+
                            	    15: ;					 |    unused      |
                            	    16: ; 20000000 +----------------+
                            	    17: ;          |                |
                            	    18: ;          |                |
                            	    19: ;          |                |
                            	    20: ;          :  dram memory   : 512 MB
                            	    21: ;          |                |
                            	    22: ;          |                |
                            	    23: ;          |                |
                            	    24: ; 40000000 +----------------+
                            	    25: ;          |                |
                            	    26: ;          :     unused     :
                            	    27: ;          |                |
                            	    28: ; FFD00000 +----------------+
                            	    29: ;          |                |
                            	    30: ;          :    I/O area    : 1.0 M
                            	    31: ;          |                |
                            	    32: ; FFE00000 +----------------+
                            	    33: ;          |                |
                            	    34: ;          :     unused     :
                            	    35: ;          |                |
                            	    36: ; FFFFFFE0 +----------------+
                            	    37: ;          | special regs   |
                            	    38: ; FFFFFFFF +----------------+
                            	    39: ;
                            	    40: ;-------------------------------------------------------------------------------
                            	    41: ;
                            	    42: CTRLC	EQU		$03
                            	    43: CTRLH	EQU		$08
                            	    44: CTRLX	EQU		$18
                            	    45: LF		EQU		$0A
                            	    46: CR		EQU		$0D
                            	    47: 
                            	    48: SC_F12  EQU    $07
                            	    49: SC_C    EQU    $21
                            	    50: SC_T    EQU    $2C
                            	    51: SC_Z    EQU    $1A
                            	    52: SC_KEYUP	EQU		$F0
                            	    53: SC_EXTEND   EQU		$E0
                            	    54: SC_CTRL		EQU		$14
                            	    55: SC_RSHIFT	EQU		$59
                            	    56: SC_NUMLOCK	EQU		$77
                            	    57: SC_SCROLLLOCK	EQU	$7E
                            	    58: SC_CAPSLOCK		EQU	$58
                            	    59: SC_ALT		EQU		$11
                            	    60: SC_LSHIFT	EQU		$12
                            	    61: SC_DEL		EQU		$71		; extend
                            	    62: SC_LCTRL	EQU		$58
                            	    63: SC_TAB      EQU		$0D
                            	    64: 
                            	    65: TEXTREG		EQU	$FD01FF00
                            	    66: txtscreen	EQU	$FD000000
                            	    67: semamem		EQU	$FD050000
                            	    68: leds			EQU	$FD0FFF00
                            	    69: keybd			EQU	$FD0FFE00
                            	    70: KEYBD			EQU	$FD0FFE00
                            	    71: rand			EQU	$FD0FFD00
                            	    72: 
                            	    73: 	data
00:00000000 0001FFFC        	    74: 	dc.l		$0001FFFC
00:00000004 00000000        	    75: 	dc.l		start
00:00000008 00000000        	    76: 	dc.l		0
00:0000000C 00000000        	    77: 	dc.l		0
00:00000010 00004BEE        	    78: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    79: 	dc.l		0
00:00000018 00000220        	    80: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000230        	    81: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	    82: 	dc.l		0
00:00000024 00000000        	    83: 	dc.l		0
00:00000028 00000000        	    84: 	dc.l		0
                            	    85: 
00:0000002C 00000000        	    86: 	dc.l		0
00:00000030 00000000        	    87: 	dc.l		0
00:00000034 00000000        	    88: 	dc.l		0
00:00000038 00000000        	    89: 	dc.l		0
00:0000003C 00000000        	    90: 	dc.l		0
00:00000040 00000000        	    91: 	dc.l		0
00:00000044 00000000        	    92: 	dc.l		0
00:00000048 00000000        	    93: 	dc.l		0
00:0000004C 00000000        	    94: 	dc.l		0
00:00000050 00000000        	    95: 	dc.l		0
                            	    96: 
00:00000054 00000000        	    97: 	dc.l		0
00:00000058 00000000        	    98: 	dc.l		0
00:0000005C 00000000        	    99: 	dc.l		0
00:00000060 00000000        	   100: 	dc.l		0
00:00000064 00000000        	   101: 	dc.l		0
00:00000068 00000000        	   102: 	dc.l		0
00:0000006C 00000000        	   103: 	dc.l		0
00:00000070 00000000        	   104: 	dc.l		0
00:00000074 00000000        	   105: 	dc.l		0
00:00000078 00000000        	   106: 	dc.l		0
                            	   107: 
00:0000007C 00004BD2        	   108: 	dc.l		irq_rout					* IRQ 30 - timer
00:00000080 00000000        	   109: 	dc.l		0
00:00000084 00000000        	   110: 	dc.l		0
00:00000088 00000000        	   111: 	dc.l		0
00:0000008C 00000000        	   112: 	dc.l		0
                            	   113: 
                            	   114: 	align		10
00:00000400 00000000        	   115: 	dc.l		0
                            	   116: fgcolor:
00:00000404 001FFFFF        	   117: 	dc.l		$1fffff					; white
                            	   118: bkcolor:
00:00000408 0000003F        	   119: 	dc.l		$00003f					; dark blue
                            	   120: CursorRow
00:0000040C 00              	   121: 	dc.b		$00
                            	   122: CursorCol
00:0000040D 00              	   123: 	dc.b		$00
                            	   124: TextRows
00:0000040E 20              	   125: 	dc.b		32
                            	   126: TextCols
00:0000040F 40              	   127: 	dc.b		64
                            	   128: TextPos
                            	   129: TextCurpos
00:00000410 0000            	   130: 	dc.w		$00
00:00000412 0000            	   131: 	dc.w		0
                            	   132: TextScr
00:00000414 FD000000        	   133: 	dc.l		$FD000000
                            	   134: S19StartAddress
00:00000418 10000000        	   135: 	dc.l		$10000000
                            	   136: KeybdEcho
00:0000041C 00              	   137: 	dc.b		0
                            	   138: KeybdWaitFlag
00:0000041D 00              	   139: 	dc.b		0
                            	   140: KeybdLEDs
00:0000041E 00              	   141: 	dc.b		0
                            	   142: _KeyState1
00:0000041F 00              	   143: 	dc.b		0
                            	   144: _KeyState2
00:00000420 00              	   145: 	dc.b		0
                            	   146: CmdBuf:
00:00000421 00              	   147: 	dc.b		0
                            	   148: CmdBufEnd:
00:00000422 00              	   149: 	dc.b		0
                            	   150: 
                            	   151: 
                            	   152: ;-------------------------------------------------------------------------------
                            	   153: ;-------------------------------------------------------------------------------
                            	   154: 
                            	   155: 	code
                            	   156: start:
01:00000000 46FC2500        	   157: 	move.w	#$2500,sr				; enable level 6 and higher interrupts
01:00000004 2038FFE0        	   158: 	move.l	$FFFFFFE0,d0		; get core number
01:00000008 0C000002        	   159: 	cmpi.b	#2,d0
01:0000000C 6654            	   160: 	bne			start_other
01:0000000E 6172            	   161: 	bsr			InitSemaphores
01:00000010 7201            	   162: 	moveq		#1,d1
01:00000012 610000DC        	   163: 	bsr			LockSemaphore
01:00000016 61000100        	   164: 	bsr			Delay3s					; give devices time to reset
01:0000001A 61003D1E        	   165: 	bsr			clear_screen
01:0000001E 42390000040D    	   166: 	clr.b		CursorCol
01:00000024 42390000040C    	   167: 	clr.b		CursorRow
01:0000002A 427900000410    	   168: 	clr.w		TextCurpos
                            	   169: 
                            	   170: 	; Write startup message to screen
                            	   171: 
01:00000030 43FA4BD0        	   172: 	lea			msg_start,a1
01:00000034 61003FBC        	   173: 	bsr			DisplayString
01:00000038 7201            	   174: 	moveq		#1,d1
01:0000003A 610000BA        	   175: 	bsr			UnlockSemaphore	; allow another cpu access
01:0000003E 33FCA4A4FD0FFF00	   176: 	move.w	#$A4A4,leds			; diagnostics
01:00000046 60004602        	   177: 	bra			Monitor
01:0000004A 610000F0        	   178: 	bsr			cpu_test
                            	   179: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   180: ;	move.l	a0,64*4
                            	   181: 
                            	   182: loop2:
01:0000004E 70FF            	   183: 	move.l	#-1,d0
                            	   184: loop1:
01:00000050 2200            	   185: 	move.l	d0,d1
01:00000052 E089            	   186: 	lsr.l		#8,d1
01:00000054 E089            	   187: 	lsr.l		#8,d1
01:00000056 13C1FD0FFF00    	   188: 	move.b	d1,leds
01:0000005C 51C8FFF2        	   189: 	dbra		d0,loop1
01:00000060 60EC            	   190: 	bra			loop2
                            	   191: start_other:
01:00000062 610000B4        	   192: 	bsr			Delay3s					; give time for monitor core to reset things
01:00000066 7201            	   193: 	moveq		#1,d1
01:00000068 61000086        	   194: 	bsr			LockSemaphore
01:0000006C 2238FFE0        	   195: 	move.l	$FFFFFFE0,d1
01:00000070 610049BA        	   196: 	bsr			DisplayByte
01:00000074 43FA4BA4        	   197: 	lea			msg_core_start,a1
01:00000078 61003F78        	   198: 	bsr			DisplayString
01:0000007C 7201            	   199: 	moveq		#1,d1
01:0000007E 6176            	   200: 	bsr			UnlockSemaphore
                            	   201: do_nothing:	
01:00000080 60FE            	   202: 	bra			do_nothing
                            	   203: 
                            	   204: ;------------------------------------------------------------------------------
                            	   205: ; Initialize semaphores
                            	   206: ; - all semaphores are set to one.
                            	   207: ;
                            	   208: ; Parameters:
                            	   209: ;		<none>
                            	   210: ; Modifies:
                            	   211: ;		<none>
                            	   212: ; Returns:
                            	   213: ;		<none>
                            	   214: ;------------------------------------------------------------------------------
                            	   215: 
                            	   216: InitSemaphores:
01:00000082 48E7C080        	   217: 	movem.l	d0/d1/a0,-(a7)
01:00000086 41F9FD050000    	   218: 	lea			semamem,a0
01:0000008C 323C00FF        	   219: 	move.w	#255,d1
01:00000090 7001            	   220: 	moveq		#1,d0
                            	   221: .0001:
01:00000092 11404000        	   222: 	move.b	d0,$4000(a0)
01:00000096 41E80010        	   223: 	lea			16(a0),a0
01:0000009A 51C9FFF6        	   224: 	dbra		d1,.0001
01:0000009E 4CDF0103        	   225: 	movem.l	(a7)+,d0/d1/a0
01:000000A2 4E75            	   226: 	rts
                            	   227: 
                            	   228: ; -----------------------------------------------------------------------------
                            	   229: ; Test a semaphore to see if it is non-zero.
                            	   230: ;
                            	   231: ; Parameters:
                            	   232: ;		d1 semaphore number
                            	   233: ; -----------------------------------------------------------------------------
                            	   234: 
                            	   235: TestSemaphore:
01:000000A4 48E74080        	   236: 	movem.l	d1/a0,-(a7)			; save registers
01:000000A8 41F9FD050000    	   237: 	lea			semamem,a0			; point to semaphore memory
01:000000AE 4881            	   238: 	ext.w		d1							; make d1 word value
01:000000B0 E941            	   239: 	asl.w		#4,d1						; align to memory
01:000000B2 06414000        	   240: 	addi.w	#$4000,d1				; point to read / write memory
01:000000B6 4A301000        	   241: 	tst.b		(a0,d1.w)				; read (test) value for zero
01:000000BA 4CDF0102        	   242: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000BE 4E75            	   243: 	rts
                            	   244: 
                            	   245: ; -----------------------------------------------------------------------------
                            	   246: ; Parameters:
                            	   247: ;		d1 semaphore number
                            	   248: ;
                            	   249: ; Side Effects:
                            	   250: ;		increments semaphore, saturates at 255
                            	   251: ;
                            	   252: ; Returns:	
                            	   253: ; 	z flag set if semaphore was zero
                            	   254: ; -----------------------------------------------------------------------------
                            	   255: 
                            	   256: IncrementSemaphore:
01:000000C0 48E74080        	   257: 	movem.l	d1/a0,-(a7)			; save registers
01:000000C4 41F9FD050000    	   258: 	lea			semamem,a0			; point to semaphore memory
01:000000CA 4881            	   259: 	ext.w		d1							; make d1 word value
01:000000CC E941            	   260: 	asl.w		#4,d1						; align to memory
01:000000CE 4A301001        	   261: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:000000D2 4CDF0102        	   262: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000D6 4E75            	   263: 	rts
                            	   264: 	
                            	   265: ; -----------------------------------------------------------------------------
                            	   266: ; Parameters:
                            	   267: ;		d1 semaphore number
                            	   268: ;
                            	   269: ; Side Effects:
                            	   270: ;		decrements semaphore, saturates at zero
                            	   271: ;
                            	   272: ; Returns:	
                            	   273: ; 	z flag set if semaphore was zero
                            	   274: ; -----------------------------------------------------------------------------
                            	   275: 
                            	   276: DecrementSemaphore:
01:000000D8 48E74080        	   277: 	movem.l	d1/a0,-(a7)			; save registers
01:000000DC 41F9FD050000    	   278: 	lea			semamem,a0			; point to semaphore memory
01:000000E2 4881            	   279: 	ext.w		d1							; make d1 word value
01:000000E4 E941            	   280: 	asl.w		#4,d1						; align to memory
01:000000E6 4A301001        	   281: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:000000EA 4CDF0102        	   282: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000EE 4E75            	   283: 	rts
                            	   284: 
                            	   285: ; -----------------------------------------------------------------------------
                            	   286: ; Parameters:
                            	   287: ;		d1 semaphore number
                            	   288: ; -----------------------------------------------------------------------------
                            	   289: 
                            	   290: LockSemaphore:
                            	   291: .0001:
01:000000F0 61E6            	   292: 	bsr			DecrementSemaphore
01:000000F2 67FC            	   293: 	beq.s		.0001
01:000000F4 4E75            	   294: 	rts
                            	   295: 	
                            	   296: ; -----------------------------------------------------------------------------
                            	   297: ; Test a semaphore to see if it is non-zero.
                            	   298: ;
                            	   299: ; Parameters:
                            	   300: ;		d1 semaphore number
                            	   301: ; -----------------------------------------------------------------------------
                            	   302: 
                            	   303: UnlockSemaphore:
01:000000F6 48E74080        	   304: 	movem.l	d1/a0,-(a7)			; save registers
01:000000FA 41F9FD050000    	   305: 	lea			semamem,a0			; point to semaphore memory
01:00000100 0281000000FF    	   306: 	andi.l	#255,d1					; make d1 word value
01:00000106 E941            	   307: 	asl.w		#4,d1						; align to memory
01:00000108 06414000        	   308: 	addi.w	#$4000,d1				; point to read / write memory
01:0000010C 11BC00011000    	   309: 	move.b	#1,(a0,d1.w)		; write one to unlock
01:00000112 4CDF0102        	   310: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000116 4E75            	   311: 	rts
                            	   312: 
                            	   313: ; -----------------------------------------------------------------------------
                            	   314: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   315: ; -----------------------------------------------------------------------------
                            	   316: 
                            	   317: Delay3s:
01:00000118 203C002DC6C0    	   318: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:0000011E 41F9FD0FFF00    	   319: 	lea			leds,a0				; a0 = address of LED output register
01:00000124 6002            	   320: 	bra			dly3s1				; branch to the loop
                            	   321: dly3s2:	
01:00000126 4840            	   322: 	swap		d0						; loop is larger than 16-bits
                            	   323: dly3s1:
01:00000128 2200            	   324: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:0000012A E199            	   325: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:0000012C E199            	   326: 	rol.l		#8,d1
01:0000012E 1081            	   327: 	move.b	d1,(a0)				; set the LEDs
01:00000130 51C8FFF6        	   328: 	dbra		d0,dly3s1			; decrement and branch back
01:00000134 4840            	   329: 	swap		d0
01:00000136 51C8FFEE        	   330: 	dbra		d0,dly3s2
01:0000013A 4E75            	   331: 	rts
                            	   332: 
                            	   333: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
01:0000013C 61000FDE        	    84: 	bsr op_MOVEP
01:00000140 610000F6        	    85: 	bsr	op_ORI_TO_CCR
01:00000144 61000114        	    86: 	bsr	op_ORI_TO_SR
01:00000148 61000132        	    87: 	bsr	op_EORI_TO_CCR
01:0000014C 61000154        	    88: 	bsr	op_EORI_TO_SR
01:00000150 61000176        	    89: 	bsr	op_ANDI_TO_CCR
01:00000154 61000198        	    90: 	bsr	op_ANDI_TO_SR
01:00000158 610001BA        	    91: 	bsr	op_BTST
01:0000015C 61000560        	    92: 	bsr	op_BCHG
01:00000160 610008C4        	    93: 	bsr	op_BCLR
01:00000164 61000C10        	    94: 	bsr	op_BSET
01:00000168 61000FB2        	    95: 	bsr op_MOVEP
01:0000016C 61001042        	    96: 	bsr op_BOOL_I
01:00000170 6100123A        	    97: 	bsr op_CMP_I
01:00000174 61001422        	    98: 	bsr op_ADD_I
01:00000178 610015A4        	    99: 	bsr op_SUB_I
01:0000017C 61001726        	   100: 	bsr op_MOVE
01:00000180 6100192E        	   101: 	bsr op_MOVE_xxx_FLAGS
01:00000184 61001B1E        	   102: 	bsr op_EXT
01:00000188 61001B46        	   103: 	bsr op_SWAP
01:0000018C 61001B58        	   104: 	bsr op_LEAPEA
01:00000190 61001C00        	   105: 	bsr op_TAS
01:00000194 61001C24        	   106: 	bsr op_TST
01:00000198 61001C66        	   107: 	bsr op_LINKS
01:0000019C 61001C80        	   108: 	bsr op_MOVE_USP
                            	   109: *	bsr op_CHK
01:000001A0 61001CC6        	   110: 	bsr op_NEGS
01:000001A4 61002050        	   111: 	bsr op_MOVEM
                            	   112: ** fails
                            	   113: *	bsr op_ABCD
                            	   114: *	bsr op_SBCD
                            	   115: *	bsr op_NBCD
                            	   116: *	bsr op_TRAPV
01:000001A8 61002614        	   117: 	bsr op_RTR
01:000001AC 610011C8        	   118: 	bsr op_BSR
01:000001B0 61002630        	   119: 	bsr op_BCC
01:000001B4 610026AC        	   120: 	bsr op_DBCC
01:000001B8 610026CE        	   121: 	bsr op_SCC
01:000001BC 610026F2        	   122: 	bsr op_ADDQ
01:000001C0 610027A8        	   123: 	bsr op_SUBQ
01:000001C4 6100285E        	   124: 	bsr op_MOVEQ
                            	   125: *** fails
                            	   126: *	bsr op_DIVU
                            	   127: *	bsr op_DIVS
01:000001C8 6100291A        	   128: 	bsr op_OR
01:000001CC 61002A00        	   129: 	bsr op_AND
01:000001D0 61002AE6        	   130: 	bsr op_EOR
01:000001D4 61002B58        	   131: 	bsr op_CMP
01:000001D8 61002BCA        	   132: 	bsr op_CMPA
01:000001DC 61002C2C        	   133: 	bsr op_CMPM
01:000001E0 61002CCE        	   134: 	bsr op_ADD
01:000001E4 61002DB4        	   135: 	bsr op_SUB
01:000001E8 61002E9A        	   136: 	bsr op_ADDA
01:000001EC 61002EE2        	   137: 	bsr op_SUBA
01:000001F0 61002F2A        	   138: 	bsr op_ADDX
01:000001F4 61003036        	   139: 	bsr op_SUBX
01:000001F8 61003142        	   140: 	bsr op_MULU
01:000001FC 6100318A        	   141: 	bsr op_MULS
01:00000200 610031D2        	   142: 	bsr op_EXG
01:00000204 6100323C        	   143: 	bsr op_ROx
01:00000208 6100346E        	   144: 	bsr op_ROXx
01:0000020C 610036A0        	   145: 	bsr op_SHIFTS
01:00000210 610038DE        	   146: 	bsr op_SHIFTS2
                            	   147: 
01:00000214 4E75            	   148: 	rts
                            	   149: 	bra ALL_DONE
                            	   150: 
                            	   151: * Loop here when all tests pass
                            	   152: *
                            	   153: 
01:00000216 60FE            	   154: ALL_DONE: bra.s ALL_DONE
                            	   155: 
01:00000218 263C33333333    	   156: BSR_FAR1:       move.l #$33333333,d3
01:0000021E 4E75            	   157:                 rts
                            	   158: 
                            	   159: ;	moveq		#-1,d0
                            	   160: ;	move.l	d0,$FD0FFF00
                            	   161: ;do_nothing:
                            	   162: ;	bra			*		
                            	   163: 
                            	   164: 
                            	   165: * Exception Vector = 6   CHK Instruction
                            	   166: *
                            	   167: 	align	4
                            	   168: EXCEPTION_6:
01:00000220 2C3CEEEE0006    	   169: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000226 4E73            	   170: 	rte
                            	   171: 
                            	   172: * Exception Vector = 7   TRAPV Instruction
                            	   173: *
                            	   174: 	align	4
                            	   175: EXCEPTION_7:
01:00000230 203C12345678    	   176: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000236 4E73            	   177: 	rte
                            	   178: 
                            	   179: ;-----------------------------------------------------------
                            	   180: ;-----------------------------------------------------------
                            	   181: ; OPCODE : ORI_TO_CCR
                            	   182: ;-----------------------------------------------------------
                            	   183: ;-----------------------------------------------------------
                            	   184: op_ORI_TO_CCR:
                            	   185: 
01:00000238 003C00FF        	   186:     ori.b #$FF,CCR
01:0000023C 6AFE            	   187:     bpl.s *                   ; branch if Z clear
01:0000023E 66FE            	   188:     bne.s *                   ; branch if N clear
01:00000240 68FE            	   189:     bvc.s *                   ; branch if V clear
01:00000242 64FE            	   190:     bcc.s *                   ; branch if C clear
                            	   191: 
01:00000244 44FC0000        	   192:     move #$00,CCR
01:00000248 003C0000        	   193:     ori.b #$00,CCR
01:0000024C 67FE            	   194:     beq.s *                   ; branch if Z set
01:0000024E 6BFE            	   195:     bmi.s *                   ; branch if N set
01:00000250 69FE            	   196:     bvs.s *                   ; branch if V set
01:00000252 65FE            	   197:     bcs.s *                   ; branch if C set
                            	   198: 
01:00000254 46FC2700        	   199:     move #$2700,SR          ; Put flags back to initial value
                            	   200: 
01:00000258 4E75            	   201:     rts
                            	   202: 
                            	   203: ;-----------------------------------------------------------
                            	   204: ;-----------------------------------------------------------
                            	   205: ; OPCODE : ORI_TO_SR
                            	   206: ;-----------------------------------------------------------
                            	   207: ;-----------------------------------------------------------
                            	   208: 
                            	   209: op_ORI_TO_SR:
                            	   210: 
01:0000025A 007C2FFF        	   211:     ori.w #$2FFF,SR
01:0000025E 6AFE            	   212:     bpl.s *                   * branch if Z clear
01:00000260 66FE            	   213:     bne.s *                   * branch if N clear
01:00000262 68FE            	   214:     bvc.s *                   * branch if V clear
01:00000264 64FE            	   215:     bcc.s *                   * branch if C clear
                            	   216: 
01:00000266 46FC2000        	   217:     move #$2000,SR
01:0000026A 007C0000        	   218:     ori.w #$0000,SR
01:0000026E 67FE            	   219:     beq.s *                   * branch if Z set
01:00000270 6BFE            	   220:     bmi.s *                   * branch if N set
01:00000272 69FE            	   221:     bvs.s *                   * branch if V set
01:00000274 65FE            	   222:     bcs.s *                   * branch if C set
                            	   223: 
01:00000276 46FC2700        	   224:     move #$2700,SR         * Put flags back to initial value
                            	   225: 
01:0000027A 4E75            	   226:     rts
                            	   227: ; 
                            	   228: ;-----------------------------------------------------------
                            	   229: ;-----------------------------------------------------------
                            	   230: ; OPCODE : EORI_TO_CCR
                            	   231: ;-----------------------------------------------------------
                            	   232: ;-----------------------------------------------------------
                            	   233: op_EORI_TO_CCR:
                            	   234: 
01:0000027C 44FC0000        	   235:     move #$00,CCR
01:00000280 0A3C00FF        	   236:     eori.b #$FF,CCR
01:00000284 6AFE            	   237:     bpl.s *                   ; branch if Z clear
01:00000286 66FE            	   238:     bne.s *                   ; branch if N clear
01:00000288 68FE            	   239:     bvc.s *                   ; branch if V clear
01:0000028A 64FE            	   240:     bcc.s *                   ; branch if C clear
                            	   241: 
01:0000028C 44FC0000        	   242:     move #$00,CCR
01:00000290 0A3C0000        	   243:     eori.b #$00,CCR
01:00000294 67FE            	   244:     beq.s *                   ; branch if Z set
01:00000296 6BFE            	   245:     bmi.s *                   ; branch if N set
01:00000298 69FE            	   246:     bvs.s *                   ; branch if V set
01:0000029A 65FE            	   247:     bcs.s *                   ; branch if C set
                            	   248: 
01:0000029C 46FC2700        	   249:     move #$2700,SR           ; Put flags back to initial value
                            	   250: 
01:000002A0 4E75            	   251:     rts
                            	   252: 
                            	   253: 
                            	   254: 
                            	   255: *-----------------------------------------------------------
                            	   256: *-----------------------------------------------------------
                            	   257: * OPCODE : EORI_TO_SR
                            	   258: *-----------------------------------------------------------
                            	   259: *-----------------------------------------------------------
                            	   260: op_EORI_TO_SR:
                            	   261: 
01:000002A2 46FC2000        	   262:     move #$2000,SR
01:000002A6 0A7C0FFF        	   263:     eori.w #$0FFF,SR
01:000002AA 6AFE            	   264:     bpl.s *                   * branch if Z clear
01:000002AC 66FE            	   265:     bne.s *                   * branch if N clear
01:000002AE 68FE            	   266:     bvc.s *                   * branch if V clear
01:000002B0 64FE            	   267:     bcc.s *                   * branch if C clear
                            	   268: 
01:000002B2 46FC2000        	   269:     move #$2000,SR
01:000002B6 0A7C0000        	   270:     eori.w #$0000,SR
01:000002BA 67FE            	   271:     beq.s *                   * branch if Z set
01:000002BC 6BFE            	   272:     bmi.s *                   * branch if N set
01:000002BE 69FE            	   273:     bvs.s *                   * branch if V set
01:000002C0 65FE            	   274:     bcs.s *                   * branch if C set
                            	   275: 
01:000002C2 46FC2700        	   276:     move #$2700,SR          * Put flags back to initial value
                            	   277: 
01:000002C6 4E75            	   278:     rts
                            	   279: 
                            	   280: 
                            	   281: 
                            	   282: *-----------------------------------------------------------
                            	   283: *-----------------------------------------------------------
                            	   284: * OPCODE : ANDI_TO_CCR
                            	   285: *-----------------------------------------------------------
                            	   286: *-----------------------------------------------------------
                            	   287: op_ANDI_TO_CCR:
                            	   288: 
01:000002C8 44FC00FF        	   289:     move #$FF,CCR
01:000002CC 023C00FF        	   290:     andi.b #$FF,CCR
01:000002D0 6AFE            	   291:     bpl.s *                   * branch if Z clear
01:000002D2 66FE            	   292:     bne.s *                   * branch if N clear
01:000002D4 68FE            	   293:     bvc.s *                   * branch if V clear
01:000002D6 64FE            	   294:     bcc.s *                   * branch if C clear
                            	   295: 
01:000002D8 44FC00FF        	   296:     move #$FF,CCR
01:000002DC 023C0000        	   297:     andi.b #$00,CCR
01:000002E0 67FE            	   298:     beq.s *                   * branch if Z set
01:000002E2 6BFE            	   299:     bmi.s *                   * branch if N set
01:000002E4 69FE            	   300:     bvs.s *                   * branch if V set
01:000002E6 65FE            	   301:     bcs.s *                   * branch if C set
                            	   302: 
01:000002E8 46FC2700        	   303:     move #$2700,SR           * Put flags back to initial value
                            	   304: 
01:000002EC 4E75            	   305:     rts
                            	   306: 
                            	   307: 
                            	   308: 
                            	   309: *-----------------------------------------------------------
                            	   310: *-----------------------------------------------------------
                            	   311: * OPCODE : ANDI_TO_SR
                            	   312: *-----------------------------------------------------------
                            	   313: *-----------------------------------------------------------
                            	   314: op_ANDI_TO_SR:
01:000002EE 46FC20FF        	   315:     move #$20FF,SR
01:000002F2 027CFFFF        	   316:     andi.w #$FFFF,SR
01:000002F6 6AFE            	   317:     bpl.s *                   * branch if Z clear
01:000002F8 66FE            	   318:     bne.s *                   * branch if N clear
01:000002FA 68FE            	   319:     bvc.s *                   * branch if V clear
01:000002FC 64FE            	   320:     bcc.s *                   * branch if C clear
                            	   321: 
01:000002FE 46FC20FF        	   322:     move #$20FF,SR
01:00000302 027CFF00        	   323:     andi.w #$FF00,SR
01:00000306 67FE            	   324:     beq.s *                   * branch if Z set
01:00000308 6BFE            	   325:     bmi.s *                   * branch if N set
01:0000030A 69FE            	   326:     bvs.s *                   * branch if V set
01:0000030C 65FE            	   327:     bcs.s *                   * branch if C set
                            	   328: 
01:0000030E 46FC2700        	   329:     move #$2700,SR           * Put flags back to initial value
                            	   330: 
01:00000312 4E75            	   331:     rts
                            	   332: 
                            	   333: 
                            	   334: *-----------------------------------------------------------
                            	   335: *-----------------------------------------------------------
                            	   336: * OPCODE : BTST
                            	   337: *-----------------------------------------------------------
                            	   338: *-----------------------------------------------------------
                            	   339: op_BTST:
                            	   340: 
                            	   341: *  Bit Number.s Static
                            	   342: 
                            	   343: *             EA = Dn  - LONG only
01:00000314 203C80000001    	   344:             move.l #$80000001,d0      * populate test data
01:0000031A 08000000        	   345:             btst.l #0,d0
01:0000031E 67FE            	   346:             beq.s *               * branch if Z set
01:00000320 08000001        	   347:             btst.l #1,d0              *
01:00000324 66FE            	   348:             bne.s *               * branch if Z clear
01:00000326 0800001F        	   349:             btst.l #31,d0             *
01:0000032A 67FE            	   350:             beq.s *               * branch if Z set
                            	   351: 
                            	   352: 
                            	   353: *             EA = (An)  - BYTE only
01:0000032C 307C0100        	   354:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000330 10BC0081        	   355:             move.b #$81,(a0)          * populate test data
01:00000334 1210            	   356:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000336 08100000        	   357:             btst.b #0,(a0)
01:0000033A 67FE            	   358:             beq.s *               * branch if Z set
01:0000033C 08100001        	   359:             btst.b #1,(a0)            *
01:00000340 66FE            	   360:             bne.s *               * branch if Z clear
01:00000342 08100007        	   361:             btst.b #7,(a0)            *
01:00000346 67FE            	   362:             beq.s *               * branch if Z set
                            	   363: 
                            	   364: 
                            	   365: *             EA = (An)+  - BYTE only
01:00000348 307C0100        	   366:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000034C 10FC0001        	   367:             move.b #$01,(a0)+         * populate test data
01:00000350 10FC00FC        	   368:             move.b #$FC,(a0)+         * populate test data
01:00000354 10FC0080        	   369:             move.b #$80,(a0)+         * populate test data
01:00000358 307C0100        	   370:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000035C 08180000        	   371:             btst.b #0,(a0)+
01:00000360 67FE            	   372:             beq.s *               * branch if Z set
01:00000362 08180001        	   373:             btst.b #1,(a0)+           *
01:00000366 66FE            	   374:             bne.s *               * branch if Z clear
01:00000368 08180007        	   375:             btst.b #7,(a0)+           *
01:0000036C 67FE            	   376:             beq.s *               * branch if Z set
                            	   377: 
                            	   378: 
                            	   379: *             EA = -(An)  - BYTE only
01:0000036E 307C0100        	   380:             move.l #$00000100,a0      * point to memory to address
01:00000372 10FC0080        	   381:             move.b #$80,(a0)+         * populate test data
01:00000376 10FC00FC        	   382:             move.b #$FC,(a0)+         * populate test data
01:0000037A 10FC0001        	   383:             move.b #$01,(a0)+         * populate test data
01:0000037E 307C0103        	   384:             move.l #$00000103,a0      * point to memory to address
01:00000382 08200000        	   385:             btst.b #0,-(a0)
01:00000386 67FE            	   386:             beq.s *               * branch if Z set
01:00000388 08200001        	   387:             btst.b #1,-(a0)           *
01:0000038C 66FE            	   388:             bne.s *               * branch if Z clear
01:0000038E 08200007        	   389:             btst.b #7,-(a0)           *
01:00000392 67FE            	   390:             beq.s *               * branch if Z set
                            	   391: 
                            	   392: 
                            	   393: *             EA = n(An)  - BYTE only
01:00000394 307C0100        	   394:             move.l #$00000100,a0      * point to memory to address
01:00000398 10FC0001        	   395:             move.b #$01,(a0)+         * populate test data
01:0000039C 10FC00FC        	   396:             move.b #$FC,(a0)+         * populate test data
01:000003A0 10FC0080        	   397:             move.b #$80,(a0)+         * populate test data
01:000003A4 307C0100        	   398:             move.l #$00000100,a0      * point to memory to address
01:000003A8 08100000        	   399:             btst.b #0,0(a0)
01:000003AC 67FE            	   400:             beq.s *               * branch if Z set
01:000003AE 082800010001    	   401:             btst.b #1,1(a0)           *
01:000003B4 66FE            	   402:             bne.s *               * branch if Z clear
01:000003B6 082800070002    	   403:             btst.b #7,2(a0)           *
01:000003BC 67FE            	   404:             beq.s *               * branch if Z set
                            	   405: 
                            	   406: 
                            	   407: *             EA = n(An,R.W)  - BYTE only
01:000003BE 307C0100        	   408:             move.l #$00000100,a0      * point to memory to address
01:000003C2 93C9            	   409:             move.l #$00000000,a1      * point to memory to address
01:000003C4 347C0001        	   410:             move.l #$00000001,a2      * point to memory to address
01:000003C8 7000            	   411:             moveq  #$00000000,d0      * point to memory to address
01:000003CA 7201            	   412:             moveq  #$00000001,d1      * point to memory to address
01:000003CC 083000000000    	   413:             btst.b #0,0(a0,d0.w)
01:000003D2 67FE            	   414:             beq.s *               * branch if Z set
01:000003D4 083000011000    	   415:             btst.b #1,0(a0,d1.w)      *
01:000003DA 66FE            	   416:             bne.s *               * branch if Z clear
01:000003DC 083000071001    	   417:             btst.b #7,1(a0,d1.w)      *
01:000003E2 67FE            	   418:             beq.s *               * branch if Z set
                            	   419: *             EA = n(An,R.L)  - BYTE only
01:000003E4 083000000800    	   420:             btst.b #0,0(a0,d0.l)
01:000003EA 67FE            	   421:             beq.s *               * branch if Z set
01:000003EC 083000011800    	   422:             btst.b #1,0(a0,d1.l)      *
01:000003F2 66FE            	   423:             bne.s *               * branch if Z clear
01:000003F4 083000071801    	   424:             btst.b #7,1(a0,d1.l)      *
01:000003FA 67FE            	   425:             beq.s *               * branch if Z set
                            	   426: *             EA = n(An,A.W)  - BYTE only
01:000003FC 083000009000    	   427:             btst.b #0,0(a0,a1.w)
01:00000402 67FE            	   428:             beq.s *               * branch if Z set
01:00000404 08300001A000    	   429:             btst.b #1,0(a0,a2.w)      *
01:0000040A 66FE            	   430:             bne.s *               * branch if Z clear
01:0000040C 08300007A001    	   431:             btst.b #7,1(a0,a2.w)      *
01:00000412 67FE            	   432:             beq.s *               * branch if Z set
                            	   433: *             EA = n(An,A.L)  - BYTE only
01:00000414 083000009800    	   434:             btst.b #0,0(a0,a1.l)
01:0000041A 67FE            	   435:             beq.s *               * branch if Z set
01:0000041C 08300001A800    	   436:             btst.b #1,0(a0,a2.l)      *
01:00000422 66FE            	   437:             bne.s *               * branch if Z clear
01:00000424 08300007A801    	   438:             btst.b #7,1(a0,a2.l)      *
01:0000042A 67FE            	   439:             beq.s *               * branch if Z set
                            	   440: 
                            	   441: 
                            	   442: *             EA = x.W  - BYTE only
01:0000042C 083800000100    	   443:             btst.b #0,$0100
01:00000432 67FE            	   444:             beq.s *               * branch if Z set
01:00000434 083800010101    	   445:             btst.b #1,$0101           *
01:0000043A 66FE            	   446:             bne.s *               * branch if Z clear
01:0000043C 083800070102    	   447:             btst.b #7,$0102           *
01:00000442 67FE            	   448:             beq.s *               * branch if Z set
                            	   449: 
                            	   450: 
                            	   451: *             EA = x.L  - BYTE only
01:00000444 207C0000F100    	   452:             move.l #$F100,a0      * point to memory to address 0x100
01:0000044A 10FC0001        	   453:             move.b #$01,(a0)+         * populate test data
01:0000044E 10FC00FC        	   454:             move.b #$FC,(a0)+         * populate test data
01:00000452 10FC0080        	   455:             move.b #$80,(a0)+         * populate test data
01:00000456 083900000000F100	   456:             btst.b #0,$F100
01:0000045E 67FE            	   457:             beq.s *               * branch if Z set
01:00000460 083900010000F101	   458:             btst.b #1,$F101       *
01:00000468 66FE            	   459:             bne.s *               * branch if Z clear
01:0000046A 083900070000F102	   460:             btst.b #7,$F102       *
01:00000472 67FE            	   461:             beq.s *               * branch if Z set
                            	   462: 
                            	   463: 
                            	   464: *             EA = x(PC)  - BYTE only
01:00000474 4BFAFE9E        	   465:             lea op_BTST(pc),a5
01:00000478 083A0000FE98    	   466:             btst.b #0,op_BTST(pc)
01:0000047E 66FE            	   467:             bne.s *               * branch if Z clear
01:00000480 083A0003001A    	   468:             btst.b #3,op_BTST0(pc)     *
01:00000486 67FE            	   469:             beq.s *               * branch if Z set
01:00000488 083A00060074    	   470:             btst.b #6,op_BTST12(pc)    *
01:0000048E 67FE            	   471:             beq.s *               * branch if Z set
                            	   472: 
                            	   473: 
                            	   474: *             EA = n(PC,R.W)  - BYTE only
01:00000490 307C0100        	   475:             move.l #$00000100,a0      * point to memory to address
01:00000494 93C9            	   476:             move.l #$00000000,a1      * point to memory to address
01:00000496 347C0001        	   477:             move.l #$00000001,a2      * point to memory to address
01:0000049A 7000            	   478:             moveq  #$00000000,d0      * point to memory to address
01:0000049C 7201            	   479:             moveq  #$00000001,d1      * point to memory to address
                            	   480: 
01:0000049E 083B000000FC    	   481: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:000004A4 66FE            	   482:             bne.s *               * branch if Z clear
                            	   483: 
01:000004A6 4BFB1002        	   484:             lea op_BTST1(pc,d1.w),a5
01:000004AA 083B000110FC    	   485: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:000004B0 67FE            	   486:             beq.s *               * branch if Z set
01:000004B2 083B000710FC    	   487: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:000004B8 66FE            	   488:             bne.s *               * branch if Z clear
                            	   489: *             EA = n(PC,R.L)  - BYTE only
01:000004BA 083B000008FC    	   490: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:000004C0 66FE            	   491:             bne.s *               * branch if Z clear
01:000004C2 083B000118FC    	   492: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:000004C8 67FE            	   493:             beq.s *               * branch if Z set
01:000004CA 083B000718FC    	   494: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:000004D0 66FE            	   495:             bne.s *               * branch if Z clear
                            	   496: *             EA = n(PC,A.W)  - BYTE only
01:000004D2 083B000090FC    	   497: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:000004D8 66FE            	   498:             bne.s *               * branch if Z clear
01:000004DA 083B0001A0FC    	   499: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:000004E0 67FE            	   500:             beq.s *               * branch if Z set
01:000004E2 083B0007A0FC    	   501: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:000004E8 66FE            	   502:             bne.s *               * branch if Z clear
                            	   503: *             EA = n(PC,A.L)  - BYTE only
01:000004EA 083B000098FC    	   504: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:000004F0 66FE            	   505:             bne.s *               * branch if Z clear
01:000004F2 083B0001A8FC    	   506: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:000004F8 67FE            	   507:             beq.s *               * branch if Z set
01:000004FA 083B0007A8FC    	   508: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:00000500 66FE            	   509: op_BTST12:  bne.s *               * branch if Z clear
                            	   510: 
                            	   511: 
                            	   512: 
                            	   513: * Bit Number.s Dynamic
                            	   514: 
                            	   515: *             EA = Dn  - LONG only
01:00000502 203C80000001    	   516:             move.l #$80000001,d0      * populate test data
01:00000508 7A00            	   517:             move.l #0,d5              * populate bit.s number to test
01:0000050A 7C01            	   518:             move.l #1,d6              * populate bit.s number to test
01:0000050C 7E1F            	   519:             move.l #31,d7              * populate bit.s number to test
                            	   520: 
01:0000050E 0B00            	   521:             btst.l d5,d0
01:00000510 67FE            	   522:             beq.s *               * branch if Z set
01:00000512 0D00            	   523:             btst.l d6,d0              *
01:00000514 66FE            	   524:             bne.s *               * branch if Z clear
01:00000516 0F00            	   525:             btst.l d7,d0             *
01:00000518 67FE            	   526:             beq.s *               * branch if Z set
                            	   527: 
                            	   528: 
                            	   529: *             EA = (An)  - BYTE only
01:0000051A 7A00            	   530:             move.l #0,d5              * populate bit.s number to test
01:0000051C 7C01            	   531:             move.l #1,d6              * populate bit.s number to test
01:0000051E 7E07            	   532:             move.l #7,d7              * populate bit.s number to test
01:00000520 307C0100        	   533:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000524 10BC0081        	   534:             move.b #$81,(a0)          * populate test data
01:00000528 1210            	   535:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000052A 0B10            	   536:             btst.b d5,(a0)
01:0000052C 67FE            	   537:             beq.s *               * branch if Z set
01:0000052E 0D10            	   538:             btst.b d6,(a0)            *
01:00000530 66FE            	   539:             bne.s *               * branch if Z clear
01:00000532 0F10            	   540:             btst.b d7,(a0)            *
01:00000534 67FE            	   541:             beq.s *               * branch if Z set
                            	   542: 
                            	   543: * ---
                            	   544: 
                            	   545: 
                            	   546: *             EA = (An)+  - BYTE only
01:00000536 307C0100        	   547:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000053A 10FC0001        	   548:             move.b #$01,(a0)+         * populate test data
01:0000053E 10FC00FC        	   549:             move.b #$FC,(a0)+         * populate test data
01:00000542 10FC0080        	   550:             move.b #$80,(a0)+         * populate test data
01:00000546 307C0100        	   551:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000054A 0B18            	   552:             btst.b d5,(a0)+
01:0000054C 67FE            	   553:             beq.s *               * branch if Z set
01:0000054E 0D18            	   554:             btst.b d6,(a0)+           *
01:00000550 66FE            	   555:             bne.s *               * branch if Z clear
01:00000552 0F18            	   556:             btst.b d7,(a0)+           *
01:00000554 67FE            	   557:             beq.s *               * branch if Z set
                            	   558: 
                            	   559: 
                            	   560: *             EA = -(An)  - BYTE only
01:00000556 307C0100        	   561:             move.l #$00000100,a0      * point to memory to address
01:0000055A 10FC0080        	   562:             move.b #$80,(a0)+         * populate test data
01:0000055E 10FC00FC        	   563:             move.b #$FC,(a0)+         * populate test data
01:00000562 10FC0001        	   564:             move.b #$01,(a0)+         * populate test data
01:00000566 307C0103        	   565:             move.l #$00000103,a0      * point to memory to address
01:0000056A 0B20            	   566:             btst.b d5,-(a0)
01:0000056C 67FE            	   567:             beq.s *               * branch if Z set
01:0000056E 0D20            	   568:             btst.b d6,-(a0)           *
01:00000570 66FE            	   569:             bne.s *               * branch if Z clear
01:00000572 0F20            	   570:             btst.b d7,-(a0)           *
01:00000574 67FE            	   571:             beq.s *               * branch if Z set
                            	   572: 
                            	   573: 
                            	   574: *             EA = n(An)  - BYTE only
01:00000576 307C0100        	   575:             move.l #$00000100,a0      * point to memory to address
01:0000057A 10FC0001        	   576:             move.b #$01,(a0)+         * populate test data
01:0000057E 10FC00FC        	   577:             move.b #$FC,(a0)+         * populate test data
01:00000582 10FC0080        	   578:             move.b #$80,(a0)+         * populate test data
01:00000586 307C0100        	   579:             move.l #$00000100,a0      * point to memory to address
01:0000058A 0B10            	   580:             btst.b d5,0(a0)
01:0000058C 67FE            	   581:             beq.s *               * branch if Z set
01:0000058E 0D280001        	   582:             btst.b d6,1(a0)           *
01:00000592 66FE            	   583:             bne.s *               * branch if Z clear
01:00000594 0F280002        	   584:             btst.b d7,2(a0)           *
01:00000598 67FE            	   585:             beq.s *               * branch if Z set
                            	   586: 
                            	   587: 
                            	   588: *             EA = n(An,R.W)  - BYTE only
01:0000059A 307C0100        	   589:             move.l #$00000100,a0      * point to memory to address
01:0000059E 93C9            	   590:             move.l #$00000000,a1      * point to memory to address
01:000005A0 347C0001        	   591:             move.l #$00000001,a2      * point to memory to address
01:000005A4 7000            	   592:             moveq  #$00000000,d0      * point to memory to address
01:000005A6 7201            	   593:             moveq  #$00000001,d1      * point to memory to address
01:000005A8 0B300000        	   594:             btst.b d5,0(a0,d0.w)
01:000005AC 67FE            	   595:             beq.s *               * branch if Z set
01:000005AE 0D301000        	   596:             btst.b d6,0(a0,d1.w)      *
01:000005B2 66FE            	   597:             bne.s *               * branch if Z clear
01:000005B4 0F301001        	   598:             btst.b d7,1(a0,d1.w)      *
01:000005B8 67FE            	   599:             beq.s *               * branch if Z set
                            	   600: *             EA = n(An,R.L)  - BYTE only
01:000005BA 0B300800        	   601:             btst.b d5,0(a0,d0.l)
01:000005BE 67FE            	   602:             beq.s *               * branch if Z set
01:000005C0 0D301800        	   603:             btst.b d6,0(a0,d1.l)      *
01:000005C4 66FE            	   604:             bne.s *               * branch if Z clear
01:000005C6 0F301801        	   605:             btst.b d7,1(a0,d1.l)      *
01:000005CA 67FE            	   606:             beq.s *               * branch if Z set
                            	   607: *             EA = n(An,A.W)  - BYTE only
01:000005CC 0B309000        	   608:             btst.b d5,0(a0,a1.w)
01:000005D0 67FE            	   609:             beq.s *               * branch if Z set
01:000005D2 0D30A000        	   610:             btst.b d6,0(a0,a2.w)      *
01:000005D6 66FE            	   611:             bne.s *               * branch if Z clear
01:000005D8 0F30A001        	   612:             btst.b d7,1(a0,a2.w)      *
01:000005DC 67FE            	   613:             beq.s *               * branch if Z set
                            	   614: *             EA = n(An,A.L)  - BYTE only
01:000005DE 0B309800        	   615:             btst.b d5,0(a0,a1.l)
01:000005E2 67FE            	   616:             beq.s *               * branch if Z set
01:000005E4 0D30A800        	   617:             btst.b d6,0(a0,a2.l)      *
01:000005E8 66FE            	   618:             bne.s *               * branch if Z clear
01:000005EA 0F30A801        	   619:             btst.b d7,1(a0,a2.l)      *
01:000005EE 67FE            	   620:             beq.s *               * branch if Z set
                            	   621: 
                            	   622: 
                            	   623: *             EA = x.W  - BYTE only
01:000005F0 0B380100        	   624:             btst.b d5,$0100
01:000005F4 67FE            	   625:             beq.s *               * branch if Z set
01:000005F6 0D380101        	   626:             btst.b d6,$0101           *
01:000005FA 66FE            	   627:             bne.s *               * branch if Z clear
01:000005FC 0F380102        	   628:             btst.b d7,$0102           *
01:00000600 67FE            	   629:             beq.s *               * branch if Z set
                            	   630: 
                            	   631: 
                            	   632: *             EA = x.L  - BYTE only
01:00000602 207C0000F100    	   633:             move.l #$F100,a0      * point to memory to address 0x100
01:00000608 10FC0001        	   634:             move.b #$01,(a0)+         * populate test data
01:0000060C 10FC00FC        	   635:             move.b #$FC,(a0)+         * populate test data
01:00000610 10FC0080        	   636:             move.b #$80,(a0)+         * populate test data
01:00000614 0B390000F100    	   637:             btst.b d5,$F100
01:0000061A 67FE            	   638:             beq.s *               * branch if Z set
01:0000061C 0D390000F101    	   639:             btst.b d6,$F101       *
01:00000622 66FE            	   640:             bne.s *               * branch if Z clear
01:00000624 0F390000F102    	   641:             btst.b d7,$F102       *
01:0000062A 67FE            	   642:             beq.s *               * branch if Z set
                            	   643: 
                            	   644: 
                            	   645: *             EA = x(PC)  - BYTE only
01:0000062C 7C03            	   646:             move.l #3,d6              * populate bit.s number to test
01:0000062E 7E06            	   647:             move.l #6,d7              * populate bit.s number to test
01:00000630 4BFAFCE2        	   648:             lea op_BTST(pc),a5
01:00000634 0B3AFCDE        	   649:             btst.b d5,op_BTST(pc)
01:00000638 66FE            	   650:             bne.s *               * branch if Z clear
01:0000063A 0D3AFE62        	   651:             btst.b d6,op_BTST0(pc)     *
01:0000063E 67FE            	   652:             beq.s *               * branch if Z set
01:00000640 0F3AFEBE        	   653:             btst.b d7,op_BTST12(pc)    *
01:00000644 67FE            	   654:             beq.s *               * branch if Z set
                            	   655: 
                            	   656: 
                            	   657: *             EA = n(PC,R.W)  - BYTE only
01:00000646 307C0100        	   658:             move.l #$00000100,a0      * point to memory to address
01:0000064A 93C9            	   659:             move.l #$00000000,a1      * point to memory to address
01:0000064C 347C0001        	   660:             move.l #$00000001,a2      * point to memory to address
01:00000650 7000            	   661:             moveq  #$00000000,d0      * point to memory to address
01:00000652 7201            	   662:             moveq  #$00000001,d1      * point to memory to address
01:00000654 7C01            	   663:             move.l #1,d6              * populate bit.s number to test
01:00000656 7E07            	   664:             move.l #7,d7              * populate bit.s number to test
                            	   665: 
01:00000658 0B3B00FE        	   666: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:0000065C 67FE            	   667:             beq.s *               * branch if Z set
01:0000065E 4BFB1002        	   668:             lea op_BTST21(pc,d1.w),a5
01:00000662 0D3B10FE        	   669: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:00000666 67FE            	   670:             beq.s *               * branch if Z set
01:00000668 0F3B10FE        	   671: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:0000066C 66FE            	   672:             bne.s *               * branch if Z clear
                            	   673: *             EA = n(PC,R.L)  - BYTE only
01:0000066E 0B3B08FE        	   674: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:00000672 67FE            	   675:             beq.s *               * branch if Z set
01:00000674 0D3B18FE        	   676: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:00000678 67FE            	   677:             beq.s *               * branch if Z set
01:0000067A 0F3B18FE        	   678: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:0000067E 66FE            	   679:             bne.s *               * branch if Z clear
                            	   680: *             EA = n(PC,A.W)  - BYTE only
01:00000680 0B3B90FE        	   681: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:00000684 67FE            	   682:             beq.s *               * branch if Z set
01:00000686 0D3BA0FE        	   683: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:0000068A 67FE            	   684:             beq.s *               * branch if Z set
01:0000068C 0F3BA0FE        	   685: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:00000690 66FE            	   686:             bne.s *               * branch if Z clear
                            	   687: *             EA = n(PC,A.L)  - BYTE only
01:00000692 0B3B98FE        	   688: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:00000696 67FE            	   689:             beq.s *               * branch if Z set
01:00000698 0D3BA8FE        	   690: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:0000069C 67FE            	   691:             beq.s *               * branch if Z set
01:0000069E 0F3BA8FE        	   692: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000006A2 66FE            	   693: op_BTST32:  bne.s *               * branch if Z clear
                            	   694: 
                            	   695: *             EA = #x  - BYTE only
                            	   696: 
01:000006A4 7A00            	   697:             move.l #0,d5              * populate bit.s number to test
01:000006A6 7C03            	   698:             move.l #3,d6              * populate bit.s number to test
01:000006A8 7E07            	   699:             move.l #7,d7              * populate bit.s number to test
                            	   700: 
01:000006AA 0B3C0088        	   701:             btst.b d5,#$88
01:000006AE 66FE            	   702:             bne.s *               * branch if Z clear
01:000006B0 0D3C0088        	   703:             btst.b d6,#$88
01:000006B4 67FE            	   704:             beq.s *               * branch if Z set
01:000006B6 0F3C0088        	   705:             btst.b d7,#$88
01:000006BA 67FE            	   706:             beq.s *               * branch if Z set
                            	   707: 
                            	   708: 
01:000006BC 4E75            	   709:     rts
                            	   710: 
                            	   711: *-----------------------------------------------------------
                            	   712: *-----------------------------------------------------------
                            	   713: * OPCODE : BCHG
                            	   714: *-----------------------------------------------------------
                            	   715: *-----------------------------------------------------------
                            	   716: op_BCHG:
                            	   717: 
                            	   718: 
                            	   719: *  Bit Number.s Static
                            	   720: 
                            	   721: *             EA = Dn  - LONG only
01:000006BE 203C80000001    	   722:             move.l #$80000001,d0      * populate test data
01:000006C4 08400000        	   723:             bchg.l #0,d0
01:000006C8 67FE            	   724:             beq.s *               * branch if Z set
01:000006CA 08400001        	   725:             bchg.l #1,d0              *
01:000006CE 66FE            	   726:             bne.s *               * branch if Z clear
01:000006D0 0840001F        	   727:             bchg.l #31,d0             *
01:000006D4 67FE            	   728:             beq.s *               * branch if Z set
01:000006D6 0C8000000002    	   729:             cmpi.l #$00000002,d0
01:000006DC 66FE            	   730:             bne.s *               * branch if Z clear
                            	   731: 
                            	   732: 
                            	   733: *             EA = (An)  - BYTE only
01:000006DE 307C0100        	   734:             move.l #$00000100,a0      * point to memory to address 0x100
01:000006E2 10BC0081        	   735:             move.b #$81,(a0)          * populate test data
01:000006E6 1210            	   736:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:000006E8 08500000        	   737:             bchg.b #0,(a0)
01:000006EC 67FE            	   738:             beq.s *               * branch if Z set
01:000006EE 08500001        	   739:             bchg.b #1,(a0)            *
01:000006F2 66FE            	   740:             bne.s *               * branch if Z clear
01:000006F4 08500007        	   741:             bchg.b #7,(a0)            *
01:000006F8 67FE            	   742:             beq.s *               * branch if Z set
01:000006FA 0C100002        	   743:             cmpi.b #$02,(a0)
01:000006FE 66FE            	   744:             bne.s *               * branch if Z clear
                            	   745: 
                            	   746: *             EA = (An)+  - BYTE only
01:00000700 307C0100        	   747:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000704 10FC0001        	   748:             move.b #$01,(a0)+         * populate test data
01:00000708 10FC00FC        	   749:             move.b #$FC,(a0)+         * populate test data
01:0000070C 10FC0080        	   750:             move.b #$80,(a0)+         * populate test data
01:00000710 307C0100        	   751:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000714 08580000        	   752:             bchg.b #0,(a0)+
01:00000718 67FE            	   753:             beq.s *               * branch if Z set
01:0000071A 08580001        	   754:             bchg.b #1,(a0)+           *
01:0000071E 66FE            	   755:             bne.s *               * branch if Z clear
01:00000720 08580007        	   756:             bchg.b #7,(a0)+           *
01:00000724 67FE            	   757:             beq.s *               * branch if Z set
01:00000726 307C0100        	   758:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000072A 4A18            	   759:             cmpi.b #$00,(a0)+
01:0000072C 66FE            	   760:             bne.s *               * branch if Z clear
01:0000072E 0C1800FE        	   761:             cmpi.b #$FE,(a0)+
01:00000732 66FE            	   762:             bne.s *               * branch if Z clear
01:00000734 4A18            	   763:             cmpi.b #$00,(a0)+
01:00000736 66FE            	   764:             bne.s *               * branch if Z clear
                            	   765: 
                            	   766: *             EA = -(An)  - BYTE only
01:00000738 307C0100        	   767:             move.l #$00000100,a0      * point to memory to address
01:0000073C 10FC0080        	   768:             move.b #$80,(a0)+         * populate test data
01:00000740 10FC00FC        	   769:             move.b #$FC,(a0)+         * populate test data
01:00000744 10FC0001        	   770:             move.b #$01,(a0)+         * populate test data
01:00000748 307C0103        	   771:             move.l #$00000103,a0      * point to memory to address
01:0000074C 08600000        	   772:             bchg.b #0,-(a0)
01:00000750 67FE            	   773:             beq.s *               * branch if Z set
01:00000752 08600001        	   774:             bchg.b #1,-(a0)           *
01:00000756 66FE            	   775:             bne.s *               * branch if Z clear
01:00000758 08600007        	   776:             bchg.b #7,-(a0)           *
01:0000075C 67FE            	   777:             beq.s *               * branch if Z set
01:0000075E 307C0103        	   778:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000762 4A20            	   779:             cmpi.b #$00,-(a0)
01:00000764 66FE            	   780:             bne.s *               * branch if Z clear
01:00000766 0C2000FE        	   781:             cmpi.b #$FE,-(a0)
01:0000076A 66FE            	   782:             bne.s *               * branch if Z clear
01:0000076C 4A20            	   783:             cmpi.b #$00,-(a0)
01:0000076E 66FE            	   784:             bne.s *               * branch if Z clear
                            	   785: 
                            	   786: 
                            	   787: *             EA = n(An)  - BYTE only
01:00000770 307C0100        	   788:             move.l #$00000100,a0      * point to memory to address
01:00000774 10FC0001        	   789:             move.b #$01,(a0)+         * populate test data
01:00000778 10FC00FC        	   790:             move.b #$FC,(a0)+         * populate test data
01:0000077C 10FC0080        	   791:             move.b #$80,(a0)+         * populate test data
01:00000780 307C0100        	   792:             move.l #$00000100,a0      * point to memory to address
01:00000784 08500000        	   793:             bchg.b #0,0(a0)
01:00000788 67FE            	   794:             beq.s *               * branch if Z set
01:0000078A 086800010001    	   795:             bchg.b #1,1(a0)           *
01:00000790 66FE            	   796:             bne.s *               * branch if Z clear
01:00000792 086800070002    	   797:             bchg.b #7,2(a0)           *
01:00000798 67FE            	   798:             beq.s *               * branch if Z set
01:0000079A 307C0100        	   799:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000079E 4A18            	   800:             cmpi.b #$00,(a0)+
01:000007A0 66FE            	   801:             bne.s *               * branch if Z clear
01:000007A2 0C1800FE        	   802:             cmpi.b #$FE,(a0)+
01:000007A6 66FE            	   803:             bne.s *               * branch if Z clear
01:000007A8 4A18            	   804:             cmpi.b #$00,(a0)+
01:000007AA 66FE            	   805:             bne.s *               * branch if Z clear
                            	   806: 
                            	   807: 
                            	   808: *             EA = n(An,D.W)  - BYTE only
01:000007AC 307C0100        	   809:             move.l #$00000100,a0      * point to memory to address
01:000007B0 93C9            	   810:             move.l #$00000000,a1      * point to memory to address
01:000007B2 347C0001        	   811:             move.l #$00000001,a2      * point to memory to address
01:000007B6 7000            	   812:             moveq  #$00000000,d0      * point to memory to address
01:000007B8 7201            	   813:             moveq  #$00000001,d1      * point to memory to address
01:000007BA 087000000000    	   814:             bchg.b #0,0(a0,d0.w)
01:000007C0 66FE            	   815:             bne.s *               * branch if Z clear
01:000007C2 087000011000    	   816:             bchg.b #1,0(a0,d1.w)      *
01:000007C8 67FE            	   817:             beq.s *               * branch if Z set
01:000007CA 087000071001    	   818:             bchg.b #7,1(a0,d1.w)      *
01:000007D0 66FE            	   819:             bne.s *               * branch if Z clear
                            	   820: *             EA = n(An,D.L)  - BYTE only
01:000007D2 087000000800    	   821:             bchg.b #0,0(a0,d0.l)
01:000007D8 67FE            	   822:             beq.s *               * branch if Z set
01:000007DA 087000011800    	   823:             bchg.b #1,0(a0,d1.l)      *
01:000007E0 66FE            	   824:             bne.s *               * branch if Z clear
01:000007E2 087000071801    	   825:             bchg.b #7,1(a0,d1.l)      *
01:000007E8 67FE            	   826:             beq.s *               * branch if Z set
                            	   827: *             EA = n(An,A.W)  - BYTE only
01:000007EA 087000009000    	   828:             bchg.b #0,0(a0,a1.w)
01:000007F0 66FE            	   829:             bne.s *               * branch if Z clear
01:000007F2 08700001A000    	   830:             bchg.b #1,0(a0,a2.w)      *
01:000007F8 67FE            	   831:             beq.s *               * branch if Z set
01:000007FA 08700007A001    	   832:             bchg.b #7,1(a0,a2.w)      *
01:00000800 66FE            	   833:             bne.s *               * branch if Z clear
                            	   834: *             EA = n(An,A.L)  - BYTE only
01:00000802 087000009800    	   835:             bchg.b #0,0(a0,a1.l)
01:00000808 67FE            	   836:             beq.s *               * branch if Z set
01:0000080A 08700001A800    	   837:             bchg.b #1,0(a0,a2.l)      *
01:00000810 66FE            	   838:             bne.s *               * branch if Z clear
01:00000812 08700007A801    	   839:             bchg.b #7,1(a0,a2.l)      *
01:00000818 67FE            	   840:             beq.s *               * branch if Z set
01:0000081A 307C0100        	   841:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000081E 4A18            	   842:             cmpi.b #$00,(a0)+
01:00000820 66FE            	   843:             bne.s *               * branch if Z clear
01:00000822 0C1800FE        	   844:             cmpi.b #$FE,(a0)+
01:00000826 66FE            	   845:             bne.s *               * branch if Z clear
01:00000828 4A18            	   846:             cmpi.b #$00,(a0)+
01:0000082A 66FE            	   847:             bne.s *               * branch if Z clear
                            	   848: 
                            	   849: 
                            	   850: *             EA = x.W  - BYTE only
01:0000082C 087800000100    	   851:             bchg.b #0,$0100
01:00000832 66FE            	   852:             bne.s *               * branch if Z clear
01:00000834 087800010101    	   853:             bchg.b #1,$0101           *
01:0000083A 67FE            	   854:             beq.s *               * branch if Z set
01:0000083C 087800070102    	   855:             bchg.b #7,$0102           *
01:00000842 66FE            	   856:             bne.s *               * branch if Z clear
01:00000844 307C0100        	   857:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000848 0C180001        	   858:             cmpi.b #$01,(a0)+
01:0000084C 66FE            	   859:             bne.s *               * branch if Z clear
01:0000084E 0C1800FC        	   860:             cmpi.b #$FC,(a0)+
01:00000852 66FE            	   861:             bne.s *               * branch if Z clear
01:00000854 0C180080        	   862:             cmpi.b #$80,(a0)+
01:00000858 66FE            	   863:             bne.s *               * branch if Z clear
                            	   864: 
                            	   865: *             EA = x.L  - BYTE only
01:0000085A 207C0000F100    	   866:             move.l #$F100,a0      * point to memory to address 0x100
01:00000860 10FC0001        	   867:             move.b #$01,(a0)+         * populate test data
01:00000864 10FC00FC        	   868:             move.b #$FC,(a0)+         * populate test data
01:00000868 10FC0080        	   869:             move.b #$80,(a0)+         * populate test data
01:0000086C 087900000000F100	   870:             bchg.b #0,$F100
01:00000874 67FE            	   871:             beq.s *               * branch if Z set
01:00000876 087900010000F101	   872:             bchg.b #1,$F101       *
01:0000087E 66FE            	   873:             bne.s *               * branch if Z clear
01:00000880 087900070000F102	   874:             bchg.b #7,$F102       *
01:00000888 67FE            	   875:             beq.s *               * branch if Z set
01:0000088A 307C0100        	   876:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000088E 0C180001        	   877:             cmpi.b #$01,(a0)+
01:00000892 66FE            	   878:             bne.s *               * branch if Z clear
01:00000894 0C1800FC        	   879:             cmpi.b #$FC,(a0)+
01:00000898 66FE            	   880:             bne.s *               * branch if Z clear
01:0000089A 0C180080        	   881:             cmpi.b #$80,(a0)+
01:0000089E 66FE            	   882:             bne.s *               * branch if Z clear
                            	   883: 
                            	   884: 
                            	   885: * Bit Number.s Dynamic
                            	   886: 
                            	   887: *             EA = Dn  - LONG only
01:000008A0 203C80000001    	   888:             move.l #$80000001,d0      * populate test data
01:000008A6 7A00            	   889:             move.l #0,d5              * populate bit.s number to test
01:000008A8 7C01            	   890:             move.l #1,d6              * populate bit.s number to test
01:000008AA 7E1F            	   891:             move.l #31,d7              * populate bit.s number to test
                            	   892: 
01:000008AC 0B40            	   893:             bchg.l d5,d0
01:000008AE 67FE            	   894:             beq.s *               * branch if Z set
01:000008B0 0D40            	   895:             bchg.l d6,d0              *
01:000008B2 66FE            	   896:             bne.s *               * branch if Z clear
01:000008B4 0F40            	   897:             bchg.l d7,d0             *
01:000008B6 67FE            	   898:             beq.s *               * branch if Z set
01:000008B8 0C8000000002    	   899:             cmpi.l #$00000002,d0
01:000008BE 66FE            	   900:             bne.s *               * branch if Z clear
                            	   901: 
                            	   902: 
                            	   903: *             EA = (An)  - BYTE only
01:000008C0 7A00            	   904:             move.l #0,d5              * populate bit.s number to test
01:000008C2 7C01            	   905:             move.l #1,d6              * populate bit.s number to test
01:000008C4 7E07            	   906:             move.l #7,d7              * populate bit.s number to test
01:000008C6 307C0100        	   907:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008CA 10BC0081        	   908:             move.b #$81,(a0)          * populate test data
01:000008CE 1210            	   909:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:000008D0 0B50            	   910:             bchg.b d5,(a0)
01:000008D2 67FE            	   911:             beq.s *               * branch if Z set
01:000008D4 0D50            	   912:             bchg.b d6,(a0)            *
01:000008D6 66FE            	   913:             bne.s *               * branch if Z clear
01:000008D8 0F50            	   914:             bchg.b d7,(a0)            *
01:000008DA 67FE            	   915:             beq.s *               * branch if Z set
01:000008DC 0C100002        	   916:             cmpi.b #$02,(a0)
01:000008E0 66FE            	   917:             bne.s *               * branch if Z clear
                            	   918: 
                            	   919: 
                            	   920: *             EA = (An)+  - BYTE only
01:000008E2 307C0100        	   921:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008E6 10FC0001        	   922:             move.b #$01,(a0)+         * populate test data
01:000008EA 10FC00FC        	   923:             move.b #$FC,(a0)+         * populate test data
01:000008EE 10FC0080        	   924:             move.b #$80,(a0)+         * populate test data
01:000008F2 307C0100        	   925:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008F6 0B58            	   926:             bchg.b d5,(a0)+
01:000008F8 67FE            	   927:             beq.s *               * branch if Z set
01:000008FA 0D58            	   928:             bchg.b d6,(a0)+           *
01:000008FC 66FE            	   929:             bne.s *               * branch if Z clear
01:000008FE 0F58            	   930:             bchg.b d7,(a0)+           *
01:00000900 67FE            	   931:             beq.s *               * branch if Z set
01:00000902 307C0100        	   932:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000906 4A18            	   933:             cmpi.b #$00,(a0)+
01:00000908 66FE            	   934:             bne.s *               * branch if Z clear
01:0000090A 0C1800FE        	   935:             cmpi.b #$FE,(a0)+
01:0000090E 66FE            	   936:             bne.s *               * branch if Z clear
01:00000910 4A18            	   937:             cmpi.b #$00,(a0)+
01:00000912 66FE            	   938:             bne.s *               * branch if Z clear
                            	   939: 
                            	   940: *             EA = -(An)  - BYTE only
01:00000914 307C0100        	   941:             move.l #$00000100,a0      * point to memory to address
01:00000918 10FC0080        	   942:             move.b #$80,(a0)+         * populate test data
01:0000091C 10FC00FC        	   943:             move.b #$FC,(a0)+         * populate test data
01:00000920 10FC0001        	   944:             move.b #$01,(a0)+         * populate test data
01:00000924 307C0103        	   945:             move.l #$00000103,a0      * point to memory to address
01:00000928 0B60            	   946:             bchg.b d5,-(a0)
01:0000092A 67FE            	   947:             beq.s *               * branch if Z set
01:0000092C 0D60            	   948:             bchg.b d6,-(a0)           *
01:0000092E 66FE            	   949:             bne.s *               * branch if Z clear
01:00000930 0F60            	   950:             bchg.b d7,-(a0)           *
01:00000932 67FE            	   951:             beq.s *               * branch if Z set
01:00000934 307C0103        	   952:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000938 4A20            	   953:             cmpi.b #$00,-(a0)
01:0000093A 66FE            	   954:             bne.s *               * branch if Z clear
01:0000093C 0C2000FE        	   955:             cmpi.b #$FE,-(a0)
01:00000940 66FE            	   956:             bne.s *               * branch if Z clear
01:00000942 4A20            	   957:             cmpi.b #$00,-(a0)
01:00000944 66FE            	   958:             bne.s *               * branch if Z clear
                            	   959: 
                            	   960: *             EA = n(An)  - BYTE only
01:00000946 307C0100        	   961:             move.l #$00000100,a0      * point to memory to address
01:0000094A 10FC0001        	   962:             move.b #$01,(a0)+         * populate test data
01:0000094E 10FC00FC        	   963:             move.b #$FC,(a0)+         * populate test data
01:00000952 10FC0080        	   964:             move.b #$80,(a0)+         * populate test data
01:00000956 307C0100        	   965:             move.l #$00000100,a0      * point to memory to address
01:0000095A 0B50            	   966:             bchg.b d5,0(a0)
01:0000095C 67FE            	   967:             beq.s *               * branch if Z set
01:0000095E 0D680001        	   968:             bchg.b d6,1(a0)           *
01:00000962 66FE            	   969:             bne.s *               * branch if Z clear
01:00000964 0F680002        	   970:             bchg.b d7,2(a0)           *
01:00000968 67FE            	   971:             beq.s *               * branch if Z set
01:0000096A 307C0100        	   972:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000096E 4A18            	   973:             cmpi.b #$00,(a0)+
01:00000970 66FE            	   974:             bne.s *               * branch if Z clear
01:00000972 0C1800FE        	   975:             cmpi.b #$FE,(a0)+
01:00000976 66FE            	   976:             bne.s *               * branch if Z clear
01:00000978 4A18            	   977:             cmpi.b #$00,(a0)+
01:0000097A 66FE            	   978:             bne.s *               * branch if Z clear
                            	   979: 
                            	   980: *             EA = n(An,R.W)  - BYTE only
01:0000097C 307C0100        	   981:             move.l #$00000100,a0      * point to memory to address
01:00000980 93C9            	   982:             move.l #$00000000,a1      * point to memory to address
01:00000982 347C0001        	   983:             move.l #$00000001,a2      * point to memory to address
01:00000986 7000            	   984:             moveq  #$00000000,d0      * point to memory to address
01:00000988 7201            	   985:             moveq  #$00000001,d1      * point to memory to address
01:0000098A 0B700000        	   986:             bchg.b d5,0(a0,d0.w)
01:0000098E 66FE            	   987:             bne.s *               * branch if Z clear
01:00000990 0D701000        	   988:             bchg.b d6,0(a0,d1.w)      *
01:00000994 67FE            	   989:             beq.s *               * branch if Z set
01:00000996 0F701001        	   990:             bchg.b d7,1(a0,d1.w)      *
01:0000099A 66FE            	   991:             bne.s *               * branch if Z clear
                            	   992: *             EA = n(An,R.L)  - BYTE only
01:0000099C 0B700800        	   993:             bchg.b d5,0(a0,d0.l)
01:000009A0 67FE            	   994:             beq.s *               * branch if Z set
01:000009A2 0D701800        	   995:             bchg.b d6,0(a0,d1.l)      *
01:000009A6 66FE            	   996:             bne.s *               * branch if Z clear
01:000009A8 0F701801        	   997:             bchg.b d7,1(a0,d1.l)      *
01:000009AC 67FE            	   998:             beq.s *               * branch if Z set
                            	   999: *             EA = n(An,A.W)  - BYTE only
01:000009AE 0B709000        	  1000:             bchg.b d5,0(a0,a1.w)
01:000009B2 66FE            	  1001:             bne.s *               * branch if Z clear
01:000009B4 0D70A000        	  1002:             bchg.b d6,0(a0,a2.w)      *
01:000009B8 67FE            	  1003:             beq.s *               * branch if Z set
01:000009BA 0F70A001        	  1004:             bchg.b d7,1(a0,a2.w)      *
01:000009BE 66FE            	  1005:             bne.s *               * branch if Z clear
                            	  1006: *             EA = n(An,A.L)  - BYTE only
01:000009C0 0B709800        	  1007:             bchg.b d5,0(a0,a1.l)
01:000009C4 67FE            	  1008:             beq.s *               * branch if Z set
01:000009C6 0D70A800        	  1009:             bchg.b d6,0(a0,a2.l)      *
01:000009CA 66FE            	  1010:             bne.s *               * branch if Z clear
01:000009CC 0F70A801        	  1011:             bchg.b d7,1(a0,a2.l)      *
01:000009D0 67FE            	  1012:             beq.s *               * branch if Z set
01:000009D2 4A18            	  1013:             cmpi.b #$00,(a0)+
01:000009D4 66FE            	  1014:             bne.s *               * branch if Z clear
                            	  1015: 
                            	  1016: *             EA = x.W  - BYTE only
01:000009D6 0B780100        	  1017:             bchg.b d5,$0100
01:000009DA 66FE            	  1018:             bne.s *               * branch if Z clear
01:000009DC 0D780101        	  1019:             bchg.b d6,$0101           *
01:000009E0 67FE            	  1020:             beq.s *               * branch if Z set
01:000009E2 0F780102        	  1021:             bchg.b d7,$0102           *
01:000009E6 66FE            	  1022:             bne.s *               * branch if Z clear
01:000009E8 0C1800FC        	  1023:             cmpi.b #$FC,(a0)+
01:000009EC 66FE            	  1024:             bne.s *               * branch if Z clear
                            	  1025: 
                            	  1026: *             EA = x.L  - BYTE only
01:000009EE 207C0000F100    	  1027:             move.l #$F100,a0      * point to memory to address 0x100
01:000009F4 10FC0001        	  1028:             move.b #$01,(a0)+         * populate test data
01:000009F8 10FC00FC        	  1029:             move.b #$FC,(a0)+         * populate test data
01:000009FC 10FC0080        	  1030:             move.b #$80,(a0)+         * populate test data
01:00000A00 0B790000F100    	  1031:             bchg.b d5,$F100
01:00000A06 67FE            	  1032:             beq.s *               * branch if Z set
01:00000A08 0D790000F101    	  1033:             bchg.b d6,$F101       *
01:00000A0E 66FE            	  1034:             bne.s *               * branch if Z clear
01:00000A10 0F790000F102    	  1035:             bchg.b d7,$F102       *
01:00000A16 67FE            	  1036:             beq.s *               * branch if Z set
01:00000A18 207C0000F101    	  1037:             move.l #$F101,a0      * point to memory to address 0x100
01:00000A1E 0C1000FE        	  1038:             cmpi.b #$FE,(a0)
01:00000A22 66FE            	  1039:             bne.s *               * branch if Z clear
                            	  1040: 
                            	  1041: 
01:00000A24 4E75            	  1042:     rts
                            	  1043: 
                            	  1044: *-----------------------------------------------------------
                            	  1045: *-----------------------------------------------------------
                            	  1046: * OPCODE : BCLR
                            	  1047: *-----------------------------------------------------------
                            	  1048: *-----------------------------------------------------------
                            	  1049: op_BCLR:
                            	  1050: 
                            	  1051: 
                            	  1052: *  Bit Number.s Static
                            	  1053: 
                            	  1054: *             EA = Dn  - LONG only
01:00000A26 203CFF0000FF    	  1055:             move.l #$FF0000FF,d0      * populate test data
01:00000A2C 08800000        	  1056:             bclr.l #0,d0
01:00000A30 67FE            	  1057:             beq.s *               * branch if Z set
01:00000A32 08800001        	  1058:             bclr.l #1,d0              *
01:00000A36 67FE            	  1059:             beq.s *               * branch if Z set
01:00000A38 0880000F        	  1060:             bclr.l #15,d0             *
01:00000A3C 66FE            	  1061:             bne.s *               * branch if Z clear
01:00000A3E 0880001F        	  1062:             bclr.l #31,d0             *
01:00000A42 67FE            	  1063:             beq.s *               * branch if Z set
01:00000A44 0C807F0000FC    	  1064:             cmpi.l #$7F0000FC,d0
01:00000A4A 66FE            	  1065:             bne.s *               * branch if Z clear
                            	  1066: 
                            	  1067: 
                            	  1068: *             EA = (An)  - BYTE only
01:00000A4C 307C0100        	  1069:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A50 10BC000F        	  1070:             move.b #$0F,(a0)          * populate test data
01:00000A54 08900000        	  1071:             bclr.b #0,(a0)
01:00000A58 67FE            	  1072:             beq.s *               * branch if Z set
01:00000A5A 08900007        	  1073:             bclr.b #7,(a0)            *
01:00000A5E 66FE            	  1074:             bne.s *               * branch if Z clear
01:00000A60 0C10000E        	  1075:             cmpi.b #$0E,(a0)
01:00000A64 66FE            	  1076:             bne.s *               * branch if Z clear
                            	  1077: 
                            	  1078: *             EA = (An)+  - BYTE only
01:00000A66 307C0100        	  1079:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A6A 10FC0001        	  1080:             move.b #$01,(a0)+         * populate test data
01:00000A6E 10FC0000        	  1081:             move.b #$00,(a0)+         * populate test data
01:00000A72 307C0100        	  1082:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A76 08980000        	  1083:             bclr.b #0,(a0)+
01:00000A7A 67FE            	  1084:             beq.s *               * branch if Z set
01:00000A7C 08980001        	  1085:             bclr.b #1,(a0)+           *
01:00000A80 66FE            	  1086:             bne.s *               * branch if Z clear
01:00000A82 307C0100        	  1087:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A86 4A18            	  1088:             cmpi.b #$00,(a0)+
01:00000A88 66FE            	  1089:             bne.s *               * branch if Z clear
01:00000A8A 4A18            	  1090:             cmpi.b #$00,(a0)+
01:00000A8C 66FE            	  1091:             bne.s *               * branch if Z clear
                            	  1092: 
                            	  1093: 
                            	  1094: *             EA = -(An)  - BYTE only
01:00000A8E 307C0100        	  1095:             move.l #$00000100,a0      * point to memory to address
01:00000A92 10FC0001        	  1096:             move.b #$01,(a0)+         * populate test data
01:00000A96 10FC0080        	  1097:             move.b #$80,(a0)+         * populate test data
01:00000A9A 08A00007        	  1098:             bclr.b #7,-(a0)
01:00000A9E 67FE            	  1099:             beq.s *               * branch if Z set
01:00000AA0 08A00000        	  1100:             bclr.b #0,-(a0)           *
01:00000AA4 67FE            	  1101:             beq.s *               * branch if Z set
01:00000AA6 307C0102        	  1102:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000AAA 4A20            	  1103:             cmpi.b #$00,-(a0)
01:00000AAC 66FE            	  1104:             bne.s *               * branch if Z clear
01:00000AAE 4A20            	  1105:             cmpi.b #$00,-(a0)
01:00000AB0 66FE            	  1106:             bne.s *               * branch if Z clear
                            	  1107: 
                            	  1108: 
                            	  1109: *             EA = n(An)  - BYTE only
01:00000AB2 307C0100        	  1110:             move.l #$00000100,a0      * point to memory to address
01:00000AB6 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
01:00000ABA 10FC00FF        	  1112:             move.b #$FF,(a0)+         * populate test data
01:00000ABE 307C0100        	  1113:             move.l #$00000100,a0      * point to memory to address
01:00000AC2 08900000        	  1114:             bclr.b #0,0(a0)
01:00000AC6 67FE            	  1115:             beq.s *               * branch if Z set
01:00000AC8 08A800040001    	  1116:             bclr.b #4,1(a0)           *
01:00000ACE 67FE            	  1117:             beq.s *               * branch if Z set
01:00000AD0 307C0100        	  1118:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AD4 0C1800FE        	  1119:             cmpi.b #$FE,(a0)+
01:00000AD8 66FE            	  1120:             bne.s *               * branch if Z clear
01:00000ADA 0C1800EF        	  1121:             cmpi.b #$EF,(a0)+
01:00000ADE 66FE            	  1122:             bne.s *               * branch if Z clear
                            	  1123: 
                            	  1124: 
                            	  1125: *             EA = n(An,D.W)  - BYTE only
01:00000AE0 307C0100        	  1126:             move.l #$00000100,a0      * point to memory to address
01:00000AE4 93C9            	  1127:             move.l #$00000000,a1      * point to memory to address
01:00000AE6 347C0001        	  1128:             move.l #$00000001,a2      * point to memory to address
01:00000AEA 7000            	  1129:             moveq  #$00000000,d0      * point to memory to address
01:00000AEC 7201            	  1130:             moveq  #$00000001,d1      * point to memory to address
01:00000AEE 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
01:00000AF2 10FC00FF        	  1132:             move.b #$FF,(a0)+         * populate test data
01:00000AF6 307C0100        	  1133:             move.l #$00000100,a0      * point to memory to address
01:00000AFA 08B000000000    	  1134:             bclr.b #0,0(a0,d0.w)
01:00000B00 67FE            	  1135:             beq.s *               * branch if Z set
01:00000B02 08B000011000    	  1136:             bclr.b #1,0(a0,d1.w)      *
01:00000B08 67FE            	  1137:             beq.s *               * branch if Z set
01:00000B0A 08B000021001    	  1138:             bclr.b #2,1(a0,d1.w)      *
01:00000B10 66FE            	  1139:             bne.s *               * branch if Z clear
                            	  1140: *             EA = n(An,D.L)  - BYTE only
01:00000B12 08B000030800    	  1141:             bclr.b #3,0(a0,d0.l)
01:00000B18 67FE            	  1142:             beq.s *               * branch if Z set
01:00000B1A 08B000041800    	  1143:             bclr.b #4,0(a0,d1.l)      *
01:00000B20 67FE            	  1144:             beq.s *               * branch if Z set
01:00000B22 08B000051801    	  1145:             bclr.b #5,1(a0,d1.l)      *
01:00000B28 66FE            	  1146:             bne.s *               * branch if Z clear
                            	  1147: *             EA = n(An,A.W)  - BYTE only
01:00000B2A 08B000069000    	  1148:             bclr.b #6,0(a0,a1.w)
01:00000B30 67FE            	  1149:             beq.s *               * branch if Z set
01:00000B32 08B00001A000    	  1150:             bclr.b #1,0(a0,a2.w)      *
01:00000B38 66FE            	  1151:             bne.s *               * branch if Z clear
01:00000B3A 08B00007A001    	  1152:             bclr.b #7,1(a0,a2.w)      *
01:00000B40 67FE            	  1153:             beq.s *               * branch if Z set
                            	  1154: *             EA = n(An,A.L)  - BYTE only
01:00000B42 08B000009800    	  1155:             bclr.b #0,0(a0,a1.l)
01:00000B48 66FE            	  1156:             bne.s *               * branch if Z clear
01:00000B4A 08B00000A800    	  1157:             bclr.b #0,0(a0,a2.l)      *
01:00000B50 67FE            	  1158:             beq.s *               * branch if Z set
01:00000B52 08B00001A801    	  1159:             bclr.b #1,1(a0,a2.l)      *
01:00000B58 66FE            	  1160:             bne.s *               * branch if Z clear
01:00000B5A 307C0100        	  1161:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B5E 0C1800B6        	  1162:             cmpi.b #$B6,(a0)+
01:00000B62 66FE            	  1163:             bne.s *               * branch if Z clear
01:00000B64 0C1800EC        	  1164:             cmpi.b #$EC,(a0)+
01:00000B68 66FE            	  1165:             bne.s *               * branch if Z clear
01:00000B6A 0C180059        	  1166:             cmpi.b #$59,(a0)+
01:00000B6E 67FE            	  1167:             beq.s *               * branch if Z set
                            	  1168: 
                            	  1169: 
                            	  1170: *             EA = x.W  - BYTE only
01:00000B70 307C0100        	  1171:             move.l #$00000100,a0      * point to memory to address
01:00000B74 10FC00FF        	  1172:             move.b #$FF,(a0)+         * populate test data
01:00000B78 08B800000100    	  1173:             bclr.b #0,$0100
01:00000B7E 67FE            	  1174:             beq.s *               * branch if Z set
01:00000B80 08B800010100    	  1175:             bclr.b #1,$0100           *
01:00000B86 67FE            	  1176:             beq.s *               * branch if Z set
01:00000B88 307C0100        	  1177:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B8C 0C1800FC        	  1178:             cmpi.b #$FC,(a0)+
01:00000B90 66FE            	  1179:             bne.s *               * branch if Z clear
                            	  1180: 
                            	  1181: 
                            	  1182: *             EA = x.L  - BYTE only
01:00000B92 207C0000F100    	  1183:             move.l #$F100,a0      * point to memory to address 0x100
01:00000B98 10BC00FF        	  1184:             move.b #$FF,(a0)          * populate test data
01:00000B9C 08B900000000F100	  1185:             bclr.b #0,$F100
01:00000BA4 67FE            	  1186:             beq.s *               * branch if Z set
01:00000BA6 08B900010000F100	  1187:             bclr.b #1,$F100       *
01:00000BAE 67FE            	  1188:             beq.s *               * branch if Z set
01:00000BB0 08B900020000F100	  1189:             bclr.b #2,$F100       *
01:00000BB8 67FE            	  1190:             beq.s *               * branch if Z set
01:00000BBA 207C0000F100    	  1191:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BC0 0C1800F8        	  1192:             cmpi.b #$F8,(a0)+
01:00000BC4 66FE            	  1193:             bne.s *               * branch if Z clear
                            	  1194: 
                            	  1195: 
                            	  1196: * Bit Number.s Dynamic
                            	  1197: 
                            	  1198: *             EA = Dn  - LONG only
01:00000BC6 203CFF00FF00    	  1199:             move.l #$FF00FF00,d0      * populate test data
01:00000BCC 7A00            	  1200:             move.l #0,d5              * populate bit.s number to test
01:00000BCE 7C01            	  1201:             move.l #1,d6              * populate bit.s number to test
01:00000BD0 7E1F            	  1202:             move.l #31,d7              * populate bit.s number to test
                            	  1203: 
01:00000BD2 0B80            	  1204:             bclr.l d5,d0
01:00000BD4 66FE            	  1205:             bne.s *               * branch if Z clear
01:00000BD6 0D80            	  1206:             bclr.l d6,d0              *
01:00000BD8 66FE            	  1207:             bne.s *               * branch if Z clear
01:00000BDA 0F80            	  1208:             bclr.l d7,d0             *
01:00000BDC 67FE            	  1209:             beq.s *               * branch if Z set
01:00000BDE 0C807F00FF00    	  1210:             cmpi.l #$7F00FF00,d0
01:00000BE4 66FE            	  1211:             bne.s *               * branch if Z clear
                            	  1212: 
                            	  1213: 
                            	  1214: *             EA = (An)  - BYTE only
01:00000BE6 7A00            	  1215:             move.l #0,d5              * populate bit.s number to test
01:00000BE8 7C01            	  1216:             move.l #1,d6              * populate bit.s number to test
01:00000BEA 7E07            	  1217:             move.l #7,d7              * populate bit.s number to test
01:00000BEC 307C0100        	  1218:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BF0 10BC0081        	  1219:             move.b #$81,(a0)          * populate test data
01:00000BF4 0B90            	  1220:             bclr.b d5,(a0)
01:00000BF6 67FE            	  1221:             beq.s *               * branch if Z set
01:00000BF8 0D90            	  1222:             bclr.b d6,(a0)            *
01:00000BFA 66FE            	  1223:             bne.s *               * branch if Z clear
01:00000BFC 0F90            	  1224:             bclr.b d7,(a0)            *
01:00000BFE 67FE            	  1225:             beq.s *               * branch if Z set
01:00000C00 4A10            	  1226:             cmpi.b #$00,(a0)
01:00000C02 66FE            	  1227:             bne.s *               * branch if Z clear
                            	  1228: 
                            	  1229: 
                            	  1230: *             EA = (An)+  - BYTE only
01:00000C04 307C0100        	  1231:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C08 10FC0001        	  1232:             move.b #$01,(a0)+         * populate test data
01:00000C0C 10FC00FC        	  1233:             move.b #$FC,(a0)+         * populate test data
01:00000C10 10FC0080        	  1234:             move.b #$80,(a0)+         * populate test data
01:00000C14 307C0100        	  1235:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C18 0B98            	  1236:             bclr.b d5,(a0)+
01:00000C1A 67FE            	  1237:             beq.s *               * branch if Z set
01:00000C1C 0D98            	  1238:             bclr.b d6,(a0)+           *
01:00000C1E 66FE            	  1239:             bne.s *               * branch if Z clear
01:00000C20 0F98            	  1240:             bclr.b d7,(a0)+           *
01:00000C22 67FE            	  1241:             beq.s *               * branch if Z set
01:00000C24 307C0100        	  1242:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C28 4A18            	  1243:             cmpi.b #$00,(a0)+
01:00000C2A 66FE            	  1244:             bne.s *               * branch if Z clear
01:00000C2C 0C1800FC        	  1245:             cmpi.b #$FC,(a0)+
01:00000C30 66FE            	  1246:             bne.s *               * branch if Z clear
01:00000C32 4A18            	  1247:             cmpi.b #$00,(a0)+
01:00000C34 66FE            	  1248:             bne.s *               * branch if Z clear
                            	  1249: 
                            	  1250: *             EA = -(An)  - BYTE only
01:00000C36 307C0100        	  1251:             move.l #$00000100,a0      * point to memory to address
01:00000C3A 10FC0080        	  1252:             move.b #$80,(a0)+         * populate test data
01:00000C3E 10FC00FC        	  1253:             move.b #$FC,(a0)+         * populate test data
01:00000C42 10FC0001        	  1254:             move.b #$01,(a0)+         * populate test data
01:00000C46 307C0103        	  1255:             move.l #$00000103,a0      * point to memory to address
01:00000C4A 0BA0            	  1256:             bclr.b d5,-(a0)
01:00000C4C 67FE            	  1257:             beq.s *               * branch if Z set
01:00000C4E 0DA0            	  1258:             bclr.b d6,-(a0)           *
01:00000C50 66FE            	  1259:             bne.s *               * branch if Z clear
01:00000C52 0FA0            	  1260:             bclr.b d7,-(a0)           *
01:00000C54 67FE            	  1261:             beq.s *               * branch if Z set
01:00000C56 307C0103        	  1262:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000C5A 4A20            	  1263:             cmpi.b #$00,-(a0)
01:00000C5C 66FE            	  1264:             bne.s *               * branch if Z clear
01:00000C5E 0C2000FC        	  1265:             cmpi.b #$FC,-(a0)
01:00000C62 66FE            	  1266:             bne.s *               * branch if Z clear
01:00000C64 4A20            	  1267:             cmpi.b #$00,-(a0)
01:00000C66 66FE            	  1268:             bne.s *               * branch if Z clear
                            	  1269: 
                            	  1270: *             EA = n(An)  - BYTE only
01:00000C68 307C0100        	  1271:             move.l #$00000100,a0      * point to memory to address
01:00000C6C 10FC0001        	  1272:             move.b #$01,(a0)+         * populate test data
01:00000C70 10FC00FC        	  1273:             move.b #$FC,(a0)+         * populate test data
01:00000C74 10FC0080        	  1274:             move.b #$80,(a0)+         * populate test data
01:00000C78 307C0100        	  1275:             move.l #$00000100,a0      * point to memory to address
01:00000C7C 0B90            	  1276:             bclr.b d5,0(a0)
01:00000C7E 67FE            	  1277:             beq.s *               * branch if Z set
01:00000C80 0DA80001        	  1278:             bclr.b d6,1(a0)           *
01:00000C84 66FE            	  1279:             bne.s *               * branch if Z clear
01:00000C86 0FA80002        	  1280:             bclr.b d7,2(a0)           *
01:00000C8A 67FE            	  1281:             beq.s *               * branch if Z set
01:00000C8C 307C0100        	  1282:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C90 4A18            	  1283:             cmpi.b #$00,(a0)+
01:00000C92 66FE            	  1284:             bne.s *               * branch if Z clear
01:00000C94 0C1800FC        	  1285:             cmpi.b #$FC,(a0)+
01:00000C98 66FE            	  1286:             bne.s *               * branch if Z clear
01:00000C9A 4A18            	  1287:             cmpi.b #$00,(a0)+
01:00000C9C 66FE            	  1288:             bne.s *               * branch if Z clear
                            	  1289: 
                            	  1290: *             EA = n(An,R.W)  - BYTE only
01:00000C9E 307C0100        	  1291:             move.l #$00000100,a0      * point to memory to address
01:00000CA2 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000CA6 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
01:00000CAA 10FC00FF        	  1294:             move.b #$FF,(a0)+         * populate test data
01:00000CAE 307C0103        	  1295:             move.l #$00000103,a0      * point to memory to address
01:00000CB2 307C0100        	  1296:             move.l #$00000100,a0      * point to memory to address
01:00000CB6 93C9            	  1297:             move.l #$00000000,a1      * point to memory to address
01:00000CB8 347C0001        	  1298:             move.l #$00000001,a2      * point to memory to address
01:00000CBC 7000            	  1299:             moveq  #$00000000,d0      * point to memory to address
01:00000CBE 7201            	  1300:             moveq  #$00000001,d1      * point to memory to address
01:00000CC0 0BB00000        	  1301:             bclr.b d5,0(a0,d0.w)
01:00000CC4 67FE            	  1302:             beq.s *               * branch if Z set
01:00000CC6 0DB01000        	  1303:             bclr.b d6,0(a0,d1.w)      *
01:00000CCA 67FE            	  1304:             beq.s *               * branch if Z set
01:00000CCC 0FB01001        	  1305:             bclr.b d7,1(a0,d1.w)      *
01:00000CD0 67FE            	  1306:             beq.s *               * branch if Z set
                            	  1307: *             EA = n(An,R.L)  - BYTE only
01:00000CD2 0BB00800        	  1308:             bclr.b d5,0(a0,d0.l)
01:00000CD6 66FE            	  1309:             bne.s *               * branch if Z clear
01:00000CD8 0DB01800        	  1310:             bclr.b d6,0(a0,d1.l)      *
01:00000CDC 66FE            	  1311:             bne.s *               * branch if Z clear
01:00000CDE 0FB01801        	  1312:             bclr.b d7,1(a0,d1.l)      *
01:00000CE2 66FE            	  1313:             bne.s *               * branch if Z clear
                            	  1314: *             EA = n(An,A.W)  - BYTE only
01:00000CE4 0BB09000        	  1315:             bclr.b d5,0(a0,a1.w)
01:00000CE8 66FE            	  1316:             bne.s *               * branch if Z clear
01:00000CEA 0DB0A000        	  1317:             bclr.b d6,0(a0,a2.w)      *
01:00000CEE 66FE            	  1318:             bne.s *               * branch if Z clear
01:00000CF0 0FB0A001        	  1319:             bclr.b d7,1(a0,a2.w)      *
01:00000CF4 66FE            	  1320:             bne.s *               * branch if Z clear
                            	  1321: *             EA = n(An,A.L)  - BYTE only
01:00000CF6 0BB09800        	  1322:             bclr.b d5,0(a0,a1.l)
01:00000CFA 66FE            	  1323:             bne.s *               * branch if Z clear
01:00000CFC 0DB0A800        	  1324:             bclr.b d6,0(a0,a2.l)      *
01:00000D00 66FE            	  1325:             bne.s *               * branch if Z clear
01:00000D02 0FB0A801        	  1326:             bclr.b d7,1(a0,a2.l)      *
01:00000D06 66FE            	  1327:             bne.s *               * branch if Z clear
01:00000D08 307C0100        	  1328:             move.l #$00000100,a0      * point to memory to address
01:00000D0C 0C1000FE        	  1329:             cmpi.b #$FE,(a0)
01:00000D10 66FE            	  1330:             bne.s *               * branch if Z clear
                            	  1331: 
                            	  1332: *             EA = x.W  - BYTE only
01:00000D12 307C0100        	  1333:             move.l #$00000100,a0      * point to memory to address
01:00000D16 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000D1A 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
01:00000D1E 10FC00FF        	  1336:             move.b #$FF,(a0)+         * populate test data
01:00000D22 0BB80100        	  1337:             bclr.b d5,$0100
01:00000D26 67FE            	  1338:             beq.s *               * branch if Z set
01:00000D28 0DB80101        	  1339:             bclr.b d6,$0101           *
01:00000D2C 67FE            	  1340:             beq.s *               * branch if Z set
01:00000D2E 0FB80102        	  1341:             bclr.b d7,$0102           *
01:00000D32 67FE            	  1342:             beq.s *               * branch if Z set
01:00000D34 307C0100        	  1343:             move.l #$00000100,a0      * point to memory to address
01:00000D38 0C1800FE        	  1344:             cmpi.b #$FE,(a0)+
01:00000D3C 66FE            	  1345:             bne.s *               * branch if Z clear
                            	  1346: 
                            	  1347: *             EA = x.L  - BYTE only
01:00000D3E 207C0000F100    	  1348:             move.l #$F100,a0      * point to memory to address 0x100
01:00000D44 10FC0001        	  1349:             move.b #$01,(a0)+         * populate test data
01:00000D48 10FC00FC        	  1350:             move.b #$FC,(a0)+         * populate test data
01:00000D4C 10FC0080        	  1351:             move.b #$80,(a0)+         * populate test data
01:00000D50 0BB90000F100    	  1352:             bclr.b d5,$F100
01:00000D56 67FE            	  1353:             beq.s *               * branch if Z set
01:00000D58 0DB90000F101    	  1354:             bclr.b d6,$F101       *
01:00000D5E 66FE            	  1355:             bne.s *               * branch if Z clear
01:00000D60 0FB90000F102    	  1356:             bclr.b d7,$F102       *
01:00000D66 67FE            	  1357:             beq.s *               * branch if Z set
01:00000D68 207C0000F101    	  1358:             move.l #$F101,a0      * point to memory to address 0x100
01:00000D6E 0C1000FC        	  1359:             cmpi.b #$FC,(a0)
01:00000D72 66FE            	  1360:             bne.s *               * branch if Z clear
                            	  1361: 
                            	  1362: 
                            	  1363: 
01:00000D74 4E75            	  1364:     rts
                            	  1365: 
                            	  1366: *-----------------------------------------------------------
                            	  1367: *-----------------------------------------------------------
                            	  1368: * OPCODE : BSET
                            	  1369: *-----------------------------------------------------------
                            	  1370: *-----------------------------------------------------------
                            	  1371: op_BSET:
                            	  1372: 
                            	  1373: 
                            	  1374: *  Bit Number.s Static
                            	  1375: 
                            	  1376: *             EA = Dn  - LONG only
01:00000D76 7000            	  1377:             moveq  #$00000000,d0      * populate test data
01:00000D78 08C00000        	  1378:             bset.l #0,d0
01:00000D7C 66FE            	  1379:             bne.s *               * branch if Z clear
01:00000D7E 08C00001        	  1380:             bset.l #1,d0              *
01:00000D82 66FE            	  1381:             bne.s *               * branch if Z clear
01:00000D84 08C0000F        	  1382:             bset.l #15,d0             *
01:00000D88 66FE            	  1383:             bne.s *               * branch if Z clear
01:00000D8A 08C0001F        	  1384:             bset.l #31,d0             *
01:00000D8E 66FE            	  1385:             bne.s *               * branch if Z clear
01:00000D90 0C8080008003    	  1386:             cmpi.l #$80008003,d0
01:00000D96 66FE            	  1387:             bne.s *               * branch if Z clear
                            	  1388: 
                            	  1389: 
                            	  1390: *             EA = (An)  - BYTE only
01:00000D98 307C0100        	  1391:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000D9C 10BC0000        	  1392:             move.b #$00,(a0)          * populate test data
01:00000DA0 08D00000        	  1393:             bset.b #0,(a0)
01:00000DA4 66FE            	  1394:             bne.s *               * branch if Z clear
01:00000DA6 08D00007        	  1395:             bset.b #7,(a0)            *
01:00000DAA 66FE            	  1396:             bne.s *               * branch if Z clear
01:00000DAC 0C100081        	  1397:             cmpi.b #$81,(a0)
01:00000DB0 66FE            	  1398:             bne.s *               * branch if Z clear
                            	  1399: 
                            	  1400: *             EA = (An)+  - BYTE only
01:00000DB2 307C0100        	  1401:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DB6 10FC0000        	  1402:             move.b #$00,(a0)+         * populate test data
01:00000DBA 10FC0000        	  1403:             move.b #$00,(a0)+         * populate test data
01:00000DBE 307C0100        	  1404:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DC2 08D80000        	  1405:             bset.b #0,(a0)+
01:00000DC6 66FE            	  1406:             bne.s *               * branch if Z clear
01:00000DC8 08D80001        	  1407:             bset.b #1,(a0)+           *
01:00000DCC 66FE            	  1408:             bne.s *               * branch if Z clear
01:00000DCE 307C0100        	  1409:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DD2 0C180001        	  1410:             cmpi.b #$01,(a0)+
01:00000DD6 66FE            	  1411:             bne.s *               * branch if Z clear
01:00000DD8 0C180002        	  1412:             cmpi.b #$02,(a0)+
01:00000DDC 66FE            	  1413:             bne.s *               * branch if Z clear
                            	  1414: 
                            	  1415: 
                            	  1416: *             EA = -(An)  - BYTE only
01:00000DDE 307C0100        	  1417:             move.l #$00000100,a0      * point to memory to address
01:00000DE2 10FC0000        	  1418:             move.b #$00,(a0)+         * populate test data
01:00000DE6 10FC0000        	  1419:             move.b #$00,(a0)+         * populate test data
01:00000DEA 08E00007        	  1420:             bset.b #7,-(a0)
01:00000DEE 66FE            	  1421:             bne.s *               * branch if Z clear
01:00000DF0 08E00000        	  1422:             bset.b #0,-(a0)           *
01:00000DF4 66FE            	  1423:             bne.s *               * branch if Z clear
01:00000DF6 307C0102        	  1424:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000DFA 0C200080        	  1425:             cmpi.b #$80,-(a0)
01:00000DFE 66FE            	  1426:             bne.s *               * branch if Z clear
01:00000E00 0C200001        	  1427:             cmpi.b #$01,-(a0)
01:00000E04 66FE            	  1428:             bne.s *               * branch if Z clear
                            	  1429: 
                            	  1430: 
                            	  1431: *             EA = n(An)  - BYTE only
01:00000E06 307C0100        	  1432:             move.l #$00000100,a0      * point to memory to address
01:00000E0A 10FC0000        	  1433:             move.b #$00,(a0)+         * populate test data
01:00000E0E 10FC0000        	  1434:             move.b #$00,(a0)+         * populate test data
01:00000E12 307C0100        	  1435:             move.l #$00000100,a0      * point to memory to address
01:00000E16 08D00000        	  1436:             bset.b #0,0(a0)
01:00000E1A 66FE            	  1437:             bne.s *               * branch if Z clear
01:00000E1C 08E800040001    	  1438:             bset.b #4,1(a0)           *
01:00000E22 66FE            	  1439:             bne.s *               * branch if Z clear
01:00000E24 307C0100        	  1440:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E28 0C180001        	  1441:             cmpi.b #$01,(a0)+
01:00000E2C 66FE            	  1442:             bne.s *               * branch if Z clear
01:00000E2E 0C180010        	  1443:             cmpi.b #$10,(a0)+
01:00000E32 66FE            	  1444:             bne.s *               * branch if Z clear
                            	  1445: 
                            	  1446: 
                            	  1447: *             EA = n(An,D.W)  - BYTE only
01:00000E34 307C0100        	  1448:             move.l #$00000100,a0      * point to memory to address
01:00000E38 93C9            	  1449:             move.l #$00000000,a1      * point to memory to address
01:00000E3A 347C0004        	  1450:             move.l #$00000004,a2      * point to memory to address
01:00000E3E 7000            	  1451:             moveq  #$00000000,d0      * point to memory to address
01:00000E40 7201            	  1452:             moveq  #$00000001,d1      * point to memory to address
01:00000E42 10FC0000        	  1453:             move.b #$00,(a0)+         * populate test data
01:00000E46 10FC0000        	  1454:             move.b #$00,(a0)+         * populate test data
01:00000E4A 10FC0000        	  1455:             move.b #$00,(a0)+         * populate test data
01:00000E4E 10FC0000        	  1456:             move.b #$00,(a0)+         * populate test data
01:00000E52 10FC0000        	  1457:             move.b #$00,(a0)+         * populate test data
01:00000E56 10FC0000        	  1458:             move.b #$00,(a0)+         * populate test data
01:00000E5A 10FC0000        	  1459:             move.b #$00,(a0)+         * populate test data
01:00000E5E 10FC0000        	  1460:             move.b #$00,(a0)+         * populate test data
01:00000E62 10FC0000        	  1461:             move.b #$00,(a0)+         * populate test data
01:00000E66 10FC0000        	  1462:             move.b #$00,(a0)+         * populate test data
01:00000E6A 307C0100        	  1463:             move.l #$00000100,a0      * point to memory to address
01:00000E6E 08F000000000    	  1464:             bset.b #0,0(a0,d0.w)
01:00000E74 66FE            	  1465:             bne.s *               * branch if Z clear
01:00000E76 08F000011000    	  1466:             bset.b #1,0(a0,d1.w)      *
01:00000E7C 66FE            	  1467:             bne.s *               * branch if Z clear
01:00000E7E 08F000021001    	  1468:             bset.b #2,1(a0,d1.w)      *
01:00000E84 66FE            	  1469:             bne.s *               * branch if Z clear
                            	  1470: *             EA = n(An,D.L)  - BYTE only
01:00000E86 08F000030802    	  1471:             bset.b #3,2(a0,d0.l)
01:00000E8C 66FE            	  1472:             bne.s *               * branch if Z clear
01:00000E8E 08F000041800    	  1473:             bset.b #4,0(a0,d1.l)      *
01:00000E94 66FE            	  1474:             bne.s *               * branch if Z clear
01:00000E96 08F000051801    	  1475:             bset.b #5,1(a0,d1.l)      *
01:00000E9C 66FE            	  1476:             bne.s *               * branch if Z clear
                            	  1477: *             EA = n(An,A.W)  - BYTE only
01:00000E9E 08F000069000    	  1478:             bset.b #6,0(a0,a1.w)
01:00000EA4 66FE            	  1479:             bne.s *               * branch if Z clear
01:00000EA6 08F00001A000    	  1480:             bset.b #1,0(a0,a2.w)      *
01:00000EAC 66FE            	  1481:             bne.s *               * branch if Z clear
01:00000EAE 08F00007A001    	  1482:             bset.b #7,1(a0,a2.w)      *
01:00000EB4 66FE            	  1483:             bne.s *               * branch if Z clear
                            	  1484: *             EA = n(An,A.L)  - BYTE only
01:00000EB6 08F00000A802    	  1485:             bset.b #0,2(a0,a2.l)
01:00000EBC 66FE            	  1486:             bne.s *               * branch if Z clear
01:00000EBE 08F00000A803    	  1487:             bset.b #0,3(a0,a2.l)      *
01:00000EC4 66FE            	  1488:             bne.s *               * branch if Z clear
01:00000EC6 08F00001A804    	  1489:             bset.b #1,4(a0,a2.l)      *
01:00000ECC 66FE            	  1490:             bne.s *               * branch if Z clear
01:00000ECE 307C0100        	  1491:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000ED2 0C9841122C00    	  1492:             cmpi.l #$41122C00,(a0)+
01:00000ED8 66FE            	  1493:             bne.s *               * branch if Z clear
01:00000EDA 0C9802800101    	  1494:             cmpi.l #$02800101,(a0)+
01:00000EE0 66FE            	  1495:             bne.s *
                            	  1496: 
                            	  1497: 
                            	  1498: 
                            	  1499: *             EA = x.W  - BYTE only
01:00000EE2 307C0100        	  1500:             move.l #$00000100,a0      * point to memory to address
01:00000EE6 10FC0000        	  1501:             move.b #$00,(a0)+         * populate test data
01:00000EEA 08F800000100    	  1502:             bset.b #0,$0100
01:00000EF0 66FE            	  1503:             bne.s *               * branch if Z clear
01:00000EF2 08F800010100    	  1504:             bset.b #1,$0100           *
01:00000EF8 66FE            	  1505:             bne.s *               * branch if Z clear
01:00000EFA 307C0100        	  1506:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EFE 0C180003        	  1507:             cmpi.b #$03,(a0)+
01:00000F02 66FE            	  1508:             bne.s *
                            	  1509: 
                            	  1510: 
                            	  1511: *             EA = x.L  - BYTE only
01:00000F04 207C0000F100    	  1512:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F0A 10BC0000        	  1513:             move.b #$00,(a0)          * populate test data
01:00000F0E 08F900000000F100	  1514:             bset.b #0,$F100
01:00000F16 66FE            	  1515:             bne.s *               * branch if Z clear
01:00000F18 08F900010000F100	  1516:             bset.b #1,$F100       *
01:00000F20 66FE            	  1517:             bne.s *               * branch if Z clear
01:00000F22 08F900020000F100	  1518:             bset.b #2,$F100       *
01:00000F2A 66FE            	  1519:             bne.s *               * branch if Z clear
01:00000F2C 207C0000F100    	  1520:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F32 0C180007        	  1521:             cmpi.b #$07,(a0)+
01:00000F36 66FE            	  1522:             bne.s *
                            	  1523: 
                            	  1524: 
                            	  1525: * Bit Number.s Dynamic
                            	  1526: 
                            	  1527: *             EA = Dn  - LONG only
01:00000F38 7000            	  1528:             moveq  #$00000000,d0      * populate test data
01:00000F3A 7A00            	  1529:             move.l #0,d5              * populate bit.s number to test
01:00000F3C 7C01            	  1530:             move.l #1,d6              * populate bit.s number to test
01:00000F3E 7E1F            	  1531:             move.l #31,d7              * populate bit.s number to test
                            	  1532: 
01:00000F40 0BC0            	  1533:             bset.l d5,d0
01:00000F42 66FE            	  1534:             bne.s *               * branch if Z clear
01:00000F44 0DC0            	  1535:             bset.l d6,d0              *
01:00000F46 66FE            	  1536:             bne.s *               * branch if Z clear
01:00000F48 0FC0            	  1537:             bset.l d7,d0             *
01:00000F4A 66FE            	  1538:             bne.s *               * branch if Z clear
01:00000F4C 0C8080000003    	  1539:             cmpi.l #$80000003,d0
01:00000F52 66FE            	  1540:             bne.s *               * branch if Z clear
                            	  1541: 
                            	  1542: 
                            	  1543: *             EA = (An)  - BYTE only
01:00000F54 7A00            	  1544:             move.l #0,d5              * populate bit.s number to test
01:00000F56 7C01            	  1545:             move.l #1,d6              * populate bit.s number to test
01:00000F58 7E07            	  1546:             move.l #7,d7              * populate bit.s number to test
01:00000F5A 307C0100        	  1547:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F5E 10BC0000        	  1548:             move.b #$00,(a0)          * populate test data
01:00000F62 0BD0            	  1549:             bset.b d5,(a0)
01:00000F64 66FE            	  1550:             bne.s *               * branch if Z clear
01:00000F66 0DD0            	  1551:             bset.b d6,(a0)            *
01:00000F68 66FE            	  1552:             bne.s *               * branch if Z clear
01:00000F6A 0FD0            	  1553:             bset.b d7,(a0)            *
01:00000F6C 66FE            	  1554:             bne.s *               * branch if Z clear
01:00000F6E 0C100083        	  1555:             cmpi.b #$83,(a0)
01:00000F72 66FE            	  1556:             bne.s *               * branch if Z clear
                            	  1557: 
                            	  1558: 
                            	  1559: *             EA = (An)+  - BYTE only
01:00000F74 307C0100        	  1560:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F78 10FC0000        	  1561:             move.b #$00,(a0)+         * populate test data
01:00000F7C 10FC0000        	  1562:             move.b #$00,(a0)+         * populate test data
01:00000F80 10FC0000        	  1563:             move.b #$00,(a0)+         * populate test data
01:00000F84 307C0100        	  1564:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F88 0BD8            	  1565:             bset.b d5,(a0)+
01:00000F8A 66FE            	  1566:             bne.s *               * branch if Z clear
01:00000F8C 0DD8            	  1567:             bset.b d6,(a0)+           *
01:00000F8E 66FE            	  1568:             bne.s *               * branch if Z clear
01:00000F90 0FD8            	  1569:             bset.b d7,(a0)+           *
01:00000F92 66FE            	  1570:             bne.s *               * branch if Z clear
01:00000F94 307C0100        	  1571:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F98 0C180001        	  1572:             cmpi.b #$01,(a0)+
01:00000F9C 66FE            	  1573:             bne.s *               * branch if Z clear
01:00000F9E 0C180002        	  1574:             cmpi.b #$02,(a0)+
01:00000FA2 66FE            	  1575:             bne.s *               * branch if Z clear
01:00000FA4 0C180080        	  1576:             cmpi.b #$80,(a0)+
01:00000FA8 66FE            	  1577:             bne.s *               * branch if Z clear
                            	  1578: 
                            	  1579: *             EA = -(An)  - BYTE only
01:00000FAA 307C0100        	  1580:             move.l #$00000100,a0      * point to memory to address
01:00000FAE 10FC0000        	  1581:             move.b #$00,(a0)+         * populate test data
01:00000FB2 10FC0000        	  1582:             move.b #$00,(a0)+         * populate test data
01:00000FB6 10FC0000        	  1583:             move.b #$00,(a0)+         * populate test data
01:00000FBA 307C0103        	  1584:             move.l #$00000103,a0      * point to memory to address
01:00000FBE 0BE0            	  1585:             bset.b d5,-(a0)
01:00000FC0 66FE            	  1586:             bne.s *               * branch if Z clear
01:00000FC2 0DE0            	  1587:             bset.b d6,-(a0)           *
01:00000FC4 66FE            	  1588:             bne.s *               * branch if Z clear
01:00000FC6 0FE0            	  1589:             bset.b d7,-(a0)           *
01:00000FC8 66FE            	  1590:             bne.s *               * branch if Z clear
01:00000FCA 307C0103        	  1591:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000FCE 0C200001        	  1592:             cmpi.b #$01,-(a0)
01:00000FD2 66FE            	  1593:             bne.s *               * branch if Z clear
01:00000FD4 0C200002        	  1594:             cmpi.b #$02,-(a0)
01:00000FD8 66FE            	  1595:             bne.s *               * branch if Z clear
01:00000FDA 0C200080        	  1596:             cmpi.b #$80,-(a0)
01:00000FDE 66FE            	  1597:             bne.s *               * branch if Z clear
                            	  1598: 
                            	  1599: *             EA = n(An)  - BYTE only
01:00000FE0 307C0100        	  1600:             move.l #$00000100,a0      * point to memory to address
01:00000FE4 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
01:00000FE8 10FC0000        	  1602:             move.b #$00,(a0)+         * populate test data
01:00000FEC 10FC0000        	  1603:             move.b #$00,(a0)+         * populate test data
01:00000FF0 307C0100        	  1604:             move.l #$00000100,a0      * point to memory to address
01:00000FF4 0BD0            	  1605:             bset.b d5,0(a0)
01:00000FF6 66FE            	  1606:             bne.s *               * branch if Z clear
01:00000FF8 0DE80001        	  1607:             bset.b d6,1(a0)           *
01:00000FFC 66FE            	  1608:             bne.s *               * branch if Z clear
01:00000FFE 0FE80002        	  1609:             bset.b d7,2(a0)           *
01:00001002 66FE            	  1610:             bne.s *               * branch if Z clear
01:00001004 307C0100        	  1611:             move.l #$00000100,a0      * point to memory to address 0x100
01:00001008 0C180001        	  1612:             cmpi.b #$01,(a0)+
01:0000100C 66FE            	  1613:             bne.s *               * branch if Z clear
01:0000100E 0C180002        	  1614:             cmpi.b #$02,(a0)+
01:00001012 66FE            	  1615:             bne.s *               * branch if Z clear
01:00001014 0C180080        	  1616:             cmpi.b #$80,(a0)+
01:00001018 66FE            	  1617:             bne.s *               * branch if Z clear
                            	  1618: 
                            	  1619: *             EA = n(An,R.W)  - BYTE only
01:0000101A 307C0100        	  1620:             move.l #$00000100,a0      * point to memory to address
01:0000101E 10FC0000        	  1621:             move.b #$00,(a0)+         * populate test data
01:00001022 10FC0000        	  1622:             move.b #$00,(a0)+         * populate test data
01:00001026 10FC0000        	  1623:             move.b #$00,(a0)+         * populate test data
01:0000102A 10FC0000        	  1624:             move.b #$00,(a0)+         * populate test data
01:0000102E 10FC0000        	  1625:             move.b #$00,(a0)+         * populate test data
01:00001032 10FC0000        	  1626:             move.b #$00,(a0)+         * populate test data
01:00001036 10FC0000        	  1627:             move.b #$00,(a0)+         * populate test data
01:0000103A 10FC0000        	  1628:             move.b #$00,(a0)+         * populate test data
01:0000103E 10FC0000        	  1629:             move.b #$00,(a0)+         * populate test data
01:00001042 10FC0000        	  1630:             move.b #$00,(a0)+         * populate test data
01:00001046 10FC0000        	  1631:             move.b #$00,(a0)+         * populate test data
01:0000104A 10FC0000        	  1632:             move.b #$00,(a0)+         * populate test data
01:0000104E 307C0100        	  1633:             move.l #$00000100,a0      * point to memory to address
01:00001052 93C9            	  1634:             move.l #$00000000,a1      * point to memory to address
01:00001054 347C0001        	  1635:             move.l #$00000001,a2      * point to memory to address
01:00001058 7000            	  1636:             moveq  #$00000000,d0      * point to memory to address
01:0000105A 7201            	  1637:             moveq  #$00000001,d1      * point to memory to address
01:0000105C 0BF00000        	  1638:             bset.b d5,0(a0,d0.w)
01:00001060 66FE            	  1639:             bne.s *               * branch if Z clear
01:00001062 0DF01000        	  1640:             bset.b d6,0(a0,d1.w)      *
01:00001066 66FE            	  1641:             bne.s *               * branch if Z clear
01:00001068 0FF01001        	  1642:             bset.b d7,1(a0,d1.w)      *
01:0000106C 66FE            	  1643:             bne.s *               * branch if Z clear
                            	  1644: *             EA = n(An,R.L)  - BYTE only
01:0000106E 0BF00802        	  1645:             bset.b d5,2(a0,d0.l)
01:00001072 66FE            	  1646:             bne.s *               * branch if Z clear
01:00001074 0DF01803        	  1647:             bset.b d6,3(a0,d1.l)      *
01:00001078 66FE            	  1648:             bne.s *               * branch if Z clear
01:0000107A 0FF01804        	  1649:             bset.b d7,4(a0,d1.l)      *
01:0000107E 66FE            	  1650:             bne.s *               * branch if Z clear
                            	  1651: *             EA = n(An,A.W)  - BYTE only
01:00001080 0BF09005        	  1652:             bset.b d5,5(a0,a1.w)
01:00001084 66FE            	  1653:             bne.s *               * branch if Z clear
01:00001086 0DF0A006        	  1654:             bset.b d6,6(a0,a2.w)      *
01:0000108A 66FE            	  1655:             bne.s *               * branch if Z clear
01:0000108C 0FF0A007        	  1656:             bset.b d7,7(a0,a2.w)      *
01:00001090 66FE            	  1657:             bne.s *               * branch if Z clear
                            	  1658: *             EA = n(An,A.L)  - BYTE only
01:00001092 0BF09808        	  1659:             bset.b d5,8(a0,a1.l)
01:00001096 66FE            	  1660:             bne.s *               * branch if Z clear
01:00001098 0DF0A809        	  1661:             bset.b d6,9(a0,a2.l)      *
01:0000109C 66FE            	  1662:             bne.s *               * branch if Z clear
01:0000109E 0FF0A80A        	  1663:             bset.b d7,10(a0,a2.l)      *
01:000010A2 66FE            	  1664:             bne.s *               * branch if Z clear
01:000010A4 307C0100        	  1665:             move.l #$00000100,a0      * point to memory to address 0x100
01:000010A8 0C9801028100    	  1666:             cmpi.l #$01028100,(a0)+
01:000010AE 66FE            	  1667:             bne.s *               * branch if Z clear
01:000010B0 0C9802810002    	  1668:             cmpi.l #$02810002,(a0)+
01:000010B6 66FE            	  1669:             bne.s *
                            	  1670: 
                            	  1671: 
                            	  1672: *             EA = x.W  - BYTE only
01:000010B8 307C0100        	  1673:             move.l #$00000100,a0      * point to memory to address
01:000010BC 10FC0000        	  1674:             move.b #$00,(a0)+         * populate test data
01:000010C0 10FC0000        	  1675:             move.b #$00,(a0)+         * populate test data
01:000010C4 10FC0000        	  1676:             move.b #$00,(a0)+         * populate test data
01:000010C8 0BF80100        	  1677:             bset.b d5,$0100
01:000010CC 66FE            	  1678:             bne.s *               * branch if Z clear
01:000010CE 0DF80100        	  1679:             bset.b d6,$0100           *
01:000010D2 66FE            	  1680:             bne.s *               * branch if Z clear
01:000010D4 0FF80100        	  1681:             bset.b d7,$0100           *
01:000010D8 66FE            	  1682:             bne.s *               * branch if Z clear
01:000010DA 307C0100        	  1683:             move.l #$00000100,a0      * point to memory to address
01:000010DE 0C180083        	  1684:             cmpi.b #$83,(a0)+
01:000010E2 66FE            	  1685:             bne.s *               * branch if Z clear
                            	  1686: 
                            	  1687: *             EA = x.L  - BYTE only
01:000010E4 207C0000F100    	  1688:             move.l #$F100,a0      * point to memory to address 0x100
01:000010EA 10FC0000        	  1689:             move.b #$00,(a0)+         * populate test data
01:000010EE 10FC0000        	  1690:             move.b #$00,(a0)+         * populate test data
01:000010F2 10FC0000        	  1691:             move.b #$00,(a0)+         * populate test data
01:000010F6 0BF90000F100    	  1692:             bset.b d5,$F100
01:000010FC 66FE            	  1693:             bne.s *               * branch if Z clear
01:000010FE 0DF90000F100    	  1694:             bset.b d6,$F100       *
01:00001104 66FE            	  1695:             bne.s *               * branch if Z clear
01:00001106 0FF90000F100    	  1696:             bset.b d7,$F100       *
01:0000110C 66FE            	  1697:             bne.s *               * branch if Z clear
01:0000110E 207C0000F100    	  1698:             move.l #$F100,a0      * point to memory to address 0x100
01:00001114 0C100083        	  1699:             cmpi.b #$83,(a0)
01:00001118 66FE            	  1700:             bne.s *               * branch if Z clear
                            	  1701: 
                            	  1702: 
01:0000111A 4E75            	  1703:     rts
                            	  1704: 
                            	  1705: *-----------------------------------------------------------
                            	  1706: *-----------------------------------------------------------
                            	  1707: * OPCODE : MOVEP
                            	  1708: *-----------------------------------------------------------
                            	  1709: *-----------------------------------------------------------
                            	  1710: op_MOVEP:
                            	  1711: 
                            	  1712: * Dn --> x(An)
01:0000111C 307C0100        	  1713:             move.l #$00000100,a0
01:00001120 203C12345678    	  1714:             move.l #$12345678,d0
01:00001126 223CAABBCCDD    	  1715:             move.l #$AABBCCDD,d1
01:0000112C 20BC00000000    	  1716:             move.l #0,(a0)
01:00001132 217C000000000004	  1717:             move.l #0,4(a0)
                            	  1718: 
01:0000113A 01880000        	  1719:             movep.w d0,0(a0)      * even offset
01:0000113E 03880001        	  1720:             movep.w d1,1(a0)      * odd offset
                            	  1721: 
01:00001142 01C80004        	  1722:             movep.l d0,4(a0)      * even offset
01:00001146 03C80005        	  1723:             movep.l d1,5(a0)      * odd offset
                            	  1724: 
01:0000114A 0C9056CC78DD    	  1725:             cmpi.l #$56CC78DD,(a0)
01:00001150 66FE            	  1726:             bne.s *
01:00001152 0CA812AA34BB0004	  1727:             cmpi.l #$12AA34BB,4(a0)
01:0000115A 66FE            	  1728:             bne.s *
01:0000115C 0CA856CC78DD0008	  1729:             cmpi.l #$56CC78DD,8(a0)
01:00001164 66FE            	  1730:             bne.s *
                            	  1731: 
                            	  1732: 
                            	  1733: * x(An)--> Dn
01:00001166 203C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d0
01:0000116C 223C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d1
01:00001172 243C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d2
01:00001178 263C5A5A5A5A    	  1737:             move.l #$5a5a5a5a,d3
                            	  1738: 
01:0000117E 01080000        	  1739:             movep.w 0(a0),d0      * even offset
01:00001182 03080001        	  1740:             movep.w 1(a0),d1      * odd offset
                            	  1741: 
01:00001186 05480004        	  1742:             movep.l 4(a0),d2      * even offset
01:0000118A 07480005        	  1743:             movep.l 5(a0),d3      * odd offset
                            	  1744: 
01:0000118E 0C805A5A5678    	  1745:             cmpi.l #$5a5a5678,d0
01:00001194 66FE            	  1746:             bne.s *
01:00001196 0C815A5ACCDD    	  1747:             cmpi.l #$5a5aCCDD,d1
01:0000119C 66FE            	  1748:             bne.s *
01:0000119E 0C8212345678    	  1749:             cmpi.l #$12345678,d2
01:000011A4 66FE            	  1750:             bne.s *
01:000011A6 0C83AABBCCDD    	  1751:             cmpi.l #$AABBCCDD,d3
01:000011AC 66FE            	  1752:             bne.s *
                            	  1753: 
01:000011AE 4E75            	  1754:             rts
                            	  1755: 
                            	  1756: 
                            	  1757: 
                            	  1758: *-----------------------------------------------------------
                            	  1759: *-----------------------------------------------------------
                            	  1760: * OPCODE : BOOL_I
                            	  1761: *-----------------------------------------------------------
                            	  1762: *-----------------------------------------------------------
                            	  1763: op_BOOL_I:
                            	  1764: 
                            	  1765: *     Dn -- BYTE
01:000011B0 203C12345678    	  1766:             move.l #$12345678,d0
01:000011B6 44FC000F        	  1767:             move.w #$000F,CCR          * pre-set Flags
01:000011BA 000000FF        	  1768:             ori.b  #$FF,d0
01:000011BE 0A00005A        	  1769:             eori.b #$5A,d0
01:000011C2 020000F0        	  1770:             andi.b #$F0,d0
01:000011C6 69FE            	  1771:             bvs.s *                       * Check V,C are cleared
01:000011C8 65FE            	  1772:             bcs.s *
01:000011CA 6AFE            	  1773:             bpl.s *                       * Verify if N flag is set
01:000011CC 02000000        	  1774:             andi.b #$00,d0
01:000011D0 6BFE            	  1775:             bmi.s *                       * Verify if N flag is cleared
01:000011D2 66FE            	  1776:             bne.s *                       * Verify if Z flag is set
                            	  1777: 
                            	  1778: *     Dn -- WORD
01:000011D4 223C12345678    	  1779:             move.l #$12345678,d1
01:000011DA 44FC000F        	  1780:             move.w #$000F,CCR          * pre-set Flags
01:000011DE 0041FFFF        	  1781:             ori.w  #$FFFF,d1
01:000011E2 0A415A5A        	  1782:             eori.w #$5A5A,d1
01:000011E6 0241F0F0        	  1783:             andi.w #$F0F0,d1
01:000011EA 69FE            	  1784:             bvs.s *                       * Check V,C are cleared
01:000011EC 65FE            	  1785:             bcs.s *
01:000011EE 6AFE            	  1786:             bpl.s *                       * Verify if N flag is set
01:000011F0 02410000        	  1787:             andi.w #$0000,d1
01:000011F4 6BFE            	  1788:             bmi.s *                       * Verify if N flag is cleared
01:000011F6 66FE            	  1789:             bne.s *                       * Verify if Z flag is set
                            	  1790: 
                            	  1791: *     Dn -- LONG
01:000011F8 243C12345678    	  1792:             move.l #$12345678,d2
01:000011FE 44FC000F        	  1793:             move.w #$000F,CCR          * pre-set Flags
01:00001202 0082FFFFFFFF    	  1794:             ori.l  #$FFFFFFFF,d2
01:00001208 0A825A5A5A5A    	  1795:             eori.l #$5A5A5A5A,d2
01:0000120E 0282F0F0F0F0    	  1796:             andi.l #$F0F0F0F0,d2
01:00001214 69FE            	  1797:             bvs.s *                       * Check V,C are cleared
01:00001216 65FE            	  1798:             bcs.s *
01:00001218 6AFE            	  1799:             bpl.s *                       * Verify if N flag is set
01:0000121A 028200000000    	  1800:             andi.l #$00000000,d2
01:00001220 6BFE            	  1801:             bmi.s *                       * Verify if N flag is cleared
01:00001222 66FE            	  1802:             bne.s *                       * Verify if Z flag is set
                            	  1803: 
                            	  1804: 
                            	  1805: *     (An) -- BYTE
01:00001224 307C0100        	  1806:             move.l #$00000100,a0
01:00001228 20BC12345678    	  1807:             move.l #$12345678,(a0)
01:0000122E 44FC000F        	  1808:             move.w #$000F,CCR          * pre-set Flags
01:00001232 001000FF        	  1809:             ori.b  #$FF,(a0)
01:00001236 0A10005A        	  1810:             eori.b #$5A,(a0)
01:0000123A 021000F0        	  1811:             andi.b #$F0,(a0)
01:0000123E 69FE            	  1812:             bvs.s *                       * Check V,C are cleared
01:00001240 65FE            	  1813:             bcs.s *
01:00001242 6AFE            	  1814:             bpl.s *                       * Verify if N flag is set
01:00001244 02100000        	  1815:             andi.b #$00,(a0)
01:00001248 6BFE            	  1816:             bmi.s *                       * Verify if N flag is cleared
01:0000124A 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
01:0000124C 4A10            	  1818:             cmpi.b #$00,(a0)
01:0000124E 66FE            	  1819:             bne.s *                       * Verify if Z flag is set
                            	  1820: 
                            	  1821: *     (An) -- WORD
01:00001250 20BC12345678    	  1822:             move.l #$12345678,(a0)
01:00001256 44FC000F        	  1823:             move.w #$000F,CCR          * pre-set Flags
01:0000125A 0050FFFF        	  1824:             ori.w  #$FFFF,(a0)
01:0000125E 0A505A5A        	  1825:             eori.w #$5A5A,(a0)
01:00001262 0250F0F0        	  1826:             andi.w #$F0F0,(a0)
01:00001266 69FE            	  1827:             bvs.s *                       * Check V,C are cleared
01:00001268 65FE            	  1828:             bcs.s *
01:0000126A 6AFE            	  1829:             bpl.s *                       * Verify if N flag is set
01:0000126C 02500000        	  1830:             andi.w #$0000,(a0)
01:00001270 6BFE            	  1831:             bmi.s *                       * Verify if N flag is cleared
01:00001272 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
01:00001274 4A50            	  1833:             cmpi.w #$00,(a0)
01:00001276 66FE            	  1834:             bne.s *                       * Verify if Z flag is set
                            	  1835: 
                            	  1836: *     (An) -- LONG
01:00001278 20BC12345678    	  1837:             move.l #$12345678,(a0)
01:0000127E 44FC000F        	  1838:             move.w #$000F,CCR          * pre-set Flags
01:00001282 0090FFFFFFFF    	  1839:             ori.l  #$FFFFFFFF,(a0)
01:00001288 0A905A5A5A5A    	  1840:             eori.l #$5A5A5A5A,(a0)
01:0000128E 0290F0F0F0F0    	  1841:             andi.l #$F0F0F0F0,(a0)
01:00001294 69FE            	  1842:             bvs.s *                       * Check V,C are cleared
01:00001296 65FE            	  1843:             bcs.s *
01:00001298 6AFE            	  1844:             bpl.s *                       * Verify if N flag is set
01:0000129A 029000000000    	  1845:             andi.l #$00000000,(a0)
01:000012A0 6BFE            	  1846:             bmi.s *                       * Verify if N flag is cleared
01:000012A2 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
01:000012A4 4A90            	  1848:             cmpi.l #$00,(a0)
01:000012A6 66FE            	  1849:             bne.s *                       * Verify if Z flag is set
                            	  1850: 
                            	  1851: 
                            	  1852: 
                            	  1853: *     (An)+ -- BYTE
01:000012A8 307C0100        	  1854:             move.l #$00000100,a0
01:000012AC 20BC00A5FF88    	  1855:             move.l #$00A5FF88,(a0)
01:000012B2 44FC000F        	  1856:             move.w #$000F,CCR          * pre-set Flags
                            	  1857: 
01:000012B6 001800F5        	  1858:             ori.b  #$F5,(a0)+
01:000012BA 6AFE            	  1859:             bpl.s *                       * Verify if N flag is set
01:000012BC 67FE            	  1860:             beq.s *                       * Verify if Z flag is cleared
                            	  1861: 
01:000012BE 4618            	  1862:             eori.b #$FF,(a0)+
01:000012C0 6BFE            	  1863:             bmi.s *                       * Verify if N flag is cleared
01:000012C2 67FE            	  1864:             beq.s *                       * Verify if Z flag is cleared
                            	  1865: 
01:000012C4 021800AA        	  1866:             andi.b #$AA,(a0)+
01:000012C8 6AFE            	  1867:             bpl.s *                       * Verify if N flag is set
01:000012CA 67FE            	  1868:             beq.s *                       * Verify if Z flag is cleared
                            	  1869: 
01:000012CC 307C0100        	  1870:             move.l #$00000100,a0
01:000012D0 0C90F55AAA88    	  1871:             cmpi.l #$F55AAA88,(a0)
01:000012D6 66FE            	  1872:             bne.s *                       * Verify if Z flag is set
                            	  1873: 
                            	  1874: 
                            	  1875: *     (An)+ -- WORD
01:000012D8 307C0100        	  1876:             move.l #$00000100,a0
01:000012DC 327C0104        	  1877:             move.l #$00000104,a1
01:000012E0 20BC00005A5A    	  1878:             move.l #$00005a5a,(a0)
01:000012E6 22BC12345678    	  1879:             move.l #$12345678,(a1)
01:000012EC 44FC000F        	  1880:             move.w #$000F,CCR          * pre-set Flags
                            	  1881: 
01:000012F0 00585678        	  1882:             ori.w  #$5678,(a0)+
01:000012F4 6BFE            	  1883:             bmi.s *                       * Verify if N flag is cleared
01:000012F6 67FE            	  1884:             beq.s *                       * Verify if Z flag is cleared
                            	  1885: 
01:000012F8 4658            	  1886:             eori.w #$FFFF,(a0)+
01:000012FA 6AFE            	  1887:             bpl.s *                       * Verify if N flag is set
01:000012FC 67FE            	  1888:             beq.s *                       * Verify if Z flag is cleared
                            	  1889: 
01:000012FE 0258A55A        	  1890:             andi.w #$A55A,(a0)+
01:00001302 6BFE            	  1891:             bmi.s *                       * Verify if N flag is cleared
01:00001304 67FE            	  1892:             beq.s *                       * Verify if Z flag is cleared
                            	  1893: 
01:00001306 307C0100        	  1894:             move.l #$00000100,a0
01:0000130A 0C905678A5A5    	  1895:             cmpi.l #$5678a5a5,(a0)
01:00001310 307C0104        	  1896:             move.l #$00000104,a0
01:00001314 0C9000105678    	  1897:             cmpi.l #$00105678,(a0)
01:0000131A 66FE            	  1898:             bne.s *                       * Verify if Z flag is set
                            	  1899: 
                            	  1900: *     (An)+ -- LONG
01:0000131C 307C0100        	  1901:             move.l #$00000100,a0
01:00001320 20FC00000000    	  1902:             move.l #$00000000,(a0)+
01:00001326 20FC5A5A5A5A    	  1903:             move.l #$5a5a5a5a,(a0)+
01:0000132C 20FCFFFFFFFF    	  1904:             move.l #$FFFFFFFF,(a0)+
01:00001332 307C0100        	  1905:             move.l #$00000100,a0
01:00001336 44FC000F        	  1906:             move.w #$000F,CCR          * pre-set Flags
                            	  1907: 
01:0000133A 009812345678    	  1908:             ori.l  #$12345678,(a0)+
01:00001340 6BFE            	  1909:             bmi.s *                       * Verify if N flag is cleared
01:00001342 67FE            	  1910:             beq.s *                       * Verify if Z flag is cleared
                            	  1911: 
01:00001344 4698            	  1912:             eori.l #$FFFFFFFF,(a0)+
01:00001346 6AFE            	  1913:             bpl.s *                       * Verify if N flag is set
01:00001348 67FE            	  1914:             beq.s *                       * Verify if Z flag is cleared
                            	  1915: 
01:0000134A 0298A5A5A55A    	  1916:             andi.l #$A5A5A55A,(a0)+
01:00001350 6AFE            	  1917:             bpl.s *                       * Verify if N flag is set
01:00001352 67FE            	  1918:             beq.s *                       * Verify if Z flag is cleared
                            	  1919: 
01:00001354 307C0100        	  1920:             move.l #$00000100,a0
01:00001358 0C9812345678    	  1921:             cmpi.l #$12345678,(a0)+
01:0000135E 0C98A5A5A5A5    	  1922:             cmpi.l #$a5a5a5a5,(a0)+
01:00001364 0C98A5A5A55A    	  1923:             cmpi.l #$a5a5a55a,(a0)+
01:0000136A 66FE            	  1924:             bne.s *                       * Verify if Z flag is set
                            	  1925: 
01:0000136C 4E75            	  1926:             rts
                            	  1927: 
                            	  1928: 
                            	  1929: *-----------------------------------------------------------
                            	  1930: *-----------------------------------------------------------
                            	  1931: * OPCODE : BSR
                            	  1932: *-----------------------------------------------------------
                            	  1933: *-----------------------------------------------------------
                            	  1934: 
                            	  1935: 
01:0000136E 223C11111111    	  1936: BSR_CLOSE1:     move.l #$11111111,d1
01:00001374 4E75            	  1937:                 rts
                            	  1938: 
                            	  1939: 
                            	  1940: 
01:00001376 61F6            	  1941: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:00001378 612A            	  1942:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:0000137A 6100EE9C        	  1943:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:0000137E 6100145A        	  1944:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1945: 
01:00001382 0C8111111111    	  1946:                 cmpi.l #$11111111,d1
01:00001388 66FE            	  1947:                 bne.s *
01:0000138A 0C8222222222    	  1948:                 cmpi.l #$22222222,d2
01:00001390 66FE            	  1949:                 bne.s *
01:00001392 0C8333333333    	  1950:                 cmpi.l #$33333333,d3
01:00001398 66FE            	  1951:                 bne.s *
01:0000139A 0C8444444444    	  1952:                 cmpi.l #$44444444,d4
01:000013A0 66FE            	  1953:                 bne.s *
                            	  1954: 
01:000013A2 4E75            	  1955:                 rts
                            	  1956: 
                            	  1957: 
01:000013A4 243C22222222    	  1958: BSR_CLOSE2:     move.l #$22222222,d2
01:000013AA 4E75            	  1959:                 rts
                            	  1960: 
                            	  1961: *-----------------------------------------------------------
                            	  1962: *-----------------------------------------------------------
                            	  1963: * OPCODE : op_CMP_I
                            	  1964: *-----------------------------------------------------------
                            	  1965: *-----------------------------------------------------------
                            	  1966: op_CMP_I:
                            	  1967: 
01:000013AC 307C0100        	  1968:             move.l #$00000100,a0
01:000013B0 20BC00000100    	  1969:             move.l #$00000100,(a0)
                            	  1970: 
                            	  1971: *     REGISTER - BYTE
01:000013B6 7080            	  1972:             move.l #$FFFFFF80,d0
01:000013B8 0C000080        	  1973:             cmpi.b #$80,d0
01:000013BC 66FE            	  1974:             bne.s *                       * Check Z Flag  beq/bne
01:000013BE 6BFE            	  1975:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013C0 65FE            	  1976:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013C2 69FE            	  1977:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1978: 
01:000013C4 223CFFFFF000    	  1979:             move.l #$FFFFF000,d1
01:000013CA 4A01            	  1980:             cmpi.b #$00,d1
01:000013CC 66FE            	  1981:             bne.s *                       * Check Z Flag  beq/bne
01:000013CE 6BFE            	  1982:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013D0 65FE            	  1983:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013D2 69FE            	  1984:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1985: 
01:000013D4 7481D442        	  1986:             move.l #$FFFFFF02,d2
01:000013D8 0C0200FF        	  1987:             cmpi.b #$FF,d2
01:000013DC 67FE            	  1988:             beq.s *                       * Check Z Flag  beq/bne
01:000013DE 6BFE            	  1989:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013E0 64FE            	  1990:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013E2 69FE            	  1991:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1992: 
01:000013E4 263CFFFFFF7F    	  1993:             move.l #$FFFFFF7F,d3
01:000013EA 0C0300FF        	  1994:             cmpi.b #$FF,d3
01:000013EE 67FE            	  1995:             beq.s *                       * Check Z Flag  beq/bne
01:000013F0 6AFE            	  1996:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013F2 64FE            	  1997:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013F4 68FE            	  1998:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1999: 
                            	  2000: 
                            	  2001: *     REGISTER - WORD
01:000013F6 203CFFFF8000    	  2002:             move.l #$FFFF8000,d0
01:000013FC 0C408000        	  2003:             cmpi.w #$8000,d0
01:00001400 66FE            	  2004:             bne.s *                       * Check Z Flag  beq/bne
01:00001402 6BFE            	  2005:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001404 65FE            	  2006:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001406 69FE            	  2007:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2008: 
01:00001408 223CFFF00000    	  2009:             move.l #$FFF00000,d1
01:0000140E 4A41            	  2010:             cmpi.w #$0000,d1
01:00001410 66FE            	  2011:             bne.s *                       * Check Z Flag  beq/bne
01:00001412 6BFE            	  2012:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001414 65FE            	  2013:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001416 69FE            	  2014:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2015: 
01:00001418 243CFFFF0002    	  2016:             move.l #$FFFF0002,d2
01:0000141E 0C42FFFF        	  2017:             cmpi.w #$FFFF,d2
01:00001422 67FE            	  2018:             beq.s *                       * Check Z Flag  beq/bne
01:00001424 6BFE            	  2019:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001426 64FE            	  2020:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001428 69FE            	  2021:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2022: 
01:0000142A 263CFFFF7FFF    	  2023:             move.l #$FFFF7FFF,d3
01:00001430 0C43FFFF        	  2024:             cmpi.w #$FFFF,d3
01:00001434 67FE            	  2025:             beq.s *                       * Check Z Flag  beq/bne
01:00001436 6AFE            	  2026:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001438 64FE            	  2027:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000143A 68FE            	  2028:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2029: 
                            	  2030: *     REGISTER - LONG
01:0000143C 203C80000000    	  2031:             move.l #$80000000,d0
01:00001442 0C8080000000    	  2032:             cmpi.l #$80000000,d0
01:00001448 66FE            	  2033:             bne.s *                       * Check Z Flag  beq/bne
01:0000144A 6BFE            	  2034:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000144C 65FE            	  2035:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000144E 69FE            	  2036:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2037: 
01:00001450 7200            	  2038:             moveq  #$00000000,d1
01:00001452 4A81            	  2039:             cmpi.l #$00000000,d1
01:00001454 66FE            	  2040:             bne.s *                       * Check Z Flag  beq/bne
01:00001456 6BFE            	  2041:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001458 65FE            	  2042:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000145A 69FE            	  2043:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2044: 
01:0000145C 7402            	  2045:             moveq  #$00000002,d2
01:0000145E 0C82FFFFFFFF    	  2046:             cmpi.l #$FFFFFFFF,d2
01:00001464 67FE            	  2047:             beq.s *                       * Check Z Flag  beq/bne
01:00001466 6BFE            	  2048:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001468 64FE            	  2049:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000146A 69FE            	  2050:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2051: 
01:0000146C 263C7FFFFFFF    	  2052:             move.l #$7FFFFFFF,d3
01:00001472 0C83FFFFFFFF    	  2053:             cmpi.l #$FFFFFFFF,d3
01:00001478 67FE            	  2054:             beq.s *                       * Check Z Flag  beq/bne
01:0000147A 6AFE            	  2055:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000147C 64FE            	  2056:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000147E 68FE            	  2057:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: 
                            	  2062: *     EA=x(An,Dn) - BYTE
01:00001480 307C0100        	  2063:             move.l #$00000100,a0
01:00001484 7E04            	  2064:             moveq  #$00000004,d7
                            	  2065: 
01:00001486 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
01:0000148E 21BCFFFFFF80700C	  2067:             move.l #$FFFFFF80,12(a0,d7)
01:00001496 0C300080700F    	  2068:             cmpi.b #$80,15(a0,d7)
01:0000149C 66FE            	  2069:             bne.s *                       * Check Z Flag  beq/bne
01:0000149E 6BFE            	  2070:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014A0 65FE            	  2071:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014A2 69FE            	  2072:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2073: 
01:000014A4 21BCFFFFF000700C	  2074:             move.l #$FFFFF000,12(a0,d7)
01:000014AC 4A30700F        	  2075:             cmpi.b #$00,15(a0,d7)
01:000014B0 66FE            	  2076:             bne.s *                       * Check Z Flag  beq/bne
01:000014B2 6BFE            	  2077:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014B4 65FE            	  2078:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014B6 69FE            	  2079:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2080: 
01:000014B8 21BCFFFFFF02700C	  2081:             move.l #$FFFFFF02,12(a0,d7)
01:000014C0 0C3000FF700F    	  2082:             cmpi.b #$FF,15(a0,d7)
01:000014C6 67FE            	  2083:             beq.s *                       * Check Z Flag  beq/bne
01:000014C8 6BFE            	  2084:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014CA 64FE            	  2085:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014CC 69FE            	  2086:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2087: 
01:000014CE 21BCFFFFFF7F700C	  2088:             move.l #$FFFFFF7F,12(a0,d7)
01:000014D6 0C3000FF700F    	  2089:             cmpi.b #$FF,15(a0,d7)
01:000014DC 67FE            	  2090:             beq.s *                       * Check Z Flag  beq/bne
01:000014DE 6AFE            	  2091:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014E0 64FE            	  2092:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014E2 68FE            	  2093:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2094: 
                            	  2095: 
                            	  2096: *     EA=x(An,Dn) - WORD
01:000014E4 21BCFFFF8000700C	  2097:             move.l #$FFFF8000,12(a0,d7)
01:000014EC 0C708000700E    	  2098:             cmpi.w #$8000,14(a0,d7)
01:000014F2 66FE            	  2099:             bne.s *                       * Check Z Flag  beq/bne
01:000014F4 6BFE            	  2100:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014F6 65FE            	  2101:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014F8 69FE            	  2102:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2103: 
01:000014FA 21BCFFF00000700C	  2104:             move.l #$FFF00000,12(a0,d7)
01:00001502 4A70700E        	  2105:             cmpi.w #$0000,14(a0,d7)
01:00001506 66FE            	  2106:             bne.s *                       * Check Z Flag  beq/bne
01:00001508 6BFE            	  2107:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000150A 65FE            	  2108:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000150C 69FE            	  2109:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2110: 
01:0000150E 21BCFFFF0002700C	  2111:             move.l #$FFFF0002,12(a0,d7)
01:00001516 0C70FFFF700E    	  2112:             cmpi.w #$FFFF,14(a0,d7)
01:0000151C 67FE            	  2113:             beq.s *                       * Check Z Flag  beq/bne
01:0000151E 6BFE            	  2114:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001520 64FE            	  2115:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001522 69FE            	  2116:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2117: 
01:00001524 21BCFFFF7FFF700C	  2118:             move.l #$FFFF7FFF,12(a0,d7)
01:0000152C 0C70FFFF700E    	  2119:             cmpi.w #$FFFF,14(a0,d7)
01:00001532 67FE            	  2120:             beq.s *                       * Check Z Flag  beq/bne
01:00001534 6AFE            	  2121:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001536 64FE            	  2122:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001538 68FE            	  2123:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2124: 
                            	  2125: *     EA=x(An,Dn) - LONG
01:0000153A 21BC80000000700C	  2126:             move.l #$80000000,12(a0,d7)
01:00001542 0CB080000000700C	  2127:             cmpi.l #$80000000,12(a0,d7)
01:0000154A 66FE            	  2128:             bne.s *                       * Check Z Flag  beq/bne
01:0000154C 6BFE            	  2129:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000154E 65FE            	  2130:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001550 69FE            	  2131:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2132: 
01:00001552 21BC00000000700C	  2133:             move.l #$00000000,12(a0,d7)
01:0000155A 4AB0700C        	  2134:             cmpi.l #$00000000,12(a0,d7)
01:0000155E 66FE            	  2135:             bne.s *                       * Check Z Flag  beq/bne
01:00001560 6BFE            	  2136:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001562 65FE            	  2137:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001564 69FE            	  2138:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2139: 
01:00001566 21BC00000002700C	  2140:             move.l #$00000002,12(a0,d7)
01:0000156E 0CB0FFFFFFFF700C	  2141:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001576 67FE            	  2142:             beq.s *                       * Check Z Flag  beq/bne
01:00001578 6BFE            	  2143:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000157A 64FE            	  2144:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000157C 69FE            	  2145:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2146: 
01:0000157E 21BC7FFFFFFF700C	  2147:             move.l #$7FFFFFFF,12(a0,d7)
01:00001586 0CB0FFFFFFFF700C	  2148:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:0000158E 67FE            	  2149:             beq.s *                       * Check Z Flag  beq/bne
01:00001590 6AFE            	  2150:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001592 64FE            	  2151:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001594 68FE            	  2152:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2153: 
                            	  2154: 
                            	  2155: 
                            	  2156: 
01:00001596 4E75            	  2157:             rts
                            	  2158: 
                            	  2159: 
                            	  2160: 
                            	  2161: *-----------------------------------------------------------
                            	  2162: *-----------------------------------------------------------
                            	  2163: * OPCODE : ADD_I
                            	  2164: *-----------------------------------------------------------
                            	  2165: *-----------------------------------------------------------
                            	  2166: op_ADD_I:
                            	  2167: 
                            	  2168: *     EA = Dn  - Byte
01:00001598 203C12345678    	  2169:             move.l #$12345678,d0      * populate test data
01:0000159E 06000000        	  2170:             addi.b #0,d0
01:000015A2 67FE            	  2171:             beq.s *                       * Check Z Flag  beq/bne
01:000015A4 6BFE            	  2172:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015A6 65FE            	  2173:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015A8 69FE            	  2174:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015AA 06000010        	  2175:             addi.b #$10,d0
01:000015AE 67FE            	  2176:             beq.s *                       * Check Z Flag  beq/bne
01:000015B0 6AFE            	  2177:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015B2 65FE            	  2178:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015B4 68FE            	  2179:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015B6 060000A5        	  2180:             addi.b #$A5,d0
01:000015BA 67FE            	  2181:             beq.s *                       * Check Z Flag  beq/bne
01:000015BC 6BFE            	  2182:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015BE 64FE            	  2183:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015C0 68FE            	  2184:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015C2 0C00002D        	  2185:             cmpi.b #$2D,d0
01:000015C6 66FE            	  2186:             bne.s *                       * Check Z Flag  beq/bne
                            	  2187: 
                            	  2188: *     EA = Dn  - WORD
01:000015C8 203C12345678    	  2189:             move.l #$12345678,d0      * populate test data
01:000015CE 06400000        	  2190:             addi.w #0,d0
01:000015D2 67FE            	  2191:             beq.s *                       * Check Z Flag  beq/bne
01:000015D4 6BFE            	  2192:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015D6 65FE            	  2193:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015D8 69FE            	  2194:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015DA 06407000        	  2195:             addi.w #$7000,d0
01:000015DE 67FE            	  2196:             beq.s *                       * Check Z Flag  beq/bne
01:000015E0 6AFE            	  2197:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015E2 65FE            	  2198:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015E4 68FE            	  2199:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015E6 0640A55A        	  2200:             addi.w #$A55A,d0
01:000015EA 67FE            	  2201:             beq.s *                       * Check Z Flag  beq/bne
01:000015EC 6BFE            	  2202:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015EE 64FE            	  2203:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015F0 68FE            	  2204:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015F2 0C406BD2        	  2205:             cmpi.w #$6BD2,d0
01:000015F6 66FE            	  2206:             bne.s *                       * Check Z Flag  beq/bne
                            	  2207: 
                            	  2208: *     EA = Dn  - LONG
01:000015F8 203C12345678    	  2209:             move.l #$12345678,d0      * populate test data
01:000015FE 068000000000    	  2210:             addi.l #0,d0
01:00001604 67FE            	  2211:             beq.s *                       * Check Z Flag  beq/bne
01:00001606 6BFE            	  2212:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001608 65FE            	  2213:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000160A 69FE            	  2214:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000160C 0680F0000000    	  2215:             addi.l #$F0000000,d0
01:00001612 67FE            	  2216:             beq.s *                       * Check Z Flag  beq/bne
01:00001614 6BFE            	  2217:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001616 64FE            	  2218:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001618 69FE            	  2219:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000161A 0680855AA55A    	  2220:             addi.l #$855AA55A,d0
01:00001620 67FE            	  2221:             beq.s *                       * Check Z Flag  beq/bne
01:00001622 6AFE            	  2222:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001624 65FE            	  2223:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001626 69FE            	  2224:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001628 0680A0000000    	  2225:             addi.l #$A0000000,d0
01:0000162E 68FE            	  2226:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001630 0C80278EFBD2    	  2227:             cmpi.l #$278EFBD2,d0
01:00001636 66FE            	  2228:             bne.s *                       * Check Z Flag  beq/bne
                            	  2229: 
                            	  2230: 
                            	  2231: 
                            	  2232: *     EA = x.L  - Byte
01:00001638 207C0000F100    	  2233:             move.l #$F100,a0      * populate test data
01:0000163E 20BC12345678    	  2234:             move.l #$12345678,(a0)     * populate test data
01:00001644 063900000000F103	  2235:             addi.b #0,$F103
01:0000164C 67FE            	  2236:             beq.s *                       * Check Z Flag  beq/bne
01:0000164E 6BFE            	  2237:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001650 65FE            	  2238:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001652 69FE            	  2239:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001654 063900100000F103	  2240:             addi.b #$10,$F103
01:0000165C 67FE            	  2241:             beq.s *                       * Check Z Flag  beq/bne
01:0000165E 6AFE            	  2242:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001660 65FE            	  2243:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001662 68FE            	  2244:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001664 063900A50000F103	  2245:             addi.b #$A5,$F103
01:0000166C 67FE            	  2246:             beq.s *                       * Check Z Flag  beq/bne
01:0000166E 6BFE            	  2247:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001670 64FE            	  2248:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001672 68FE            	  2249:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001674 0C39002D0000F103	  2250:             cmpi.b #$2D,$F103
01:0000167C 66FE            	  2251:             bne.s *                       * Check Z Flag  beq/bne
                            	  2252: 
                            	  2253: *     EA = x.L- WORD
01:0000167E 207C0000F100    	  2254:             move.l #$F100,a0      * populate test data
01:00001684 20BC12345678    	  2255:             move.l #$12345678,(a0)     * populate test data
01:0000168A 067900000000F100	  2256:             addi.w #0,$F100
01:00001692 67FE            	  2257:             beq.s *                       * Check Z Flag  beq/bne
01:00001694 6BFE            	  2258:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001696 65FE            	  2259:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001698 69FE            	  2260:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000169A 067970000000F100	  2261:             addi.w #$7000,$F100
01:000016A2 67FE            	  2262:             beq.s *                       * Check Z Flag  beq/bne
01:000016A4 6AFE            	  2263:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016A6 65FE            	  2264:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016A8 68FE            	  2265:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016AA 0679A55A0000F100	  2266:             addi.w #$A55A,$F100
01:000016B2 67FE            	  2267:             beq.s *                       * Check Z Flag  beq/bne
01:000016B4 6BFE            	  2268:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016B6 64FE            	  2269:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016B8 68FE            	  2270:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016BA 0C79278E0000F100	  2271:             cmpi.w #$278E,$F100
01:000016C2 66FE            	  2272:             bne.s *                       * Check Z Flag  beq/bne
                            	  2273: 
                            	  2274: *     EA = x.L- LONG
01:000016C4 23FC123456780000	  2275:             move.l #$12345678,$F100  * populate test data
01:000016CC F100
01:000016CE 06B9000000000000	  2276:             addi.l #0,$F100
01:000016D6 F100
01:000016D8 67FE            	  2277:             beq.s *                       * Check Z Flag  beq/bne
01:000016DA 6BFE            	  2278:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016DC 65FE            	  2279:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016DE 69FE            	  2280:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016E0 06B9F00000000000	  2281:             addi.l #$F0000000,$F100
01:000016E8 F100
01:000016EA 67FE            	  2282:             beq.s *                       * Check Z Flag  beq/bne
01:000016EC 6BFE            	  2283:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016EE 64FE            	  2284:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016F0 69FE            	  2285:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016F2 06B9855AA55A0000	  2286:             addi.l #$855AA55A,$F100
01:000016FA F100
01:000016FC 67FE            	  2287:             beq.s *                       * Check Z Flag  beq/bne
01:000016FE 6AFE            	  2288:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001700 65FE            	  2289:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001702 69FE            	  2290:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001704 06B9A00000000000	  2291:             addi.l #$A0000000,$F100
01:0000170C F100
01:0000170E 68FE            	  2292:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001710 0CB9278EFBD20000	  2293:             cmpi.l #$278EFBD2,$F100
01:00001718 F100
01:0000171A 66FE            	  2294:             bne.s *                       * Check Z Flag  beq/bne
                            	  2295: 
01:0000171C 4E75            	  2296:             rts
                            	  2297: 
                            	  2298: 
                            	  2299: *-----------------------------------------------------------
                            	  2300: *-----------------------------------------------------------
                            	  2301: * OPCODE : SUB_I
                            	  2302: *-----------------------------------------------------------
                            	  2303: *-----------------------------------------------------------
                            	  2304: op_SUB_I:
                            	  2305: 
                            	  2306: *     EA = Dn  - Byte
01:0000171E 203C12345678    	  2307:             move.l #$12345678,d0      * populate test data
01:00001724 04000000        	  2308:             subi.b #0,d0
01:00001728 67FE            	  2309:             beq.s *                       * Check Z Flag  beq/bne
01:0000172A 6BFE            	  2310:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000172C 65FE            	  2311:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000172E 69FE            	  2312:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001730 04000010        	  2313:             subi.b #$10,d0
01:00001734 67FE            	  2314:             beq.s *                       * Check Z Flag  beq/bne
01:00001736 6BFE            	  2315:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001738 65FE            	  2316:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000173A 69FE            	  2317:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000173C 040000A5        	  2318:             subi.b #$A5,d0
01:00001740 67FE            	  2319:             beq.s *                       * Check Z Flag  beq/bne
01:00001742 6AFE            	  2320:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001744 64FE            	  2321:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001746 68FE            	  2322:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001748 0C0000C3        	  2323:             cmpi.b #$C3,d0
01:0000174C 66FE            	  2324:             bne.s *                       * Check Z Flag  beq/bne
                            	  2325: 
                            	  2326: *     EA = Dn  - WORD
01:0000174E 203C12345678    	  2327:             move.l #$12345678,d0      * populate test data
01:00001754 04400000        	  2328:             subi.w #0,d0
01:00001758 67FE            	  2329:             beq.s *                       * Check Z Flag  beq/bne
01:0000175A 6BFE            	  2330:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000175C 65FE            	  2331:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000175E 69FE            	  2332:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001760 04407000        	  2333:             subi.w #$7000,d0
01:00001764 67FE            	  2334:             beq.s *                       * Check Z Flag  beq/bne
01:00001766 6AFE            	  2335:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001768 64FE            	  2336:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000176A 69FE            	  2337:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000176C 0440A55A        	  2338:             subi.w #$A55A,d0
01:00001770 67FE            	  2339:             beq.s *                       * Check Z Flag  beq/bne
01:00001772 6BFE            	  2340:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001774 65FE            	  2341:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001776 69FE            	  2342:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001778 0C40411E        	  2343:             cmpi.w #$411E,d0
01:0000177C 66FE            	  2344:             bne.s *                       * Check Z Flag  beq/bne
                            	  2345: 
                            	  2346: *     EA = Dn  - LONG
01:0000177E 203C12345678    	  2347:             move.l #$12345678,d0      * populate test data
01:00001784 048000000000    	  2348:             subi.l #0,d0
01:0000178A 67FE            	  2349:             beq.s *                       * Check Z Flag  beq/bne
01:0000178C 6BFE            	  2350:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000178E 65FE            	  2351:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001790 69FE            	  2352:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001792 0480F0000000    	  2353:             subi.l #$F0000000,d0
01:00001798 67FE            	  2354:             beq.s *                       * Check Z Flag  beq/bne
01:0000179A 6BFE            	  2355:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000179C 64FE            	  2356:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000179E 69FE            	  2357:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017A0 0480855AA55A    	  2358:             subi.l #$855AA55A,d0
01:000017A6 67FE            	  2359:             beq.s *                       * Check Z Flag  beq/bne
01:000017A8 6AFE            	  2360:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017AA 64FE            	  2361:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017AC 68FE            	  2362:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017AE 0480A0000000    	  2363:             subi.l #$A0000000,d0
01:000017B4 69FE            	  2364:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017B6 0C80FCD9B11E    	  2365:             cmpi.l #$FCD9B11E,d0
01:000017BC 66FE            	  2366:             bne.s *                       * Check Z Flag  beq/bne
                            	  2367: 
                            	  2368: 
                            	  2369: 
                            	  2370: *     EA = x.L  - Byte
01:000017BE 207C0000F100    	  2371:             move.l #$F100,a0      * populate test data
01:000017C4 20BC12345678    	  2372:             move.l #$12345678,(a0)     * populate test data
01:000017CA 043900000000F103	  2373:             subi.b #0,$F103
01:000017D2 67FE            	  2374:             beq.s *                       * Check Z Flag  beq/bne
01:000017D4 6BFE            	  2375:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017D6 65FE            	  2376:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017D8 69FE            	  2377:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017DA 043900100000F103	  2378:             subi.b #$10,$F103
01:000017E2 67FE            	  2379:             beq.s *                       * Check Z Flag  beq/bne
01:000017E4 6BFE            	  2380:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017E6 65FE            	  2381:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017E8 69FE            	  2382:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017EA 043900A50000F103	  2383:             subi.b #$A5,$F103
01:000017F2 67FE            	  2384:             beq.s *                       * Check Z Flag  beq/bne
01:000017F4 6AFE            	  2385:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017F6 64FE            	  2386:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017F8 68FE            	  2387:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017FA 0C3900C30000F103	  2388:             cmpi.b #$C3,$F103
01:00001802 66FE            	  2389:             bne.s *                       * Check Z Flag  beq/bne
                            	  2390: 
                            	  2391: *     EA = x.L- WORD
01:00001804 207C0000F100    	  2392:             move.l #$F100,a0      * populate test data
01:0000180A 20BC12345678    	  2393:             move.l #$12345678,(a0)     * populate test data
01:00001810 047900000000F100	  2394:             subi.w #0,$F100
01:00001818 67FE            	  2395:             beq.s *                       * Check Z Flag  beq/bne
01:0000181A 6BFE            	  2396:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000181C 65FE            	  2397:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000181E 69FE            	  2398:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001820 047970000000F100	  2399:             subi.w #$7000,$F100
01:00001828 67FE            	  2400:             beq.s *                       * Check Z Flag  beq/bne
01:0000182A 6AFE            	  2401:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000182C 64FE            	  2402:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000182E 69FE            	  2403:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001830 0479A55A0000F100	  2404:             subi.w #$A55A,$F100
01:00001838 67FE            	  2405:             beq.s *                       * Check Z Flag  beq/bne
01:0000183A 6AFE            	  2406:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000183C 64FE            	  2407:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000183E 69FE            	  2408:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001840 0C79FCDA0000F100	  2409:             cmpi.w #$FCDA,$F100
01:00001848 66FE            	  2410:             bne.s *                       * Check Z Flag  beq/bne
                            	  2411: 
                            	  2412: *     EA = x.L- LONG
01:0000184A 23FC123456780000	  2413:             move.l #$12345678,$F100  * populate test data
01:00001852 F100
01:00001854 04B9000000000000	  2414:             subi.l #0,$F100
01:0000185C F100
01:0000185E 67FE            	  2415:             beq.s *                       * Check Z Flag  beq/bne
01:00001860 6BFE            	  2416:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001862 65FE            	  2417:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001864 69FE            	  2418:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001866 04B9F00000000000	  2419:             subi.l #$F0000000,$F100
01:0000186E F100
01:00001870 67FE            	  2420:             beq.s *                       * Check Z Flag  beq/bne
01:00001872 6BFE            	  2421:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001874 64FE            	  2422:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001876 69FE            	  2423:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001878 04B9855AA55A0000	  2424:             subi.l #$855AA55A,$F100
01:00001880 F100
01:00001882 67FE            	  2425:             beq.s *                       * Check Z Flag  beq/bne
01:00001884 6AFE            	  2426:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001886 64FE            	  2427:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001888 68FE            	  2428:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000188A 04B9A00000000000	  2429:             subi.l #$A0000000,$F100
01:00001892 F100
01:00001894 69FE            	  2430:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001896 0CB9FCD9B11E0000	  2431:             cmpi.l #$FCD9B11E,$F100
01:0000189E F100
01:000018A0 66FE            	  2432:             bne.s *                       * Check Z Flag  beq/bne
                            	  2433: 
01:000018A2 4E75            	  2434:             rts
                            	  2435: 
                            	  2436: 
                            	  2437: 
                            	  2438: *-----------------------------------------------------------
                            	  2439: *-----------------------------------------------------------
                            	  2440: * OPCODE : MOVE
                            	  2441: *-----------------------------------------------------------
                            	  2442: *-----------------------------------------------------------
                            	  2443: op_MOVE:
01:000018A4 203C11223344    	  2444:             move.l #$11223344,d0
01:000018AA 223C55667788    	  2445:             move.l #$55667788,d1
01:000018B0 243C8899AABB    	  2446:             move.l #$8899aabb,d2
01:000018B6 263CCCDDEEFF    	  2447:             move.l #$ccddeeff,d3
01:000018BC 7800            	  2448:             moveq  #$00000000,d4
01:000018BE 7A00            	  2449:             moveq  #$00000000,d5
01:000018C0 7C00            	  2450:             moveq  #$00000000,d6
01:000018C2 7E00            	  2451:             moveq  #$00000000,d7
01:000018C4 207C44332211    	  2452:             move.l #$44332211,a0
01:000018CA 227C88776655    	  2453:             move.l #$88776655,a1
01:000018D0 247CBBAA9988    	  2454:             move.l #$bbaa9988,a2
01:000018D6 267CFFEEDDCC    	  2455:             move.l #$ffeeddcc,a3
                            	  2456: 
01:000018DC 1800            	  2457:             move.b d0,d4              * BYTE - DATA REGISTER
01:000018DE 67FE            	  2458:             beq.s *                       * Check Z Flag  beq/bne
01:000018E0 6BFE            	  2459:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018E2 0C8400000044    	  2460:             cmpi.l #$00000044,d4
01:000018E8 66FE            	  2461:             bne.s *                       * Check Z Flag  beq/bne
                            	  2462: 
01:000018EA 3A01            	  2463:             move.w d1,d5              * WORD - DATA REGISTER
01:000018EC 67FE            	  2464:             beq.s *                       * Check Z Flag  beq/bne
01:000018EE 6BFE            	  2465:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018F0 0C8500007788    	  2466:             cmpi.l #$00007788,d5
01:000018F6 66FE            	  2467:             bne.s *                       * Check Z Flag  beq/bne
                            	  2468: 
01:000018F8 2C02            	  2469:             move.l d2,d6              * LONG - DATA REGISTER
01:000018FA 67FE            	  2470:             beq.s *                       * Check Z Flag  beq/bne
01:000018FC 6AFE            	  2471:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018FE 0C868899AABB    	  2472:             cmpi.l #$8899aabb,d6
01:00001904 66FE            	  2473:             bne.s *                       * Check Z Flag  beq/bne
                            	  2474: 
01:00001906 3A09            	  2475:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:00001908 67FE            	  2476:             beq.s *                       * Check Z Flag  beq/bne
01:0000190A 6BFE            	  2477:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000190C 0C8500006655    	  2478:             cmpi.l #$00006655,d5
01:00001912 66FE            	  2479:             bne.s *                       * Check Z Flag  beq/bne
                            	  2480: 
01:00001914 2C0A            	  2481:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:00001916 67FE            	  2482:             beq.s *                       * Check Z Flag  beq/bne
01:00001918 6AFE            	  2483:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000191A 0C86BBAA9988    	  2484:             cmpi.l #$bbaa9988,d6
01:00001920 66FE            	  2485:             bne.s *                       * Check Z Flag  beq/bne
                            	  2486: 
                            	  2487: 
01:00001922 3842            	  2488:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:00001924 B9C2            	  2489:             cmpa.l d2,a4
01:00001926 67FE            	  2490:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2491: 
01:00001928 2A41            	  2492:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:0000192A BBC1            	  2493:             cmpa.l d1,a5
01:0000192C 66FE            	  2494:             bne.s *                       * Check Z Flag  beq/bne
                            	  2495: 
                            	  2496: 
                            	  2497: 
                            	  2498: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2499: 
01:0000192E 203C11223344    	  2500:             move.l #$11223344,d0
01:00001934 223C00010100    	  2501:             move.l #$00010100,d1
01:0000193A 243C8899AABB    	  2502:             move.l #$8899aabb,d2
01:00001940 7601            	  2503:             moveq  #$00000001,d3
01:00001942 7800            	  2504:             moveq  #$00000000,d4
01:00001944 7A00            	  2505:             moveq  #$00000000,d5
01:00001946 7C00            	  2506:             moveq  #$00000000,d6
01:00001948 7E00            	  2507:             moveq  #$00000000,d7
01:0000194A 91C8            	  2508:             move.l #$00000000,a0
01:0000194C 227C00010100    	  2509:             move.l #$00010100,a1
                            	  2510: 
                            	  2511: *     x(An,AL) --> x.L
01:00001952 11BC005A9804    	  2512:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001958 47F09804        	  2513:             lea 4(a0,a1.l),a3
01:0000195C 13F0980400010105	  2514:             move.b 4(a0,a1.l),$00010105
01:00001964 67FE            	  2515:             beq.s *                       * Check Z Flag  beq/bne
01:00001966 6BFE            	  2516:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001968 0C30005A9805    	  2517:             cmpi.b #$5A,5(a0,a1.l)
01:0000196E 66FE            	  2518:             bne.s *                       * Check Z Flag  beq/bne
                            	  2519: 
                            	  2520: *     x.L --> n(An,Dw)
01:00001970 11B9000101051007	  2521: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:00001978 67FE            	  2522:             beq.s *                       * Check Z Flag  beq/bne
01:0000197A 6BFE            	  2523:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000197C 0C30005A1007    	  2524:             cmpi.b #$5A,7(a0,d1.w)
01:00001982 66FE            	  2525:             bne.s *                       * Check Z Flag  beq/bne
                            	  2526: 
                            	  2527: *     x(PC,Ds) --> x.w
01:00001984 11FB30660100    	  2528:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:0000198A 67FE            	  2529:             beq.s *                       * Check Z Flag  beq/bne
01:0000198C 6AFE            	  2530:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000198E 0C3900B900001971	  2531:             cmpi.b #$B9,1+MOVE2
01:00001996 66FE            	  2532:             bne.s *                       * Check Z Flag  beq/bne
                            	  2533: 
                            	  2534: *     #x -->    n(An,AL)
01:00001998 11BC00781007    	  2535:             move.b  #$78,7(a0,d1.w)    * BYTE
01:0000199E 67FE            	  2536:             beq.s *                       * Check Z Flag  beq/bne
01:000019A0 6BFE            	  2537:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019A2 0C3000781007    	  2538:             cmpi.b #$78,7(a0,d1.w)
01:000019A8 66FE            	  2539:             bne.s *                       * Check Z Flag  beq/bne
                            	  2540: 
01:000019AA 203C11223344    	  2541:             move.l #$11223344,d0
01:000019B0 223C00010100    	  2542:             move.l #$00010100,d1
01:000019B6 243C8899AABB    	  2543:             move.l #$8899aabb,d2
01:000019BC 7602            	  2544:             moveq  #$00000002,d3
01:000019BE 7800            	  2545:             moveq  #$00000000,d4
01:000019C0 7A00            	  2546:             moveq  #$00000000,d5
01:000019C2 7C00            	  2547:             moveq  #$00000000,d6
01:000019C4 7E00            	  2548:             moveq  #$00000000,d7
01:000019C6 91C8            	  2549:             move.l #$00000000,a0
01:000019C8 227C00010100    	  2550:             move.l #$00010100,a1
                            	  2551: 
                            	  2552: *     x(An,AL) --> x.L
01:000019CE 31BC5A5A9804    	  2553:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:000019D4 49F09804        	  2554:             lea 4(a0,a1.l),a4
01:000019D8 33F0980400010104	  2555:             move.w 4(a0,a1.l),$00010104
01:000019E0 67FE            	  2556:             beq.s *                       * Check Z Flag  beq/bne
01:000019E2 6BFE            	  2557:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019E4 0C705A5A9804    	  2558:             cmpi.w #$5A5A,4(a0,a1.l)
01:000019EA 66FE            	  2559:             bne.s *                       * Check Z Flag  beq/bne
                            	  2560: 
                            	  2561: *     x.L --> n(An,Dw)
01:000019EC 31B9000101041006	  2562: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000019F4 67FE            	  2563:             beq.s *                       * Check Z Flag  beq/bne
01:000019F6 6BFE            	  2564:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019F8 0C705A5A1006    	  2565:             cmpi.w #$5A5A,6(a0,d1.w)
01:000019FE 66FE            	  2566:             bne.s *                       * Check Z Flag  beq/bne
                            	  2567: 
                            	  2568: *     x(PC,Ds) --> x.w
01:00001A00 31FB30EA0100    	  2569:             move.w  MOVE1(pc,d3),$0100 * WORD
01:00001A06 67FE            	  2570:             beq.s *                       * Check Z Flag  beq/bne
01:00001A08 6BFE            	  2571:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A0A 0C7967FE000019F4	  2572:             cmpi.w #$67FE,8+MOVE1
01:00001A12 66FE            	  2573:             bne.s *                       * Check Z Flag  beq/bne
                            	  2574: 
                            	  2575: *     #x -->    n(An,AL)
01:00001A14 31BC78781006    	  2576:             move.w  #$7878,6(a0,d1.w)    * WORD
01:00001A1A 67FE            	  2577:             beq.s *                       * Check Z Flag  beq/bne
01:00001A1C 6BFE            	  2578:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A1E 0C7078781006    	  2579:             cmpi.w #$7878,6(a0,d1.w)
01:00001A24 66FE            	  2580:             bne.s *                       * Check Z Flag  beq/bne
                            	  2581: 
                            	  2582: * ---
                            	  2583: 
01:00001A26 203C11223344    	  2584:             move.l #$11223344,d0
01:00001A2C 223C00010100    	  2585:             move.l #$00010100,d1
01:00001A32 243C8899AABB    	  2586:             move.l #$8899aabb,d2
01:00001A38 7602            	  2587:             moveq  #$00000002,d3
01:00001A3A 7800            	  2588:             moveq  #$00000000,d4
01:00001A3C 7A00            	  2589:             moveq  #$00000000,d5
01:00001A3E 7C00            	  2590:             moveq  #$00000000,d6
01:00001A40 7E00            	  2591:             moveq  #$00000000,d7
01:00001A42 91C8            	  2592:             move.l #$00000000,a0
01:00001A44 227C00010100    	  2593:             move.l #$00010100,a1
                            	  2594: 
                            	  2595: *     x(An,AL) --> x.L
01:00001A4A 21BC5A5A12349804	  2596:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:00001A52 49F09804        	  2597:             lea 4(a0,a1.l),a4
01:00001A56 23F0980400010104	  2598:             move.l 4(a0,a1.l),$00010104
01:00001A5E 67FE            	  2599:             beq.s *                       * Check Z Flag  beq/bne
01:00001A60 6BFE            	  2600:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A62 0CB05A5A12349804	  2601:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001A6A 66FE            	  2602:             bne.s *                       * Check Z Flag  beq/bne
                            	  2603: 
                            	  2604: *     x.L --> n(An,Dw)
01:00001A6C 21B9000101041006	  2605: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:00001A74 67FE            	  2606:             beq.s *                       * Check Z Flag  beq/bne
01:00001A76 6BFE            	  2607:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A78 0CB05A5A12341006	  2608:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001A80 66FE            	  2609:             bne.s *                       * Check Z Flag  beq/bne
                            	  2610: 
                            	  2611: *     x(PC,Ds) --> x.w
01:00001A82 21FB30E80100    	  2612:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001A88 67FE            	  2613:             beq.s *                       * Check Z Flag  beq/bne
01:00001A8A 6BFE            	  2614:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A8C 0CB967FE6BFE0000	  2615:             cmpi.l #$67FE6BFE,8+MOVE3
01:00001A94 1A74
01:00001A96 66FE            	  2616:             bne.s *                       * Check Z Flag  beq/bne
                            	  2617: 
                            	  2618: *     #x -->    n(An,AL)
01:00001A98 21BC787823231006	  2619:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001AA0 67FE            	  2620:             beq.s *                       * Check Z Flag  beq/bne
01:00001AA2 6BFE            	  2621:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001AA4 0CB0787823231006	  2622:             cmpi.l #$78782323,6(a0,d1.w)
01:00001AAC 66FE            	  2623:             bne.s *                       * Check Z Flag  beq/bne
                            	  2624: 
                            	  2625: 
01:00001AAE 4E75            	  2626:          rts
                            	  2627: 
                            	  2628: 
                            	  2629: *-----------------------------------------------------------
                            	  2630: *-----------------------------------------------------------
                            	  2631: * OPCODE : MOVE_xxx_FLAGS
                            	  2632: *-----------------------------------------------------------
                            	  2633: *-----------------------------------------------------------
                            	  2634: op_MOVE_xxx_FLAGS:
                            	  2635: 
                            	  2636: *     Move_To_SR
                            	  2637: 
                            	  2638: *     Dn
                            	  2639: 
01:00001AB0 303C2FFF        	  2640:             move.w #$2FFF,d0
01:00001AB4 46C0            	  2641:             move d0,SR
01:00001AB6 6AFE            	  2642:             bpl.s *           * branch if Z clear
01:00001AB8 66FE            	  2643:             bne.s *           * branch if N clear
01:00001ABA 68FE            	  2644:             bvc.s *           * branch if V clear
01:00001ABC 64FE            	  2645:             bcc.s *           * branch if C clear
01:00001ABE 303C2F00        	  2646:             move.w #$2F00,d0
01:00001AC2 44C0            	  2647:             move d0,CCR
01:00001AC4 67FE            	  2648:             beq.s *           * branch if Z set
01:00001AC6 6BFE            	  2649:             bmi.s *           * branch if N set
01:00001AC8 69FE            	  2650:             bvs.s *           * branch if V set
01:00001ACA 65FE            	  2651:             bcs.s *           * branch if C set
                            	  2652: 
01:00001ACC 303C2000        	  2653:             move.w #$2000,d0
01:00001AD0 46C0            	  2654:             move d0,SR
01:00001AD2 67FE            	  2655:             beq.s *           * branch if Z set
01:00001AD4 6BFE            	  2656:             bmi.s *           * branch if N set
01:00001AD6 69FE            	  2657:             bvs.s *           * branch if V set
01:00001AD8 65FE            	  2658:             bcs.s *           * branch if C set
                            	  2659: 
                            	  2660: *     (An)
01:00001ADA 307C0100        	  2661:             move.l #$00000100,a0
01:00001ADE 30BC2FFF        	  2662:             move.w #$2FFF,(a0)
01:00001AE2 46D0            	  2663:             move (a0),SR
01:00001AE4 6AFE            	  2664:             bpl.s *           * branch if Z clear
01:00001AE6 66FE            	  2665:             bne.s *           * branch if N clear
01:00001AE8 68FE            	  2666:             bvc.s *           * branch if V clear
01:00001AEA 64FE            	  2667:             bcc.s *           * branch if C clear
                            	  2668: 
01:00001AEC 30BC2000        	  2669:             move.w #$2000,(a0)
01:00001AF0 46D0            	  2670:             move (a0),SR
01:00001AF2 67FE            	  2671:             beq.s *           * branch if Z set
01:00001AF4 6BFE            	  2672:             bmi.s *           * branch if N set
01:00001AF6 69FE            	  2673:             bvs.s *           * branch if V set
01:00001AF8 65FE            	  2674:             bcs.s *           * branch if C set
                            	  2675: 
                            	  2676: *     (An)+
01:00001AFA 307C0100        	  2677:             move.l #$00000100,a0
01:00001AFE 30BC2FFF        	  2678:             move.w #$2FFF,(a0)
01:00001B02 46D8            	  2679:             move (a0)+,SR
01:00001B04 6AFE            	  2680:             bpl.s *           * branch if Z clear
01:00001B06 66FE            	  2681:             bne.s *           * branch if N clear
01:00001B08 68FE            	  2682:             bvc.s *           * branch if V clear
01:00001B0A 64FE            	  2683:             bcc.s *           * branch if C clear
                            	  2684: 
01:00001B0C 30BC2000        	  2685:             move.w #$2000,(a0)
01:00001B10 46D8            	  2686:             move (a0)+,SR
01:00001B12 67FE            	  2687:             beq.s *           * branch if Z set
01:00001B14 6BFE            	  2688:             bmi.s *           * branch if N set
01:00001B16 69FE            	  2689:             bvs.s *           * branch if V set
01:00001B18 65FE            	  2690:             bcs.s *           * branch if C set
                            	  2691: 
                            	  2692: *     -(An)
01:00001B1A 307C0102        	  2693:             move.l #$00000102,a0
01:00001B1E 30BC2FFF        	  2694:             move.w #$2FFF,(a0)
01:00001B22 46D8            	  2695:             move (a0)+,SR
01:00001B24 6AFE            	  2696:             bpl.s *           * branch if Z clear
01:00001B26 66FE            	  2697:             bne.s *           * branch if N clear
01:00001B28 68FE            	  2698:             bvc.s *           * branch if V clear
01:00001B2A 64FE            	  2699:             bcc.s *           * branch if C clear
                            	  2700: 
01:00001B2C 30BC2000        	  2701:             move.w #$2000,(a0)
01:00001B30 46D8            	  2702:             move (a0)+,SR
01:00001B32 67FE            	  2703:             beq.s *           * branch if Z set
01:00001B34 6BFE            	  2704:             bmi.s *           * branch if N set
01:00001B36 69FE            	  2705:             bvs.s *           * branch if V set
01:00001B38 65FE            	  2706:             bcs.s *           * branch if C set
                            	  2707: 
                            	  2708: *     n(An)
01:00001B3A 307C0102        	  2709:             move.l #$00000102,a0
01:00001B3E 317C2FFF0002    	  2710:             move.w #$2FFF,2(a0)
01:00001B44 46E80002        	  2711:             move 2(a0),SR
01:00001B48 6AFE            	  2712:             bpl.s *           * branch if Z clear
01:00001B4A 66FE            	  2713:             bne.s *           * branch if N clear
01:00001B4C 68FE            	  2714:             bvc.s *           * branch if V clear
01:00001B4E 64FE            	  2715:             bcc.s *           * branch if C clear
                            	  2716: 
01:00001B50 317C20000002    	  2717:             move.w #$2000,2(a0)
01:00001B56 46E80002        	  2718:             move 2(a0),SR
01:00001B5A 67FE            	  2719:             beq.s *           * branch if Z set
01:00001B5C 6BFE            	  2720:             bmi.s *           * branch if N set
01:00001B5E 69FE            	  2721:             bvs.s *           * branch if V set
01:00001B60 65FE            	  2722:             bcs.s *           * branch if C set
                            	  2723: 
                            	  2724: *     n(An,Rn.l)
01:00001B62 307C0100        	  2725:             move.l #$00000100,a0
01:00001B66 7002            	  2726:             moveq  #$00000002,d0
01:00001B68 31BC2FFF0802    	  2727:             move.w #$2FFF,2(a0,d0.l)
01:00001B6E 46F00802        	  2728:             move 2(a0,d0.l),SR
01:00001B72 6AFE            	  2729:             bpl.s *           * branch if Z clear
01:00001B74 66FE            	  2730:             bne.s *           * branch if N clear
01:00001B76 68FE            	  2731:             bvc.s *           * branch if V clear
01:00001B78 64FE            	  2732:             bcc.s *           * branch if C clear
                            	  2733: 
01:00001B7A 31BC20000802    	  2734:             move.w #$2000,2(a0,d0.l)
01:00001B80 46F00802        	  2735:             move 2(a0,d0.l),SR
01:00001B84 67FE            	  2736:             beq.s *           * branch if Z set
01:00001B86 6BFE            	  2737:             bmi.s *           * branch if N set
01:00001B88 69FE            	  2738:             bvs.s *           * branch if V set
01:00001B8A 65FE            	  2739:             bcs.s *           * branch if C set
                            	  2740: 
                            	  2741: *     x.W
01:00001B8C 31FC2FFF0100    	  2742:             move.w #$2FFF,$0100
01:00001B92 46F80100        	  2743:             move $0100,SR
01:00001B96 6AFE            	  2744:             bpl.s *           * branch if Z clear
01:00001B98 66FE            	  2745:             bne.s *           * branch if N clear
01:00001B9A 68FE            	  2746:             bvc.s *           * branch if V clear
01:00001B9C 64FE            	  2747:             bcc.s *           * branch if C clear
                            	  2748: 
01:00001B9E 31FC20000100    	  2749:             move.w #$2000,$0100
01:00001BA4 46F80100        	  2750:             move $0100,SR
01:00001BA8 67FE            	  2751:             beq.s *           * branch if Z set
01:00001BAA 6BFE            	  2752:             bmi.s *           * branch if N set
01:00001BAC 69FE            	  2753:             bvs.s *           * branch if V set
01:00001BAE 65FE            	  2754:             bcs.s *           * branch if C set
                            	  2755: 
                            	  2756: *     x.L
01:00001BB0 33FC2FFF00010100	  2757:             move.w #$2FFF,$00010100
01:00001BB8 46F900010100    	  2758:             move $00010100,SR
01:00001BBE 6AFE            	  2759:             bpl.s *           * branch if Z clear
01:00001BC0 66FE            	  2760:             bne.s *           * branch if N clear
01:00001BC2 68FE            	  2761:             bvc.s *           * branch if V clear
01:00001BC4 64FE            	  2762:             bcc.s *           * branch if C clear
                            	  2763: 
01:00001BC6 33FC200000010100	  2764: MOVE4:      move.w #$2000,$00010100
01:00001BCE 46F900010100    	  2765:             move $00010100,SR
01:00001BD4 67FE            	  2766:             beq.s *           * branch if Z set
01:00001BD6 6BFE            	  2767:             bmi.s *           * branch if N set
01:00001BD8 69FE            	  2768:             bvs.s *           * branch if V set
01:00001BDA 65FE            	  2769:             bcs.s *           * branch if C set
                            	  2770: 
                            	  2771: *     x(PC)
01:00001BDC 46FAFFEA        	  2772:             move MOVE4+2(pc),SR
01:00001BE0 67FE            	  2773:             beq.s *           * branch if Z set
01:00001BE2 6BFE            	  2774:             bmi.s *           * branch if N set
01:00001BE4 69FE            	  2775:             bvs.s *           * branch if V set
01:00001BE6 65FE            	  2776:             bcs.s *           * branch if C set
                            	  2777: 
                            	  2778: *     x(PC,d0.l)
01:00001BE8 7000            	  2779:             moveq  #$00000000,d0
01:00001BEA 46FB08DC        	  2780:             move MOVE4+2(pc,d0.l),SR
01:00001BEE 67FE            	  2781:             beq.s *           * branch if Z set
01:00001BF0 6BFE            	  2782:             bmi.s *           * branch if N set
01:00001BF2 69FE            	  2783:             bvs.s *           * branch if V set
01:00001BF4 65FE            	  2784:             bcs.s *           * branch if C set
01:00001BF6 44FB08D0        	  2785:             move MOVE4+2(pc,d0.l),CCR
01:00001BFA 67FE            	  2786:             beq.s *           * branch if Z set
01:00001BFC 6BFE            	  2787:             bmi.s *           * branch if N set
01:00001BFE 69FE            	  2788:             bvs.s *           * branch if V set
01:00001C00 65FE            	  2789:             bcs.s *           * branch if C set
                            	  2790: 
                            	  2791: *     #x
01:00001C02 46FC2FFF        	  2792:             move #$2FFF,SR
01:00001C06 66FE            	  2793:             bne.s *           * branch if Z clear
01:00001C08 6AFE            	  2794:             bpl.s *           * branch if N clear
01:00001C0A 68FE            	  2795:             bvc.s *           * branch if V clear
01:00001C0C 64FE            	  2796:             bcc.s *           * branch if C clear
                            	  2797: 
                            	  2798: 
                            	  2799: 
                            	  2800: *  MOVE_From_SR
                            	  2801: 
                            	  2802: 
                            	  2803: 
                            	  2804: *     Dn
01:00001C0E 46FC275A        	  2805:             move #$275A,SR          * Initial value
01:00001C12 40C0            	  2806:             move SR,d0
01:00001C14 0C40271A        	  2807:             cmpi.w #$271A,d0
                            	  2808: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2809: *            bne.s *                   * branch if Z set
                            	  2810: 
                            	  2811: *     (An)
01:00001C18 307C0100        	  2812:             move.l #$00000100,a0
01:00001C1C 46FC275A        	  2813:             move #$275A,SR          * Initial value
01:00001C20 40D0            	  2814:             move SR,(a0)
01:00001C22 0C50275A        	  2815:             cmpi.w #$275A,(a0)
01:00001C26 66FE            	  2816:             bne.s *                   * branch if Z set
                            	  2817: 
                            	  2818: *     (An)+
01:00001C28 307C0100        	  2819:             move.l #$00000100,a0
01:00001C2C 46FC257A        	  2820:             move #$257A,SR          * Initial value
01:00001C30 40D8            	  2821:             move SR,(a0)+
01:00001C32 307C0100        	  2822:             move.l #$00000100,a0
01:00001C36 0C58257A        	  2823:             cmpi.w #$257A,(a0)+
01:00001C3A 66FE            	  2824:             bne.s *                   * branch if Z set
                            	  2825: 
                            	  2826: *     -(An)
01:00001C3C 307C0102        	  2827:             move.l #$00000102,a0
01:00001C40 46FC2766        	  2828:             move #$2766,SR          * Initial value
01:00001C44 40E0            	  2829:             move SR,-(a0)
01:00001C46 307C0100        	  2830:             move.l #$00000100,a0
01:00001C4A 0C502766        	  2831:             cmpi.w #$2766,(a0)
01:00001C4E 66FE            	  2832:             bne.s *                   * branch if Z set
                            	  2833: 
                            	  2834: *     x(An)
01:00001C50 307C0102        	  2835:             move.l #$00000102,a0
01:00001C54 46FC2733        	  2836:             move #$2733,SR          * Initial value
01:00001C58 40E80004        	  2837:             move SR,4(a0)
01:00001C5C 0C6827330004    	  2838:             cmpi.w #$2733,4(a0)
01:00001C62 66FE            	  2839:             bne.s *                   * branch if Z set
                            	  2840: 
                            	  2841: *     x(An,rn)
01:00001C64 307C0102        	  2842:             move.l #$00000102,a0
01:00001C68 7004            	  2843:             moveq  #$00000004,d0
01:00001C6A 46FC275A        	  2844:             move #$275a,SR          * Initial value
01:00001C6E 40F00804        	  2845:             move SR,4(a0,d0.l)
01:00001C72 0C70275A0804    	  2846:             cmpi.w #$275a,4(a0,d0.l)
01:00001C78 66FE            	  2847:             bne.s *                   * branch if Z set
                            	  2848: 
                            	  2849: *     x.W
01:00001C7A 46FC2777        	  2850:             move #$2777,SR          * Initial value
01:00001C7E 40F80102        	  2851:             move SR,$0102
01:00001C82 0C7827770102    	  2852:             cmpi.w #$2777,$0102
01:00001C88 66FE            	  2853:             bne.s *                   * branch if Z set
                            	  2854: 
                            	  2855: *     x.L
01:00001C8A 46FC2777        	  2856:             move #$2777,SR          * Initial value
01:00001C8E 40F900010102    	  2857:             move SR,$10102
01:00001C94 0C79277700010102	  2858:             cmpi.w #$2777,$10102
01:00001C9C 66FE            	  2859:             bne.s *                   * branch if Z set
                            	  2860: 
                            	  2861: 
                            	  2862: 
01:00001C9E 46FC2700        	  2863:             move #$2700,SR          * Put flags back to initial value
                            	  2864: 
01:00001CA2 4E75            	  2865:             rts
                            	  2866: 
                            	  2867: 
                            	  2868: *-----------------------------------------------------------
                            	  2869: *-----------------------------------------------------------
                            	  2870: * OPCODE : EXT
                            	  2871: *-----------------------------------------------------------
                            	  2872: *-----------------------------------------------------------
                            	  2873: op_EXT:
                            	  2874: 
01:00001CA4 707F            	  2875:             move.l #$0000007F,d0
01:00001CA6 223C00008FFF    	  2876:             move.l #$00008FFF,d1
01:00001CAC 7400            	  2877:             moveq  #$00000000,d2
                            	  2878: 
01:00001CAE 4880            	  2879:             ext.w d0
01:00001CB0 6BFE            	  2880:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CB2 67FE            	  2881:             beq.s *                   * Check Z Flag  beq/bne
01:00001CB4 0C800000007F    	  2882:             cmpi.l #$0000007F,d0
01:00001CBA 66FE            	  2883:             bne.s *                   * branch if Z set
                            	  2884: 
01:00001CBC 48C1            	  2885:             ext.l d1
01:00001CBE 6AFE            	  2886:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001CC0 67FE            	  2887:             beq.s *                   * Check Z Flag  beq/bne
01:00001CC2 0C81FFFF8FFF    	  2888:             cmpi.l #$FFFF8FFF,d1
01:00001CC8 66FE            	  2889:             bne.s *                   * branch if Z set
                            	  2890: 
01:00001CCA 48C2            	  2891:             ext.l d2
01:00001CCC 66FE            	  2892:             bne.s *                   * Check Z Flag  beq/bne
                            	  2893: 
                            	  2894: 
                            	  2895: 
01:00001CCE 4E75            	  2896:             rts
                            	  2897: 
                            	  2898: 
                            	  2899: *-----------------------------------------------------------
                            	  2900: *-----------------------------------------------------------
                            	  2901: * OPCODE : SWAP
                            	  2902: *-----------------------------------------------------------
                            	  2903: *-----------------------------------------------------------
                            	  2904: op_SWAP:
                            	  2905: 
01:00001CD0 203C12345678    	  2906:             move.l #$12345678,d0
                            	  2907: 
01:00001CD6 4840            	  2908:             swap d0
01:00001CD8 6BFE            	  2909:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CDA 67FE            	  2910:             beq.s *                   * Check Z Flag  beq/bne
01:00001CDC 0C8056781234    	  2911:             cmpi.l #$56781234,d0
01:00001CE2 66FE            	  2912:             bne.s *                   * branch if Z set
                            	  2913: 
                            	  2914: 
                            	  2915: 
01:00001CE4 4E75            	  2916:             rts
                            	  2917: 
                            	  2918: 
                            	  2919: *-----------------------------------------------------------
                            	  2920: *-----------------------------------------------------------
                            	  2921: * OPCODE : LEA_PEA
                            	  2922: *-----------------------------------------------------------
                            	  2923: *-----------------------------------------------------------
                            	  2924: op_LEAPEA:
                            	  2925: 
01:00001CE6 207C00345678    	  2926:             move.l #$00345678,a0
01:00001CEC 7800            	  2927:             moveq  #$00000000,d4
                            	  2928: 
                            	  2929: *     (An)
01:00001CEE 4DD0            	  2930:             lea (a0),a6
01:00001CF0 200E            	  2931:             move.l a6,d0
01:00001CF2 0C8000345678    	  2932:             cmpi.l #$00345678,d0
01:00001CF8 66FE            	  2933:             bne.s *                   * branch if Z set
01:00001CFA 4850            	  2934:             pea (a0)
01:00001CFC 0C9700345678    	  2935:             cmpi.l #$00345678,(a7)
01:00001D02 66FE            	  2936:             bne.s *                   * branch if Z set
                            	  2937:             * This was without a specifier which the assembler defaulted to .w
01:00001D04 588F            	  2938:             addq.l #4,a7            * Restore Stack Pointer
                            	  2939: 
                            	  2940: *     x(An)
01:00001D06 4DE80004        	  2941:             lea 4(a0),a6
01:00001D0A 200E            	  2942:             move.l a6,d0
01:00001D0C 0C800034567C    	  2943:             cmpi.l #$0034567C,d0
01:00001D12 66FE            	  2944:             bne.s *                   * branch if Z set
01:00001D14 48680004        	  2945:             pea 4(a0)
01:00001D18 0C970034567C    	  2946:             cmpi.l #$0034567C,(a7)
01:00001D1E 66FE            	  2947:             bne.s *                   * branch if Z set
                            	  2948:             * This was without a specifier which the assembler defaulted to .w
01:00001D20 588F            	  2949:             addq.l #4,a7            * Restore Stack Pointer
                            	  2950: 
                            	  2951: *     x(An,Dn.l)
01:00001D22 4DF04004        	  2952:             lea 4(a0,d4),a6
01:00001D26 200E            	  2953:             move.l a6,d0
01:00001D28 0C800034567C    	  2954:             cmpi.l #$0034567C,d0
01:00001D2E 66FE            	  2955:             bne.s *                   * branch if Z set
01:00001D30 48704804        	  2956:             pea 4(a0,d4.l)
01:00001D34 0C970034567C    	  2957:             cmpi.l #$0034567C,(a7)
01:00001D3A 66FE            	  2958:             bne.s *                   * branch if Z set
                            	  2959:             * This was without a specifier which the assembler defaulted to .w
01:00001D3C 588F            	  2960:             addq.l #4,a7            * Restore Stack Pointer
                            	  2961: 
                            	  2962: *     x.W
01:00001D3E 4DF81234        	  2963:             lea $1234,a6
01:00001D42 200E            	  2964:             move.l a6,d0
01:00001D44 0C401234        	  2965:             cmpi.w #$1234,d0
01:00001D48 66FE            	  2966:             bne.s *                   * branch if Z set
01:00001D4A 48781234        	  2967:             pea $1234
01:00001D4E 0C9700001234    	  2968:             cmpi.l #$00001234,(a7)
01:00001D54 66FE            	  2969:             bne.s *                   * branch if Z set
                            	  2970:             * This was without a specifier which the assembler defaulted to .w
01:00001D56 588F            	  2971:             addq.l #4,a7            * Restore Stack Pointer
                            	  2972: 
                            	  2973: *     x.L
01:00001D58 4DF900345678    	  2974:             lea $00345678,a6
01:00001D5E 200E            	  2975:             move.l a6,d0
01:00001D60 B08E            	  2976:             cmp.l a6,d0
01:00001D62 66FE            	  2977:             bne.s *                   * branch if Z set
01:00001D64 487900345678    	  2978:             pea $00345678
01:00001D6A 0C9700345678    	  2979:             cmpi.l #$00345678,(a7)
01:00001D70 66FE            	  2980:             bne.s *                   * branch if Z set
                            	  2981:             * This was without a specifier which the assembler defaulted to .w
01:00001D72 588F            	  2982:             addq.l #4,a7            * Restore Stack Pointer
                            	  2983: 
                            	  2984: *     x(PC)
01:00001D74 4DFA0008        	  2985:             lea LEA1(pc),a6
01:00001D78 200E            	  2986:             move.l a6,d0
01:00001D7A B08E            	  2987:             cmp.l a6,d0
01:00001D7C 66FE            	  2988:             bne.s *                   * branch if Z set
01:00001D7E 487AFFFE        	  2989: LEA1:       pea LEA1(pc)
01:00001D82 0C970000241E    	  2990:             cmpi.l #$0000241E,(a7)
01:00001D88 67FE            	  2991:             beq.s *                   * branch if Z clear
                            	  2992:             * This was without a specifier which the assembler defaulted to .w
01:00001D8A 588F            	  2993:             addq.l #4,a7              * Restore Stack Pointer
                            	  2994: 
                            	  2995: 
                            	  2996: 
                            	  2997: 
01:00001D8C 46FC2700        	  2998:             move #$2700,SR          * Put flags back to initial value
                            	  2999: 
01:00001D90 4E75            	  3000:             rts
                            	  3001: 
                            	  3002: 
                            	  3003: 
                            	  3004: *-----------------------------------------------------------
                            	  3005: *-----------------------------------------------------------
                            	  3006: * OPCODE : LEA_TAS
                            	  3007: *-----------------------------------------------------------
                            	  3008: *-----------------------------------------------------------
                            	  3009: op_TAS:
                            	  3010: 
                            	  3011: *     Test just one addressing mode
                            	  3012: 
01:00001D92 307C0100        	  3013:             move.l #$00000100,a0
                            	  3014: 
                            	  3015: *     (An)
01:00001D96 10BC0000        	  3016:             move.b #$00,(a0)
01:00001D9A 6BFE            	  3017:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D9C 66FE            	  3018:             bne.s *                   * Check Z Flag  beq/bne
01:00001D9E 4AD0            	  3019:             tas (a0)
01:00001DA0 0C100080        	  3020:             cmpi.b #$80,(a0)
01:00001DA4 66FE            	  3021:             bne.s *                   * branch if Z set
01:00001DA6 10BC00F5        	  3022:             move.b #$F5,(a0)
01:00001DAA 4AD0            	  3023:             tas (a0)
01:00001DAC 6AFE            	  3024:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DAE 67FE            	  3025:             beq.s *                   * Check Z Flag  beq/bne
01:00001DB0 4AD0            	  3026:             tas (a0)
01:00001DB2 0C1000F5        	  3027:             cmpi.b #$F5,(a0)
01:00001DB6 66FE            	  3028:             bne.s *                   * branch if Z set
                            	  3029: 
01:00001DB8 4E75            	  3030:             rts
                            	  3031: 
                            	  3032: 
                            	  3033: *-----------------------------------------------------------
                            	  3034: *-----------------------------------------------------------
                            	  3035: * OPCODE : LEA_TST
                            	  3036: *-----------------------------------------------------------
                            	  3037: *-----------------------------------------------------------
                            	  3038: op_TST:
                            	  3039: 
                            	  3040: *     Test just one addressing mode
                            	  3041: 
01:00001DBA 307C0100        	  3042:             move.l #$00000100,a0
                            	  3043: 
                            	  3044: *     (An) - BYTE
01:00001DBE 10BC0000        	  3045:             move.b #$00,(a0)
01:00001DC2 4A10            	  3046:             tst.b (a0)
01:00001DC4 6BFE            	  3047:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DC6 66FE            	  3048:             bne.s *                   * Check Z Flag  beq/bne
01:00001DC8 10BC00F5        	  3049:             move.b #$F5,(a0)
01:00001DCC 4A10            	  3050:             tst.b (a0)
01:00001DCE 6AFE            	  3051:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DD0 67FE            	  3052:             beq.s *                   * Check Z Flag  beq/bne
                            	  3053: 
                            	  3054: *     (An) - WORD
01:00001DD2 30BC0000        	  3055:             move.w #$0000,(a0)
01:00001DD6 4A50            	  3056:             tst.w (a0)
01:00001DD8 6BFE            	  3057:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DDA 66FE            	  3058:             bne.s *                   * Check Z Flag  beq/bne
01:00001DDC 30BCF567        	  3059:             move.w #$F567,(a0)
01:00001DE0 4A50            	  3060:             tst.w (a0)
01:00001DE2 6AFE            	  3061:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DE4 67FE            	  3062:             beq.s *                   * Check Z Flag  beq/bne
                            	  3063: 
                            	  3064: *     (An) - LONG
01:00001DE6 20BC00000000    	  3065:             move.l #$00000000,(a0)
01:00001DEC 4A90            	  3066:             tst.l (a0)
01:00001DEE 6BFE            	  3067:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DF0 66FE            	  3068:             bne.s *                   * Check Z Flag  beq/bne
01:00001DF2 20BCF56789AB    	  3069:             move.l #$F56789ab,(a0)
01:00001DF8 4A90            	  3070:             tst.l (a0)
01:00001DFA 6AFE            	  3071:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DFC 67FE            	  3072:             beq.s *                   * Check Z Flag  beq/bne
                            	  3073: 
                            	  3074: 
01:00001DFE 4E75            	  3075:             rts
                            	  3076: 
                            	  3077: 
                            	  3078: *-----------------------------------------------------------
                            	  3079: *-----------------------------------------------------------
                            	  3080: * OPCODE : LINKS
                            	  3081: *-----------------------------------------------------------
                            	  3082: *-----------------------------------------------------------
                            	  3083: op_LINKS:
                            	  3084: 
01:00001E00 207C11223344    	  3085:             move.l #$11223344,a0
01:00001E06 203C11223344    	  3086:             move.l #$11223344,d0
01:00001E0C 4E500000        	  3087:             link a0,#$0
01:00001E10 0C9711223344    	  3088:             cmpi.l #$11223344,(a7)
                            	  3089: 
01:00001E16 4E58            	  3090:             unlk a0
01:00001E18 B1C0            	  3091:             cmp.l d0,a0
01:00001E1A 66FE            	  3092:             bne.s *                   * branch if Z set
                            	  3093: 
01:00001E1C 4E75            	  3094:             rts
                            	  3095: 
                            	  3096: *-----------------------------------------------------------
                            	  3097: *-----------------------------------------------------------
                            	  3098: * OPCODE : MOVE_USP
                            	  3099: *-----------------------------------------------------------
                            	  3100: *-----------------------------------------------------------
                            	  3101: op_MOVE_USP:
                            	  3102: 
01:00001E1E 207C11223344    	  3103:             move.l #$11223344,a0
01:00001E24 4E60            	  3104:             move a0,USP
01:00001E26 4E69            	  3105:             move USP,a1
01:00001E28 B3C8            	  3106:             cmp.l a0,a1
01:00001E2A 66FE            	  3107:             bne.s *                   * branch if Z set
                            	  3108: 
01:00001E2C 4E75            	  3109:             rts
                            	  3110: 
                            	  3111: 
                            	  3112: *-----------------------------------------------------------
                            	  3113: *-----------------------------------------------------------
                            	  3114: * OPCODE : CHK
                            	  3115: *-----------------------------------------------------------
                            	  3116: *-----------------------------------------------------------
                            	  3117: op_CHK:
01:00001E2E 303C1122        	  3118:             move.w #$1122,d0
01:00001E32 323C1122        	  3119:             move.w #$1122,d1
01:00001E36 4380            	  3120:             chk d0,d1
                            	  3121: 
01:00001E38 4E71            	  3122:             nop
01:00001E3A 4E71            	  3123:             nop
                            	  3124: 
01:00001E3C 323C1122        	  3125:             move.w #$1122,d1
01:00001E40 43BC1122        	  3126:             chk #$1122,d1
                            	  3127: 
01:00001E44 323C1122        	  3128:             move.w #$1122,d1
01:00001E48 43BC007A        	  3129:             chk #00122,d1
01:00001E4C BCBCEEEE0006    	  3130:             cmp.l #$EEEE0006,d6
01:00001E52 66FE            	  3131:             bne.s *                   * branch if Z set
                            	  3132: 
01:00001E54 303C1122        	  3133:             move.w #$1122,d0
01:00001E58 323C8000        	  3134:             move.w #$8000,d1
01:00001E5C 4380            	  3135:             chk d0,d1
01:00001E5E BCBCEEEE0006    	  3136:             cmp.l #$EEEE0006,d6
01:00001E64 66FE            	  3137:             bne.s *                   * branch if Z set
                            	  3138: 
01:00001E66 4E75            	  3139:             rts
                            	  3140: 
                            	  3141: 
                            	  3142: *-----------------------------------------------------------
                            	  3143: *-----------------------------------------------------------
                            	  3144: * OPCODE : NEGS
                            	  3145: *-----------------------------------------------------------
                            	  3146: *-----------------------------------------------------------
                            	  3147: op_NEGS:
                            	  3148: 
                            	  3149: *     NOT - BYTE
01:00001E68 307C0100        	  3150:             move.l #$00000100,a0
01:00001E6C 7000            	  3151:             moveq  #$00000000,d0
01:00001E6E 4600            	  3152:             not.b d0
01:00001E70 6AFE            	  3153:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E72 67FE            	  3154:             beq.s *                   * Check Z Flag  beq/bne
01:00001E74 4600            	  3155:             not.b d0
01:00001E76 6BFE            	  3156:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E78 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
01:00001E7A 4A00            	  3158:             cmpi.b #$00,d0
01:00001E7C 66FE            	  3159:             bne.s *                   * Check Z Flag  beq/bne
01:00001E7E 10BC0080        	  3160:             move.b #$80,(a0)
01:00001E82 4610            	  3161:             not.b (a0)
01:00001E84 6BFE            	  3162:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E86 67FE            	  3163:             beq.s *                   * Check Z Flag  beq/bne
01:00001E88 4610            	  3164:             not.b (a0)
01:00001E8A 6AFE            	  3165:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E8C 67FE            	  3166:             beq.s *                   * Check Z Flag  beq/bne
01:00001E8E 0C100080        	  3167:             cmpi.b #$80,(a0)
01:00001E92 66FE            	  3168:             bne.s *                   * Check Z Flag  beq/bne
                            	  3169: 
                            	  3170: *     NOT - WORD
01:00001E94 307C0100        	  3171:             move.l #$00000100,a0
01:00001E98 7000            	  3172:             moveq  #$00000000,d0
01:00001E9A 4640            	  3173:             not.w d0
01:00001E9C 6AFE            	  3174:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E9E 67FE            	  3175:             beq.s *                   * Check Z Flag  beq/bne
01:00001EA0 4640            	  3176:             not.w d0
01:00001EA2 6BFE            	  3177:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EA4 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
01:00001EA6 4A40            	  3179:             cmpi.w #$0000,d0
01:00001EA8 66FE            	  3180:             bne.s *                   * Check Z Flag  beq/bne
01:00001EAA 30BC5A5A        	  3181:             move.w #$5a5a,(a0)
01:00001EAE 4650            	  3182:             not.w (a0)
01:00001EB0 6AFE            	  3183:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001EB2 67FE            	  3184:             beq.s *                   * Check Z Flag  beq/bne
01:00001EB4 4650            	  3185:             not.w (a0)
01:00001EB6 6BFE            	  3186:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EB8 67FE            	  3187:             beq.s *                   * Check Z Flag  beq/bne
01:00001EBA 0C505A5A        	  3188:             cmpi.w #$5a5a,(a0)
01:00001EBE 66FE            	  3189:             bne.s *                   * Check Z Flag  beq/bne
                            	  3190: 
                            	  3191: *     NOT - LONG
01:00001EC0 307C0100        	  3192:             move.l #$00000100,a0
01:00001EC4 7000            	  3193:             moveq  #$00000000,d0
01:00001EC6 4680            	  3194:             not.l d0
01:00001EC8 6AFE            	  3195:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001ECA 67FE            	  3196:             beq.s *                   * Check Z Flag  beq/bne
01:00001ECC 4680            	  3197:             not.l d0
01:00001ECE 6BFE            	  3198:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001ED0 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
01:00001ED2 4A80            	  3200:             cmpi.l #$00000000,d0
01:00001ED4 66FE            	  3201:             bne.s *                   * Check Z Flag  beq/bne
01:00001ED6 20BC5A5A1234    	  3202:             move.l #$5a5a1234,(a0)
01:00001EDC 4690            	  3203:             not.l (a0)
01:00001EDE 6AFE            	  3204:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001EE0 67FE            	  3205:             beq.s *                   * Check Z Flag  beq/bne
01:00001EE2 4690            	  3206:             not.l (a0)
01:00001EE4 6BFE            	  3207:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EE6 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne
01:00001EE8 0C905A5A1234    	  3209:             cmpi.l #$5a5a1234,(a0)
01:00001EEE 66FE            	  3210:             bne.s *                   * Check Z Flag  beq/bne
                            	  3211: 
                            	  3212: * -----
                            	  3213: 
                            	  3214: *     NEG - BYTE
01:00001EF0 307C0100        	  3215:             move.l #$00000100,a0
01:00001EF4 7000            	  3216:             moveq  #$00000000,d0
01:00001EF6 7240D241        	  3217:             move.l #$00000080,d1
01:00001EFA 4400            	  3218:             neg.b d0
01:00001EFC 6BFE            	  3219:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EFE 66FE            	  3220:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F00 65FE            	  3221:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F02 69FE            	  3222:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F04 4401            	  3223:             neg.b d1
01:00001F06 6AFE            	  3224:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F08 67FE            	  3225:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F0A 64FE            	  3226:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F0C 68FE            	  3227:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F0E 0C010080        	  3228:             cmpi.b #$80,d1
01:00001F12 66FE            	  3229:             bne.s *                   * Check Z Flag  beq/bne
01:00001F14 10BC007F        	  3230:             move.b #$7F,(a0)
01:00001F18 4410            	  3231:             neg.b (a0)
01:00001F1A 6AFE            	  3232:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F1C 67FE            	  3233:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F1E 64FE            	  3234:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F20 69FE            	  3235:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F22 10BC00F5        	  3236:             move.b #$F5,(a0)
01:00001F26 4410            	  3237:             neg.b (a0)
01:00001F28 6BFE            	  3238:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F2A 67FE            	  3239:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F2C 64FE            	  3240:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F2E 69FE            	  3241:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F30 0C10000B        	  3242:             cmpi.b #$0B,(a0)
01:00001F34 66FE            	  3243:             bne.s *                   * Check Z Flag  beq/bne
                            	  3244: 
                            	  3245: * -----
                            	  3246: 
                            	  3247: *     NEG - WORD
01:00001F36 307C0100        	  3248:             move.l #$00000100,a0
01:00001F3A 7000            	  3249:             moveq  #$00000000,d0
01:00001F3C 223C00008000    	  3250:             move.l #$00008000,d1
01:00001F42 4440            	  3251:             neg.w d0
01:00001F44 6BFE            	  3252:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F46 66FE            	  3253:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F48 65FE            	  3254:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F4A 69FE            	  3255:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F4C 4441            	  3256:             neg.w d1
01:00001F4E 6AFE            	  3257:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F50 67FE            	  3258:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F52 64FE            	  3259:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F54 68FE            	  3260:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F56 0C418000        	  3261:             cmpi.w #$8000,d1
01:00001F5A 66FE            	  3262:             bne.s *                   * Check Z Flag  beq/bne
01:00001F5C 30BC7FFF        	  3263:             move.w #$7FFF,(a0)
01:00001F60 4450            	  3264:             neg.w (a0)
01:00001F62 6AFE            	  3265:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F64 67FE            	  3266:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F66 64FE            	  3267:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F68 69FE            	  3268:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F6A 30BCF578        	  3269:             move.w #$F578,(a0)
01:00001F6E 4450            	  3270:             neg.w (a0)
01:00001F70 6BFE            	  3271:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F72 67FE            	  3272:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F74 64FE            	  3273:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F76 69FE            	  3274:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F78 0C500A88        	  3275:             cmpi.w #$0A88,(a0)
01:00001F7C 66FE            	  3276:             bne.s *                   * Check Z Flag  beq/bne
                            	  3277: 
                            	  3278: * -----
                            	  3279: 
                            	  3280: *     NEG - LONG
01:00001F7E 307C0100        	  3281:             move.l #$00000100,a0
01:00001F82 7000            	  3282:             moveq  #$00000000,d0
01:00001F84 223C80000000    	  3283:             move.l #$80000000,d1
01:00001F8A 4480            	  3284:             neg.l d0
01:00001F8C 6BFE            	  3285:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F8E 66FE            	  3286:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F90 65FE            	  3287:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F92 69FE            	  3288:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F94 4481            	  3289:             neg.l d1
01:00001F96 6AFE            	  3290:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F98 67FE            	  3291:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F9A 64FE            	  3292:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F9C 68FE            	  3293:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F9E 0C8180000000    	  3294:             cmpi.l #$80000000,d1
01:00001FA4 66FE            	  3295:             bne.s *                   * Check Z Flag  beq/bne
01:00001FA6 20BC7FFFFFFF    	  3296:             move.l #$7FFFFFFF,(a0)
01:00001FAC 4490            	  3297:             neg.l (a0)
01:00001FAE 6AFE            	  3298:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FB0 67FE            	  3299:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FB2 64FE            	  3300:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FB4 69FE            	  3301:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FB6 20BCF5781234    	  3302:             move.l #$F5781234,(a0)
01:00001FBC 4490            	  3303:             neg.l (a0)
01:00001FBE 6BFE            	  3304:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FC0 67FE            	  3305:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FC2 64FE            	  3306:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FC4 69FE            	  3307:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FC6 0C900A87EDCC    	  3308:             cmpi.l #$0A87EDCC,(a0)
01:00001FCC 66FE            	  3309:             bne.s *                   * Check Z Flag  beq/bne
                            	  3310: 
                            	  3311: 
                            	  3312: * -----
                            	  3313: 
                            	  3314: *     NEGX - BYTE
01:00001FCE 307C0100        	  3315:             move.l #$00000100,a0
01:00001FD2 7000            	  3316:             moveq  #$00000000,d0
01:00001FD4 7240D241        	  3317:             move.l #$00000080,d1
01:00001FD8 003C0010        	  3318:             ori.b #$10,CCR        * Set X Flag
01:00001FDC 4000            	  3319:             negx.b d0
01:00001FDE 6AFE            	  3320:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FE0 67FE            	  3321:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FE2 64FE            	  3322:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FE4 69FE            	  3323:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FE6 023C00EF        	  3324:             andi.b #$EF,CCR       * Clear X Flag
01:00001FEA 4000            	  3325:             negx.b d0
01:00001FEC 6BFE            	  3326:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FEE 67FE            	  3327:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FF0 64FE            	  3328:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FF2 69FE            	  3329:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FF4 003C0010        	  3330:             ori.b #$10,CCR        * Set X Flag
01:00001FF8 4001            	  3331:             negx.b d1
01:00001FFA 6BFE            	  3332:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FFC 67FE            	  3333:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FFE 64FE            	  3334:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002000 69FE            	  3335:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002002 0C01007F        	  3336:             cmpi.b #$7F,d1
01:00002006 66FE            	  3337:             bne.s *                   * Check Z Flag  beq/bne
01:00002008 023C00EF        	  3338:             andi.b #$EF,CCR       * Clear X Flag
01:0000200C 4001            	  3339:             negx.b d1
01:0000200E 6AFE            	  3340:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002010 67FE            	  3341:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002012 64FE            	  3342:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002014 69FE            	  3343:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002016 0C010081        	  3344:             cmpi.b #$81,d1
01:0000201A 66FE            	  3345:             bne.s *                   * Check Z Flag  beq/bne
01:0000201C 10BC007F        	  3346:             move.b #$7F,(a0)
01:00002020 003C0010        	  3347:             ori.b #$10,CCR        * Set X Flag
01:00002024 4010            	  3348:             negx.b (a0)
01:00002026 6AFE            	  3349:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002028 67FE            	  3350:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000202A 64FE            	  3351:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3352:             * I think overflow should happen here.
                            	  3353: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000202C 10BC007F        	  3354:             move.b #$7F,(a0)
01:00002030 023C00EF        	  3355:             andi.b #$EF,CCR       * Clear X Flag
01:00002034 4010            	  3356:             negx.b (a0)
01:00002036 6AFE            	  3357:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002038 67FE            	  3358:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000203A 64FE            	  3359:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000203C 69FE            	  3360:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000203E 10BC00F5        	  3361:             move.b #$F5,(a0)
01:00002042 003C0010        	  3362:             ori.b #$10,CCR        * Set X Flag
01:00002046 4010            	  3363:             negx.b (a0)
01:00002048 6BFE            	  3364:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000204A 67FE            	  3365:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000204C 64FE            	  3366:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000204E 69FE            	  3367:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002050 0C10000A        	  3368:             cmpi.b #$0A,(a0)
01:00002054 66FE            	  3369:             bne.s *                   * Check Z Flag  beq/bne
01:00002056 023C00EF        	  3370:             andi.b #$EF,CCR       * Clear X Flag
01:0000205A 4010            	  3371:             negx.b (a0)
01:0000205C 6AFE            	  3372:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000205E 67FE            	  3373:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002060 64FE            	  3374:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002062 69FE            	  3375:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002064 0C1000F6        	  3376:             cmpi.b #$F6,(a0)
01:00002068 66FE            	  3377:             bne.s *                   * Check Z Flag  beq/bne
                            	  3378: 
                            	  3379: 
                            	  3380: 
                            	  3381: * -----
                            	  3382: 
                            	  3383: *     NEGX - WORD
01:0000206A 307C0100        	  3384:             move.l #$00000100,a0
01:0000206E 7000            	  3385:             moveq  #$00000000,d0
01:00002070 223C00008000    	  3386:             move.l #$00008000,d1
01:00002076 003C0010        	  3387:             ori.b #$10,CCR        * Set X Flag
01:0000207A 4040            	  3388:             negx.w d0
01:0000207C 6AFE            	  3389:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000207E 67FE            	  3390:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002080 64FE            	  3391:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002082 69FE            	  3392:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002084 023C00EF        	  3393:             andi.b #$EF,CCR       * Clear X Flag
01:00002088 4040            	  3394:             negx.w d0
01:0000208A 6BFE            	  3395:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000208C 67FE            	  3396:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000208E 64FE            	  3397:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002090 69FE            	  3398:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002092 003C0010        	  3399:             ori.b #$10,CCR        * Set X Flag
01:00002096 4041            	  3400:             negx.w d1
01:00002098 6BFE            	  3401:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000209A 67FE            	  3402:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000209C 64FE            	  3403:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000209E 69FE            	  3404:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:000020A0 0C417FFF        	  3405:             cmpi.w #$7FFF,d1
01:000020A4 66FE            	  3406:             bne.s *                   * Check Z Flag  beq/bne
01:000020A6 023C00EF        	  3407:             andi.b #$EF,CCR       * Clear X Flag
01:000020AA 4041            	  3408:             negx.w d1
01:000020AC 6AFE            	  3409:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:000020AE 67FE            	  3410:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020B0 64FE            	  3411:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020B2 69FE            	  3412:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:000020B4 0C418001        	  3413:             cmpi.w #$8001,d1
01:000020B8 66FE            	  3414:             bne.s *                   * Check Z Flag  beq/bne
01:000020BA 30BC7FFF        	  3415:             move.w #$7FFF,(a0)
01:000020BE 003C0010        	  3416:             ori.b #$10,CCR        * Set X Flag
01:000020C2 4050            	  3417:             negx.w (a0)
01:000020C4 6AFE            	  3418:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:000020C6 67FE            	  3419:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020C8 64FE            	  3420:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3421: ***            
                            	  3422: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020CA 30BCF567        	  3423:             move.w #$F567,(a0)
01:000020CE 023C00EF        	  3424:             andi.b #$EF,CCR       * Clear X Flag
01:000020D2 4050            	  3425:             negx.w (a0)
01:000020D4 6BFE            	  3426:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020D6 67FE            	  3427:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020D8 64FE            	  3428:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020DA 69FE            	  3429:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020DC 30BCF567        	  3430:             move.w #$F567,(a0)
01:000020E0 003C0010        	  3431:             ori.b #$10,CCR        * Set X Flag
01:000020E4 4050            	  3432:             negx.w (a0)
01:000020E6 6BFE            	  3433:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020E8 67FE            	  3434:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020EA 64FE            	  3435:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020EC 69FE            	  3436:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020EE 0C500A98        	  3437:             cmpi.w #$0A98,(a0)
01:000020F2 66FE            	  3438:             bne.s *                   * Check Z Flag  beq/bne
01:000020F4 023C00EF        	  3439:             andi.b #$EF,CCR       * Clear X Flag
01:000020F8 4050            	  3440:             negx.w (a0)
01:000020FA 6AFE            	  3441:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020FC 67FE            	  3442:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020FE 64FE            	  3443:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002100 69FE            	  3444:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002102 0C50F568        	  3445:             cmpi.w #$F568,(a0)
01:00002106 66FE            	  3446:             bne.s *                   * Check Z Flag  beq/bne
                            	  3447: 
                            	  3448: 
                            	  3449: * -----
                            	  3450: 
                            	  3451: *     NEGX - LONG
01:00002108 307C0100        	  3452:             move.l #$00000100,a0
01:0000210C 7000            	  3453:             moveq  #$00000000,d0
01:0000210E 223C80000000    	  3454:             move.l #$80000000,d1
01:00002114 003C0010        	  3455:             ori.b #$10,CCR        * Set X Flag
01:00002118 4080            	  3456:             negx.l d0
01:0000211A 6AFE            	  3457:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000211C 67FE            	  3458:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000211E 64FE            	  3459:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002120 69FE            	  3460:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002122 023C00EF        	  3461:             andi.b #$EF,CCR       * Clear X Flag
01:00002126 4080            	  3462:             negx.l d0
01:00002128 6BFE            	  3463:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000212A 67FE            	  3464:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000212C 64FE            	  3465:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:0000212E 69FE            	  3466:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002130 003C0010        	  3467:             ori.b #$10,CCR        * Set X Flag
01:00002134 4081            	  3468:             negx.l d1
01:00002136 6BFE            	  3469:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002138 67FE            	  3470:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000213A 64FE            	  3471:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000213C 69FE            	  3472:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000213E 0C817FFFFFFF    	  3473:             cmpi.l #$7FFFFFFF,d1
01:00002144 66FE            	  3474:             bne.s *                   * Check Z Flag  beq/bne
01:00002146 023C00EF        	  3475:             andi.b #$EF,CCR       * Clear X Flag
01:0000214A 4081            	  3476:             negx.l d1
01:0000214C 6AFE            	  3477:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000214E 67FE            	  3478:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002150 64FE            	  3479:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3480: ****            
                            	  3481: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002152 0C8180000001    	  3482:             cmpi.l #$80000001,d1
01:00002158 66FE            	  3483:             bne.s *                   * Check Z Flag  beq/bne
01:0000215A 20BC00007FFF    	  3484:             move.l #$7FFF,(a0)
01:00002160 003C0010        	  3485:             ori.b #$10,CCR        * Set X Flag
01:00002164 4090            	  3486:             negx.l (a0)
01:00002166 6AFE            	  3487:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002168 67FE            	  3488:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000216A 64FE            	  3489:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3490: ****            
                            	  3491: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000216C 20BCF5671234    	  3492:             move.l #$F5671234,(a0)
01:00002172 023C00EF        	  3493:             andi.b #$EF,CCR       * Clear X Flag
01:00002176 4090            	  3494:             negx.l (a0)
01:00002178 6BFE            	  3495:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000217A 67FE            	  3496:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000217C 64FE            	  3497:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000217E 69FE            	  3498:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002180 20BCF5675678    	  3499:             move.l #$F5675678,(a0)
01:00002186 003C0010        	  3500:             ori.b #$10,CCR        * Set X Flag
01:0000218A 4090            	  3501:             negx.l (a0)
01:0000218C 6BFE            	  3502:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000218E 67FE            	  3503:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002190 64FE            	  3504:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002192 69FE            	  3505:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002194 0C900A98A987    	  3506:             cmpi.l #$0A98A987,(a0)
01:0000219A 66FE            	  3507:             bne.s *                   * Check Z Flag  beq/bne
01:0000219C 023C00EF        	  3508:             andi.b #$EF,CCR       * Clear X Flag
01:000021A0 4090            	  3509:             negx.l (a0)
01:000021A2 6AFE            	  3510:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000021A4 67FE            	  3511:             beq.s *                   * Check Z Flag  beq/bne 0
01:000021A6 64FE            	  3512:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000021A8 69FE            	  3513:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000021AA 0C90F5675679    	  3514:             cmpi.l #$F5675679,(a0)
01:000021B0 66FE            	  3515:             bne.s *                   * Check Z Flag  beq/bne
                            	  3516: 
                            	  3517: 
                            	  3518: * -----
                            	  3519: 
                            	  3520: *     CLR - BYTE
01:000021B2 307C0100        	  3521:             move.l #$00000100,a0
01:000021B6 203C12345678    	  3522:             move.l #$12345678,d0
01:000021BC 223C12345678    	  3523:             move.l #$12345678,d1
01:000021C2 243C12345678    	  3524:             move.l #$12345678,d2
01:000021C8 283C12345600    	  3525:             move.l #$12345600,d4
01:000021CE 2A3C12340000    	  3526:             move.l #$12340000,d5
01:000021D4 7C00            	  3527:             moveq  #$00000000,d6
                            	  3528: 
01:000021D6 4200            	  3529:             clr.b d0
01:000021D8 66FE            	  3530:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021DA 6BFE            	  3531:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021DC B880            	  3532:             cmp.l d0,d4
01:000021DE 66FE            	  3533:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3534: 
01:000021E0 4241            	  3535:             clr.w d1
01:000021E2 66FE            	  3536:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021E4 6BFE            	  3537:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021E6 BA81            	  3538:             cmp.l d1,d5
01:000021E8 66FE            	  3539:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3540: 
01:000021EA 7400            	  3541:             clr.l d2
01:000021EC 66FE            	  3542:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021EE 6BFE            	  3543:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021F0 BC82            	  3544:             cmp.l d2,d6
01:000021F2 66FE            	  3545:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3546: 
01:000021F4 4E75            	  3547:             rts
                            	  3548: 
                            	  3549: 
                            	  3550: 
                            	  3551: *-----------------------------------------------------------
                            	  3552: *-----------------------------------------------------------
                            	  3553: * OPCODE : MOVEM
                            	  3554: *-----------------------------------------------------------
                            	  3555: *-----------------------------------------------------------
                            	  3556: op_MOVEM:
                            	  3557: 
                            	  3558: *     WORD  Registers --> Memory
01:000021F6 203C0000D0D0    	  3559:             move.l #$0000d0d0,d0
01:000021FC 223C0000D1D1    	  3560:             move.l #$0000d1d1,d1
01:00002202 243C0000D2D2    	  3561:             move.l #$0000d2d2,d2
01:00002208 263C0000D3D3    	  3562:             move.l #$0000d3d3,d3
01:0000220E 283C0000D4D4    	  3563:             move.l #$0000d4d4,d4
01:00002214 2A3C0000D5D5    	  3564:             move.l #$0000d5d5,d5
01:0000221A 2C3C0000D6D6    	  3565:             move.l #$0000d6d6,d6
01:00002220 2E3C0000D7D7    	  3566:             move.l #$0000d7d7,d7
01:00002226 307C0A0A        	  3567:             move.l #$00000a0a,a0
01:0000222A 327C1A1A        	  3568:             move.l #$00001a1a,a1
01:0000222E 347C2A2A        	  3569:             move.l #$00002a2a,a2
01:00002232 367C3A3A        	  3570:             move.l #$00003a3a,a3
01:00002236 387C4A4A        	  3571:             move.l #$00004a4a,a4
01:0000223A 3A7C5A5A        	  3572:             move.l #$00005a5a,a5
01:0000223E 3C7C6A6A        	  3573:             move.l #$00006a6a,a6
                            	  3574: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3575: 
01:00002242 48B8FFFF0100    	  3576:             movem.w D0-D7/A0-A7,$00000100
                            	  3577: 
01:00002248 307C0100        	  3578:             move.l #$00000100,a0
                            	  3579: 
01:0000224C B058            	  3580:             cmp.w (a0)+,d0
01:0000224E 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002250 B258            	  3582:             cmp.w (a0)+,d1
01:00002252 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002254 B458            	  3584:             cmp.w (a0)+,d2
01:00002256 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002258 B658            	  3586:             cmp.w (a0)+,d3
01:0000225A 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000225C B858            	  3588:             cmp.w (a0)+,d4
01:0000225E 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002260 BA58            	  3590:             cmp.w (a0)+,d5
01:00002262 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002264 BC58            	  3592:             cmp.w (a0)+,d6
01:00002266 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002268 BE58            	  3594:             cmp.w (a0)+,d7
01:0000226A 66FE            	  3595:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3596: 
01:0000226C 0C580A0A        	  3597:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002270 66FE            	  3598:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3599: 
01:00002272 B2D8            	  3600:             cmp.w (a0)+,a1
01:00002274 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002276 B4D8            	  3602:             cmp.w (a0)+,a2
01:00002278 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000227A B6D8            	  3604:             cmp.w (a0)+,a3
01:0000227C 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000227E B8D8            	  3606:             cmp.w (a0)+,a4
01:00002280 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002282 BAD8            	  3608:             cmp.w (a0)+,a5
01:00002284 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002286 BCD8            	  3610:             cmp.w (a0)+,a6
01:00002288 66FE            	  3611:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: 
                            	  3616: *     LONG  Registers --> Memory
01:0000228A 203CD0D0D0D0    	  3617:             move.l #$d0d0d0d0,d0
01:00002290 223CD1D1D1D1    	  3618:             move.l #$d1d1d1d1,d1
01:00002296 243CD2D2D2D2    	  3619:             move.l #$d2d2d2d2,d2
01:0000229C 263CD3D3D3D3    	  3620:             move.l #$d3d3d3d3,d3
01:000022A2 283CD4D4D4D4    	  3621:             move.l #$d4d4d4d4,d4
01:000022A8 2A3CD5D5D5D5    	  3622:             move.l #$d5d5d5d5,d5
01:000022AE 2C3CD6D6D6D6    	  3623:             move.l #$d6d6d6d6,d6
01:000022B4 2E3CD7D7D7D7    	  3624:             move.l #$d7d7d7d7,d7
01:000022BA 207C0A0A0A0A    	  3625:             move.l #$0a0a0a0a,a0
01:000022C0 227C1A1A1A1A    	  3626:             move.l #$1a1a1a1a,a1
01:000022C6 247C2A2A2A2A    	  3627:             move.l #$2a2a2a2a,a2
01:000022CC 267C3A3A3A3A    	  3628:             move.l #$3a3a3a3a,a3
01:000022D2 287C4A4A4A4A    	  3629:             move.l #$4a4a4a4a,a4
01:000022D8 2A7C5A5A5A5A    	  3630:             move.l #$5a5a5a5a,a5
01:000022DE 2C7C6A6A6A6A    	  3631:             move.l #$6a6a6a6a,a6
                            	  3632: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3633: 
                            	  3634: 
01:000022E4 48F8FFFF0120    	  3635:             movem.l D0-D7/A0-A7,$00000120
                            	  3636: 
01:000022EA 307C0120        	  3637:             move.l #$00000120,a0
                            	  3638: 
01:000022EE B098            	  3639:             cmp.l (a0)+,d0
01:000022F0 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F2 B298            	  3641:             cmp.l (a0)+,d1
01:000022F4 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F6 B498            	  3643:             cmp.l (a0)+,d2
01:000022F8 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022FA B698            	  3645:             cmp.l (a0)+,d3
01:000022FC 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022FE B898            	  3647:             cmp.l (a0)+,d4
01:00002300 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002302 BA98            	  3649:             cmp.l (a0)+,d5
01:00002304 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002306 BC98            	  3651:             cmp.l (a0)+,d6
01:00002308 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000230A BE98            	  3653:             cmp.l (a0)+,d7
01:0000230C 66FE            	  3654:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3655: 
01:0000230E 0C980A0A0A0A    	  3656:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002314 66FE            	  3657:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3658: 
01:00002316 B3D8            	  3659:             cmp.l (a0)+,a1
01:00002318 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000231A B5D8            	  3661:             cmp.l (a0)+,a2
01:0000231C 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000231E B7D8            	  3663:             cmp.l (a0)+,a3
01:00002320 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002322 B9D8            	  3665:             cmp.l (a0)+,a4
01:00002324 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002326 BBD8            	  3667:             cmp.l (a0)+,a5
01:00002328 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000232A BDD8            	  3669:             cmp.l (a0)+,a6
01:0000232C 66FE            	  3670:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3671: *      ----
                            	  3672: 
                            	  3673: 
                            	  3674: *     WORD  Registers --> Memory  -(An) EA Mode
01:0000232E 203C0000D0D0    	  3675:             move.l #$0000d0d0,d0
01:00002334 223C0000D1D1    	  3676:             move.l #$0000d1d1,d1
01:0000233A 243C0000D2D2    	  3677:             move.l #$0000d2d2,d2
01:00002340 263C0000D3D3    	  3678:             move.l #$0000d3d3,d3
01:00002346 283C0000D4D4    	  3679:             move.l #$0000d4d4,d4
01:0000234C 2A3C0000D5D5    	  3680:             move.l #$0000d5d5,d5
01:00002352 2C3C0000D6D6    	  3681:             move.l #$0000d6d6,d6
01:00002358 2E3C0000D7D7    	  3682:             move.l #$0000d7d7,d7
01:0000235E 307C0A0A        	  3683:             move.l #$00000a0a,a0
01:00002362 327C1A1A        	  3684:             move.l #$00001a1a,a1
01:00002366 347C2A2A        	  3685:             move.l #$00002a2a,a2
01:0000236A 367C3A3A        	  3686:             move.l #$00003a3a,a3
01:0000236E 387C4A4A        	  3687:             move.l #$00004a4a,a4
01:00002372 3A7C5A5A        	  3688:             move.l #$00005a5a,a5
01:00002376 3C7C6A6A        	  3689:             move.l #$00006a6a,a6
                            	  3690: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3691: 
01:0000237A 307C01A0        	  3692:             move.l #$000001A0,a0
01:0000237E 48A0FFFF        	  3693:             movem.w D0-D7/A0-A7,-(a0)
                            	  3694: 
01:00002382 307C019E        	  3695:             move.l #$0000019E,a0
                            	  3696: 
01:00002386 BCE0            	  3697:             cmp.w -(a0),a6
01:00002388 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000238A BAE0            	  3699:             cmp.w -(a0),a5
01:0000238C 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000238E B8E0            	  3701:             cmp.w -(a0),a4
01:00002390 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002392 B6E0            	  3703:             cmp.w -(a0),a3
01:00002394 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002396 B4E0            	  3705:             cmp.w -(a0),a2
01:00002398 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000239A B2E0            	  3707:             cmp.w -(a0),a1
01:0000239C 66FE            	  3708:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000239E B0E0            	  3709:             cmp.w -(a0),a0
                            	  3710: *            bne.s *                   * Check Z Flag  beq/bne 0
01:000023A0 BE60            	  3711:             cmp.w -(a0),d7
01:000023A2 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023A4 BC60            	  3713:             cmp.w -(a0),d6
01:000023A6 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023A8 BA60            	  3715:             cmp.w -(a0),d5
01:000023AA 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023AC B860            	  3717:             cmp.w -(a0),d4
01:000023AE 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023B0 B660            	  3719:             cmp.w -(a0),d3
01:000023B2 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023B4 B460            	  3721:             cmp.w -(a0),d2
01:000023B6 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023B8 B260            	  3723:             cmp.w -(a0),d1
01:000023BA 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023BC B060            	  3725:             cmp.w -(a0),d0
01:000023BE 66FE            	  3726:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: 
                            	  3731: *     LONG  Registers --> Memory   -(An) EA Mode
01:000023C0 203CD0D0D0D0    	  3732:             move.l #$d0d0d0d0,d0
01:000023C6 223CD1D1D1D1    	  3733:             move.l #$d1d1d1d1,d1
01:000023CC 243CD2D2D2D2    	  3734:             move.l #$d2d2d2d2,d2
01:000023D2 263CD3D3D3D3    	  3735:             move.l #$d3d3d3d3,d3
01:000023D8 283CD4D4D4D4    	  3736:             move.l #$d4d4d4d4,d4
01:000023DE 2A3CD5D5D5D5    	  3737:             move.l #$d5d5d5d5,d5
01:000023E4 2C3CD6D6D6D6    	  3738:             move.l #$d6d6d6d6,d6
01:000023EA 2E3CD7D7D7D7    	  3739:             move.l #$d7d7d7d7,d7
01:000023F0 207C0A0A0A0A    	  3740:             move.l #$0a0a0a0a,a0
01:000023F6 227C1A1A1A1A    	  3741:             move.l #$1a1a1a1a,a1
01:000023FC 247C2A2A2A2A    	  3742:             move.l #$2a2a2a2a,a2
01:00002402 267C3A3A3A3A    	  3743:             move.l #$3a3a3a3a,a3
01:00002408 287C4A4A4A4A    	  3744:             move.l #$4a4a4a4a,a4
01:0000240E 2A7C5A5A5A5A    	  3745:             move.l #$5a5a5a5a,a5
01:00002414 2C7C6A6A6A6A    	  3746:             move.l #$6a6a6a6a,a6
                            	  3747: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3748: 
                            	  3749: 
01:0000241A 307C01A0        	  3750:             move.l #$000001A0,a0
01:0000241E 48E0FFFF        	  3751:             movem.l D0-D7/A0-A7,-(a0)
                            	  3752: 
01:00002422 307C019C        	  3753:             move.l #$0000019C,a0
                            	  3754: 
01:00002426 BDE0            	  3755:             cmp.l -(a0),a6
01:00002428 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000242A BBE0            	  3757:             cmp.l -(a0),a5
01:0000242C 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000242E B9E0            	  3759:             cmp.l -(a0),a4
01:00002430 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002432 B7E0            	  3761:             cmp.l -(a0),a3
01:00002434 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002436 B5E0            	  3763:             cmp.l -(a0),a2
01:00002438 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000243A B3E0            	  3765:             cmp.l -(a0),a1
01:0000243C 66FE            	  3766:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000243E B1E0            	  3767:             cmp.l -(a0),a0
                            	  3768: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002440 BEA0            	  3769:             cmp.l -(a0),d7
01:00002442 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002444 BCA0            	  3771:             cmp.l -(a0),d6
01:00002446 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002448 BAA0            	  3773:             cmp.l -(a0),d5
01:0000244A 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000244C B8A0            	  3775:             cmp.l -(a0),d4
01:0000244E 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002450 B6A0            	  3777:             cmp.l -(a0),d3
01:00002452 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002454 B4A0            	  3779:             cmp.l -(a0),d2
01:00002456 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002458 B2A0            	  3781:             cmp.l -(a0),d1
01:0000245A 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000245C B0A0            	  3783:             cmp.l -(a0),d0
01:0000245E 66FE            	  3784:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3785: 
                            	  3786: 
                            	  3787: 
                            	  3788: *     ----
                            	  3789: 
                            	  3790: *     WORD - Memory --> Registers
01:00002460 7000            	  3791:             moveq  #$00000000,d0
01:00002462 7200            	  3792:             moveq  #$00000000,d1
01:00002464 7400            	  3793:             moveq  #$00000000,d2
01:00002466 7600            	  3794:             moveq  #$00000000,d3
01:00002468 7800            	  3795:             moveq  #$00000000,d4
01:0000246A 7A00            	  3796:             moveq  #$00000000,d5
01:0000246C 7C00            	  3797:             moveq  #$00000000,d6
01:0000246E 7E00            	  3798:             moveq  #$00000000,d7
01:00002470 91C8            	  3799:             move.l #$00000000,a0
01:00002472 93C9            	  3800:             move.l #$00000000,a1
01:00002474 95CA            	  3801:             move.l #$00000000,a2
01:00002476 97CB            	  3802:             move.l #$00000000,a3
01:00002478 99CC            	  3803:             move.l #$00000000,a4
01:0000247A 9BCD            	  3804:             move.l #$00000000,a5
01:0000247C 9DCE            	  3805:             move.l #$00000000,a6
                            	  3806: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3807: 
01:0000247E 4CB82A550100    	  3808:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3809: 
01:00002484 B0BCFFFFD0D0    	  3810:             cmp.l #$FFFFD0D0,d0
01:0000248A 66FE            	  3811:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000248C B4BCFFFFD1D1    	  3812:             cmp.l #$FFFFD1D1,d2
01:00002492 66FE            	  3813:             bne.s *                  * Check Z Flag  beq/bne 0
01:00002494 B8BCFFFFD2D2    	  3814:             cmp.l #$FFFFD2D2,d4
01:0000249A 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000249C BCBCFFFFD3D3    	  3816:             cmp.l #$FFFFD3D3,d6
01:000024A2 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024A4 B2FCD4D4        	  3818:             cmp.l #$FFFFD4D4,a1
01:000024A8 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024AA B6FCD5D5        	  3820:             cmp.l #$FFFFD5D5,a3
01:000024AE 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024B0 BAFCD6D6        	  3822:             cmp.l #$FFFFD6D6,a5
01:000024B4 66FE            	  3823:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3824: 
                            	  3825: 
                            	  3826: *     LONG - Memory --> Registers
01:000024B6 7000            	  3827:             moveq  #$00000000,d0
01:000024B8 7200            	  3828:             moveq  #$00000000,d1
01:000024BA 7400            	  3829:             moveq  #$00000000,d2
01:000024BC 7600            	  3830:             moveq  #$00000000,d3
01:000024BE 7800            	  3831:             moveq  #$00000000,d4
01:000024C0 7A00            	  3832:             moveq  #$00000000,d5
01:000024C2 7C00            	  3833:             moveq  #$00000000,d6
01:000024C4 7E00            	  3834:             moveq  #$00000000,d7
01:000024C6 91C8            	  3835:             move.l #$00000000,a0
01:000024C8 93C9            	  3836:             move.l #$00000000,a1
01:000024CA 95CA            	  3837:             move.l #$00000000,a2
01:000024CC 97CB            	  3838:             move.l #$00000000,a3
01:000024CE 99CC            	  3839:             move.l #$00000000,a4
01:000024D0 9BCD            	  3840:             move.l #$00000000,a5
01:000024D2 9DCE            	  3841:             move.l #$00000000,a6
                            	  3842: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3843: 
01:000024D4 4CF82A550120    	  3844:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3845: 
01:000024DA B0BCD0D0D0D0    	  3846:             cmp.l #$D0D0D0D0,d0
01:000024E0 66FE            	  3847:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024E2 B4BCD1D1D1D1    	  3848:             cmp.l #$D1D1D1D1,d2
01:000024E8 66FE            	  3849:             bne.s *                  * Check Z Flag  beq/bne 0
01:000024EA B8BCD2D2D2D2    	  3850:             cmp.l #$D2D2D2D2,d4
01:000024F0 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024F2 BCBCD3D3D3D3    	  3852:             cmp.l #$D3D3D3D3,d6
01:000024F8 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024FA B3FCD4D4D4D4    	  3854:             cmp.l #$D4D4D4D4,a1
01:00002500 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002502 B7FCD5D5D5D5    	  3856:             cmp.l #$D5D5D5D5,a3
01:00002508 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000250A BBFCD6D6D6D6    	  3858:             cmp.l #$D6D6D6D6,a5
01:00002510 66FE            	  3859:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3860: 
01:00002512 4E75            	  3861:             rts
                            	  3862: 
                            	  3863: 
                            	  3864: *-----------------------------------------------------------
                            	  3865: *-----------------------------------------------------------
                            	  3866: * OPCODE : ABCD
                            	  3867: *-----------------------------------------------------------
                            	  3868: *-----------------------------------------------------------
                            	  3869: op_ABCD:
                            	  3870: 
                            	  3871: *     Test with X Flag CLEARED
01:00002514 307C0110        	  3872:                 move.l #$00000110,a0 * Address pointer-X
01:00002518 327C0120        	  3873:                 move.l #$00000120,a1 * Address pointer-Y
01:0000251C 7000            	  3874:                 moveq  #$00000000,d0 * BCD byte-X
01:0000251E 7200            	  3875:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002520 7400            	  3876:                 moveq  #$00000000,d2
01:00002522 7600            	  3877:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002524 7800            	  3878:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002526 7A00            	  3879:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002528 2C3C00000099    	  3880:                 move.l #$00000099,d6 * Inner loop counter
01:0000252E 2E3C00000099    	  3881:                 move.l #$00000099,d7 * Outer loop counter
                            	  3882: 
01:00002534 2007            	  3883: ABCD_OUTER1:    move.l d7,d0
01:00002536 2206            	  3884: ABCD_INNER1:    move.l d6,d1
01:00002538 023C00EF        	  3885:                 andi.b #$EF,CCR     * Clear X Flag
01:0000253C 307C0110        	  3886:                 move.l #$00000110,a0 * Address pointer-X
01:00002540 327C0120        	  3887:                 move.l #$00000120,a1 * Address pointer-Y
01:00002544 1140FFFF        	  3888:                 move.b d0,-1(a0)
01:00002548 1341FFFF        	  3889:                 move.b d1,-1(a1)
                            	  3890: 
01:0000254C C300            	  3891:                 abcd d0,d1
01:0000254E 6402            	  3892:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002550 5284            	  3893:                 add.l #1,d4
01:00002552 DA81            	  3894: ABCD_NO_C1:     add.l d1,d5
                            	  3895: 
01:00002554 C308            	  3896:                 abcd -(a0),-(a1)
01:00002556 6402            	  3897:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002558 5284            	  3898:                 add.l #1,d4
01:0000255A D611            	  3899: ABCD_NO_C2:     add.b (a1),d3
                            	  3900: 
                            	  3901: 
01:0000255C 51CEFFD8        	  3902:                 dbf d6,ABCD_INNER1
01:00002560 2C3C00000099    	  3903:                 move.l #$00000099,d6
01:00002566 51CFFFCC        	  3904:                 dbf d7,ABCD_OUTER1
01:0000256A 0C8400005AFC    	  3905:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:00002570 66FE            	  3906:                 bne.s *
01:00002572 0C85001C9A34    	  3907:                 cmpi.l #$001C9A34,d5
01:00002578 66FE            	  3908:                 bne.s *
01:0000257A 0C8300000034    	  3909:                 cmpi.l #$00000034,d3
01:00002580 66FE            	  3910:                 bne.s *
                            	  3911: 
                            	  3912: *     Test with X Flag SET
01:00002582 307C0110        	  3913:                 move.l #$00000110,a0 * Address pointer-X
01:00002586 327C0120        	  3914:                 move.l #$00000120,a1 * Address pointer-Y
01:0000258A 7000            	  3915:                 moveq  #$00000000,d0 * BCD byte-X
01:0000258C 7200            	  3916:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000258E 7400            	  3917:                 moveq  #$00000000,d2
01:00002590 7600            	  3918:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002592 7800            	  3919:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002594 7A00            	  3920:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002596 2C3C00000099    	  3921:                 move.l #$00000099,d6 * Inner loop counter
01:0000259C 2E3C00000099    	  3922:                 move.l #$00000099,d7 * Outer loop counter
                            	  3923: 
01:000025A2 2007            	  3924: ABCD_OUTER2:    move.l d7,d0
01:000025A4 2206            	  3925: ABCD_INNER2:    move.l d6,d1
01:000025A6 003C0010        	  3926:                 ori.b #$10,CCR      * Set X Flag
01:000025AA 307C0110        	  3927:                 move.l #$00000110,a0 * Address pointer-X
01:000025AE 327C0120        	  3928:                 move.l #$00000120,a1 * Address pointer-Y
01:000025B2 1140FFFF        	  3929:                 move.b d0,-1(a0)
01:000025B6 1341FFFF        	  3930:                 move.b d1,-1(a1)
                            	  3931: 
01:000025BA C300            	  3932:                 abcd d0,d1
01:000025BC 6402            	  3933:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:000025BE 5284            	  3934:                 add.l #1,d4
01:000025C0 DA81            	  3935: ABCD_NO_C3:     add.l d1,d5
                            	  3936: 
01:000025C2 C308            	  3937:                 abcd -(a0),-(a1)
01:000025C4 6402            	  3938:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:000025C6 5284            	  3939:                 add.l #1,d4
01:000025C8 D611            	  3940: ABCD_NO_C4:     add.b (a1),d3
                            	  3941: 
                            	  3942: 
01:000025CA 51CEFFD8        	  3943:                 dbf d6,ABCD_INNER2
01:000025CE 2C3C00000099    	  3944:                 move.l #$00000099,d6
01:000025D4 51CFFFCC        	  3945:                 dbf d7,ABCD_OUTER2
01:000025D8 0C8400005B60    	  3946:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:000025DE 66FE            	  3947:                 bne.s *
01:000025E0 0C85001CCFC8    	  3948:                 cmpi.l #$001CCFC8,d5
01:000025E6 66FE            	  3949:                 bne.s *
01:000025E8 0C8300000034    	  3950:                 cmpi.l #$00000034,d3
01:000025EE 66FE            	  3951:                 bne.s *
                            	  3952: 
                            	  3953: *             Quick check of Z Flag
01:000025F0 103C0000        	  3954:                 move.b #$00,d0
01:000025F4 123C0000        	  3955:                 move.b #$00,d1
01:000025F8 44FC0000        	  3956:                 move #$00,CCR              * Set Z flag to 0
01:000025FC C101            	  3957:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025FE 67FE            	  3958:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3959: 
01:00002600 103C0001        	  3960:                 move.b #$01,d0
01:00002604 123C0000        	  3961:                 move.b #$00,d1
01:00002608 44FC0004        	  3962:                 move #$04,CCR              * Set Z flag to 0
01:0000260C C101            	  3963:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:0000260E 67FE            	  3964:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3965: 
01:00002610 4E75            	  3966:                 rts
                            	  3967: 
                            	  3968: *-----------------------------------------------------------
                            	  3969: *-----------------------------------------------------------
                            	  3970: * OPCODE : SBCD
                            	  3971: *-----------------------------------------------------------
                            	  3972: *-----------------------------------------------------------
                            	  3973: op_SBCD:
                            	  3974: 
                            	  3975: *     Test with X Flag CLEARED
01:00002612 307C0110        	  3976:                 move.l #$00000110,a0 * Address pointer-X
01:00002616 327C0120        	  3977:                 move.l #$00000120,a1 * Address pointer-Y
01:0000261A 7000            	  3978:                 moveq  #$00000000,d0 * BCD byte-X
01:0000261C 7200            	  3979:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000261E 7400            	  3980:                 moveq  #$00000000,d2
01:00002620 7600            	  3981:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002622 7800            	  3982:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002624 7A00            	  3983:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002626 2C3C00000099    	  3984:                 move.l #$00000099,d6 * Inner loop counter
01:0000262C 2E3C00000099    	  3985:                 move.l #$00000099,d7 * Outer loop counter
                            	  3986: 
01:00002632 2007            	  3987: SBCD_OUTER1:    move.l d7,d0
01:00002634 2206            	  3988: SBCD_INNER1:    move.l d6,d1
01:00002636 023C00EF        	  3989:                 andi.b #$EF,CCR     * Clear X Flag
01:0000263A 307C0110        	  3990:                 move.l #$00000110,a0 * Address pointer-X
01:0000263E 327C0120        	  3991:                 move.l #$00000120,a1 * Address pointer-Y
01:00002642 1140FFFF        	  3992:                 move.b d0,-1(a0)
01:00002646 1341FFFF        	  3993:                 move.b d1,-1(a1)
                            	  3994: 
01:0000264A 8300            	  3995:                 sbcd d0,d1
01:0000264C 6402            	  3996:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:0000264E 5284            	  3997:                 add.l #1,d4
01:00002650 DA81            	  3998: SBCD_NO_C1:     add.l d1,d5
                            	  3999: 
01:00002652 8308            	  4000:                 sbcd -(a0),-(a1)
01:00002654 6402            	  4001:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002656 5284            	  4002:                 add.l #1,d4
01:00002658 D611            	  4003: SBCD_NO_C2:     add.b (a1),d3
                            	  4004: 
                            	  4005: 
01:0000265A 51CEFFD8        	  4006:                 dbf d6,SBCD_INNER1
01:0000265E 2C3C00000099    	  4007:                 move.l #$00000099,d6
01:00002664 51CFFFCC        	  4008:                 dbf d7,SBCD_OUTER1
01:00002668 0C8400005C0A    	  4009:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:0000266E 66FE            	  4010:                 bne.s *
01:00002670 0C85001C459E    	  4011:                 cmpi.l #$001C459E,d5
01:00002676 66FE            	  4012:                 bne.s *
01:00002678 0C830000009E    	  4013:                 cmpi.l #$0000009E,d3
01:0000267E 66FE            	  4014:                 bne.s *
                            	  4015: 
                            	  4016: *     Test with X Flag SET
01:00002680 307C0110        	  4017:                 move.l #$00000110,a0 * Address pointer-X
01:00002684 327C0120        	  4018:                 move.l #$00000120,a1 * Address pointer-Y
01:00002688 7000            	  4019:                 moveq  #$00000000,d0 * BCD byte-X
01:0000268A 7200            	  4020:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000268C 7400            	  4021:                 moveq  #$00000000,d2
01:0000268E 7600            	  4022:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002690 7800            	  4023:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002692 7A00            	  4024:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002694 2C3C00000099    	  4025:                 move.l #$00000099,d6 * Inner loop counter
01:0000269A 2E3C00000099    	  4026:                 move.l #$00000099,d7 * Outer loop counter
                            	  4027: 
01:000026A0 2007            	  4028: SBCD_OUTER2:    move.l d7,d0
01:000026A2 2206            	  4029: SBCD_INNER2:    move.l d6,d1
01:000026A4 003C0010        	  4030:                 ori.b #$10,CCR      * Set X Flag
01:000026A8 307C0110        	  4031:                 move.l #$00000110,a0 * Address pointer-X
01:000026AC 327C0120        	  4032:                 move.l #$00000120,a1 * Address pointer-Y
01:000026B0 1140FFFF        	  4033:                 move.b d0,-1(a0)
01:000026B4 1341FFFF        	  4034:                 move.b d1,-1(a1)
                            	  4035: 
01:000026B8 8300            	  4036:                 sbcd d0,d1
01:000026BA 6402            	  4037:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:000026BC 5284            	  4038:                 add.l #1,d4
01:000026BE DA81            	  4039: SBCD_NO_C3:     add.l d1,d5
                            	  4040: 
01:000026C0 8308            	  4041:                 sbcd -(a0),-(a1)
01:000026C2 6402            	  4042:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:000026C4 5284            	  4043:                 add.l #1,d4
01:000026C6 D611            	  4044: SBCD_NO_C4:     add.b (a1),d3
                            	  4045: 
01:000026C8 51CEFFD8        	  4046:                 dbf d6,SBCD_INNER2
01:000026CC 2C3C00000099    	  4047:                 move.l #$00000099,d6
01:000026D2 51CFFFCC        	  4048:                 dbf d7,SBCD_OUTER2
01:000026D6 0C8400005CA4    	  4049:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:000026DC 66FE            	  4050:                 bne.s *
01:000026DE 0C85001C5C66    	  4051:                 cmpi.l #$001C5C66,d5
01:000026E4 66FE            	  4052:                 bne.s *
01:000026E6 0C830000009E    	  4053:                 cmpi.l #$0000009E,d3
01:000026EC 66FE            	  4054:                 bne.s *
                            	  4055: 
                            	  4056: 
                            	  4057: *             Quick check of Z Flag
01:000026EE 103C0000        	  4058:                 move.b #$00,d0
01:000026F2 123C0000        	  4059:                 move.b #$00,d1
01:000026F6 44FC0000        	  4060:                 move #$00,CCR              * Set Z flag to 0
01:000026FA 8101            	  4061:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026FC 67FE            	  4062:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4063: 
01:000026FE 103C0001        	  4064:                 move.b #$01,d0
01:00002702 123C0000        	  4065:                 move.b #$00,d1
01:00002706 44FC0004        	  4066:                 move #$04,CCR              * Set Z flag to 0
01:0000270A 8101            	  4067:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:0000270C 67FE            	  4068:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4069: 
01:0000270E 4E75            	  4070:                 rts
                            	  4071: 
                            	  4072: *-----------------------------------------------------------
                            	  4073: *-----------------------------------------------------------
                            	  4074: * OPCODE : NBCD
                            	  4075: *-----------------------------------------------------------
                            	  4076: *-----------------------------------------------------------
                            	  4077: op_NBCD:
                            	  4078: 
                            	  4079: *        NBCD to a  Register
                            	  4080: 
01:00002710 7000            	  4081:                 moveq  #$00000000,d0 * BCD byte
01:00002712 7200            	  4082:                 moveq  #$00000000,d1
01:00002714 7400            	  4083:                 moveq  #$00000000,d2
01:00002716 7600            	  4084:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:00002718 7800            	  4085:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000271A 7A00            	  4086:                 moveq  #$00000000,d5 * Cumulative BCD results
01:0000271C 2C3C00000099    	  4087:                 move.l #$00000099,d6
01:00002722 2E3C00000099    	  4088:                 move.l #$00000099,d7 * Loop counter
                            	  4089: 
01:00002728 2007            	  4090: NBCD_LOOP:      move.l d7,d0
01:0000272A 44FC0004        	  4091:                 move #$04,CCR        * Set Z flag to 0
                            	  4092: 
01:0000272E 4800            	  4093:                 nbcd d0
                            	  4094: 
01:00002730 6402            	  4095:                 bcc.s NBCD_NO_C         * Check C Flag
01:00002732 5284            	  4096:                 add.l #1,d4
01:00002734 6602            	  4097: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:00002736 5283            	  4098:                 add.l #1,d3
01:00002738 DA80            	  4099: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4100: 
01:0000273A 51CFFFEC        	  4101:                 dbf d7,NBCD_LOOP
                            	  4102: 
01:0000273E 0C8300000001    	  4103:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002744 66FE            	  4104:                 bne.s *
01:00002746 0C8400000099    	  4105:                 cmpi.l #$00000099,d4
01:0000274C 66FE            	  4106:                 bne.s *
01:0000274E 0C8500002E3B    	  4107:                 cmpi.l #$00002E3B,d5
01:00002754 66FE            	  4108:                 bne.s *
                            	  4109: 
                            	  4110: 
                            	  4111: *        NBCD to a memory location
                            	  4112: 
01:00002756 7000            	  4113:                 moveq  #$00000000,d0 * BCD byte
01:00002758 7200            	  4114:                 moveq  #$00000000,d1
01:0000275A 7400            	  4115:                 moveq  #$00000000,d2
01:0000275C 7600            	  4116:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:0000275E 7800            	  4117:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002760 7A00            	  4118:                 moveq  #$00000000,d5 * Cumulative BCD results
01:00002762 2C3C00000099    	  4119:                 move.l #$00000099,d6
01:00002768 2E3C00000099    	  4120:                 move.l #$00000099,d7 * Loop counter
                            	  4121: 
01:0000276E 11C70100        	  4122: NBCD_LOOP1:     move.b d7,$00000100
01:00002772 44FC0004        	  4123:                 move #$04,CCR        * Set Z flag to 0
                            	  4124: 
01:00002776 48380100        	  4125:                 nbcd $00000100
01:0000277A 10380100        	  4126:                 move.b $00000100,d0
                            	  4127: 
01:0000277E 6402            	  4128:                 bcc.s NBCD_NO_C1        * Check C Flag
01:00002780 5284            	  4129:                 add.l #1,d4
01:00002782 6602            	  4130: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:00002784 5283            	  4131:                 add.l #1,d3
01:00002786 DA80            	  4132: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4133: 
01:00002788 51CFFFE4        	  4134:                 dbf d7,NBCD_LOOP1
                            	  4135: 
01:0000278C 0C8300000001    	  4136:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002792 66FE            	  4137:                 bne.s *
01:00002794 4A84            	  4138:                 cmpi.l #$00000000,d4
01:00002796 66FE            	  4139:                 bne.s *
01:00002798 0C8500002E3B    	  4140:                 cmpi.l #$00002E3B,d5
01:0000279E 66FE            	  4141:                 bne.s *
                            	  4142: 
                            	  4143: 
01:000027A0 4E75            	  4144:                 rts
                            	  4145: 
                            	  4146: 
                            	  4147: 
                            	  4148: *-----------------------------------------------------------
                            	  4149: *-----------------------------------------------------------
                            	  4150: * OPCODE : TRAPV
                            	  4151: *-----------------------------------------------------------
                            	  4152: *-----------------------------------------------------------
                            	  4153: op_TRAPV:
                            	  4154: 
                            	  4155: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4156: 
01:000027A2 7000            	  4157:                 moveq  #$00000000,d0 * Clear d0
                            	  4158: 
01:000027A4 44FC0000        	  4159:                 move #$00,CCR        * Clear V flag
01:000027A8 4E76            	  4160:                 trapv
01:000027AA 4A80            	  4161:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:000027AC 66FE            	  4162:                 bne.s *
                            	  4163: 
01:000027AE 44FC0002        	  4164:                 move #$02,CCR        * Set V flag
01:000027B2 4E76            	  4165:                 trapv
01:000027B4 0C8012345678    	  4166:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:000027BA 66FE            	  4167:                 bne.s *
                            	  4168: 
                            	  4169: 
01:000027BC 4E75            	  4170:                 rts
                            	  4171: 
                            	  4172: 
                            	  4173: 
                            	  4174: *-----------------------------------------------------------
                            	  4175: *-----------------------------------------------------------
                            	  4176: * OPCODE : RTR
                            	  4177: *-----------------------------------------------------------
                            	  4178: *-----------------------------------------------------------
                            	  4179: 
                            	  4180: op_RTR:
                            	  4181: 
                            	  4182: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4183: 
01:000027BE 41FA000C        	  4184:                 lea RTR_DONE,a0
01:000027C2 2F08            	  4185:                 move.l a0,-(a7)     * push destination PC to the stack
01:000027C4 2F3C0000FF15    	  4186:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
01:000027CA 4E77            	  4187:                 rtr
                            	  4188: 
01:000027CC 40C0            	  4189: RTR_DONE:       move SR,d0
01:000027CE 0240001F        	  4190:                 andi #$1F,d0
01:000027D2 0C400015        	  4191:                 cmpi #$15,d0
01:000027D6 66FE            	  4192:                 bne.s *
                            	  4193: 
01:000027D8 4E75            	  4194:                 rts
                            	  4195: 
                            	  4196: 
01:000027DA 283C44444444    	  4197: BSR_FAR2:       move.l #$44444444,d4
01:000027E0 4E75            	  4198:                 rts
                            	  4199: 
                            	  4200: 
                            	  4201: *-----------------------------------------------------------
                            	  4202: *-----------------------------------------------------------
                            	  4203: * OPCODE : BCC
                            	  4204: *-----------------------------------------------------------
                            	  4205: *-----------------------------------------------------------
                            	  4206: 
01:000027E2 44FC0000        	  4207: op_BCC:         move #$00,CCR
01:000027E6 6202            	  4208:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:000027E8 60FE            	  4209:                 bra.s *
                            	  4210: 
01:000027EA 44FC0001        	  4211: BCC1:           move #$01,CCR
01:000027EE 63000004        	  4212:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:000027F2 60FE            	  4213:                 bra.s *
                            	  4214: 
01:000027F4 44FC0000        	  4215: BCC2:           move #$00,CCR
01:000027F8 6402            	  4216:                 bcc.s BCC3            * Carry Clear         C=0
01:000027FA 60FE            	  4217:                 bra.s *
                            	  4218: 
01:000027FC 44FC0001        	  4219: BCC3:           move #$01,CCR
01:00002800 65000004        	  4220:                 bcs.w BCC4            * Carry Set           C=1
01:00002804 60FE            	  4221:                 bra.s *
                            	  4222: 
01:00002806 44FC0000        	  4223: BCC4:           move #$00,CCR
01:0000280A 6602            	  4224:                 bne.s BCC5            * Not Equal           Z=0
01:0000280C 60FE            	  4225:                 bra.s *
                            	  4226: 
01:0000280E 44FC0004        	  4227: BCC5:           move #$04,CCR
01:00002812 67000004        	  4228:                 beq.w BCC6            * Equal               Z=1
01:00002816 60FE            	  4229:                 bra.s *
                            	  4230: 
01:00002818 44FC0000        	  4231: BCC6:           move #$00,CCR
01:0000281C 6802            	  4232:                 bvc.s BCC7            * V Clear             V=0
01:0000281E 60FE            	  4233:                 bra.s *
                            	  4234: 
01:00002820 44FC0002        	  4235: BCC7:           move #$02,CCR
01:00002824 69000004        	  4236:                 bvs.w BCC8            * V Set               V=1
01:00002828 60FE            	  4237:                 bra.s *
                            	  4238: 
01:0000282A 44FC0000        	  4239: BCC8:           move #$00,CCR
01:0000282E 6A02            	  4240:                 bpl.s BCC9            * Plus                N=0
01:00002830 60FE            	  4241:                 bra.s *
                            	  4242: 
01:00002832 44FC0008        	  4243: BCC9:           move #$08,CCR
01:00002836 6B000004        	  4244:                 bmi.w BCC10           * Minus               N=1
01:0000283A 60FE            	  4245:                 bra.s *
                            	  4246: 
01:0000283C 44FC0000        	  4247: BCC10:          move #$00,CCR
01:00002840 6C02            	  4248:                 bge.s BCC11           * Greater or Equal    N=V
01:00002842 60FE            	  4249:                 bra.s *
                            	  4250: 
01:00002844 44FC0002        	  4251: BCC11:          move #$02,CCR
01:00002848 6D000004        	  4252:                 blt.w BCC12           * Less Than           N!=V
01:0000284C 60FE            	  4253:                 bra.s *
                            	  4254: 
01:0000284E 44FC000A        	  4255: BCC12:          move #$0A,CCR
01:00002852 6E02            	  4256:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:00002854 60FE            	  4257:                 bra.s *
                            	  4258: 
01:00002856 44FC0006        	  4259: BCC13:          move #$06,CCR
01:0000285A 6F000004        	  4260:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:0000285E 60FE            	  4261:                 bra.s *
                            	  4262: 
                            	  4263: 
01:00002860 4E75            	  4264: BCC14:          rts
                            	  4265: 
                            	  4266: 
                            	  4267: *-----------------------------------------------------------
                            	  4268: *-----------------------------------------------------------
                            	  4269: * OPCODE : DBCC
                            	  4270: *-----------------------------------------------------------
                            	  4271: *-----------------------------------------------------------
                            	  4272: 
01:00002862 7003            	  4273: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:00002864 7200            	  4274:                 moveq  #$00000000,d1    * Accumulator
01:00002866 44FC0000        	  4275:                 move #$00,CCR
                            	  4276: 
01:0000286A 5201            	  4277: DBCC_LOOP1:     addi.b #$1,d1
01:0000286C 51C8FFFC        	  4278:                 dbf d0,DBCC_LOOP1
                            	  4279: 
01:00002870 0C8100000004    	  4280:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:00002876 66FE            	  4281:                 bne.s *
                            	  4282: 
01:00002878 5201            	  4283: DBCC_LOOP2:     addi.b #$1,d1
01:0000287A 54C8FFFC        	  4284:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4285: 
01:0000287E 0C8100000005    	  4286:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:00002884 66FE            	  4287:                 bne.s *
                            	  4288: 
01:00002886 4E75            	  4289:                 rts
                            	  4290: 
                            	  4291: 
                            	  4292: *-----------------------------------------------------------
                            	  4293: *-----------------------------------------------------------
                            	  4294: * OPCODE : SCC
                            	  4295: *-----------------------------------------------------------
                            	  4296: *-----------------------------------------------------------
                            	  4297: 
01:00002888 44FC0001        	  4298: op_SCC:         move #$01,CCR
01:0000288C 54F900010000    	  4299:                 scc $00010000                   * Clear the EA byte
01:00002892 4A3900010000    	  4300:                 cmpi.b #$00,$00010000
01:00002898 66FE            	  4301:                 bne.s *
                            	  4302: 
01:0000289A 44FC0000        	  4303:                 move #$00,CCR
01:0000289E 54F900010000    	  4304:                 scc $00010000                   * Set the EA byte to 0xFF
01:000028A4 0C3900FF00010000	  4305:                 cmpi.b #$FF,$00010000
01:000028AC 66FE            	  4306:                 bne.s *
                            	  4307: 
01:000028AE 4E75            	  4308:                 rts
                            	  4309: 
                            	  4310: 
                            	  4311: 
                            	  4312: *-----------------------------------------------------------
                            	  4313: *-----------------------------------------------------------
                            	  4314: * OPCODE : ADDQ
                            	  4315: *-----------------------------------------------------------
                            	  4316: *-----------------------------------------------------------
                            	  4317: 
                            	  4318: op_ADDQ:
                            	  4319: 
                            	  4320: *     BYTE
01:000028B0 203C000000FF    	  4321:                 move.l #$000000FF,d0    * Loop counter
01:000028B6 7200            	  4322:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028B8 7400            	  4323:                 moveq  #$00000000,d2    * Data results accumulator
01:000028BA 7600            	  4324:                 moveq  #$00000000,d3
01:000028BC 7800            	  4325:                 moveq  #$00000000,d4
01:000028BE 7A00            	  4326:                 moveq  #$00000000,d5
01:000028C0 7C00            	  4327:                 moveq  #$00000000,d6
01:000028C2 7E00            	  4328:                 moveq  #$00000000,d7
                            	  4329: 
01:000028C4 5605            	  4330: ADDQ_LOOP1:     addq.b #3,d5
01:000028C6 40C6            	  4331:                 move SR,d6
01:000028C8 02860000001F    	  4332:                 andi.l #$1F,d6        * Isolate flags
01:000028CE D286            	  4333:                 add.l d6,d1           * Copy flag results into accumulator
01:000028D0 D485            	  4334:                 add.l d5,d2           * Copy data results into data accumulator
01:000028D2 51C8FFF0        	  4335:                 dbf d0,ADDQ_LOOP1
                            	  4336: 
01:000028D6 0C810000043D    	  4337:                 cmpi.l #$0000043D,d1
01:000028DC 66FE            	  4338:                 bne.s *
01:000028DE 0C8200007F80    	  4339:                 cmpi.l #$00007F80,d2
01:000028E4 66FE            	  4340:                 bne.s *
                            	  4341: 
                            	  4342: 
                            	  4343: *     WORD
01:000028E6 203C000000FF    	  4344:                 move.l #$000000FF,d0    * Loop counter
01:000028EC 7200            	  4345:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028EE 7400            	  4346:                 moveq  #$00000000,d2    * Data results accumulator
01:000028F0 7600            	  4347:                 moveq  #$00000000,d3
01:000028F2 7800            	  4348:                 moveq  #$00000000,d4
01:000028F4 2A3C0000FFF0    	  4349:                 move.l #$0000FFF0,d5
01:000028FA 7C00            	  4350:                 moveq  #$00000000,d6
01:000028FC 7E00            	  4351:                 moveq  #$00000000,d7
01:000028FE 307C0100        	  4352:                 move.l #$00000100,a0
                            	  4353: 
01:00002902 5A45            	  4354: ADDQ_LOOP2:     addq.w #5,d5
01:00002904 40C6            	  4355:                 move SR,d6
01:00002906 02860000001F    	  4356:                 andi.l #$1F,d6        * Isolate flags
01:0000290C D286            	  4357:                 add.l d6,d1           * Copy flag results into accumulator
01:0000290E D485            	  4358:                 add.l d5,d2           * Copy data results into data accumulator
01:00002910 51C8FFF0        	  4359:                 dbf d0,ADDQ_LOOP2
                            	  4360: 
01:00002914 0C8100000029    	  4361:                 cmpi.l #$00000029,d1
01:0000291A 66FE            	  4362:                 bne.s *
01:0000291C 0C8200057280    	  4363:                 cmpi.l #$00057280,d2
01:00002922 66FE            	  4364:                 bne.s *
                            	  4365: 
                            	  4366: 
                            	  4367: *     LONG
01:00002924 203C000000FF    	  4368:                 move.l #$000000FF,d0    * Loop counter
01:0000292A 7200            	  4369:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000292C 7400            	  4370:                 moveq  #$00000000,d2    * Data results accumulator
01:0000292E 7600            	  4371:                 moveq  #$00000000,d3
01:00002930 7800            	  4372:                 moveq  #$00000000,d4
01:00002932 7AF0            	  4373:                 move.l #$FFFFFFF0,d5
01:00002934 7C00            	  4374:                 moveq  #$00000000,d6
01:00002936 7E00            	  4375:                 moveq  #$00000000,d7
                            	  4376: 
01:00002938 5285            	  4377: ADDQ_LOOP3:     addq.l #1,d5
01:0000293A 40C6            	  4378:                 move SR,d6
01:0000293C 02860000001F    	  4379:                 andi.l #$1F,d6        * Isolate flags
01:00002942 D286            	  4380:                 add.l d6,d1           * Copy flag results into accumulator
01:00002944 D485            	  4381:                 add.l d5,d2           * Copy data results into data accumulator
01:00002946 51C8FFF0        	  4382:                 dbf d0,ADDQ_LOOP3
                            	  4383: 
01:0000294A 0C810000008D    	  4384:                 cmpi.l #$0000008D,d1
01:00002950 66FE            	  4385:                 bne.s *
01:00002952 0C8200007080    	  4386:                 cmpi.l #$00007080,d2
01:00002958 66FE            	  4387:                 bne.s *
                            	  4388: 
                            	  4389: *     Check that Flags are not updated for Address registers
01:0000295A 207C0000FFFF    	  4390:                 move.l #$0000FFFF,a0
01:00002960 44FC0000        	  4391:                 move #$00,CCR         * Clear flags
01:00002964 5E48            	  4392:                 addq.w #$7,a0
01:00002966 65FE            	  4393:                 bcs.s *
                            	  4394: 
01:00002968 4E75            	  4395:                 rts
                            	  4396: 
                            	  4397: 
                            	  4398: 
                            	  4399: *-----------------------------------------------------------
                            	  4400: *-----------------------------------------------------------
                            	  4401: * OPCODE : SUBQ
                            	  4402: *-----------------------------------------------------------
                            	  4403: *-----------------------------------------------------------
                            	  4404: 
                            	  4405: op_SUBQ:
                            	  4406: 
                            	  4407: *     BYTE
01:0000296A 203C000000FF    	  4408:                 move.l #$000000FF,d0    * Loop counter
01:00002970 7200            	  4409:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002972 243C00001234    	  4410:                 move.l #$00001234,d2    * Data results accumulator
01:00002978 7600            	  4411:                 moveq  #$00000000,d3
01:0000297A 7800            	  4412:                 moveq  #$00000000,d4
01:0000297C 7A12            	  4413:                 moveq  #$00000012,d5
01:0000297E 7C00            	  4414:                 moveq  #$00000000,d6
01:00002980 7E00            	  4415:                 moveq  #$00000000,d7
                            	  4416: 
01:00002982 5305            	  4417: SUBQ_LOOP1:     subq.b #1,d5
01:00002984 40C6            	  4418:                 move SR,d6
01:00002986 02860000001F    	  4419:                 andi.l #$1F,d6        * Isolate flags
01:0000298C D286            	  4420:                 add.l d6,d1           * Copy flag results into accumulator
01:0000298E D485            	  4421:                 add.l d5,d2           * Copy data results into data accumulator
01:00002990 51C8FFF0        	  4422:                 dbf d0,SUBQ_LOOP1
                            	  4423: 
01:00002994 0C8100000417    	  4424:                 cmpi.l #$00000417,d1
01:0000299A 66FE            	  4425:                 bne.s *
01:0000299C 0C82000091B4    	  4426:                 cmpi.l #$000091B4,d2
01:000029A2 66FE            	  4427:                 bne.s *
                            	  4428: 
                            	  4429: 
                            	  4430: *     WORD
01:000029A4 203C000000FF    	  4431:                 move.l #$000000FF,d0    * Loop counter
01:000029AA 7200            	  4432:                 moveq  #$00000000,d1    * Flag results accumulator
01:000029AC 7400            	  4433:                 moveq  #$00000000,d2    * Data results accumulator
01:000029AE 7600            	  4434:                 moveq  #$00000000,d3
01:000029B0 7800            	  4435:                 moveq  #$00000000,d4
01:000029B2 7A02            	  4436:                 moveq  #$00000002,d5
01:000029B4 7C00            	  4437:                 moveq  #$00000000,d6
01:000029B6 7E00            	  4438:                 moveq  #$00000000,d7
01:000029B8 307C0100        	  4439:                 move.l #$00000100,a0
                            	  4440: 
01:000029BC 5B45            	  4441: SUBQ_LOOP2:     subq.w #5,d5
01:000029BE 40C6            	  4442:                 move SR,d6
01:000029C0 02860000001F    	  4443:                 andi.l #$1F,d6        * Isolate flags
01:000029C6 D286            	  4444:                 add.l d6,d1           * Copy flag results into accumulator
01:000029C8 D485            	  4445:                 add.l d5,d2           * Copy data results into data accumulator
01:000029CA 51C8FFF0        	  4446:                 dbf d0,SUBQ_LOOP2
                            	  4447: 
01:000029CE 0C8100000811    	  4448:                 cmpi.l #$00000811,d1
01:000029D4 66FE            	  4449:                 bne.s *
01:000029D6 0C8200FD7F80    	  4450:                 cmpi.l #$00FD7F80,d2
01:000029DC 66FE            	  4451:                 bne.s *
                            	  4452: 
                            	  4453: 
                            	  4454: *     LONG
01:000029DE 203C000000FF    	  4455:                 move.l #$000000FF,d0    * Loop counter
01:000029E4 7200            	  4456:                 moveq  #$00000000,d1    * Flag results accumulator
01:000029E6 7400            	  4457:                 moveq  #$00000000,d2    * Data results accumulator
01:000029E8 7600            	  4458:                 moveq  #$00000000,d3
01:000029EA 7800            	  4459:                 moveq  #$00000000,d4
01:000029EC 7A07            	  4460:                 moveq  #$00000007,d5
01:000029EE 7C00            	  4461:                 moveq  #$00000000,d6
01:000029F0 7E00            	  4462:                 moveq  #$00000000,d7
                            	  4463: 
01:000029F2 5385            	  4464: SUBQ_LOOP3:     subq.l #1,d5
01:000029F4 40C6            	  4465:                 move SR,d6
01:000029F6 02860000001F    	  4466:                 andi.l #$1F,d6        * Isolate flags
01:000029FC D286            	  4467:                 add.l d6,d1           * Copy flag results into accumulator
01:000029FE D485            	  4468:                 add.l d5,d2           * Copy data results into data accumulator
01:00002A00 51C8FFF0        	  4469:                 dbf d0,SUBQ_LOOP3
                            	  4470: 
01:00002A04 0C81000007DD    	  4471:                 cmpi.l #$000007DD,d1
01:00002A0A 66FE            	  4472:                 bne.s *
01:00002A0C 0C82FFFF8680    	  4473:                 cmpi.l #$FFFF8680,d2
01:00002A12 66FE            	  4474:                 bne.s *
                            	  4475: 
                            	  4476: *     Check that Flags are not updated for Address registers
01:00002A14 207C0001FFFF    	  4477:                 move.l #$0001FFFF,a0
01:00002A1A 44FC0000        	  4478:                 move #$00,CCR         * Clear flags
01:00002A1E 5F48            	  4479:                 subq.w #$7,a0
01:00002A20 65FE            	  4480:                 bcs.s *
                            	  4481: 
01:00002A22 4E75            	  4482:                 rts
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: 
                            	  4487: *-----------------------------------------------------------
                            	  4488: *-----------------------------------------------------------
                            	  4489: * OPCODE : MOVEQ
                            	  4490: *-----------------------------------------------------------
                            	  4491: *-----------------------------------------------------------
                            	  4492: 
                            	  4493: op_MOVEQ:
01:00002A24 7000            	  4494:                 moveq  #$00000000,d0
01:00002A26 7000            	  4495:                 moveq #$0,d0
01:00002A28 66FE            	  4496:                 bne.s *
01:00002A2A 4A80            	  4497:                 cmpi.l #$00000000,d0
01:00002A2C 66FE            	  4498:                 bne.s *
                            	  4499: 
01:00002A2E 7000            	  4500:                 moveq  #$00000000,d0
01:00002A30 7080            	  4501:                 moveq #-128,d0
01:00002A32 67FE            	  4502:                 beq.s *
01:00002A34 6AFE            	  4503:                 bpl.s *
01:00002A36 0C80FFFFFF80    	  4504:                 cmpi.l #$FFFFFF80,d0
01:00002A3C 66FE            	  4505:                 bne.s *
                            	  4506: 
                            	  4507: 
01:00002A3E 4E75            	  4508:                 rts
                            	  4509: 
                            	  4510: 
                            	  4511: *-----------------------------------------------------------
                            	  4512: *-----------------------------------------------------------
                            	  4513: * OPCODE : DIVU
                            	  4514: *-----------------------------------------------------------
                            	  4515: *-----------------------------------------------------------
                            	  4516: 
                            	  4517: op_DIVU:
                            	  4518: 
01:00002A40 203CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A46 223C00005A5A    	  4520:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A4C 243CA5A5A5A5    	  4521:                 move.l #$a5a5a5a5,d2
01:00002A52 7600            	  4522:                 moveq  #$00000000,d3
01:00002A54 7800            	  4523:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A56 7A00            	  4524:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A58 7C0E            	  4525:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A5A 7E1E            	  4526:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4527: 
                            	  4528: 
01:00002A5C 80C1            	  4529: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:00002A5E 40C3            	  4530:                 move SR,d3
01:00002A60 02830000000C    	  4531:                 andi.l #$0C,d3            * Isolate flags
01:00002A66 DA83            	  4532:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A68 D880            	  4533:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A6A E289            	  4534:                 lsr.l #$1,d1
                            	  4535: 
01:00002A6C 51CEFFEE        	  4536:                 dbf d6,DIVU_OUTER1
01:00002A70 E28A            	  4537:                 lsr.l #$1,d2
01:00002A72 2002            	  4538:                 move.l d2,d0
01:00002A74 223C00005A5A    	  4539:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A7A 7C0E            	  4540:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A7C 51CFFFDE        	  4541:                 dbf d7,DIVU_OUTER1
                            	  4542: 
01:00002A80 0C8492FEDB89    	  4543:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002A86 66FE            	  4544:                 bne.s *
                            	  4545: 
01:00002A88 0C8500000110    	  4546:                 cmpi.l #$00000110,d5      * Check the Flag results
01:00002A8E 66FE            	  4547:                 bne.s *
                            	  4548: 
                            	  4549: 
01:00002A90 4E75            	  4550:                 rts
                            	  4551: 
                            	  4552: 
                            	  4553: 
                            	  4554: *-----------------------------------------------------------
                            	  4555: *-----------------------------------------------------------
                            	  4556: * OPCODE : DIVS
                            	  4557: *-----------------------------------------------------------
                            	  4558: *-----------------------------------------------------------
                            	  4559: 
                            	  4560: op_DIVS:
                            	  4561: 
01:00002A92 203CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A98 223C00005A5A    	  4563:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A9E 243CA5A5A5A5    	  4564:                 move.l #$a5a5a5a5,d2
01:00002AA4 7600            	  4565:                 moveq  #$00000000,d3
01:00002AA6 7800            	  4566:                 moveq  #$00000000,d4        * Cumulative data results
01:00002AA8 7A00            	  4567:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AAA 7C0E            	  4568:                 move.l #$0000000E,d6       * Inner loop counter
01:00002AAC 7E1E            	  4569:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4570: 
                            	  4571: 
01:00002AAE 81C1            	  4572: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:00002AB0 40C3            	  4573:                 move SR,d3
01:00002AB2 02830000000C    	  4574:                 andi.l #$0C,d3            * Isolate flags
01:00002AB8 DA83            	  4575:                 add.l d3,d5               * Copy flag results into accumulator
01:00002ABA D880            	  4576:                 add.l d0,d4               * Copy data results into data accumulator
01:00002ABC E289            	  4577:                 lsr.l #$1,d1
                            	  4578: 
01:00002ABE 51CEFFEE        	  4579:                 dbf d6,DIVS_OUTER1
01:00002AC2 E28A            	  4580:                 lsr.l #$1,d2
01:00002AC4 2002            	  4581:                 move.l d2,d0
01:00002AC6 223C00005A5A    	  4582:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002ACC 7C0E            	  4583:                 move.l #$0000000E,d6       * Inner loop counter
01:00002ACE 51CFFFDE        	  4584:                 dbf d7,DIVS_OUTER1
                            	  4585: 
01:00002AD2 0C844EC5D057    	  4586:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002AD8 66FE            	  4587:                 bne.s *
                            	  4588: 
01:00002ADA 0C8500000038    	  4589:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002AE0 66FE            	  4590:                 bne.s *
                            	  4591: 
                            	  4592: 
01:00002AE2 4E75            	  4593:                 rts
                            	  4594: 
                            	  4595: 
                            	  4596: 
                            	  4597: *-----------------------------------------------------------
                            	  4598: *-----------------------------------------------------------
                            	  4599: * OPCODE : OR
                            	  4600: *-----------------------------------------------------------
                            	  4601: *-----------------------------------------------------------
                            	  4602: 
                            	  4603: op_OR:
                            	  4604: 
                            	  4605: *  * <EA> to Register
                            	  4606: 
01:00002AE4 203CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002AEA 223C8167E123    	  4608:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002AF0 243CA5A5A5A5    	  4609:                 move.l #$a5a5a5a5,d2
01:00002AF6 7600            	  4610:                 moveq  #$00000000,d3
01:00002AF8 7800            	  4611:                 moveq  #$00000000,d4       * Cumulative data results
01:00002AFA 7A00            	  4612:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AFC 7C1E            	  4613:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AFE 7E1E            	  4614:                 move.l #$0000001E,d7       * Outer loop counter
01:00002B00 307C0100        	  4615:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4616: 
                            	  4617: 
                            	  4618: OR_OUTER1:
                            	  4619: 
                            	  4620: *     BYTE
01:00002B04 2081            	  4621:                 move.l d1,(a0)
01:00002B06 8010            	  4622:                 or.b (a0),d0
01:00002B08 40C3            	  4623:                 move SR,d3
01:00002B0A 02830000000C    	  4624:                 andi.l #$0C,d3            * Isolate flags
01:00002B10 DA83            	  4625:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B12 D880            	  4626:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4627: 
                            	  4628: *     WORD
01:00002B14 2081            	  4629:                 move.l d1,(a0)
01:00002B16 8050            	  4630:                 or.w (a0),d0
01:00002B18 40C3            	  4631:                 move SR,d3
01:00002B1A 02830000000C    	  4632:                 andi.l #$0C,d3            * Isolate flags
01:00002B20 DA83            	  4633:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B22 D880            	  4634:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4635: 
                            	  4636: *     LONG
01:00002B24 2081            	  4637:                 move.l d1,(a0)
01:00002B26 8090            	  4638:                 or.l (a0),d0
01:00002B28 40C3            	  4639:                 move SR,d3
01:00002B2A 02830000000F    	  4640:                 andi.l #$0F,d3            * Isolate flags
01:00002B30 DA83            	  4641:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B32 D880            	  4642:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4643: 
                            	  4644: 
01:00002B34 E289            	  4645:                 lsr.l #$1,d1
01:00002B36 51CEFFCC        	  4646:                 dbf d6,OR_OUTER1
01:00002B3A E28A            	  4647:                 lsr.l #$1,d2
01:00002B3C 223C8167E123    	  4648:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B42 7C1E            	  4649:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B44 51CFFFBE        	  4650:                 dbf d7,OR_OUTER1
                            	  4651: 
01:00002B48 0C8476EAC803    	  4652:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002B4E 66FE            	  4653:                 bne.s *
01:00002B50 0C8500005A18    	  4654:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002B56 66FE            	  4655:                 bne.s *
                            	  4656: 
                            	  4657: 
                            	  4658: *  * Register to <EA>
                            	  4659: 
01:00002B58 203C86738374    	  4660:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B5E 223CFC55F2FE    	  4661:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B64 243C86738374    	  4662:                 move.l #$86738374,d2
01:00002B6A 7600            	  4663:                 moveq  #$00000000,d3
01:00002B6C 7800            	  4664:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B6E 7A00            	  4665:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B70 7C1E            	  4666:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B72 7E1D            	  4667:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B74 307C0100        	  4668:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4669: 
                            	  4670: 
                            	  4671: OR_OUTER2:
                            	  4672: 
                            	  4673: *     BYTE
01:00002B78 2080            	  4674:                 move.l d0,(a0)
01:00002B7A 8310            	  4675:                 or.b d1,(a0)
01:00002B7C 40C3            	  4676:                 move SR,d3
01:00002B7E 02830000000C    	  4677:                 andi.l #$0C,d3            * Isolate flags
01:00002B84 DA83            	  4678:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B86 D890            	  4679:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4680: 
                            	  4681: *     WORD
01:00002B88 2080            	  4682:                 move.l d0,(a0)
01:00002B8A 8350            	  4683:                 or.w d1,(a0)
01:00002B8C 40C3            	  4684:                 move SR,d3
01:00002B8E 02830000000C    	  4685:                 andi.l #$0C,d3            * Isolate flags
01:00002B94 DA83            	  4686:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B96 D890            	  4687:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4688: 
                            	  4689: *     LONG
01:00002B98 2080            	  4690:                 move.l d0,(a0)
01:00002B9A 8390            	  4691:                 or.l d1,(a0)
01:00002B9C 40C3            	  4692:                 move SR,d3
01:00002B9E 02830000000F    	  4693:                 andi.l #$0F,d3            * Isolate flags
01:00002BA4 DA83            	  4694:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BA6 D890            	  4695:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4696: 
                            	  4697: 
01:00002BA8 E289            	  4698:                 lsr.l #$1,d1
01:00002BAA 51CEFFCC        	  4699:                 dbf d6,OR_OUTER2
01:00002BAE E28A            	  4700:                 lsr.l #$1,d2
01:00002BB0 223C8167E123    	  4701:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BB6 7C1E            	  4702:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BB8 51CFFFBE        	  4703:                 dbf d7,OR_OUTER2
                            	  4704: 
01:00002BBC 0C84FA82B9E4    	  4705:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002BC2 66FE            	  4706:                 bne.s *
01:00002BC4 0C8500005730    	  4707:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002BCA 66FE            	  4708:                 bne.s *
                            	  4709: 
                            	  4710: 
01:00002BCC 4E75            	  4711:                 rts
                            	  4712: 
                            	  4713: 
                            	  4714: 
                            	  4715: *-----------------------------------------------------------
                            	  4716: *-----------------------------------------------------------
                            	  4717: * OPCODE : AND
                            	  4718: *-----------------------------------------------------------
                            	  4719: *-----------------------------------------------------------
                            	  4720: 
                            	  4721: op_AND:
                            	  4722: 
                            	  4723: *  * <EA> to Register
                            	  4724: 
01:00002BCE 203CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002BD4 223C8167E123    	  4726:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002BDA 243CA5A5A5A5    	  4727:                 move.l #$a5a5a5a5,d2
01:00002BE0 7600            	  4728:                 moveq  #$00000000,d3
01:00002BE2 7800            	  4729:                 moveq  #$00000000,d4       * Cumulative data results
01:00002BE4 7A00            	  4730:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002BE6 7C1E            	  4731:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BE8 7E1E            	  4732:                 move.l #$0000001E,d7       * Outer loop counter
01:00002BEA 307C0100        	  4733:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4734: 
                            	  4735: 
                            	  4736: AND_OUTER1:
                            	  4737: 
                            	  4738: *     BYTE
01:00002BEE 2081            	  4739:                 move.l d1,(a0)
01:00002BF0 C010            	  4740:                 and.b (a0),d0
01:00002BF2 40C3            	  4741:                 move SR,d3
01:00002BF4 02830000000C    	  4742:                 andi.l #$0C,d3            * Isolate flags
01:00002BFA DA83            	  4743:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BFC D880            	  4744:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4745: 
                            	  4746: *     WORD
01:00002BFE 2081            	  4747:                 move.l d1,(a0)
01:00002C00 C050            	  4748:                 and.w (a0),d0
01:00002C02 40C3            	  4749:                 move SR,d3
01:00002C04 02830000000C    	  4750:                 andi.l #$0C,d3            * Isolate flags
01:00002C0A DA83            	  4751:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C0C D880            	  4752:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4753: 
                            	  4754: *     LONG
01:00002C0E 2081            	  4755:                 move.l d1,(a0)
01:00002C10 C090            	  4756:                 and.l (a0),d0
01:00002C12 40C3            	  4757:                 move SR,d3
01:00002C14 02830000000F    	  4758:                 andi.l #$0F,d3            * Isolate flags
01:00002C1A DA83            	  4759:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C1C D880            	  4760:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4761: 
                            	  4762: 
01:00002C1E E289            	  4763:                 lsr.l #$1,d1
01:00002C20 51CEFFCC        	  4764:                 dbf d6,AND_OUTER1
01:00002C24 E28A            	  4765:                 lsr.l #$1,d2
01:00002C26 223C8167E123    	  4766:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C2C 7C1E            	  4767:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C2E 51CFFFBE        	  4768:                 dbf d7,AND_OUTER1
                            	  4769: 
01:00002C32 0C84CF212883    	  4770:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002C38 66FE            	  4771:                 bne.s *
01:00002C3A 0C8500002D10    	  4772:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002C40 66FE            	  4773:                 bne.s *
                            	  4774: 
                            	  4775: 
                            	  4776: *  * Register to <EA>
                            	  4777: 
01:00002C42 203C86738374    	  4778:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C48 223CFC55F2FE    	  4779:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C4E 243C86738374    	  4780:                 move.l #$86738374,d2
01:00002C54 7600            	  4781:                 moveq  #$00000000,d3
01:00002C56 7800            	  4782:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C58 7A00            	  4783:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C5A 7C1E            	  4784:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C5C 7E1D            	  4785:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C5E 307C0100        	  4786:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4787: 
                            	  4788: 
                            	  4789: AND_OUTER2:
                            	  4790: 
                            	  4791: *     BYTE
01:00002C62 2080            	  4792:                 move.l d0,(a0)
01:00002C64 C310            	  4793:                 and.b d1,(a0)
01:00002C66 40C3            	  4794:                 move SR,d3
01:00002C68 02830000000C    	  4795:                 andi.l #$0C,d3            * Isolate flags
01:00002C6E DA83            	  4796:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C70 D890            	  4797:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4798: 
                            	  4799: *     WORD
01:00002C72 2080            	  4800:                 move.l d0,(a0)
01:00002C74 C350            	  4801:                 and.w d1,(a0)
01:00002C76 40C3            	  4802:                 move SR,d3
01:00002C78 02830000000C    	  4803:                 andi.l #$0C,d3            * Isolate flags
01:00002C7E DA83            	  4804:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C80 D890            	  4805:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4806: 
                            	  4807: *     LONG
01:00002C82 2080            	  4808:                 move.l d0,(a0)
01:00002C84 C390            	  4809:                 and.l d1,(a0)
01:00002C86 40C3            	  4810:                 move SR,d3
01:00002C88 02830000000F    	  4811:                 andi.l #$0F,d3            * Isolate flags
01:00002C8E DA83            	  4812:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C90 D890            	  4813:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4814: 
                            	  4815: 
01:00002C92 E289            	  4816:                 lsr.l #$1,d1
01:00002C94 51CEFFCC        	  4817:                 dbf d6,AND_OUTER2
01:00002C98 E28A            	  4818:                 lsr.l #$1,d2
01:00002C9A 223C8167E123    	  4819:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CA0 7C1E            	  4820:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CA2 51CFFFBE        	  4821:                 dbf d7,AND_OUTER2
                            	  4822: 
01:00002CA6 0C844A3DE544    	  4823:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002CAC 66FE            	  4824:                 bne.s *
01:00002CAE 0C85000018E8    	  4825:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002CB4 66FE            	  4826:                 bne.s *
                            	  4827: 
                            	  4828: 
01:00002CB6 4E75            	  4829:                 rts
                            	  4830: 
                            	  4831: 
                            	  4832: 
                            	  4833: *-----------------------------------------------------------
                            	  4834: *-----------------------------------------------------------
                            	  4835: * OPCODE : EOR
                            	  4836: *-----------------------------------------------------------
                            	  4837: *-----------------------------------------------------------
                            	  4838: 
                            	  4839: op_EOR:
                            	  4840: 
                            	  4841: *  * Register to <EA>
                            	  4842: 
01:00002CB8 203C86738374    	  4843:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002CBE 223CFC55F2FE    	  4844:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002CC4 243C86738374    	  4845:                 move.l #$86738374,d2
01:00002CCA 7600            	  4846:                 moveq  #$00000000,d3
01:00002CCC 7800            	  4847:                 moveq  #$00000000,d4       * Cumulative data results
01:00002CCE 7A00            	  4848:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002CD0 7C1E            	  4849:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CD2 7E1D            	  4850:                 move.l #$0000001D,d7       * Outer loop counter
01:00002CD4 307C0100        	  4851:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4852: 
                            	  4853: 
                            	  4854: EOR_OUTER2:
                            	  4855: 
                            	  4856: *     BYTE
01:00002CD8 2080            	  4857:                 move.l d0,(a0)
01:00002CDA B310            	  4858:                 eor.b d1,(a0)
01:00002CDC 40C3            	  4859:                 move SR,d3
01:00002CDE 02830000000C    	  4860:                 andi.l #$0C,d3            * Isolate flags
01:00002CE4 DA83            	  4861:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CE6 D890            	  4862:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4863: 
                            	  4864: *     WORD
01:00002CE8 2080            	  4865:                 move.l d0,(a0)
01:00002CEA B350            	  4866:                 eor.w d1,(a0)
01:00002CEC 40C3            	  4867:                 move SR,d3
01:00002CEE 02830000000C    	  4868:                 andi.l #$0C,d3            * Isolate flags
01:00002CF4 DA83            	  4869:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CF6 D890            	  4870:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4871: 
                            	  4872: *     LONG
01:00002CF8 2080            	  4873:                 move.l d0,(a0)
01:00002CFA B390            	  4874:                 eor.l d1,(a0)
01:00002CFC 40C3            	  4875:                 move SR,d3
01:00002CFE 02830000000F    	  4876:                 andi.l #$0F,d3            * Isolate flags
01:00002D04 DA83            	  4877:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D06 D890            	  4878:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4879: 
                            	  4880: 
01:00002D08 E289            	  4881:                 lsr.l #$1,d1
01:00002D0A 51CEFFCC        	  4882:                 dbf d6,EOR_OUTER2
01:00002D0E E28A            	  4883:                 lsr.l #$1,d2
01:00002D10 223C8167E123    	  4884:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D16 7C1E            	  4885:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D18 51CFFFBE        	  4886:                 dbf d7,EOR_OUTER2
                            	  4887: 
01:00002D1C 0C8455C5EB70    	  4888:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002D22 66FE            	  4889:                 bne.s *
01:00002D24 0C8500004430    	  4890:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002D2A 66FE            	  4891:                 bne.s *
                            	  4892: 
                            	  4893: 
01:00002D2C 4E75            	  4894:                 rts
                            	  4895: 
                            	  4896: 
                            	  4897: *-----------------------------------------------------------
                            	  4898: *-----------------------------------------------------------
                            	  4899: * OPCODE : CMP
                            	  4900: *-----------------------------------------------------------
                            	  4901: *-----------------------------------------------------------
                            	  4902: 
                            	  4903: op_CMP:
                            	  4904: 
                            	  4905: 
                            	  4906: *  * <EA> to Register
                            	  4907: 
01:00002D2E 203CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002D34 223C8167E123    	  4909:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D3A 243CA5A5A5A5    	  4910:                 move.l #$a5a5a5a5,d2
01:00002D40 7600            	  4911:                 moveq  #$00000000,d3
01:00002D42 7800            	  4912:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D44 7A00            	  4913:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D46 7C1E            	  4914:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D48 7E1E            	  4915:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D4A 307C0100        	  4916:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4917: 
                            	  4918: 
                            	  4919: CMP_OUTER1:
                            	  4920: 
                            	  4921: *     BYTE
01:00002D4E 2081            	  4922:                 move.l d1,(a0)
01:00002D50 B010            	  4923:                 cmp.b (a0),d0
01:00002D52 40C3            	  4924:                 move SR,d3
01:00002D54 02830000000F    	  4925:                 andi.l #$0F,d3            * Isolate flags
01:00002D5A DA83            	  4926:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D5C D880            	  4927:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4928: 
                            	  4929: *     WORD
01:00002D5E 2081            	  4930:                 move.l d1,(a0)
01:00002D60 B050            	  4931:                 cmp.w (a0),d0
01:00002D62 40C3            	  4932:                 move SR,d3
01:00002D64 02830000000F    	  4933:                 andi.l #$0F,d3            * Isolate flags
01:00002D6A DA83            	  4934:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D6C D880            	  4935:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4936: 
                            	  4937: *     LONG
01:00002D6E 2081            	  4938:                 move.l d1,(a0)
01:00002D70 B090            	  4939:                 cmp.l (a0),d0
01:00002D72 40C3            	  4940:                 move SR,d3
01:00002D74 02830000000F    	  4941:                 andi.l #$0F,d3            * Isolate flags
01:00002D7A DA83            	  4942:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D7C D880            	  4943:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4944: 
                            	  4945: 
01:00002D7E E289            	  4946:                 lsr.l #$1,d1
01:00002D80 51CEFFCC        	  4947:                 dbf d6,CMP_OUTER1
01:00002D84 E28A            	  4948:                 lsr.l #$1,d2
01:00002D86 223C8167E123    	  4949:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D8C 7C1E            	  4950:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D8E 51CFFFBE        	  4951:                 dbf d7,CMP_OUTER1
                            	  4952: 
01:00002D92 0C847878712F    	  4953:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002D98 66FE            	  4954:                 bne.s *
01:00002D9A 0C8500005502    	  4955:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002DA0 66FE            	  4956:                 bne.s *
                            	  4957: 
                            	  4958: 
                            	  4959: 
01:00002DA2 4E75            	  4960:                 rts
                            	  4961: 
                            	  4962: 
                            	  4963: *-----------------------------------------------------------
                            	  4964: *-----------------------------------------------------------
                            	  4965: * OPCODE : CMPA
                            	  4966: *-----------------------------------------------------------
                            	  4967: *-----------------------------------------------------------
                            	  4968: 
                            	  4969: op_CMPA:
                            	  4970: 
                            	  4971: 
                            	  4972: *  * <EA> to Register
                            	  4973: 
01:00002DA4 207CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002DAA 223C8167E123    	  4975:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002DB0 243CA5A5A5A5    	  4976:                 move.l #$a5a5a5a5,d2
01:00002DB6 7600            	  4977:                 moveq  #$00000000,d3
01:00002DB8 7800            	  4978:                 moveq  #$00000000,d4       * Cumulative data results
01:00002DBA 7A00            	  4979:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002DBC 7C1E            	  4980:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DBE 7E1E            	  4981:                 move.l #$0000001E,d7       * Outer loop counter
01:00002DC0 327C0100        	  4982:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4983: 
                            	  4984: 
                            	  4985: CMPA_OUTER1:
                            	  4986: 
                            	  4987: 
                            	  4988: *     WORD
01:00002DC4 2281            	  4989:                 move.l d1,(a1)
01:00002DC6 B0D1            	  4990:                 cmpa.w (a1),a0
01:00002DC8 40C3            	  4991:                 move SR,d3
01:00002DCA 02830000000F    	  4992:                 andi.l #$0F,d3            * Isolate flags
01:00002DD0 DA83            	  4993:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DD2 D888            	  4994:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4995: 
                            	  4996: *     LONG
01:00002DD4 2281            	  4997:                 move.l d1,(a1)
01:00002DD6 B1D1            	  4998:                 cmpa.l (a1),a0
01:00002DD8 40C3            	  4999:                 move SR,d3
01:00002DDA 02830000000F    	  5000:                 andi.l #$0F,d3            * Isolate flags
01:00002DE0 DA83            	  5001:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DE2 D888            	  5002:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5003: 
                            	  5004: 
01:00002DE4 E289            	  5005:                 lsr.l #$1,d1
01:00002DE6 51CEFFDC        	  5006:                 dbf d6,CMPA_OUTER1
01:00002DEA E28A            	  5007:                 lsr.l #$1,d2
01:00002DEC 223C8167E123    	  5008:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002DF2 7C1E            	  5009:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DF4 51CFFFCE        	  5010:                 dbf d7,CMPA_OUTER1
                            	  5011: 
01:00002DF8 0C84A5A5A0CA    	  5012:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002DFE 66FE            	  5013:                 bne.s *
01:00002E00 0C8500003A7D    	  5014:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002E06 66FE            	  5015:                 bne.s *
                            	  5016: 
                            	  5017: 
01:00002E08 4E75            	  5018:                 rts
                            	  5019: 
                            	  5020: 
                            	  5021: 
                            	  5022: *-----------------------------------------------------------
                            	  5023: *-----------------------------------------------------------
                            	  5024: * OPCODE : CMPM
                            	  5025: *-----------------------------------------------------------
                            	  5026: *-----------------------------------------------------------
                            	  5027: 
                            	  5028: op_CMPM:
                            	  5029: 
01:00002E0A 307C0100        	  5030:                 move.l #$00000100,a0       * Address for Data-X
01:00002E0E 327C0200        	  5031:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E12 7000            	  5032:                 moveq  #$00000000,d0
01:00002E14 7200            	  5033:                 moveq  #$00000000,d1
01:00002E16 7400            	  5034:                 moveq  #$00000000,d2
                            	  5035: 
01:00002E18 20FC11FF5580    	  5036:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002E1E 20FC1111FFFF    	  5037:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002E24 20FC33333333    	  5038:                 move.l #$33333333,(a0)+   * Populate test data
01:00002E2A 20FC44444444    	  5039:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5040: 
01:00002E30 22FC80FF337F    	  5041:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002E36 22FCFFFF1111    	  5042:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002E3C 22FC33333333    	  5043:                 move.l #$33333333,(a1)+   * Populate test data
01:00002E42 22FC44444444    	  5044:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5045: 
01:00002E48 307C0100        	  5046:                 move.l #$00000100,a0       * Address for Data-X
01:00002E4C 327C0200        	  5047:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E50 7C0F            	  5048:                 move.l #$0000000F,d6       * Loop counter
                            	  5049: 
01:00002E52 B308            	  5050: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002E54 40C3            	  5051:                 move SR,d3
01:00002E56 02830000000F    	  5052:                 andi.l #$0F,d3            * Isolate flags
01:00002E5C D083            	  5053:                 add.l d3,d0               * Copy flag results into accumulator
01:00002E5E 51CEFFF2        	  5054:                 dbf d6,CMPM_LOOP1
                            	  5055: 
                            	  5056: 
01:00002E62 307C0100        	  5057:                 move.l #$00000100,a0       * Address for Data-X
01:00002E66 327C0200        	  5058:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E6A 7C07            	  5059:                 moveq  #$00000007,d6       * Loop counter
                            	  5060: 
01:00002E6C B348            	  5061: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002E6E 40C3            	  5062:                 move SR,d3
01:00002E70 02830000000F    	  5063:                 andi.l #$0F,d3            * Isolate flags
01:00002E76 D283            	  5064:                 add.l d3,d1               * Copy flag results into accumulator
01:00002E78 51CEFFF2        	  5065:                 dbf d6,CMPM_LOOP2
                            	  5066: 
                            	  5067: 
01:00002E7C 307C0100        	  5068:                 move.l #$00000100,a0       * Address for Data-X
01:00002E80 327C0200        	  5069:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E84 7C03            	  5070:                 moveq  #$00000003,d6       * Loop counter
                            	  5071: 
01:00002E86 B388            	  5072: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002E88 40C3            	  5073:                 move SR,d3
01:00002E8A 02830000000F    	  5074:                 andi.l #$0F,d3            * Isolate flags
01:00002E90 D483            	  5075:                 add.l d3,d2               * Copy flag results into accumulator
01:00002E92 51CEFFF2        	  5076:                 dbf d6,CMPM_LOOP3
                            	  5077: 
                            	  5078: 
01:00002E96 0C800000004C    	  5079:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002E9C 66FE            	  5080:                 bne.s *
01:00002E9E 0C8100000024    	  5081:                 cmpi.l #$00000024,d1
01:00002EA4 66FE            	  5082:                 bne.s *
01:00002EA6 0C8200000012    	  5083:                 cmpi.l #$00000012,d2
01:00002EAC 66FE            	  5084:                 bne.s *
                            	  5085: 
01:00002EAE 4E75            	  5086:                 rts
                            	  5087: 
                            	  5088: 
                            	  5089: *-----------------------------------------------------------
                            	  5090: *-----------------------------------------------------------
                            	  5091: * OPCODE : ADD
                            	  5092: *-----------------------------------------------------------
                            	  5093: *-----------------------------------------------------------
                            	  5094: 
                            	  5095: op_ADD:
                            	  5096: 
                            	  5097: 
                            	  5098: *  * <EA> to Register
01:00002EB0 203CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002EB6 223C8167E123    	  5100:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002EBC 243CA5A5A5A5    	  5101:                 move.l #$a5a5a5a5,d2
01:00002EC2 7600            	  5102:                 moveq  #$00000000,d3
01:00002EC4 7800            	  5103:                 moveq  #$00000000,d4       * Cumulative data results
01:00002EC6 7A00            	  5104:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002EC8 7C1E            	  5105:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ECA 7E1E            	  5106:                 move.l #$0000001E,d7       * Outer loop counter
01:00002ECC 307C0100        	  5107:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5108: 
                            	  5109: 
                            	  5110: ADD_OUTER1:
                            	  5111: 
                            	  5112: *     BYTE
01:00002ED0 2081            	  5113:                 move.l d1,(a0)
01:00002ED2 D010            	  5114:                 add.b (a0),d0
01:00002ED4 40C3            	  5115:                 move SR,d3
01:00002ED6 02830000001F    	  5116:                 andi.l #$1F,d3            * Isolate flags
01:00002EDC DA83            	  5117:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EDE D880            	  5118:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5119: 
                            	  5120: *     WORD
01:00002EE0 2081            	  5121:                 move.l d1,(a0)
01:00002EE2 D050            	  5122:                 add.w (a0),d0
01:00002EE4 40C3            	  5123:                 move SR,d3
01:00002EE6 02830000000C    	  5124:                 andi.l #$0C,d3            * Isolate flags
01:00002EEC DA83            	  5125:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EEE D880            	  5126:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5127: 
                            	  5128: *     LONG
01:00002EF0 2081            	  5129:                 move.l d1,(a0)
01:00002EF2 D090            	  5130:                 add.l (a0),d0
01:00002EF4 40C3            	  5131:                 move SR,d3
01:00002EF6 02830000000F    	  5132:                 andi.l #$0F,d3            * Isolate flags
01:00002EFC DA83            	  5133:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EFE D880            	  5134:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5135: 
                            	  5136: 
01:00002F00 E299            	  5137:                 ror.l #$1,d1
01:00002F02 51CEFFCC        	  5138:                 dbf d6,ADD_OUTER1
01:00002F06 E29A            	  5139:                 ror.l #$1,d2
01:00002F08 223C8167E123    	  5140:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F0E 7C1E            	  5141:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F10 51CFFFBE        	  5142:                 dbf d7,ADD_OUTER1
                            	  5143: 
01:00002F14 0C8423ED428F    	  5144:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002F1A 66FE            	  5145:                 bne.s *
01:00002F1C 0C8500004C96    	  5146:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002F22 66FE            	  5147:                 bne.s *
                            	  5148: 
                            	  5149: 
                            	  5150: *  * Register to <EA>
01:00002F24 203C86738374    	  5151:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002F2A 223CFC55F2FE    	  5152:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002F30 243C86738374    	  5153:                 move.l #$86738374,d2
01:00002F36 7600            	  5154:                 moveq  #$00000000,d3
01:00002F38 7800            	  5155:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F3A 7A00            	  5156:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F3C 7C1E            	  5157:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F3E 7E1D            	  5158:                 move.l #$0000001D,d7       * Outer loop counter
01:00002F40 307C0100        	  5159:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5160: 
                            	  5161: 
                            	  5162: ADD_OUTER2:
                            	  5163: 
                            	  5164: *     BYTE
01:00002F44 2080            	  5165:                 move.l d0,(a0)
01:00002F46 D310            	  5166:                 add.b d1,(a0)
01:00002F48 40C3            	  5167:                 move SR,d3
01:00002F4A 02830000000C    	  5168:                 andi.l #$0C,d3            * Isolate flags
01:00002F50 DA83            	  5169:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F52 D890            	  5170:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5171: 
                            	  5172: *     WORD
01:00002F54 2080            	  5173:                 move.l d0,(a0)
01:00002F56 D350            	  5174:                 add.w d1,(a0)
01:00002F58 40C3            	  5175:                 move SR,d3
01:00002F5A 02830000001F    	  5176:                 andi.l #$1F,d3            * Isolate flags
01:00002F60 DA83            	  5177:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F62 D890            	  5178:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5179: 
                            	  5180: *     LONG
01:00002F64 2080            	  5181:                 move.l d0,(a0)
01:00002F66 D390            	  5182:                 add.l d1,(a0)
01:00002F68 40C3            	  5183:                 move SR,d3
01:00002F6A 02830000000F    	  5184:                 andi.l #$0F,d3            * Isolate flags
01:00002F70 DA83            	  5185:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F72 D890            	  5186:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5187: 
                            	  5188: 
01:00002F74 E299            	  5189:                 ror.l #$1,d1
01:00002F76 51CEFFCC        	  5190:                 dbf d6,ADD_OUTER2
01:00002F7A E29A            	  5191:                 ror.l #$1,d2
01:00002F7C 223C8167E123    	  5192:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F82 7C1E            	  5193:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F84 51CFFFBE        	  5194:                 dbf d7,ADD_OUTER2
                            	  5195: 
01:00002F88 0C846701B884    	  5196:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002F8E 66FE            	  5197:                 bne.s *
01:00002F90 0C8500005467    	  5198:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002F96 66FE            	  5199:                 bne.s *
                            	  5200: 
01:00002F98 4E75            	  5201:                 rts
                            	  5202: 
                            	  5203: *-----------------------------------------------------------
                            	  5204: *-----------------------------------------------------------
                            	  5205: * OPCODE : SUB
                            	  5206: *-----------------------------------------------------------
                            	  5207: *-----------------------------------------------------------
                            	  5208: 
                            	  5209: op_SUB:
                            	  5210: 
                            	  5211: *  * <EA> to Register
01:00002F9A 203CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002FA0 223C8167E123    	  5213:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002FA6 243CA5A5A5A5    	  5214:                 move.l #$a5a5a5a5,d2
01:00002FAC 7600            	  5215:                 moveq  #$00000000,d3
01:00002FAE 7800            	  5216:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FB0 7A00            	  5217:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FB2 7C1E            	  5218:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FB4 7E1E            	  5219:                 move.l #$0000001E,d7       * Outer loop counter
01:00002FB6 307C0100        	  5220:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5221: 
                            	  5222: 
                            	  5223: SUB_OUTER1:
                            	  5224: 
                            	  5225: *     BYTE
01:00002FBA 2081            	  5226:                 move.l d1,(a0)
01:00002FBC 9010            	  5227:                 sub.b (a0),d0
01:00002FBE 40C3            	  5228:                 move SR,d3
01:00002FC0 02830000001F    	  5229:                 andi.l #$1F,d3            * Isolate flags
01:00002FC6 DA83            	  5230:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FC8 D880            	  5231:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5232: 
                            	  5233: *     WORD
01:00002FCA 2081            	  5234:                 move.l d1,(a0)
01:00002FCC 9050            	  5235:                 sub.w (a0),d0
01:00002FCE 40C3            	  5236:                 move SR,d3
01:00002FD0 02830000000C    	  5237:                 andi.l #$0C,d3            * Isolate flags
01:00002FD6 DA83            	  5238:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FD8 D880            	  5239:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5240: 
                            	  5241: *     LONG
01:00002FDA 2081            	  5242:                 move.l d1,(a0)
01:00002FDC 9090            	  5243:                 sub.l (a0),d0
01:00002FDE 40C3            	  5244:                 move SR,d3
01:00002FE0 02830000000F    	  5245:                 andi.l #$0F,d3            * Isolate flags
01:00002FE6 DA83            	  5246:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FE8 D880            	  5247:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5248: 
                            	  5249: 
01:00002FEA E299            	  5250:                 ror.l #$1,d1
01:00002FEC 51CEFFCC        	  5251:                 dbf d6,SUB_OUTER1
01:00002FF0 E29A            	  5252:                 ror.l #$1,d2
01:00002FF2 223C8167E123    	  5253:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FF8 7C1E            	  5254:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FFA 51CFFFBE        	  5255:                 dbf d7,SUB_OUTER1
                            	  5256: 
01:00002FFE 0C841A8D14CF    	  5257:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00003004 66FE            	  5258:                 bne.s *
01:00003006 0C8500004FC4    	  5259:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:0000300C 66FE            	  5260:                 bne.s *
                            	  5261: 
                            	  5262: 
                            	  5263: *  * Register to <EA>
01:0000300E 203C86738374    	  5264:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00003014 223CFC55F2FE    	  5265:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:0000301A 243C86738374    	  5266:                 move.l #$86738374,d2
01:00003020 7600            	  5267:                 moveq  #$00000000,d3
01:00003022 7800            	  5268:                 moveq  #$00000000,d4       * Cumulative data results
01:00003024 7A00            	  5269:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003026 7C1E            	  5270:                 move.l #$0000001E,d6       * Inner loop counter
01:00003028 7E1D            	  5271:                 move.l #$0000001D,d7       * Outer loop counter
01:0000302A 307C0100        	  5272:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5273: 
                            	  5274: 
                            	  5275: SUB_OUTER2:
                            	  5276: 
                            	  5277: *     BYTE
01:0000302E 2080            	  5278:                 move.l d0,(a0)
01:00003030 9310            	  5279:                 sub.b d1,(a0)
01:00003032 40C3            	  5280:                 move SR,d3
01:00003034 02830000000C    	  5281:                 andi.l #$0C,d3            * Isolate flags
01:0000303A DA83            	  5282:                 add.l d3,d5               * Copy flag results into accumulator
01:0000303C D890            	  5283:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5284: 
                            	  5285: *     WORD
01:0000303E 2080            	  5286:                 move.l d0,(a0)
01:00003040 9350            	  5287:                 sub.w d1,(a0)
01:00003042 40C3            	  5288:                 move SR,d3
01:00003044 02830000001F    	  5289:                 andi.l #$1F,d3            * Isolate flags
01:0000304A DA83            	  5290:                 add.l d3,d5               * Copy flag results into accumulator
01:0000304C D890            	  5291:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5292: 
                            	  5293: *     LONG
01:0000304E 2080            	  5294:                 move.l d0,(a0)
01:00003050 9390            	  5295:                 sub.l d1,(a0)
01:00003052 40C3            	  5296:                 move SR,d3
01:00003054 02830000000F    	  5297:                 andi.l #$0F,d3            * Isolate flags
01:0000305A DA83            	  5298:                 add.l d3,d5               * Copy flag results into accumulator
01:0000305C D890            	  5299:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5300: 
                            	  5301: 
01:0000305E E299            	  5302:                 ror.l #$1,d1
01:00003060 51CEFFCC        	  5303:                 dbf d6,SUB_OUTER2
01:00003064 E29A            	  5304:                 ror.l #$1,d2
01:00003066 223C8167E123    	  5305:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000306C 7C1E            	  5306:                 move.l #$0000001E,d6       * Inner loop counter
01:0000306E 51CFFFBE        	  5307:                 dbf d7,SUB_OUTER2
                            	  5308: 
01:00003072 0C8436D38BEC    	  5309:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:00003078 66FE            	  5310:                 bne.s *
01:0000307A 0C85000045A5    	  5311:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00003080 66FE            	  5312:                 bne.s *
                            	  5313: 
                            	  5314: 
                            	  5315: 
                            	  5316: 
01:00003082 4E75            	  5317:                 rts
                            	  5318: 
                            	  5319: 
                            	  5320: 
                            	  5321: *-----------------------------------------------------------
                            	  5322: *-----------------------------------------------------------
                            	  5323: * OPCODE : ADDA
                            	  5324: *-----------------------------------------------------------
                            	  5325: *-----------------------------------------------------------
                            	  5326: 
                            	  5327: op_ADDA:
                            	  5328: 
                            	  5329: *  * <EA> to Register
01:00003084 203CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000308A 223C8167E123    	  5331:                 move.l #$8167E123,d1
01:00003090 243CA5A5A5A5    	  5332:                 move.l #$a5a5a5a5,d2
01:00003096 7600            	  5333:                 moveq  #$00000000,d3
01:00003098 7800            	  5334:                 moveq  #$00000000,d4       * Cumulative data results
01:0000309A 7A00            	  5335:                 moveq  #$00000000,d5       * Cumulative flag results
01:0000309C 7C1E            	  5336:                 move.l #$0000001E,d6       * Inner loop counter
01:0000309E 7E1E            	  5337:                 move.l #$0000001E,d7       * Outer loop counter
01:000030A0 307C0100        	  5338:                 move.l #$00000100,a0       * Address for memory EA operations
01:000030A4 227C8167E123    	  5339:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5340: 
                            	  5341: ADDA_OUTER1:
                            	  5342: 
                            	  5343: *     WORD
                            	  5344: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5345: *                adda.w (a0),a1
                            	  5346: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5347: 
                            	  5348: *     LONG
01:000030AA 2081            	  5349:                 move.l d1,(a0)
01:000030AC D3D0            	  5350:                 adda.l (a0),a1
01:000030AE D889            	  5351:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5352: 
01:000030B0 E299            	  5353:                 ror.l #$1,d1
01:000030B2 51CEFFF6        	  5354:                 dbf d6,ADDA_OUTER1
01:000030B6 E299            	  5355:                 ror.l #$1,d1
01:000030B8 2241            	  5356:                 move.l d1,a1
01:000030BA 223C8167E123    	  5357:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030C0 7C1E            	  5358:                 move.l #$0000001E,d6       * Inner loop counter
01:000030C2 51CFFFE6        	  5359:                 dbf d7,ADDA_OUTER1
                            	  5360: 
01:000030C6 0C84AC04DB4C    	  5361:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:000030CC 66FE            	  5362:                 bne.s *
                            	  5363: 
                            	  5364: 
01:000030CE 4E75            	  5365:                 rts
                            	  5366: 
                            	  5367: 
                            	  5368: *-----------------------------------------------------------
                            	  5369: *-----------------------------------------------------------
                            	  5370: * OPCODE : SUBA
                            	  5371: *-----------------------------------------------------------
                            	  5372: *-----------------------------------------------------------
                            	  5373: 
                            	  5374: op_SUBA:
                            	  5375: 
                            	  5376: *  * <EA> to Register
01:000030D0 203CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000030D6 223C8167E123    	  5378:                 move.l #$8167E123,d1
01:000030DC 243CA5A5A5A5    	  5379:                 move.l #$a5a5a5a5,d2
01:000030E2 7600            	  5380:                 moveq  #$00000000,d3
01:000030E4 7800            	  5381:                 moveq  #$00000000,d4       * Cumulative data results
01:000030E6 7A00            	  5382:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030E8 7C1E            	  5383:                 move.l #$0000001E,d6       * Inner loop counter
01:000030EA 7E1E            	  5384:                 move.l #$0000001E,d7       * Outer loop counter
01:000030EC 307C0100        	  5385:                 move.l #$00000100,a0       * Address for memory EA operations
01:000030F0 227C8167E123    	  5386:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5387: 
                            	  5388: SUBA_OUTER1:
                            	  5389: 
                            	  5390: *     WORD
                            	  5391: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5392: *                suba.w (a0),a1
                            	  5393: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5394: 
                            	  5395: *     LONG
01:000030F6 2081            	  5396:                 move.l d1,(a0)
01:000030F8 93D0            	  5397:                 suba.l (a0),a1
01:000030FA D889            	  5398:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5399: 
01:000030FC E299            	  5400:                 ror.l #$1,d1
01:000030FE 51CEFFF6        	  5401:                 dbf d6,SUBA_OUTER1
01:00003102 E299            	  5402:                 ror.l #$1,d1
01:00003104 2241            	  5403:                 move.l d1,a1
01:00003106 223C8167E123    	  5404:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000310C 7C1E            	  5405:                 move.l #$0000001E,d6       * Inner loop counter
01:0000310E 51CFFFE6        	  5406:                 dbf d7,SUBA_OUTER1
                            	  5407: 
01:00003112 0C84E1E36D7A    	  5408:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:00003118 66FE            	  5409:                 bne.s *
                            	  5410: 
                            	  5411: 
01:0000311A 4E75            	  5412:                 rts
                            	  5413: 
                            	  5414: 
                            	  5415: 
                            	  5416: *-----------------------------------------------------------
                            	  5417: *-----------------------------------------------------------
                            	  5418: * OPCODE : ADDX
                            	  5419: *-----------------------------------------------------------
                            	  5420: *-----------------------------------------------------------
                            	  5421: 
                            	  5422: op_ADDX:
                            	  5423: 
                            	  5424: 
                            	  5425: *  * Register to Register
01:0000311C 203CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003122 223C8167E123    	  5427:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00003128 243CA5A5A5A5    	  5428:                 move.l #$a5a5a5a5,d2
01:0000312E 7600            	  5429:                 moveq  #$00000000,d3
01:00003130 7800            	  5430:                 moveq  #$00000000,d4       * Cumulative data results
01:00003132 7A00            	  5431:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003134 7C1E            	  5432:                 move.l #$0000001E,d6       * Inner loop counter
01:00003136 7E1E            	  5433:                 move.l #$0000001E,d7       * Outer loop counter
01:00003138 307C0100        	  5434:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5435: 
                            	  5436: 
                            	  5437: ADDX_OUTER1:
                            	  5438: 
                            	  5439: *     BYTE
01:0000313C 2002            	  5440:                 move.l d2,d0
01:0000313E D101            	  5441:                 addx.b d1,d0
01:00003140 40C3            	  5442:                 move SR,d3
01:00003142 02830000001F    	  5443:                 andi.l #$1F,d3            * Isolate flags
01:00003148 DA83            	  5444:                 add.l d3,d5               * Copy flag results into accumulator
01:0000314A D880            	  5445:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5446: 
                            	  5447: *     WORD
01:0000314C 2002            	  5448:                 move.l d2,d0
01:0000314E D141            	  5449:                 addx.w d1,d0
01:00003150 40C3            	  5450:                 move SR,d3
01:00003152 02830000001F    	  5451:                 andi.l #$1F,d3            * Isolate flags
01:00003158 DA83            	  5452:                 add.l d3,d5               * Copy flag results into accumulator
01:0000315A D880            	  5453:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5454: 
                            	  5455: *     LONG
01:0000315C 2002            	  5456:                 move.l d2,d0
01:0000315E D181            	  5457:                 addx.l d1,d0
01:00003160 40C3            	  5458:                 move SR,d3
01:00003162 02830000001F    	  5459:                 andi.l #$1F,d3            * Isolate flags
01:00003168 DA83            	  5460:                 add.l d3,d5               * Copy flag results into accumulator
01:0000316A D880            	  5461:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5462: 
01:0000316C E299            	  5463:                 ror.l #$1,d1
01:0000316E 51CEFFCC        	  5464:                 dbf d6,ADDX_OUTER1
01:00003172 E29A            	  5465:                 ror.l #$1,d2
01:00003174 223C8167E123    	  5466:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000317A 7C1E            	  5467:                 move.l #$0000001E,d6       * Inner loop counter
01:0000317C 51CFFFBE        	  5468:                 dbf d7,ADDX_OUTER1
                            	  5469: 
01:00003180 0C844E96A4D9    	  5470:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:00003186 66FE            	  5471:                 bne.s *
01:00003188 0C85000085CD    	  5472:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:0000318E 66FE            	  5473:                 bne.s *
                            	  5474: 
                            	  5475: 
                            	  5476: 
                            	  5477: *     -(An),-(An)
                            	  5478: 
01:00003190 7000            	  5479:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003192 7200            	  5480:                 moveq  #$00000000,d1
01:00003194 7400            	  5481:                 moveq  #$00000000,d2
01:00003196 307C0100        	  5482:                 move.l #$00000100,a0       * Address for Data-X
01:0000319A 327C0200        	  5483:                 move.l #$00000200,a1       * Address for Data-Y
01:0000319E 20FC11FF5580    	  5484:                 move.l #$11FF5580,(a0)+   * Populate test data
01:000031A4 20FC1111FFFF    	  5485:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:000031AA 20FC33333333    	  5486:                 move.l #$33333333,(a0)+   * Populate test data
01:000031B0 20FC44444444    	  5487:                 move.l #$44444444,(a0)+   * Populate test data
01:000031B6 22FC80FF337F    	  5488:                 move.l #$80FF337F,(a1)+   * Populate test data
01:000031BC 22FCFFFF1111    	  5489:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:000031C2 22FC33333333    	  5490:                 move.l #$33333333,(a1)+   * Populate test data
01:000031C8 22FC44444444    	  5491:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5492: 
                            	  5493: 
01:000031CE 7C0F            	  5494:                 move.l #$0000000F,d6       * Loop counter
                            	  5495: 
01:000031D0 D308            	  5496: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:000031D2 40C3            	  5497:                 move SR,d3
01:000031D4 02830000000F    	  5498:                 andi.l #$0F,d3            * Isolate flags
01:000031DA D083            	  5499:                 add.l d3,d0               * Copy flag results into accumulator
01:000031DC D211            	  5500:                 add.b (a1),d1
01:000031DE 51CEFFF0        	  5501:                 dbf d6,ADDX_LOOP3
                            	  5502: 
                            	  5503: 
01:000031E2 307C0110        	  5504:                 move.l #$00000110,a0       * Address for Data-X
01:000031E6 327C0210        	  5505:                 move.l #$00000210,a1       * Address for Data-Y
01:000031EA 7C07            	  5506:                 moveq  #$00000007,d6       * Loop counter
                            	  5507: 
01:000031EC D348            	  5508: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:000031EE 40C3            	  5509:                 move SR,d3
01:000031F0 02830000000F    	  5510:                 andi.l #$0F,d3            * Isolate flags
01:000031F6 D083            	  5511:                 add.l d3,d0               * Copy flag results into accumulator
01:000031F8 D251            	  5512:                 add.w (a1),d1
01:000031FA 51CEFFF0        	  5513:                 dbf d6,ADDX_LOOP4
                            	  5514: 
                            	  5515: 
01:000031FE 307C0110        	  5516:                 move.l #$00000110,a0       * Address for Data-X
01:00003202 327C0210        	  5517:                 move.l #$00000210,a1       * Address for Data-Y
01:00003206 7C03            	  5518:                 moveq  #$00000003,d6       * Loop counter
                            	  5519: 
01:00003208 D388            	  5520: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:0000320A 40C3            	  5521:                 move SR,d3
01:0000320C 02830000000F    	  5522:                 andi.l #$0F,d3            * Isolate flags
01:00003212 D083            	  5523:                 add.l d3,d0               * Copy flag results into accumulator
01:00003214 D291            	  5524:                 add.l (a1),d1
01:00003216 51CEFFF0        	  5525:                 dbf d6,ADDX_LOOP5
                            	  5526: 
                            	  5527: 
01:0000321A 0C8000000095    	  5528:                 cmpi.l #$00000095,d0      * Check the flag results
01:00003220 66FE            	  5529:                 bne.s *
01:00003222 0C81C812A682    	  5530:                 cmpi.l #$C812A682,d1      * Check the data results
01:00003228 66FE            	  5531:                 bne.s *
                            	  5532: 
01:0000322A 4E75            	  5533:                 rts
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: 
                            	  5538: *-----------------------------------------------------------
                            	  5539: *-----------------------------------------------------------
                            	  5540: * OPCODE : SUBX
                            	  5541: *-----------------------------------------------------------
                            	  5542: *-----------------------------------------------------------
                            	  5543: 
                            	  5544: op_SUBX:
                            	  5545: 
                            	  5546: 
                            	  5547: *  * Register to Register
01:0000322C 203CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003232 223C8167E123    	  5549:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00003238 243CA5A5A5A5    	  5550:                 move.l #$a5a5a5a5,d2
01:0000323E 7600            	  5551:                 moveq  #$00000000,d3
01:00003240 7800            	  5552:                 moveq  #$00000000,d4       * Cumulative data results
01:00003242 7A00            	  5553:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003244 7C1E            	  5554:                 move.l #$0000001E,d6       * Inner loop counter
01:00003246 7E1E            	  5555:                 move.l #$0000001E,d7       * Outer loop counter
01:00003248 307C0100        	  5556:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5557: 
                            	  5558: 
                            	  5559: SUBX_OUTER1:
                            	  5560: 
                            	  5561: *     BYTE
01:0000324C 2002            	  5562:                 move.l d2,d0
01:0000324E 9101            	  5563:                 subx.b d1,d0
01:00003250 40C3            	  5564:                 move SR,d3
01:00003252 02830000001F    	  5565:                 andi.l #$1F,d3            * Isolate flags
01:00003258 DA83            	  5566:                 add.l d3,d5               * Copy flag results into accumulator
01:0000325A D880            	  5567:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5568: 
                            	  5569: *     WORD
01:0000325C 2002            	  5570:                 move.l d2,d0
01:0000325E 9141            	  5571:                 subx.w d1,d0
01:00003260 40C3            	  5572:                 move SR,d3
01:00003262 02830000001F    	  5573:                 andi.l #$1F,d3            * Isolate flags
01:00003268 DA83            	  5574:                 add.l d3,d5               * Copy flag results into accumulator
01:0000326A D880            	  5575:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5576: 
                            	  5577: *     LONG
01:0000326C 2002            	  5578:                 move.l d2,d0
01:0000326E 9181            	  5579:                 subx.l d1,d0
01:00003270 40C3            	  5580:                 move SR,d3
01:00003272 02830000001F    	  5581:                 andi.l #$1F,d3            * Isolate flags
01:00003278 DA83            	  5582:                 add.l d3,d5               * Copy flag results into accumulator
01:0000327A D880            	  5583:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5584: 
01:0000327C E299            	  5585:                 ror.l #$1,d1
01:0000327E 51CEFFCC        	  5586:                 dbf d6,SUBX_OUTER1
01:00003282 E29A            	  5587:                 ror.l #$1,d2
01:00003284 223C8167E123    	  5588:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000328A 7C1E            	  5589:                 move.l #$0000001E,d6       * Inner loop counter
01:0000328C 51CFFFBE        	  5590:                 dbf d7,SUBX_OUTER1
                            	  5591: 
01:00003290 0C84FCAA913E    	  5592:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:00003296 66FE            	  5593:                 bne.s *
01:00003298 0C8500007E89    	  5594:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:0000329E 66FE            	  5595:                 bne.s *
                            	  5596: 
                            	  5597: 
                            	  5598: 
                            	  5599: *     -(An),-(An)
                            	  5600: 
01:000032A0 7000            	  5601:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:000032A2 7200            	  5602:                 moveq  #$00000000,d1
01:000032A4 7400            	  5603:                 moveq  #$00000000,d2
01:000032A6 307C0100        	  5604:                 move.l #$00000100,a0       * Address for Data-X
01:000032AA 327C0200        	  5605:                 move.l #$00000200,a1       * Address for Data-Y
01:000032AE 20FC11FF5580    	  5606:                 move.l #$11FF5580,(a0)+   * Populate test data
01:000032B4 20FC1111FFFF    	  5607:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:000032BA 20FC80FF337F    	  5608:                 move.l #$80FF337F,(a0)+   * Populate test data
01:000032C0 20FC44444444    	  5609:                 move.l #$44444444,(a0)+   * Populate test data
01:000032C6 22FC80FF337F    	  5610:                 move.l #$80FF337F,(a1)+   * Populate test data
01:000032CC 22FC1111FFFF    	  5611:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:000032D2 22FC33333333    	  5612:                 move.l #$33333333,(a1)+   * Populate test data
01:000032D8 22FC5580EECC    	  5613:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5614: 
                            	  5615: 
01:000032DE 7C0F            	  5616:                 move.l #$0000000F,d6       * Loop counter
                            	  5617: 
01:000032E0 9308            	  5618: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:000032E2 40C3            	  5619:                 move SR,d3
01:000032E4 02830000000F    	  5620:                 andi.l #$0F,d3            * Isolate flags
01:000032EA D083            	  5621:                 add.l d3,d0               * Copy flag results into accumulator
01:000032EC D211            	  5622:                 add.b (a1),d1
01:000032EE 51CEFFF0        	  5623:                 dbf d6,SUBX_LOOP3
                            	  5624: 
                            	  5625: 
01:000032F2 307C0110        	  5626:                 move.l #$00000110,a0       * Address for Data-X
01:000032F6 327C0210        	  5627:                 move.l #$00000210,a1       * Address for Data-Y
01:000032FA 7C07            	  5628:                 moveq  #$00000007,d6       * Loop counter
                            	  5629: 
01:000032FC 9348            	  5630: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:000032FE 40C3            	  5631:                 move SR,d3
01:00003300 02830000000F    	  5632:                 andi.l #$0F,d3            * Isolate flags
01:00003306 D083            	  5633:                 add.l d3,d0               * Copy flag results into accumulator
01:00003308 D251            	  5634:                 add.w (a1),d1
01:0000330A 51CEFFF0        	  5635:                 dbf d6,SUBX_LOOP4
                            	  5636: 
                            	  5637: 
01:0000330E 307C0110        	  5638:                 move.l #$00000110,a0       * Address for Data-X
01:00003312 327C0210        	  5639:                 move.l #$00000210,a1       * Address for Data-Y
01:00003316 7C03            	  5640:                 moveq  #$00000003,d6       * Loop counter
                            	  5641: 
01:00003318 9388            	  5642: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:0000331A 40C3            	  5643:                 move SR,d3
01:0000331C 02830000000F    	  5644:                 andi.l #$0F,d3            * Isolate flags
01:00003322 D083            	  5645:                 add.l d3,d0               * Copy flag results into accumulator
01:00003324 D291            	  5646:                 add.l (a1),d1
01:00003326 51CEFFF0        	  5647:                 dbf d6,SUBX_LOOP5
                            	  5648: 
                            	  5649: 
01:0000332A 0C80000000B1    	  5650:                 cmpi.l #$000000B1,d0      * Check the flag results
01:00003330 66FE            	  5651:                 bne.s *
01:00003332 0C8162C6F417    	  5652:                 cmpi.l #$62C6F417,d1      * Check the data results
01:00003338 66FE            	  5653:                 bne.s *
                            	  5654: 
01:0000333A 4E75            	  5655:                 rts
                            	  5656: 
                            	  5657: 
                            	  5658: *-----------------------------------------------------------
                            	  5659: *-----------------------------------------------------------
                            	  5660: * OPCODE : MULU
                            	  5661: *-----------------------------------------------------------
                            	  5662: *-----------------------------------------------------------
                            	  5663: 
                            	  5664: op_MULU:
                            	  5665: 
01:0000333C 203CFE805501    	  5666:                 move.l #$FE805501,d0        * Initial
01:00003342 223C5697EDB6    	  5667:                 move.l #$5697EDB6,d1        * Initial Y
01:00003348 243CFE805501    	  5668:                 move.l #$FE805501,d2
01:0000334E 7600            	  5669:                 moveq  #$00000000,d3
01:00003350 7800            	  5670:                 moveq  #$00000000,d4        * Cumulative data results
01:00003352 7A00            	  5671:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003354 7C0E            	  5672:                 move.l #$0000000E,d6       * Inner loop counter
01:00003356 7E0E            	  5673:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5674: 
                            	  5675: 
01:00003358 C0C1            	  5676: MULU_OUTER1:    mulu d1,d0
01:0000335A 40C3            	  5677:                 move SR,d3
01:0000335C 02830000000C    	  5678:                 andi.l #$0C,d3            * Isolate flags
01:00003362 DA83            	  5679:                 add.l d3,d5               * Copy flag results into accumulator
01:00003364 D880            	  5680:                 add.l d0,d4               * Copy data results into data accumulator
01:00003366 E299            	  5681:                 ror.l #$1,d1
                            	  5682: 
01:00003368 51CEFFEE        	  5683:                 dbf d6,MULU_OUTER1
01:0000336C E29A            	  5684:                 ror.l #$1,d2
01:0000336E 2002            	  5685:                 move.l d2,d0
01:00003370 7C0E            	  5686:                 move.l #$0000000E,d6       * Inner loop counter
01:00003372 51CFFFE4        	  5687:                 dbf d7,MULU_OUTER1
                            	  5688: 
01:00003376 0C8476FB988C    	  5689:                 cmpi.l #$76FB988C,d4      * Check the data results
01:0000337C 66FE            	  5690:                 bne.s *
                            	  5691: 
01:0000337E 0C8500000170    	  5692:                 cmpi.l #$00000170,d5      * Check the Flag results
01:00003384 66FE            	  5693:                 bne.s *
                            	  5694: 
                            	  5695: 
01:00003386 4E75            	  5696:                 rts
                            	  5697: 
                            	  5698: 
                            	  5699: *-----------------------------------------------------------
                            	  5700: *-----------------------------------------------------------
                            	  5701: * OPCODE : MULS
                            	  5702: *-----------------------------------------------------------
                            	  5703: *-----------------------------------------------------------
                            	  5704: 
                            	  5705: op_MULS:
                            	  5706: 
01:00003388 203CFE805501    	  5707:                 move.l #$FE805501,d0        * Initial
01:0000338E 223C5697EDB6    	  5708:                 move.l #$5697EDB6,d1        * Initial Y
01:00003394 243CFE805501    	  5709:                 move.l #$FE805501,d2
01:0000339A 7600            	  5710:                 moveq  #$00000000,d3
01:0000339C 7800            	  5711:                 moveq  #$00000000,d4        * Cumulative data results
01:0000339E 7A00            	  5712:                 moveq  #$00000000,d5       * Cumulative flag results
01:000033A0 7C0E            	  5713:                 move.l #$0000000E,d6       * Inner loop counter
01:000033A2 7E0E            	  5714:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5715: 
                            	  5716: 
01:000033A4 C1C1            	  5717: MULS_OUTER1:    muls d1,d0
01:000033A6 40C3            	  5718:                 move SR,d3
01:000033A8 02830000000C    	  5719:                 andi.l #$0C,d3            * Isolate flags
01:000033AE DA83            	  5720:                 add.l d3,d5               * Copy flag results into accumulator
01:000033B0 D880            	  5721:                 add.l d0,d4               * Copy data results into data accumulator
01:000033B2 E299            	  5722:                 ror.l #$1,d1
                            	  5723: 
01:000033B4 51CEFFEE        	  5724:                 dbf d6,MULS_OUTER1
01:000033B8 E29A            	  5725:                 ror.l #$1,d2
01:000033BA 2002            	  5726:                 move.l d2,d0
01:000033BC 7C0E            	  5727:                 move.l #$0000000E,d6       * Inner loop counter
01:000033BE 51CFFFE4        	  5728:                 dbf d7,MULS_OUTER1
                            	  5729: 
01:000033C2 0C84D4E2988C    	  5730:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:000033C8 66FE            	  5731:                 bne.s *
                            	  5732: 
01:000033CA 0C85000003E0    	  5733:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:000033D0 66FE            	  5734:                 bne.s *
                            	  5735: 
                            	  5736: 
01:000033D2 4E75            	  5737:                 rts
                            	  5738: 
                            	  5739: 
                            	  5740: 
                            	  5741: *-----------------------------------------------------------
                            	  5742: *-----------------------------------------------------------
                            	  5743: * OPCODE : EXG
                            	  5744: *-----------------------------------------------------------
                            	  5745: *-----------------------------------------------------------
                            	  5746: 
                            	  5747: op_EXG:
01:000033D4 223CD1D1D1D1    	  5748:                 move.l #$d1d1d1d1,d1
01:000033DA 243CD2D2D2D2    	  5749:                 move.l #$d2d2d2d2,d2
01:000033E0 263CD3D3D3D3    	  5750:                 move.l #$d3d3d3d3,d3
01:000033E6 227CA1A1A1A1    	  5751:                 move.l #$a1a1a1a1,a1
01:000033EC 247CA2A2A2A2    	  5752:                 move.l #$a2a2a2a2,a2
01:000033F2 267CA3A3A3A3    	  5753:                 move.l #$a3a3a3a3,a3
                            	  5754: 
01:000033F8 C342            	  5755:                 exg d1,d2
01:000033FA C34A            	  5756:                 exg a1,a2
01:000033FC C78B            	  5757:                 exg d3,a3
                            	  5758: 
01:000033FE 0C81D2D2D2D2    	  5759:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:00003404 66FE            	  5760:                 bne.s *
01:00003406 0C82D1D1D1D1    	  5761:                 cmpi.l #$d1d1d1d1,d2
01:0000340C 66FE            	  5762:                 bne.s *
01:0000340E 0C83A3A3A3A3    	  5763:                 cmpi.l #$a3a3a3a3,d3
01:00003414 66FE            	  5764:                 bne.s *
                            	  5765: 
01:00003416 2209            	  5766:                 move.l a1,d1
01:00003418 240A            	  5767:                 move.l a2,d2
01:0000341A 260B            	  5768:                 move.l a3,d3
                            	  5769: 
01:0000341C 0C81A2A2A2A2    	  5770:                 cmpi.l #$a2a2a2a2,d1
01:00003422 66FE            	  5771:                 bne.s *
01:00003424 0C82A1A1A1A1    	  5772:                 cmpi.l #$a1a1a1a1,d2
01:0000342A 66FE            	  5773:                 bne.s *
01:0000342C 0C83D3D3D3D3    	  5774:                 cmpi.l #$d3d3d3d3,d3
01:00003432 66FE            	  5775:                 bne.s *
                            	  5776: 
01:00003434 4E75            	  5777:                 rts
                            	  5778: 
                            	  5779: 
                            	  5780: *-----------------------------------------------------------
                            	  5781: *-----------------------------------------------------------
                            	  5782: * OPCODE : ROx
                            	  5783: *-----------------------------------------------------------
                            	  5784: *-----------------------------------------------------------
                            	  5785: 
                            	  5786: *     Subroutine to check and accumulate the flags
01:00003436 40C3            	  5787: ROx_FLAGS:      move SR,d3
01:00003438 02830000000F    	  5788:                 andi.l #$0F,d3            * Isolate flags
01:0000343E DA83            	  5789:                 add.l d3,d5               * Copy flag results into accumulator
01:00003440 4E75            	  5790:                 rts
                            	  5791: 
                            	  5792: op_ROx:
                            	  5793: 
                            	  5794: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5795: 
                            	  5796: *        BYTE LEFT
01:00003442 203C80018FF1    	  5797:                 move.l #$80018FF1,d0
01:00003448 7A00            	  5798:                 moveq  #$00000000,d5
01:0000344A 7C11            	  5799:                 moveq  #$00000011,d6
                            	  5800: ROx_LOOP1:
01:0000344C ED38            	  5801:                 rol.b d6,d0
01:0000344E 61E6            	  5802:                 bsr ROx_FLAGS
01:00003450 51CEFFFA        	  5803:                 dbf d6,ROx_LOOP1
01:00003454 0C8080018FE3    	  5804:                 cmpi.l #$80018FE3,d0
01:0000345A 66FE            	  5805:                 bne.s *
01:0000345C 0C850000006B    	  5806:                 cmpi.l #$0000006B,d5
01:00003462 66FE            	  5807:                 bne.s *
                            	  5808: 
                            	  5809: *        BYTE RIGHT
01:00003464 203C80018FF1    	  5810:                 move.l #$80018FF1,d0
01:0000346A 7C12            	  5811:                 moveq  #$00000012,d6
                            	  5812: ROx_LOOP2:
01:0000346C EC38            	  5813:                 ror.b d6,d0
01:0000346E 61C6            	  5814:                 bsr ROx_FLAGS
01:00003470 51CEFFFA        	  5815:                 dbf d6,ROx_LOOP2
01:00003474 0C8080018F3E    	  5816:                 cmpi.l #$80018F3E,d0
01:0000347A 66FE            	  5817:                 bne.s *
01:0000347C 0C85000000C5    	  5818:                 cmpi.l #$000000C5,d5
01:00003482 66FE            	  5819:                 bne.s *
                            	  5820: 
                            	  5821: 
                            	  5822: *        WORD LEFT
01:00003484 203C80018FF1    	  5823:                 move.l #$80018FF1,d0
01:0000348A 7C13            	  5824:                 moveq  #$00000013,d6
                            	  5825: ROx_LOOP3:
01:0000348C ED78            	  5826:                 rol.w d6,d0
01:0000348E 61A6            	  5827:                 bsr ROx_FLAGS
01:00003490 51CEFFFA        	  5828:                 dbf d6,ROx_LOOP3
01:00003494 0C80800163FC    	  5829:                 cmpi.l #$800163FC,d0
01:0000349A 66FE            	  5830:                 bne.s *
01:0000349C 0C8500000131    	  5831:                 cmpi.l #$00000131,d5
01:000034A2 66FE            	  5832:                 bne.s *
                            	  5833: 
                            	  5834: *        WORD RIGHT
01:000034A4 203C80018FF1    	  5835:                 move.l #$80018FF1,d0
01:000034AA 7C1E            	  5836:                 move.l #$0000001E,d6
                            	  5837: ROx_LOOP4:
01:000034AC EC78            	  5838:                 ror.w d6,d0
01:000034AE 6186            	  5839:                 bsr ROx_FLAGS
01:000034B0 51CEFFFA        	  5840:                 dbf d6,ROx_LOOP4
01:000034B4 0C808001C7F8    	  5841:                 cmpi.l #$8001C7F8,d0
01:000034BA 66FE            	  5842:                 bne.s *
01:000034BC 0C85000001DB    	  5843:                 cmpi.l #$000001DB,d5
01:000034C2 66FE            	  5844:                 bne.s *
                            	  5845: 
                            	  5846: 
                            	  5847: *        LONG LEFT
01:000034C4 203C80018FF1    	  5848:                 move.l #$80018FF1,d0
01:000034CA 7C15            	  5849:                 moveq  #$00000015,d6
                            	  5850: ROx_LOOP5:
01:000034CC EDB8            	  5851:                 rol.l d6,d0
01:000034CE 6100FF66        	  5852:                 bsr ROx_FLAGS
01:000034D2 51CEFFF8        	  5853:                 dbf d6,ROx_LOOP5
01:000034D6 0C8000C7F8C0    	  5854:                 cmpi.l #$00C7F8C0,d0
01:000034DC 66FE            	  5855:                 bne.s *
01:000034DE 0C850000021A    	  5856:                 cmpi.l #$0000021A,d5
01:000034E4 66FE            	  5857:                 bne.s *
                            	  5858: 
                            	  5859: *        LONG RIGHT
01:000034E6 203C80018FF1    	  5860:                 move.l #$80018FF1,d0
01:000034EC 7C16            	  5861:                 moveq  #$00000016,d6
                            	  5862: ROx_LOOP6:
01:000034EE ECB8            	  5863:                 ror.l d6,d0
01:000034F0 6100FF44        	  5864:                 bsr ROx_FLAGS
01:000034F4 51CEFFF8        	  5865:                 dbf d6,ROx_LOOP6
01:000034F8 0C80000C7F8C    	  5866:                 cmpi.l #$000C7F8C,d0
01:000034FE 66FE            	  5867:                 bne.s *
01:00003500 0C8500000250    	  5868:                 cmpi.l #$00000250,d5
01:00003506 66FE            	  5869:                 bne.s *
                            	  5870: 
                            	  5871: 
                            	  5872: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5873: 
01:00003508 203C80018FF1    	  5874:                 move.l #$80018FF1,d0
01:0000350E 7A00            	  5875:                 moveq  #$00000000,d5
                            	  5876: 
                            	  5877: *        BYTE LEFT
01:00003510 E318            	  5878:                 rol.b #1,d0
01:00003512 6100FF22        	  5879:                 bsr ROx_FLAGS
01:00003516 EB18            	  5880:                 rol.b #5,d0
01:00003518 6100FF1C        	  5881:                 bsr ROx_FLAGS
01:0000351C EF18            	  5882:                 rol.b #7,d0
01:0000351E 6100FF16        	  5883:                 bsr ROx_FLAGS
01:00003522 E118            	  5884:                 rol.b #8,d0
01:00003524 6100FF10        	  5885:                 bsr ROx_FLAGS
01:00003528 0C8080018F3E    	  5886:                 cmpi.l #$80018F3E,d0
01:0000352E 66FE            	  5887:                 bne.s *
01:00003530 0C8500000009    	  5888:                 cmpi.l #$00000009,d5
01:00003536 66FE            	  5889:                 bne.s *
                            	  5890: 
                            	  5891: *        BYTE RIGHT
01:00003538 E218            	  5892:                 ror.b #1,d0
01:0000353A 6100FEFA        	  5893:                 bsr ROx_FLAGS
01:0000353E EA18            	  5894:                 ror.b #5,d0
01:00003540 6100FEF4        	  5895:                 bsr ROx_FLAGS
01:00003544 EE18            	  5896:                 ror.b #7,d0
01:00003546 6100FEEE        	  5897:                 bsr ROx_FLAGS
01:0000354A E018            	  5898:                 ror.b #8,d0
01:0000354C 6100FEE8        	  5899:                 bsr ROx_FLAGS
01:00003550 0C8080018FF1    	  5900:                 cmpi.l #$80018FF1,d0
01:00003556 66FE            	  5901:                 bne.s *
01:00003558 0C8500000024    	  5902:                 cmpi.l #$00000024,d5
01:0000355E 66FE            	  5903:                 bne.s *
                            	  5904: 
                            	  5905: *        WORD LEFT
01:00003560 E358            	  5906:                 rol.w #1,d0
01:00003562 6100FED2        	  5907:                 bsr ROx_FLAGS
01:00003566 EB58            	  5908:                 rol.w #5,d0
01:00003568 6100FECC        	  5909:                 bsr ROx_FLAGS
01:0000356C EF58            	  5910:                 rol.w #7,d0
01:0000356E 6100FEC6        	  5911:                 bsr ROx_FLAGS
01:00003572 E158            	  5912:                 rol.w #8,d0
01:00003574 6100FEC0        	  5913:                 bsr ROx_FLAGS
01:00003578 0C808001FE31    	  5914:                 cmpi.l #$8001FE31,d0
01:0000357E 66FE            	  5915:                 bne.s *
01:00003580 0C8500000037    	  5916:                 cmpi.l #$00000037,d5
01:00003586 66FE            	  5917:                 bne.s *
                            	  5918: 
                            	  5919: *        WORD RIGHT
01:00003588 E258            	  5920:                 ror.w #1,d0
01:0000358A 6100FEAA        	  5921:                 bsr ROx_FLAGS
01:0000358E EA58            	  5922:                 ror.w #5,d0
01:00003590 6100FEA4        	  5923:                 bsr ROx_FLAGS
01:00003594 EE58            	  5924:                 ror.w #7,d0
01:00003596 6100FE9E        	  5925:                 bsr ROx_FLAGS
01:0000359A E058            	  5926:                 ror.w #8,d0
01:0000359C 6100FE98        	  5927:                 bsr ROx_FLAGS
01:000035A0 0C8080018FF1    	  5928:                 cmpi.l #$80018FF1,d0
01:000035A6 66FE            	  5929:                 bne.s *
01:000035A8 0C850000005B    	  5930:                 cmpi.l #$0000005B,d5
01:000035AE 66FE            	  5931:                 bne.s *
                            	  5932: 
                            	  5933: *        LONG LEFT
01:000035B0 E398            	  5934:                 rol.l #1,d0
01:000035B2 6100FE82        	  5935:                 bsr ROx_FLAGS
01:000035B6 EB98            	  5936:                 rol.l #5,d0
01:000035B8 6100FE7C        	  5937:                 bsr ROx_FLAGS
01:000035BC EF98            	  5938:                 rol.l #7,d0
01:000035BE 6100FE76        	  5939:                 bsr ROx_FLAGS
01:000035C2 E198            	  5940:                 rol.l #8,d0
01:000035C4 6100FE70        	  5941:                 bsr ROx_FLAGS
01:000035C8 0C80FE300031    	  5942:                 cmpi.l #$FE300031,d0
01:000035CE 66FE            	  5943:                 bne.s *
01:000035D0 0C8500000065    	  5944:                 cmpi.l #$00000065,d5
01:000035D6 66FE            	  5945:                 bne.s *
                            	  5946: 
                            	  5947: *        LONG RIGHT
01:000035D8 E298            	  5948:                 ror.l #1,d0
01:000035DA 6100FE5A        	  5949:                 bsr ROx_FLAGS
01:000035DE EA98            	  5950:                 ror.l #5,d0
01:000035E0 6100FE54        	  5951:                 bsr ROx_FLAGS
01:000035E4 EE98            	  5952:                 ror.l #7,d0
01:000035E6 6100FE4E        	  5953:                 bsr ROx_FLAGS
01:000035EA E098            	  5954:                 ror.l #8,d0
01:000035EC 6100FE48        	  5955:                 bsr ROx_FLAGS
01:000035F0 0C8080018FF1    	  5956:                 cmpi.l #$80018FF1,d0
01:000035F6 66FE            	  5957:                 bne.s *
01:000035F8 0C8500000080    	  5958:                 cmpi.l #$00000080,d5
01:000035FE 66FE            	  5959:                 bne.s *
                            	  5960: 
                            	  5961: 
                            	  5962: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5963: 
01:00003600 7A00            	  5964:                 moveq  #$00000000,d5
01:00003602 307C0100        	  5965:                 move.l #$00000100,a0
01:00003606 30BC8FF1        	  5966:                 move.w #$8FF1,(a0)
                            	  5967: 
                            	  5968: *        WORD LEFT
01:0000360A E7D0            	  5969:                 rol (a0)
01:0000360C 6100FE28        	  5970:                 bsr ROx_FLAGS
01:00003610 E7D0            	  5971:                 rol (a0)
01:00003612 6100FE22        	  5972:                 bsr ROx_FLAGS
01:00003616 E7D0            	  5973:                 rol (a0)
01:00003618 6100FE1C        	  5974:                 bsr ROx_FLAGS
01:0000361C E7D0            	  5975:                 rol (a0)
01:0000361E 6100FE16        	  5976:                 bsr ROx_FLAGS
01:00003622 3010            	  5977:                 move.w (a0),d0
01:00003624 0C808001FF18    	  5978:                 cmpi.l #$8001FF18,d0
01:0000362A 66FE            	  5979:                 bne.s *
01:0000362C 0C8500000009    	  5980:                 cmpi.l #$00000009,d5
01:00003632 66FE            	  5981:                 bne.s *
                            	  5982: 
                            	  5983: *        WORD RIGHT
01:00003634 E6D0            	  5984:                 ror (a0)
01:00003636 6100FDFE        	  5985:                 bsr ROx_FLAGS
01:0000363A E6D0            	  5986:                 ror (a0)
01:0000363C 6100FDF8        	  5987:                 bsr ROx_FLAGS
01:00003640 E6D0            	  5988:                 ror (a0)
01:00003642 6100FDF2        	  5989:                 bsr ROx_FLAGS
01:00003646 E6D0            	  5990:                 ror (a0)
01:00003648 6100FDEC        	  5991:                 bsr ROx_FLAGS
01:0000364C E6D0            	  5992:                 ror (a0)
01:0000364E 6100FDE6        	  5993:                 bsr ROx_FLAGS
01:00003652 E6D0            	  5994:                 ror (a0)
01:00003654 6100FDE0        	  5995:                 bsr ROx_FLAGS
01:00003658 3010            	  5996:                 move.w (a0),d0
01:0000365A 0C80800163FC    	  5997:                 cmpi.l #$800163FC,d0
01:00003660 66FE            	  5998:                 bne.s *
01:00003662 0C850000001B    	  5999:                 cmpi.l #$0000001B,d5
01:00003668 66FE            	  6000:                 bne.s *
                            	  6001: 
01:0000366A 4E75            	  6002:                 rts
                            	  6003: 
                            	  6004: 
                            	  6005: 
                            	  6006: *-----------------------------------------------------------
                            	  6007: *-----------------------------------------------------------
                            	  6008: * OPCODE : ROXx
                            	  6009: *-----------------------------------------------------------
                            	  6010: *-----------------------------------------------------------
                            	  6011: 
                            	  6012: *     Subroutine to check and accumulate the flags
01:0000366C 40C3            	  6013: ROXx_FLAGS:     move SR,d3
01:0000366E 02830000000F    	  6014:                 andi.l #$0F,d3            * Isolate flags
01:00003674 DA83            	  6015:                 add.l d3,d5               * Copy flag results into accumulator
01:00003676 4E75            	  6016:                 rts
                            	  6017: 
                            	  6018: op_ROXx:
                            	  6019: 
                            	  6020: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6021: 
                            	  6022: *        BYTE LEFT
01:00003678 203C80018FF1    	  6023:                 move.l #$80018FF1,d0
01:0000367E 7A00            	  6024:                 moveq  #$00000000,d5
01:00003680 7C11            	  6025:                 moveq  #$00000011,d6
                            	  6026: ROXx_LOOP1:
01:00003682 ED30            	  6027:                 roxl.b d6,d0
01:00003684 61E6            	  6028:                 bsr ROXx_FLAGS
01:00003686 51CEFFFA        	  6029:                 dbf d6,ROXx_LOOP1
01:0000368A 0C8080018FD0    	  6030:                 cmpi.l #$80018FD0,d0
01:00003690 66FE            	  6031:                 bne.s *
01:00003692 0C8500000042    	  6032:                 cmpi.l #$00000042,d5
01:00003698 66FE            	  6033:                 bne.s *
                            	  6034: 
                            	  6035: *        BYTE RIGHT
01:0000369A 203C80018FF1    	  6036:                 move.l #$80018FF1,d0
01:000036A0 7C12            	  6037:                 moveq  #$00000012,d6
                            	  6038: ROXx_LOOP2:
01:000036A2 EC30            	  6039:                 roxr.b d6,d0
01:000036A4 61C6            	  6040:                 bsr ROXx_FLAGS
01:000036A6 51CEFFFA        	  6041:                 dbf d6,ROXx_LOOP2
01:000036AA 0C8080018F51    	  6042:                 cmpi.l #$80018F51,d0
01:000036B0 66FE            	  6043:                 bne.s *
01:000036B2 0C850000009C    	  6044:                 cmpi.l #$0000009C,d5
01:000036B8 66FE            	  6045:                 bne.s *
                            	  6046: 
                            	  6047: 
                            	  6048: *        WORD LEFT
01:000036BA 203C80018FF1    	  6049:                 move.l #$80018FF1,d0
01:000036C0 7C13            	  6050:                 moveq  #$00000013,d6
                            	  6051: ROXx_LOOP3:
01:000036C2 ED70            	  6052:                 roxl.w d6,d0
01:000036C4 61A6            	  6053:                 bsr ROXx_FLAGS
01:000036C6 51CEFFFA        	  6054:                 dbf d6,ROXx_LOOP3
01:000036CA 0C8080013980    	  6055:                 cmpi.l #$80013980,d0
01:000036D0 66FE            	  6056:                 bne.s *
01:000036D2 0C85000000C9    	  6057:                 cmpi.l #$000000C9,d5
01:000036D8 66FE            	  6058:                 bne.s *
                            	  6059: 
                            	  6060: *        WORD RIGHT
01:000036DA 203C80018FF1    	  6061:                 move.l #$80018FF1,d0
01:000036E0 7C1E            	  6062:                 move.l #$0000001E,d6
                            	  6063: ROXx_LOOP4:
01:000036E2 EC70            	  6064:                 roxr.w d6,d0
01:000036E4 6186            	  6065:                 bsr ROXx_FLAGS
01:000036E6 51CEFFFA        	  6066:                 dbf d6,ROXx_LOOP4
01:000036EA 0C8080010A1D    	  6067:                 cmpi.l #$80010A1D,d0
01:000036F0 66FE            	  6068:                 bne.s *
01:000036F2 0C850000014D    	  6069:                 cmpi.l #$0000014D,d5
01:000036F8 66FE            	  6070:                 bne.s *
                            	  6071: 
                            	  6072: 
                            	  6073: *        LONG LEFT
01:000036FA 203C80018FF1    	  6074:                 move.l #$80018FF1,d0
01:00003700 7C15            	  6075:                 moveq  #$00000015,d6
                            	  6076: ROXx_LOOP5:
01:00003702 EDB0            	  6077:                 roxl.l d6,d0
01:00003704 6100FF66        	  6078:                 bsr ROXx_FLAGS
01:00003708 51CEFFF8        	  6079:                 dbf d6,ROXx_LOOP5
01:0000370C 0C80800185D0    	  6080:                 cmpi.l #$800185D0,d0
01:00003712 66FE            	  6081:                 bne.s *
01:00003714 0C85000001A1    	  6082:                 cmpi.l #$000001A1,d5
01:0000371A 66FE            	  6083:                 bne.s *
                            	  6084: 
                            	  6085: *        LONG RIGHT
01:0000371C 203C80018FF1    	  6086:                 move.l #$80018FF1,d0
01:00003722 7C16            	  6087:                 moveq  #$00000016,d6
                            	  6088: ROXx_LOOP6:
01:00003724 ECB0            	  6089:                 roxr.l d6,d0
01:00003726 6100FF44        	  6090:                 bsr ROXx_FLAGS
01:0000372A 51CEFFF8        	  6091:                 dbf d6,ROXx_LOOP6
01:0000372E 0C80082D8200    	  6092:                 cmpi.l #$082D8200,d0
01:00003734 66FE            	  6093:                 bne.s *
01:00003736 0C85000001DE    	  6094:                 cmpi.l #$000001DE,d5
01:0000373C 66FE            	  6095:                 bne.s *
                            	  6096: 
                            	  6097: 
                            	  6098: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6099: 
01:0000373E 203C80018FF1    	  6100:                 move.l #$80018FF1,d0
01:00003744 7A00            	  6101:                 moveq  #$00000000,d5
                            	  6102: 
                            	  6103: *        BYTE LEFT
01:00003746 E310            	  6104:                 roxl.b #1,d0
01:00003748 6100FF22        	  6105:                 bsr ROXx_FLAGS
01:0000374C EB10            	  6106:                 roxl.b #5,d0
01:0000374E 6100FF1C        	  6107:                 bsr ROXx_FLAGS
01:00003752 EF10            	  6108:                 roxl.b #7,d0
01:00003754 6100FF16        	  6109:                 bsr ROXx_FLAGS
01:00003758 E110            	  6110:                 roxl.b #8,d0
01:0000375A 6100FF10        	  6111:                 bsr ROXx_FLAGS
01:0000375E 0C8080018F09    	  6112:                 cmpi.l #$80018F09,d0
01:00003764 66FE            	  6113:                 bne.s *
01:00003766 0C850000000B    	  6114:                 cmpi.l #$0000000B,d5
01:0000376C 66FE            	  6115:                 bne.s *
                            	  6116: 
                            	  6117: *        BYTE RIGHT
01:0000376E E210            	  6118:                 roxr.b #1,d0
01:00003770 6100FEFA        	  6119:                 bsr ROXx_FLAGS
01:00003774 EA10            	  6120:                 roxr.b #5,d0
01:00003776 6100FEF4        	  6121:                 bsr ROXx_FLAGS
01:0000377A EE10            	  6122:                 roxr.b #7,d0
01:0000377C 6100FEEE        	  6123:                 bsr ROXx_FLAGS
01:00003780 E010            	  6124:                 roxr.b #8,d0
01:00003782 6100FEE8        	  6125:                 bsr ROXx_FLAGS
01:00003786 0C8080018F00    	  6126:                 cmpi.l #$80018F00,d0
01:0000378C 66FE            	  6127:                 bne.s *
01:0000378E 0C8500000015    	  6128:                 cmpi.l #$00000015,d5
01:00003794 66FE            	  6129:                 bne.s *
                            	  6130: 
                            	  6131: *        WORD LEFT
01:00003796 E350            	  6132:                 roxl.w #1,d0
01:00003798 6100FED2        	  6133:                 bsr ROXx_FLAGS
01:0000379C EB50            	  6134:                 roxl.w #5,d0
01:0000379E 6100FECC        	  6135:                 bsr ROXx_FLAGS
01:000037A2 EF50            	  6136:                 roxl.w #7,d0
01:000037A4 6100FEC6        	  6137:                 bsr ROXx_FLAGS
01:000037A8 E150            	  6138:                 roxl.w #8,d0
01:000037AA 6100FEC0        	  6139:                 bsr ROXx_FLAGS
01:000037AE 0C808001B000    	  6140:                 cmpi.l #$8001B000,d0
01:000037B4 66FE            	  6141:                 bne.s *
01:000037B6 0C8500000027    	  6142:                 cmpi.l #$00000027,d5
01:000037BC 66FE            	  6143:                 bne.s *
                            	  6144: 
                            	  6145: *        WORD RIGHT
01:000037BE E250            	  6146:                 roxr.w #1,d0
01:000037C0 6100FEAA        	  6147:                 bsr ROXx_FLAGS
01:000037C4 EA50            	  6148:                 roxr.w #5,d0
01:000037C6 6100FEA4        	  6149:                 bsr ROXx_FLAGS
01:000037CA EE50            	  6150:                 roxr.w #7,d0
01:000037CC 6100FE9E        	  6151:                 bsr ROXx_FLAGS
01:000037D0 E050            	  6152:                 roxr.w #8,d0
01:000037D2 6100FE98        	  6153:                 bsr ROXx_FLAGS
01:000037D6 0C8080010A00    	  6154:                 cmpi.l #$80010A00,d0
01:000037DC 66FE            	  6155:                 bne.s *
01:000037DE 0C8500000028    	  6156:                 cmpi.l #$00000028,d5
01:000037E4 66FE            	  6157:                 bne.s *
                            	  6158: 
                            	  6159: *        LONG LEFT
01:000037E6 E390            	  6160:                 roxl.l #1,d0
01:000037E8 6100FE82        	  6161:                 bsr ROXx_FLAGS
01:000037EC EB90            	  6162:                 roxl.l #5,d0
01:000037EE 6100FE7C        	  6163:                 bsr ROXx_FLAGS
01:000037F2 EF90            	  6164:                 roxl.l #7,d0
01:000037F4 6100FE76        	  6165:                 bsr ROXx_FLAGS
01:000037F8 E190            	  6166:                 roxl.l #8,d0
01:000037FA 6100FE70        	  6167:                 bsr ROXx_FLAGS
01:000037FE 0C8040000010    	  6168:                 cmpi.l #$40000010,d0
01:00003804 66FE            	  6169:                 bne.s *
01:00003806 0C850000002A    	  6170:                 cmpi.l #$0000002A,d5
01:0000380C 66FE            	  6171:                 bne.s *
                            	  6172: 
                            	  6173: *        LONG RIGHT
01:0000380E E290            	  6174:                 roxr.l #1,d0
01:00003810 6100FE5A        	  6175:                 bsr ROXx_FLAGS
01:00003814 EA90            	  6176:                 roxr.l #5,d0
01:00003816 6100FE54        	  6177:                 bsr ROXx_FLAGS
01:0000381A EE90            	  6178:                 roxr.l #7,d0
01:0000381C 6100FE4E        	  6179:                 bsr ROXx_FLAGS
01:00003820 E090            	  6180:                 roxr.l #8,d0
01:00003822 6100FE48        	  6181:                 bsr ROXx_FLAGS
01:00003826 0C8000010200    	  6182:                 cmpi.l #$00010200,d0
01:0000382C 66FE            	  6183:                 bne.s *
01:0000382E 0C8500000032    	  6184:                 cmpi.l #$00000032,d5
01:00003834 66FE            	  6185:                 bne.s *
                            	  6186: 
                            	  6187: 
                            	  6188: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6189: 
01:00003836 7A00            	  6190:                 moveq  #$00000000,d5
01:00003838 307C0100        	  6191:                 move.l #$00000100,a0
01:0000383C 30BC8FF1        	  6192:                 move.w #$8FF1,(a0)
                            	  6193: 
                            	  6194: *        WORD LEFT
01:00003840 E5D0            	  6195:                 roxl (a0)
01:00003842 6100FE28        	  6196:                 bsr ROXx_FLAGS
01:00003846 E5D0            	  6197:                 roxl (a0)
01:00003848 6100FE22        	  6198:                 bsr ROXx_FLAGS
01:0000384C E5D0            	  6199:                 roxl (a0)
01:0000384E 6100FE1C        	  6200:                 bsr ROXx_FLAGS
01:00003852 E5D0            	  6201:                 roxl (a0)
01:00003854 6100FE16        	  6202:                 bsr ROXx_FLAGS
01:00003858 3010            	  6203:                 move.w (a0),d0
01:0000385A 0C800001FF10    	  6204:                 cmpi.l #$0001FF10,d0
01:00003860 66FE            	  6205:                 bne.s *
01:00003862 0C8500000009    	  6206:                 cmpi.l #$00000009,d5
01:00003868 66FE            	  6207:                 bne.s *
                            	  6208: 
                            	  6209: *        WORD RIGHT
01:0000386A E4D0            	  6210:                 roxr (a0)
01:0000386C 6100FDFE        	  6211:                 bsr ROXx_FLAGS
01:00003870 E4D0            	  6212:                 roxr (a0)
01:00003872 6100FDF8        	  6213:                 bsr ROXx_FLAGS
01:00003876 E4D0            	  6214:                 roxr (a0)
01:00003878 6100FDF2        	  6215:                 bsr ROXx_FLAGS
01:0000387C E4D0            	  6216:                 roxr (a0)
01:0000387E 6100FDEC        	  6217:                 bsr ROXx_FLAGS
01:00003882 E4D0            	  6218:                 roxr (a0)
01:00003884 6100FDE6        	  6219:                 bsr ROXx_FLAGS
01:00003888 E4D0            	  6220:                 roxr (a0)
01:0000388A 6100FDE0        	  6221:                 bsr ROXx_FLAGS
01:0000388E 3010            	  6222:                 move.w (a0),d0
01:00003890 0C80000103FC    	  6223:                 cmpi.l #$000103FC,d0
01:00003896 66FE            	  6224:                 bne.s *
01:00003898 0C850000000A    	  6225:                 cmpi.l #$0000000A,d5
01:0000389E 66FE            	  6226:                 bne.s *
                            	  6227: 
01:000038A0 4E75            	  6228:                 rts
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: 
                            	  6233: *-----------------------------------------------------------
                            	  6234: *-----------------------------------------------------------
                            	  6235: * OPCODE : SHIFTS
                            	  6236: *-----------------------------------------------------------
                            	  6237: *-----------------------------------------------------------
                            	  6238: 
                            	  6239: *     Subroutine to check and accumulate the flags
01:000038A2 40C3            	  6240: SHIFTS_FLAGS:   move SR,d3
01:000038A4 02830000000F    	  6241:                 andi.l #$0F,d3            * Isolate flags
01:000038AA DA83            	  6242:                 add.l d3,d5               * Copy flag results into accumulator
01:000038AC 4E75            	  6243:                 rts
                            	  6244: 
                            	  6245: op_SHIFTS:
                            	  6246: 
                            	  6247: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6248: 
                            	  6249: *        BYTE LEFT
01:000038AE 203C80018F81    	  6250:                 move.l #$80018F81,d0
01:000038B4 7A00            	  6251:                 moveq  #$00000000,d5
01:000038B6 7C02            	  6252:                 moveq  #$00000002,d6
                            	  6253: SHIFTS_LOOP1:
01:000038B8 ED20            	  6254:                 asl.b d6,d0
01:000038BA 61E6            	  6255:                 bsr SHIFTS_FLAGS
01:000038BC 51CEFFFA        	  6256:                 dbf d6,SHIFTS_LOOP1
01:000038C0 0C8080018F08    	  6257:                 cmpi.l #$80018F08,d0
01:000038C6 66FE            	  6258:                 bne.s *
01:000038C8 0C8500000002    	  6259:                 cmpi.l #$00000002,d5
01:000038CE 66FE            	  6260:                 bne.s *
                            	  6261: 
                            	  6262: *        BYTE RIGHT
01:000038D0 203C80018F81    	  6263:                 move.l #$80018F81,d0
01:000038D6 7C02            	  6264:                 moveq  #$00000002,d6
                            	  6265: SHIFTS_LOOP2:
01:000038D8 EC20            	  6266:                 asr.b d6,d0
01:000038DA 61C6            	  6267:                 bsr SHIFTS_FLAGS
01:000038DC 51CEFFFA        	  6268:                 dbf d6,SHIFTS_LOOP2
01:000038E0 0C8080018FF0    	  6269:                 cmpi.l #$80018FF0,d0
01:000038E6 66FE            	  6270:                 bne.s *
01:000038E8 0C850000001A    	  6271:                 cmpi.l #$0000001A,d5
01:000038EE 66FE            	  6272:                 bne.s *
                            	  6273: 
                            	  6274: 
                            	  6275: *        WORD LEFT
01:000038F0 203C80018FF1    	  6276:                 move.l #$80018FF1,d0
01:000038F6 7C02            	  6277:                 moveq  #$00000002,d6
                            	  6278: SHIFTS_LOOP3:
01:000038F8 ED60            	  6279:                 asl.w d6,d0
01:000038FA 61A6            	  6280:                 bsr SHIFTS_FLAGS
01:000038FC 51CEFFFA        	  6281:                 dbf d6,SHIFTS_LOOP3
01:00003900 0C8080017F88    	  6282:                 cmpi.l #$80017F88,d0
01:00003906 66FE            	  6283:                 bne.s *
01:00003908 0C850000001C    	  6284:                 cmpi.l #$0000001C,d5
01:0000390E 66FE            	  6285:                 bne.s *
                            	  6286: 
                            	  6287: *        WORD RIGHT
01:00003910 203C80018FF1    	  6288:                 move.l #$80018FF1,d0
01:00003916 7C02            	  6289:                 moveq  #$00000002,d6
                            	  6290: SHIFTS_LOOP4:
01:00003918 EC60            	  6291:                 asr.w d6,d0
01:0000391A 6186            	  6292:                 bsr SHIFTS_FLAGS
01:0000391C 51CEFFFA        	  6293:                 dbf d6,SHIFTS_LOOP4
01:00003920 0C808001F1FE    	  6294:                 cmpi.l #$8001F1FE,d0
01:00003926 66FE            	  6295:                 bne.s *
01:00003928 0C8500000034    	  6296:                 cmpi.l #$00000034,d5
01:0000392E 66FE            	  6297:                 bne.s *
                            	  6298: 
                            	  6299: 
                            	  6300: *        LONG LEFT
01:00003930 203C80018FF1    	  6301:                 move.l #$80018FF1,d0
01:00003936 7C02            	  6302:                 moveq  #$00000002,d6
                            	  6303: SHIFTS_LOOP5:
01:00003938 EDA0            	  6304:                 asl.l d6,d0
01:0000393A 6100FF66        	  6305:                 bsr SHIFTS_FLAGS
01:0000393E 51CEFFF8        	  6306:                 dbf d6,SHIFTS_LOOP5
01:00003942 0C80000C7F88    	  6307:                 cmpi.l #$000C7F88,d0
01:00003948 66FE            	  6308:                 bne.s *
01:0000394A 0C8500000036    	  6309:                 cmpi.l #$00000036,d5
01:00003950 66FE            	  6310:                 bne.s *
                            	  6311: 
                            	  6312: *        LONG RIGHT
01:00003952 203C80018FF1    	  6313:                 move.l #$80018FF1,d0
01:00003958 7C02            	  6314:                 moveq  #$00000002,d6
                            	  6315: SHIFTS_LOOP6:
01:0000395A ECA0            	  6316:                 asr.l d6,d0
01:0000395C 6100FF44        	  6317:                 bsr SHIFTS_FLAGS
01:00003960 51CEFFF8        	  6318:                 dbf d6,SHIFTS_LOOP6
01:00003964 0C80F00031FE    	  6319:                 cmpi.l #$F00031FE,d0
01:0000396A 66FE            	  6320:                 bne.s *
01:0000396C 0C850000004E    	  6321:                 cmpi.l #$0000004E,d5
01:00003972 66FE            	  6322:                 bne.s *
                            	  6323: 
                            	  6324: 
                            	  6325: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6326: 
01:00003974 203C80018FF1    	  6327:                 move.l #$80018FF1,d0
01:0000397A 7A00            	  6328:                 moveq  #$00000000,d5
                            	  6329: 
                            	  6330: *        BYTE LEFT
01:0000397C D000            	  6331:                 asl.b #1,d0
01:0000397E 6100FF22        	  6332:                 bsr SHIFTS_FLAGS
01:00003982 E500            	  6333:                 asl.b #2,d0
01:00003984 6100FF1C        	  6334:                 bsr SHIFTS_FLAGS
01:00003988 D000            	  6335:                 asl.b #1,d0
01:0000398A 6100FF16        	  6336:                 bsr SHIFTS_FLAGS
01:0000398E E700            	  6337:                 asl.b #3,d0
01:00003990 6100FF10        	  6338:                 bsr SHIFTS_FLAGS
01:00003994 0C8080018F80    	  6339:                 cmpi.l #$80018F80,d0
01:0000399A 66FE            	  6340:                 bne.s *
01:0000399C 0C850000001F    	  6341:                 cmpi.l #$0000001F,d5
01:000039A2 66FE            	  6342:                 bne.s *
                            	  6343: 
                            	  6344: *        BYTE RIGHT
01:000039A4 E200            	  6345:                 asr.b #1,d0
01:000039A6 6100FEFA        	  6346:                 bsr SHIFTS_FLAGS
01:000039AA E400            	  6347:                 asr.b #2,d0
01:000039AC 6100FEF4        	  6348:                 bsr SHIFTS_FLAGS
01:000039B0 E600            	  6349:                 asr.b #3,d0
01:000039B2 6100FEEE        	  6350:                 bsr SHIFTS_FLAGS
01:000039B6 E200            	  6351:                 asr.b #1,d0
01:000039B8 6100FEE8        	  6352:                 bsr SHIFTS_FLAGS
01:000039BC 0C8080018FFF    	  6353:                 cmpi.l #$80018FFF,d0
01:000039C2 66FE            	  6354:                 bne.s *
01:000039C4 0C850000003F    	  6355:                 cmpi.l #$0000003F,d5
01:000039CA 66FE            	  6356:                 bne.s *
                            	  6357: 
                            	  6358: *        WORD LEFT
01:000039CC D040            	  6359:                 asl.w #1,d0
01:000039CE 6100FED2        	  6360:                 bsr SHIFTS_FLAGS
01:000039D2 E540            	  6361:                 asl.w #2,d0
01:000039D4 6100FECC        	  6362:                 bsr SHIFTS_FLAGS
01:000039D8 E740            	  6363:                 asl.w #3,d0
01:000039DA 6100FEC6        	  6364:                 bsr SHIFTS_FLAGS
01:000039DE EB40            	  6365:                 asl.w #5,d0
01:000039E0 6100FEC0        	  6366:                 bsr SHIFTS_FLAGS
01:000039E4 0C808001F800    	  6367:                 cmpi.l #$8001F800,d0
01:000039EA 66FE            	  6368:                 bne.s *
01:000039EC 0C8500000056    	  6369:                 cmpi.l #$00000056,d5
01:000039F2 66FE            	  6370:                 bne.s *
                            	  6371: 
                            	  6372: *        WORD RIGHT
01:000039F4 EA40            	  6373:                 asr.w #5,d0
01:000039F6 6100FEAA        	  6374:                 bsr SHIFTS_FLAGS
01:000039FA E240            	  6375:                 asr.w #1,d0
01:000039FC 6100FEA4        	  6376:                 bsr SHIFTS_FLAGS
01:00003A00 E440            	  6377:                 asr.w #2,d0
01:00003A02 6100FE9E        	  6378:                 bsr SHIFTS_FLAGS
01:00003A06 E840            	  6379:                 asr.w #4,d0
01:00003A08 6100FE98        	  6380:                 bsr SHIFTS_FLAGS
01:00003A0C 0C808001FFFF    	  6381:                 cmpi.l #$8001FFFF,d0
01:00003A12 66FE            	  6382:                 bne.s *
01:00003A14 0C8500000077    	  6383:                 cmpi.l #$00000077,d5
01:00003A1A 66FE            	  6384:                 bne.s *
                            	  6385: 
                            	  6386: *        LONG LEFT
01:00003A1C 203C80018FF1    	  6387:                 move.l #$80018FF1,d0
01:00003A22 D080            	  6388:                 asl.l #1,d0
01:00003A24 6100FE7C        	  6389:                 bsr SHIFTS_FLAGS
01:00003A28 E580            	  6390:                 asl.l #2,d0
01:00003A2A 6100FE76        	  6391:                 bsr SHIFTS_FLAGS
01:00003A2E EF80            	  6392:                 asl.l #7,d0
01:00003A30 6100FE70        	  6393:                 bsr SHIFTS_FLAGS
01:00003A34 E980            	  6394:                 asl.l #4,d0
01:00003A36 6100FE6A        	  6395:                 bsr SHIFTS_FLAGS
01:00003A3A 0C8063FC4000    	  6396:                 cmpi.l #$63FC4000,d0
01:00003A40 66FE            	  6397:                 bne.s *
01:00003A42 0C850000007A    	  6398:                 cmpi.l #$0000007A,d5
01:00003A48 66FE            	  6399:                 bne.s *
                            	  6400: 
                            	  6401: *        LONG RIGHT
01:00003A4A 203C80018FF1    	  6402:                 move.l #$80018FF1,d0
01:00003A50 E280            	  6403:                 asr.l #1,d0
01:00003A52 6100FE4E        	  6404:                 bsr SHIFTS_FLAGS
01:00003A56 EA80            	  6405:                 asr.l #5,d0
01:00003A58 6100FE48        	  6406:                 bsr SHIFTS_FLAGS
01:00003A5C EE80            	  6407:                 asr.l #7,d0
01:00003A5E 6100FE42        	  6408:                 bsr SHIFTS_FLAGS
01:00003A62 E080            	  6409:                 asr.l #8,d0
01:00003A64 6100FE3C        	  6410:                 bsr SHIFTS_FLAGS
01:00003A68 0C80FFFFFC00    	  6411:                 cmpi.l #$FFFFFC00,d0
01:00003A6E 66FE            	  6412:                 bne.s *
01:00003A70 0C850000009C    	  6413:                 cmpi.l #$0000009C,d5
01:00003A76 66FE            	  6414:                 bne.s *
                            	  6415: 
                            	  6416: 
                            	  6417: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6418: 
01:00003A78 7A00            	  6419:                 moveq  #$00000000,d5
01:00003A7A 307C0100        	  6420:                 move.l #$00000100,a0
01:00003A7E 30BC8FF1        	  6421:                 move.w #$8FF1,(a0)
                            	  6422: 
                            	  6423: *        WORD LEFT
01:00003A82 E1D0            	  6424:                 asl  (a0)
01:00003A84 6100FE1C        	  6425:                 bsr SHIFTS_FLAGS
01:00003A88 E1D0            	  6426:                 asl  (a0)
01:00003A8A 6100FE16        	  6427:                 bsr SHIFTS_FLAGS
01:00003A8E E1D0            	  6428:                 asl  (a0)
01:00003A90 6100FE10        	  6429:                 bsr SHIFTS_FLAGS
01:00003A94 E1D0            	  6430:                 asl  (a0)
01:00003A96 6100FE0A        	  6431:                 bsr SHIFTS_FLAGS
01:00003A9A 3010            	  6432:                 move.w (a0),d0
01:00003A9C 0C80FFFFFF10    	  6433:                 cmpi.l #$FFFFFF10,d0
01:00003AA2 66FE            	  6434:                 bne.s *
01:00003AA4 0C850000000D    	  6435:                 cmpi.l #$0000000D,d5
01:00003AAA 66FE            	  6436:                 bne.s *
                            	  6437: 
                            	  6438: *        WORD RIGHT
01:00003AAC E0D0            	  6439:                 asr (a0)
01:00003AAE 6100FDF2        	  6440:                 bsr SHIFTS_FLAGS
01:00003AB2 E0D0            	  6441:                 asr (a0)
01:00003AB4 6100FDEC        	  6442:                 bsr SHIFTS_FLAGS
01:00003AB8 E0D0            	  6443:                 asr (a0)
01:00003ABA 6100FDE6        	  6444:                 bsr SHIFTS_FLAGS
01:00003ABE E0D0            	  6445:                 asr (a0)
01:00003AC0 6100FDE0        	  6446:                 bsr SHIFTS_FLAGS
01:00003AC4 E0D0            	  6447:                 asr (a0)
01:00003AC6 6100FDDA        	  6448:                 bsr SHIFTS_FLAGS
01:00003ACA E0D0            	  6449:                 asr (a0)
01:00003ACC 6100FDD4        	  6450:                 bsr SHIFTS_FLAGS
01:00003AD0 3010            	  6451:                 move.w (a0),d0
01:00003AD2 0C80FFFFFFFC    	  6452:                 cmpi.l #$FFFFFFFC,d0
01:00003AD8 66FE            	  6453:                 bne.s *
01:00003ADA 0C850000003E    	  6454:                 cmpi.l #$0000003E,d5
01:00003AE0 66FE            	  6455:                 bne.s *
                            	  6456: 
01:00003AE2 4E75            	  6457:                 rts
                            	  6458: 
                            	  6459: 
                            	  6460: 
                            	  6461: *-----------------------------------------------------------
                            	  6462: *-----------------------------------------------------------
                            	  6463: * OPCODE : SHIFTS2
                            	  6464: *-----------------------------------------------------------
                            	  6465: *-----------------------------------------------------------
                            	  6466: 
                            	  6467: *     Subroutine to check and accumulate the flags
01:00003AE4 40C3            	  6468: SHIFTS2_FLAGS:  move SR,d3
01:00003AE6 02830000000F    	  6469:                 andi.l #$0F,d3            * Isolate flags
01:00003AEC DA83            	  6470:                 add.l d3,d5               * Copy flag results into accumulator
01:00003AEE 4E75            	  6471:                 rts
                            	  6472: 
                            	  6473: op_SHIFTS2:
                            	  6474: 
                            	  6475: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6476: 
                            	  6477: *        BYTE LEFT
01:00003AF0 203C80018F81    	  6478:                 move.l #$80018F81,d0
01:00003AF6 7A00            	  6479:                 moveq  #$00000000,d5
01:00003AF8 7C02            	  6480:                 moveq  #$00000002,d6
                            	  6481: SHIFTS2_LOOP1:
01:00003AFA ED28            	  6482:                 lsl.b d6,d0
01:00003AFC 61E6            	  6483:                 bsr SHIFTS2_FLAGS
01:00003AFE 51CEFFFA        	  6484:                 dbf d6,SHIFTS2_LOOP1
01:00003B02 0C8080018F08    	  6485:                 cmpi.l #$80018F08,d0
01:00003B08 66FE            	  6486:                 bne.s *
01:00003B0A 4A85            	  6487:                 cmpi.l #$00000000,d5
01:00003B0C 66FE            	  6488:                 bne.s *
                            	  6489: 
                            	  6490: *        BYTE RIGHT
01:00003B0E 203C80018F81    	  6491:                 move.l #$80018F81,d0
01:00003B14 7C02            	  6492:                 moveq  #$00000002,d6
                            	  6493: SHIFTS2_LOOP2:
01:00003B16 EC28            	  6494:                 lsr.b d6,d0
01:00003B18 61CA            	  6495:                 bsr SHIFTS2_FLAGS
01:00003B1A 51CEFFFA        	  6496:                 dbf d6,SHIFTS2_LOOP2
01:00003B1E 0C8080018F10    	  6497:                 cmpi.l #$80018F10,d0
01:00003B24 66FE            	  6498:                 bne.s *
01:00003B26 4A85            	  6499:                 cmpi.l #$00000000,d5
01:00003B28 66FE            	  6500:                 bne.s *
                            	  6501: 
                            	  6502: 
                            	  6503: *        WORD LEFT
01:00003B2A 203C80018FF1    	  6504:                 move.l #$80018FF1,d0
01:00003B30 7C02            	  6505:                 moveq  #$00000002,d6
                            	  6506: SHIFTS2_LOOP3:
01:00003B32 ED68            	  6507:                 lsl.w d6,d0
01:00003B34 61AE            	  6508:                 bsr SHIFTS2_FLAGS
01:00003B36 51CEFFFA        	  6509:                 dbf d6,SHIFTS2_LOOP3
01:00003B3A 0C8080017F88    	  6510:                 cmpi.l #$80017F88,d0
01:00003B40 66FE            	  6511:                 bne.s *
01:00003B42 4A85            	  6512:                 cmpi.l #$00000000,d5
01:00003B44 66FE            	  6513:                 bne.s *
                            	  6514: 
                            	  6515: *        WORD RIGHT
01:00003B46 203C80018FF1    	  6516:                 move.l #$80018FF1,d0
01:00003B4C 7C02            	  6517:                 moveq  #$00000002,d6
                            	  6518: SHIFTS2_LOOP4:
01:00003B4E EC68            	  6519:                 lsr.w d6,d0
01:00003B50 6192            	  6520:                 bsr SHIFTS2_FLAGS
01:00003B52 51CEFFFA        	  6521:                 dbf d6,SHIFTS2_LOOP4
01:00003B56 0C80800111FE    	  6522:                 cmpi.l #$800111FE,d0
01:00003B5C 66FE            	  6523:                 bne.s *
01:00003B5E 4A85            	  6524:                 cmpi.l #$00000000,d5
01:00003B60 66FE            	  6525:                 bne.s *
                            	  6526: 
                            	  6527: 
                            	  6528: *        LONG LEFT
01:00003B62 203C80018FF1    	  6529:                 move.l #$80018FF1,d0
01:00003B68 7C02            	  6530:                 moveq  #$00000002,d6
                            	  6531: SHIFTS2_LOOP5:
01:00003B6A EDA8            	  6532:                 lsl.l d6,d0
01:00003B6C 6100FF76        	  6533:                 bsr SHIFTS2_FLAGS
01:00003B70 51CEFFF8        	  6534:                 dbf d6,SHIFTS2_LOOP5
01:00003B74 0C80000C7F88    	  6535:                 cmpi.l #$000C7F88,d0
01:00003B7A 66FE            	  6536:                 bne.s *
01:00003B7C 4A85            	  6537:                 cmpi.l #$00000000,d5
01:00003B7E 66FE            	  6538:                 bne.s *
                            	  6539: 
                            	  6540: *        LONG RIGHT
01:00003B80 203C80018FF1    	  6541:                 move.l #$80018FF1,d0
01:00003B86 7C02            	  6542:                 moveq  #$00000002,d6
                            	  6543: SHIFTS2_LOOP6:
01:00003B88 ECA8            	  6544:                 lsr.l d6,d0
01:00003B8A 6100FF58        	  6545:                 bsr SHIFTS2_FLAGS
01:00003B8E 51CEFFF8        	  6546:                 dbf d6,SHIFTS2_LOOP6
01:00003B92 0C80100031FE    	  6547:                 cmpi.l #$100031FE,d0
01:00003B98 66FE            	  6548:                 bne.s *
01:00003B9A 4A85            	  6549:                 cmpi.l #$00000000,d5
01:00003B9C 66FE            	  6550:                 bne.s *
                            	  6551: 
                            	  6552: 
                            	  6553: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6554: 
01:00003B9E 203C80018FF1    	  6555:                 move.l #$80018FF1,d0
01:00003BA4 7A00            	  6556:                 moveq  #$00000000,d5
                            	  6557: 
                            	  6558: *        BYTE LEFT
01:00003BA6 E308            	  6559:                 lsl.b #1,d0
01:00003BA8 6100FF3A        	  6560:                 bsr SHIFTS2_FLAGS
01:00003BAC E508            	  6561:                 lsl.b #2,d0
01:00003BAE 6100FF34        	  6562:                 bsr SHIFTS2_FLAGS
01:00003BB2 E308            	  6563:                 lsl.b #1,d0
01:00003BB4 6100FF2E        	  6564:                 bsr SHIFTS2_FLAGS
01:00003BB8 E708            	  6565:                 lsl.b #3,d0
01:00003BBA 6100FF28        	  6566:                 bsr SHIFTS2_FLAGS
01:00003BBE 0C8080018F80    	  6567:                 cmpi.l #$80018F80,d0
01:00003BC4 66FE            	  6568:                 bne.s *
01:00003BC6 0C850000001B    	  6569:                 cmpi.l #$0000001B,d5
01:00003BCC 66FE            	  6570:                 bne.s *
                            	  6571: 
                            	  6572: *        BYTE RIGHT
01:00003BCE E208            	  6573:                 lsr.b #1,d0
01:00003BD0 6100FF12        	  6574:                 bsr SHIFTS2_FLAGS
01:00003BD4 E408            	  6575:                 lsr.b #2,d0
01:00003BD6 6100FF0C        	  6576:                 bsr SHIFTS2_FLAGS
01:00003BDA E608            	  6577:                 lsr.b #3,d0
01:00003BDC 6100FF06        	  6578:                 bsr SHIFTS2_FLAGS
01:00003BE0 E208            	  6579:                 lsr.b #1,d0
01:00003BE2 6100FF00        	  6580:                 bsr SHIFTS2_FLAGS
01:00003BE6 0C8080018F01    	  6581:                 cmpi.l #$80018F01,d0
01:00003BEC 66FE            	  6582:                 bne.s *
01:00003BEE 0C850000001B    	  6583:                 cmpi.l #$0000001B,d5
01:00003BF4 66FE            	  6584:                 bne.s *
                            	  6585: 
                            	  6586: *        WORD LEFT
01:00003BF6 E348            	  6587:                 lsl.w #1,d0
01:00003BF8 6100FEEA        	  6588:                 bsr SHIFTS2_FLAGS
01:00003BFC E548            	  6589:                 lsl.w #2,d0
01:00003BFE 6100FEE4        	  6590:                 bsr SHIFTS2_FLAGS
01:00003C02 E748            	  6591:                 lsl.w #3,d0
01:00003C04 6100FEDE        	  6592:                 bsr SHIFTS2_FLAGS
01:00003C08 EB48            	  6593:                 lsl.w #5,d0
01:00003C0A 6100FED8        	  6594:                 bsr SHIFTS2_FLAGS
01:00003C0E 0C8080010800    	  6595:                 cmpi.l #$80010800,d0
01:00003C14 66FE            	  6596:                 bne.s *
01:00003C16 0C8500000025    	  6597:                 cmpi.l #$00000025,d5
01:00003C1C 66FE            	  6598:                 bne.s *
                            	  6599: 
                            	  6600: *        WORD RIGHT
01:00003C1E EA48            	  6601:                 lsr.w #5,d0
01:00003C20 6100FEC2        	  6602:                 bsr SHIFTS2_FLAGS
01:00003C24 E248            	  6603:                 lsr.w #1,d0
01:00003C26 6100FEBC        	  6604:                 bsr SHIFTS2_FLAGS
01:00003C2A E448            	  6605:                 lsr.w #2,d0
01:00003C2C 6100FEB6        	  6606:                 bsr SHIFTS2_FLAGS
01:00003C30 E848            	  6607:                 lsr.w #4,d0
01:00003C32 6100FEB0        	  6608:                 bsr SHIFTS2_FLAGS
01:00003C36 0C8080010000    	  6609:                 cmpi.l #$80010000,d0
01:00003C3C 66FE            	  6610:                 bne.s *
01:00003C3E 0C850000002A    	  6611:                 cmpi.l #$0000002A,d5
01:00003C44 66FE            	  6612:                 bne.s *
                            	  6613: 
                            	  6614: *        LONG LEFT
01:00003C46 203C80018FF1    	  6615:                 move.l #$80018FF1,d0
01:00003C4C E388            	  6616:                 lsl.l #1,d0
01:00003C4E 6100FE94        	  6617:                 bsr SHIFTS2_FLAGS
01:00003C52 E588            	  6618:                 lsl.l #2,d0
01:00003C54 6100FE8E        	  6619:                 bsr SHIFTS2_FLAGS
01:00003C58 EF88            	  6620:                 lsl.l #7,d0
01:00003C5A 6100FE88        	  6621:                 bsr SHIFTS2_FLAGS
01:00003C5E E988            	  6622:                 lsl.l #4,d0
01:00003C60 6100FE82        	  6623:                 bsr SHIFTS2_FLAGS
01:00003C64 0C8063FC4000    	  6624:                 cmpi.l #$63FC4000,d0
01:00003C6A 66FE            	  6625:                 bne.s *
01:00003C6C 0C850000002B    	  6626:                 cmpi.l #$0000002B,d5
01:00003C72 66FE            	  6627:                 bne.s *
                            	  6628: 
                            	  6629: *        LONG RIGHT
01:00003C74 203C80018FF1    	  6630:                 move.l #$80018FF1,d0
01:00003C7A E288            	  6631:                 lsr.l #1,d0
01:00003C7C 6100FE66        	  6632:                 bsr SHIFTS2_FLAGS
01:00003C80 EA88            	  6633:                 lsr.l #5,d0
01:00003C82 6100FE60        	  6634:                 bsr SHIFTS2_FLAGS
01:00003C86 EE88            	  6635:                 lsr.l #7,d0
01:00003C88 6100FE5A        	  6636:                 bsr SHIFTS2_FLAGS
01:00003C8C E088            	  6637:                 lsr.l #8,d0
01:00003C8E 6100FE54        	  6638:                 bsr SHIFTS2_FLAGS
01:00003C92 0C8000000400    	  6639:                 cmpi.l #$00000400,d0
01:00003C98 66FE            	  6640:                 bne.s *
01:00003C9A 0C850000002D    	  6641:                 cmpi.l #$0000002D,d5
01:00003CA0 66FE            	  6642:                 bne.s *
                            	  6643: 
                            	  6644: 
                            	  6645: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6646: 
01:00003CA2 7A00            	  6647:                 moveq  #$00000000,d5
01:00003CA4 307C0100        	  6648:                 move.l #$00000100,a0
01:00003CA8 30BC8FF1        	  6649:                 move.w #$8FF1,(a0)
                            	  6650: 
                            	  6651: *        WORD LEFT
01:00003CAC E3D0            	  6652:                 lsl  (a0)
01:00003CAE 6100FE34        	  6653:                 bsr SHIFTS2_FLAGS
01:00003CB2 E3D0            	  6654:                 lsl  (a0)
01:00003CB4 6100FE2E        	  6655:                 bsr SHIFTS2_FLAGS
01:00003CB8 E3D0            	  6656:                 lsl  (a0)
01:00003CBA 6100FE28        	  6657:                 bsr SHIFTS2_FLAGS
01:00003CBE E3D0            	  6658:                 lsl  (a0)
01:00003CC0 6100FE22        	  6659:                 bsr SHIFTS2_FLAGS
01:00003CC4 3010            	  6660:                 move.w (a0),d0
01:00003CC6 0C800000FF10    	  6661:                 cmpi.l #$0000FF10,d0
01:00003CCC 66FE            	  6662:                 bne.s *
01:00003CCE 0C8500000009    	  6663:                 cmpi.l #$00000009,d5
01:00003CD4 66FE            	  6664:                 bne.s *
                            	  6665: 
                            	  6666: *        WORD RIGHT
01:00003CD6 E2D0            	  6667:                 lsr (a0)
01:00003CD8 6100FE0A        	  6668:                 bsr SHIFTS2_FLAGS
01:00003CDC E2D0            	  6669:                 lsr (a0)
01:00003CDE 6100FE04        	  6670:                 bsr SHIFTS2_FLAGS
01:00003CE2 E2D0            	  6671:                 lsr (a0)
01:00003CE4 6100FDFE        	  6672:                 bsr SHIFTS2_FLAGS
01:00003CE8 E2D0            	  6673:                 lsr (a0)
01:00003CEA 6100FDF8        	  6674:                 bsr SHIFTS2_FLAGS
01:00003CEE E2D0            	  6675:                 lsr (a0)
01:00003CF0 6100FDF2        	  6676:                 bsr SHIFTS2_FLAGS
01:00003CF4 E2D0            	  6677:                 lsr (a0)
01:00003CF6 6100FDEC        	  6678:                 bsr SHIFTS2_FLAGS
01:00003CFA 3010            	  6679:                 move.w (a0),d0
01:00003CFC 0C80000003FC    	  6680:                 cmpi.l #$000003FC,d0
01:00003D02 66FE            	  6681:                 bne.s *
01:00003D04 0C850000000A    	  6682:                 cmpi.l #$0000000A,d5
01:00003D0A 66FE            	  6683:                 bne.s *
                            	  6684: 
01:00003D0C 4E75            	  6685:                 rts
                            	  6686: 
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ; OPCODE : BSR / RTS
                            	  6690: ;-----------------------------------------------------------
                            	  6691: ;-----------------------------------------------------------
                            	  6692: 
                            	  6693: ;t3_bsr:
                            	  6694: ;	moveq	#3,d3
                            	  6695: ;	rts
                            	  6696: 
                            	  6697: ;t1_bsr:
                            	  6698: ;	moveq	#1,d1
                            	  6699: ;	rts
                            	  6700: 
                            	  6701: ;op_bsr:
                            	  6702: ;	bsr			t1_bsr
                            	  6703: ;	bsr			t2_bsr
                            	  6704: ;	bsr.w		t3_bsr
                            	  6705: ;	bsr.w		t4_bsr
                            	  6706: ;	cmpi.l	#1,d1
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#2,d2
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#3,d3
                            	  6711: ;	bne			*
                            	  6712: ;	cmpi.l	#4,d4
                            	  6713: ;	bne			*
                            	  6714: ;	rts
                            	  6715: 
                            	  6716: ;t2_bsr:
                            	  6717: ;	moveq	#2,d2
                            	  6718: ;	rts
                            	  6719: 	
                            	  6720: ;t4_bsr:
                            	  6721: ;	moveq	#4,d4
                            	  6722: ;	rts
                            	  6723: 

Source: "boot.asm"
                            	   334: 
                            	   335: ; -----------------------------------------------------------------------------
                            	   336: ; Gets the screen color in d0 and d1.
                            	   337: ; -----------------------------------------------------------------------------
                            	   338: 
                            	   339: get_screen_color:
01:00003D0E 203900000404    	   340: 	move.l	fgcolor,d0			; get foreground color
01:00003D14 EB80            	   341: 	asl.l		#5,d0						; shift into position
01:00003D16 008040000000    	   342: 	ori.l		#$40000000,d0		; set priority
01:00003D1C 223900000408    	   343: 	move.l	bkcolor,d1
01:00003D22 E089            	   344: 	lsr.l		#8,d1
01:00003D24 E089            	   345: 	lsr.l		#8,d1
01:00003D26 02810000001F    	   346: 	andi.l	#31,d1					; mask off extra bits
01:00003D2C 8081            	   347: 	or.l		d1,d0						; set background color bits in upper long word
01:00003D2E 223900000408    	   348: 	move.l	bkcolor,d1			; get background color
01:00003D34 E181            	   349: 	asl.l		#8,d1						; shift into position for display ram
01:00003D36 E181            	   350: 	asl.l		#8,d1
01:00003D38 4E75            	   351: 	rts
                            	   352: 
                            	   353: ; -----------------------------------------------------------------------------
                            	   354: ; -----------------------------------------------------------------------------
                            	   355: 
                            	   356: clear_screen:
01:00003D3A 207900000414    	   357: 	move.l	TextScr,a0				; a0 = pointer to screen area
01:00003D40 10390000040E    	   358: 	move.b	TextRows,d0				; d0 = rows
01:00003D46 14390000040F    	   359: 	move.b	TextCols,d2				; d2 = cols
01:00003D4C 4880            	   360: 	ext.w		d0								; convert to word
01:00003D4E 4882            	   361: 	ext.w		d2								; convert to word
01:00003D50 C4C0            	   362: 	mulu		d0,d2							; d2 = number of character cells to clear
01:00003D52 61BA            	   363: 	bsr			get_screen_color	; get the color bits
01:00003D54 00410020        	   364: 	ori.w		#32,d1						; load space character
01:00003D58 E159            	   365: 	rol.w		#8,d1							; swap endian, text controller expects little endian
01:00003D5A 4841            	   366: 	swap		d1
01:00003D5C E159            	   367: 	rol.w		#8,d1
01:00003D5E E158            	   368: 	rol.w		#8,d0							; swap endian
01:00003D60 4840            	   369: 	swap		d0
01:00003D62 E158            	   370: 	rol.w		#8,d0
                            	   371: loop3:
01:00003D64 20C1            	   372: 	move.l	d1,(a0)+					; copy char plus bkcolor to cell
01:00003D66 20C0            	   373: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003D68 51CAFFFA        	   374: 	dbra		d2,loop3
01:00003D6C 4E75            	   375: 	rts
                            	   376: 
                            	   377: CRLF:
01:00003D6E 2F01            	   378: 	move.l	d1,-(a7)
01:00003D70 123C000D        	   379: 	move.b	#13,d1
01:00003D74 613E            	   380: 	bsr			DisplayChar
01:00003D76 123C000A        	   381: 	move.b	#10,d1
01:00003D7A 6138            	   382: 	bsr			DisplayChar
01:00003D7C 221F            	   383: 	move.l	(a7)+,d1
01:00003D7E 4E75            	   384: 	rts
                            	   385: 
                            	   386: ;------------------------------------------------------------------------------
                            	   387: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   388: ; Destroys d0,d2,a0
                            	   389: ;------------------------------------------------------------------------------
                            	   390: ;
                            	   391: CalcScreenLoc:
01:00003D80 10390000040C    	   392: 	move.b	CursorRow,d0		; compute screen location
01:00003D86 0240007F        	   393: 	andi.w	#$7f,d0
01:00003D8A 14390000040F    	   394: 	move.b	TextCols,d2
01:00003D90 4882            	   395: 	ext.w		d2
01:00003D92 C0C2            	   396: 	mulu.w	d2,d0
01:00003D94 14390000040D    	   397: 	move.b	CursorCol,d2
01:00003D9A 024200FF        	   398: 	andi.w	#$ff,d2
01:00003D9E D042            	   399: 	add.w		d2,d0
01:00003DA0 33C000000410    	   400: 	move.w	d0,TextCurpos		; save cursor pos
01:00003DA6 48C0            	   401: 	ext.l		d0							; make it into a long
01:00003DA8 E780            	   402: 	asl.l		#3,d0						; 8 bytes per char
01:00003DAA D0B900000414    	   403: 	add.l		TextScr,d0
01:00003DB0 2040            	   404: 	move.l	d0,a0						; a0 = screen location
01:00003DB2 4E75            	   405: 	rts
                            	   406: 
                            	   407: ;------------------------------------------------------------------------------
                            	   408: ; Display a character on the screen
                            	   409: ; d1.b = char to display
                            	   410: ;------------------------------------------------------------------------------
                            	   411: 
                            	   412: DisplayChar:
01:00003DB4 48E77000        	   413: 	movem.l	d1/d2/d3,-(a7)
01:00003DB8 0281000000FF    	   414: 	andi.l	#$ff,d1				; zero out upper bytes of d1
01:00003DBE 0C01000D        	   415: 	cmpi.b	#13,d1				; carriage return ?
01:00003DC2 6610            	   416: 	bne.s		dccr
01:00003DC4 42390000040D    	   417: 	clr.b		CursorCol			; just set cursor column to zero on a CR
01:00003DCA 61000256        	   418: 	bsr			SyncCursor		; set position in text controller
01:00003DCE 4CDF000E        	   419: 	movem.l	(a7)+,d1/d2/d3
01:00003DD2 4E75            	   420: 	rts
                            	   421: dccr:
01:00003DD4 0C010091        	   422: 	cmpi.b	#$91,d1			; cursor right ?
01:00003DD8 6620            	   423: 	bne.s   dcx6
01:00003DDA 14390000040F    	   424: 	move.b	TextCols,d2
01:00003DE0 5302            	   425: 	sub.b		#1,d2
01:00003DE2 94390000040D    	   426: 	sub.b		CursorCol,d2
01:00003DE8 670A            	   427: 	beq.s		dcx7
01:00003DEA 52390000040D    	   428: 	addi.b	#1,CursorCol
                            	   429: dcx14:
01:00003DF0 61000230        	   430: 	bsr		SyncCursor
                            	   431: dcx7:
01:00003DF4 4CDF000E        	   432: 	movem.l	(a7)+,d1/d2/d3
01:00003DF8 4E75            	   433: 	rts
                            	   434: dcx6:
01:00003DFA 0C010090        	   435: 	cmpi.b	#$90,d1			; cursor up ?
01:00003DFE 6610            	   436: 	bne.s	dcx8
01:00003E00 4A390000040C    	   437: 	cmpi.b	#0,CursorRow
01:00003E06 67EC            	   438: 	beq.s	dcx7
01:00003E08 53390000040C    	   439: 	subi.b	#1,CursorRow
01:00003E0E 60E0            	   440: 	bra.s	dcx14
                            	   441: dcx8:
01:00003E10 0C010093        	   442: 	cmpi.b	#$93,d1			; cursor left?
01:00003E14 6610            	   443: 	bne.s	dcx9
01:00003E16 4A390000040D    	   444: 	cmpi.b	#0,CursorCol
01:00003E1C 67D6            	   445: 	beq.s	dcx7
01:00003E1E 53390000040D    	   446: 	subi.b	#1,CursorCol
01:00003E24 60CA            	   447: 	bra.s	dcx14
                            	   448: dcx9:
01:00003E26 0C010092        	   449: 	cmpi.b	#$92,d1			; cursor down ?
01:00003E2A 6618            	   450: 	bne.s	dcx10
01:00003E2C 14390000040E    	   451: 	move.b	TextRows,d2
01:00003E32 5302            	   452: 	sub.b	#1,d2
01:00003E34 B4390000040C    	   453: 	cmp.b	CursorRow,d2
01:00003E3A 67B8            	   454: 	beq.s	dcx7
01:00003E3C 52390000040C    	   455: 	addi.b	#1,CursorRow
01:00003E42 60AC            	   456: 	bra.s	dcx14
                            	   457: dcx10:
01:00003E44 0C010094        	   458: 	cmpi.b	#$94,d1			; cursor home ?
01:00003E48 6618            	   459: 	bne.s	dcx11
01:00003E4A 4A390000040D    	   460: 	cmpi.b	#0,CursorCol
01:00003E50 6708            	   461: 	beq.s	dcx12
01:00003E52 42390000040D    	   462: 	clr.b	CursorCol
01:00003E58 6096            	   463: 	bra.s	dcx14
                            	   464: dcx12:
01:00003E5A 42390000040C    	   465: 	clr.b	CursorRow
01:00003E60 608E            	   466: 	bra.s	dcx14
                            	   467: dcx11:
01:00003E62 48E7E080        	   468: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003E66 0C010099        	   469: 	cmpi.b	#$99,d1			; delete ?
01:00003E6A 675C            	   470: 	beq.s		doDelete
01:00003E6C 0C010008        	   471: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003E70 6748            	   472: 	beq.s   doBackspace
01:00003E72 0C010018        	   473: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003E76 6700008C        	   474: 	beq			doCtrlX
01:00003E7A 0C01000A        	   475: 	cmpi.b	#10,d1		; linefeed ?
01:00003E7E 6728            	   476: 	beq.s		dclf
                            	   477: 
                            	   478: 	; regular char
01:00003E80 6100FEFE        	   479: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003E84 2401            	   480: 	move.l	d1,d2					; d2 = char
01:00003E86 6100FE86        	   481: 	bsr			get_screen_color	; d0,d1 = color
01:00003E8A 8282            	   482: 	or.l		d2,d1					; d1 = char + color
01:00003E8C E159            	   483: 	rol.w		#8,d1					; text controller expects little endian data
01:00003E8E 4841            	   484: 	swap		d1
01:00003E90 E159            	   485: 	rol.w		#8,d1
01:00003E92 2081            	   486: 	move.l	d1,(a0)
01:00003E94 E158            	   487: 	rol.w		#8,d0					; swap bytes
01:00003E96 4840            	   488: 	swap		d0						; swap halfs
01:00003E98 E158            	   489: 	rol.w		#8,d0					; swap remaining bytes
01:00003E9A 21400004        	   490: 	move.l	d0,4(a0)
01:00003E9E 61000088        	   491: 	bsr			IncCursorPos
01:00003EA2 6100017E        	   492: 	bsr			SyncCursor
01:00003EA6 6008            	   493: 	bra			dcx4
                            	   494: dclf:
01:00003EA8 6100009E        	   495: 	bsr			IncCursorRow
                            	   496: dcx16:
01:00003EAC 61000174        	   497: 	bsr			SyncCursor
                            	   498: dcx4:
01:00003EB0 4CDF0107        	   499: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003EB4 4CDF000E        	   500: 	movem.l	(a7)+,d1/d2/d3
01:00003EB8 4E75            	   501: 	rts
                            	   502: 
                            	   503: 	;---------------------------
                            	   504: 	; CTRL-H: backspace
                            	   505: 	;---------------------------
                            	   506: doBackspace:
01:00003EBA 4A390000040D    	   507: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003EC0 67EE            	   508: 	beq.s   dcx4						; nothing to do
01:00003EC2 53390000040D    	   509: 	subi.b	#1,CursorCol		; decrement column
                            	   510: 
                            	   511: 	;---------------------------
                            	   512: 	; Delete key
                            	   513: 	;---------------------------
                            	   514: doDelete:
01:00003EC8 48E7C080        	   515: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003ECC 6100FEB2        	   516: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003ED0 10390000040D    	   517: 	move.b	CursorCol,d0
                            	   518: .0001:
01:00003ED6 20A80008        	   519: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003EDA 2168000C0004    	   520: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003EE0 5088            	   521: 	lea			8(a0),a0
01:00003EE2 5200            	   522: 	addi.b	#1,d0
01:00003EE4 B0390000040F    	   523: 	cmp.b		TextCols,d0
01:00003EEA 65EA            	   524: 	blo.s		.0001
01:00003EEC 6100FE20        	   525: 	bsr			get_screen_color
01:00003EF0 323C0020        	   526: 	move.w	#' ',d1				; terminate line with a space
01:00003EF4 E159            	   527: 	rol.w		#8,d1
01:00003EF6 4841            	   528: 	swap		d1
01:00003EF8 E159            	   529: 	rol.w		#8,d1
01:00003EFA 2141FFF8        	   530: 	move.l	d1,-8(a0)
01:00003EFE 4CDF0103        	   531: 	movem.l	(a7)+,d0/d1/a0
01:00003F02 60A8            	   532: 	bra.s		dcx16				; finished
                            	   533: 
                            	   534: 	;---------------------------
                            	   535: 	; CTRL-X: erase line
                            	   536: 	;---------------------------
                            	   537: doCtrlX:
01:00003F04 42390000040D    	   538: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003F0A 10390000040F    	   539: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003F10 4880            	   540: 	ext.w		d0
01:00003F12 48C0            	   541: 	ext.l		d0
01:00003F14 123C0020        	   542: 	move.b	#' ',d1				; d1 = space char
                            	   543: .0001:
                            	   544: 	; DisplayChar is called recursively here
                            	   545: 	; It's safe to do because we know it won't recurse again due to the
                            	   546: 	; fact we know the character being displayed is a space char
01:00003F18 6100FE9A        	   547: 	bsr		DisplayChar			
01:00003F1C 5340            	   548: 	subq	#1,d0
01:00003F1E 66F8            	   549: 	bne.s	.0001
01:00003F20 42390000040D    	   550: 	clr.b	CursorCol			; now really go back to start of line
01:00003F26 6084            	   551: 	bra.s	dcx16				; we're done
                            	   552: 
                            	   553: ;------------------------------------------------------------------------------
                            	   554: ; Increment the cursor position, scroll the screen if needed.
                            	   555: ;------------------------------------------------------------------------------
                            	   556: 
                            	   557: IncCursorPos:
01:00003F28 527900000410    	   558: 	addi.w	#1,TextCurpos
01:00003F2E 52390000040D    	   559: 	addi.b	#1,CursorCol
01:00003F34 10390000040F    	   560: 	move.b	TextCols,d0
01:00003F3A B0390000040D    	   561: 	cmp.b		CursorCol,d0
01:00003F40 6438            	   562: 	bhs.s		icc1
01:00003F42 42390000040D    	   563: 	clr.b		CursorCol
                            	   564: IncCursorRow:
01:00003F48 52390000040C    	   565: 	addi.b	#1,CursorRow
01:00003F4E 10390000040E    	   566: 	move.b	TextRows,d0
01:00003F54 B0390000040C    	   567: 	cmp.b		CursorRow,d0
01:00003F5A 621E            	   568: 	bhi.s		icc1
01:00003F5C 10390000040E    	   569: 	move.b	TextRows,d0
01:00003F62 13C00000040C    	   570: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003F68 53390000040C    	   571: 	subi.b	#1,CursorRow
01:00003F6E 4880            	   572: 	ext.w		d0
01:00003F70 D040            	   573: 	asl.w		#1,d0
01:00003F72 917900000410    	   574: 	sub.w		d0,TextCurpos
01:00003F78 6102            	   575: 	bsr			ScrollUp
                            	   576: icc1:
01:00003F7A 4E75            	   577: 	rts
                            	   578: 
                            	   579: ;------------------------------------------------------------------------------
                            	   580: ; Scroll screen up.
                            	   581: ;------------------------------------------------------------------------------
                            	   582: 
                            	   583: ScrollUp:
01:00003F7C 48E7C084        	   584: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
01:00003F80 2A7900000414    	   585: 	move.l	TextScr,a5					; a5 = pointer to text screen
                            	   586: .0003:								
01:00003F86 10390000040F    	   587: 	move.b	TextCols,d0					; d0 = columns
01:00003F8C 12390000040E    	   588: 	move.b	TextRows,d1					; d1 = rows
01:00003F92 4880            	   589: 	ext.w		d0									; make cols into a word value
01:00003F94 4881            	   590: 	ext.w		d1									; make rows into a word value
01:00003F96 E740            	   591: 	asl.w		#3,d0								; make into cell index
01:00003F98 41F50000        	   592: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
01:00003F9C E648            	   593: 	lsr.w		#3,d0								; get back d0
01:00003F9E 5341            	   594: 	subq		#1,d1								; number of rows-1
01:00003FA0 C0C1            	   595: 	mulu		d1,d0								; d0 = count of characters to move
                            	   596: .0001:
01:00003FA2 2AD8            	   597: 	move.l	(a0)+,(a5)+					; each char is 64 bits
01:00003FA4 2AD8            	   598: 	move.l	(a0)+,(a5)+
01:00003FA6 51C8FFFA        	   599: 	dbra		d0,.0001
01:00003FAA 4CDF2103        	   600: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   601: 	; Fall through into blanking out last line
                            	   602: 
                            	   603: ;------------------------------------------------------------------------------
                            	   604: ; Blank out the last line on the screen.
                            	   605: ;------------------------------------------------------------------------------
                            	   606: 
                            	   607: BlankLastLine:
01:00003FAE 48E7E004        	   608: 	movem.l	d0/d1/d2/a5,-(a7)
01:00003FB2 2A7900000414    	   609: 	move.l	TextScr,a5
01:00003FB8 10390000040E    	   610: 	move.b	TextRows,d0					; d0 = columns
01:00003FBE 12390000040F    	   611: 	move.b	TextCols,d1					; d1 = rows
01:00003FC4 4880            	   612: 	ext.w		d0
01:00003FC6 4881            	   613: 	ext.w		d1
01:00003FC8 5341            	   614: 	subq		#1,d1								; last row = #rows-1
01:00003FCA C0C1            	   615: 	mulu		d1,d0								; d0 = index of last line
01:00003FCC E740            	   616: 	asl.w		#3,d0								; *8 bytes per char
01:00003FCE 4BF50000        	   617: 	lea			(a5,d0.w),a5				; point a5 to last row
01:00003FD2 14390000040F    	   618: 	move.b	TextCols,d2					; number of text cells to clear
01:00003FD8 4882            	   619: 	ext.w		d2
01:00003FDA 5342            	   620: 	subi.w	#1,d2
01:00003FDC 6100FD30        	   621: 	bsr			get_screen_color
01:00003FE0 00410020        	   622: 	ori.w		#32,d1		
                            	   623: .0001:
01:00003FE4 2AC1            	   624: 	move.l	d1,(a5)+
01:00003FE6 2AC0            	   625: 	move.l	d0,(a5)+
01:00003FE8 51CAFFFA        	   626: 	dbra		d2,.0001
01:00003FEC 4CDF2007        	   627: 	movem.l	(a7)+,d0/d1/d2/a5
01:00003FF0 4E75            	   628: 	rts
                            	   629: 
                            	   630: ;------------------------------------------------------------------------------
                            	   631: ; Display a string on the screen.
                            	   632: ;------------------------------------------------------------------------------
                            	   633: 
                            	   634: DisplayString:
01:00003FF2 48E7C040        	   635: 	movem.l	d0/d1/a1,-(a7)
                            	   636: dspj1:
01:00003FF6 7200            	   637: 	clr.l		d1				; clear upper bits of d1
01:00003FF8 1219            	   638: 	move.b	(a1)+,d1		; move string char into d1
01:00003FFA 4A01            	   639: 	cmpi.b	#0,d1			; is it end of string ?
01:00003FFC 6706            	   640: 	beq.s		dsret			
01:00003FFE 6100FDB4        	   641: 	bsr			DisplayChar		; display character
01:00004002 60F2            	   642: 	bra.s		dspj1			; go back for next character
                            	   643: dsret:
01:00004004 4CDF0203        	   644: 	movem.l	(a7)+,d0/d1/a1
01:00004008 4E75            	   645: 	rts
                            	   646: 
                            	   647: ;------------------------------------------------------------------------------
                            	   648: ; Display a string on the screen followed by carriage return / linefeed.
                            	   649: ;------------------------------------------------------------------------------
                            	   650: 
                            	   651: DisplayStringCRLF:
01:0000400A 61E6            	   652: 	bsr		DisplayString
01:0000400C 6000FD60        	   653: 	bra		CRLF
                            	   654: 
                            	   655: ;------------------------------------------------------------------------------
                            	   656: ; Set cursor position to top left of screen.
                            	   657: ;
                            	   658: ; Parameters:
                            	   659: ;		<none>
                            	   660: ; Returns:
                            	   661: ;		<none>
                            	   662: ; Registers Affected:
                            	   663: ;		<none>
                            	   664: ;------------------------------------------------------------------------------
                            	   665: 
                            	   666: HomeCursor:
01:00004010 42390000040C    	   667: 	clr.b		CursorRow
01:00004016 42390000040D    	   668: 	clr.b		CursorCol
01:0000401C 427900000410    	   669: 	clr.w		TextPos
                            	   670: 	; fall through
                            	   671: 
                            	   672: ;------------------------------------------------------------------------------
                            	   673: ; SyncCursor:
                            	   674: ;
                            	   675: ; Sync the hardware cursor's position to the text cursor position.
                            	   676: ;
                            	   677: ; Parameters:
                            	   678: ;		<none>
                            	   679: ; Returns:
                            	   680: ;		<none>
                            	   681: ; Registers Affected:
                            	   682: ;		<none>
                            	   683: ;------------------------------------------------------------------------------
                            	   684: 
                            	   685: SyncCursor:
01:00004022 48E74002        	   686: 	movem.l	d1/a6,-(a7)
01:00004026 2C7CFD01FF00    	   687: 	move.l	#TEXTREG,a6
01:0000402C 323900000410    	   688: 	move.w	TextPos,d1
01:00004032 E159            	   689: 	rol.w		#8,d1						; swap byte order
01:00004034 3D410024        	   690: 	move.w	d1,$24(a6)
01:00004038 4CDF4002        	   691: 	movem.l	(a7)+,d1/a6
01:0000403C 4E75            	   692: 	rts
                            	   693: 
                            	   694: ;==============================================================================
                            	   695: ; Keyboard stuff
                            	   696: ;
                            	   697: ; KeyState2_
                            	   698: ; 876543210
                            	   699: ; ||||||||+ = shift
                            	   700: ; |||||||+- = alt
                            	   701: ; ||||||+-- = control
                            	   702: ; |||||+--- = numlock
                            	   703: ; ||||+---- = capslock
                            	   704: ; |||+----- = scrolllock
                            	   705: ; ||+------ =
                            	   706: ; |+------- = 
                            	   707: ; +-------- = extended
                            	   708: ;
                            	   709: ;==============================================================================
                            	   710: 
                            	   711: _KeybdInit:
01:0000403E 42390000041F    	   712: 	clr.b	_KeyState1
01:00004044 423900000420    	   713: 	clr.b	_KeyState2
01:0000404A 4E75            	   714: 	rts
                            	   715: 
                            	   716: _KeybdGetStatus:
01:0000404C 1239FD0FFE01    	   717: 	move.b	KEYBD+1,d1
01:00004052 4E75            	   718: 	rts
                            	   719: 
                            	   720: ; Get the scancode from the keyboard port
                            	   721: ;
                            	   722: _KeybdGetScancode:
01:00004054 7200            	   723: 	moveq	#0,d1
01:00004056 1239FD0FFE00    	   724: 	move.b	KEYBD,d1				; get the scan code
01:0000405C 13FC0000FD0FFE01	   725: 	move.b	#0,KEYBD+1				; clear receive register
01:00004064 4E75            	   726: 	rts
                            	   727: 
                            	   728: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   729: ; keyboard in order to wait for a response.
                            	   730: ;
                            	   731: KeybdRecvByte:
01:00004066 2F03            	   732: 	move.l	d3,-(a7)
01:00004068 363C0064        	   733: 	move.w	#100,d3		; wait up to 1s
                            	   734: .0003:
01:0000406C 61DE            	   735: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:0000406E 4A01            	   736: 	tst.b	d1
01:00004070 6B0E            	   737: 	bmi		.0004		; is input buffer full ? yes, branch
01:00004072 610002BA        	   738: 	bsr		Wait10ms		; wait a bit
01:00004076 51CBFFF4        	   739: 	dbra	d3,.0003	; go back and try again
01:0000407A 261F            	   740: 	move.l	(a7)+,d3
01:0000407C 72FF            	   741: 	moveq	#-1,d1			; return -1
01:0000407E 4E75            	   742: 	rts
                            	   743: .0004:
01:00004080 61D2            	   744: 	bsr		_KeybdGetScancode
01:00004082 261F            	   745: 	move.l	(a7)+,d3
01:00004084 4E75            	   746: 	rts
                            	   747: 
                            	   748: 
                            	   749: ; Wait until the keyboard transmit is complete
                            	   750: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	   751: ;
                            	   752: KeybdWaitTx:
01:00004086 48E73000        	   753: 	movem.l	d2/d3,-(a7)
01:0000408A 7664            	   754: 	moveq	#100,d3		; wait a max of 1s
                            	   755: .0001:
01:0000408C 61BE            	   756: 	bsr		_KeybdGetStatus
01:0000408E 08010006        	   757: 	btst	#6,d1		; check for transmit complete bit
01:00004092 6610            	   758: 	bne	    .0002		; branch if bit set
01:00004094 61000298        	   759: 	bsr		Wait10ms		; delay a little bit
01:00004098 51CBFFF2        	   760: 	dbra	d3,.0001	; go back and try again
01:0000409C 4CDF000C        	   761: 	movem.l	(a7)+,d2/d3
01:000040A0 72FF            	   762: 	moveq	#-1,d1		; return -1
01:000040A2 4E75            	   763: 	rts
                            	   764: .0002:
01:000040A4 4CDF000C        	   765: 	movem.l	(a7)+,d2/d3
01:000040A8 7200            	   766: 	moveq	#0,d1		; return 0
01:000040AA 4E75            	   767: 	rts
                            	   768: 
                            	   769: 
                            	   770: ;------------------------------------------------------------------------------
                            	   771: ; get key pending status into d1.b
                            	   772: ;------------------------------------------------------------------------------
                            	   773: ;
                            	   774: CheckForKey:
01:000040AC 1239FD0FFE01    	   775: 	move.b	KEYBD+1,d1
01:000040B2 6A06            	   776: 	bpl.s		cfk1
01:000040B4 123C0001        	   777: 	move.b	#1,d1
01:000040B8 4E75            	   778: 	rts
                            	   779: cfk1:
01:000040BA 4201            	   780: 	clr.b		d1
01:000040BC 4E75            	   781: 	rts
                            	   782: 
                            	   783: ;------------------------------------------------------------------------------
                            	   784: ;------------------------------------------------------------------------------
                            	   785: 
                            	   786: GetKey:
01:000040BE 6130            	   787: 	bsr			KeybdGetCharWait
01:000040C0 4A390000041C    	   788: 	cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
01:000040C6 670E            	   789: 	beq.s		gk1
01:000040C8 0C01000D        	   790: 	cmpi.b	#CR,d1				; convert CR keystroke into CRLF
01:000040CC 6700FCA0        	   791: 	beq			CRLF
01:000040D0 4E75            	   792: 	rts
01:000040D2 6000FCE0        	   793: 	bra			DisplayChar
                            	   794: gk1:
                            	   795: ;	move.l	d1,d7
                            	   796: ;	bsr			DisplayByte
                            	   797: ;	moveq		#32,d1
                            	   798: ;	bsr			DisplayChar
                            	   799: ;	move.l	d7,d1
01:000040D6 4E75            	   800: 	rts
                            	   801: 
                            	   802: CheckForCtrlC
01:000040D8 61D2            	   803: 	bsr			CheckForKey
01:000040DA 670A            	   804: 	beq.s		.0001
01:000040DC 611A            	   805: 	bsr			KeybdGetChar
01:000040DE B23C0003        	   806: 	cmp.b		#CTRLC,d1
01:000040E2 67000566        	   807: 	beq			Monitor
                            	   808: .0001:
01:000040E6 4E75            	   809: 	rts
                            	   810: 
                            	   811: ;------------------------------------------------------------------------------
                            	   812: ;------------------------------------------------------------------------------
                            	   813: 
                            	   814: KeybdGetCharNoWait:
01:000040E8 42390000041D    	   815: 	clr.b	KeybdWaitFlag
01:000040EE 6008            	   816: 	bra		KeybdGetChar
                            	   817: 
                            	   818: KeybdGetCharWait:
01:000040F0 13FC00FF0000041D	   819: 	move.b	#-1,KeybdWaitFlag
                            	   820: 
                            	   821: KeybdGetChar:
01:000040F8 48E73080        	   822: 	movem.l	d2/d3/a0,-(a7)
                            	   823: .0003:
01:000040FC 6100FF4E        	   824: 	bsr		_KeybdGetStatus			; check keyboard status for key available
01:00004100 6B10            	   825: 	bmi		.0006					; yes, go process
01:00004102 4A390000041D    	   826: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:00004108 6BF2            	   827: 	bmi		.0003					; yes, branch back
01:0000410A 4CDF010C        	   828: 	movem.l	(a7)+,d2/d3/a0
01:0000410E 72FF            	   829: 	moveq	#-1,d1					; flag no char available
01:00004110 4E75            	   830: 	rts
                            	   831: .0006:
01:00004112 6100FF40        	   832: 	bsr		_KeybdGetScancode
                            	   833: .0001:
01:00004116 33FC0001FD0FFF00	   834: 	move.w	#1,leds
01:0000411E B23C00F0        	   835: 	cmp.b	#SC_KEYUP,d1
01:00004122 670000C2        	   836: 	beq		.doKeyup
01:00004126 B23C00E0        	   837: 	cmp.b	#SC_EXTEND,d1
01:0000412A 670000C6        	   838: 	beq		.doExtend
01:0000412E B23C0014        	   839: 	cmp.b	#SC_CTRL,d1
01:00004132 670000CA        	   840: 	beq		.doCtrl
01:00004136 B23C0012        	   841: 	cmp.b	#SC_LSHIFT,d1
01:0000413A 6700012C        	   842: 	beq		.doShift
01:0000413E B23C0059        	   843: 	cmp.b	#SC_RSHIFT,d1
01:00004142 67000124        	   844: 	beq		.doShift
01:00004146 B23C0077        	   845: 	cmp.b	#SC_NUMLOCK,d1
01:0000414A 67000144        	   846: 	beq		.doNumLock
01:0000414E B23C0058        	   847: 	cmp.b	#SC_CAPSLOCK,d1
01:00004152 6700014A        	   848: 	beq		.doCapsLock
01:00004156 B23C007E        	   849: 	cmp.b	#SC_SCROLLLOCK,d1
01:0000415A 67000150        	   850: 	beq		.doScrollLock
01:0000415E B23C0011        	   851: 	cmp.b   #SC_ALT,d1
01:00004162 670000C2        	   852: 	beq     .doAlt
01:00004166 14390000041F    	   853: 	move.b	_KeyState1,d2			; check key up/down
01:0000416C 13FC00000000041F	   854: 	move.b	#0,_KeyState1			; clear keyup status
01:00004174 4A02            	   855: 	tst.b	d2
01:00004176 6684            	   856: 	bne	    .0003					; ignore key up
01:00004178 B23C000D        	   857: 	cmp.b   #SC_TAB,d1
01:0000417C 670000D0        	   858: 	beq     .doTab
                            	   859: .0013:
01:00004180 143900000420    	   860: 	move.b	_KeyState2,d2
01:00004186 6A1C            	   861: 	bpl		.0010					; is it extended code ?
01:00004188 C43C007F        	   862: 	and.b	#$7F,d2					; clear extended bit
01:0000418C 13C200000420    	   863: 	move.b	d2,_KeyState2
01:00004192 13FC00000000041F	   864: 	move.b	#0,_KeyState1			; clear keyup
01:0000419A 41FA0422        	   865: 	lea		_keybdExtendedCodes,a0
01:0000419E 12301000        	   866: 	move.b	(a0,d1.w),d1
01:000041A2 6034            	   867: 	bra		.0008
                            	   868: .0010:
01:000041A4 08020002        	   869: 	btst	#2,d2					; is it CTRL code ?
01:000041A8 670E            	   870: 	beq		.0009
01:000041AA C27C007F        	   871: 	and.w	#$7F,d1
01:000041AE 41FA038E        	   872: 	lea		_keybdControlCodes,a0
01:000041B2 12301000        	   873: 	move.b	(a0,d1.w),d1
01:000041B6 6020            	   874: 	bra		.0008
                            	   875: .0009:
01:000041B8 08020000        	   876: 	btst	#0,d2					; is it shift down ?
01:000041BC 670A            	   877: 	beq  	.0007
01:000041BE 41FA027E        	   878: 	lea		_shiftedScanCodes,a0
01:000041C2 12301000        	   879: 	move.b	(a0,d1.w),d1
01:000041C6 6010            	   880: 	bra		.0008
                            	   881: .0007:
01:000041C8 41FA0174        	   882: 	lea		_unshiftedScanCodes,a0
01:000041CC 12301000        	   883: 	move.b	(a0,d1.w),d1
01:000041D0 33FC0202FD0FFF00	   884: 	move.w	#$0202,leds
                            	   885: .0008:
01:000041D8 33FC0303FD0FFF00	   886: 	move.w	#$0303,leds
01:000041E0 4CDF010C        	   887: 	movem.l	(a7)+,d2/d3/a0
01:000041E4 4E75            	   888: 	rts
                            	   889: .doKeyup:
01:000041E6 13FC00FF0000041F	   890: 	move.b	#-1,_KeyState1
01:000041EE 6000FF0C        	   891: 	bra		.0003
                            	   892: .doExtend:
01:000041F2 0039008000000420	   893: 	or.b	#$80,_KeyState2
01:000041FA 6000FF00        	   894: 	bra		.0003
                            	   895: .doCtrl:
01:000041FE 12390000041F    	   896: 	move.b	_KeyState1,d1
01:00004204 42390000041F    	   897: 	clr.b	_KeyState1
01:0000420A 4A01            	   898: 	tst.b	d1
01:0000420C 6A0C            	   899: 	bpl.s	.0004
01:0000420E 08B9000200000420	   900: 	bclr	#2,_KeyState2
01:00004216 6000FEE4        	   901: 	bra		.0003
                            	   902: .0004:
01:0000421A 08F9000200000420	   903: 	bset	#2,_KeyState2
01:00004222 6000FED8        	   904: 	bra		.0003
                            	   905: .doAlt:
01:00004226 12390000041F    	   906: 	move.b	_KeyState1,d1
01:0000422C 42390000041F    	   907: 	clr.b	_KeyState1
01:00004232 4A01            	   908: 	tst.b	d1
01:00004234 6A0C            	   909: 	bpl		.0011
01:00004236 08B9000100000420	   910: 	bclr	#1,_KeyState2
01:0000423E 6000FEBC        	   911: 	bra		.0003
                            	   912: .0011:
01:00004242 08F9000100000420	   913: 	bset	#1,_KeyState2
01:0000424A 6000FEB0        	   914: 	bra		.0003
                            	   915: .doTab:
01:0000424E 2F01            	   916: 	move.l	d1,-(a7)
01:00004250 123900000420    	   917:   move.b  _KeyState2,d1
01:00004256 08010000        	   918:   btst	#0,d1                 ; is ALT down ?
01:0000425A 6706            	   919:   beq     .0012
                            	   920: ;    	inc     _iof_switch
01:0000425C 221F            	   921:   move.l	(a7)+,d1
01:0000425E 6000FE9C        	   922:   bra     .0003
                            	   923: .0012:
01:00004262 221F            	   924:   move.l	(a7)+,d1
01:00004264 6000FF1A        	   925:   bra     .0013
                            	   926: .doShift:
01:00004268 12390000041F    	   927: 	move.b	_KeyState1,d1
01:0000426E 42390000041F    	   928: 	clr.b	_KeyState1
01:00004274 4A01            	   929: 	tst.b	d1
01:00004276 6A0C            	   930: 	bpl.s	.0005
01:00004278 08B9000000000420	   931: 	bclr	#0,_KeyState2
01:00004280 6000FE7A        	   932: 	bra		.0003
                            	   933: .0005:
01:00004284 08F9000000000420	   934: 	bset	#0,_KeyState2
01:0000428C 6000FE6E        	   935: 	bra		.0003
                            	   936: .doNumLock:
01:00004290 0879000400000420	   937: 	bchg	#4,_KeyState2
01:00004298 6120            	   938: 	bsr		KeybdSetLEDStatus
01:0000429A 6000FE60        	   939: 	bra		.0003
                            	   940: .doCapsLock:
01:0000429E 0879000500000420	   941: 	bchg	#5,_KeyState2
01:000042A6 6112            	   942: 	bsr		KeybdSetLEDStatus
01:000042A8 6000FE52        	   943: 	bra		.0003
                            	   944: .doScrollLock:
01:000042AC 0879000600000420	   945: 	bchg	#6,_KeyState2
01:000042B4 6104            	   946: 	bsr		KeybdSetLEDStatus
01:000042B6 6000FE44        	   947: 	bra		.0003
                            	   948: 
                            	   949: KeybdSetLEDStatus:
01:000042BA 48E73000        	   950: 	movem.l	d2/d3,-(a7)
01:000042BE 42390000041E    	   951: 	clr.b	KeybdLEDs
01:000042C4 0839000400000420	   952: 	btst	#4,_KeyState2
01:000042CC 6708            	   953: 	beq.s	.0002
01:000042CE 13FC00020000041E	   954: 	move.b	#2,KeybdLEDs
                            	   955: .0002:
01:000042D6 0839000500000420	   956: 	btst	#5,_KeyState2
01:000042DE 6708            	   957: 	beq.s	.0003
01:000042E0 08F900020000041E	   958: 	bset	#2,KeybdLEDs
                            	   959: .0003:
01:000042E8 0839000600000420	   960: 	btst	#6,_KeyState2
01:000042F0 6708            	   961: 	beq.s	.0004
01:000042F2 08F900000000041E	   962: 	bset	#0,KeybdLEDs
                            	   963: .0004:
01:000042FA 123C00ED        	   964: 	move.b	#$ED,d1
01:000042FE 6126            	   965: 	bsr		KeybdSendByte
01:00004300 6100FD84        	   966: 	bsr		KeybdWaitTx
01:00004304 6100FD60        	   967: 	bsr		KeybdRecvByte
01:00004308 4A01            	   968: 	tst.b	d1
01:0000430A 6B14            	   969: 	bmi		.0001
01:0000430C B27C00FA        	   970: 	cmp		#$FA,d1
01:00004310 12390000041E    	   971: 	move.b	KeybdLEDs,d1
01:00004316 610E            	   972: 	bsr		KeybdSendByte
01:00004318 6100FD6C        	   973: 	bsr		KeybdWaitTx
01:0000431C 6100FD48        	   974: 	bsr		KeybdRecvByte
                            	   975: .0001:
01:00004320 4CDF000C        	   976: 	movem.l	(a7)+,d2/d3
01:00004324 4E75            	   977: 	rts
                            	   978: 
                            	   979: KeybdSendByte:
01:00004326 13C1FD0FFE00    	   980: 	move.b	d1,KEYBD
01:0000432C 4E75            	   981: 	rts
                            	   982: 	
                            	   983: Wait10ms:
01:0000432E 2F03            	   984: 	move.l	d3,-(a7)
01:00004330 263C000003E8    	   985: 	move.l	#1000,d3
                            	   986: .0001:
01:00004336 51CBFFFE        	   987: 	dbra	d3,.0001
01:0000433A 261F            	   988: 	move.l	(a7)+,d3
01:0000433C 4E75            	   989: 	rts
                            	   990: 
                            	   991: 
                            	   992: ;--------------------------------------------------------------------------
                            	   993: ; PS2 scan codes to ascii conversion tables.
                            	   994: ;--------------------------------------------------------------------------
                            	   995: ;
                            	   996: _unshiftedScanCodes:
01:0000433E 2E              	   997: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:0000433F A9
01:00004340 2E
01:00004341 A5
01:00004342 A3
01:00004343 A1
01:00004344 A2
01:00004345 AC
01:00004346 2E              	   998: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:00004347 AA
01:00004348 A8
01:00004349 A6
01:0000434A A4
01:0000434B 09
01:0000434C 60
01:0000434D 2E
01:0000434E 2E              	   999: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:0000434F 2E
01:00004350 2E
01:00004351 2E
01:00004352 2E
01:00004353 71
01:00004354 31
01:00004355 2E
01:00004356 2E              	  1000: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:00004357 2E
01:00004358 7A
01:00004359 73
01:0000435A 61
01:0000435B 77
01:0000435C 32
01:0000435D 2E
01:0000435E 2E              	  1001: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:0000435F 63
01:00004360 78
01:00004361 64
01:00004362 65
01:00004363 34
01:00004364 33
01:00004365 2E
01:00004366 2E              	  1002: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:00004367 20
01:00004368 76
01:00004369 66
01:0000436A 74
01:0000436B 72
01:0000436C 35
01:0000436D 2E
01:0000436E 2E              	  1003: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:0000436F 6E
01:00004370 62
01:00004371 68
01:00004372 67
01:00004373 79
01:00004374 36
01:00004375 2E
01:00004376 2E              	  1004: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:00004377 2E
01:00004378 6D
01:00004379 6A
01:0000437A 75
01:0000437B 37
01:0000437C 38
01:0000437D 2E
01:0000437E 2E              	  1005: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:0000437F 2C
01:00004380 6B
01:00004381 69
01:00004382 6F
01:00004383 30
01:00004384 39
01:00004385 2E
01:00004386 2E              	  1006: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:00004387 2E
01:00004388 2F
01:00004389 6C
01:0000438A 3B
01:0000438B 70
01:0000438C 2D
01:0000438D 2E
01:0000438E 2E              	  1007: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:0000438F 2E
01:00004390 27
01:00004391 2E
01:00004392 5B
01:00004393 3D
01:00004394 2E
01:00004395 2E
01:00004396 AD              	  1008: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:00004397 2E
01:00004398 0D
01:00004399 5D
01:0000439A 2E
01:0000439B 5C
01:0000439C 2E
01:0000439D 2E
01:0000439E 2E              	  1009: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:0000439F 2E
01:000043A0 2E
01:000043A1 2E
01:000043A2 2E
01:000043A3 2E
01:000043A4 08
01:000043A5 2E
01:000043A6 2E              	  1010: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:000043A7 95
01:000043A8 2E
01:000043A9 93
01:000043AA 94
01:000043AB 2E
01:000043AC 2E
01:000043AD 2E
01:000043AE 98              	  1011: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:000043AF 7F
01:000043B0 92
01:000043B1 2E
01:000043B2 91
01:000043B3 90
01:000043B4 1B
01:000043B5 AF
01:000043B6 AB              	  1012: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:000043B7 2E
01:000043B8 97
01:000043B9 2E
01:000043BA 2E
01:000043BB 96
01:000043BC AE
01:000043BD 2E
                            	  1013: 
01:000043BE 2E              	  1014: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:000043BF 2E
01:000043C0 2E
01:000043C1 A7
01:000043C2 2E
01:000043C3 2E
01:000043C4 2E
01:000043C5 2E
01:000043C6 2E              	  1015: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043C7 2E
01:000043C8 2E
01:000043C9 2E
01:000043CA 2E
01:000043CB 2E
01:000043CC 2E
01:000043CD 2E
01:000043CE 2E              	  1016: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043CF 2E
01:000043D0 2E
01:000043D1 2E
01:000043D2 2E
01:000043D3 2E
01:000043D4 2E
01:000043D5 2E
01:000043D6 2E              	  1017: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043D7 2E
01:000043D8 2E
01:000043D9 2E
01:000043DA 2E
01:000043DB 2E
01:000043DC 2E
01:000043DD 2E
01:000043DE 2E              	  1018: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043DF 2E
01:000043E0 2E
01:000043E1 2E
01:000043E2 2E
01:000043E3 2E
01:000043E4 2E
01:000043E5 2E
01:000043E6 2E              	  1019: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043E7 2E
01:000043E8 2E
01:000043E9 2E
01:000043EA 2E
01:000043EB 2E
01:000043EC 2E
01:000043ED 2E
01:000043EE 2E              	  1020: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043EF 2E
01:000043F0 2E
01:000043F1 2E
01:000043F2 2E
01:000043F3 2E
01:000043F4 2E
01:000043F5 2E
01:000043F6 2E              	  1021: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043F7 2E
01:000043F8 2E
01:000043F9 2E
01:000043FA 2E
01:000043FB 2E
01:000043FC 2E
01:000043FD 2E
01:000043FE 2E              	  1022: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043FF 2E
01:00004400 2E
01:00004401 2E
01:00004402 2E
01:00004403 2E
01:00004404 2E
01:00004405 2E
01:00004406 2E              	  1023: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004407 2E
01:00004408 2E
01:00004409 2E
01:0000440A 2E
01:0000440B 2E
01:0000440C 2E
01:0000440D 2E
01:0000440E 2E              	  1024: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000440F 2E
01:00004410 2E
01:00004411 2E
01:00004412 2E
01:00004413 2E
01:00004414 2E
01:00004415 2E
01:00004416 2E              	  1025: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004417 2E
01:00004418 2E
01:00004419 2E
01:0000441A 2E
01:0000441B 2E
01:0000441C 2E
01:0000441D 2E
01:0000441E 2E              	  1026: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000441F 2E
01:00004420 2E
01:00004421 2E
01:00004422 2E
01:00004423 2E
01:00004424 2E
01:00004425 2E
01:00004426 2E              	  1027: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004427 2E
01:00004428 2E
01:00004429 2E
01:0000442A 2E
01:0000442B 2E
01:0000442C 2E
01:0000442D 2E
01:0000442E 2E              	  1028: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000442F 2E
01:00004430 2E
01:00004431 2E
01:00004432 2E
01:00004433 2E
01:00004434 2E
01:00004435 2E
01:00004436 2E              	  1029: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:00004437 2E
01:00004438 FA
01:00004439 2E
01:0000443A 2E
01:0000443B 2E
01:0000443C 2E
01:0000443D 2E
                            	  1030: 
                            	  1031: _shiftedScanCodes:
01:0000443E 2E              	  1032: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000443F 2E
01:00004440 2E
01:00004441 2E
01:00004442 2E
01:00004443 2E
01:00004444 2E
01:00004445 2E
01:00004446 2E              	  1033: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:00004447 2E
01:00004448 2E
01:00004449 2E
01:0000444A 2E
01:0000444B 09
01:0000444C 7E
01:0000444D 2E
01:0000444E 2E              	  1034: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:0000444F 2E
01:00004450 2E
01:00004451 2E
01:00004452 2E
01:00004453 51
01:00004454 21
01:00004455 2E
01:00004456 2E              	  1035: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:00004457 2E
01:00004458 5A
01:00004459 53
01:0000445A 41
01:0000445B 57
01:0000445C 40
01:0000445D 2E
01:0000445E 2E              	  1036: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:0000445F 43
01:00004460 58
01:00004461 44
01:00004462 45
01:00004463 24
01:00004464 23
01:00004465 2E
01:00004466 2E              	  1037: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:00004467 20
01:00004468 56
01:00004469 46
01:0000446A 54
01:0000446B 52
01:0000446C 25
01:0000446D 2E
01:0000446E 2E              	  1038: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:0000446F 4E
01:00004470 42
01:00004471 48
01:00004472 47
01:00004473 59
01:00004474 5E
01:00004475 2E
01:00004476 2E              	  1039: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:00004477 2E
01:00004478 4D
01:00004479 4A
01:0000447A 55
01:0000447B 26
01:0000447C 2A
01:0000447D 2E
01:0000447E 2E              	  1040: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:0000447F 3C
01:00004480 4B
01:00004481 49
01:00004482 4F
01:00004483 29
01:00004484 28
01:00004485 2E
01:00004486 2E              	  1041: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:00004487 3E
01:00004488 3F
01:00004489 4C
01:0000448A 3A
01:0000448B 50
01:0000448C 5F
01:0000448D 2E
01:0000448E 2E              	  1042: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:0000448F 2E
01:00004490 22
01:00004491 2E
01:00004492 7B
01:00004493 2B
01:00004494 2E
01:00004495 2E
01:00004496 2E              	  1043: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004497 2E
01:00004498 0D
01:00004499 7D
01:0000449A 2E
01:0000449B 7C
01:0000449C 2E
01:0000449D 2E
01:0000449E 2E              	  1044: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:0000449F 2E
01:000044A0 2E
01:000044A1 2E
01:000044A2 2E
01:000044A3 2E
01:000044A4 08
01:000044A5 2E
01:000044A6 2E              	  1045: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044A7 2E
01:000044A8 2E
01:000044A9 2E
01:000044AA 2E
01:000044AB 2E
01:000044AC 2E
01:000044AD 2E
01:000044AE 2E              	  1046: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:000044AF 7F
01:000044B0 2E
01:000044B1 2E
01:000044B2 2E
01:000044B3 2E
01:000044B4 1B
01:000044B5 2E
01:000044B6 2E              	  1047: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044B7 2E
01:000044B8 2E
01:000044B9 2E
01:000044BA 2E
01:000044BB 2E
01:000044BC 2E
01:000044BD 2E
                            	  1048: 
01:000044BE 2E              	  1049: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044BF 2E
01:000044C0 2E
01:000044C1 2E
01:000044C2 2E
01:000044C3 2E
01:000044C4 2E
01:000044C5 2E
01:000044C6 2E              	  1050: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044C7 2E
01:000044C8 2E
01:000044C9 2E
01:000044CA 2E
01:000044CB 2E
01:000044CC 2E
01:000044CD 2E
01:000044CE 2E              	  1051: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044CF 2E
01:000044D0 2E
01:000044D1 2E
01:000044D2 2E
01:000044D3 2E
01:000044D4 2E
01:000044D5 2E
01:000044D6 2E              	  1052: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044D7 2E
01:000044D8 2E
01:000044D9 2E
01:000044DA 2E
01:000044DB 2E
01:000044DC 2E
01:000044DD 2E
01:000044DE 2E              	  1053: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044DF 2E
01:000044E0 2E
01:000044E1 2E
01:000044E2 2E
01:000044E3 2E
01:000044E4 2E
01:000044E5 2E
01:000044E6 2E              	  1054: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044E7 2E
01:000044E8 2E
01:000044E9 2E
01:000044EA 2E
01:000044EB 2E
01:000044EC 2E
01:000044ED 2E
01:000044EE 2E              	  1055: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044EF 2E
01:000044F0 2E
01:000044F1 2E
01:000044F2 2E
01:000044F3 2E
01:000044F4 2E
01:000044F5 2E
01:000044F6 2E              	  1056: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044F7 2E
01:000044F8 2E
01:000044F9 2E
01:000044FA 2E
01:000044FB 2E
01:000044FC 2E
01:000044FD 2E
01:000044FE 2E              	  1057: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044FF 2E
01:00004500 2E
01:00004501 2E
01:00004502 2E
01:00004503 2E
01:00004504 2E
01:00004505 2E
01:00004506 2E              	  1058: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004507 2E
01:00004508 2E
01:00004509 2E
01:0000450A 2E
01:0000450B 2E
01:0000450C 2E
01:0000450D 2E
01:0000450E 2E              	  1059: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000450F 2E
01:00004510 2E
01:00004511 2E
01:00004512 2E
01:00004513 2E
01:00004514 2E
01:00004515 2E
01:00004516 2E              	  1060: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004517 2E
01:00004518 2E
01:00004519 2E
01:0000451A 2E
01:0000451B 2E
01:0000451C 2E
01:0000451D 2E
01:0000451E 2E              	  1061: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000451F 2E
01:00004520 2E
01:00004521 2E
01:00004522 2E
01:00004523 2E
01:00004524 2E
01:00004525 2E
01:00004526 2E              	  1062: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004527 2E
01:00004528 2E
01:00004529 2E
01:0000452A 2E
01:0000452B 2E
01:0000452C 2E
01:0000452D 2E
01:0000452E 2E              	  1063: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000452F 2E
01:00004530 2E
01:00004531 2E
01:00004532 2E
01:00004533 2E
01:00004534 2E
01:00004535 2E
01:00004536 2E              	  1064: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004537 2E
01:00004538 2E
01:00004539 2E
01:0000453A 2E
01:0000453B 2E
01:0000453C 2E
01:0000453D 2E
                            	  1065: 
                            	  1066: ; control
                            	  1067: _keybdControlCodes:
01:0000453E 2E              	  1068: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000453F 2E
01:00004540 2E
01:00004541 2E
01:00004542 2E
01:00004543 2E
01:00004544 2E
01:00004545 2E
01:00004546 2E              	  1069: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:00004547 2E
01:00004548 2E
01:00004549 2E
01:0000454A 2E
01:0000454B 09
01:0000454C 7E
01:0000454D 2E
01:0000454E 2E              	  1070: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:0000454F 2E
01:00004550 2E
01:00004551 2E
01:00004552 2E
01:00004553 11
01:00004554 21
01:00004555 2E
01:00004556 2E              	  1071: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:00004557 2E
01:00004558 1A
01:00004559 13
01:0000455A 01
01:0000455B 17
01:0000455C 40
01:0000455D 2E
01:0000455E 2E              	  1072: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:0000455F 03
01:00004560 18
01:00004561 04
01:00004562 05
01:00004563 24
01:00004564 23
01:00004565 2E
01:00004566 2E              	  1073: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:00004567 20
01:00004568 16
01:00004569 06
01:0000456A 14
01:0000456B 12
01:0000456C 25
01:0000456D 2E
01:0000456E 2E              	  1074: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:0000456F 0E
01:00004570 02
01:00004571 08
01:00004572 07
01:00004573 19
01:00004574 5E
01:00004575 2E
01:00004576 2E              	  1075: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:00004577 2E
01:00004578 0D
01:00004579 0A
01:0000457A 15
01:0000457B 26
01:0000457C 2A
01:0000457D 2E
01:0000457E 2E              	  1076: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:0000457F 3C
01:00004580 0B
01:00004581 09
01:00004582 0F
01:00004583 29
01:00004584 28
01:00004585 2E
01:00004586 2E              	  1077: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:00004587 3E
01:00004588 3F
01:00004589 0C
01:0000458A 3A
01:0000458B 10
01:0000458C 5F
01:0000458D 2E
01:0000458E 2E              	  1078: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:0000458F 2E
01:00004590 22
01:00004591 2E
01:00004592 7B
01:00004593 2B
01:00004594 2E
01:00004595 2E
01:00004596 2E              	  1079: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004597 2E
01:00004598 0D
01:00004599 7D
01:0000459A 2E
01:0000459B 7C
01:0000459C 2E
01:0000459D 2E
01:0000459E 2E              	  1080: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:0000459F 2E
01:000045A0 2E
01:000045A1 2E
01:000045A2 2E
01:000045A3 2E
01:000045A4 08
01:000045A5 2E
01:000045A6 2E              	  1081: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045A7 2E
01:000045A8 2E
01:000045A9 2E
01:000045AA 2E
01:000045AB 2E
01:000045AC 2E
01:000045AD 2E
01:000045AE 2E              	  1082: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:000045AF 7F
01:000045B0 2E
01:000045B1 2E
01:000045B2 2E
01:000045B3 2E
01:000045B4 1B
01:000045B5 2E
01:000045B6 2E              	  1083: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B7 2E
01:000045B8 2E
01:000045B9 2E
01:000045BA 2E
01:000045BB 2E
01:000045BC 2E
01:000045BD 2E
                            	  1084: 
                            	  1085: _keybdExtendedCodes:
01:000045BE 2E              	  1086: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:000045BF 2E
01:000045C0 2E
01:000045C1 2E
01:000045C2 A3
01:000045C3 A1
01:000045C4 A2
01:000045C5 2E
01:000045C6 2E              	  1087: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C7 2E
01:000045C8 2E
01:000045C9 2E
01:000045CA 2E
01:000045CB 2E
01:000045CC 2E
01:000045CD 2E
01:000045CE 2E              	  1088: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045CF 2E
01:000045D0 2E
01:000045D1 2E
01:000045D2 2E
01:000045D3 2E
01:000045D4 2E
01:000045D5 2E
01:000045D6 2E              	  1089: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D7 2E
01:000045D8 2E
01:000045D9 2E
01:000045DA 2E
01:000045DB 2E
01:000045DC 2E
01:000045DD 2E
01:000045DE 2E              	  1090: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045DF 2E
01:000045E0 2E
01:000045E1 2E
01:000045E2 2E
01:000045E3 2E
01:000045E4 2E
01:000045E5 2E
01:000045E6 2E              	  1091: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E7 2E
01:000045E8 2E
01:000045E9 2E
01:000045EA 2E
01:000045EB 2E
01:000045EC 2E
01:000045ED 2E
01:000045EE 2E              	  1092: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045EF 2E
01:000045F0 2E
01:000045F1 2E
01:000045F2 2E
01:000045F3 2E
01:000045F4 2E
01:000045F5 2E
01:000045F6 2E              	  1093: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F7 2E
01:000045F8 2E
01:000045F9 2E
01:000045FA 2E
01:000045FB 2E
01:000045FC 2E
01:000045FD 2E
01:000045FE 2E              	  1094: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045FF 2E
01:00004600 2E
01:00004601 2E
01:00004602 2E
01:00004603 2E
01:00004604 2E
01:00004605 2E
01:00004606 2E              	  1095: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004607 2E
01:00004608 2E
01:00004609 2E
01:0000460A 2E
01:0000460B 2E
01:0000460C 2E
01:0000460D 2E
01:0000460E 2E              	  1096: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000460F 2E
01:00004610 2E
01:00004611 2E
01:00004612 2E
01:00004613 2E
01:00004614 2E
01:00004615 2E
01:00004616 2E              	  1097: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004617 2E
01:00004618 2E
01:00004619 2E
01:0000461A 2E
01:0000461B 2E
01:0000461C 2E
01:0000461D 2E
01:0000461E 2E              	  1098: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000461F 2E
01:00004620 2E
01:00004621 2E
01:00004622 2E
01:00004623 2E
01:00004624 2E
01:00004625 2E
01:00004626 2E              	  1099: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:00004627 95
01:00004628 2E
01:00004629 93
01:0000462A 94
01:0000462B 2E
01:0000462C 2E
01:0000462D 2E
01:0000462E 98              	  1100: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:0000462F 99
01:00004630 92
01:00004631 2E
01:00004632 91
01:00004633 90
01:00004634 2E
01:00004635 2E
01:00004636 2E              	  1101: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:00004637 2E
01:00004638 97
01:00004639 2E
01:0000463A 2E
01:0000463B 96
01:0000463C 2E
01:0000463D 2E
                            	  1102: 
                            	  1103: ;==============================================================================
                            	  1104: ;==============================================================================
                            	  1105: ; Monitor
                            	  1106: ;==============================================================================
                            	  1107: ;==============================================================================
                            	  1108: ;
                            	  1109: ; Get a word from screen memory and swap byte order
                            	  1110: 
                            	  1111: FromScreen:
01:0000463E 2210            	  1112: 	move.l	(a0),d1
01:00004640 E159            	  1113: 	rol.w		#8,d1
01:00004642 4841            	  1114: 	swap		d1
01:00004644 E159            	  1115: 	rol.w		#8,d1
01:00004646 5088            	  1116: 	lea			8(a0),a0	; increment screen pointer
01:00004648 4E75            	  1117: 	rts
                            	  1118: 
                            	  1119: StartMon:
                            	  1120: Monitor:
01:0000464A 7201            	  1121: 	moveq	#1,d1
01:0000464C 6100BAA8        	  1122: 	bsr		UnlockSemaphore
                            	  1123: ;	lea		STACK,a7		; reset the stack pointer
01:00004650 42390000041C    	  1124: 	clr.b	KeybdEcho		; turn off keyboard echo
                            	  1125: PromptLn:
01:00004656 6100F716        	  1126: 	bsr			CRLF
01:0000465A 123C0024        	  1127: 	move.b	#'$',d1
01:0000465E 6100F754        	  1128: 	bsr			DisplayChar
                            	  1129: 
                            	  1130: ; Get characters until a CR is keyed
                            	  1131: ;
                            	  1132: Prompt3:
01:00004662 6100FA5A        	  1133: 	bsr			GetKey
01:00004666 0C01000D        	  1134: 	cmpi.b	#CR,d1
01:0000466A 6706            	  1135: 	beq.s		Prompt1
01:0000466C 6100F746        	  1136: 	bsr			DisplayChar
01:00004670 60F0            	  1137: 	bra.s		Prompt3
                            	  1138: 
                            	  1139: ; Process the screen line that the CR was keyed on
                            	  1140: ;
                            	  1141: Prompt1:
01:00004672 42390000040D    	  1142: 	clr.b		CursorCol			; go back to the start of the line
01:00004678 6100F706        	  1143: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1144: .0001:
01:0000467C 61C0            	  1145: 	bsr			FromScreen		; grab character off screen
01:0000467E 0C010024        	  1146: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:00004682 67F8            	  1147: 	beq.s		.0001
                            	  1148: 	
                            	  1149: ; Dispatch based on command character
                            	  1150: ;
                            	  1151: Prompt2:
01:00004684 0C010061        	  1152: 	cmpi.b	#'a',d1
01:00004688 6700053A        	  1153: 	beq			AudioInputTest
01:0000468C 0C010062        	  1154: 	cmpi.b	#'b',d1
01:00004690 67000534        	  1155: 	beq			BouncingBalls
01:00004694 0C010067        	  1156: 	cmpi.b	#'g',d1
01:00004698 6700052E        	  1157: 	beq			GraphicsDemo
01:0000469C 0C01003A        	  1158: 	cmpi.b	#':',d1			; $: - edit memory
01:000046A0 67000216        	  1159: 	beq			EditMem
01:000046A4 0C010044        	  1160: 	cmpi.b	#'D',d1			; $D - dump memory
01:000046A8 67000268        	  1161: 	beq			DumpMem
01:000046AC 0C010046        	  1162: 	cmpi.b	#'F',d1
01:000046B0 670001AE        	  1163: 	beq			FillMem
01:000046B4 0C010042        	  1164: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:000046B8 6606            	  1165: 	bne.s	.0001
01:000046BA 4EF9FFFCC000    	  1166: 	jmp			$FFFCC000
                            	  1167: .0001:
01:000046C0 0C01004A        	  1168: 	cmpi.b	#'J',d1			; $J - execute code
01:000046C4 6700023E        	  1169: 	beq			ExecuteCode
01:000046C8 0C01004C        	  1170: 	cmpi.b	#'L',d1			; $L - load S19 file
01:000046CC 6700037E        	  1171: 	beq			LoadS19
01:000046D0 0C01003F        	  1172: 	cmpi.b	#'?',d1			; $? - display help
01:000046D4 6738            	  1173: 	beq			DisplayHelp
01:000046D6 0C010043        	  1174: 	cmpi.b	#'C',d1			; $C - clear screen
01:000046DA 6704            	  1175: 	beq			TestCLS
01:000046DC 6000FF6C        	  1176: 	bra			Monitor
                            	  1177: 
                            	  1178: TestCLS:
01:000046E0 7201            	  1179: 	moveq		#1,d1
01:000046E2 6100BA0C        	  1180: 	bsr			LockSemaphore
01:000046E6 6100FF56        	  1181: 	bsr			FromScreen
01:000046EA 5242            	  1182: 	addq		#1,d2
01:000046EC 0C01004C        	  1183: 	cmpi.b	#'L',d1
01:000046F0 6600FF58        	  1184: 	bne			Monitor
01:000046F4 6100FF48        	  1185: 	bsr			FromScreen
01:000046F8 5242            	  1186: 	addq		#1,d2
01:000046FA 0C010053        	  1187: 	cmpi.b	#'S',d1
01:000046FE 6600FF4A        	  1188: 	bne			Monitor
01:00004702 610004C6        	  1189: 	bsr			ClearScreen
01:00004706 6100F908        	  1190: 	bsr			HomeCursor
01:0000470A 6000FF3E        	  1191: 	bra			Monitor
                            	  1192: 	
                            	  1193: DisplayHelp:
01:0000470E 7201            	  1194: 	moveq		#1,d1
01:00004710 6100B9DE        	  1195: 	bsr			LockSemaphore
01:00004714 43FA000A        	  1196: 	lea			HelpMsg,a1
01:00004718 6100F8D8        	  1197: 	bsr			DisplayString
01:0000471C 6000FF2C        	  1198: 	bra			Monitor
                            	  1199: 
                            	  1200: HelpMsg:
01:00004720 3F203D2044697370	  1201: 	dc.b	"? = Display help",CR,LF
01:00004728 6C61792068656C70
01:00004730 0D
01:00004731 0A
01:00004732 434C53203D20636C	  1202: 	dc.b	"CLS = clear screen",CR,LF
01:0000473A 6561722073637265
01:00004742 656E
01:00004744 0D
01:00004745 0A
01:00004746 3A203D2045646974	  1203: 	dc.b	": = Edit memory bytes",CR,LF
01:0000474E 206D656D6F727920
01:00004756 6279746573
01:0000475B 0D
01:0000475C 0A
01:0000475D 46203D2046696C6C	  1204: 	dc.b	"F = Fill memory",CR,LF
01:00004765 206D656D6F7279
01:0000476C 0D
01:0000476D 0A
01:0000476E 4C203D204C6F6164	  1205: 	dc.b	"L = Load S19 file",CR,LF
01:00004776 205331392066696C
01:0000477E 65
01:0000477F 0D
01:00004780 0A
01:00004781 44203D2044756D70	  1206: 	dc.b	"D = Dump memory",CR,LF
01:00004789 206D656D6F7279
01:00004790 0D
01:00004791 0A
01:00004792 42203D2073746172	  1207: 	dc.b	"B = start tiny basic",CR,LF
01:0000479A 742074696E792062
01:000047A2 61736963
01:000047A6 0D
01:000047A7 0A
01:000047A8 4A203D204A756D70	  1208: 	dc.b	"J = Jump to code",CR,LF,0
01:000047B0 20746F20636F6465
01:000047B8 0D
01:000047B9 0A
01:000047BA 00
                            	  1209: 	even
                            	  1210: 
                            	  1211: ;------------------------------------------------------------------------------
                            	  1212: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1213: ; Used to fetch a command line. (Not currently used).
                            	  1214: ;
                            	  1215: ; d0.b	- command prompt
                            	  1216: ;------------------------------------------------------------------------------
                            	  1217: 
                            	  1218: GetCmdLine:
01:000047BC 6100F5F6        	  1219: 		bsr		DisplayChar		; display prompt
01:000047C0 103C0020        	  1220: 		move.b	#' ',d0
01:000047C4 6100F5EE        	  1221: 		bsr		DisplayChar
01:000047C8 41F900000421    	  1222: 		lea		CmdBuf,a0
                            	  1223: .0001:
01:000047CE 6100F8EE        	  1224: 		bsr		GetKey
01:000047D2 B03C0008        	  1225: 		cmp.b	#CTRLH,d0
01:000047D6 6728            	  1226: 		beq.s	.0003
01:000047D8 B03C0018        	  1227: 		cmp.b	#CTRLX,d0
01:000047DC 6746            	  1228: 		beq.s	.0004
01:000047DE B03C000D        	  1229: 		cmp.b	#CR,d0
01:000047E2 6706            	  1230: 		beq.s	.0002
01:000047E4 B03C0020        	  1231: 		cmp.b	#' ',d0
01:000047E8 65E4            	  1232: 		bcs.s	.0001
                            	  1233: .0002:
01:000047EA 1080            	  1234: 		move.b	d0,(a0)
01:000047EC 5088            	  1235: 		lea			8(a0),a0
01:000047EE 6100F5C4        	  1236: 		bsr		DisplayChar
01:000047F2 B03C000D        	  1237: 		cmp.b	#CR,d0
01:000047F6 675E            	  1238: 		beq		.0007
01:000047F8 B1FC00000421    	  1239: 		cmp.l	#CmdBufEnd-1,a0
01:000047FE 65CE            	  1240: 		bcs.s	.0001
                            	  1241: .0003:
01:00004800 103C0008        	  1242: 		move.b	#CTRLH,d0
01:00004804 6100F5AE        	  1243: 		bsr		DisplayChar
01:00004808 103C0020        	  1244: 		move.b	#' ',d0
01:0000480C 6100F5A6        	  1245: 		bsr		DisplayChar
01:00004810 B1FC00000421    	  1246: 		cmp.l	#CmdBuf,a0
01:00004816 63B6            	  1247: 		bls.s	.0001
01:00004818 103C0008        	  1248: 		move.b	#CTRLH,d0
01:0000481C 6100F596        	  1249: 		bsr		DisplayChar
01:00004820 5388            	  1250: 		subq.l	#1,a0
01:00004822 60AA            	  1251: 		bra.s	.0001
                            	  1252: .0004:
01:00004824 2208            	  1253: 		move.l	a0,d1
01:00004826 92BC00000421    	  1254: 		sub.l	#CmdBuf,d1
01:0000482C 671E            	  1255: 		beq.s	.0006
01:0000482E 5341            	  1256: 		subq	#1,d1
                            	  1257: .0005:
01:00004830 103C0008        	  1258: 		move.b	#CTRLH,d0
01:00004834 6100F57E        	  1259: 		bsr		DisplayChar
01:00004838 103C0020        	  1260: 		move.b	#' ',d0
01:0000483C 6100F576        	  1261: 		bsr		DisplayChar
01:00004840 103C0008        	  1262: 		move.b	#CTRLH,d0
01:00004844 6100F56E        	  1263: 		bsr		DisplayChar
01:00004848 51C9FFE6        	  1264: 		dbra	d1,.0005
                            	  1265: .0006:
01:0000484C 41F900000421    	  1266: 		lea		CmdBuf,a0
01:00004852 6000FF7A        	  1267: 		bra		.0001
                            	  1268: .0007:
01:00004856 103C000A        	  1269: 		move.b	#LF,d0
01:0000485A 6100F558        	  1270: 		bsr		DisplayChar
01:0000485E 4E75            	  1271: 		rts
                            	  1272: 
                            	  1273: 		
                            	  1274: ;------------------------------------------------------------------------------
                            	  1275: ; Fill memory
                            	  1276: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1277: ; FW = fill words
                            	  1278: ; FL = fill longs
                            	  1279: ; F = fill bytes
                            	  1280: ;------------------------------------------------------------------------------
                            	  1281: ;
                            	  1282: FillMem:
01:00004860 6100FDDC        	  1283: 	bsr			FromScreen
                            	  1284: 	;bsr		ScreenToAscii
01:00004864 1801            	  1285: 	move.b	d1,d4			; d4 = fill size
01:00004866 613E            	  1286: 	bsr			ignBlanks
01:00004868 61000136        	  1287: 	bsr			GetHexNumber
01:0000486C 2241            	  1288: 	move.l	d1,a1			; a1 = start
01:0000486E 6136            	  1289: 	bsr			ignBlanks
01:00004870 6100012E        	  1290: 	bsr			GetHexNumber
01:00004874 2601            	  1291: 	move.l	d1,d3			; d3 = count
01:00004876 612E            	  1292: 	bsr			ignBlanks
01:00004878 61000126        	  1293: 	bsr			GetHexNumber	; fill value
01:0000487C 0C04004C        	  1294: 	cmpi.b	#'L',d4
01:00004880 660A            	  1295: 	bne			fmem1
                            	  1296: fmemL:
01:00004882 22C1            	  1297: 	move.l	d1,(a1)+
01:00004884 5383            	  1298: 	sub.l	#1,d3
01:00004886 66FA            	  1299: 	bne.s	fmemL
01:00004888 6000FDC0        	  1300: 	bra		Monitor
                            	  1301: fmem1
01:0000488C 0C040057        	  1302: 	cmpi.b	#'W',d4
01:00004890 660A            	  1303: 	bne		fmemB
                            	  1304: fmemW:
01:00004892 32C1            	  1305: 	move.w	d1,(a1)+
01:00004894 5383            	  1306: 	sub.l	#1,d3
01:00004896 66FA            	  1307: 	bne.s	fmemW
01:00004898 6000FDB0        	  1308: 	bra		Monitor
                            	  1309: fmemB:
01:0000489C 12C1            	  1310: 	move.b	d1,(a1)+
01:0000489E 5383            	  1311: 	sub.l	#1,d3
01:000048A0 66FA            	  1312: 	bne.s	fmemB
01:000048A2 6000FDA6        	  1313: 	bra		Monitor
                            	  1314: 
                            	  1315: ;------------------------------------------------------------------------------
                            	  1316: ; Modifies:
                            	  1317: ;	a0	- text pointer
                            	  1318: ;------------------------------------------------------------------------------
                            	  1319: ;
                            	  1320: ignBlanks:
01:000048A6 2F01            	  1321: 	move.l	d1,-(a7)
                            	  1322: .0001:
01:000048A8 6100FD94        	  1323: 	bsr			FromScreen
01:000048AC 0C010020        	  1324: 	cmpi.b	#' ',d1
01:000048B0 67F6            	  1325: 	beq.s		.0001
01:000048B2 5188            	  1326: 	lea			-8(a0),a0
01:000048B4 221F            	  1327: 	move.l	(a7)+,d1
01:000048B6 4E75            	  1328: 	rts
                            	  1329: 
                            	  1330: ;------------------------------------------------------------------------------
                            	  1331: ; Edit memory byte.
                            	  1332: ;------------------------------------------------------------------------------
                            	  1333: ;
                            	  1334: EditMem:
01:000048B8 61EC            	  1335: 	bsr		ignBlanks
01:000048BA 610000E4        	  1336: 	bsr		GetHexNumber
01:000048BE 2241            	  1337: 	move.l	d1,a1
                            	  1338: edtmem1:
01:000048C0 61E4            	  1339: 	bsr		ignBlanks
01:000048C2 610000DC        	  1340: 	bsr		GetHexNumber
01:000048C6 12C1            	  1341: 	move.b	d1,(a1)+
01:000048C8 61DC            	  1342: 	bsr		ignBlanks
01:000048CA 610000D4        	  1343: 	bsr		GetHexNumber
01:000048CE 12C1            	  1344: 	move.b	d1,(a1)+
01:000048D0 61D4            	  1345: 	bsr		ignBlanks
01:000048D2 610000CC        	  1346: 	bsr		GetHexNumber
01:000048D6 12C1            	  1347: 	move.b	d1,(a1)+
01:000048D8 61CC            	  1348: 	bsr		ignBlanks
01:000048DA 610000C4        	  1349: 	bsr		GetHexNumber
01:000048DE 12C1            	  1350: 	move.b	d1,(a1)+
01:000048E0 61C4            	  1351: 	bsr		ignBlanks
01:000048E2 610000BC        	  1352: 	bsr		GetHexNumber
01:000048E6 12C1            	  1353: 	move.b	d1,(a1)+
01:000048E8 61BC            	  1354: 	bsr		ignBlanks
01:000048EA 610000B4        	  1355: 	bsr		GetHexNumber
01:000048EE 12C1            	  1356: 	move.b	d1,(a1)+
01:000048F0 61B4            	  1357: 	bsr		ignBlanks
01:000048F2 610000AC        	  1358: 	bsr		GetHexNumber
01:000048F6 12C1            	  1359: 	move.b	d1,(a1)+
01:000048F8 61AC            	  1360: 	bsr		ignBlanks
01:000048FA 610000A4        	  1361: 	bsr		GetHexNumber
01:000048FE 12C1            	  1362: 	move.b	d1,(a1)+
01:00004900 6000FD48        	  1363: 	bra		Monitor
                            	  1364: 
                            	  1365: ;------------------------------------------------------------------------------
                            	  1366: ; Execute code at the specified address.
                            	  1367: ;------------------------------------------------------------------------------
                            	  1368: 
                            	  1369: ExecuteCode:
01:00004904 61A0            	  1370: 	bsr			ignBlanks
01:00004906 61000098        	  1371: 	bsr			GetHexNumber
01:0000490A 2041            	  1372: 	move.l	d1,a0
01:0000490C 4E90            	  1373: 	jsr			(a0)
01:0000490E 6000FD3A        	  1374: 	bra     Monitor
                            	  1375: 
                            	  1376: ;------------------------------------------------------------------------------
                            	  1377: ; Do a memory dump of the requested location.
                            	  1378: ; D 0800 0850
                            	  1379: ;------------------------------------------------------------------------------
                            	  1380: 
                            	  1381: DumpMem:
01:00004912 7201            	  1382: 	moveq		#1,d1
01:00004914 6100B7DA        	  1383: 	bsr			LockSemaphore
01:00004918 618C            	  1384: 	bsr			ignBlanks
01:0000491A 61000084        	  1385: 	bsr			GetHexNumber
01:0000491E 6700FD2A        	  1386: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
01:00004922 2601            	  1387: 	move.l	d1,d3				; save off start of range
01:00004924 6180            	  1388: 	bsr			ignBlanks
01:00004926 6178            	  1389: 	bsr			GetHexNumber
01:00004928 6608            	  1390: 	bne.s		DumpMem1
01:0000492A 2203            	  1391: 	move.l	d3,d1
01:0000492C 068100000040    	  1392: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1393: DumpMem1:
01:00004932 2043            	  1394: 	move.l	d3,a0
01:00004934 2241            	  1395: 	move.l	d1,a1
01:00004936 6100F436        	  1396: 	bsr			CRLF
                            	  1397: .0001:
01:0000493A B3C8            	  1398: 	cmpa.l	a0,a1
01:0000493C 6300FD0C        	  1399: 	bls			Monitor
01:00004940 6102            	  1400: 	bsr			DisplayMem
01:00004942 60F6            	  1401: 	bra.s		.0001
                            	  1402: 
                            	  1403: ;------------------------------------------------------------------------------
                            	  1404: ; Display memory dump in a format suitable for edit.
                            	  1405: ;
                            	  1406: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  1407: ;
                            	  1408: ; Modifies:
                            	  1409: ;		d1,d2,a0
                            	  1410: ;------------------------------------------------------------------------------
                            	  1411: 
                            	  1412: DisplayMem:
01:00004944 123C003A        	  1413: 	move.b	#':',d1
01:00004948 6100F46A        	  1414: 	bsr			DisplayChar
01:0000494C 2208            	  1415: 	move.l	a0,d1
01:0000494E 610000D0        	  1416: 	bsr			DisplayTetra
01:00004952 7407            	  1417: 	moveq		#7,d2
                            	  1418: dspmem1:
01:00004954 123C0020        	  1419: 	move.b	#' ',d1
01:00004958 6100F45A        	  1420: 	bsr			DisplayChar
01:0000495C 1218            	  1421: 	move.b	(a0)+,d1
01:0000495E 610000CC        	  1422: 	bsr			DisplayByte
01:00004962 51CAFFF0        	  1423: 	dbra		d2,dspmem1
01:00004966 6100009E        	  1424: 	bsr			DisplayTwoSpaces
01:0000496A 123C0022        	  1425: 	move.b	#34,d1
01:0000496E 6100F444        	  1426: 	bsr			DisplayChar
01:00004972 5188            	  1427: 	lea			-8(a0),a0
01:00004974 7407            	  1428: 	moveq		#7,d2
                            	  1429: .0002:	
01:00004976 1218            	  1430: 	move.b	(a0)+,d1
01:00004978 B23C0020        	  1431: 	cmp.b		#' ',d1
01:0000497C 6506            	  1432: 	blo.s		.0003
01:0000497E B23C007F        	  1433: 	cmp.b		#127,d1
01:00004982 6304            	  1434: 	bls.s		.0001
                            	  1435: .0003:
01:00004984 123C002E        	  1436: 	move.b	#'.',d1
                            	  1437: .0001:
01:00004988 6100F42A        	  1438: 	bsr			DisplayChar
01:0000498C 51CAFFE8        	  1439: 	dbra		d2,.0002
01:00004990 123C0022        	  1440: 	move.b	#34,d1
01:00004994 6100F41E        	  1441: 	bsr			DisplayChar
01:00004998 6100F73E        	  1442: 	bsr			CheckForCtrlC
01:0000499C 6000F3D0        	  1443: 	bra			CRLF
                            	  1444: 
                            	  1445: ;------------------------------------------------------------------------------
                            	  1446: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1447: ;
                            	  1448: ; Returns:
                            	  1449: ;		d0 = number of digits
                            	  1450: ;		d1 = value of number
                            	  1451: ;		zf = number of digits == 0
                            	  1452: ;------------------------------------------------------------------------------
                            	  1453: ;
                            	  1454: GetHexNumber:
01:000049A0 2F02            	  1455: 	move.l	d2,-(a7)
01:000049A2 7400            	  1456: 	clr.l		d2
01:000049A4 7000            	  1457: 	moveq		#0,d0
                            	  1458: .0002:
01:000049A6 6100FC96        	  1459: 	bsr			FromScreen
01:000049AA 6120            	  1460: 	bsr			AsciiToHexNybble
01:000049AC B23C00FF        	  1461: 	cmp.b		#$ff,d1
01:000049B0 6712            	  1462: 	beq.s		.0001
01:000049B2 E98A            	  1463: 	lsl.l		#4,d2
01:000049B4 02810000000F    	  1464: 	andi.l	#$0f,d1
01:000049BA 8481            	  1465: 	or.l		d1,d2
01:000049BC 5240            	  1466: 	addq		#1,d0
01:000049BE 0C000008        	  1467: 	cmpi.b	#8,d0
01:000049C2 65E2            	  1468: 	blo.s		.0002
                            	  1469: .0001:
01:000049C4 2202            	  1470: 	move.l	d2,d1
01:000049C6 241F            	  1471: 	move.l	(a7)+,d2
01:000049C8 4A00            	  1472: 	tst.b		d0
01:000049CA 4E75            	  1473: 	rts	
                            	  1474: 
                            	  1475: ;------------------------------------------------------------------------------
                            	  1476: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  1477: ; to a hex nybble.
                            	  1478: ;------------------------------------------------------------------------------
                            	  1479: 
                            	  1480: AsciiToHexNybble:
01:000049CC 0C010030        	  1481: 	cmpi.b	#'0',d1
01:000049D0 6530            	  1482: 	blo.s		gthx3
01:000049D2 0C010039        	  1483: 	cmpi.b	#'9',d1
01:000049D6 6206            	  1484: 	bhi.s		gthx5
01:000049D8 04010030        	  1485: 	subi.b	#'0',d1
01:000049DC 4E75            	  1486: 	rts
                            	  1487: gthx5:
01:000049DE 0C010041        	  1488: 	cmpi.b	#'A',d1
01:000049E2 651E            	  1489: 	blo.s		gthx3
01:000049E4 0C010046        	  1490: 	cmpi.b	#'F',d1
01:000049E8 6206            	  1491: 	bhi.s		gthx6
01:000049EA 060100C9        	  1492: 	addi.b	#10-'A',d1
01:000049EE 4E75            	  1493: 	rts
                            	  1494: gthx6:
01:000049F0 0C010061        	  1495: 	cmpi.b	#'a',d1
01:000049F4 650C            	  1496: 	blo.s		gthx3
01:000049F6 0C010066        	  1497: 	cmpi.b	#'f',d1
01:000049FA 6206            	  1498: 	bhi.s		gthx3
01:000049FC 060100A9        	  1499: 	addi.b	#10-'a',d1
01:00004A00 4E75            	  1500: 	rts
                            	  1501: gthx3:
01:00004A02 72FF            	  1502: 	moveq	#-1,d1		; not a hex number
01:00004A04 4E75            	  1503: 	rts
                            	  1504: 
                            	  1505: ;------------------------------------------------------------------------------
                            	  1506: ;------------------------------------------------------------------------------
                            	  1507: 
                            	  1508: DisplayTwoSpaces:
01:00004A06 2F01            	  1509: 	move.l	d1,-(a7)
01:00004A08 123C0020        	  1510: 	move.b	#' ',d1
01:00004A0C 6100F3A6        	  1511: 	bsr			DisplayChar
                            	  1512: dspspc1:
01:00004A10 6100F3A2        	  1513: 	bsr			DisplayChar
01:00004A14 221F            	  1514: 	move.l	(a7)+,d1
01:00004A16 4E75            	  1515: 	rts
                            	  1516: 
                            	  1517: DisplaySpace:
01:00004A18 2F01            	  1518: 	move.l	d1,-(a7)
01:00004A1A 123C0020        	  1519: 	move.b	#' ',d1
01:00004A1E 60F0            	  1520: 	bra			dspspc1
                            	  1521: 
                            	  1522: ;------------------------------------------------------------------------------
                            	  1523: ; Display the 32 bit word in D1.L
                            	  1524: ;------------------------------------------------------------------------------
                            	  1525: 
                            	  1526: DisplayTetra:
01:00004A20 4841            	  1527: 	swap	d1
01:00004A22 6102            	  1528: 	bsr		DisplayWyde
01:00004A24 4841            	  1529: 	swap	d1
                            	  1530: 
                            	  1531: ;------------------------------------------------------------------------------
                            	  1532: ; Display the byte in D1.W
                            	  1533: ;------------------------------------------------------------------------------
                            	  1534: 
                            	  1535: DisplayWyde:
01:00004A26 E059            	  1536: 	ror.w		#8,d1
01:00004A28 6102            	  1537: 	bsr			DisplayByte
01:00004A2A E159            	  1538: 	rol.w		#8,d1
                            	  1539: 
                            	  1540: ;------------------------------------------------------------------------------
                            	  1541: ; Display the byte in D1.B
                            	  1542: ;------------------------------------------------------------------------------
                            	  1543: 
                            	  1544: DisplayByte:
01:00004A2C E819            	  1545: 	ror.b		#4,d1
01:00004A2E 6102            	  1546: 	bsr			DisplayNybble
01:00004A30 E919            	  1547: 	rol.b		#4,d1
                            	  1548: 
                            	  1549: ;------------------------------------------------------------------------------
                            	  1550: ; Display nybble in D1.B
                            	  1551: ;------------------------------------------------------------------------------
                            	  1552: 
                            	  1553: DisplayNybble:
01:00004A32 2F01            	  1554: 	move.l	d1,-(a7)
01:00004A34 0201000F        	  1555: 	andi.b	#$F,d1
01:00004A38 06010030        	  1556: 	addi.b	#'0',d1
01:00004A3C 0C010039        	  1557: 	cmpi.b	#'9',d1
01:00004A40 6302            	  1558: 	bls.s		.0001
01:00004A42 5E01            	  1559: 	addi.b	#7,d1
                            	  1560: .0001:
01:00004A44 6100F36E        	  1561: 	bsr			DisplayChar
01:00004A48 221F            	  1562: 	move.l	(a7)+,d1
01:00004A4A 4E75            	  1563: 	rts
                            	  1564: 
                            	  1565: ;------------------------------------------------------------------------------
                            	  1566: ;------------------------------------------------------------------------------
                            	  1567: ;
                            	  1568: ;DisplayHexNumber:
                            	  1569: ;	move.w	#$A6A6,leds		; diagnostics
                            	  1570: ;	move.l	#VDGREG,a6
                            	  1571: ;	move.w	#7,d2		; number-1 of digits to display
                            	  1572: ;disphnum1:
                            	  1573: ;	move.b	d1,d0		; get digit into d0.b
                            	  1574: ;	andi.w	#$0f,d0
                            	  1575: ;	cmpi.w	#$09,d0
                            	  1576: ;	bls.s	disphnum2
                            	  1577: ;	addi.w	#7,d0
                            	  1578: ;disphnum2:
                            	  1579: ;	addi.w	#$30,d0	; convert to display char
                            	  1580: ;	move.w	d2,d3		; char count into d3
                            	  1581: ;	asl.w	#3,d3		; scale * 8
                            	  1582: ;disphnum3:
                            	  1583: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  1584: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  1585: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  1586: ;	ext.w	d0						; zero out high order bits
                            	  1587: ;	move.w	d0,$420(a6)			; set char code
                            	  1588: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  1589: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  1590: ;	move.w	d3,$426(a6)			; set x pos
                            	  1591: ;	move.w	#8,$428(a6)			; set y pos
                            	  1592: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  1593: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  1594: ;	ror.l	#4,d1					; rot to next digit
                            	  1595: ;	dbeq	d2,disphnum1
                            	  1596: ;	jmp		(a5)
                            	  1597: 
                            	  1598: ;==============================================================================
                            	  1599: ; Load an S19 format file
                            	  1600: ;==============================================================================
                            	  1601: ;
                            	  1602: LoadS19:
01:00004A4C 600A            	  1603: 	bra			ProcessRec
                            	  1604: NextRec:
01:00004A4E 6100015A        	  1605: 	bsr			sGetChar
01:00004A52 0C00000A        	  1606: 	cmpi.b	#LF,d0
01:00004A56 66F6            	  1607: 	bne			NextRec
                            	  1608: ProcessRec
01:00004A58 61000150        	  1609: 	bsr			sGetChar
01:00004A5C 1800            	  1610: 	move.b	d0,d4
01:00004A5E 0C04001A        	  1611: 	cmpi.b	#26,d4		; CTRL-Z ?
01:00004A62 6700FBE6        	  1612: 	beq			Monitor
01:00004A66 0C040053        	  1613: 	cmpi.b	#'S',d4
01:00004A6A 66E2            	  1614: 	bne			NextRec
01:00004A6C 6100013C        	  1615: 	bsr			sGetChar
01:00004A70 1800            	  1616: 	move.b	d0,d4
01:00004A72 0C040030        	  1617: 	cmpi.b	#'0',d4
01:00004A76 65D6            	  1618: 	blo			NextRec
01:00004A78 0C040039        	  1619: 	cmpi.b	#'9',d4		; d4 = record type
01:00004A7C 62D0            	  1620: 	bhi			NextRec
01:00004A7E 6100012A        	  1621: 	bsr			sGetChar
01:00004A82 6100FF48        	  1622: 	bsr			AsciiToHexNybble
01:00004A86 1401            	  1623: 	move.b	d1,d2
01:00004A88 61000120        	  1624: 	bsr		sGetChar
01:00004A8C 6100FF3E        	  1625: 	bsr		AsciiToHexNybble
01:00004A90 E90A            	  1626: 	lsl.b	#4,d2
01:00004A92 8202            	  1627: 	or.b	d2,d1		; d1 = byte count
01:00004A94 1601            	  1628: 	move.b	d1,d3		; d3 = byte count
01:00004A96 0C040030        	  1629: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
01:00004A9A 67B2            	  1630: 	beq		NextRec
01:00004A9C 0C040031        	  1631: 	cmpi.b	#'1',d4
01:00004AA0 676A            	  1632: 	beq		ProcessS1
01:00004AA2 0C040032        	  1633: 	cmpi.b	#'2',d4
01:00004AA6 6768            	  1634: 	beq		ProcessS2
01:00004AA8 0C040033        	  1635: 	cmpi.b	#'3',d4
01:00004AAC 6766            	  1636: 	beq		ProcessS3
01:00004AAE 0C040035        	  1637: 	cmpi.b	#'5',d4		; record count record, ignore
01:00004AB2 679A            	  1638: 	beq		NextRec
01:00004AB4 0C040037        	  1639: 	cmpi.b	#'7',d4
01:00004AB8 675E            	  1640: 	beq		ProcessS7
01:00004ABA 0C040038        	  1641: 	cmpi.b	#'8',d4
01:00004ABE 6764            	  1642: 	beq		ProcessS8
01:00004AC0 0C040039        	  1643: 	cmpi.b	#'9',d4
01:00004AC4 676A            	  1644: 	beq		ProcessS9
01:00004AC6 6086            	  1645: 	bra		NextRec
                            	  1646: 
                            	  1647: pcssxa
01:00004AC8 024300FF        	  1648: 	andi.w	#$ff,d3
01:00004ACC 5343            	  1649: 	subi.w	#1,d3			; one less for dbra
                            	  1650: .0001
01:00004ACE 7400            	  1651: 	clr.l		d2
01:00004AD0 610000D8        	  1652: 	bsr			sGetChar
01:00004AD4 6100FEF6        	  1653: 	bsr			AsciiToHexNybble
01:00004AD8 E98A            	  1654: 	lsl.l		#4,d2
01:00004ADA 8401            	  1655: 	or.b		d1,d2
01:00004ADC 610000CC        	  1656: 	bsr			sGetChar
01:00004AE0 6100FEEA        	  1657: 	bsr			AsciiToHexNybble
01:00004AE4 E98A            	  1658: 	lsl.l		#4,d2
01:00004AE6 8401            	  1659: 	or.b		d1,d2
01:00004AE8 12C2            	  1660: 	move.b	d2,(a1)+
01:00004AEA 51CBFFE2        	  1661: 	dbra		d3,.0001
                            	  1662: ; Get the checksum byte
01:00004AEE 7400            	  1663: 	clr.l		d2
01:00004AF0 610000B8        	  1664: 	bsr			sGetChar
01:00004AF4 6100FED6        	  1665: 	bsr			AsciiToHexNybble
01:00004AF8 E98A            	  1666: 	lsl.l		#4,d2
01:00004AFA 8401            	  1667: 	or.b		d1,d2
01:00004AFC 610000AC        	  1668: 	bsr			sGetChar
01:00004B00 6100FECA        	  1669: 	bsr			AsciiToHexNybble
01:00004B04 E98A            	  1670: 	lsl.l		#4,d2
01:00004B06 8401            	  1671: 	or.b		d1,d2
01:00004B08 6000FF44        	  1672: 	bra			NextRec
                            	  1673: 
                            	  1674: ProcessS1:
01:00004B0C 612E            	  1675: 	bsr			S19Get16BitAddress
01:00004B0E 60B8            	  1676: 	bra			pcssxa
                            	  1677: ProcessS2:
01:00004B10 6136            	  1678: 	bsr			S19Get24BitAddress
01:00004B12 60B4            	  1679: 	bra			pcssxa
                            	  1680: ProcessS3:
01:00004B14 613E            	  1681: 	bsr			S19Get32BitAddress
01:00004B16 60B0            	  1682: 	bra			pcssxa
                            	  1683: ProcessS7:
01:00004B18 613A            	  1684: 	bsr			S19Get32BitAddress
01:00004B1A 23C900000418    	  1685: 	move.l	a1,S19StartAddress
01:00004B20 6000FB28        	  1686: 	bra			Monitor
                            	  1687: ProcessS8:
01:00004B24 6122            	  1688: 	bsr			S19Get24BitAddress
01:00004B26 23C900000418    	  1689: 	move.l	a1,S19StartAddress
01:00004B2C 6000FB1C        	  1690: 	bra			Monitor
                            	  1691: ProcessS9:
01:00004B30 610A            	  1692: 	bsr			S19Get16BitAddress
01:00004B32 23C900000418    	  1693: 	move.l	a1,S19StartAddress
01:00004B38 6000FB10        	  1694: 	bra			Monitor
                            	  1695: 
                            	  1696: S19Get16BitAddress:
01:00004B3C 7400            	  1697: 	clr.l		d2
01:00004B3E 616A            	  1698: 	bsr			sGetChar
01:00004B40 6100FE8A        	  1699: 	bsr			AsciiToHexNybble
01:00004B44 1401            	  1700: 	move.b	d1,d2
01:00004B46 603E            	  1701: 	bra			S1932b
                            	  1702: 
                            	  1703: S19Get24BitAddress:
01:00004B48 7400            	  1704: 	clr.l	d2
01:00004B4A 615E            	  1705: 	bsr		sGetChar
01:00004B4C 6100FE7E        	  1706: 	bsr		AsciiToHexNybble
01:00004B50 1401            	  1707: 	move.b	d1,d2
01:00004B52 601E            	  1708: 	bra		S1932a
                            	  1709: 
                            	  1710: S19Get32BitAddress:
01:00004B54 7400            	  1711: 	clr.l	d2
01:00004B56 6152            	  1712: 	bsr			sGetChar
01:00004B58 6100FE72        	  1713: 	bsr			AsciiToHexNybble
01:00004B5C 1401            	  1714: 	move.b	d1,d2
01:00004B5E 614A            	  1715: 	bsr			sGetChar
01:00004B60 6100FE6A        	  1716: 	bsr			AsciiToHexNybble
01:00004B64 E98A            	  1717: 	lsl.l		#4,d2
01:00004B66 8401            	  1718: 	or.b		d1,d2
01:00004B68 6140            	  1719: 	bsr			sGetChar
01:00004B6A 6100FE60        	  1720: 	bsr			AsciiToHexNybble
01:00004B6E E98A            	  1721: 	lsl.l		#4,d2
01:00004B70 8401            	  1722: 	or.b		d1,d2
                            	  1723: S1932a:
01:00004B72 6136            	  1724: 	bsr			sGetChar
01:00004B74 6100FE56        	  1725: 	bsr			AsciiToHexNybble
01:00004B78 E98A            	  1726: 	lsl.l		#4,d2
01:00004B7A 8401            	  1727: 	or.b		d1,d2
01:00004B7C 612C            	  1728: 	bsr			sGetChar
01:00004B7E 6100FE4C        	  1729: 	bsr			AsciiToHexNybble
01:00004B82 E98A            	  1730: 	lsl.l		#4,d2
01:00004B84 8401            	  1731: 	or.b		d1,d2
                            	  1732: S1932b:
01:00004B86 6122            	  1733: 	bsr			sGetChar
01:00004B88 6100FE42        	  1734: 	bsr			AsciiToHexNybble
01:00004B8C E98A            	  1735: 	lsl.l		#4,d2
01:00004B8E 8401            	  1736: 	or.b		d1,d2
01:00004B90 6118            	  1737: 	bsr			sGetChar
01:00004B92 6100FE38        	  1738: 	bsr			AsciiToHexNybble
01:00004B96 E98A            	  1739: 	lsl.l		#4,d2
01:00004B98 8401            	  1740: 	or.b		d1,d2
01:00004B9A 610E            	  1741: 	bsr			sGetChar
01:00004B9C 6100FE2E        	  1742: 	bsr			AsciiToHexNybble
01:00004BA0 E98A            	  1743: 	lsl.l		#4,d2
01:00004BA2 8401            	  1744: 	or.b		d1,d2
01:00004BA4 7800            	  1745: 	clr.l		d4
01:00004BA6 2242            	  1746: 	move.l	d2,a1
01:00004BA8 4E75            	  1747: 	rts
                            	  1748: 
                            	  1749: ;------------------------------------------------------------------------------
                            	  1750: ; Get a character from auxillary input, checking the keyboard status for a
                            	  1751: ; CTRL-C
                            	  1752: ;------------------------------------------------------------------------------
                            	  1753: ;
                            	  1754: sGetChar:
01:00004BAA 6100F500        	  1755: 	bsr			CheckForKey
01:00004BAE 670C            	  1756: 	beq			.0001
01:00004BB0 6100F50C        	  1757: 	bsr			GetKey
01:00004BB4 0C010003        	  1758: 	cmpi.b	#CTRLC,d1
01:00004BB8 6700FA90        	  1759: 	beq			Monitor
                            	  1760: .0001:
01:00004BBC 6112            	  1761: 	bsr			AUXIN
01:00004BBE 67EA            	  1762: 	beq			sGetChar
01:00004BC0 1200            	  1763: 	move.b	d0,d1
01:00004BC2 4E75            	  1764: 	rts
                            	  1765: 
                            	  1766: AudioInputTest:
01:00004BC4 4E75            	  1767: 	rts
                            	  1768: BouncingBalls:
01:00004BC6 4E75            	  1769: 	rts
                            	  1770: GraphicsDemo:
01:00004BC8 4E75            	  1771: 	rts
                            	  1772: ClearScreen:
01:00004BCA 6000F16E        	  1773: 	bra		clear_screen
01:00004BCE 4E75            	  1774: 	rts
                            	  1775: AUXIN:
01:00004BD0 4E75            	  1776: 	rts
                            	  1777: 
                            	  1778: irq_rout:
01:00004BD2 2F08            	  1779: 	move.l	a0,-(a7)
01:00004BD4 207900000414    	  1780: 	move.l	TextScr,a0
01:00004BDA 52A801F0        	  1781: 	addi.l	#1,496(a0)
01:00004BDE 205F            	  1782: 	move.l	(a7)+,a0
01:00004BE0 4E73            	  1783: 	rte
                            	  1784: 
                            	  1785: brdisp_trap:
01:00004BE2 584F            	  1786: 	addq		#4,sp					; get rid of sr
01:00004BE4 221F            	  1787: 	move.l	(sp)+,d1			; pop exception address
01:00004BE6 6100FE38        	  1788: 	bsr			DisplayTetra	; and display it
01:00004BEA 4E722700        	  1789: 	stop		#$2700
                            	  1790: 
                            	  1791: illegal_trap:
01:00004BEE 584F            	  1792: 	addq		#4,sp						; get rid of sr
01:00004BF0 221F            	  1793: 	move.l	(sp)+,d1				; pop exception address
01:00004BF2 6100FE2C        	  1794: 	bsr			DisplayTetra		; and display it
01:00004BF6 43FA0032        	  1795: 	lea			msg_illegal,a1	; followed by message
01:00004BFA 6100F3F6        	  1796: 	bsr			DisplayString
01:00004BFE 6000FA4A        	  1797: 	bra			Monitor
                            	  1798: 	
                            	  1799: ; -----------------------------------------------------------------------------
                            	  1800: ; -----------------------------------------------------------------------------
                            	  1801: 
                            	  1802: msg_start:
01:00004C02 726636386B205379	  1803: 	dc.b	"rf68k System Starting",CR,LF,0
01:00004C0A 7374656D20537461
01:00004C12 7274696E67
01:00004C17 0D
01:00004C18 0A
01:00004C19 00
                            	  1804: msg_core_start:
01:00004C1A 20636F7265207374	  1805: 	dc.b	" core starting",CR,LF
01:00004C22 617274696E67
01:00004C28 0D
01:00004C29 0A
                            	  1806: msg_illegal:
01:00004C2A 20496C6C6567616C	  1807: 	dc.b	" Illegal opcode",CR,LF,0
01:00004C32 206F70636F6465
01:00004C39 0D
01:00004C3A 0A
01:00004C3B 00
                            	  1808: 
                            	  1809: 


Symbols by name:
ABCD_INNER1                     01:00002536
ABCD_INNER2                     01:000025A4
ABCD_NO_C1                      01:00002552
ABCD_NO_C2                      01:0000255A
ABCD_NO_C3                      01:000025C0
ABCD_NO_C4                      01:000025C8
ABCD_OUTER1                     01:00002534
ABCD_OUTER2                     01:000025A2
ADDA_OUTER1                     01:000030AA
ADDQ_LOOP1                      01:000028C4
ADDQ_LOOP2                      01:00002902
ADDQ_LOOP3                      01:00002938
ADDX_LOOP3                      01:000031D0
ADDX_LOOP4                      01:000031EC
ADDX_LOOP5                      01:00003208
ADDX_OUTER1                     01:0000313C
ADD_OUTER1                      01:00002ED0
ADD_OUTER2                      01:00002F44
ALL_DONE                        01:00000216
AND_OUTER1                      01:00002BEE
AND_OUTER2                      01:00002C62
AUXIN                           01:00004BD0
AsciiToHexNybble                01:000049CC
AudioInputTest                  01:00004BC4
BCC1                            01:000027EA
BCC10                           01:0000283C
BCC11                           01:00002844
BCC12                           01:0000284E
BCC13                           01:00002856
BCC14                           01:00002860
BCC2                            01:000027F4
BCC3                            01:000027FC
BCC4                            01:00002806
BCC5                            01:0000280E
BCC6                            01:00002818
BCC7                            01:00002820
BCC8                            01:0000282A
BCC9                            01:00002832
BSR_CLOSE1                      01:0000136E
BSR_CLOSE2                      01:000013A4
BSR_FAR1                        01:00000218
BSR_FAR2                        01:000027DA
BlankLastLine                   01:00003FAE
BouncingBalls                   01:00004BC6
CMPA_OUTER1                     01:00002DC4
CMPM_LOOP1                      01:00002E52
CMPM_LOOP2                      01:00002E6C
CMPM_LOOP3                      01:00002E86
CMP_OUTER1                      01:00002D4E
CR                               E:0000000D
CRLF                            01:00003D6E
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003D80
CheckForCtrlC                   01:000040D8
CheckForKey                     01:000040AC
ClearScreen                     01:00004BCA
CmdBuf                          00:00000421
CmdBufEnd                       00:00000422
CursorCol                       00:0000040D
CursorRow                       00:0000040C
DBCC_LOOP1                      01:0000286A
DBCC_LOOP2                      01:00002878
DIVS_OUTER1                     01:00002AAE
DIVU_OUTER1                     01:00002A5C
DecrementSemaphore              01:000000D8
Delay3s                         01:00000118
DisplayByte                     01:00004A2C
DisplayChar                     01:00003DB4
DisplayHelp                     01:0000470E
DisplayMem                      01:00004944
DisplayNybble                   01:00004A32
DisplaySpace                    01:00004A18
DisplayString                   01:00003FF2
DisplayStringCRLF               01:0000400A
DisplayTetra                    01:00004A20
DisplayTwoSpaces                01:00004A06
DisplayWyde                     01:00004A26
DumpMem                         01:00004912
DumpMem1                        01:00004932
EOR_OUTER2                      01:00002CD8
EXCEPTION_6                     01:00000220
EXCEPTION_7                     01:00000230
EditMem                         01:000048B8
ExecuteCode                     01:00004904
FillMem                         01:00004860
FromScreen                      01:0000463E
GetCmdLine                      01:000047BC
GetHexNumber                    01:000049A0
GetKey                          01:000040BE
GraphicsDemo                    01:00004BC8
HelpMsg                         01:00004720
HomeCursor                      01:00004010
IncCursorPos                    01:00003F28
IncCursorRow                    01:00003F48
IncrementSemaphore              01:000000C0
InitSemaphores                  01:00000082
KEYBD                            E:FD0FFE00
KeybdEcho                       00:0000041C
KeybdGetChar                    01:000040F8
KeybdGetCharNoWait              01:000040E8
KeybdGetCharWait                01:000040F0
KeybdLEDs                       00:0000041E
KeybdRecvByte                   01:00004066
KeybdSendByte                   01:00004326
KeybdSetLEDStatus               01:000042BA
KeybdWaitFlag                   00:0000041D
KeybdWaitTx                     01:00004086
LEA1                            01:00001D7E
LF                               E:0000000A
LoadS19                         01:00004A4C
LockSemaphore                   01:000000F0
MOVE1                           01:000019EC
MOVE2                           01:00001970
MOVE3                           01:00001A6C
MOVE4                           01:00001BC6
MULS_OUTER1                     01:000033A4
MULU_OUTER1                     01:00003358
Monitor                         01:0000464A
NBCD_LOOP                       01:00002728
NBCD_LOOP1                      01:0000276E
NBCD_NO_C                       01:00002734
NBCD_NO_C1                      01:00002782
NBCD_NO_Z                       01:00002738
NBCD_NO_Z1                      01:00002786
NextRec                         01:00004A4E
OR_OUTER1                       01:00002B04
OR_OUTER2                       01:00002B78
ProcessRec                      01:00004A58
ProcessS1                       01:00004B0C
ProcessS2                       01:00004B10
ProcessS3                       01:00004B14
ProcessS7                       01:00004B18
ProcessS8                       01:00004B24
ProcessS9                       01:00004B30
Prompt1                         01:00004672
Prompt2                         01:00004684
Prompt3                         01:00004662
PromptLn                        01:00004656
ROXx_FLAGS                      01:0000366C
ROXx_LOOP1                      01:00003682
ROXx_LOOP2                      01:000036A2
ROXx_LOOP3                      01:000036C2
ROXx_LOOP4                      01:000036E2
ROXx_LOOP5                      01:00003702
ROXx_LOOP6                      01:00003724
ROx_FLAGS                       01:00003436
ROx_LOOP1                       01:0000344C
ROx_LOOP2                       01:0000346C
ROx_LOOP3                       01:0000348C
ROx_LOOP4                       01:000034AC
ROx_LOOP5                       01:000034CC
ROx_LOOP6                       01:000034EE
RTR_DONE                        01:000027CC
S1932a                          01:00004B72
S1932b                          01:00004B86
S19Get16BitAddress              01:00004B3C
S19Get24BitAddress              01:00004B48
S19Get32BitAddress              01:00004B54
S19StartAddress                 00:00000418
SBCD_INNER1                     01:00002634
SBCD_INNER2                     01:000026A2
SBCD_NO_C1                      01:00002650
SBCD_NO_C2                      01:00002658
SBCD_NO_C3                      01:000026BE
SBCD_NO_C4                      01:000026C6
SBCD_OUTER1                     01:00002632
SBCD_OUTER2                     01:000026A0
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003AE4
SHIFTS2_LOOP1                   01:00003AFA
SHIFTS2_LOOP2                   01:00003B16
SHIFTS2_LOOP3                   01:00003B32
SHIFTS2_LOOP4                   01:00003B4E
SHIFTS2_LOOP5                   01:00003B6A
SHIFTS2_LOOP6                   01:00003B88
SHIFTS_FLAGS                    01:000038A2
SHIFTS_LOOP1                    01:000038B8
SHIFTS_LOOP2                    01:000038D8
SHIFTS_LOOP3                    01:000038F8
SHIFTS_LOOP4                    01:00003918
SHIFTS_LOOP5                    01:00003938
SHIFTS_LOOP6                    01:0000395A
SUBA_OUTER1                     01:000030F6
SUBQ_LOOP1                      01:00002982
SUBQ_LOOP2                      01:000029BC
SUBQ_LOOP3                      01:000029F2
SUBX_LOOP3                      01:000032E0
SUBX_LOOP4                      01:000032FC
SUBX_LOOP5                      01:00003318
SUBX_OUTER1                     01:0000324C
SUB_OUTER1                      01:00002FBA
SUB_OUTER2                      01:0000302E
ScrollUp                        01:00003F7C
StartMon                        01:0000464A
SyncCursor                      01:00004022
TEXTREG                          E:FD01FF00
TestCLS                         01:000046E0
TestSemaphore                   01:000000A4
TextCols                        00:0000040F
TextCurpos                      00:00000410
TextPos                         00:00000410
TextRows                        00:0000040E
TextScr                         00:00000414
UnlockSemaphore                 01:000000F6
Wait10ms                        01:0000432E
_KeyState1                      00:0000041F
_KeyState2                      00:00000420
_KeybdGetScancode               01:00004054
_KeybdGetStatus                 01:0000404C
_KeybdInit                      01:0000403E
_keybdControlCodes              01:0000453E
_keybdExtendedCodes             01:000045BE
_shiftedScanCodes               01:0000443E
_unshiftedScanCodes             01:0000433E
bkcolor                         00:00000408
brdisp_trap                     01:00004BE2
cfk1                            01:000040BA
clear_screen                    01:00003D3A
cpu_test                        01:0000013C
dccr                            01:00003DD4
dclf                            01:00003EA8
dcx10                           01:00003E44
dcx11                           01:00003E62
dcx12                           01:00003E5A
dcx14                           01:00003DF0
dcx16                           01:00003EAC
dcx4                            01:00003EB0
dcx6                            01:00003DFA
dcx7                            01:00003DF4
dcx8                            01:00003E10
dcx9                            01:00003E26
dly3s1                          01:00000128
dly3s2                          01:00000126
doBackspace                     01:00003EBA
doCtrlX                         01:00003F04
doDelete                        01:00003EC8
do_nothing                      01:00000080
dspj1                           01:00003FF6
dspmem1                         01:00004954
dspspc1                         01:00004A10
dsret                           01:00004004
edtmem1                         01:000048C0
fgcolor                         00:00000404
fmem1                           01:0000488C
fmemB                           01:0000489C
fmemL                           01:00004882
fmemW                           01:00004892
get_screen_color                01:00003D0E
gk1                             01:000040D6
gthx3                           01:00004A02
gthx5                           01:000049DE
gthx6                           01:000049F0
icc1                            01:00003F7A
ignBlanks                       01:000048A6
illegal_trap                    01:00004BEE
irq_rout                        01:00004BD2
leds                             E:FD0FFF00
loop1                           01:00000050
loop2                           01:0000004E
loop3                           01:00003D64
msg_core_start                  01:00004C1A
msg_illegal                     01:00004C2A
msg_start                       01:00004C02
op_ABCD                         01:00002514
op_ADD                          01:00002EB0
op_ADDA                         01:00003084
op_ADDQ                         01:000028B0
op_ADDX                         01:0000311C
op_ADD_I                        01:00001598
op_AND                          01:00002BCE
op_ANDI_TO_CCR                  01:000002C8
op_ANDI_TO_SR                   01:000002EE
op_BCC                          01:000027E2
op_BCHG                         01:000006BE
op_BCLR                         01:00000A26
op_BOOL_I                       01:000011B0
op_BSET                         01:00000D76
op_BSR                          01:00001376
op_BTST                         01:00000314
op_BTST0                        01:0000049E
op_BTST1                        01:000004AA
op_BTST10                       01:000004F2
op_BTST11                       01:000004FA
op_BTST12                       01:00000500
op_BTST2                        01:000004B2
op_BTST20                       01:00000658
op_BTST21                       01:00000662
op_BTST22                       01:00000668
op_BTST23                       01:0000066E
op_BTST24                       01:00000674
op_BTST25                       01:0000067A
op_BTST26                       01:00000680
op_BTST27                       01:00000686
op_BTST28                       01:0000068C
op_BTST29                       01:00000692
op_BTST3                        01:000004BA
op_BTST30                       01:00000698
op_BTST31                       01:0000069E
op_BTST32                       01:000006A2
op_BTST4                        01:000004C2
op_BTST5                        01:000004CA
op_BTST6                        01:000004D2
op_BTST7                        01:000004DA
op_BTST8                        01:000004E2
op_BTST9                        01:000004EA
op_CHK                          01:00001E2E
op_CMP                          01:00002D2E
op_CMPA                         01:00002DA4
op_CMPM                         01:00002E0A
op_CMP_I                        01:000013AC
op_DBCC                         01:00002862
op_DIVS                         01:00002A92
op_DIVU                         01:00002A40
op_EOR                          01:00002CB8
op_EORI_TO_CCR                  01:0000027C
op_EORI_TO_SR                   01:000002A2
op_EXG                          01:000033D4
op_EXT                          01:00001CA4
op_LEAPEA                       01:00001CE6
op_LINKS                        01:00001E00
op_MOVE                         01:000018A4
op_MOVEM                        01:000021F6
op_MOVEP                        01:0000111C
op_MOVEQ                        01:00002A24
op_MOVE_USP                     01:00001E1E
op_MOVE_xxx_FLAGS               01:00001AB0
op_MULS                         01:00003388
op_MULU                         01:0000333C
op_NBCD                         01:00002710
op_NEGS                         01:00001E68
op_OR                           01:00002AE4
op_ORI_TO_CCR                   01:00000238
op_ORI_TO_SR                    01:0000025A
op_ROXx                         01:00003678
op_ROx                          01:00003442
op_RTR                          01:000027BE
op_SBCD                         01:00002612
op_SCC                          01:00002888
op_SHIFTS                       01:000038AE
op_SHIFTS2                      01:00003AF0
op_SUB                          01:00002F9A
op_SUBA                         01:000030D0
op_SUBQ                         01:0000296A
op_SUBX                         01:0000322C
op_SUB_I                        01:0000171E
op_SWAP                         01:00001CD0
op_TAS                          01:00001D92
op_TRAPV                        01:000027A2
op_TST                          01:00001DBA
pcssxa                          01:00004AC8
sGetChar                        01:00004BAA
semamem                          E:FD050000
start                           01:00000000
start_other                     01:00000062

Symbols by value:
FD01FF00 TEXTREG
FD050000 semamem
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 start
00000003 CTRLC
00000008 CTRLH
0000000A LF
0000000D SC_TAB
0000000D CR
00000011 SC_ALT
00000012 SC_LSHIFT
00000014 SC_CTRL
00000018 CTRLX
0000004E loop2
00000050 loop1
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000062 start_other
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
00000080 do_nothing
00000082 InitSemaphores
000000A4 TestSemaphore
000000C0 IncrementSemaphore
000000D8 DecrementSemaphore
000000E0 SC_EXTEND
000000F0 LockSemaphore
000000F0 SC_KEYUP
000000F6 UnlockSemaphore
00000118 Delay3s
00000126 dly3s2
00000128 dly3s1
0000013C cpu_test
00000216 ALL_DONE
00000218 BSR_FAR1
00000220 EXCEPTION_6
00000230 EXCEPTION_7
00000238 op_ORI_TO_CCR
0000025A op_ORI_TO_SR
0000027C op_EORI_TO_CCR
000002A2 op_EORI_TO_SR
000002C8 op_ANDI_TO_CCR
000002EE op_ANDI_TO_SR
00000314 op_BTST
00000404 fgcolor
00000408 bkcolor
0000040C CursorRow
0000040D CursorCol
0000040E TextRows
0000040F TextCols
00000410 TextPos
00000410 TextCurpos
00000414 TextScr
00000418 S19StartAddress
0000041C KeybdEcho
0000041D KeybdWaitFlag
0000041E KeybdLEDs
0000041F _KeyState1
00000420 _KeyState2
00000421 CmdBuf
00000422 CmdBufEnd
0000049E op_BTST0
000004AA op_BTST1
000004B2 op_BTST2
000004BA op_BTST3
000004C2 op_BTST4
000004CA op_BTST5
000004D2 op_BTST6
000004DA op_BTST7
000004E2 op_BTST8
000004EA op_BTST9
000004F2 op_BTST10
000004FA op_BTST11
00000500 op_BTST12
00000658 op_BTST20
00000662 op_BTST21
00000668 op_BTST22
0000066E op_BTST23
00000674 op_BTST24
0000067A op_BTST25
00000680 op_BTST26
00000686 op_BTST27
0000068C op_BTST28
00000692 op_BTST29
00000698 op_BTST30
0000069E op_BTST31
000006A2 op_BTST32
000006BE op_BCHG
00000A26 op_BCLR
00000D76 op_BSET
0000111C op_MOVEP
000011B0 op_BOOL_I
0000136E BSR_CLOSE1
00001376 op_BSR
000013A4 BSR_CLOSE2
000013AC op_CMP_I
00001598 op_ADD_I
0000171E op_SUB_I
000018A4 op_MOVE
00001970 MOVE2
000019EC MOVE1
00001A6C MOVE3
00001AB0 op_MOVE_xxx_FLAGS
00001BC6 MOVE4
00001CA4 op_EXT
00001CD0 op_SWAP
00001CE6 op_LEAPEA
00001D7E LEA1
00001D92 op_TAS
00001DBA op_TST
00001E00 op_LINKS
00001E1E op_MOVE_USP
00001E2E op_CHK
00001E68 op_NEGS
000021F6 op_MOVEM
00002514 op_ABCD
00002534 ABCD_OUTER1
00002536 ABCD_INNER1
00002552 ABCD_NO_C1
0000255A ABCD_NO_C2
000025A2 ABCD_OUTER2
000025A4 ABCD_INNER2
000025C0 ABCD_NO_C3
000025C8 ABCD_NO_C4
00002612 op_SBCD
00002632 SBCD_OUTER1
00002634 SBCD_INNER1
00002650 SBCD_NO_C1
00002658 SBCD_NO_C2
000026A0 SBCD_OUTER2
000026A2 SBCD_INNER2
000026BE SBCD_NO_C3
000026C6 SBCD_NO_C4
00002710 op_NBCD
00002728 NBCD_LOOP
00002734 NBCD_NO_C
00002738 NBCD_NO_Z
0000276E NBCD_LOOP1
00002782 NBCD_NO_C1
00002786 NBCD_NO_Z1
000027A2 op_TRAPV
000027BE op_RTR
000027CC RTR_DONE
000027DA BSR_FAR2
000027E2 op_BCC
000027EA BCC1
000027F4 BCC2
000027FC BCC3
00002806 BCC4
0000280E BCC5
00002818 BCC6
00002820 BCC7
0000282A BCC8
00002832 BCC9
0000283C BCC10
00002844 BCC11
0000284E BCC12
00002856 BCC13
00002860 BCC14
00002862 op_DBCC
0000286A DBCC_LOOP1
00002878 DBCC_LOOP2
00002888 op_SCC
000028B0 op_ADDQ
000028C4 ADDQ_LOOP1
00002902 ADDQ_LOOP2
00002938 ADDQ_LOOP3
0000296A op_SUBQ
00002982 SUBQ_LOOP1
000029BC SUBQ_LOOP2
000029F2 SUBQ_LOOP3
00002A24 op_MOVEQ
00002A40 op_DIVU
00002A5C DIVU_OUTER1
00002A92 op_DIVS
00002AAE DIVS_OUTER1
00002AE4 op_OR
00002B04 OR_OUTER1
00002B78 OR_OUTER2
00002BCE op_AND
00002BEE AND_OUTER1
00002C62 AND_OUTER2
00002CB8 op_EOR
00002CD8 EOR_OUTER2
00002D2E op_CMP
00002D4E CMP_OUTER1
00002DA4 op_CMPA
00002DC4 CMPA_OUTER1
00002E0A op_CMPM
00002E52 CMPM_LOOP1
00002E6C CMPM_LOOP2
00002E86 CMPM_LOOP3
00002EB0 op_ADD
00002ED0 ADD_OUTER1
00002F44 ADD_OUTER2
00002F9A op_SUB
00002FBA SUB_OUTER1
0000302E SUB_OUTER2
00003084 op_ADDA
000030AA ADDA_OUTER1
000030D0 op_SUBA
000030F6 SUBA_OUTER1
0000311C op_ADDX
0000313C ADDX_OUTER1
000031D0 ADDX_LOOP3
000031EC ADDX_LOOP4
00003208 ADDX_LOOP5
0000322C op_SUBX
0000324C SUBX_OUTER1
000032E0 SUBX_LOOP3
000032FC SUBX_LOOP4
00003318 SUBX_LOOP5
0000333C op_MULU
00003358 MULU_OUTER1
00003388 op_MULS
000033A4 MULS_OUTER1
000033D4 op_EXG
00003436 ROx_FLAGS
00003442 op_ROx
0000344C ROx_LOOP1
0000346C ROx_LOOP2
0000348C ROx_LOOP3
000034AC ROx_LOOP4
000034CC ROx_LOOP5
000034EE ROx_LOOP6
0000366C ROXx_FLAGS
00003678 op_ROXx
00003682 ROXx_LOOP1
000036A2 ROXx_LOOP2
000036C2 ROXx_LOOP3
000036E2 ROXx_LOOP4
00003702 ROXx_LOOP5
00003724 ROXx_LOOP6
000038A2 SHIFTS_FLAGS
000038AE op_SHIFTS
000038B8 SHIFTS_LOOP1
000038D8 SHIFTS_LOOP2
000038F8 SHIFTS_LOOP3
00003918 SHIFTS_LOOP4
00003938 SHIFTS_LOOP5
0000395A SHIFTS_LOOP6
00003AE4 SHIFTS2_FLAGS
00003AF0 op_SHIFTS2
00003AFA SHIFTS2_LOOP1
00003B16 SHIFTS2_LOOP2
00003B32 SHIFTS2_LOOP3
00003B4E SHIFTS2_LOOP4
00003B6A SHIFTS2_LOOP5
00003B88 SHIFTS2_LOOP6
00003D0E get_screen_color
00003D3A clear_screen
00003D64 loop3
00003D6E CRLF
00003D80 CalcScreenLoc
00003DB4 DisplayChar
00003DD4 dccr
00003DF0 dcx14
00003DF4 dcx7
00003DFA dcx6
00003E10 dcx8
00003E26 dcx9
00003E44 dcx10
00003E5A dcx12
00003E62 dcx11
00003EA8 dclf
00003EAC dcx16
00003EB0 dcx4
00003EBA doBackspace
00003EC8 doDelete
00003F04 doCtrlX
00003F28 IncCursorPos
00003F48 IncCursorRow
00003F7A icc1
00003F7C ScrollUp
00003FAE BlankLastLine
00003FF2 DisplayString
00003FF6 dspj1
00004004 dsret
0000400A DisplayStringCRLF
00004010 HomeCursor
00004022 SyncCursor
0000403E _KeybdInit
0000404C _KeybdGetStatus
00004054 _KeybdGetScancode
00004066 KeybdRecvByte
00004086 KeybdWaitTx
000040AC CheckForKey
000040BA cfk1
000040BE GetKey
000040D6 gk1
000040D8 CheckForCtrlC
000040E8 KeybdGetCharNoWait
000040F0 KeybdGetCharWait
000040F8 KeybdGetChar
000042BA KeybdSetLEDStatus
00004326 KeybdSendByte
0000432E Wait10ms
0000433E _unshiftedScanCodes
0000443E _shiftedScanCodes
0000453E _keybdControlCodes
000045BE _keybdExtendedCodes
0000463E FromScreen
0000464A StartMon
0000464A Monitor
00004656 PromptLn
00004662 Prompt3
00004672 Prompt1
00004684 Prompt2
000046E0 TestCLS
0000470E DisplayHelp
00004720 HelpMsg
000047BC GetCmdLine
00004860 FillMem
00004882 fmemL
0000488C fmem1
00004892 fmemW
0000489C fmemB
000048A6 ignBlanks
000048B8 EditMem
000048C0 edtmem1
00004904 ExecuteCode
00004912 DumpMem
00004932 DumpMem1
00004944 DisplayMem
00004954 dspmem1
000049A0 GetHexNumber
000049CC AsciiToHexNybble
000049DE gthx5
000049F0 gthx6
00004A02 gthx3
00004A06 DisplayTwoSpaces
00004A10 dspspc1
00004A18 DisplaySpace
00004A20 DisplayTetra
00004A26 DisplayWyde
00004A2C DisplayByte
00004A32 DisplayNybble
00004A4C LoadS19
00004A4E NextRec
00004A58 ProcessRec
00004AC8 pcssxa
00004B0C ProcessS1
00004B10 ProcessS2
00004B14 ProcessS3
00004B18 ProcessS7
00004B24 ProcessS8
00004B30 ProcessS9
00004B3C S19Get16BitAddress
00004B48 S19Get24BitAddress
00004B54 S19Get32BitAddress
00004B72 S1932a
00004B86 S1932b
00004BAA sGetChar
00004BC4 AudioInputTest
00004BC6 BouncingBalls
00004BC8 GraphicsDemo
00004BCA ClearScreen
00004BD0 AUXIN
00004BD2 irq_rout
00004BE2 brdisp_trap
00004BEE illegal_trap
00004C02 msg_start
00004C1A msg_core_start
00004C2A msg_illegal

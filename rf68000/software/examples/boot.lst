Sections:
00: "DATA" (0-41F)
01: "CODE" (0-4D7A)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+
                            	     7: ;          | startup sp,pc  | 8 B
                            	     8: ; 00000008 +----------------+
                            	     9: ;					 |    vectors     |
                            	    10: ; 00000400 +----------------+
                            	    11: ;					 |   bios mem     |
                            	    12: ; 00000800 +----------------+
                            	    13: ;					 |   bios code    |
                            	    14: ; 00008000 +----------------+
                            	    15: ;					 |    unused      |
                            	    16: ; 20000000 +----------------+
                            	    17: ;          |                |
                            	    18: ;          |                |
                            	    19: ;          |                |
                            	    20: ;          :  dram memory   : 512 MB
                            	    21: ;          |                |
                            	    22: ;          |                |
                            	    23: ;          |                |
                            	    24: ; 40000000 +----------------+
                            	    25: ;          |                |
                            	    26: ;          :     unused     :
                            	    27: ;          |                |
                            	    28: ; FFD00000 +----------------+
                            	    29: ;          |                |
                            	    30: ;          :    I/O area    : 1.0 M
                            	    31: ;          |                |
                            	    32: ; FFE00000 +----------------+
                            	    33: ;          |                |
                            	    34: ;          :     unused     :
                            	    35: ;          |                |
                            	    36: ; FFFFFFE0 +----------------+
                            	    37: ;          | special regs   |
                            	    38: ; FFFFFFFF +----------------+
                            	    39: ;
                            	    40: ;-------------------------------------------------------------------------------
                            	    41: ;
                            	    42: CTRLC	EQU		$03
                            	    43: CTRLH	EQU		$08
                            	    44: CTRLX	EQU		$18
                            	    45: LF		EQU		$0A
                            	    46: CR		EQU		$0D
                            	    47: 
                            	    48: SC_F12  EQU    $07
                            	    49: SC_C    EQU    $21
                            	    50: SC_T    EQU    $2C
                            	    51: SC_Z    EQU    $1A
                            	    52: SC_KEYUP	EQU		$F0
                            	    53: SC_EXTEND   EQU		$E0
                            	    54: SC_CTRL		EQU		$14
                            	    55: SC_RSHIFT	EQU		$59
                            	    56: SC_NUMLOCK	EQU		$77
                            	    57: SC_SCROLLLOCK	EQU	$7E
                            	    58: SC_CAPSLOCK		EQU	$58
                            	    59: SC_ALT		EQU		$11
                            	    60: SC_LSHIFT	EQU		$12
                            	    61: SC_DEL		EQU		$71		; extend
                            	    62: SC_LCTRL	EQU		$58
                            	    63: SC_TAB      EQU		$0D
                            	    64: 
                            	    65: TEXTREG		EQU	$FD03FF00
                            	    66: txtscreen	EQU	$FD000000
                            	    67: semamem		EQU	$FD050000
                            	    68: ACIA			EQU	$FD060000
                            	    69: ACIA_RX		EQU	0
                            	    70: ACIA_STAT	EQU	4
                            	    71: leds			EQU	$FD0FFF00
                            	    72: keybd			EQU	$FD0FFE00
                            	    73: KEYBD			EQU	$FD0FFE00
                            	    74: rand			EQU	$FD0FFD00
                            	    75: IOFocus		EQU	$00100000
                            	    76: Keybuf		EQU	$00100004
                            	    77: 
                            	    78: 	data
00:00000000 0001FFFC        	    79: 	dc.l		$0001FFFC
00:00000004 00000000        	    80: 	dc.l		start
00:00000008 00000000        	    81: 	dc.l		0
00:0000000C 00000000        	    82: 	dc.l		0
00:00000010 00004D18        	    83: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    84: 	dc.l		0
00:00000018 00000230        	    85: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000240        	    86: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	    87: 	dc.l		0
00:00000024 00000000        	    88: 	dc.l		0
                            	    89: 	
                            	    90: 	; 10
00:00000028 00000000        	    91: 	dc.l		0
00:0000002C 00000000        	    92: 	dc.l		0
00:00000030 00000000        	    93: 	dc.l		0
00:00000034 00000000        	    94: 	dc.l		0
00:00000038 00000000        	    95: 	dc.l		0
00:0000003C 00000000        	    96: 	dc.l		0
00:00000040 00000000        	    97: 	dc.l		0
00:00000044 00000000        	    98: 	dc.l		0
00:00000048 00000000        	    99: 	dc.l		0
00:0000004C 00000000        	   100: 	dc.l		0
                            	   101: 	
                            	   102: 	; 20
00:00000050 00000000        	   103: 	dc.l		0
00:00000054 00000000        	   104: 	dc.l		0
00:00000058 00000000        	   105: 	dc.l		0
00:0000005C 00000000        	   106: 	dc.l		0
00:00000060 00000000        	   107: 	dc.l		0
00:00000064 00000000        	   108: 	dc.l		0
00:00000068 00000000        	   109: 	dc.l		0
00:0000006C 00000000        	   110: 	dc.l		0
00:00000070 00000000        	   111: 	dc.l		0
00:00000074 00000000        	   112: 	dc.l		0
                            	   113: 	
                            	   114: 	; 30
00:00000078 00004CEE        	   115: 	dc.l		irq_rout					* IRQ 30 - timer
00:0000007C 00000000        	   116: 	dc.l		0
00:00000080 00000000        	   117: 	dc.l		0
00:00000084 00000000        	   118: 	dc.l		0
00:00000088 00000000        	   119: 	dc.l		0
00:0000008C 00000000        	   120: 	dc.l		0
00:00000090 00000000        	   121: 	dc.l		0
00:00000094 00000000        	   122: 	dc.l		0
00:00000098 00000000        	   123: 	dc.l		0
00:0000009C 00000000        	   124: 	dc.l		0
                            	   125: 
                            	   126: 	; 40
00:000000A0 00000000        	   127: 	dc.l		0
00:000000A4 00000000        	   128: 	dc.l		0
00:000000A8 00000000        	   129: 	dc.l		0
00:000000AC 00000000        	   130: 	dc.l		0
00:000000B0 00000000        	   131: 	dc.l		0
00:000000B4 00000000        	   132: 	dc.l		0
00:000000B8 00000000        	   133: 	dc.l		0
00:000000BC 0000400C        	   134: 	dc.l		TRAP15
00:000000C0 00000000        	   135: 	dc.l		0
00:000000C4 00000000        	   136: 	dc.l		0
                            	   137: 
                            	   138: 	; 50	
00:000000C8 00000000        	   139: 	dc.l		0
00:000000CC 00000000        	   140: 	dc.l		0
00:000000D0 00000000        	   141: 	dc.l		0
00:000000D4 00000000        	   142: 	dc.l		0
00:000000D8 00000000        	   143: 	dc.l		0
00:000000DC 00000000        	   144: 	dc.l		0
00:000000E0 00000000        	   145: 	dc.l		0
00:000000E4 00000000        	   146: 	dc.l		0
00:000000E8 00000000        	   147: 	dc.l		0
00:000000EC 00000000        	   148: 	dc.l		0
                            	   149: 
                            	   150: 	; 60
00:000000F0 00000000        	   151: 	dc.l		0
00:000000F4 00000000        	   152: 	dc.l		0
00:000000F8 00000000        	   153: 	dc.l		0
00:000000FC 00000000        	   154: 	dc.l		0
00:00000100 00004CFE        	   155: 	dc.l		brdisp_trap
00:00000104 00000000        	   156: 	dc.l		0
00:00000108 00000000        	   157: 	dc.l		0
00:0000010C 00000000        	   158: 	dc.l		0
00:00000110 00000000        	   159: 	dc.l		0
00:00000114 00000000        	   160: 	dc.l		0
                            	   161: 
                            	   162: 
                            	   163: 	align		10
                            	   164: ;fgcolor:
                            	   165: ;	ds.l		1
                            	   166: ;bkcolor:
                            	   167: ;	ds.l		1
                            	   168: ;CursorRow
                            	   169: ;	ds.b		1
                            	   170: ;CursorCol
                            	   171: ;	ds.b		1
                            	   172: ;TextRows
                            	   173: ;	ds.b		1
                            	   174: ;TextCols
                            	   175: ;	ds.b		1
                            	   176: ;TextPos
                            	   177: ;TextCurpos
                            	   178: ;	ds.w		1
                            	   179: ;	ds.w		1
                            	   180: ;TextScr
                            	   181: ;	ds.l		1
                            	   182: ;S19StartAddress
                            	   183: ;	ds.l		1
                            	   184: ;KeybdEcho
                            	   185: ;	ds.b		1
                            	   186: ;KeybdWaitFlag
                            	   187: ;	ds.b		1
                            	   188: ;KeybdLEDs
                            	   189: ;	ds.b		1
                            	   190: ;_KeyState1
                            	   191: ;	ds.b		1
                            	   192: ;_KeyState2
                            	   193: ;	ds.b		1
                            	   194: ;CmdBuf:
                            	   195: ;	ds.b		1
                            	   196: ;CmdBufEnd:
                            	   197: ;	ds.b		1
                            	   198: 
                            	   199: 
                            	   200: ;-------------------------------------------------------------------------------
                            	   201: ;-------------------------------------------------------------------------------
                            	   202: 
                            	   203: const_tbl:
                            	   204: fgcolor:
00:00000400 001FFFFF        	   205: 	dc.l		$1fffff					; white
                            	   206: bkcolor:
00:00000404 0000003F        	   207: 	dc.l		$00003f					; dark blue
                            	   208: CursorRow
00:00000408 00              	   209: 	dc.b		$00
                            	   210: CursorCol
00:00000409 00              	   211: 	dc.b		$00
                            	   212: TextRows
00:0000040A 20              	   213: 	dc.b		32
                            	   214: TextCols
00:0000040B 40              	   215: 	dc.b		64
                            	   216: TextPos
                            	   217: TextCurpos
00:0000040C 0000            	   218: 	dc.w		$00
00:0000040E 0000            	   219: 	dc.w		0
                            	   220: TextScr
00:00000410 FD000000        	   221: 	dc.l		$FD000000
                            	   222: S19StartAddress
00:00000414 10000000        	   223: 	dc.l		$10000000
                            	   224: KeybdEcho
00:00000418 00              	   225: 	dc.b		0
                            	   226: KeybdWaitFlag
00:00000419 00              	   227: 	dc.b		0
                            	   228: KeybdLEDs
00:0000041A 00              	   229: 	dc.b		0
                            	   230: _KeyState1
00:0000041B 00              	   231: 	dc.b		0
                            	   232: _KeyState2
00:0000041C 00              	   233: 	dc.b		0
                            	   234: CmdBuf:
00:0000041D 00              	   235: 	dc.b		0
                            	   236: CmdBufEnd:
00:0000041E 00              	   237: 	dc.b		0
                            	   238: 
                            	   239: 	code
                            	   240: 	align		2
                            	   241: start:
01:00000000 47FCFF002700    	   242: 	move.l	#$FF002700,sr		* enable level 6 and higher interrupts
01:00000006 4E7A0FE0        	   243: 	movec.l	coreno,d0				* get core number
01:0000000A 0C000002        	   244: 	cmpi.b	#2,d0
01:0000000E 664A            	   245: 	bne			start_other
01:00000010 23FC000000040010	   246: 	move.l	#$4,IOFocus			* Set the IO focus map in global memory
01:00000018 0000
                            	   247: ;	bsr			InitSemaphores
01:0000001A 61000108        	   248: 	bsr			Delay3s					* give devices time to reset
01:0000001E 61003CDA        	   249: 	bsr			clear_screen
                            	   250: 
                            	   251: 	; Write startup message to screen
                            	   252: 
01:00000022 43FA4D0A        	   253: 	lea			msg_start,a1
01:00000026 61003F9E        	   254: 	bsr			DisplayString
01:0000002A 7201            	   255: 	moveq.l	#1,d1
01:0000002C 610000D6        	   256: 	bsr			UnlockSemaphore	; allow another cpu access
01:00000030 7200            	   257: 	moveq.l	#0,d1
01:00000032 610000D0        	   258: 	bsr			UnlockSemaphore	; allow other cpus to proceed
01:00000036 33FCA4A4FD0FFF00	   259: 	move.w	#$A4A4,leds			; diagnostics
01:0000003E 600046F8        	   260: 	bra			Monitor
01:00000042 61000104        	   261: 	bsr			cpu_test
                            	   262: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   263: ;	move.l	a0,64*4
                            	   264: 
                            	   265: loop2:
01:00000046 70FF            	   266: 	move.l	#-1,d0
                            	   267: loop1:
01:00000048 2200            	   268: 	move.l	d0,d1
01:0000004A E089            	   269: 	lsr.l		#8,d1
01:0000004C E089            	   270: 	lsr.l		#8,d1
01:0000004E 13C1FD0FFF00    	   271: 	move.b	d1,leds
01:00000054 51C8FFF2        	   272: 	dbra		d0,loop1
01:00000058 60EC            	   273: 	bra			loop2
                            	   274: start_other:
01:0000005A 203900000410    	   275: 	move.l	TextScr,d0
01:00000060 4E7A1FE0        	   276: 	movec.l	coreno,d1					; get the core number
01:00000064 5581            	   277: 	subi.l	#2,d1							; core numbers start at 2
01:00000066 E181            	   278: 	asl.l		#8,d1							; * 16384 bytes per screen
01:00000068 ED81            	   279: 	asl.l		#6,d1
01:0000006A D280            	   280: 	add.l		d0,d1							; adjust index to screen
01:0000006C 23C100000410    	   281: 	move.l	d1,TextScr				; set new text screen location
01:00000072 61003C86        	   282: 	bsr			clear_screen
01:00000076 4E7A1FE0        	   283: 	movec		coreno,d1
01:0000007A 61004AAC        	   284: 	bsr			DisplayByte
01:0000007E 43FA4CC6        	   285: 	lea			msg_core_start,a1
01:00000082 61003F42        	   286: 	bsr			DisplayString
                            	   287: do_nothing:	
01:00000086 4E71            	   288: 	nop
01:00000088 60FC            	   289: 	bra			do_nothing
                            	   290: 
                            	   291: ;------------------------------------------------------------------------------
                            	   292: ; Initialize semaphores
                            	   293: ; - all semaphores are set to one except the first one, which is set to zero.
                            	   294: ;
                            	   295: ; Parameters:
                            	   296: ;		<none>
                            	   297: ; Modifies:
                            	   298: ;		<none>
                            	   299: ; Returns:
                            	   300: ;		<none>
                            	   301: ;------------------------------------------------------------------------------
                            	   302: 
                            	   303: InitSemaphores:
01:0000008A 48E7C080        	   304: 	movem.l	d0/d1/a0,-(a7)
01:0000008E 41F9FD050000    	   305: 	lea			semamem,a0
01:00000094 42284000        	   306: 	move.b	#0,$4000(a0)		; lock the first semaphore
01:00000098 323C00FE        	   307: 	move.w	#254,d1
01:0000009C 7001            	   308: 	moveq		#1,d0
                            	   309: .0001:
01:0000009E 41E80010        	   310: 	lea			16(a0),a0
01:000000A2 11404000        	   311: 	move.b	d0,$4000(a0)
01:000000A6 51C9FFF6        	   312: 	dbra		d1,.0001
01:000000AA 4CDF0103        	   313: 	movem.l	(a7)+,d0/d1/a0
01:000000AE 4E75            	   314: 	rts
                            	   315: 
                            	   316: ; -----------------------------------------------------------------------------
                            	   317: ; Test a semaphore to see if it is non-zero.
                            	   318: ;
                            	   319: ; Parameters:
                            	   320: ;		d1 semaphore number
                            	   321: ; -----------------------------------------------------------------------------
                            	   322: 
                            	   323: TestSemaphore:
01:000000B0 48E74080        	   324: 	movem.l	d1/a0,-(a7)			; save registers
01:000000B4 41F9FD050000    	   325: 	lea			semamem,a0			; point to semaphore memory
01:000000BA 4881            	   326: 	ext.w		d1							; make d1 word value
01:000000BC E941            	   327: 	asl.w		#4,d1						; align to memory
01:000000BE 06414000        	   328: 	addi.w	#$4000,d1				; point to read / write memory
01:000000C2 4A301000        	   329: 	tst.b		(a0,d1.w)				; read (test) value for zero
01:000000C6 4CDF0102        	   330: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000CA 4E75            	   331: 	rts
                            	   332: 
                            	   333: ; -----------------------------------------------------------------------------
                            	   334: ; Parameters:
                            	   335: ;		d1 semaphore number
                            	   336: ;
                            	   337: ; Side Effects:
                            	   338: ;		increments semaphore, saturates at 255
                            	   339: ;
                            	   340: ; Returns:	
                            	   341: ; 	z flag set if semaphore was zero
                            	   342: ; -----------------------------------------------------------------------------
                            	   343: 
                            	   344: IncrementSemaphore:
01:000000CC 48E74080        	   345: 	movem.l	d1/a0,-(a7)			; save registers
01:000000D0 41F9FD050000    	   346: 	lea			semamem,a0			; point to semaphore memory
01:000000D6 4881            	   347: 	ext.w		d1							; make d1 word value
01:000000D8 E941            	   348: 	asl.w		#4,d1						; align to memory
01:000000DA 4A301001        	   349: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:000000DE 4CDF0102        	   350: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000E2 4E75            	   351: 	rts
                            	   352: 	
                            	   353: ; -----------------------------------------------------------------------------
                            	   354: ; Parameters:
                            	   355: ;		d1 semaphore number
                            	   356: ;
                            	   357: ; Side Effects:
                            	   358: ;		decrements semaphore, saturates at zero
                            	   359: ;
                            	   360: ; Returns:	
                            	   361: ; 	z flag set if semaphore was zero
                            	   362: ; -----------------------------------------------------------------------------
                            	   363: 
                            	   364: DecrementSemaphore:
01:000000E4 48E74080        	   365: 	movem.l	d1/a0,-(a7)			; save registers
01:000000E8 41F9FD050000    	   366: 	lea			semamem,a0			; point to semaphore memory
01:000000EE 024100FF        	   367: 	andi.w	#255,d1					; make d1 word value
01:000000F2 E941            	   368: 	asl.w		#4,d1						; align to memory
01:000000F4 4A301001        	   369: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:000000F8 4CDF0102        	   370: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000FC 4E75            	   371: 	rts
                            	   372: 
                            	   373: ; -----------------------------------------------------------------------------
                            	   374: ; Parameters:
                            	   375: ;		d1 semaphore number
                            	   376: ; -----------------------------------------------------------------------------
                            	   377: 
                            	   378: LockSemaphore:
                            	   379: .0001:
01:000000FE 61E4            	   380: 	bsr			DecrementSemaphore
01:00000100 67FC            	   381: 	beq.s		.0001
01:00000102 4E75            	   382: 	rts
                            	   383: 	
                            	   384: ; -----------------------------------------------------------------------------
                            	   385: ; Test a semaphore to see if it is non-zero.
                            	   386: ;
                            	   387: ; Parameters:
                            	   388: ;		d1 semaphore number
                            	   389: ; -----------------------------------------------------------------------------
                            	   390: 
                            	   391: UnlockSemaphore:
01:00000104 48E74080        	   392: 	movem.l	d1/a0,-(a7)			; save registers
01:00000108 41F9FD050000    	   393: 	lea			semamem,a0			; point to semaphore memory
01:0000010E 024100FF        	   394: 	andi.w	#255,d1					; make d1 word value
01:00000112 E941            	   395: 	asl.w		#4,d1						; align to memory
01:00000114 06414000        	   396: 	addi.w	#$4000,d1				; point to read / write memory
01:00000118 11BC00011000    	   397: 	move.b	#1,(a0,d1.w)		; write one to unlock
01:0000011E 4CDF0102        	   398: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000122 4E75            	   399: 	rts
                            	   400: 
                            	   401: ; -----------------------------------------------------------------------------
                            	   402: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   403: ; -----------------------------------------------------------------------------
                            	   404: 
                            	   405: Delay3s:
01:00000124 203C002DC6C0    	   406: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:0000012A 41F9FD0FFF00    	   407: 	lea			leds,a0				; a0 = address of LED output register
01:00000130 6002            	   408: 	bra			dly3s1				; branch to the loop
                            	   409: dly3s2:	
01:00000132 4840            	   410: 	swap		d0						; loop is larger than 16-bits
                            	   411: dly3s1:
01:00000134 2200            	   412: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:00000136 E199            	   413: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:00000138 E199            	   414: 	rol.l		#8,d1
01:0000013A 1081            	   415: 	move.b	d1,(a0)				; set the LEDs
01:0000013C 51C8FFF6        	   416: 	dbra		d0,dly3s1			; decrement and branch back
01:00000140 4840            	   417: 	swap		d0
01:00000142 51C8FFEE        	   418: 	dbra		d0,dly3s2
01:00000146 4E75            	   419: 	rts
                            	   420: 
                            	   421: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
01:00000148 610000FE        	    84: 	bsr	op_ORI_TO_CCR
01:0000014C 6100011E        	    85: 	bsr	op_ORI_TO_SR
01:00000150 61000144        	    86: 	bsr	op_EORI_TO_CCR
01:00000154 61000168        	    87: 	bsr	op_EORI_TO_SR
01:00000158 61000194        	    88: 	bsr	op_ANDI_TO_CCR
01:0000015C 610001B6        	    89: 	bsr	op_ANDI_TO_SR
01:00000160 610001E2        	    90: 	bsr	op_BTST
01:00000164 61000588        	    91: 	bsr	op_BCHG
01:00000168 610008EC        	    92: 	bsr	op_BCLR
01:0000016C 61000C36        	    93: 	bsr	op_BSET
01:00000170 61000F7A        	    94: 	bsr op_MOVEP
01:00000174 61001002        	    95: 	bsr op_BOOL_I
01:00000178 610011E6        	    96: 	bsr op_CMP_I
01:0000017C 610013CA        	    97: 	bsr op_ADD_I
01:00000180 6100154C        	    98: 	bsr op_SUB_I
01:00000184 610016CE        	    99: 	bsr op_MOVE
01:00000188 610018D6        	   100: 	bsr op_MOVE_xxx_FLAGS
01:0000018C 61001AEA        	   101: 	bsr op_EXT
01:00000190 61001B12        	   102: 	bsr op_SWAP
01:00000194 61001B24        	   103: 	bsr op_LEAPEA
01:00000198 61001BCE        	   104: 	bsr op_TAS
01:0000019C 61001BF0        	   105: 	bsr op_TST
01:000001A0 61001C2A        	   106: 	bsr op_LINKS
01:000001A4 61001C44        	   107: 	bsr op_MOVE_USP
                            	   108: *	bsr op_CHK
01:000001A8 61001C8A        	   109: 	bsr op_NEGS
01:000001AC 61002014        	   110: 	bsr op_MOVEM
                            	   111: ** fails
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
                            	   115: *	bsr op_TRAPV
01:000001B0 610025CC        	   116: 	bsr op_RTR
01:000001B4 61001174        	   117: 	bsr op_BSR
01:000001B8 610025E8        	   118: 	bsr op_BCC
01:000001BC 61002664        	   119: 	bsr op_DBCC
01:000001C0 61002686        	   120: 	bsr op_SCC
01:000001C4 610026AA        	   121: 	bsr op_ADDQ
01:000001C8 61002760        	   122: 	bsr op_SUBQ
01:000001CC 61002816        	   123: 	bsr op_MOVEQ
                            	   124: *** fails
                            	   125: *	bsr op_DIVU
                            	   126: *	bsr op_DIVS
01:000001D0 610028D2        	   127: 	bsr op_OR
01:000001D4 610029B8        	   128: 	bsr op_AND
01:000001D8 61002A9E        	   129: 	bsr op_EOR
01:000001DC 61002B10        	   130: 	bsr op_CMP
01:000001E0 61002B82        	   131: 	bsr op_CMPA
01:000001E4 61002BE4        	   132: 	bsr op_CMPM
01:000001E8 61002C86        	   133: 	bsr op_ADD
01:000001EC 61002D6C        	   134: 	bsr op_SUB
01:000001F0 61002E52        	   135: 	bsr op_ADDA
01:000001F4 61002E9A        	   136: 	bsr op_SUBA
01:000001F8 61002EE2        	   137: 	bsr op_ADDX
01:000001FC 61002FEE        	   138: 	bsr op_SUBX
01:00000200 610030FA        	   139: 	bsr op_MULU
01:00000204 61003142        	   140: 	bsr op_MULS
01:00000208 6100318A        	   141: 	bsr op_EXG
01:0000020C 610031F4        	   142: 	bsr op_ROx
01:00000210 61003426        	   143: 	bsr op_ROXx
01:00000214 61003658        	   144: 	bsr op_SHIFTS
01:00000218 61003896        	   145: 	bsr op_SHIFTS2
                            	   146: 
01:0000021C 4E75            	   147: 	rts
                            	   148: 	bra ALL_DONE
                            	   149: 
                            	   150: * Loop here when all tests pass
                            	   151: *
                            	   152: 
01:0000021E 60FE            	   153: ALL_DONE: bra.s ALL_DONE
                            	   154: 
01:00000220 263C33333333    	   155: BSR_FAR1:       move.l #$33333333,d3
01:00000226 4E75            	   156:                 rts
                            	   157: 
                            	   158: ;	moveq		#-1,d0
                            	   159: ;	move.l	d0,$FD0FFF00
                            	   160: ;do_nothing:
                            	   161: ;	bra			*		
                            	   162: 
                            	   163: 
                            	   164: * Exception Vector = 6   CHK Instruction
                            	   165: *
                            	   166: 	align	4
                            	   167: EXCEPTION_6:
01:00000230 2C3CEEEE0006    	   168: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000236 4E73            	   169: 	rte
                            	   170: 
                            	   171: * Exception Vector = 7   TRAPV Instruction
                            	   172: *
                            	   173: 	align	4
                            	   174: EXCEPTION_7:
01:00000240 203C12345678    	   175: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000246 4E73            	   176: 	rte
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_CCR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: op_ORI_TO_CCR:
                            	   184: 
01:00000248 003C00FF        	   185:     ori.b #$FF,CCR
01:0000024C 6AFE            	   186:     bpl.s *                   ; branch if Z clear
01:0000024E 66FE            	   187:     bne.s *                   ; branch if N clear
01:00000250 68FE            	   188:     bvc.s *                   ; branch if V clear
01:00000252 64FE            	   189:     bcc.s *                   ; branch if C clear
                            	   190: 
01:00000254 44FC0000        	   191:     move #$00,CCR
01:00000258 003C0000        	   192:     ori.b #$00,CCR
01:0000025C 67FE            	   193:     beq.s *                   ; branch if Z set
01:0000025E 6BFE            	   194:     bmi.s *                   ; branch if N set
01:00000260 69FE            	   195:     bvs.s *                   ; branch if V set
01:00000262 65FE            	   196:     bcs.s *                   ; branch if C set
                            	   197: 
01:00000264 47FCFF002700    	   198:     move.l #$FF002700,SR          ; Put flags back to initial value
                            	   199: 
01:0000026A 4E75            	   200:     rts
                            	   201: 
                            	   202: ;-----------------------------------------------------------
                            	   203: ;-----------------------------------------------------------
                            	   204: ; OPCODE : ORI_TO_SR
                            	   205: ;-----------------------------------------------------------
                            	   206: ;-----------------------------------------------------------
                            	   207: 
                            	   208: op_ORI_TO_SR:
                            	   209: 
01:0000026C 00BCFF002FFF    	   210:     ori.l #$FF002FFF,SR
01:00000272 6AFE            	   211:     bpl.s *                   * branch if Z clear
01:00000274 66FE            	   212:     bne.s *                   * branch if N clear
01:00000276 68FE            	   213:     bvc.s *                   * branch if V clear
01:00000278 64FE            	   214:     bcc.s *                   * branch if C clear
                            	   215: 
01:0000027A 47FCFF002000    	   216:     move.l #$FF002000,SR
01:00000280 00BC00000000    	   217:     ori.l #$0000,SR
01:00000286 67FE            	   218:     beq.s *                   * branch if Z set
01:00000288 6BFE            	   219:     bmi.s *                   * branch if N set
01:0000028A 69FE            	   220:     bvs.s *                   * branch if V set
01:0000028C 65FE            	   221:     bcs.s *                   * branch if C set
                            	   222: 
01:0000028E 47FCFF002700    	   223:     move.l #$FF002700,SR         * Put flags back to initial value
                            	   224: 
01:00000294 4E75            	   225:     rts
                            	   226: ; 
                            	   227: ;-----------------------------------------------------------
                            	   228: ;-----------------------------------------------------------
                            	   229: ; OPCODE : EORI_TO_CCR
                            	   230: ;-----------------------------------------------------------
                            	   231: ;-----------------------------------------------------------
                            	   232: op_EORI_TO_CCR:
                            	   233: 
01:00000296 44FC0000        	   234:     move #$00,CCR
01:0000029A 0A3C00FF        	   235:     eori.b #$FF,CCR
01:0000029E 6AFE            	   236:     bpl.s *                   ; branch if Z clear
01:000002A0 66FE            	   237:     bne.s *                   ; branch if N clear
01:000002A2 68FE            	   238:     bvc.s *                   ; branch if V clear
01:000002A4 64FE            	   239:     bcc.s *                   ; branch if C clear
                            	   240: 
01:000002A6 44FC0000        	   241:     move #$00,CCR
01:000002AA 0A3C0000        	   242:     eori.b #$00,CCR
01:000002AE 67FE            	   243:     beq.s *                   ; branch if Z set
01:000002B0 6BFE            	   244:     bmi.s *                   ; branch if N set
01:000002B2 69FE            	   245:     bvs.s *                   ; branch if V set
01:000002B4 65FE            	   246:     bcs.s *                   ; branch if C set
                            	   247: 
01:000002B6 47FCFF002700    	   248:     move.l #$FF002700,SR           ; Put flags back to initial value
                            	   249: 
01:000002BC 4E75            	   250:     rts
                            	   251: 
                            	   252: 
                            	   253: 
                            	   254: *-----------------------------------------------------------
                            	   255: *-----------------------------------------------------------
                            	   256: * OPCODE : EORI_TO_SR
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: op_EORI_TO_SR:
                            	   260: 
01:000002BE 47FCFF002000    	   261:     move.l #$FF002000,SR
01:000002C4 0ABC00000FFF    	   262:     eori.l #$0FFF,SR
01:000002CA 6AFE            	   263:     bpl.s *                   * branch if Z clear
01:000002CC 66FE            	   264:     bne.s *                   * branch if N clear
01:000002CE 68FE            	   265:     bvc.s *                   * branch if V clear
01:000002D0 64FE            	   266:     bcc.s *                   * branch if C clear
                            	   267: 
01:000002D2 47FCFF002000    	   268:     move.l #$FF002000,SR
01:000002D8 0ABC00000000    	   269:     eori.l #$0000,SR
01:000002DE 67FE            	   270:     beq.s *                   * branch if Z set
01:000002E0 6BFE            	   271:     bmi.s *                   * branch if N set
01:000002E2 69FE            	   272:     bvs.s *                   * branch if V set
01:000002E4 65FE            	   273:     bcs.s *                   * branch if C set
                            	   274: 
01:000002E6 47FCFF002700    	   275:     move.l #$FF002700,SR          * Put flags back to initial value
                            	   276: 
01:000002EC 4E75            	   277:     rts
                            	   278: 
                            	   279: 
                            	   280: 
                            	   281: *-----------------------------------------------------------
                            	   282: *-----------------------------------------------------------
                            	   283: * OPCODE : ANDI_TO_CCR
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: op_ANDI_TO_CCR:
                            	   287: 
01:000002EE 44FC00FF        	   288:     move #$FF,CCR
01:000002F2 023C00FF        	   289:     andi.b #$FF,CCR
01:000002F6 6AFE            	   290:     bpl.s *                   * branch if Z clear
01:000002F8 66FE            	   291:     bne.s *                   * branch if N clear
01:000002FA 68FE            	   292:     bvc.s *                   * branch if V clear
01:000002FC 64FE            	   293:     bcc.s *                   * branch if C clear
                            	   294: 
01:000002FE 44FC00FF        	   295:     move #$FF,CCR
01:00000302 023C0000        	   296:     andi.b #$00,CCR
01:00000306 67FE            	   297:     beq.s *                   * branch if Z set
01:00000308 6BFE            	   298:     bmi.s *                   * branch if N set
01:0000030A 69FE            	   299:     bvs.s *                   * branch if V set
01:0000030C 65FE            	   300:     bcs.s *                   * branch if C set
                            	   301: 
01:0000030E 46FC2700        	   302:     move #$2700,SR           * Put flags back to initial value
                            	   303: 
01:00000312 4E75            	   304:     rts
                            	   305: 
                            	   306: 
                            	   307: 
                            	   308: *-----------------------------------------------------------
                            	   309: *-----------------------------------------------------------
                            	   310: * OPCODE : ANDI_TO_SR
                            	   311: *-----------------------------------------------------------
                            	   312: *-----------------------------------------------------------
                            	   313: op_ANDI_TO_SR:
01:00000314 47FCFF0020FF    	   314:     move.l #$FF0020FF,SR
01:0000031A 02BCFFFFFFFF    	   315:     andi.l #$FFFFFFFF,SR
01:00000320 6AFE            	   316:     bpl.s *                   * branch if Z clear
01:00000322 66FE            	   317:     bne.s *                   * branch if N clear
01:00000324 68FE            	   318:     bvc.s *                   * branch if V clear
01:00000326 64FE            	   319:     bcc.s *                   * branch if C clear
                            	   320: 
01:00000328 47FCFF0020FF    	   321:     move.l #$FF0020FF,SR
01:0000032E 02BCFFFFFF00    	   322:     andi.l #$FFFFFF00,SR
01:00000334 67FE            	   323:     beq.s *                   * branch if Z set
01:00000336 6BFE            	   324:     bmi.s *                   * branch if N set
01:00000338 69FE            	   325:     bvs.s *                   * branch if V set
01:0000033A 65FE            	   326:     bcs.s *                   * branch if C set
                            	   327: 
01:0000033C 47FCFF002700    	   328:     move.l #$FF002700,SR           * Put flags back to initial value
                            	   329: 
01:00000342 4E75            	   330:     rts
                            	   331: 
                            	   332: 
                            	   333: *-----------------------------------------------------------
                            	   334: *-----------------------------------------------------------
                            	   335: * OPCODE : BTST
                            	   336: *-----------------------------------------------------------
                            	   337: *-----------------------------------------------------------
                            	   338: op_BTST:
                            	   339: 
                            	   340: *  Bit Number.s Static
                            	   341: 
                            	   342: *             EA = Dn  - LONG only
01:00000344 203C80000001    	   343:             move.l #$80000001,d0      * populate test data
01:0000034A 08000000        	   344:             btst.l #0,d0
01:0000034E 67FE            	   345:             beq.s *               * branch if Z set
01:00000350 08000001        	   346:             btst.l #1,d0              *
01:00000354 66FE            	   347:             bne.s *               * branch if Z clear
01:00000356 0800001F        	   348:             btst.l #31,d0             *
01:0000035A 67FE            	   349:             beq.s *               * branch if Z set
                            	   350: 
                            	   351: 
                            	   352: *             EA = (An)  - BYTE only
01:0000035C 307C0100        	   353:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000360 10BC0081        	   354:             move.b #$81,(a0)          * populate test data
01:00000364 1210            	   355:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000366 08100000        	   356:             btst.b #0,(a0)
01:0000036A 67FE            	   357:             beq.s *               * branch if Z set
01:0000036C 08100001        	   358:             btst.b #1,(a0)            *
01:00000370 66FE            	   359:             bne.s *               * branch if Z clear
01:00000372 08100007        	   360:             btst.b #7,(a0)            *
01:00000376 67FE            	   361:             beq.s *               * branch if Z set
                            	   362: 
                            	   363: 
                            	   364: *             EA = (An)+  - BYTE only
01:00000378 307C0100        	   365:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000037C 10FC0001        	   366:             move.b #$01,(a0)+         * populate test data
01:00000380 10FC00FC        	   367:             move.b #$FC,(a0)+         * populate test data
01:00000384 10FC0080        	   368:             move.b #$80,(a0)+         * populate test data
01:00000388 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000038C 08180000        	   370:             btst.b #0,(a0)+
01:00000390 67FE            	   371:             beq.s *               * branch if Z set
01:00000392 08180001        	   372:             btst.b #1,(a0)+           *
01:00000396 66FE            	   373:             bne.s *               * branch if Z clear
01:00000398 08180007        	   374:             btst.b #7,(a0)+           *
01:0000039C 67FE            	   375:             beq.s *               * branch if Z set
                            	   376: 
                            	   377: 
                            	   378: *             EA = -(An)  - BYTE only
01:0000039E 307C0100        	   379:             move.l #$00000100,a0      * point to memory to address
01:000003A2 10FC0080        	   380:             move.b #$80,(a0)+         * populate test data
01:000003A6 10FC00FC        	   381:             move.b #$FC,(a0)+         * populate test data
01:000003AA 10FC0001        	   382:             move.b #$01,(a0)+         * populate test data
01:000003AE 307C0103        	   383:             move.l #$00000103,a0      * point to memory to address
01:000003B2 08200000        	   384:             btst.b #0,-(a0)
01:000003B6 67FE            	   385:             beq.s *               * branch if Z set
01:000003B8 08200001        	   386:             btst.b #1,-(a0)           *
01:000003BC 66FE            	   387:             bne.s *               * branch if Z clear
01:000003BE 08200007        	   388:             btst.b #7,-(a0)           *
01:000003C2 67FE            	   389:             beq.s *               * branch if Z set
                            	   390: 
                            	   391: 
                            	   392: *             EA = n(An)  - BYTE only
01:000003C4 307C0100        	   393:             move.l #$00000100,a0      * point to memory to address
01:000003C8 10FC0001        	   394:             move.b #$01,(a0)+         * populate test data
01:000003CC 10FC00FC        	   395:             move.b #$FC,(a0)+         * populate test data
01:000003D0 10FC0080        	   396:             move.b #$80,(a0)+         * populate test data
01:000003D4 307C0100        	   397:             move.l #$00000100,a0      * point to memory to address
01:000003D8 08100000        	   398:             btst.b #0,0(a0)
01:000003DC 67FE            	   399:             beq.s *               * branch if Z set
01:000003DE 082800010001    	   400:             btst.b #1,1(a0)           *
01:000003E4 66FE            	   401:             bne.s *               * branch if Z clear
01:000003E6 082800070002    	   402:             btst.b #7,2(a0)           *
01:000003EC 67FE            	   403:             beq.s *               * branch if Z set
                            	   404: 
                            	   405: 
                            	   406: *             EA = n(An,R.W)  - BYTE only
01:000003EE 307C0100        	   407:             move.l #$00000100,a0      * point to memory to address
01:000003F2 93C9            	   408:             move.l #$00000000,a1      * point to memory to address
01:000003F4 347C0001        	   409:             move.l #$00000001,a2      * point to memory to address
01:000003F8 7000            	   410:             moveq  #$00000000,d0      * point to memory to address
01:000003FA 7201            	   411:             moveq  #$00000001,d1      * point to memory to address
01:000003FC 083000000000    	   412:             btst.b #0,0(a0,d0.w)
01:00000402 67FE            	   413:             beq.s *               * branch if Z set
01:00000404 083000011000    	   414:             btst.b #1,0(a0,d1.w)      *
01:0000040A 66FE            	   415:             bne.s *               * branch if Z clear
01:0000040C 083000071001    	   416:             btst.b #7,1(a0,d1.w)      *
01:00000412 67FE            	   417:             beq.s *               * branch if Z set
                            	   418: *             EA = n(An,R.L)  - BYTE only
01:00000414 083000000800    	   419:             btst.b #0,0(a0,d0.l)
01:0000041A 67FE            	   420:             beq.s *               * branch if Z set
01:0000041C 083000011800    	   421:             btst.b #1,0(a0,d1.l)      *
01:00000422 66FE            	   422:             bne.s *               * branch if Z clear
01:00000424 083000071801    	   423:             btst.b #7,1(a0,d1.l)      *
01:0000042A 67FE            	   424:             beq.s *               * branch if Z set
                            	   425: *             EA = n(An,A.W)  - BYTE only
01:0000042C 083000009000    	   426:             btst.b #0,0(a0,a1.w)
01:00000432 67FE            	   427:             beq.s *               * branch if Z set
01:00000434 08300001A000    	   428:             btst.b #1,0(a0,a2.w)      *
01:0000043A 66FE            	   429:             bne.s *               * branch if Z clear
01:0000043C 08300007A001    	   430:             btst.b #7,1(a0,a2.w)      *
01:00000442 67FE            	   431:             beq.s *               * branch if Z set
                            	   432: *             EA = n(An,A.L)  - BYTE only
01:00000444 083000009800    	   433:             btst.b #0,0(a0,a1.l)
01:0000044A 67FE            	   434:             beq.s *               * branch if Z set
01:0000044C 08300001A800    	   435:             btst.b #1,0(a0,a2.l)      *
01:00000452 66FE            	   436:             bne.s *               * branch if Z clear
01:00000454 08300007A801    	   437:             btst.b #7,1(a0,a2.l)      *
01:0000045A 67FE            	   438:             beq.s *               * branch if Z set
                            	   439: 
                            	   440: 
                            	   441: *             EA = x.W  - BYTE only
01:0000045C 083800000100    	   442:             btst.b #0,$0100
01:00000462 67FE            	   443:             beq.s *               * branch if Z set
01:00000464 083800010101    	   444:             btst.b #1,$0101           *
01:0000046A 66FE            	   445:             bne.s *               * branch if Z clear
01:0000046C 083800070102    	   446:             btst.b #7,$0102           *
01:00000472 67FE            	   447:             beq.s *               * branch if Z set
                            	   448: 
                            	   449: 
                            	   450: *             EA = x.L  - BYTE only
01:00000474 207C0000F100    	   451:             move.l #$F100,a0      * point to memory to address 0x100
01:0000047A 10FC0001        	   452:             move.b #$01,(a0)+         * populate test data
01:0000047E 10FC00FC        	   453:             move.b #$FC,(a0)+         * populate test data
01:00000482 10FC0080        	   454:             move.b #$80,(a0)+         * populate test data
01:00000486 083900000000F100	   455:             btst.b #0,$F100
01:0000048E 67FE            	   456:             beq.s *               * branch if Z set
01:00000490 083900010000F101	   457:             btst.b #1,$F101       *
01:00000498 66FE            	   458:             bne.s *               * branch if Z clear
01:0000049A 083900070000F102	   459:             btst.b #7,$F102       *
01:000004A2 67FE            	   460:             beq.s *               * branch if Z set
                            	   461: 
                            	   462: 
                            	   463: *             EA = x(PC)  - BYTE only
01:000004A4 4BFAFE9E        	   464:             lea op_BTST(pc),a5
01:000004A8 083A0000FE98    	   465:             btst.b #0,op_BTST(pc)
01:000004AE 66FE            	   466:             bne.s *               * branch if Z clear
01:000004B0 083A0003001A    	   467:             btst.b #3,op_BTST0(pc)     *
01:000004B6 67FE            	   468:             beq.s *               * branch if Z set
01:000004B8 083A00060074    	   469:             btst.b #6,op_BTST12(pc)    *
01:000004BE 67FE            	   470:             beq.s *               * branch if Z set
                            	   471: 
                            	   472: 
                            	   473: *             EA = n(PC,R.W)  - BYTE only
01:000004C0 307C0100        	   474:             move.l #$00000100,a0      * point to memory to address
01:000004C4 93C9            	   475:             move.l #$00000000,a1      * point to memory to address
01:000004C6 347C0001        	   476:             move.l #$00000001,a2      * point to memory to address
01:000004CA 7000            	   477:             moveq  #$00000000,d0      * point to memory to address
01:000004CC 7201            	   478:             moveq  #$00000001,d1      * point to memory to address
                            	   479: 
01:000004CE 083B000000FC    	   480: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:000004D4 66FE            	   481:             bne.s *               * branch if Z clear
                            	   482: 
01:000004D6 4BFB1002        	   483:             lea op_BTST1(pc,d1.w),a5
01:000004DA 083B000110FC    	   484: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:000004E0 67FE            	   485:             beq.s *               * branch if Z set
01:000004E2 083B000710FC    	   486: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:000004E8 66FE            	   487:             bne.s *               * branch if Z clear
                            	   488: *             EA = n(PC,R.L)  - BYTE only
01:000004EA 083B000008FC    	   489: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:000004F0 66FE            	   490:             bne.s *               * branch if Z clear
01:000004F2 083B000118FC    	   491: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:000004F8 67FE            	   492:             beq.s *               * branch if Z set
01:000004FA 083B000718FC    	   493: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:00000500 66FE            	   494:             bne.s *               * branch if Z clear
                            	   495: *             EA = n(PC,A.W)  - BYTE only
01:00000502 083B000090FC    	   496: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:00000508 66FE            	   497:             bne.s *               * branch if Z clear
01:0000050A 083B0001A0FC    	   498: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:00000510 67FE            	   499:             beq.s *               * branch if Z set
01:00000512 083B0007A0FC    	   500: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:00000518 66FE            	   501:             bne.s *               * branch if Z clear
                            	   502: *             EA = n(PC,A.L)  - BYTE only
01:0000051A 083B000098FC    	   503: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:00000520 66FE            	   504:             bne.s *               * branch if Z clear
01:00000522 083B0001A8FC    	   505: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:00000528 67FE            	   506:             beq.s *               * branch if Z set
01:0000052A 083B0007A8FC    	   507: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:00000530 66FE            	   508: op_BTST12:  bne.s *               * branch if Z clear
                            	   509: 
                            	   510: 
                            	   511: 
                            	   512: * Bit Number.s Dynamic
                            	   513: 
                            	   514: *             EA = Dn  - LONG only
01:00000532 203C80000001    	   515:             move.l #$80000001,d0      * populate test data
01:00000538 7A00            	   516:             move.l #0,d5              * populate bit.s number to test
01:0000053A 7C01            	   517:             move.l #1,d6              * populate bit.s number to test
01:0000053C 7E1F            	   518:             move.l #31,d7              * populate bit.s number to test
                            	   519: 
01:0000053E 0B00            	   520:             btst.l d5,d0
01:00000540 67FE            	   521:             beq.s *               * branch if Z set
01:00000542 0D00            	   522:             btst.l d6,d0              *
01:00000544 66FE            	   523:             bne.s *               * branch if Z clear
01:00000546 0F00            	   524:             btst.l d7,d0             *
01:00000548 67FE            	   525:             beq.s *               * branch if Z set
                            	   526: 
                            	   527: 
                            	   528: *             EA = (An)  - BYTE only
01:0000054A 7A00            	   529:             move.l #0,d5              * populate bit.s number to test
01:0000054C 7C01            	   530:             move.l #1,d6              * populate bit.s number to test
01:0000054E 7E07            	   531:             move.l #7,d7              * populate bit.s number to test
01:00000550 307C0100        	   532:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000554 10BC0081        	   533:             move.b #$81,(a0)          * populate test data
01:00000558 1210            	   534:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000055A 0B10            	   535:             btst.b d5,(a0)
01:0000055C 67FE            	   536:             beq.s *               * branch if Z set
01:0000055E 0D10            	   537:             btst.b d6,(a0)            *
01:00000560 66FE            	   538:             bne.s *               * branch if Z clear
01:00000562 0F10            	   539:             btst.b d7,(a0)            *
01:00000564 67FE            	   540:             beq.s *               * branch if Z set
                            	   541: 
                            	   542: * ---
                            	   543: 
                            	   544: 
                            	   545: *             EA = (An)+  - BYTE only
01:00000566 307C0100        	   546:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000056A 10FC0001        	   547:             move.b #$01,(a0)+         * populate test data
01:0000056E 10FC00FC        	   548:             move.b #$FC,(a0)+         * populate test data
01:00000572 10FC0080        	   549:             move.b #$80,(a0)+         * populate test data
01:00000576 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000057A 0B18            	   551:             btst.b d5,(a0)+
01:0000057C 67FE            	   552:             beq.s *               * branch if Z set
01:0000057E 0D18            	   553:             btst.b d6,(a0)+           *
01:00000580 66FE            	   554:             bne.s *               * branch if Z clear
01:00000582 0F18            	   555:             btst.b d7,(a0)+           *
01:00000584 67FE            	   556:             beq.s *               * branch if Z set
                            	   557: 
                            	   558: 
                            	   559: *             EA = -(An)  - BYTE only
01:00000586 307C0100        	   560:             move.l #$00000100,a0      * point to memory to address
01:0000058A 10FC0080        	   561:             move.b #$80,(a0)+         * populate test data
01:0000058E 10FC00FC        	   562:             move.b #$FC,(a0)+         * populate test data
01:00000592 10FC0001        	   563:             move.b #$01,(a0)+         * populate test data
01:00000596 307C0103        	   564:             move.l #$00000103,a0      * point to memory to address
01:0000059A 0B20            	   565:             btst.b d5,-(a0)
01:0000059C 67FE            	   566:             beq.s *               * branch if Z set
01:0000059E 0D20            	   567:             btst.b d6,-(a0)           *
01:000005A0 66FE            	   568:             bne.s *               * branch if Z clear
01:000005A2 0F20            	   569:             btst.b d7,-(a0)           *
01:000005A4 67FE            	   570:             beq.s *               * branch if Z set
                            	   571: 
                            	   572: 
                            	   573: *             EA = n(An)  - BYTE only
01:000005A6 307C0100        	   574:             move.l #$00000100,a0      * point to memory to address
01:000005AA 10FC0001        	   575:             move.b #$01,(a0)+         * populate test data
01:000005AE 10FC00FC        	   576:             move.b #$FC,(a0)+         * populate test data
01:000005B2 10FC0080        	   577:             move.b #$80,(a0)+         * populate test data
01:000005B6 307C0100        	   578:             move.l #$00000100,a0      * point to memory to address
01:000005BA 0B10            	   579:             btst.b d5,0(a0)
01:000005BC 67FE            	   580:             beq.s *               * branch if Z set
01:000005BE 0D280001        	   581:             btst.b d6,1(a0)           *
01:000005C2 66FE            	   582:             bne.s *               * branch if Z clear
01:000005C4 0F280002        	   583:             btst.b d7,2(a0)           *
01:000005C8 67FE            	   584:             beq.s *               * branch if Z set
                            	   585: 
                            	   586: 
                            	   587: *             EA = n(An,R.W)  - BYTE only
01:000005CA 307C0100        	   588:             move.l #$00000100,a0      * point to memory to address
01:000005CE 93C9            	   589:             move.l #$00000000,a1      * point to memory to address
01:000005D0 347C0001        	   590:             move.l #$00000001,a2      * point to memory to address
01:000005D4 7000            	   591:             moveq  #$00000000,d0      * point to memory to address
01:000005D6 7201            	   592:             moveq  #$00000001,d1      * point to memory to address
01:000005D8 0B300000        	   593:             btst.b d5,0(a0,d0.w)
01:000005DC 67FE            	   594:             beq.s *               * branch if Z set
01:000005DE 0D301000        	   595:             btst.b d6,0(a0,d1.w)      *
01:000005E2 66FE            	   596:             bne.s *               * branch if Z clear
01:000005E4 0F301001        	   597:             btst.b d7,1(a0,d1.w)      *
01:000005E8 67FE            	   598:             beq.s *               * branch if Z set
                            	   599: *             EA = n(An,R.L)  - BYTE only
01:000005EA 0B300800        	   600:             btst.b d5,0(a0,d0.l)
01:000005EE 67FE            	   601:             beq.s *               * branch if Z set
01:000005F0 0D301800        	   602:             btst.b d6,0(a0,d1.l)      *
01:000005F4 66FE            	   603:             bne.s *               * branch if Z clear
01:000005F6 0F301801        	   604:             btst.b d7,1(a0,d1.l)      *
01:000005FA 67FE            	   605:             beq.s *               * branch if Z set
                            	   606: *             EA = n(An,A.W)  - BYTE only
01:000005FC 0B309000        	   607:             btst.b d5,0(a0,a1.w)
01:00000600 67FE            	   608:             beq.s *               * branch if Z set
01:00000602 0D30A000        	   609:             btst.b d6,0(a0,a2.w)      *
01:00000606 66FE            	   610:             bne.s *               * branch if Z clear
01:00000608 0F30A001        	   611:             btst.b d7,1(a0,a2.w)      *
01:0000060C 67FE            	   612:             beq.s *               * branch if Z set
                            	   613: *             EA = n(An,A.L)  - BYTE only
01:0000060E 0B309800        	   614:             btst.b d5,0(a0,a1.l)
01:00000612 67FE            	   615:             beq.s *               * branch if Z set
01:00000614 0D30A800        	   616:             btst.b d6,0(a0,a2.l)      *
01:00000618 66FE            	   617:             bne.s *               * branch if Z clear
01:0000061A 0F30A801        	   618:             btst.b d7,1(a0,a2.l)      *
01:0000061E 67FE            	   619:             beq.s *               * branch if Z set
                            	   620: 
                            	   621: 
                            	   622: *             EA = x.W  - BYTE only
01:00000620 0B380100        	   623:             btst.b d5,$0100
01:00000624 67FE            	   624:             beq.s *               * branch if Z set
01:00000626 0D380101        	   625:             btst.b d6,$0101           *
01:0000062A 66FE            	   626:             bne.s *               * branch if Z clear
01:0000062C 0F380102        	   627:             btst.b d7,$0102           *
01:00000630 67FE            	   628:             beq.s *               * branch if Z set
                            	   629: 
                            	   630: 
                            	   631: *             EA = x.L  - BYTE only
01:00000632 207C0000F100    	   632:             move.l #$F100,a0      * point to memory to address 0x100
01:00000638 10FC0001        	   633:             move.b #$01,(a0)+         * populate test data
01:0000063C 10FC00FC        	   634:             move.b #$FC,(a0)+         * populate test data
01:00000640 10FC0080        	   635:             move.b #$80,(a0)+         * populate test data
01:00000644 0B390000F100    	   636:             btst.b d5,$F100
01:0000064A 67FE            	   637:             beq.s *               * branch if Z set
01:0000064C 0D390000F101    	   638:             btst.b d6,$F101       *
01:00000652 66FE            	   639:             bne.s *               * branch if Z clear
01:00000654 0F390000F102    	   640:             btst.b d7,$F102       *
01:0000065A 67FE            	   641:             beq.s *               * branch if Z set
                            	   642: 
                            	   643: 
                            	   644: *             EA = x(PC)  - BYTE only
01:0000065C 7C03            	   645:             move.l #3,d6              * populate bit.s number to test
01:0000065E 7E06            	   646:             move.l #6,d7              * populate bit.s number to test
01:00000660 4BFAFCE2        	   647:             lea op_BTST(pc),a5
01:00000664 0B3AFCDE        	   648:             btst.b d5,op_BTST(pc)
01:00000668 66FE            	   649:             bne.s *               * branch if Z clear
01:0000066A 0D3AFE62        	   650:             btst.b d6,op_BTST0(pc)     *
01:0000066E 67FE            	   651:             beq.s *               * branch if Z set
01:00000670 0F3AFEBE        	   652:             btst.b d7,op_BTST12(pc)    *
01:00000674 67FE            	   653:             beq.s *               * branch if Z set
                            	   654: 
                            	   655: 
                            	   656: *             EA = n(PC,R.W)  - BYTE only
01:00000676 307C0100        	   657:             move.l #$00000100,a0      * point to memory to address
01:0000067A 93C9            	   658:             move.l #$00000000,a1      * point to memory to address
01:0000067C 347C0001        	   659:             move.l #$00000001,a2      * point to memory to address
01:00000680 7000            	   660:             moveq  #$00000000,d0      * point to memory to address
01:00000682 7201            	   661:             moveq  #$00000001,d1      * point to memory to address
01:00000684 7C01            	   662:             move.l #1,d6              * populate bit.s number to test
01:00000686 7E07            	   663:             move.l #7,d7              * populate bit.s number to test
                            	   664: 
01:00000688 0B3B00FE        	   665: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:0000068C 67FE            	   666:             beq.s *               * branch if Z set
01:0000068E 4BFB1002        	   667:             lea op_BTST21(pc,d1.w),a5
01:00000692 0D3B10FE        	   668: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:00000696 67FE            	   669:             beq.s *               * branch if Z set
01:00000698 0F3B10FE        	   670: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:0000069C 66FE            	   671:             bne.s *               * branch if Z clear
                            	   672: *             EA = n(PC,R.L)  - BYTE only
01:0000069E 0B3B08FE        	   673: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:000006A2 67FE            	   674:             beq.s *               * branch if Z set
01:000006A4 0D3B18FE        	   675: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:000006A8 67FE            	   676:             beq.s *               * branch if Z set
01:000006AA 0F3B18FE        	   677: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:000006AE 66FE            	   678:             bne.s *               * branch if Z clear
                            	   679: *             EA = n(PC,A.W)  - BYTE only
01:000006B0 0B3B90FE        	   680: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:000006B4 67FE            	   681:             beq.s *               * branch if Z set
01:000006B6 0D3BA0FE        	   682: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:000006BA 67FE            	   683:             beq.s *               * branch if Z set
01:000006BC 0F3BA0FE        	   684: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:000006C0 66FE            	   685:             bne.s *               * branch if Z clear
                            	   686: *             EA = n(PC,A.L)  - BYTE only
01:000006C2 0B3B98FE        	   687: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:000006C6 67FE            	   688:             beq.s *               * branch if Z set
01:000006C8 0D3BA8FE        	   689: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:000006CC 67FE            	   690:             beq.s *               * branch if Z set
01:000006CE 0F3BA8FE        	   691: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000006D2 66FE            	   692: op_BTST32:  bne.s *               * branch if Z clear
                            	   693: 
                            	   694: *             EA = #x  - BYTE only
                            	   695: 
01:000006D4 7A00            	   696:             move.l #0,d5              * populate bit.s number to test
01:000006D6 7C03            	   697:             move.l #3,d6              * populate bit.s number to test
01:000006D8 7E07            	   698:             move.l #7,d7              * populate bit.s number to test
                            	   699: 
01:000006DA 0B3C0088        	   700:             btst.b d5,#$88
01:000006DE 66FE            	   701:             bne.s *               * branch if Z clear
01:000006E0 0D3C0088        	   702:             btst.b d6,#$88
01:000006E4 67FE            	   703:             beq.s *               * branch if Z set
01:000006E6 0F3C0088        	   704:             btst.b d7,#$88
01:000006EA 67FE            	   705:             beq.s *               * branch if Z set
                            	   706: 
                            	   707: 
01:000006EC 4E75            	   708:     rts
                            	   709: 
                            	   710: *-----------------------------------------------------------
                            	   711: *-----------------------------------------------------------
                            	   712: * OPCODE : BCHG
                            	   713: *-----------------------------------------------------------
                            	   714: *-----------------------------------------------------------
                            	   715: op_BCHG:
                            	   716: 
                            	   717: 
                            	   718: *  Bit Number.s Static
                            	   719: 
                            	   720: *             EA = Dn  - LONG only
01:000006EE 203C80000001    	   721:             move.l #$80000001,d0      * populate test data
01:000006F4 08400000        	   722:             bchg.l #0,d0
01:000006F8 67FE            	   723:             beq.s *               * branch if Z set
01:000006FA 08400001        	   724:             bchg.l #1,d0              *
01:000006FE 66FE            	   725:             bne.s *               * branch if Z clear
01:00000700 0840001F        	   726:             bchg.l #31,d0             *
01:00000704 67FE            	   727:             beq.s *               * branch if Z set
01:00000706 0C8000000002    	   728:             cmpi.l #$00000002,d0
01:0000070C 66FE            	   729:             bne.s *               * branch if Z clear
                            	   730: 
                            	   731: 
                            	   732: *             EA = (An)  - BYTE only
01:0000070E 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000712 10BC0081        	   734:             move.b #$81,(a0)          * populate test data
01:00000716 1210            	   735:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000718 08500000        	   736:             bchg.b #0,(a0)
01:0000071C 67FE            	   737:             beq.s *               * branch if Z set
01:0000071E 08500001        	   738:             bchg.b #1,(a0)            *
01:00000722 66FE            	   739:             bne.s *               * branch if Z clear
01:00000724 08500007        	   740:             bchg.b #7,(a0)            *
01:00000728 67FE            	   741:             beq.s *               * branch if Z set
01:0000072A 0C100002        	   742:             cmpi.b #$02,(a0)
01:0000072E 66FE            	   743:             bne.s *               * branch if Z clear
                            	   744: 
                            	   745: *             EA = (An)+  - BYTE only
01:00000730 307C0100        	   746:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000734 10FC0001        	   747:             move.b #$01,(a0)+         * populate test data
01:00000738 10FC00FC        	   748:             move.b #$FC,(a0)+         * populate test data
01:0000073C 10FC0080        	   749:             move.b #$80,(a0)+         * populate test data
01:00000740 307C0100        	   750:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000744 08580000        	   751:             bchg.b #0,(a0)+
01:00000748 67FE            	   752:             beq.s *               * branch if Z set
01:0000074A 08580001        	   753:             bchg.b #1,(a0)+           *
01:0000074E 66FE            	   754:             bne.s *               * branch if Z clear
01:00000750 08580007        	   755:             bchg.b #7,(a0)+           *
01:00000754 67FE            	   756:             beq.s *               * branch if Z set
01:00000756 307C0100        	   757:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000075A 4A18            	   758:             cmpi.b #$00,(a0)+
01:0000075C 66FE            	   759:             bne.s *               * branch if Z clear
01:0000075E 0C1800FE        	   760:             cmpi.b #$FE,(a0)+
01:00000762 66FE            	   761:             bne.s *               * branch if Z clear
01:00000764 4A18            	   762:             cmpi.b #$00,(a0)+
01:00000766 66FE            	   763:             bne.s *               * branch if Z clear
                            	   764: 
                            	   765: *             EA = -(An)  - BYTE only
01:00000768 307C0100        	   766:             move.l #$00000100,a0      * point to memory to address
01:0000076C 10FC0080        	   767:             move.b #$80,(a0)+         * populate test data
01:00000770 10FC00FC        	   768:             move.b #$FC,(a0)+         * populate test data
01:00000774 10FC0001        	   769:             move.b #$01,(a0)+         * populate test data
01:00000778 307C0103        	   770:             move.l #$00000103,a0      * point to memory to address
01:0000077C 08600000        	   771:             bchg.b #0,-(a0)
01:00000780 67FE            	   772:             beq.s *               * branch if Z set
01:00000782 08600001        	   773:             bchg.b #1,-(a0)           *
01:00000786 66FE            	   774:             bne.s *               * branch if Z clear
01:00000788 08600007        	   775:             bchg.b #7,-(a0)           *
01:0000078C 67FE            	   776:             beq.s *               * branch if Z set
01:0000078E 307C0103        	   777:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000792 4A20            	   778:             cmpi.b #$00,-(a0)
01:00000794 66FE            	   779:             bne.s *               * branch if Z clear
01:00000796 0C2000FE        	   780:             cmpi.b #$FE,-(a0)
01:0000079A 66FE            	   781:             bne.s *               * branch if Z clear
01:0000079C 4A20            	   782:             cmpi.b #$00,-(a0)
01:0000079E 66FE            	   783:             bne.s *               * branch if Z clear
                            	   784: 
                            	   785: 
                            	   786: *             EA = n(An)  - BYTE only
01:000007A0 307C0100        	   787:             move.l #$00000100,a0      * point to memory to address
01:000007A4 10FC0001        	   788:             move.b #$01,(a0)+         * populate test data
01:000007A8 10FC00FC        	   789:             move.b #$FC,(a0)+         * populate test data
01:000007AC 10FC0080        	   790:             move.b #$80,(a0)+         * populate test data
01:000007B0 307C0100        	   791:             move.l #$00000100,a0      * point to memory to address
01:000007B4 08500000        	   792:             bchg.b #0,0(a0)
01:000007B8 67FE            	   793:             beq.s *               * branch if Z set
01:000007BA 086800010001    	   794:             bchg.b #1,1(a0)           *
01:000007C0 66FE            	   795:             bne.s *               * branch if Z clear
01:000007C2 086800070002    	   796:             bchg.b #7,2(a0)           *
01:000007C8 67FE            	   797:             beq.s *               * branch if Z set
01:000007CA 307C0100        	   798:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007CE 4A18            	   799:             cmpi.b #$00,(a0)+
01:000007D0 66FE            	   800:             bne.s *               * branch if Z clear
01:000007D2 0C1800FE        	   801:             cmpi.b #$FE,(a0)+
01:000007D6 66FE            	   802:             bne.s *               * branch if Z clear
01:000007D8 4A18            	   803:             cmpi.b #$00,(a0)+
01:000007DA 66FE            	   804:             bne.s *               * branch if Z clear
                            	   805: 
                            	   806: 
                            	   807: *             EA = n(An,D.W)  - BYTE only
01:000007DC 307C0100        	   808:             move.l #$00000100,a0      * point to memory to address
01:000007E0 93C9            	   809:             move.l #$00000000,a1      * point to memory to address
01:000007E2 347C0001        	   810:             move.l #$00000001,a2      * point to memory to address
01:000007E6 7000            	   811:             moveq  #$00000000,d0      * point to memory to address
01:000007E8 7201            	   812:             moveq  #$00000001,d1      * point to memory to address
01:000007EA 087000000000    	   813:             bchg.b #0,0(a0,d0.w)
01:000007F0 66FE            	   814:             bne.s *               * branch if Z clear
01:000007F2 087000011000    	   815:             bchg.b #1,0(a0,d1.w)      *
01:000007F8 67FE            	   816:             beq.s *               * branch if Z set
01:000007FA 087000071001    	   817:             bchg.b #7,1(a0,d1.w)      *
01:00000800 66FE            	   818:             bne.s *               * branch if Z clear
                            	   819: *             EA = n(An,D.L)  - BYTE only
01:00000802 087000000800    	   820:             bchg.b #0,0(a0,d0.l)
01:00000808 67FE            	   821:             beq.s *               * branch if Z set
01:0000080A 087000011800    	   822:             bchg.b #1,0(a0,d1.l)      *
01:00000810 66FE            	   823:             bne.s *               * branch if Z clear
01:00000812 087000071801    	   824:             bchg.b #7,1(a0,d1.l)      *
01:00000818 67FE            	   825:             beq.s *               * branch if Z set
                            	   826: *             EA = n(An,A.W)  - BYTE only
01:0000081A 087000009000    	   827:             bchg.b #0,0(a0,a1.w)
01:00000820 66FE            	   828:             bne.s *               * branch if Z clear
01:00000822 08700001A000    	   829:             bchg.b #1,0(a0,a2.w)      *
01:00000828 67FE            	   830:             beq.s *               * branch if Z set
01:0000082A 08700007A001    	   831:             bchg.b #7,1(a0,a2.w)      *
01:00000830 66FE            	   832:             bne.s *               * branch if Z clear
                            	   833: *             EA = n(An,A.L)  - BYTE only
01:00000832 087000009800    	   834:             bchg.b #0,0(a0,a1.l)
01:00000838 67FE            	   835:             beq.s *               * branch if Z set
01:0000083A 08700001A800    	   836:             bchg.b #1,0(a0,a2.l)      *
01:00000840 66FE            	   837:             bne.s *               * branch if Z clear
01:00000842 08700007A801    	   838:             bchg.b #7,1(a0,a2.l)      *
01:00000848 67FE            	   839:             beq.s *               * branch if Z set
01:0000084A 307C0100        	   840:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000084E 4A18            	   841:             cmpi.b #$00,(a0)+
01:00000850 66FE            	   842:             bne.s *               * branch if Z clear
01:00000852 0C1800FE        	   843:             cmpi.b #$FE,(a0)+
01:00000856 66FE            	   844:             bne.s *               * branch if Z clear
01:00000858 4A18            	   845:             cmpi.b #$00,(a0)+
01:0000085A 66FE            	   846:             bne.s *               * branch if Z clear
                            	   847: 
                            	   848: 
                            	   849: *             EA = x.W  - BYTE only
01:0000085C 087800000100    	   850:             bchg.b #0,$0100
01:00000862 66FE            	   851:             bne.s *               * branch if Z clear
01:00000864 087800010101    	   852:             bchg.b #1,$0101           *
01:0000086A 67FE            	   853:             beq.s *               * branch if Z set
01:0000086C 087800070102    	   854:             bchg.b #7,$0102           *
01:00000872 66FE            	   855:             bne.s *               * branch if Z clear
01:00000874 307C0100        	   856:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000878 0C180001        	   857:             cmpi.b #$01,(a0)+
01:0000087C 66FE            	   858:             bne.s *               * branch if Z clear
01:0000087E 0C1800FC        	   859:             cmpi.b #$FC,(a0)+
01:00000882 66FE            	   860:             bne.s *               * branch if Z clear
01:00000884 0C180080        	   861:             cmpi.b #$80,(a0)+
01:00000888 66FE            	   862:             bne.s *               * branch if Z clear
                            	   863: 
                            	   864: *             EA = x.L  - BYTE only
01:0000088A 207C0000F100    	   865:             move.l #$F100,a0      * point to memory to address 0x100
01:00000890 10FC0001        	   866:             move.b #$01,(a0)+         * populate test data
01:00000894 10FC00FC        	   867:             move.b #$FC,(a0)+         * populate test data
01:00000898 10FC0080        	   868:             move.b #$80,(a0)+         * populate test data
01:0000089C 087900000000F100	   869:             bchg.b #0,$F100
01:000008A4 67FE            	   870:             beq.s *               * branch if Z set
01:000008A6 087900010000F101	   871:             bchg.b #1,$F101       *
01:000008AE 66FE            	   872:             bne.s *               * branch if Z clear
01:000008B0 087900070000F102	   873:             bchg.b #7,$F102       *
01:000008B8 67FE            	   874:             beq.s *               * branch if Z set
01:000008BA 307C0100        	   875:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008BE 0C180001        	   876:             cmpi.b #$01,(a0)+
01:000008C2 66FE            	   877:             bne.s *               * branch if Z clear
01:000008C4 0C1800FC        	   878:             cmpi.b #$FC,(a0)+
01:000008C8 66FE            	   879:             bne.s *               * branch if Z clear
01:000008CA 0C180080        	   880:             cmpi.b #$80,(a0)+
01:000008CE 66FE            	   881:             bne.s *               * branch if Z clear
                            	   882: 
                            	   883: 
                            	   884: * Bit Number.s Dynamic
                            	   885: 
                            	   886: *             EA = Dn  - LONG only
01:000008D0 203C80000001    	   887:             move.l #$80000001,d0      * populate test data
01:000008D6 7A00            	   888:             move.l #0,d5              * populate bit.s number to test
01:000008D8 7C01            	   889:             move.l #1,d6              * populate bit.s number to test
01:000008DA 7E1F            	   890:             move.l #31,d7              * populate bit.s number to test
                            	   891: 
01:000008DC 0B40            	   892:             bchg.l d5,d0
01:000008DE 67FE            	   893:             beq.s *               * branch if Z set
01:000008E0 0D40            	   894:             bchg.l d6,d0              *
01:000008E2 66FE            	   895:             bne.s *               * branch if Z clear
01:000008E4 0F40            	   896:             bchg.l d7,d0             *
01:000008E6 67FE            	   897:             beq.s *               * branch if Z set
01:000008E8 0C8000000002    	   898:             cmpi.l #$00000002,d0
01:000008EE 66FE            	   899:             bne.s *               * branch if Z clear
                            	   900: 
                            	   901: 
                            	   902: *             EA = (An)  - BYTE only
01:000008F0 7A00            	   903:             move.l #0,d5              * populate bit.s number to test
01:000008F2 7C01            	   904:             move.l #1,d6              * populate bit.s number to test
01:000008F4 7E07            	   905:             move.l #7,d7              * populate bit.s number to test
01:000008F6 307C0100        	   906:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008FA 10BC0081        	   907:             move.b #$81,(a0)          * populate test data
01:000008FE 1210            	   908:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000900 0B50            	   909:             bchg.b d5,(a0)
01:00000902 67FE            	   910:             beq.s *               * branch if Z set
01:00000904 0D50            	   911:             bchg.b d6,(a0)            *
01:00000906 66FE            	   912:             bne.s *               * branch if Z clear
01:00000908 0F50            	   913:             bchg.b d7,(a0)            *
01:0000090A 67FE            	   914:             beq.s *               * branch if Z set
01:0000090C 0C100002        	   915:             cmpi.b #$02,(a0)
01:00000910 66FE            	   916:             bne.s *               * branch if Z clear
                            	   917: 
                            	   918: 
                            	   919: *             EA = (An)+  - BYTE only
01:00000912 307C0100        	   920:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000916 10FC0001        	   921:             move.b #$01,(a0)+         * populate test data
01:0000091A 10FC00FC        	   922:             move.b #$FC,(a0)+         * populate test data
01:0000091E 10FC0080        	   923:             move.b #$80,(a0)+         * populate test data
01:00000922 307C0100        	   924:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000926 0B58            	   925:             bchg.b d5,(a0)+
01:00000928 67FE            	   926:             beq.s *               * branch if Z set
01:0000092A 0D58            	   927:             bchg.b d6,(a0)+           *
01:0000092C 66FE            	   928:             bne.s *               * branch if Z clear
01:0000092E 0F58            	   929:             bchg.b d7,(a0)+           *
01:00000930 67FE            	   930:             beq.s *               * branch if Z set
01:00000932 307C0100        	   931:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000936 4A18            	   932:             cmpi.b #$00,(a0)+
01:00000938 66FE            	   933:             bne.s *               * branch if Z clear
01:0000093A 0C1800FE        	   934:             cmpi.b #$FE,(a0)+
01:0000093E 66FE            	   935:             bne.s *               * branch if Z clear
01:00000940 4A18            	   936:             cmpi.b #$00,(a0)+
01:00000942 66FE            	   937:             bne.s *               * branch if Z clear
                            	   938: 
                            	   939: *             EA = -(An)  - BYTE only
01:00000944 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
01:00000948 10FC0080        	   941:             move.b #$80,(a0)+         * populate test data
01:0000094C 10FC00FC        	   942:             move.b #$FC,(a0)+         * populate test data
01:00000950 10FC0001        	   943:             move.b #$01,(a0)+         * populate test data
01:00000954 307C0103        	   944:             move.l #$00000103,a0      * point to memory to address
01:00000958 0B60            	   945:             bchg.b d5,-(a0)
01:0000095A 67FE            	   946:             beq.s *               * branch if Z set
01:0000095C 0D60            	   947:             bchg.b d6,-(a0)           *
01:0000095E 66FE            	   948:             bne.s *               * branch if Z clear
01:00000960 0F60            	   949:             bchg.b d7,-(a0)           *
01:00000962 67FE            	   950:             beq.s *               * branch if Z set
01:00000964 307C0103        	   951:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000968 4A20            	   952:             cmpi.b #$00,-(a0)
01:0000096A 66FE            	   953:             bne.s *               * branch if Z clear
01:0000096C 0C2000FE        	   954:             cmpi.b #$FE,-(a0)
01:00000970 66FE            	   955:             bne.s *               * branch if Z clear
01:00000972 4A20            	   956:             cmpi.b #$00,-(a0)
01:00000974 66FE            	   957:             bne.s *               * branch if Z clear
                            	   958: 
                            	   959: *             EA = n(An)  - BYTE only
01:00000976 307C0100        	   960:             move.l #$00000100,a0      * point to memory to address
01:0000097A 10FC0001        	   961:             move.b #$01,(a0)+         * populate test data
01:0000097E 10FC00FC        	   962:             move.b #$FC,(a0)+         * populate test data
01:00000982 10FC0080        	   963:             move.b #$80,(a0)+         * populate test data
01:00000986 307C0100        	   964:             move.l #$00000100,a0      * point to memory to address
01:0000098A 0B50            	   965:             bchg.b d5,0(a0)
01:0000098C 67FE            	   966:             beq.s *               * branch if Z set
01:0000098E 0D680001        	   967:             bchg.b d6,1(a0)           *
01:00000992 66FE            	   968:             bne.s *               * branch if Z clear
01:00000994 0F680002        	   969:             bchg.b d7,2(a0)           *
01:00000998 67FE            	   970:             beq.s *               * branch if Z set
01:0000099A 307C0100        	   971:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000099E 4A18            	   972:             cmpi.b #$00,(a0)+
01:000009A0 66FE            	   973:             bne.s *               * branch if Z clear
01:000009A2 0C1800FE        	   974:             cmpi.b #$FE,(a0)+
01:000009A6 66FE            	   975:             bne.s *               * branch if Z clear
01:000009A8 4A18            	   976:             cmpi.b #$00,(a0)+
01:000009AA 66FE            	   977:             bne.s *               * branch if Z clear
                            	   978: 
                            	   979: *             EA = n(An,R.W)  - BYTE only
01:000009AC 307C0100        	   980:             move.l #$00000100,a0      * point to memory to address
01:000009B0 93C9            	   981:             move.l #$00000000,a1      * point to memory to address
01:000009B2 347C0001        	   982:             move.l #$00000001,a2      * point to memory to address
01:000009B6 7000            	   983:             moveq  #$00000000,d0      * point to memory to address
01:000009B8 7201            	   984:             moveq  #$00000001,d1      * point to memory to address
01:000009BA 0B700000        	   985:             bchg.b d5,0(a0,d0.w)
01:000009BE 66FE            	   986:             bne.s *               * branch if Z clear
01:000009C0 0D701000        	   987:             bchg.b d6,0(a0,d1.w)      *
01:000009C4 67FE            	   988:             beq.s *               * branch if Z set
01:000009C6 0F701001        	   989:             bchg.b d7,1(a0,d1.w)      *
01:000009CA 66FE            	   990:             bne.s *               * branch if Z clear
                            	   991: *             EA = n(An,R.L)  - BYTE only
01:000009CC 0B700800        	   992:             bchg.b d5,0(a0,d0.l)
01:000009D0 67FE            	   993:             beq.s *               * branch if Z set
01:000009D2 0D701800        	   994:             bchg.b d6,0(a0,d1.l)      *
01:000009D6 66FE            	   995:             bne.s *               * branch if Z clear
01:000009D8 0F701801        	   996:             bchg.b d7,1(a0,d1.l)      *
01:000009DC 67FE            	   997:             beq.s *               * branch if Z set
                            	   998: *             EA = n(An,A.W)  - BYTE only
01:000009DE 0B709000        	   999:             bchg.b d5,0(a0,a1.w)
01:000009E2 66FE            	  1000:             bne.s *               * branch if Z clear
01:000009E4 0D70A000        	  1001:             bchg.b d6,0(a0,a2.w)      *
01:000009E8 67FE            	  1002:             beq.s *               * branch if Z set
01:000009EA 0F70A001        	  1003:             bchg.b d7,1(a0,a2.w)      *
01:000009EE 66FE            	  1004:             bne.s *               * branch if Z clear
                            	  1005: *             EA = n(An,A.L)  - BYTE only
01:000009F0 0B709800        	  1006:             bchg.b d5,0(a0,a1.l)
01:000009F4 67FE            	  1007:             beq.s *               * branch if Z set
01:000009F6 0D70A800        	  1008:             bchg.b d6,0(a0,a2.l)      *
01:000009FA 66FE            	  1009:             bne.s *               * branch if Z clear
01:000009FC 0F70A801        	  1010:             bchg.b d7,1(a0,a2.l)      *
01:00000A00 67FE            	  1011:             beq.s *               * branch if Z set
01:00000A02 4A18            	  1012:             cmpi.b #$00,(a0)+
01:00000A04 66FE            	  1013:             bne.s *               * branch if Z clear
                            	  1014: 
                            	  1015: *             EA = x.W  - BYTE only
01:00000A06 0B780100        	  1016:             bchg.b d5,$0100
01:00000A0A 66FE            	  1017:             bne.s *               * branch if Z clear
01:00000A0C 0D780101        	  1018:             bchg.b d6,$0101           *
01:00000A10 67FE            	  1019:             beq.s *               * branch if Z set
01:00000A12 0F780102        	  1020:             bchg.b d7,$0102           *
01:00000A16 66FE            	  1021:             bne.s *               * branch if Z clear
01:00000A18 0C1800FC        	  1022:             cmpi.b #$FC,(a0)+
01:00000A1C 66FE            	  1023:             bne.s *               * branch if Z clear
                            	  1024: 
                            	  1025: *             EA = x.L  - BYTE only
01:00000A1E 207C0000F100    	  1026:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A24 10FC0001        	  1027:             move.b #$01,(a0)+         * populate test data
01:00000A28 10FC00FC        	  1028:             move.b #$FC,(a0)+         * populate test data
01:00000A2C 10FC0080        	  1029:             move.b #$80,(a0)+         * populate test data
01:00000A30 0B790000F100    	  1030:             bchg.b d5,$F100
01:00000A36 67FE            	  1031:             beq.s *               * branch if Z set
01:00000A38 0D790000F101    	  1032:             bchg.b d6,$F101       *
01:00000A3E 66FE            	  1033:             bne.s *               * branch if Z clear
01:00000A40 0F790000F102    	  1034:             bchg.b d7,$F102       *
01:00000A46 67FE            	  1035:             beq.s *               * branch if Z set
01:00000A48 207C0000F101    	  1036:             move.l #$F101,a0      * point to memory to address 0x100
01:00000A4E 0C1000FE        	  1037:             cmpi.b #$FE,(a0)
01:00000A52 66FE            	  1038:             bne.s *               * branch if Z clear
                            	  1039: 
                            	  1040: 
01:00000A54 4E75            	  1041:     rts
                            	  1042: 
                            	  1043: *-----------------------------------------------------------
                            	  1044: *-----------------------------------------------------------
                            	  1045: * OPCODE : BCLR
                            	  1046: *-----------------------------------------------------------
                            	  1047: *-----------------------------------------------------------
                            	  1048: op_BCLR:
                            	  1049: 
                            	  1050: 
                            	  1051: *  Bit Number.s Static
                            	  1052: 
                            	  1053: *             EA = Dn  - LONG only
01:00000A56 203CFF0000FF    	  1054:             move.l #$FF0000FF,d0      * populate test data
01:00000A5C 08800000        	  1055:             bclr.l #0,d0
01:00000A60 67FE            	  1056:             beq.s *               * branch if Z set
01:00000A62 08800001        	  1057:             bclr.l #1,d0              *
01:00000A66 67FE            	  1058:             beq.s *               * branch if Z set
01:00000A68 0880000F        	  1059:             bclr.l #15,d0             *
01:00000A6C 66FE            	  1060:             bne.s *               * branch if Z clear
01:00000A6E 0880001F        	  1061:             bclr.l #31,d0             *
01:00000A72 67FE            	  1062:             beq.s *               * branch if Z set
01:00000A74 0C807F0000FC    	  1063:             cmpi.l #$7F0000FC,d0
01:00000A7A 66FE            	  1064:             bne.s *               * branch if Z clear
                            	  1065: 
                            	  1066: 
                            	  1067: *             EA = (An)  - BYTE only
01:00000A7C 307C0100        	  1068:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A80 10BC000F        	  1069:             move.b #$0F,(a0)          * populate test data
01:00000A84 08900000        	  1070:             bclr.b #0,(a0)
01:00000A88 67FE            	  1071:             beq.s *               * branch if Z set
01:00000A8A 08900007        	  1072:             bclr.b #7,(a0)            *
01:00000A8E 66FE            	  1073:             bne.s *               * branch if Z clear
01:00000A90 0C10000E        	  1074:             cmpi.b #$0E,(a0)
01:00000A94 66FE            	  1075:             bne.s *               * branch if Z clear
                            	  1076: 
                            	  1077: *             EA = (An)+  - BYTE only
01:00000A96 307C0100        	  1078:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A9A 10FC0001        	  1079:             move.b #$01,(a0)+         * populate test data
01:00000A9E 4218            	  1080:             move.b #$00,(a0)+         * populate test data
01:00000AA0 307C0100        	  1081:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AA4 08980000        	  1082:             bclr.b #0,(a0)+
01:00000AA8 67FE            	  1083:             beq.s *               * branch if Z set
01:00000AAA 08980001        	  1084:             bclr.b #1,(a0)+           *
01:00000AAE 66FE            	  1085:             bne.s *               * branch if Z clear
01:00000AB0 307C0100        	  1086:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AB4 4A18            	  1087:             cmpi.b #$00,(a0)+
01:00000AB6 66FE            	  1088:             bne.s *               * branch if Z clear
01:00000AB8 4A18            	  1089:             cmpi.b #$00,(a0)+
01:00000ABA 66FE            	  1090:             bne.s *               * branch if Z clear
                            	  1091: 
                            	  1092: 
                            	  1093: *             EA = -(An)  - BYTE only
01:00000ABC 307C0100        	  1094:             move.l #$00000100,a0      * point to memory to address
01:00000AC0 10FC0001        	  1095:             move.b #$01,(a0)+         * populate test data
01:00000AC4 10FC0080        	  1096:             move.b #$80,(a0)+         * populate test data
01:00000AC8 08A00007        	  1097:             bclr.b #7,-(a0)
01:00000ACC 67FE            	  1098:             beq.s *               * branch if Z set
01:00000ACE 08A00000        	  1099:             bclr.b #0,-(a0)           *
01:00000AD2 67FE            	  1100:             beq.s *               * branch if Z set
01:00000AD4 307C0102        	  1101:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000AD8 4A20            	  1102:             cmpi.b #$00,-(a0)
01:00000ADA 66FE            	  1103:             bne.s *               * branch if Z clear
01:00000ADC 4A20            	  1104:             cmpi.b #$00,-(a0)
01:00000ADE 66FE            	  1105:             bne.s *               * branch if Z clear
                            	  1106: 
                            	  1107: 
                            	  1108: *             EA = n(An)  - BYTE only
01:00000AE0 307C0100        	  1109:             move.l #$00000100,a0      * point to memory to address
01:00000AE4 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
01:00000AE8 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
01:00000AEC 307C0100        	  1112:             move.l #$00000100,a0      * point to memory to address
01:00000AF0 08900000        	  1113:             bclr.b #0,0(a0)
01:00000AF4 67FE            	  1114:             beq.s *               * branch if Z set
01:00000AF6 08A800040001    	  1115:             bclr.b #4,1(a0)           *
01:00000AFC 67FE            	  1116:             beq.s *               * branch if Z set
01:00000AFE 307C0100        	  1117:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B02 0C1800FE        	  1118:             cmpi.b #$FE,(a0)+
01:00000B06 66FE            	  1119:             bne.s *               * branch if Z clear
01:00000B08 0C1800EF        	  1120:             cmpi.b #$EF,(a0)+
01:00000B0C 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: 
                            	  1123: 
                            	  1124: *             EA = n(An,D.W)  - BYTE only
01:00000B0E 307C0100        	  1125:             move.l #$00000100,a0      * point to memory to address
01:00000B12 93C9            	  1126:             move.l #$00000000,a1      * point to memory to address
01:00000B14 347C0001        	  1127:             move.l #$00000001,a2      * point to memory to address
01:00000B18 7000            	  1128:             moveq  #$00000000,d0      * point to memory to address
01:00000B1A 7201            	  1129:             moveq  #$00000001,d1      * point to memory to address
01:00000B1C 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
01:00000B20 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
01:00000B24 307C0100        	  1132:             move.l #$00000100,a0      * point to memory to address
01:00000B28 08B000000000    	  1133:             bclr.b #0,0(a0,d0.w)
01:00000B2E 67FE            	  1134:             beq.s *               * branch if Z set
01:00000B30 08B000011000    	  1135:             bclr.b #1,0(a0,d1.w)      *
01:00000B36 67FE            	  1136:             beq.s *               * branch if Z set
01:00000B38 08B000021001    	  1137:             bclr.b #2,1(a0,d1.w)      *
01:00000B3E 66FE            	  1138:             bne.s *               * branch if Z clear
                            	  1139: *             EA = n(An,D.L)  - BYTE only
01:00000B40 08B000030800    	  1140:             bclr.b #3,0(a0,d0.l)
01:00000B46 67FE            	  1141:             beq.s *               * branch if Z set
01:00000B48 08B000041800    	  1142:             bclr.b #4,0(a0,d1.l)      *
01:00000B4E 67FE            	  1143:             beq.s *               * branch if Z set
01:00000B50 08B000051801    	  1144:             bclr.b #5,1(a0,d1.l)      *
01:00000B56 66FE            	  1145:             bne.s *               * branch if Z clear
                            	  1146: *             EA = n(An,A.W)  - BYTE only
01:00000B58 08B000069000    	  1147:             bclr.b #6,0(a0,a1.w)
01:00000B5E 67FE            	  1148:             beq.s *               * branch if Z set
01:00000B60 08B00001A000    	  1149:             bclr.b #1,0(a0,a2.w)      *
01:00000B66 66FE            	  1150:             bne.s *               * branch if Z clear
01:00000B68 08B00007A001    	  1151:             bclr.b #7,1(a0,a2.w)      *
01:00000B6E 67FE            	  1152:             beq.s *               * branch if Z set
                            	  1153: *             EA = n(An,A.L)  - BYTE only
01:00000B70 08B000009800    	  1154:             bclr.b #0,0(a0,a1.l)
01:00000B76 66FE            	  1155:             bne.s *               * branch if Z clear
01:00000B78 08B00000A800    	  1156:             bclr.b #0,0(a0,a2.l)      *
01:00000B7E 67FE            	  1157:             beq.s *               * branch if Z set
01:00000B80 08B00001A801    	  1158:             bclr.b #1,1(a0,a2.l)      *
01:00000B86 66FE            	  1159:             bne.s *               * branch if Z clear
01:00000B88 307C0100        	  1160:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B8C 0C1800B6        	  1161:             cmpi.b #$B6,(a0)+
01:00000B90 66FE            	  1162:             bne.s *               * branch if Z clear
01:00000B92 0C1800EC        	  1163:             cmpi.b #$EC,(a0)+
01:00000B96 66FE            	  1164:             bne.s *               * branch if Z clear
01:00000B98 0C180059        	  1165:             cmpi.b #$59,(a0)+
01:00000B9C 67FE            	  1166:             beq.s *               * branch if Z set
                            	  1167: 
                            	  1168: 
                            	  1169: *             EA = x.W  - BYTE only
01:00000B9E 307C0100        	  1170:             move.l #$00000100,a0      * point to memory to address
01:00000BA2 10FC00FF        	  1171:             move.b #$FF,(a0)+         * populate test data
01:00000BA6 08B800000100    	  1172:             bclr.b #0,$0100
01:00000BAC 67FE            	  1173:             beq.s *               * branch if Z set
01:00000BAE 08B800010100    	  1174:             bclr.b #1,$0100           *
01:00000BB4 67FE            	  1175:             beq.s *               * branch if Z set
01:00000BB6 307C0100        	  1176:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BBA 0C1800FC        	  1177:             cmpi.b #$FC,(a0)+
01:00000BBE 66FE            	  1178:             bne.s *               * branch if Z clear
                            	  1179: 
                            	  1180: 
                            	  1181: *             EA = x.L  - BYTE only
01:00000BC0 207C0000F100    	  1182:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BC6 10BC00FF        	  1183:             move.b #$FF,(a0)          * populate test data
01:00000BCA 08B900000000F100	  1184:             bclr.b #0,$F100
01:00000BD2 67FE            	  1185:             beq.s *               * branch if Z set
01:00000BD4 08B900010000F100	  1186:             bclr.b #1,$F100       *
01:00000BDC 67FE            	  1187:             beq.s *               * branch if Z set
01:00000BDE 08B900020000F100	  1188:             bclr.b #2,$F100       *
01:00000BE6 67FE            	  1189:             beq.s *               * branch if Z set
01:00000BE8 207C0000F100    	  1190:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BEE 0C1800F8        	  1191:             cmpi.b #$F8,(a0)+
01:00000BF2 66FE            	  1192:             bne.s *               * branch if Z clear
                            	  1193: 
                            	  1194: 
                            	  1195: * Bit Number.s Dynamic
                            	  1196: 
                            	  1197: *             EA = Dn  - LONG only
01:00000BF4 203CFF00FF00    	  1198:             move.l #$FF00FF00,d0      * populate test data
01:00000BFA 7A00            	  1199:             move.l #0,d5              * populate bit.s number to test
01:00000BFC 7C01            	  1200:             move.l #1,d6              * populate bit.s number to test
01:00000BFE 7E1F            	  1201:             move.l #31,d7              * populate bit.s number to test
                            	  1202: 
01:00000C00 0B80            	  1203:             bclr.l d5,d0
01:00000C02 66FE            	  1204:             bne.s *               * branch if Z clear
01:00000C04 0D80            	  1205:             bclr.l d6,d0              *
01:00000C06 66FE            	  1206:             bne.s *               * branch if Z clear
01:00000C08 0F80            	  1207:             bclr.l d7,d0             *
01:00000C0A 67FE            	  1208:             beq.s *               * branch if Z set
01:00000C0C 0C807F00FF00    	  1209:             cmpi.l #$7F00FF00,d0
01:00000C12 66FE            	  1210:             bne.s *               * branch if Z clear
                            	  1211: 
                            	  1212: 
                            	  1213: *             EA = (An)  - BYTE only
01:00000C14 7A00            	  1214:             move.l #0,d5              * populate bit.s number to test
01:00000C16 7C01            	  1215:             move.l #1,d6              * populate bit.s number to test
01:00000C18 7E07            	  1216:             move.l #7,d7              * populate bit.s number to test
01:00000C1A 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C1E 10BC0081        	  1218:             move.b #$81,(a0)          * populate test data
01:00000C22 0B90            	  1219:             bclr.b d5,(a0)
01:00000C24 67FE            	  1220:             beq.s *               * branch if Z set
01:00000C26 0D90            	  1221:             bclr.b d6,(a0)            *
01:00000C28 66FE            	  1222:             bne.s *               * branch if Z clear
01:00000C2A 0F90            	  1223:             bclr.b d7,(a0)            *
01:00000C2C 67FE            	  1224:             beq.s *               * branch if Z set
01:00000C2E 4A10            	  1225:             cmpi.b #$00,(a0)
01:00000C30 66FE            	  1226:             bne.s *               * branch if Z clear
                            	  1227: 
                            	  1228: 
                            	  1229: *             EA = (An)+  - BYTE only
01:00000C32 307C0100        	  1230:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C36 10FC0001        	  1231:             move.b #$01,(a0)+         * populate test data
01:00000C3A 10FC00FC        	  1232:             move.b #$FC,(a0)+         * populate test data
01:00000C3E 10FC0080        	  1233:             move.b #$80,(a0)+         * populate test data
01:00000C42 307C0100        	  1234:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C46 0B98            	  1235:             bclr.b d5,(a0)+
01:00000C48 67FE            	  1236:             beq.s *               * branch if Z set
01:00000C4A 0D98            	  1237:             bclr.b d6,(a0)+           *
01:00000C4C 66FE            	  1238:             bne.s *               * branch if Z clear
01:00000C4E 0F98            	  1239:             bclr.b d7,(a0)+           *
01:00000C50 67FE            	  1240:             beq.s *               * branch if Z set
01:00000C52 307C0100        	  1241:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C56 4A18            	  1242:             cmpi.b #$00,(a0)+
01:00000C58 66FE            	  1243:             bne.s *               * branch if Z clear
01:00000C5A 0C1800FC        	  1244:             cmpi.b #$FC,(a0)+
01:00000C5E 66FE            	  1245:             bne.s *               * branch if Z clear
01:00000C60 4A18            	  1246:             cmpi.b #$00,(a0)+
01:00000C62 66FE            	  1247:             bne.s *               * branch if Z clear
                            	  1248: 
                            	  1249: *             EA = -(An)  - BYTE only
01:00000C64 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
01:00000C68 10FC0080        	  1251:             move.b #$80,(a0)+         * populate test data
01:00000C6C 10FC00FC        	  1252:             move.b #$FC,(a0)+         * populate test data
01:00000C70 10FC0001        	  1253:             move.b #$01,(a0)+         * populate test data
01:00000C74 307C0103        	  1254:             move.l #$00000103,a0      * point to memory to address
01:00000C78 0BA0            	  1255:             bclr.b d5,-(a0)
01:00000C7A 67FE            	  1256:             beq.s *               * branch if Z set
01:00000C7C 0DA0            	  1257:             bclr.b d6,-(a0)           *
01:00000C7E 66FE            	  1258:             bne.s *               * branch if Z clear
01:00000C80 0FA0            	  1259:             bclr.b d7,-(a0)           *
01:00000C82 67FE            	  1260:             beq.s *               * branch if Z set
01:00000C84 307C0103        	  1261:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000C88 4A20            	  1262:             cmpi.b #$00,-(a0)
01:00000C8A 66FE            	  1263:             bne.s *               * branch if Z clear
01:00000C8C 0C2000FC        	  1264:             cmpi.b #$FC,-(a0)
01:00000C90 66FE            	  1265:             bne.s *               * branch if Z clear
01:00000C92 4A20            	  1266:             cmpi.b #$00,-(a0)
01:00000C94 66FE            	  1267:             bne.s *               * branch if Z clear
                            	  1268: 
                            	  1269: *             EA = n(An)  - BYTE only
01:00000C96 307C0100        	  1270:             move.l #$00000100,a0      * point to memory to address
01:00000C9A 10FC0001        	  1271:             move.b #$01,(a0)+         * populate test data
01:00000C9E 10FC00FC        	  1272:             move.b #$FC,(a0)+         * populate test data
01:00000CA2 10FC0080        	  1273:             move.b #$80,(a0)+         * populate test data
01:00000CA6 307C0100        	  1274:             move.l #$00000100,a0      * point to memory to address
01:00000CAA 0B90            	  1275:             bclr.b d5,0(a0)
01:00000CAC 67FE            	  1276:             beq.s *               * branch if Z set
01:00000CAE 0DA80001        	  1277:             bclr.b d6,1(a0)           *
01:00000CB2 66FE            	  1278:             bne.s *               * branch if Z clear
01:00000CB4 0FA80002        	  1279:             bclr.b d7,2(a0)           *
01:00000CB8 67FE            	  1280:             beq.s *               * branch if Z set
01:00000CBA 307C0100        	  1281:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CBE 4A18            	  1282:             cmpi.b #$00,(a0)+
01:00000CC0 66FE            	  1283:             bne.s *               * branch if Z clear
01:00000CC2 0C1800FC        	  1284:             cmpi.b #$FC,(a0)+
01:00000CC6 66FE            	  1285:             bne.s *               * branch if Z clear
01:00000CC8 4A18            	  1286:             cmpi.b #$00,(a0)+
01:00000CCA 66FE            	  1287:             bne.s *               * branch if Z clear
                            	  1288: 
                            	  1289: *             EA = n(An,R.W)  - BYTE only
01:00000CCC 307C0100        	  1290:             move.l #$00000100,a0      * point to memory to address
01:00000CD0 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
01:00000CD4 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000CD8 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
01:00000CDC 307C0103        	  1294:             move.l #$00000103,a0      * point to memory to address
01:00000CE0 307C0100        	  1295:             move.l #$00000100,a0      * point to memory to address
01:00000CE4 93C9            	  1296:             move.l #$00000000,a1      * point to memory to address
01:00000CE6 347C0001        	  1297:             move.l #$00000001,a2      * point to memory to address
01:00000CEA 7000            	  1298:             moveq  #$00000000,d0      * point to memory to address
01:00000CEC 7201            	  1299:             moveq  #$00000001,d1      * point to memory to address
01:00000CEE 0BB00000        	  1300:             bclr.b d5,0(a0,d0.w)
01:00000CF2 67FE            	  1301:             beq.s *               * branch if Z set
01:00000CF4 0DB01000        	  1302:             bclr.b d6,0(a0,d1.w)      *
01:00000CF8 67FE            	  1303:             beq.s *               * branch if Z set
01:00000CFA 0FB01001        	  1304:             bclr.b d7,1(a0,d1.w)      *
01:00000CFE 67FE            	  1305:             beq.s *               * branch if Z set
                            	  1306: *             EA = n(An,R.L)  - BYTE only
01:00000D00 0BB00800        	  1307:             bclr.b d5,0(a0,d0.l)
01:00000D04 66FE            	  1308:             bne.s *               * branch if Z clear
01:00000D06 0DB01800        	  1309:             bclr.b d6,0(a0,d1.l)      *
01:00000D0A 66FE            	  1310:             bne.s *               * branch if Z clear
01:00000D0C 0FB01801        	  1311:             bclr.b d7,1(a0,d1.l)      *
01:00000D10 66FE            	  1312:             bne.s *               * branch if Z clear
                            	  1313: *             EA = n(An,A.W)  - BYTE only
01:00000D12 0BB09000        	  1314:             bclr.b d5,0(a0,a1.w)
01:00000D16 66FE            	  1315:             bne.s *               * branch if Z clear
01:00000D18 0DB0A000        	  1316:             bclr.b d6,0(a0,a2.w)      *
01:00000D1C 66FE            	  1317:             bne.s *               * branch if Z clear
01:00000D1E 0FB0A001        	  1318:             bclr.b d7,1(a0,a2.w)      *
01:00000D22 66FE            	  1319:             bne.s *               * branch if Z clear
                            	  1320: *             EA = n(An,A.L)  - BYTE only
01:00000D24 0BB09800        	  1321:             bclr.b d5,0(a0,a1.l)
01:00000D28 66FE            	  1322:             bne.s *               * branch if Z clear
01:00000D2A 0DB0A800        	  1323:             bclr.b d6,0(a0,a2.l)      *
01:00000D2E 66FE            	  1324:             bne.s *               * branch if Z clear
01:00000D30 0FB0A801        	  1325:             bclr.b d7,1(a0,a2.l)      *
01:00000D34 66FE            	  1326:             bne.s *               * branch if Z clear
01:00000D36 307C0100        	  1327:             move.l #$00000100,a0      * point to memory to address
01:00000D3A 0C1000FE        	  1328:             cmpi.b #$FE,(a0)
01:00000D3E 66FE            	  1329:             bne.s *               * branch if Z clear
                            	  1330: 
                            	  1331: *             EA = x.W  - BYTE only
01:00000D40 307C0100        	  1332:             move.l #$00000100,a0      * point to memory to address
01:00000D44 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
01:00000D48 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000D4C 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
01:00000D50 0BB80100        	  1336:             bclr.b d5,$0100
01:00000D54 67FE            	  1337:             beq.s *               * branch if Z set
01:00000D56 0DB80101        	  1338:             bclr.b d6,$0101           *
01:00000D5A 67FE            	  1339:             beq.s *               * branch if Z set
01:00000D5C 0FB80102        	  1340:             bclr.b d7,$0102           *
01:00000D60 67FE            	  1341:             beq.s *               * branch if Z set
01:00000D62 307C0100        	  1342:             move.l #$00000100,a0      * point to memory to address
01:00000D66 0C1800FE        	  1343:             cmpi.b #$FE,(a0)+
01:00000D6A 66FE            	  1344:             bne.s *               * branch if Z clear
                            	  1345: 
                            	  1346: *             EA = x.L  - BYTE only
01:00000D6C 207C0000F100    	  1347:             move.l #$F100,a0      * point to memory to address 0x100
01:00000D72 10FC0001        	  1348:             move.b #$01,(a0)+         * populate test data
01:00000D76 10FC00FC        	  1349:             move.b #$FC,(a0)+         * populate test data
01:00000D7A 10FC0080        	  1350:             move.b #$80,(a0)+         * populate test data
01:00000D7E 0BB90000F100    	  1351:             bclr.b d5,$F100
01:00000D84 67FE            	  1352:             beq.s *               * branch if Z set
01:00000D86 0DB90000F101    	  1353:             bclr.b d6,$F101       *
01:00000D8C 66FE            	  1354:             bne.s *               * branch if Z clear
01:00000D8E 0FB90000F102    	  1355:             bclr.b d7,$F102       *
01:00000D94 67FE            	  1356:             beq.s *               * branch if Z set
01:00000D96 207C0000F101    	  1357:             move.l #$F101,a0      * point to memory to address 0x100
01:00000D9C 0C1000FC        	  1358:             cmpi.b #$FC,(a0)
01:00000DA0 66FE            	  1359:             bne.s *               * branch if Z clear
                            	  1360: 
                            	  1361: 
                            	  1362: 
01:00000DA2 4E75            	  1363:     rts
                            	  1364: 
                            	  1365: *-----------------------------------------------------------
                            	  1366: *-----------------------------------------------------------
                            	  1367: * OPCODE : BSET
                            	  1368: *-----------------------------------------------------------
                            	  1369: *-----------------------------------------------------------
                            	  1370: op_BSET:
                            	  1371: 
                            	  1372: 
                            	  1373: *  Bit Number.s Static
                            	  1374: 
                            	  1375: *             EA = Dn  - LONG only
01:00000DA4 7000            	  1376:             moveq  #$00000000,d0      * populate test data
01:00000DA6 08C00000        	  1377:             bset.l #0,d0
01:00000DAA 66FE            	  1378:             bne.s *               * branch if Z clear
01:00000DAC 08C00001        	  1379:             bset.l #1,d0              *
01:00000DB0 66FE            	  1380:             bne.s *               * branch if Z clear
01:00000DB2 08C0000F        	  1381:             bset.l #15,d0             *
01:00000DB6 66FE            	  1382:             bne.s *               * branch if Z clear
01:00000DB8 08C0001F        	  1383:             bset.l #31,d0             *
01:00000DBC 66FE            	  1384:             bne.s *               * branch if Z clear
01:00000DBE 0C8080008003    	  1385:             cmpi.l #$80008003,d0
01:00000DC4 66FE            	  1386:             bne.s *               * branch if Z clear
                            	  1387: 
                            	  1388: 
                            	  1389: *             EA = (An)  - BYTE only
01:00000DC6 307C0100        	  1390:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DCA 4210            	  1391:             move.b #$00,(a0)          * populate test data
01:00000DCC 08D00000        	  1392:             bset.b #0,(a0)
01:00000DD0 66FE            	  1393:             bne.s *               * branch if Z clear
01:00000DD2 08D00007        	  1394:             bset.b #7,(a0)            *
01:00000DD6 66FE            	  1395:             bne.s *               * branch if Z clear
01:00000DD8 0C100081        	  1396:             cmpi.b #$81,(a0)
01:00000DDC 66FE            	  1397:             bne.s *               * branch if Z clear
                            	  1398: 
                            	  1399: *             EA = (An)+  - BYTE only
01:00000DDE 307C0100        	  1400:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DE2 4218            	  1401:             move.b #$00,(a0)+         * populate test data
01:00000DE4 4218            	  1402:             move.b #$00,(a0)+         * populate test data
01:00000DE6 307C0100        	  1403:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DEA 08D80000        	  1404:             bset.b #0,(a0)+
01:00000DEE 66FE            	  1405:             bne.s *               * branch if Z clear
01:00000DF0 08D80001        	  1406:             bset.b #1,(a0)+           *
01:00000DF4 66FE            	  1407:             bne.s *               * branch if Z clear
01:00000DF6 307C0100        	  1408:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DFA 0C180001        	  1409:             cmpi.b #$01,(a0)+
01:00000DFE 66FE            	  1410:             bne.s *               * branch if Z clear
01:00000E00 0C180002        	  1411:             cmpi.b #$02,(a0)+
01:00000E04 66FE            	  1412:             bne.s *               * branch if Z clear
                            	  1413: 
                            	  1414: 
                            	  1415: *             EA = -(An)  - BYTE only
01:00000E06 307C0100        	  1416:             move.l #$00000100,a0      * point to memory to address
01:00000E0A 4218            	  1417:             move.b #$00,(a0)+         * populate test data
01:00000E0C 4218            	  1418:             move.b #$00,(a0)+         * populate test data
01:00000E0E 08E00007        	  1419:             bset.b #7,-(a0)
01:00000E12 66FE            	  1420:             bne.s *               * branch if Z clear
01:00000E14 08E00000        	  1421:             bset.b #0,-(a0)           *
01:00000E18 66FE            	  1422:             bne.s *               * branch if Z clear
01:00000E1A 307C0102        	  1423:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000E1E 0C200080        	  1424:             cmpi.b #$80,-(a0)
01:00000E22 66FE            	  1425:             bne.s *               * branch if Z clear
01:00000E24 0C200001        	  1426:             cmpi.b #$01,-(a0)
01:00000E28 66FE            	  1427:             bne.s *               * branch if Z clear
                            	  1428: 
                            	  1429: 
                            	  1430: *             EA = n(An)  - BYTE only
01:00000E2A 307C0100        	  1431:             move.l #$00000100,a0      * point to memory to address
01:00000E2E 4218            	  1432:             move.b #$00,(a0)+         * populate test data
01:00000E30 4218            	  1433:             move.b #$00,(a0)+         * populate test data
01:00000E32 307C0100        	  1434:             move.l #$00000100,a0      * point to memory to address
01:00000E36 08D00000        	  1435:             bset.b #0,0(a0)
01:00000E3A 66FE            	  1436:             bne.s *               * branch if Z clear
01:00000E3C 08E800040001    	  1437:             bset.b #4,1(a0)           *
01:00000E42 66FE            	  1438:             bne.s *               * branch if Z clear
01:00000E44 307C0100        	  1439:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E48 0C180001        	  1440:             cmpi.b #$01,(a0)+
01:00000E4C 66FE            	  1441:             bne.s *               * branch if Z clear
01:00000E4E 0C180010        	  1442:             cmpi.b #$10,(a0)+
01:00000E52 66FE            	  1443:             bne.s *               * branch if Z clear
                            	  1444: 
                            	  1445: 
                            	  1446: *             EA = n(An,D.W)  - BYTE only
01:00000E54 307C0100        	  1447:             move.l #$00000100,a0      * point to memory to address
01:00000E58 93C9            	  1448:             move.l #$00000000,a1      * point to memory to address
01:00000E5A 347C0004        	  1449:             move.l #$00000004,a2      * point to memory to address
01:00000E5E 7000            	  1450:             moveq  #$00000000,d0      * point to memory to address
01:00000E60 7201            	  1451:             moveq  #$00000001,d1      * point to memory to address
01:00000E62 4218            	  1452:             move.b #$00,(a0)+         * populate test data
01:00000E64 4218            	  1453:             move.b #$00,(a0)+         * populate test data
01:00000E66 4218            	  1454:             move.b #$00,(a0)+         * populate test data
01:00000E68 4218            	  1455:             move.b #$00,(a0)+         * populate test data
01:00000E6A 4218            	  1456:             move.b #$00,(a0)+         * populate test data
01:00000E6C 4218            	  1457:             move.b #$00,(a0)+         * populate test data
01:00000E6E 4218            	  1458:             move.b #$00,(a0)+         * populate test data
01:00000E70 4218            	  1459:             move.b #$00,(a0)+         * populate test data
01:00000E72 4218            	  1460:             move.b #$00,(a0)+         * populate test data
01:00000E74 4218            	  1461:             move.b #$00,(a0)+         * populate test data
01:00000E76 307C0100        	  1462:             move.l #$00000100,a0      * point to memory to address
01:00000E7A 08F000000000    	  1463:             bset.b #0,0(a0,d0.w)
01:00000E80 66FE            	  1464:             bne.s *               * branch if Z clear
01:00000E82 08F000011000    	  1465:             bset.b #1,0(a0,d1.w)      *
01:00000E88 66FE            	  1466:             bne.s *               * branch if Z clear
01:00000E8A 08F000021001    	  1467:             bset.b #2,1(a0,d1.w)      *
01:00000E90 66FE            	  1468:             bne.s *               * branch if Z clear
                            	  1469: *             EA = n(An,D.L)  - BYTE only
01:00000E92 08F000030802    	  1470:             bset.b #3,2(a0,d0.l)
01:00000E98 66FE            	  1471:             bne.s *               * branch if Z clear
01:00000E9A 08F000041800    	  1472:             bset.b #4,0(a0,d1.l)      *
01:00000EA0 66FE            	  1473:             bne.s *               * branch if Z clear
01:00000EA2 08F000051801    	  1474:             bset.b #5,1(a0,d1.l)      *
01:00000EA8 66FE            	  1475:             bne.s *               * branch if Z clear
                            	  1476: *             EA = n(An,A.W)  - BYTE only
01:00000EAA 08F000069000    	  1477:             bset.b #6,0(a0,a1.w)
01:00000EB0 66FE            	  1478:             bne.s *               * branch if Z clear
01:00000EB2 08F00001A000    	  1479:             bset.b #1,0(a0,a2.w)      *
01:00000EB8 66FE            	  1480:             bne.s *               * branch if Z clear
01:00000EBA 08F00007A001    	  1481:             bset.b #7,1(a0,a2.w)      *
01:00000EC0 66FE            	  1482:             bne.s *               * branch if Z clear
                            	  1483: *             EA = n(An,A.L)  - BYTE only
01:00000EC2 08F00000A802    	  1484:             bset.b #0,2(a0,a2.l)
01:00000EC8 66FE            	  1485:             bne.s *               * branch if Z clear
01:00000ECA 08F00000A803    	  1486:             bset.b #0,3(a0,a2.l)      *
01:00000ED0 66FE            	  1487:             bne.s *               * branch if Z clear
01:00000ED2 08F00001A804    	  1488:             bset.b #1,4(a0,a2.l)      *
01:00000ED8 66FE            	  1489:             bne.s *               * branch if Z clear
01:00000EDA 307C0100        	  1490:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EDE 0C9841122C00    	  1491:             cmpi.l #$41122C00,(a0)+
01:00000EE4 66FE            	  1492:             bne.s *               * branch if Z clear
01:00000EE6 0C9802800101    	  1493:             cmpi.l #$02800101,(a0)+
01:00000EEC 66FE            	  1494:             bne.s *
                            	  1495: 
                            	  1496: 
                            	  1497: 
                            	  1498: *             EA = x.W  - BYTE only
01:00000EEE 307C0100        	  1499:             move.l #$00000100,a0      * point to memory to address
01:00000EF2 4218            	  1500:             move.b #$00,(a0)+         * populate test data
01:00000EF4 08F800000100    	  1501:             bset.b #0,$0100
01:00000EFA 66FE            	  1502:             bne.s *               * branch if Z clear
01:00000EFC 08F800010100    	  1503:             bset.b #1,$0100           *
01:00000F02 66FE            	  1504:             bne.s *               * branch if Z clear
01:00000F04 307C0100        	  1505:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F08 0C180003        	  1506:             cmpi.b #$03,(a0)+
01:00000F0C 66FE            	  1507:             bne.s *
                            	  1508: 
                            	  1509: 
                            	  1510: *             EA = x.L  - BYTE only
01:00000F0E 207C0000F100    	  1511:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F14 4210            	  1512:             move.b #$00,(a0)          * populate test data
01:00000F16 08F900000000F100	  1513:             bset.b #0,$F100
01:00000F1E 66FE            	  1514:             bne.s *               * branch if Z clear
01:00000F20 08F900010000F100	  1515:             bset.b #1,$F100       *
01:00000F28 66FE            	  1516:             bne.s *               * branch if Z clear
01:00000F2A 08F900020000F100	  1517:             bset.b #2,$F100       *
01:00000F32 66FE            	  1518:             bne.s *               * branch if Z clear
01:00000F34 207C0000F100    	  1519:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F3A 0C180007        	  1520:             cmpi.b #$07,(a0)+
01:00000F3E 66FE            	  1521:             bne.s *
                            	  1522: 
                            	  1523: 
                            	  1524: * Bit Number.s Dynamic
                            	  1525: 
                            	  1526: *             EA = Dn  - LONG only
01:00000F40 7000            	  1527:             moveq  #$00000000,d0      * populate test data
01:00000F42 7A00            	  1528:             move.l #0,d5              * populate bit.s number to test
01:00000F44 7C01            	  1529:             move.l #1,d6              * populate bit.s number to test
01:00000F46 7E1F            	  1530:             move.l #31,d7              * populate bit.s number to test
                            	  1531: 
01:00000F48 0BC0            	  1532:             bset.l d5,d0
01:00000F4A 66FE            	  1533:             bne.s *               * branch if Z clear
01:00000F4C 0DC0            	  1534:             bset.l d6,d0              *
01:00000F4E 66FE            	  1535:             bne.s *               * branch if Z clear
01:00000F50 0FC0            	  1536:             bset.l d7,d0             *
01:00000F52 66FE            	  1537:             bne.s *               * branch if Z clear
01:00000F54 0C8080000003    	  1538:             cmpi.l #$80000003,d0
01:00000F5A 66FE            	  1539:             bne.s *               * branch if Z clear
                            	  1540: 
                            	  1541: 
                            	  1542: *             EA = (An)  - BYTE only
01:00000F5C 7A00            	  1543:             move.l #0,d5              * populate bit.s number to test
01:00000F5E 7C01            	  1544:             move.l #1,d6              * populate bit.s number to test
01:00000F60 7E07            	  1545:             move.l #7,d7              * populate bit.s number to test
01:00000F62 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F66 4210            	  1547:             move.b #$00,(a0)          * populate test data
01:00000F68 0BD0            	  1548:             bset.b d5,(a0)
01:00000F6A 66FE            	  1549:             bne.s *               * branch if Z clear
01:00000F6C 0DD0            	  1550:             bset.b d6,(a0)            *
01:00000F6E 66FE            	  1551:             bne.s *               * branch if Z clear
01:00000F70 0FD0            	  1552:             bset.b d7,(a0)            *
01:00000F72 66FE            	  1553:             bne.s *               * branch if Z clear
01:00000F74 0C100083        	  1554:             cmpi.b #$83,(a0)
01:00000F78 66FE            	  1555:             bne.s *               * branch if Z clear
                            	  1556: 
                            	  1557: 
                            	  1558: *             EA = (An)+  - BYTE only
01:00000F7A 307C0100        	  1559:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F7E 4218            	  1560:             move.b #$00,(a0)+         * populate test data
01:00000F80 4218            	  1561:             move.b #$00,(a0)+         * populate test data
01:00000F82 4218            	  1562:             move.b #$00,(a0)+         * populate test data
01:00000F84 307C0100        	  1563:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F88 0BD8            	  1564:             bset.b d5,(a0)+
01:00000F8A 66FE            	  1565:             bne.s *               * branch if Z clear
01:00000F8C 0DD8            	  1566:             bset.b d6,(a0)+           *
01:00000F8E 66FE            	  1567:             bne.s *               * branch if Z clear
01:00000F90 0FD8            	  1568:             bset.b d7,(a0)+           *
01:00000F92 66FE            	  1569:             bne.s *               * branch if Z clear
01:00000F94 307C0100        	  1570:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F98 0C180001        	  1571:             cmpi.b #$01,(a0)+
01:00000F9C 66FE            	  1572:             bne.s *               * branch if Z clear
01:00000F9E 0C180002        	  1573:             cmpi.b #$02,(a0)+
01:00000FA2 66FE            	  1574:             bne.s *               * branch if Z clear
01:00000FA4 0C180080        	  1575:             cmpi.b #$80,(a0)+
01:00000FA8 66FE            	  1576:             bne.s *               * branch if Z clear
                            	  1577: 
                            	  1578: *             EA = -(An)  - BYTE only
01:00000FAA 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
01:00000FAE 4218            	  1580:             move.b #$00,(a0)+         * populate test data
01:00000FB0 4218            	  1581:             move.b #$00,(a0)+         * populate test data
01:00000FB2 4218            	  1582:             move.b #$00,(a0)+         * populate test data
01:00000FB4 307C0103        	  1583:             move.l #$00000103,a0      * point to memory to address
01:00000FB8 0BE0            	  1584:             bset.b d5,-(a0)
01:00000FBA 66FE            	  1585:             bne.s *               * branch if Z clear
01:00000FBC 0DE0            	  1586:             bset.b d6,-(a0)           *
01:00000FBE 66FE            	  1587:             bne.s *               * branch if Z clear
01:00000FC0 0FE0            	  1588:             bset.b d7,-(a0)           *
01:00000FC2 66FE            	  1589:             bne.s *               * branch if Z clear
01:00000FC4 307C0103        	  1590:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000FC8 0C200001        	  1591:             cmpi.b #$01,-(a0)
01:00000FCC 66FE            	  1592:             bne.s *               * branch if Z clear
01:00000FCE 0C200002        	  1593:             cmpi.b #$02,-(a0)
01:00000FD2 66FE            	  1594:             bne.s *               * branch if Z clear
01:00000FD4 0C200080        	  1595:             cmpi.b #$80,-(a0)
01:00000FD8 66FE            	  1596:             bne.s *               * branch if Z clear
                            	  1597: 
                            	  1598: *             EA = n(An)  - BYTE only
01:00000FDA 307C0100        	  1599:             move.l #$00000100,a0      * point to memory to address
01:00000FDE 4218            	  1600:             move.b #$00,(a0)+         * populate test data
01:00000FE0 4218            	  1601:             move.b #$00,(a0)+         * populate test data
01:00000FE2 4218            	  1602:             move.b #$00,(a0)+         * populate test data
01:00000FE4 307C0100        	  1603:             move.l #$00000100,a0      * point to memory to address
01:00000FE8 0BD0            	  1604:             bset.b d5,0(a0)
01:00000FEA 66FE            	  1605:             bne.s *               * branch if Z clear
01:00000FEC 0DE80001        	  1606:             bset.b d6,1(a0)           *
01:00000FF0 66FE            	  1607:             bne.s *               * branch if Z clear
01:00000FF2 0FE80002        	  1608:             bset.b d7,2(a0)           *
01:00000FF6 66FE            	  1609:             bne.s *               * branch if Z clear
01:00000FF8 307C0100        	  1610:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FFC 0C180001        	  1611:             cmpi.b #$01,(a0)+
01:00001000 66FE            	  1612:             bne.s *               * branch if Z clear
01:00001002 0C180002        	  1613:             cmpi.b #$02,(a0)+
01:00001006 66FE            	  1614:             bne.s *               * branch if Z clear
01:00001008 0C180080        	  1615:             cmpi.b #$80,(a0)+
01:0000100C 66FE            	  1616:             bne.s *               * branch if Z clear
                            	  1617: 
                            	  1618: *             EA = n(An,R.W)  - BYTE only
01:0000100E 307C0100        	  1619:             move.l #$00000100,a0      * point to memory to address
01:00001012 4218            	  1620:             move.b #$00,(a0)+         * populate test data
01:00001014 4218            	  1621:             move.b #$00,(a0)+         * populate test data
01:00001016 4218            	  1622:             move.b #$00,(a0)+         * populate test data
01:00001018 4218            	  1623:             move.b #$00,(a0)+         * populate test data
01:0000101A 4218            	  1624:             move.b #$00,(a0)+         * populate test data
01:0000101C 4218            	  1625:             move.b #$00,(a0)+         * populate test data
01:0000101E 4218            	  1626:             move.b #$00,(a0)+         * populate test data
01:00001020 4218            	  1627:             move.b #$00,(a0)+         * populate test data
01:00001022 4218            	  1628:             move.b #$00,(a0)+         * populate test data
01:00001024 4218            	  1629:             move.b #$00,(a0)+         * populate test data
01:00001026 4218            	  1630:             move.b #$00,(a0)+         * populate test data
01:00001028 4218            	  1631:             move.b #$00,(a0)+         * populate test data
01:0000102A 307C0100        	  1632:             move.l #$00000100,a0      * point to memory to address
01:0000102E 93C9            	  1633:             move.l #$00000000,a1      * point to memory to address
01:00001030 347C0001        	  1634:             move.l #$00000001,a2      * point to memory to address
01:00001034 7000            	  1635:             moveq  #$00000000,d0      * point to memory to address
01:00001036 7201            	  1636:             moveq  #$00000001,d1      * point to memory to address
01:00001038 0BF00000        	  1637:             bset.b d5,0(a0,d0.w)
01:0000103C 66FE            	  1638:             bne.s *               * branch if Z clear
01:0000103E 0DF01000        	  1639:             bset.b d6,0(a0,d1.w)      *
01:00001042 66FE            	  1640:             bne.s *               * branch if Z clear
01:00001044 0FF01001        	  1641:             bset.b d7,1(a0,d1.w)      *
01:00001048 66FE            	  1642:             bne.s *               * branch if Z clear
                            	  1643: *             EA = n(An,R.L)  - BYTE only
01:0000104A 0BF00802        	  1644:             bset.b d5,2(a0,d0.l)
01:0000104E 66FE            	  1645:             bne.s *               * branch if Z clear
01:00001050 0DF01803        	  1646:             bset.b d6,3(a0,d1.l)      *
01:00001054 66FE            	  1647:             bne.s *               * branch if Z clear
01:00001056 0FF01804        	  1648:             bset.b d7,4(a0,d1.l)      *
01:0000105A 66FE            	  1649:             bne.s *               * branch if Z clear
                            	  1650: *             EA = n(An,A.W)  - BYTE only
01:0000105C 0BF09005        	  1651:             bset.b d5,5(a0,a1.w)
01:00001060 66FE            	  1652:             bne.s *               * branch if Z clear
01:00001062 0DF0A006        	  1653:             bset.b d6,6(a0,a2.w)      *
01:00001066 66FE            	  1654:             bne.s *               * branch if Z clear
01:00001068 0FF0A007        	  1655:             bset.b d7,7(a0,a2.w)      *
01:0000106C 66FE            	  1656:             bne.s *               * branch if Z clear
                            	  1657: *             EA = n(An,A.L)  - BYTE only
01:0000106E 0BF09808        	  1658:             bset.b d5,8(a0,a1.l)
01:00001072 66FE            	  1659:             bne.s *               * branch if Z clear
01:00001074 0DF0A809        	  1660:             bset.b d6,9(a0,a2.l)      *
01:00001078 66FE            	  1661:             bne.s *               * branch if Z clear
01:0000107A 0FF0A80A        	  1662:             bset.b d7,10(a0,a2.l)      *
01:0000107E 66FE            	  1663:             bne.s *               * branch if Z clear
01:00001080 307C0100        	  1664:             move.l #$00000100,a0      * point to memory to address 0x100
01:00001084 0C9801028100    	  1665:             cmpi.l #$01028100,(a0)+
01:0000108A 66FE            	  1666:             bne.s *               * branch if Z clear
01:0000108C 0C9802810002    	  1667:             cmpi.l #$02810002,(a0)+
01:00001092 66FE            	  1668:             bne.s *
                            	  1669: 
                            	  1670: 
                            	  1671: *             EA = x.W  - BYTE only
01:00001094 307C0100        	  1672:             move.l #$00000100,a0      * point to memory to address
01:00001098 4218            	  1673:             move.b #$00,(a0)+         * populate test data
01:0000109A 4218            	  1674:             move.b #$00,(a0)+         * populate test data
01:0000109C 4218            	  1675:             move.b #$00,(a0)+         * populate test data
01:0000109E 0BF80100        	  1676:             bset.b d5,$0100
01:000010A2 66FE            	  1677:             bne.s *               * branch if Z clear
01:000010A4 0DF80100        	  1678:             bset.b d6,$0100           *
01:000010A8 66FE            	  1679:             bne.s *               * branch if Z clear
01:000010AA 0FF80100        	  1680:             bset.b d7,$0100           *
01:000010AE 66FE            	  1681:             bne.s *               * branch if Z clear
01:000010B0 307C0100        	  1682:             move.l #$00000100,a0      * point to memory to address
01:000010B4 0C180083        	  1683:             cmpi.b #$83,(a0)+
01:000010B8 66FE            	  1684:             bne.s *               * branch if Z clear
                            	  1685: 
                            	  1686: *             EA = x.L  - BYTE only
01:000010BA 207C0000F100    	  1687:             move.l #$F100,a0      * point to memory to address 0x100
01:000010C0 4218            	  1688:             move.b #$00,(a0)+         * populate test data
01:000010C2 4218            	  1689:             move.b #$00,(a0)+         * populate test data
01:000010C4 4218            	  1690:             move.b #$00,(a0)+         * populate test data
01:000010C6 0BF90000F100    	  1691:             bset.b d5,$F100
01:000010CC 66FE            	  1692:             bne.s *               * branch if Z clear
01:000010CE 0DF90000F100    	  1693:             bset.b d6,$F100       *
01:000010D4 66FE            	  1694:             bne.s *               * branch if Z clear
01:000010D6 0FF90000F100    	  1695:             bset.b d7,$F100       *
01:000010DC 66FE            	  1696:             bne.s *               * branch if Z clear
01:000010DE 207C0000F100    	  1697:             move.l #$F100,a0      * point to memory to address 0x100
01:000010E4 0C100083        	  1698:             cmpi.b #$83,(a0)
01:000010E8 66FE            	  1699:             bne.s *               * branch if Z clear
                            	  1700: 
                            	  1701: 
01:000010EA 4E75            	  1702:     rts
                            	  1703: 
                            	  1704: *-----------------------------------------------------------
                            	  1705: *-----------------------------------------------------------
                            	  1706: * OPCODE : MOVEP
                            	  1707: *-----------------------------------------------------------
                            	  1708: *-----------------------------------------------------------
                            	  1709: op_MOVEP:
                            	  1710: 
                            	  1711: * Dn --> x(An)
01:000010EC 307C0100        	  1712:             move.l #$00000100,a0
01:000010F0 203C12345678    	  1713:             move.l #$12345678,d0
01:000010F6 223CAABBCCDD    	  1714:             move.l #$AABBCCDD,d1
01:000010FC 4290            	  1715:             move.l #0,(a0)
01:000010FE 42A80004        	  1716:             move.l #0,4(a0)
                            	  1717: 
01:00001102 01880000        	  1718:             movep.w d0,0(a0)      * even offset
01:00001106 03880001        	  1719:             movep.w d1,1(a0)      * odd offset
                            	  1720: 
01:0000110A 01C80004        	  1721:             movep.l d0,4(a0)      * even offset
01:0000110E 03C80005        	  1722:             movep.l d1,5(a0)      * odd offset
                            	  1723: 
01:00001112 0C9056CC78DD    	  1724:             cmpi.l #$56CC78DD,(a0)
01:00001118 66FE            	  1725:             bne.s *
01:0000111A 0CA812AA34BB0004	  1726:             cmpi.l #$12AA34BB,4(a0)
01:00001122 66FE            	  1727:             bne.s *
01:00001124 0CA856CC78DD0008	  1728:             cmpi.l #$56CC78DD,8(a0)
01:0000112C 66FE            	  1729:             bne.s *
                            	  1730: 
                            	  1731: 
                            	  1732: * x(An)--> Dn
01:0000112E 203C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d0
01:00001134 223C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d1
01:0000113A 243C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d2
01:00001140 263C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d3
                            	  1737: 
01:00001146 01080000        	  1738:             movep.w 0(a0),d0      * even offset
01:0000114A 03080001        	  1739:             movep.w 1(a0),d1      * odd offset
                            	  1740: 
01:0000114E 05480004        	  1741:             movep.l 4(a0),d2      * even offset
01:00001152 07480005        	  1742:             movep.l 5(a0),d3      * odd offset
                            	  1743: 
01:00001156 0C805A5A5678    	  1744:             cmpi.l #$5a5a5678,d0
01:0000115C 66FE            	  1745:             bne.s *
01:0000115E 0C815A5ACCDD    	  1746:             cmpi.l #$5a5aCCDD,d1
01:00001164 66FE            	  1747:             bne.s *
01:00001166 0C8212345678    	  1748:             cmpi.l #$12345678,d2
01:0000116C 66FE            	  1749:             bne.s *
01:0000116E 0C83AABBCCDD    	  1750:             cmpi.l #$AABBCCDD,d3
01:00001174 66FE            	  1751:             bne.s *
                            	  1752: 
01:00001176 4E75            	  1753:             rts
                            	  1754: 
                            	  1755: 
                            	  1756: 
                            	  1757: *-----------------------------------------------------------
                            	  1758: *-----------------------------------------------------------
                            	  1759: * OPCODE : BOOL_I
                            	  1760: *-----------------------------------------------------------
                            	  1761: *-----------------------------------------------------------
                            	  1762: op_BOOL_I:
                            	  1763: 
                            	  1764: *     Dn -- BYTE
01:00001178 203C12345678    	  1765:             move.l #$12345678,d0
01:0000117E 44FC000F        	  1766:             move.w #$000F,CCR          * pre-set Flags
01:00001182 000000FF        	  1767:             ori.b  #$FF,d0
01:00001186 0A00005A        	  1768:             eori.b #$5A,d0
01:0000118A 020000F0        	  1769:             andi.b #$F0,d0
01:0000118E 69FE            	  1770:             bvs.s *                       * Check V,C are cleared
01:00001190 65FE            	  1771:             bcs.s *
01:00001192 6AFE            	  1772:             bpl.s *                       * Verify if N flag is set
01:00001194 4200            	  1773:             andi.b #$00,d0
01:00001196 6BFE            	  1774:             bmi.s *                       * Verify if N flag is cleared
01:00001198 66FE            	  1775:             bne.s *                       * Verify if Z flag is set
                            	  1776: 
                            	  1777: *     Dn -- WORD
01:0000119A 223C12345678    	  1778:             move.l #$12345678,d1
01:000011A0 44FC000F        	  1779:             move.w #$000F,CCR          * pre-set Flags
01:000011A4 0041FFFF        	  1780:             ori.w  #$FFFF,d1
01:000011A8 0A415A5A        	  1781:             eori.w #$5A5A,d1
01:000011AC 0241F0F0        	  1782:             andi.w #$F0F0,d1
01:000011B0 69FE            	  1783:             bvs.s *                       * Check V,C are cleared
01:000011B2 65FE            	  1784:             bcs.s *
01:000011B4 6AFE            	  1785:             bpl.s *                       * Verify if N flag is set
01:000011B6 4241            	  1786:             andi.w #$0000,d1
01:000011B8 6BFE            	  1787:             bmi.s *                       * Verify if N flag is cleared
01:000011BA 66FE            	  1788:             bne.s *                       * Verify if Z flag is set
                            	  1789: 
                            	  1790: *     Dn -- LONG
01:000011BC 243C12345678    	  1791:             move.l #$12345678,d2
01:000011C2 44FC000F        	  1792:             move.w #$000F,CCR          * pre-set Flags
01:000011C6 0082FFFFFFFF    	  1793:             ori.l  #$FFFFFFFF,d2
01:000011CC 0A825A5A5A5A    	  1794:             eori.l #$5A5A5A5A,d2
01:000011D2 0282F0F0F0F0    	  1795:             andi.l #$F0F0F0F0,d2
01:000011D8 69FE            	  1796:             bvs.s *                       * Check V,C are cleared
01:000011DA 65FE            	  1797:             bcs.s *
01:000011DC 6AFE            	  1798:             bpl.s *                       * Verify if N flag is set
01:000011DE 4282            	  1799:             andi.l #$00000000,d2
01:000011E0 6BFE            	  1800:             bmi.s *                       * Verify if N flag is cleared
01:000011E2 66FE            	  1801:             bne.s *                       * Verify if Z flag is set
                            	  1802: 
                            	  1803: 
                            	  1804: *     (An) -- BYTE
01:000011E4 307C0100        	  1805:             move.l #$00000100,a0
01:000011E8 20BC12345678    	  1806:             move.l #$12345678,(a0)
01:000011EE 44FC000F        	  1807:             move.w #$000F,CCR          * pre-set Flags
01:000011F2 001000FF        	  1808:             ori.b  #$FF,(a0)
01:000011F6 0A10005A        	  1809:             eori.b #$5A,(a0)
01:000011FA 021000F0        	  1810:             andi.b #$F0,(a0)
01:000011FE 69FE            	  1811:             bvs.s *                       * Check V,C are cleared
01:00001200 65FE            	  1812:             bcs.s *
01:00001202 6AFE            	  1813:             bpl.s *                       * Verify if N flag is set
01:00001204 4210            	  1814:             andi.b #$00,(a0)
01:00001206 6BFE            	  1815:             bmi.s *                       * Verify if N flag is cleared
01:00001208 66FE            	  1816:             bne.s *                       * Verify if Z flag is set
01:0000120A 4A10            	  1817:             cmpi.b #$00,(a0)
01:0000120C 66FE            	  1818:             bne.s *                       * Verify if Z flag is set
                            	  1819: 
                            	  1820: *     (An) -- WORD
01:0000120E 20BC12345678    	  1821:             move.l #$12345678,(a0)
01:00001214 44FC000F        	  1822:             move.w #$000F,CCR          * pre-set Flags
01:00001218 0050FFFF        	  1823:             ori.w  #$FFFF,(a0)
01:0000121C 0A505A5A        	  1824:             eori.w #$5A5A,(a0)
01:00001220 0250F0F0        	  1825:             andi.w #$F0F0,(a0)
01:00001224 69FE            	  1826:             bvs.s *                       * Check V,C are cleared
01:00001226 65FE            	  1827:             bcs.s *
01:00001228 6AFE            	  1828:             bpl.s *                       * Verify if N flag is set
01:0000122A 4250            	  1829:             andi.w #$0000,(a0)
01:0000122C 6BFE            	  1830:             bmi.s *                       * Verify if N flag is cleared
01:0000122E 66FE            	  1831:             bne.s *                       * Verify if Z flag is set
01:00001230 4A50            	  1832:             cmpi.w #$00,(a0)
01:00001232 66FE            	  1833:             bne.s *                       * Verify if Z flag is set
                            	  1834: 
                            	  1835: *     (An) -- LONG
01:00001234 20BC12345678    	  1836:             move.l #$12345678,(a0)
01:0000123A 44FC000F        	  1837:             move.w #$000F,CCR          * pre-set Flags
01:0000123E 0090FFFFFFFF    	  1838:             ori.l  #$FFFFFFFF,(a0)
01:00001244 0A905A5A5A5A    	  1839:             eori.l #$5A5A5A5A,(a0)
01:0000124A 0290F0F0F0F0    	  1840:             andi.l #$F0F0F0F0,(a0)
01:00001250 69FE            	  1841:             bvs.s *                       * Check V,C are cleared
01:00001252 65FE            	  1842:             bcs.s *
01:00001254 6AFE            	  1843:             bpl.s *                       * Verify if N flag is set
01:00001256 4290            	  1844:             andi.l #$00000000,(a0)
01:00001258 6BFE            	  1845:             bmi.s *                       * Verify if N flag is cleared
01:0000125A 66FE            	  1846:             bne.s *                       * Verify if Z flag is set
01:0000125C 4A90            	  1847:             cmpi.l #$00,(a0)
01:0000125E 66FE            	  1848:             bne.s *                       * Verify if Z flag is set
                            	  1849: 
                            	  1850: 
                            	  1851: 
                            	  1852: *     (An)+ -- BYTE
01:00001260 307C0100        	  1853:             move.l #$00000100,a0
01:00001264 20BC00A5FF88    	  1854:             move.l #$00A5FF88,(a0)
01:0000126A 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
01:0000126E 001800F5        	  1857:             ori.b  #$F5,(a0)+
01:00001272 6AFE            	  1858:             bpl.s *                       * Verify if N flag is set
01:00001274 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
01:00001276 4618            	  1861:             eori.b #$FF,(a0)+
01:00001278 6BFE            	  1862:             bmi.s *                       * Verify if N flag is cleared
01:0000127A 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
01:0000127C 021800AA        	  1865:             andi.b #$AA,(a0)+
01:00001280 6AFE            	  1866:             bpl.s *                       * Verify if N flag is set
01:00001282 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
01:00001284 307C0100        	  1869:             move.l #$00000100,a0
01:00001288 0C90F55AAA88    	  1870:             cmpi.l #$F55AAA88,(a0)
01:0000128E 66FE            	  1871:             bne.s *                       * Verify if Z flag is set
                            	  1872: 
                            	  1873: 
                            	  1874: *     (An)+ -- WORD
01:00001290 307C0100        	  1875:             move.l #$00000100,a0
01:00001294 327C0104        	  1876:             move.l #$00000104,a1
01:00001298 20BC00005A5A    	  1877:             move.l #$00005a5a,(a0)
01:0000129E 22BC12345678    	  1878:             move.l #$12345678,(a1)
01:000012A4 44FC000F        	  1879:             move.w #$000F,CCR          * pre-set Flags
                            	  1880: 
01:000012A8 00585678        	  1881:             ori.w  #$5678,(a0)+
01:000012AC 6BFE            	  1882:             bmi.s *                       * Verify if N flag is cleared
01:000012AE 67FE            	  1883:             beq.s *                       * Verify if Z flag is cleared
                            	  1884: 
01:000012B0 4658            	  1885:             eori.w #$FFFF,(a0)+
01:000012B2 6AFE            	  1886:             bpl.s *                       * Verify if N flag is set
01:000012B4 67FE            	  1887:             beq.s *                       * Verify if Z flag is cleared
                            	  1888: 
01:000012B6 0258A55A        	  1889:             andi.w #$A55A,(a0)+
01:000012BA 6BFE            	  1890:             bmi.s *                       * Verify if N flag is cleared
01:000012BC 67FE            	  1891:             beq.s *                       * Verify if Z flag is cleared
                            	  1892: 
01:000012BE 307C0100        	  1893:             move.l #$00000100,a0
01:000012C2 0C905678A5A5    	  1894:             cmpi.l #$5678a5a5,(a0)
01:000012C8 307C0104        	  1895:             move.l #$00000104,a0
01:000012CC 0C9000105678    	  1896:             cmpi.l #$00105678,(a0)
01:000012D2 66FE            	  1897:             bne.s *                       * Verify if Z flag is set
                            	  1898: 
                            	  1899: *     (An)+ -- LONG
01:000012D4 307C0100        	  1900:             move.l #$00000100,a0
01:000012D8 4298            	  1901:             move.l #$00000000,(a0)+
01:000012DA 20FC5A5A5A5A    	  1902:             move.l #$5a5a5a5a,(a0)+
01:000012E0 20FCFFFFFFFF    	  1903:             move.l #$FFFFFFFF,(a0)+
01:000012E6 307C0100        	  1904:             move.l #$00000100,a0
01:000012EA 44FC000F        	  1905:             move.w #$000F,CCR          * pre-set Flags
                            	  1906: 
01:000012EE 009812345678    	  1907:             ori.l  #$12345678,(a0)+
01:000012F4 6BFE            	  1908:             bmi.s *                       * Verify if N flag is cleared
01:000012F6 67FE            	  1909:             beq.s *                       * Verify if Z flag is cleared
                            	  1910: 
01:000012F8 4698            	  1911:             eori.l #$FFFFFFFF,(a0)+
01:000012FA 6AFE            	  1912:             bpl.s *                       * Verify if N flag is set
01:000012FC 67FE            	  1913:             beq.s *                       * Verify if Z flag is cleared
                            	  1914: 
01:000012FE 0298A5A5A55A    	  1915:             andi.l #$A5A5A55A,(a0)+
01:00001304 6AFE            	  1916:             bpl.s *                       * Verify if N flag is set
01:00001306 67FE            	  1917:             beq.s *                       * Verify if Z flag is cleared
                            	  1918: 
01:00001308 307C0100        	  1919:             move.l #$00000100,a0
01:0000130C 0C9812345678    	  1920:             cmpi.l #$12345678,(a0)+
01:00001312 0C98A5A5A5A5    	  1921:             cmpi.l #$a5a5a5a5,(a0)+
01:00001318 0C98A5A5A55A    	  1922:             cmpi.l #$a5a5a55a,(a0)+
01:0000131E 66FE            	  1923:             bne.s *                       * Verify if Z flag is set
                            	  1924: 
01:00001320 4E75            	  1925:             rts
                            	  1926: 
                            	  1927: 
                            	  1928: *-----------------------------------------------------------
                            	  1929: *-----------------------------------------------------------
                            	  1930: * OPCODE : BSR
                            	  1931: *-----------------------------------------------------------
                            	  1932: *-----------------------------------------------------------
                            	  1933: 
                            	  1934: 
01:00001322 223C11111111    	  1935: BSR_CLOSE1:     move.l #$11111111,d1
01:00001328 4E75            	  1936:                 rts
                            	  1937: 
                            	  1938: 
                            	  1939: 
01:0000132A 61F6            	  1940: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:0000132C 612A            	  1941:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:0000132E 6100EEF0        	  1942:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:00001332 61001466        	  1943:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1944: 
01:00001336 0C8111111111    	  1945:                 cmpi.l #$11111111,d1
01:0000133C 66FE            	  1946:                 bne.s *
01:0000133E 0C8222222222    	  1947:                 cmpi.l #$22222222,d2
01:00001344 66FE            	  1948:                 bne.s *
01:00001346 0C8333333333    	  1949:                 cmpi.l #$33333333,d3
01:0000134C 66FE            	  1950:                 bne.s *
01:0000134E 0C8444444444    	  1951:                 cmpi.l #$44444444,d4
01:00001354 66FE            	  1952:                 bne.s *
                            	  1953: 
01:00001356 4E75            	  1954:                 rts
                            	  1955: 
                            	  1956: 
01:00001358 243C22222222    	  1957: BSR_CLOSE2:     move.l #$22222222,d2
01:0000135E 4E75            	  1958:                 rts
                            	  1959: 
                            	  1960: *-----------------------------------------------------------
                            	  1961: *-----------------------------------------------------------
                            	  1962: * OPCODE : op_CMP_I
                            	  1963: *-----------------------------------------------------------
                            	  1964: *-----------------------------------------------------------
                            	  1965: op_CMP_I:
                            	  1966: 
01:00001360 307C0100        	  1967:             move.l #$00000100,a0
01:00001364 20BC00000100    	  1968:             move.l #$00000100,(a0)
                            	  1969: 
                            	  1970: *     REGISTER - BYTE
01:0000136A 7080            	  1971:             move.l #$FFFFFF80,d0
01:0000136C 0C000080        	  1972:             cmpi.b #$80,d0
01:00001370 66FE            	  1973:             bne.s *                       * Check Z Flag  beq/bne
01:00001372 6BFE            	  1974:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001374 65FE            	  1975:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001376 69FE            	  1976:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1977: 
01:00001378 223CFFFFF000    	  1978:             move.l #$FFFFF000,d1
01:0000137E 4A01            	  1979:             cmpi.b #$00,d1
01:00001380 66FE            	  1980:             bne.s *                       * Check Z Flag  beq/bne
01:00001382 6BFE            	  1981:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001384 65FE            	  1982:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001386 69FE            	  1983:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1984: 
01:00001388 7481D442        	  1985:             move.l #$FFFFFF02,d2
01:0000138C 0C0200FF        	  1986:             cmpi.b #$FF,d2
01:00001390 67FE            	  1987:             beq.s *                       * Check Z Flag  beq/bne
01:00001392 6BFE            	  1988:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001394 64FE            	  1989:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001396 69FE            	  1990:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1991: 
01:00001398 263CFFFFFF7F    	  1992:             move.l #$FFFFFF7F,d3
01:0000139E 0C0300FF        	  1993:             cmpi.b #$FF,d3
01:000013A2 67FE            	  1994:             beq.s *                       * Check Z Flag  beq/bne
01:000013A4 6AFE            	  1995:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013A6 64FE            	  1996:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013A8 68FE            	  1997:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1998: 
                            	  1999: 
                            	  2000: *     REGISTER - WORD
01:000013AA 203CFFFF8000    	  2001:             move.l #$FFFF8000,d0
01:000013B0 0C408000        	  2002:             cmpi.w #$8000,d0
01:000013B4 66FE            	  2003:             bne.s *                       * Check Z Flag  beq/bne
01:000013B6 6BFE            	  2004:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013B8 65FE            	  2005:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013BA 69FE            	  2006:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2007: 
01:000013BC 223CFFF00000    	  2008:             move.l #$FFF00000,d1
01:000013C2 4A41            	  2009:             cmpi.w #$0000,d1
01:000013C4 66FE            	  2010:             bne.s *                       * Check Z Flag  beq/bne
01:000013C6 6BFE            	  2011:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013C8 65FE            	  2012:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013CA 69FE            	  2013:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2014: 
01:000013CC 243CFFFF0002    	  2015:             move.l #$FFFF0002,d2
01:000013D2 0C42FFFF        	  2016:             cmpi.w #$FFFF,d2
01:000013D6 67FE            	  2017:             beq.s *                       * Check Z Flag  beq/bne
01:000013D8 6BFE            	  2018:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013DA 64FE            	  2019:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013DC 69FE            	  2020:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2021: 
01:000013DE 263CFFFF7FFF    	  2022:             move.l #$FFFF7FFF,d3
01:000013E4 0C43FFFF        	  2023:             cmpi.w #$FFFF,d3
01:000013E8 67FE            	  2024:             beq.s *                       * Check Z Flag  beq/bne
01:000013EA 6AFE            	  2025:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013EC 64FE            	  2026:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013EE 68FE            	  2027:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2028: 
                            	  2029: *     REGISTER - LONG
01:000013F0 203C80000000    	  2030:             move.l #$80000000,d0
01:000013F6 0C8080000000    	  2031:             cmpi.l #$80000000,d0
01:000013FC 66FE            	  2032:             bne.s *                       * Check Z Flag  beq/bne
01:000013FE 6BFE            	  2033:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001400 65FE            	  2034:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001402 69FE            	  2035:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2036: 
01:00001404 7200            	  2037:             moveq  #$00000000,d1
01:00001406 4A81            	  2038:             cmpi.l #$00000000,d1
01:00001408 66FE            	  2039:             bne.s *                       * Check Z Flag  beq/bne
01:0000140A 6BFE            	  2040:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000140C 65FE            	  2041:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000140E 69FE            	  2042:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2043: 
01:00001410 7402            	  2044:             moveq  #$00000002,d2
01:00001412 0C82FFFFFFFF    	  2045:             cmpi.l #$FFFFFFFF,d2
01:00001418 67FE            	  2046:             beq.s *                       * Check Z Flag  beq/bne
01:0000141A 6BFE            	  2047:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000141C 64FE            	  2048:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000141E 69FE            	  2049:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2050: 
01:00001420 263C7FFFFFFF    	  2051:             move.l #$7FFFFFFF,d3
01:00001426 0C83FFFFFFFF    	  2052:             cmpi.l #$FFFFFFFF,d3
01:0000142C 67FE            	  2053:             beq.s *                       * Check Z Flag  beq/bne
01:0000142E 6AFE            	  2054:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001430 64FE            	  2055:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001432 68FE            	  2056:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: *     EA=x(An,Dn) - BYTE
01:00001434 307C0100        	  2062:             move.l #$00000100,a0
01:00001438 7E04            	  2063:             moveq  #$00000004,d7
                            	  2064: 
01:0000143A 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
01:00001442 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
01:0000144A 0C300080700F    	  2067:             cmpi.b #$80,15(a0,d7)
01:00001450 66FE            	  2068:             bne.s *                       * Check Z Flag  beq/bne
01:00001452 6BFE            	  2069:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001454 65FE            	  2070:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001456 69FE            	  2071:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2072: 
01:00001458 21BCFFFFF000700C	  2073:             move.l #$FFFFF000,12(a0,d7)
01:00001460 4A30700F        	  2074:             cmpi.b #$00,15(a0,d7)
01:00001464 66FE            	  2075:             bne.s *                       * Check Z Flag  beq/bne
01:00001466 6BFE            	  2076:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001468 65FE            	  2077:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000146A 69FE            	  2078:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2079: 
01:0000146C 21BCFFFFFF02700C	  2080:             move.l #$FFFFFF02,12(a0,d7)
01:00001474 0C3000FF700F    	  2081:             cmpi.b #$FF,15(a0,d7)
01:0000147A 67FE            	  2082:             beq.s *                       * Check Z Flag  beq/bne
01:0000147C 6BFE            	  2083:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000147E 64FE            	  2084:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001480 69FE            	  2085:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2086: 
01:00001482 21BCFFFFFF7F700C	  2087:             move.l #$FFFFFF7F,12(a0,d7)
01:0000148A 0C3000FF700F    	  2088:             cmpi.b #$FF,15(a0,d7)
01:00001490 67FE            	  2089:             beq.s *                       * Check Z Flag  beq/bne
01:00001492 6AFE            	  2090:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001494 64FE            	  2091:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001496 68FE            	  2092:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2093: 
                            	  2094: 
                            	  2095: *     EA=x(An,Dn) - WORD
01:00001498 21BCFFFF8000700C	  2096:             move.l #$FFFF8000,12(a0,d7)
01:000014A0 0C708000700E    	  2097:             cmpi.w #$8000,14(a0,d7)
01:000014A6 66FE            	  2098:             bne.s *                       * Check Z Flag  beq/bne
01:000014A8 6BFE            	  2099:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014AA 65FE            	  2100:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014AC 69FE            	  2101:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2102: 
01:000014AE 21BCFFF00000700C	  2103:             move.l #$FFF00000,12(a0,d7)
01:000014B6 4A70700E        	  2104:             cmpi.w #$0000,14(a0,d7)
01:000014BA 66FE            	  2105:             bne.s *                       * Check Z Flag  beq/bne
01:000014BC 6BFE            	  2106:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014BE 65FE            	  2107:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014C0 69FE            	  2108:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2109: 
01:000014C2 21BCFFFF0002700C	  2110:             move.l #$FFFF0002,12(a0,d7)
01:000014CA 0C70FFFF700E    	  2111:             cmpi.w #$FFFF,14(a0,d7)
01:000014D0 67FE            	  2112:             beq.s *                       * Check Z Flag  beq/bne
01:000014D2 6BFE            	  2113:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014D4 64FE            	  2114:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014D6 69FE            	  2115:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2116: 
01:000014D8 21BCFFFF7FFF700C	  2117:             move.l #$FFFF7FFF,12(a0,d7)
01:000014E0 0C70FFFF700E    	  2118:             cmpi.w #$FFFF,14(a0,d7)
01:000014E6 67FE            	  2119:             beq.s *                       * Check Z Flag  beq/bne
01:000014E8 6AFE            	  2120:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014EA 64FE            	  2121:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014EC 68FE            	  2122:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2123: 
                            	  2124: *     EA=x(An,Dn) - LONG
01:000014EE 21BC80000000700C	  2125:             move.l #$80000000,12(a0,d7)
01:000014F6 0CB080000000700C	  2126:             cmpi.l #$80000000,12(a0,d7)
01:000014FE 66FE            	  2127:             bne.s *                       * Check Z Flag  beq/bne
01:00001500 6BFE            	  2128:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001502 65FE            	  2129:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001504 69FE            	  2130:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2131: 
01:00001506 42B0700C        	  2132:             move.l #$00000000,12(a0,d7)
01:0000150A 4AB0700C        	  2133:             cmpi.l #$00000000,12(a0,d7)
01:0000150E 66FE            	  2134:             bne.s *                       * Check Z Flag  beq/bne
01:00001510 6BFE            	  2135:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001512 65FE            	  2136:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001514 69FE            	  2137:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2138: 
01:00001516 21BC00000002700C	  2139:             move.l #$00000002,12(a0,d7)
01:0000151E 0CB0FFFFFFFF700C	  2140:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001526 67FE            	  2141:             beq.s *                       * Check Z Flag  beq/bne
01:00001528 6BFE            	  2142:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000152A 64FE            	  2143:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000152C 69FE            	  2144:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2145: 
01:0000152E 21BC7FFFFFFF700C	  2146:             move.l #$7FFFFFFF,12(a0,d7)
01:00001536 0CB0FFFFFFFF700C	  2147:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:0000153E 67FE            	  2148:             beq.s *                       * Check Z Flag  beq/bne
01:00001540 6AFE            	  2149:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001542 64FE            	  2150:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001544 68FE            	  2151:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2152: 
                            	  2153: 
                            	  2154: 
                            	  2155: 
01:00001546 4E75            	  2156:             rts
                            	  2157: 
                            	  2158: 
                            	  2159: 
                            	  2160: *-----------------------------------------------------------
                            	  2161: *-----------------------------------------------------------
                            	  2162: * OPCODE : ADD_I
                            	  2163: *-----------------------------------------------------------
                            	  2164: *-----------------------------------------------------------
                            	  2165: op_ADD_I:
                            	  2166: 
                            	  2167: *     EA = Dn  - Byte
01:00001548 203C12345678    	  2168:             move.l #$12345678,d0      * populate test data
01:0000154E 06000000        	  2169:             addi.b #0,d0
01:00001552 67FE            	  2170:             beq.s *                       * Check Z Flag  beq/bne
01:00001554 6BFE            	  2171:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001556 65FE            	  2172:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001558 69FE            	  2173:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000155A 06000010        	  2174:             addi.b #$10,d0
01:0000155E 67FE            	  2175:             beq.s *                       * Check Z Flag  beq/bne
01:00001560 6AFE            	  2176:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001562 65FE            	  2177:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001564 68FE            	  2178:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001566 060000A5        	  2179:             addi.b #$A5,d0
01:0000156A 67FE            	  2180:             beq.s *                       * Check Z Flag  beq/bne
01:0000156C 6BFE            	  2181:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000156E 64FE            	  2182:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001570 68FE            	  2183:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001572 0C00002D        	  2184:             cmpi.b #$2D,d0
01:00001576 66FE            	  2185:             bne.s *                       * Check Z Flag  beq/bne
                            	  2186: 
                            	  2187: *     EA = Dn  - WORD
01:00001578 203C12345678    	  2188:             move.l #$12345678,d0      * populate test data
01:0000157E 06400000        	  2189:             addi.w #0,d0
01:00001582 67FE            	  2190:             beq.s *                       * Check Z Flag  beq/bne
01:00001584 6BFE            	  2191:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001586 65FE            	  2192:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001588 69FE            	  2193:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000158A 06407000        	  2194:             addi.w #$7000,d0
01:0000158E 67FE            	  2195:             beq.s *                       * Check Z Flag  beq/bne
01:00001590 6AFE            	  2196:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001592 65FE            	  2197:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001594 68FE            	  2198:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001596 0640A55A        	  2199:             addi.w #$A55A,d0
01:0000159A 67FE            	  2200:             beq.s *                       * Check Z Flag  beq/bne
01:0000159C 6BFE            	  2201:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000159E 64FE            	  2202:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015A0 68FE            	  2203:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015A2 0C406BD2        	  2204:             cmpi.w #$6BD2,d0
01:000015A6 66FE            	  2205:             bne.s *                       * Check Z Flag  beq/bne
                            	  2206: 
                            	  2207: *     EA = Dn  - LONG
01:000015A8 203C12345678    	  2208:             move.l #$12345678,d0      * populate test data
01:000015AE 068000000000    	  2209:             addi.l #0,d0
01:000015B4 67FE            	  2210:             beq.s *                       * Check Z Flag  beq/bne
01:000015B6 6BFE            	  2211:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015B8 65FE            	  2212:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015BA 69FE            	  2213:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015BC 0680F0000000    	  2214:             addi.l #$F0000000,d0
01:000015C2 67FE            	  2215:             beq.s *                       * Check Z Flag  beq/bne
01:000015C4 6BFE            	  2216:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015C6 64FE            	  2217:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015C8 69FE            	  2218:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015CA 0680855AA55A    	  2219:             addi.l #$855AA55A,d0
01:000015D0 67FE            	  2220:             beq.s *                       * Check Z Flag  beq/bne
01:000015D2 6AFE            	  2221:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015D4 65FE            	  2222:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015D6 69FE            	  2223:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015D8 0680A0000000    	  2224:             addi.l #$A0000000,d0
01:000015DE 68FE            	  2225:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015E0 0C80278EFBD2    	  2226:             cmpi.l #$278EFBD2,d0
01:000015E6 66FE            	  2227:             bne.s *                       * Check Z Flag  beq/bne
                            	  2228: 
                            	  2229: 
                            	  2230: 
                            	  2231: *     EA = x.L  - Byte
01:000015E8 207C0000F100    	  2232:             move.l #$F100,a0      * populate test data
01:000015EE 20BC12345678    	  2233:             move.l #$12345678,(a0)     * populate test data
01:000015F4 063900000000F103	  2234:             addi.b #0,$F103
01:000015FC 67FE            	  2235:             beq.s *                       * Check Z Flag  beq/bne
01:000015FE 6BFE            	  2236:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001600 65FE            	  2237:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001602 69FE            	  2238:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001604 063900100000F103	  2239:             addi.b #$10,$F103
01:0000160C 67FE            	  2240:             beq.s *                       * Check Z Flag  beq/bne
01:0000160E 6AFE            	  2241:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001610 65FE            	  2242:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001612 68FE            	  2243:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001614 063900A50000F103	  2244:             addi.b #$A5,$F103
01:0000161C 67FE            	  2245:             beq.s *                       * Check Z Flag  beq/bne
01:0000161E 6BFE            	  2246:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001620 64FE            	  2247:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001622 68FE            	  2248:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001624 0C39002D0000F103	  2249:             cmpi.b #$2D,$F103
01:0000162C 66FE            	  2250:             bne.s *                       * Check Z Flag  beq/bne
                            	  2251: 
                            	  2252: *     EA = x.L- WORD
01:0000162E 207C0000F100    	  2253:             move.l #$F100,a0      * populate test data
01:00001634 20BC12345678    	  2254:             move.l #$12345678,(a0)     * populate test data
01:0000163A 067900000000F100	  2255:             addi.w #0,$F100
01:00001642 67FE            	  2256:             beq.s *                       * Check Z Flag  beq/bne
01:00001644 6BFE            	  2257:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001646 65FE            	  2258:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001648 69FE            	  2259:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000164A 067970000000F100	  2260:             addi.w #$7000,$F100
01:00001652 67FE            	  2261:             beq.s *                       * Check Z Flag  beq/bne
01:00001654 6AFE            	  2262:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001656 65FE            	  2263:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001658 68FE            	  2264:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000165A 0679A55A0000F100	  2265:             addi.w #$A55A,$F100
01:00001662 67FE            	  2266:             beq.s *                       * Check Z Flag  beq/bne
01:00001664 6BFE            	  2267:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001666 64FE            	  2268:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001668 68FE            	  2269:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000166A 0C79278E0000F100	  2270:             cmpi.w #$278E,$F100
01:00001672 66FE            	  2271:             bne.s *                       * Check Z Flag  beq/bne
                            	  2272: 
                            	  2273: *     EA = x.L- LONG
01:00001674 23FC123456780000	  2274:             move.l #$12345678,$F100  * populate test data
01:0000167C F100
01:0000167E 06B9000000000000	  2275:             addi.l #0,$F100
01:00001686 F100
01:00001688 67FE            	  2276:             beq.s *                       * Check Z Flag  beq/bne
01:0000168A 6BFE            	  2277:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000168C 65FE            	  2278:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000168E 69FE            	  2279:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001690 06B9F00000000000	  2280:             addi.l #$F0000000,$F100
01:00001698 F100
01:0000169A 67FE            	  2281:             beq.s *                       * Check Z Flag  beq/bne
01:0000169C 6BFE            	  2282:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000169E 64FE            	  2283:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016A0 69FE            	  2284:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016A2 06B9855AA55A0000	  2285:             addi.l #$855AA55A,$F100
01:000016AA F100
01:000016AC 67FE            	  2286:             beq.s *                       * Check Z Flag  beq/bne
01:000016AE 6AFE            	  2287:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016B0 65FE            	  2288:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016B2 69FE            	  2289:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016B4 06B9A00000000000	  2290:             addi.l #$A0000000,$F100
01:000016BC F100
01:000016BE 68FE            	  2291:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016C0 0CB9278EFBD20000	  2292:             cmpi.l #$278EFBD2,$F100
01:000016C8 F100
01:000016CA 66FE            	  2293:             bne.s *                       * Check Z Flag  beq/bne
                            	  2294: 
01:000016CC 4E75            	  2295:             rts
                            	  2296: 
                            	  2297: 
                            	  2298: *-----------------------------------------------------------
                            	  2299: *-----------------------------------------------------------
                            	  2300: * OPCODE : SUB_I
                            	  2301: *-----------------------------------------------------------
                            	  2302: *-----------------------------------------------------------
                            	  2303: op_SUB_I:
                            	  2304: 
                            	  2305: *     EA = Dn  - Byte
01:000016CE 203C12345678    	  2306:             move.l #$12345678,d0      * populate test data
01:000016D4 04000000        	  2307:             subi.b #0,d0
01:000016D8 67FE            	  2308:             beq.s *                       * Check Z Flag  beq/bne
01:000016DA 6BFE            	  2309:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016DC 65FE            	  2310:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016DE 69FE            	  2311:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016E0 04000010        	  2312:             subi.b #$10,d0
01:000016E4 67FE            	  2313:             beq.s *                       * Check Z Flag  beq/bne
01:000016E6 6BFE            	  2314:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016E8 65FE            	  2315:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016EA 69FE            	  2316:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016EC 040000A5        	  2317:             subi.b #$A5,d0
01:000016F0 67FE            	  2318:             beq.s *                       * Check Z Flag  beq/bne
01:000016F2 6AFE            	  2319:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016F4 64FE            	  2320:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016F6 68FE            	  2321:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016F8 0C0000C3        	  2322:             cmpi.b #$C3,d0
01:000016FC 66FE            	  2323:             bne.s *                       * Check Z Flag  beq/bne
                            	  2324: 
                            	  2325: *     EA = Dn  - WORD
01:000016FE 203C12345678    	  2326:             move.l #$12345678,d0      * populate test data
01:00001704 04400000        	  2327:             subi.w #0,d0
01:00001708 67FE            	  2328:             beq.s *                       * Check Z Flag  beq/bne
01:0000170A 6BFE            	  2329:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000170C 65FE            	  2330:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000170E 69FE            	  2331:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001710 04407000        	  2332:             subi.w #$7000,d0
01:00001714 67FE            	  2333:             beq.s *                       * Check Z Flag  beq/bne
01:00001716 6AFE            	  2334:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001718 64FE            	  2335:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000171A 69FE            	  2336:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000171C 0440A55A        	  2337:             subi.w #$A55A,d0
01:00001720 67FE            	  2338:             beq.s *                       * Check Z Flag  beq/bne
01:00001722 6BFE            	  2339:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001724 65FE            	  2340:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001726 69FE            	  2341:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001728 0C40411E        	  2342:             cmpi.w #$411E,d0
01:0000172C 66FE            	  2343:             bne.s *                       * Check Z Flag  beq/bne
                            	  2344: 
                            	  2345: *     EA = Dn  - LONG
01:0000172E 203C12345678    	  2346:             move.l #$12345678,d0      * populate test data
01:00001734 048000000000    	  2347:             subi.l #0,d0
01:0000173A 67FE            	  2348:             beq.s *                       * Check Z Flag  beq/bne
01:0000173C 6BFE            	  2349:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000173E 65FE            	  2350:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001740 69FE            	  2351:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001742 0480F0000000    	  2352:             subi.l #$F0000000,d0
01:00001748 67FE            	  2353:             beq.s *                       * Check Z Flag  beq/bne
01:0000174A 6BFE            	  2354:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000174C 64FE            	  2355:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000174E 69FE            	  2356:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001750 0480855AA55A    	  2357:             subi.l #$855AA55A,d0
01:00001756 67FE            	  2358:             beq.s *                       * Check Z Flag  beq/bne
01:00001758 6AFE            	  2359:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000175A 64FE            	  2360:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000175C 68FE            	  2361:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000175E 0480A0000000    	  2362:             subi.l #$A0000000,d0
01:00001764 69FE            	  2363:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001766 0C80FCD9B11E    	  2364:             cmpi.l #$FCD9B11E,d0
01:0000176C 66FE            	  2365:             bne.s *                       * Check Z Flag  beq/bne
                            	  2366: 
                            	  2367: 
                            	  2368: 
                            	  2369: *     EA = x.L  - Byte
01:0000176E 207C0000F100    	  2370:             move.l #$F100,a0      * populate test data
01:00001774 20BC12345678    	  2371:             move.l #$12345678,(a0)     * populate test data
01:0000177A 043900000000F103	  2372:             subi.b #0,$F103
01:00001782 67FE            	  2373:             beq.s *                       * Check Z Flag  beq/bne
01:00001784 6BFE            	  2374:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001786 65FE            	  2375:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001788 69FE            	  2376:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000178A 043900100000F103	  2377:             subi.b #$10,$F103
01:00001792 67FE            	  2378:             beq.s *                       * Check Z Flag  beq/bne
01:00001794 6BFE            	  2379:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001796 65FE            	  2380:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001798 69FE            	  2381:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000179A 043900A50000F103	  2382:             subi.b #$A5,$F103
01:000017A2 67FE            	  2383:             beq.s *                       * Check Z Flag  beq/bne
01:000017A4 6AFE            	  2384:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017A6 64FE            	  2385:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017A8 68FE            	  2386:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017AA 0C3900C30000F103	  2387:             cmpi.b #$C3,$F103
01:000017B2 66FE            	  2388:             bne.s *                       * Check Z Flag  beq/bne
                            	  2389: 
                            	  2390: *     EA = x.L- WORD
01:000017B4 207C0000F100    	  2391:             move.l #$F100,a0      * populate test data
01:000017BA 20BC12345678    	  2392:             move.l #$12345678,(a0)     * populate test data
01:000017C0 047900000000F100	  2393:             subi.w #0,$F100
01:000017C8 67FE            	  2394:             beq.s *                       * Check Z Flag  beq/bne
01:000017CA 6BFE            	  2395:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017CC 65FE            	  2396:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017CE 69FE            	  2397:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017D0 047970000000F100	  2398:             subi.w #$7000,$F100
01:000017D8 67FE            	  2399:             beq.s *                       * Check Z Flag  beq/bne
01:000017DA 6AFE            	  2400:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017DC 64FE            	  2401:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017DE 69FE            	  2402:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017E0 0479A55A0000F100	  2403:             subi.w #$A55A,$F100
01:000017E8 67FE            	  2404:             beq.s *                       * Check Z Flag  beq/bne
01:000017EA 6AFE            	  2405:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017EC 64FE            	  2406:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017EE 69FE            	  2407:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017F0 0C79FCDA0000F100	  2408:             cmpi.w #$FCDA,$F100
01:000017F8 66FE            	  2409:             bne.s *                       * Check Z Flag  beq/bne
                            	  2410: 
                            	  2411: *     EA = x.L- LONG
01:000017FA 23FC123456780000	  2412:             move.l #$12345678,$F100  * populate test data
01:00001802 F100
01:00001804 04B9000000000000	  2413:             subi.l #0,$F100
01:0000180C F100
01:0000180E 67FE            	  2414:             beq.s *                       * Check Z Flag  beq/bne
01:00001810 6BFE            	  2415:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001812 65FE            	  2416:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001814 69FE            	  2417:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001816 04B9F00000000000	  2418:             subi.l #$F0000000,$F100
01:0000181E F100
01:00001820 67FE            	  2419:             beq.s *                       * Check Z Flag  beq/bne
01:00001822 6BFE            	  2420:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001824 64FE            	  2421:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001826 69FE            	  2422:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001828 04B9855AA55A0000	  2423:             subi.l #$855AA55A,$F100
01:00001830 F100
01:00001832 67FE            	  2424:             beq.s *                       * Check Z Flag  beq/bne
01:00001834 6AFE            	  2425:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001836 64FE            	  2426:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001838 68FE            	  2427:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000183A 04B9A00000000000	  2428:             subi.l #$A0000000,$F100
01:00001842 F100
01:00001844 69FE            	  2429:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001846 0CB9FCD9B11E0000	  2430:             cmpi.l #$FCD9B11E,$F100
01:0000184E F100
01:00001850 66FE            	  2431:             bne.s *                       * Check Z Flag  beq/bne
                            	  2432: 
01:00001852 4E75            	  2433:             rts
                            	  2434: 
                            	  2435: 
                            	  2436: 
                            	  2437: *-----------------------------------------------------------
                            	  2438: *-----------------------------------------------------------
                            	  2439: * OPCODE : MOVE
                            	  2440: *-----------------------------------------------------------
                            	  2441: *-----------------------------------------------------------
                            	  2442: op_MOVE:
01:00001854 203C11223344    	  2443:             move.l #$11223344,d0
01:0000185A 223C55667788    	  2444:             move.l #$55667788,d1
01:00001860 243C8899AABB    	  2445:             move.l #$8899aabb,d2
01:00001866 263CCCDDEEFF    	  2446:             move.l #$ccddeeff,d3
01:0000186C 7800            	  2447:             moveq  #$00000000,d4
01:0000186E 7A00            	  2448:             moveq  #$00000000,d5
01:00001870 7C00            	  2449:             moveq  #$00000000,d6
01:00001872 7E00            	  2450:             moveq  #$00000000,d7
01:00001874 207C44332211    	  2451:             move.l #$44332211,a0
01:0000187A 227C88776655    	  2452:             move.l #$88776655,a1
01:00001880 247CBBAA9988    	  2453:             move.l #$bbaa9988,a2
01:00001886 267CFFEEDDCC    	  2454:             move.l #$ffeeddcc,a3
                            	  2455: 
01:0000188C 1800            	  2456:             move.b d0,d4              * BYTE - DATA REGISTER
01:0000188E 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
01:00001890 6BFE            	  2458:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001892 0C8400000044    	  2459:             cmpi.l #$00000044,d4
01:00001898 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
01:0000189A 3A01            	  2462:             move.w d1,d5              * WORD - DATA REGISTER
01:0000189C 67FE            	  2463:             beq.s *                       * Check Z Flag  beq/bne
01:0000189E 6BFE            	  2464:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018A0 0C8500007788    	  2465:             cmpi.l #$00007788,d5
01:000018A6 66FE            	  2466:             bne.s *                       * Check Z Flag  beq/bne
                            	  2467: 
01:000018A8 2C02            	  2468:             move.l d2,d6              * LONG - DATA REGISTER
01:000018AA 67FE            	  2469:             beq.s *                       * Check Z Flag  beq/bne
01:000018AC 6AFE            	  2470:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018AE 0C868899AABB    	  2471:             cmpi.l #$8899aabb,d6
01:000018B4 66FE            	  2472:             bne.s *                       * Check Z Flag  beq/bne
                            	  2473: 
01:000018B6 3A09            	  2474:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:000018B8 67FE            	  2475:             beq.s *                       * Check Z Flag  beq/bne
01:000018BA 6BFE            	  2476:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018BC 0C8500006655    	  2477:             cmpi.l #$00006655,d5
01:000018C2 66FE            	  2478:             bne.s *                       * Check Z Flag  beq/bne
                            	  2479: 
01:000018C4 2C0A            	  2480:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:000018C6 67FE            	  2481:             beq.s *                       * Check Z Flag  beq/bne
01:000018C8 6AFE            	  2482:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018CA 0C86BBAA9988    	  2483:             cmpi.l #$bbaa9988,d6
01:000018D0 66FE            	  2484:             bne.s *                       * Check Z Flag  beq/bne
                            	  2485: 
                            	  2486: 
01:000018D2 3842            	  2487:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018D4 B9C2            	  2488:             cmpa.l d2,a4
01:000018D6 67FE            	  2489:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2490: 
01:000018D8 2A41            	  2491:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018DA BBC1            	  2492:             cmpa.l d1,a5
01:000018DC 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: 
                            	  2496: 
                            	  2497: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2498: 
01:000018DE 203C11223344    	  2499:             move.l #$11223344,d0
01:000018E4 223C00010100    	  2500:             move.l #$00010100,d1
01:000018EA 243C8899AABB    	  2501:             move.l #$8899aabb,d2
01:000018F0 7601            	  2502:             moveq  #$00000001,d3
01:000018F2 7800            	  2503:             moveq  #$00000000,d4
01:000018F4 7A00            	  2504:             moveq  #$00000000,d5
01:000018F6 7C00            	  2505:             moveq  #$00000000,d6
01:000018F8 7E00            	  2506:             moveq  #$00000000,d7
01:000018FA 91C8            	  2507:             move.l #$00000000,a0
01:000018FC 227C00010100    	  2508:             move.l #$00010100,a1
                            	  2509: 
                            	  2510: *     x(An,AL) --> x.L
01:00001902 11BC005A9804    	  2511:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001908 47F09804        	  2512:             lea 4(a0,a1.l),a3
01:0000190C 13F0980400010105	  2513:             move.b 4(a0,a1.l),$00010105
01:00001914 67FE            	  2514:             beq.s *                       * Check Z Flag  beq/bne
01:00001916 6BFE            	  2515:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001918 0C30005A9805    	  2516:             cmpi.b #$5A,5(a0,a1.l)
01:0000191E 66FE            	  2517:             bne.s *                       * Check Z Flag  beq/bne
                            	  2518: 
                            	  2519: *     x.L --> n(An,Dw)
01:00001920 11B9000101051007	  2520: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:00001928 67FE            	  2521:             beq.s *                       * Check Z Flag  beq/bne
01:0000192A 6BFE            	  2522:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000192C 0C30005A1007    	  2523:             cmpi.b #$5A,7(a0,d1.w)
01:00001932 66FE            	  2524:             bne.s *                       * Check Z Flag  beq/bne
                            	  2525: 
                            	  2526: *     x(PC,Ds) --> x.w
01:00001934 11FB30660100    	  2527:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:0000193A 67FE            	  2528:             beq.s *                       * Check Z Flag  beq/bne
01:0000193C 6AFE            	  2529:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000193E 0C3900B900001921	  2530:             cmpi.b #$B9,1+MOVE2
01:00001946 66FE            	  2531:             bne.s *                       * Check Z Flag  beq/bne
                            	  2532: 
                            	  2533: *     #x -->    n(An,AL)
01:00001948 11BC00781007    	  2534:             move.b  #$78,7(a0,d1.w)    * BYTE
01:0000194E 67FE            	  2535:             beq.s *                       * Check Z Flag  beq/bne
01:00001950 6BFE            	  2536:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001952 0C3000781007    	  2537:             cmpi.b #$78,7(a0,d1.w)
01:00001958 66FE            	  2538:             bne.s *                       * Check Z Flag  beq/bne
                            	  2539: 
01:0000195A 203C11223344    	  2540:             move.l #$11223344,d0
01:00001960 223C00010100    	  2541:             move.l #$00010100,d1
01:00001966 243C8899AABB    	  2542:             move.l #$8899aabb,d2
01:0000196C 7602            	  2543:             moveq  #$00000002,d3
01:0000196E 7800            	  2544:             moveq  #$00000000,d4
01:00001970 7A00            	  2545:             moveq  #$00000000,d5
01:00001972 7C00            	  2546:             moveq  #$00000000,d6
01:00001974 7E00            	  2547:             moveq  #$00000000,d7
01:00001976 91C8            	  2548:             move.l #$00000000,a0
01:00001978 227C00010100    	  2549:             move.l #$00010100,a1
                            	  2550: 
                            	  2551: *     x(An,AL) --> x.L
01:0000197E 31BC5A5A9804    	  2552:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:00001984 49F09804        	  2553:             lea 4(a0,a1.l),a4
01:00001988 33F0980400010104	  2554:             move.w 4(a0,a1.l),$00010104
01:00001990 67FE            	  2555:             beq.s *                       * Check Z Flag  beq/bne
01:00001992 6BFE            	  2556:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001994 0C705A5A9804    	  2557:             cmpi.w #$5A5A,4(a0,a1.l)
01:0000199A 66FE            	  2558:             bne.s *                       * Check Z Flag  beq/bne
                            	  2559: 
                            	  2560: *     x.L --> n(An,Dw)
01:0000199C 31B9000101041006	  2561: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000019A4 67FE            	  2562:             beq.s *                       * Check Z Flag  beq/bne
01:000019A6 6BFE            	  2563:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019A8 0C705A5A1006    	  2564:             cmpi.w #$5A5A,6(a0,d1.w)
01:000019AE 66FE            	  2565:             bne.s *                       * Check Z Flag  beq/bne
                            	  2566: 
                            	  2567: *     x(PC,Ds) --> x.w
01:000019B0 31FB30EA0100    	  2568:             move.w  MOVE1(pc,d3),$0100 * WORD
01:000019B6 67FE            	  2569:             beq.s *                       * Check Z Flag  beq/bne
01:000019B8 6BFE            	  2570:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019BA 0C7967FE000019A4	  2571:             cmpi.w #$67FE,8+MOVE1
01:000019C2 66FE            	  2572:             bne.s *                       * Check Z Flag  beq/bne
                            	  2573: 
                            	  2574: *     #x -->    n(An,AL)
01:000019C4 31BC78781006    	  2575:             move.w  #$7878,6(a0,d1.w)    * WORD
01:000019CA 67FE            	  2576:             beq.s *                       * Check Z Flag  beq/bne
01:000019CC 6BFE            	  2577:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019CE 0C7078781006    	  2578:             cmpi.w #$7878,6(a0,d1.w)
01:000019D4 66FE            	  2579:             bne.s *                       * Check Z Flag  beq/bne
                            	  2580: 
                            	  2581: * ---
                            	  2582: 
01:000019D6 203C11223344    	  2583:             move.l #$11223344,d0
01:000019DC 223C00010100    	  2584:             move.l #$00010100,d1
01:000019E2 243C8899AABB    	  2585:             move.l #$8899aabb,d2
01:000019E8 7602            	  2586:             moveq  #$00000002,d3
01:000019EA 7800            	  2587:             moveq  #$00000000,d4
01:000019EC 7A00            	  2588:             moveq  #$00000000,d5
01:000019EE 7C00            	  2589:             moveq  #$00000000,d6
01:000019F0 7E00            	  2590:             moveq  #$00000000,d7
01:000019F2 91C8            	  2591:             move.l #$00000000,a0
01:000019F4 227C00010100    	  2592:             move.l #$00010100,a1
                            	  2593: 
                            	  2594: *     x(An,AL) --> x.L
01:000019FA 21BC5A5A12349804	  2595:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:00001A02 49F09804        	  2596:             lea 4(a0,a1.l),a4
01:00001A06 23F0980400010104	  2597:             move.l 4(a0,a1.l),$00010104
01:00001A0E 67FE            	  2598:             beq.s *                       * Check Z Flag  beq/bne
01:00001A10 6BFE            	  2599:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A12 0CB05A5A12349804	  2600:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001A1A 66FE            	  2601:             bne.s *                       * Check Z Flag  beq/bne
                            	  2602: 
                            	  2603: *     x.L --> n(An,Dw)
01:00001A1C 21B9000101041006	  2604: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:00001A24 67FE            	  2605:             beq.s *                       * Check Z Flag  beq/bne
01:00001A26 6BFE            	  2606:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A28 0CB05A5A12341006	  2607:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001A30 66FE            	  2608:             bne.s *                       * Check Z Flag  beq/bne
                            	  2609: 
                            	  2610: *     x(PC,Ds) --> x.w
01:00001A32 21FB30E80100    	  2611:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001A38 67FE            	  2612:             beq.s *                       * Check Z Flag  beq/bne
01:00001A3A 6BFE            	  2613:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A3C 0CB967FE6BFE0000	  2614:             cmpi.l #$67FE6BFE,8+MOVE3
01:00001A44 1A24
01:00001A46 66FE            	  2615:             bne.s *                       * Check Z Flag  beq/bne
                            	  2616: 
                            	  2617: *     #x -->    n(An,AL)
01:00001A48 21BC787823231006	  2618:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001A50 67FE            	  2619:             beq.s *                       * Check Z Flag  beq/bne
01:00001A52 6BFE            	  2620:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A54 0CB0787823231006	  2621:             cmpi.l #$78782323,6(a0,d1.w)
01:00001A5C 66FE            	  2622:             bne.s *                       * Check Z Flag  beq/bne
                            	  2623: 
                            	  2624: 
01:00001A5E 4E75            	  2625:          rts
                            	  2626: 
                            	  2627: 
                            	  2628: *-----------------------------------------------------------
                            	  2629: *-----------------------------------------------------------
                            	  2630: * OPCODE : MOVE_xxx_FLAGS
                            	  2631: *-----------------------------------------------------------
                            	  2632: *-----------------------------------------------------------
                            	  2633: op_MOVE_xxx_FLAGS:
                            	  2634: 
                            	  2635: *     Move_To_SR
                            	  2636: 
                            	  2637: *     Dn
                            	  2638: 
01:00001A60 303C2FFF        	  2639:             move.w #$2FFF,d0
01:00001A64 47C0            	  2640:             move.l d0,SR
01:00001A66 6AFE            	  2641:             bpl.s *           * branch if Z clear
01:00001A68 66FE            	  2642:             bne.s *           * branch if N clear
01:00001A6A 68FE            	  2643:             bvc.s *           * branch if V clear
01:00001A6C 64FE            	  2644:             bcc.s *           * branch if C clear
01:00001A6E 303C2F00        	  2645:             move.w #$2F00,d0
01:00001A72 44C0            	  2646:             move d0,CCR
01:00001A74 67FE            	  2647:             beq.s *           * branch if Z set
01:00001A76 6BFE            	  2648:             bmi.s *           * branch if N set
01:00001A78 69FE            	  2649:             bvs.s *           * branch if V set
01:00001A7A 65FE            	  2650:             bcs.s *           * branch if C set
                            	  2651: 
01:00001A7C 303C2000        	  2652:             move.w #$2000,d0
01:00001A80 47C0            	  2653:             move.l d0,SR
01:00001A82 67FE            	  2654:             beq.s *           * branch if Z set
01:00001A84 6BFE            	  2655:             bmi.s *           * branch if N set
01:00001A86 69FE            	  2656:             bvs.s *           * branch if V set
01:00001A88 65FE            	  2657:             bcs.s *           * branch if C set
                            	  2658: 
                            	  2659: *     (An)
01:00001A8A 307C0100        	  2660:             move.l #$00000100,a0
01:00001A8E 30BC2FFF        	  2661:             move.w #$2FFF,(a0)
01:00001A92 47D0            	  2662:             move.l (a0),SR
01:00001A94 6AFE            	  2663:             bpl.s *           * branch if Z clear
01:00001A96 66FE            	  2664:             bne.s *           * branch if N clear
01:00001A98 68FE            	  2665:             bvc.s *           * branch if V clear
01:00001A9A 64FE            	  2666:             bcc.s *           * branch if C clear
                            	  2667: 
01:00001A9C 30BC2000        	  2668:             move.w #$2000,(a0)
01:00001AA0 47D0            	  2669:             move.l (a0),SR
01:00001AA2 67FE            	  2670:             beq.s *           * branch if Z set
01:00001AA4 6BFE            	  2671:             bmi.s *           * branch if N set
01:00001AA6 69FE            	  2672:             bvs.s *           * branch if V set
01:00001AA8 65FE            	  2673:             bcs.s *           * branch if C set
                            	  2674: 
                            	  2675: *     (An)+
01:00001AAA 307C0100        	  2676:             move.l #$00000100,a0
01:00001AAE 30BC2FFF        	  2677:             move.w #$2FFF,(a0)
01:00001AB2 47D8            	  2678:             move.l (a0)+,SR
01:00001AB4 6AFE            	  2679:             bpl.s *           * branch if Z clear
01:00001AB6 66FE            	  2680:             bne.s *           * branch if N clear
01:00001AB8 68FE            	  2681:             bvc.s *           * branch if V clear
01:00001ABA 64FE            	  2682:             bcc.s *           * branch if C clear
                            	  2683: 
01:00001ABC 30BC2000        	  2684:             move.w #$2000,(a0)
01:00001AC0 47D8            	  2685:             move.l (a0)+,SR
01:00001AC2 67FE            	  2686:             beq.s *           * branch if Z set
01:00001AC4 6BFE            	  2687:             bmi.s *           * branch if N set
01:00001AC6 69FE            	  2688:             bvs.s *           * branch if V set
01:00001AC8 65FE            	  2689:             bcs.s *           * branch if C set
                            	  2690: 
                            	  2691: *     -(An)
01:00001ACA 307C0102        	  2692:             move.l #$00000102,a0
01:00001ACE 30BC2FFF        	  2693:             move.w #$2FFF,(a0)
01:00001AD2 47D8            	  2694:             move.l (a0)+,SR
01:00001AD4 6AFE            	  2695:             bpl.s *           * branch if Z clear
01:00001AD6 66FE            	  2696:             bne.s *           * branch if N clear
01:00001AD8 68FE            	  2697:             bvc.s *           * branch if V clear
01:00001ADA 64FE            	  2698:             bcc.s *           * branch if C clear
                            	  2699: 
01:00001ADC 30BC2000        	  2700:             move.w #$2000,(a0)
01:00001AE0 47D8            	  2701:             move.l (a0)+,SR
01:00001AE2 67FE            	  2702:             beq.s *           * branch if Z set
01:00001AE4 6BFE            	  2703:             bmi.s *           * branch if N set
01:00001AE6 69FE            	  2704:             bvs.s *           * branch if V set
01:00001AE8 65FE            	  2705:             bcs.s *           * branch if C set
                            	  2706: 
                            	  2707: *     n(An)
01:00001AEA 307C0102        	  2708:             move.l #$00000102,a0
01:00001AEE 317C2FFF0002    	  2709:             move.w #$2FFF,2(a0)
01:00001AF4 47E80002        	  2710:             move.l 2(a0),SR
01:00001AF8 6AFE            	  2711:             bpl.s *           * branch if Z clear
01:00001AFA 66FE            	  2712:             bne.s *           * branch if N clear
01:00001AFC 68FE            	  2713:             bvc.s *           * branch if V clear
01:00001AFE 64FE            	  2714:             bcc.s *           * branch if C clear
                            	  2715: 
01:00001B00 317C20000002    	  2716:             move.w #$2000,2(a0)
01:00001B06 47E80002        	  2717:             move.l 2(a0),SR
01:00001B0A 67FE            	  2718:             beq.s *           * branch if Z set
01:00001B0C 6BFE            	  2719:             bmi.s *           * branch if N set
01:00001B0E 69FE            	  2720:             bvs.s *           * branch if V set
01:00001B10 65FE            	  2721:             bcs.s *           * branch if C set
                            	  2722: 
                            	  2723: *     n(An,Rn.l)
01:00001B12 307C0100        	  2724:             move.l #$00000100,a0
01:00001B16 7002            	  2725:             moveq  #$00000002,d0
01:00001B18 31BC2FFF0802    	  2726:             move.w #$2FFF,2(a0,d0.l)
01:00001B1E 47F00802        	  2727:             move.l 2(a0,d0.l),SR
01:00001B22 6AFE            	  2728:             bpl.s *           * branch if Z clear
01:00001B24 66FE            	  2729:             bne.s *           * branch if N clear
01:00001B26 68FE            	  2730:             bvc.s *           * branch if V clear
01:00001B28 64FE            	  2731:             bcc.s *           * branch if C clear
                            	  2732: 
01:00001B2A 31BC20000802    	  2733:             move.w #$2000,2(a0,d0.l)
01:00001B30 47F00802        	  2734:             move.l 2(a0,d0.l),SR
01:00001B34 67FE            	  2735:             beq.s *           * branch if Z set
01:00001B36 6BFE            	  2736:             bmi.s *           * branch if N set
01:00001B38 69FE            	  2737:             bvs.s *           * branch if V set
01:00001B3A 65FE            	  2738:             bcs.s *           * branch if C set
                            	  2739: 
                            	  2740: *     x.W
01:00001B3C 31FC2FFF0100    	  2741:             move.w #$2FFF,$0100
01:00001B42 47F80100        	  2742:             move.l $0100,SR
01:00001B46 6AFE            	  2743:             bpl.s *           * branch if Z clear
01:00001B48 66FE            	  2744:             bne.s *           * branch if N clear
01:00001B4A 68FE            	  2745:             bvc.s *           * branch if V clear
01:00001B4C 64FE            	  2746:             bcc.s *           * branch if C clear
                            	  2747: 
01:00001B4E 31FC20000100    	  2748:             move.w #$2000,$0100
01:00001B54 47F80100        	  2749:             move.l $0100,SR
01:00001B58 67FE            	  2750:             beq.s *           * branch if Z set
01:00001B5A 6BFE            	  2751:             bmi.s *           * branch if N set
01:00001B5C 69FE            	  2752:             bvs.s *           * branch if V set
01:00001B5E 65FE            	  2753:             bcs.s *           * branch if C set
                            	  2754: 
                            	  2755: *     x.L
01:00001B60 33FC2FFF00010100	  2756:             move.w #$2FFF,$00010100
01:00001B68 47F900010100    	  2757:             move.l $00010100,SR
01:00001B6E 6AFE            	  2758:             bpl.s *           * branch if Z clear
01:00001B70 66FE            	  2759:             bne.s *           * branch if N clear
01:00001B72 68FE            	  2760:             bvc.s *           * branch if V clear
01:00001B74 64FE            	  2761:             bcc.s *           * branch if C clear
                            	  2762: 
01:00001B76 33FC200000010100	  2763: MOVE4:      move.w #$2000,$00010100
01:00001B7E 47F900010100    	  2764:             move.l $00010100,SR
01:00001B84 67FE            	  2765:             beq.s *           * branch if Z set
01:00001B86 6BFE            	  2766:             bmi.s *           * branch if N set
01:00001B88 69FE            	  2767:             bvs.s *           * branch if V set
01:00001B8A 65FE            	  2768:             bcs.s *           * branch if C set
                            	  2769: 
                            	  2770: *     x(PC)
01:00001B8C 47FAFFEA        	  2771:             move.l MOVE4+2(pc),SR
01:00001B90 67FE            	  2772:             beq.s *           * branch if Z set
01:00001B92 6BFE            	  2773:             bmi.s *           * branch if N set
01:00001B94 69FE            	  2774:             bvs.s *           * branch if V set
01:00001B96 65FE            	  2775:             bcs.s *           * branch if C set
                            	  2776: 
                            	  2777: *     x(PC,d0.l)
01:00001B98 7000            	  2778:             moveq  #$00000000,d0
01:00001B9A 47FB08DC        	  2779:             move.l MOVE4+2(pc,d0.l),SR
01:00001B9E 67FE            	  2780:             beq.s *           * branch if Z set
01:00001BA0 6BFE            	  2781:             bmi.s *           * branch if N set
01:00001BA2 69FE            	  2782:             bvs.s *           * branch if V set
01:00001BA4 65FE            	  2783:             bcs.s *           * branch if C set
01:00001BA6 44FB08D0        	  2784:             move MOVE4+2(pc,d0.l),CCR
01:00001BAA 67FE            	  2785:             beq.s *           * branch if Z set
01:00001BAC 6BFE            	  2786:             bmi.s *           * branch if N set
01:00001BAE 69FE            	  2787:             bvs.s *           * branch if V set
01:00001BB0 65FE            	  2788:             bcs.s *           * branch if C set
                            	  2789: 
                            	  2790: *     #x
01:00001BB2 47FCFF002FFF    	  2791:             move.l #$FF002FFF,SR
01:00001BB8 66FE            	  2792:             bne.s *           * branch if Z clear
01:00001BBA 6AFE            	  2793:             bpl.s *           * branch if N clear
01:00001BBC 68FE            	  2794:             bvc.s *           * branch if V clear
01:00001BBE 64FE            	  2795:             bcc.s *           * branch if C clear
                            	  2796: 
                            	  2797: 
                            	  2798: 
                            	  2799: *  MOVE_From_SR
                            	  2800: 
                            	  2801: 
                            	  2802: 
                            	  2803: *     Dn
01:00001BC0 47FCFF00275A    	  2804:             move.l #$FF00275A,SR          * Initial value
01:00001BC6 4180            	  2805:             move.l SR,d0
01:00001BC8 0C80FF00271A    	  2806:             cmpi.l #$FF00271A,d0
                            	  2807: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2808: *            bne.s *                   * branch if Z set
                            	  2809: 
                            	  2810: *     (An)
01:00001BCE 307C0100        	  2811:             move.l #$00000100,a0
01:00001BD2 47FCFF00275A    	  2812:             move.l #$FF00275A,SR          * Initial value
01:00001BD8 4190            	  2813:             move.l SR,(a0)
01:00001BDA 0C90FF00275A    	  2814:             cmpi.l #$FF00275A,(a0)
01:00001BE0 66FE            	  2815:             bne.s *                   * branch if Z set
                            	  2816: 
                            	  2817: *     (An)+
01:00001BE2 307C0100        	  2818:             move.l #$00000100,a0
01:00001BE6 47FC0000257A    	  2819:             move.l #$257A,SR          * Initial value
01:00001BEC 4198            	  2820:             move.l SR,(a0)+
01:00001BEE 307C0100        	  2821:             move.l #$00000100,a0
01:00001BF2 0C980000257A    	  2822:             cmpi.l #$257A,(a0)+
01:00001BF8 66FE            	  2823:             bne.s *                   * branch if Z set
                            	  2824: 
                            	  2825: *     -(An)
01:00001BFA 307C0102        	  2826:             move.l #$00000102,a0
01:00001BFE 47FC00002766    	  2827:             move.l #$2766,SR          * Initial value
01:00001C04 41A0            	  2828:             move.l SR,-(a0)
01:00001C06 307C0100        	  2829:             move.l #$00000100,a0
01:00001C0A 0C9000002766    	  2830:             cmpi.l #$2766,(a0)
01:00001C10 66FE            	  2831:             bne.s *                   * branch if Z set
                            	  2832: 
                            	  2833: *     x(An)
01:00001C12 307C0102        	  2834:             move.l #$00000102,a0
01:00001C16 47FC00002733    	  2835:             move.l #$2733,SR          * Initial value
01:00001C1C 41A80004        	  2836:             move.l SR,4(a0)
01:00001C20 0CA8000027330004	  2837:             cmpi.l #$2733,4(a0)
01:00001C28 66FE            	  2838:             bne.s *                   * branch if Z set
                            	  2839: 
                            	  2840: *     x(An,rn)
01:00001C2A 307C0102        	  2841:             move.l #$00000102,a0
01:00001C2E 7004            	  2842:             moveq  #$00000004,d0
01:00001C30 47FC0000275A    	  2843:             move.l #$275a,SR          * Initial value
01:00001C36 41B00804        	  2844:             move.l SR,4(a0,d0.l)
01:00001C3A 0CB00000275A0804	  2845:             cmpi.l #$275a,4(a0,d0.l)
01:00001C42 66FE            	  2846:             bne.s *                   * branch if Z set
                            	  2847: 
                            	  2848: *     x.W
01:00001C44 47FC00002777    	  2849:             move.l #$2777,SR          * Initial value
01:00001C4A 41B80102        	  2850:             move.l SR,$0102
01:00001C4E 0CB8000027770102	  2851:             cmpi.l #$2777,$0102
01:00001C56 66FE            	  2852:             bne.s *                   * branch if Z set
                            	  2853: 
                            	  2854: *     x.L
01:00001C58 47FC00002777    	  2855:             move.l #$2777,SR          * Initial value
01:00001C5E 41B900010102    	  2856:             move.l SR,$10102
01:00001C64 0CB9000027770001	  2857:             cmpi.l #$2777,$10102
01:00001C6C 0102
01:00001C6E 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
                            	  2860: 
                            	  2861: 
01:00001C70 47FC00002700    	  2862:             move.l #$2700,SR          * Put flags back to initial value
                            	  2863: 
01:00001C76 4E75            	  2864:             rts
                            	  2865: 
                            	  2866: 
                            	  2867: *-----------------------------------------------------------
                            	  2868: *-----------------------------------------------------------
                            	  2869: * OPCODE : EXT
                            	  2870: *-----------------------------------------------------------
                            	  2871: *-----------------------------------------------------------
                            	  2872: op_EXT:
                            	  2873: 
01:00001C78 707F            	  2874:             move.l #$0000007F,d0
01:00001C7A 223C00008FFF    	  2875:             move.l #$00008FFF,d1
01:00001C80 7400            	  2876:             moveq  #$00000000,d2
                            	  2877: 
01:00001C82 4880            	  2878:             ext.w d0
01:00001C84 6BFE            	  2879:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C86 67FE            	  2880:             beq.s *                   * Check Z Flag  beq/bne
01:00001C88 0C800000007F    	  2881:             cmpi.l #$0000007F,d0
01:00001C8E 66FE            	  2882:             bne.s *                   * branch if Z set
                            	  2883: 
01:00001C90 48C1            	  2884:             ext.l d1
01:00001C92 6AFE            	  2885:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C94 67FE            	  2886:             beq.s *                   * Check Z Flag  beq/bne
01:00001C96 0C81FFFF8FFF    	  2887:             cmpi.l #$FFFF8FFF,d1
01:00001C9C 66FE            	  2888:             bne.s *                   * branch if Z set
                            	  2889: 
01:00001C9E 48C2            	  2890:             ext.l d2
01:00001CA0 66FE            	  2891:             bne.s *                   * Check Z Flag  beq/bne
                            	  2892: 
                            	  2893: 
                            	  2894: 
01:00001CA2 4E75            	  2895:             rts
                            	  2896: 
                            	  2897: 
                            	  2898: *-----------------------------------------------------------
                            	  2899: *-----------------------------------------------------------
                            	  2900: * OPCODE : SWAP
                            	  2901: *-----------------------------------------------------------
                            	  2902: *-----------------------------------------------------------
                            	  2903: op_SWAP:
                            	  2904: 
01:00001CA4 203C12345678    	  2905:             move.l #$12345678,d0
                            	  2906: 
01:00001CAA 4840            	  2907:             swap d0
01:00001CAC 6BFE            	  2908:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CAE 67FE            	  2909:             beq.s *                   * Check Z Flag  beq/bne
01:00001CB0 0C8056781234    	  2910:             cmpi.l #$56781234,d0
01:00001CB6 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912: 
                            	  2913: 
                            	  2914: 
01:00001CB8 4E75            	  2915:             rts
                            	  2916: 
                            	  2917: 
                            	  2918: *-----------------------------------------------------------
                            	  2919: *-----------------------------------------------------------
                            	  2920: * OPCODE : LEA_PEA
                            	  2921: *-----------------------------------------------------------
                            	  2922: *-----------------------------------------------------------
                            	  2923: op_LEAPEA:
                            	  2924: 
01:00001CBA 207C00345678    	  2925:             move.l #$00345678,a0
01:00001CC0 7800            	  2926:             moveq  #$00000000,d4
                            	  2927: 
                            	  2928: *     (An)
01:00001CC2 4DD0            	  2929:             lea (a0),a6
01:00001CC4 200E            	  2930:             move.l a6,d0
01:00001CC6 0C8000345678    	  2931:             cmpi.l #$00345678,d0
01:00001CCC 66FE            	  2932:             bne.s *                   * branch if Z set
01:00001CCE 4850            	  2933:             pea (a0)
01:00001CD0 0C9700345678    	  2934:             cmpi.l #$00345678,(a7)
01:00001CD6 66FE            	  2935:             bne.s *                   * branch if Z set
                            	  2936:             * This was without a specifier which the assembler defaulted to .w
01:00001CD8 588F            	  2937:             addq.l #4,a7            * Restore Stack Pointer
                            	  2938: 
                            	  2939: *     x(An)
01:00001CDA 4DE80004        	  2940:             lea 4(a0),a6
01:00001CDE 200E            	  2941:             move.l a6,d0
01:00001CE0 0C800034567C    	  2942:             cmpi.l #$0034567C,d0
01:00001CE6 66FE            	  2943:             bne.s *                   * branch if Z set
01:00001CE8 48680004        	  2944:             pea 4(a0)
01:00001CEC 0C970034567C    	  2945:             cmpi.l #$0034567C,(a7)
01:00001CF2 66FE            	  2946:             bne.s *                   * branch if Z set
                            	  2947:             * This was without a specifier which the assembler defaulted to .w
01:00001CF4 588F            	  2948:             addq.l #4,a7            * Restore Stack Pointer
                            	  2949: 
                            	  2950: *     x(An,Dn.l)
01:00001CF6 4DF04004        	  2951:             lea 4(a0,d4),a6
01:00001CFA 200E            	  2952:             move.l a6,d0
01:00001CFC 0C800034567C    	  2953:             cmpi.l #$0034567C,d0
01:00001D02 66FE            	  2954:             bne.s *                   * branch if Z set
01:00001D04 48704804        	  2955:             pea 4(a0,d4.l)
01:00001D08 0C970034567C    	  2956:             cmpi.l #$0034567C,(a7)
01:00001D0E 66FE            	  2957:             bne.s *                   * branch if Z set
                            	  2958:             * This was without a specifier which the assembler defaulted to .w
01:00001D10 588F            	  2959:             addq.l #4,a7            * Restore Stack Pointer
                            	  2960: 
                            	  2961: *     x.W
01:00001D12 4DF81234        	  2962:             lea $1234,a6
01:00001D16 200E            	  2963:             move.l a6,d0
01:00001D18 0C401234        	  2964:             cmpi.w #$1234,d0
01:00001D1C 66FE            	  2965:             bne.s *                   * branch if Z set
01:00001D1E 48781234        	  2966:             pea $1234
01:00001D22 0C9700001234    	  2967:             cmpi.l #$00001234,(a7)
01:00001D28 66FE            	  2968:             bne.s *                   * branch if Z set
                            	  2969:             * This was without a specifier which the assembler defaulted to .w
01:00001D2A 588F            	  2970:             addq.l #4,a7            * Restore Stack Pointer
                            	  2971: 
                            	  2972: *     x.L
01:00001D2C 4DF900345678    	  2973:             lea $00345678,a6
01:00001D32 200E            	  2974:             move.l a6,d0
01:00001D34 B08E            	  2975:             cmp.l a6,d0
01:00001D36 66FE            	  2976:             bne.s *                   * branch if Z set
01:00001D38 487900345678    	  2977:             pea $00345678
01:00001D3E 0C9700345678    	  2978:             cmpi.l #$00345678,(a7)
01:00001D44 66FE            	  2979:             bne.s *                   * branch if Z set
                            	  2980:             * This was without a specifier which the assembler defaulted to .w
01:00001D46 588F            	  2981:             addq.l #4,a7            * Restore Stack Pointer
                            	  2982: 
                            	  2983: *     x(PC)
01:00001D48 4DFA0008        	  2984:             lea LEA1(pc),a6
01:00001D4C 200E            	  2985:             move.l a6,d0
01:00001D4E B08E            	  2986:             cmp.l a6,d0
01:00001D50 66FE            	  2987:             bne.s *                   * branch if Z set
01:00001D52 487AFFFE        	  2988: LEA1:       pea LEA1(pc)
01:00001D56 0C970000241E    	  2989:             cmpi.l #$0000241E,(a7)
01:00001D5C 67FE            	  2990:             beq.s *                   * branch if Z clear
                            	  2991:             * This was without a specifier which the assembler defaulted to .w
01:00001D5E 588F            	  2992:             addq.l #4,a7              * Restore Stack Pointer
                            	  2993: 
                            	  2994: 
                            	  2995: 
                            	  2996: 
01:00001D60 47FCFF002700    	  2997:             move.l #$FF002700,SR          * Put flags back to initial value
                            	  2998: 
01:00001D66 4E75            	  2999:             rts
                            	  3000:  	
                            	  3001: 
                            	  3002: 
                            	  3003: *-----------------------------------------------------------
                            	  3004: *-----------------------------------------------------------
                            	  3005: * OPCODE : LEA_TAS
                            	  3006: *-----------------------------------------------------------
                            	  3007: *-----------------------------------------------------------
                            	  3008: op_TAS:
                            	  3009: 
                            	  3010: *     Test just one addressing mode
                            	  3011: 
01:00001D68 307C0100        	  3012:             move.l #$00000100,a0
                            	  3013: 
                            	  3014: *     (An)
01:00001D6C 4210            	  3015:             move.b #$00,(a0)
01:00001D6E 6BFE            	  3016:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D70 66FE            	  3017:             bne.s *                   * Check Z Flag  beq/bne
01:00001D72 4AD0            	  3018:             tas (a0)
01:00001D74 0C100080        	  3019:             cmpi.b #$80,(a0)
01:00001D78 66FE            	  3020:             bne.s *                   * branch if Z set
01:00001D7A 10BC00F5        	  3021:             move.b #$F5,(a0)
01:00001D7E 4AD0            	  3022:             tas (a0)
01:00001D80 6AFE            	  3023:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D82 67FE            	  3024:             beq.s *                   * Check Z Flag  beq/bne
01:00001D84 4AD0            	  3025:             tas (a0)
01:00001D86 0C1000F5        	  3026:             cmpi.b #$F5,(a0)
01:00001D8A 66FE            	  3027:             bne.s *                   * branch if Z set
                            	  3028: 
01:00001D8C 4E75            	  3029:             rts
                            	  3030: 
                            	  3031: 
                            	  3032: *-----------------------------------------------------------
                            	  3033: *-----------------------------------------------------------
                            	  3034: * OPCODE : LEA_TST
                            	  3035: *-----------------------------------------------------------
                            	  3036: *-----------------------------------------------------------
                            	  3037: op_TST:
                            	  3038: 
                            	  3039: *     Test just one addressing mode
                            	  3040: 
01:00001D8E 307C0100        	  3041:             move.l #$00000100,a0
                            	  3042: 
                            	  3043: *     (An) - BYTE
01:00001D92 4210            	  3044:             move.b #$00,(a0)
01:00001D94 4A10            	  3045:             tst.b (a0)
01:00001D96 6BFE            	  3046:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D98 66FE            	  3047:             bne.s *                   * Check Z Flag  beq/bne
01:00001D9A 10BC00F5        	  3048:             move.b #$F5,(a0)
01:00001D9E 4A10            	  3049:             tst.b (a0)
01:00001DA0 6AFE            	  3050:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DA2 67FE            	  3051:             beq.s *                   * Check Z Flag  beq/bne
                            	  3052: 
                            	  3053: *     (An) - WORD
01:00001DA4 4250            	  3054:             move.w #$0000,(a0)
01:00001DA6 4A50            	  3055:             tst.w (a0)
01:00001DA8 6BFE            	  3056:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DAA 66FE            	  3057:             bne.s *                   * Check Z Flag  beq/bne
01:00001DAC 30BCF567        	  3058:             move.w #$F567,(a0)
01:00001DB0 4A50            	  3059:             tst.w (a0)
01:00001DB2 6AFE            	  3060:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DB4 67FE            	  3061:             beq.s *                   * Check Z Flag  beq/bne
                            	  3062: 
                            	  3063: *     (An) - LONG
01:00001DB6 4290            	  3064:             move.l #$00000000,(a0)
01:00001DB8 4A90            	  3065:             tst.l (a0)
01:00001DBA 6BFE            	  3066:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DBC 66FE            	  3067:             bne.s *                   * Check Z Flag  beq/bne
01:00001DBE 20BCF56789AB    	  3068:             move.l #$F56789ab,(a0)
01:00001DC4 4A90            	  3069:             tst.l (a0)
01:00001DC6 6AFE            	  3070:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DC8 67FE            	  3071:             beq.s *                   * Check Z Flag  beq/bne
                            	  3072: 
                            	  3073: 
01:00001DCA 4E75            	  3074:             rts
                            	  3075: 
                            	  3076: 
                            	  3077: *-----------------------------------------------------------
                            	  3078: *-----------------------------------------------------------
                            	  3079: * OPCODE : LINKS
                            	  3080: *-----------------------------------------------------------
                            	  3081: *-----------------------------------------------------------
                            	  3082: op_LINKS:
                            	  3083: 
01:00001DCC 207C11223344    	  3084:             move.l #$11223344,a0
01:00001DD2 203C11223344    	  3085:             move.l #$11223344,d0
01:00001DD8 4E500000        	  3086:             link a0,#$0
01:00001DDC 0C9711223344    	  3087:             cmpi.l #$11223344,(a7)
                            	  3088: 
01:00001DE2 4E58            	  3089:             unlk a0
01:00001DE4 B1C0            	  3090:             cmp.l d0,a0
01:00001DE6 66FE            	  3091:             bne.s *                   * branch if Z set
                            	  3092: 
01:00001DE8 4E75            	  3093:             rts
                            	  3094: 
                            	  3095: *-----------------------------------------------------------
                            	  3096: *-----------------------------------------------------------
                            	  3097: * OPCODE : MOVE_USP
                            	  3098: *-----------------------------------------------------------
                            	  3099: *-----------------------------------------------------------
                            	  3100: op_MOVE_USP:
                            	  3101: 
01:00001DEA 207C11223344    	  3102:             move.l #$11223344,a0
01:00001DF0 4E60            	  3103:             move a0,USP
01:00001DF2 4E69            	  3104:             move USP,a1
01:00001DF4 B3C8            	  3105:             cmp.l a0,a1
01:00001DF6 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
01:00001DF8 4E75            	  3108:             rts
                            	  3109: 
                            	  3110: 
                            	  3111: *-----------------------------------------------------------
                            	  3112: *-----------------------------------------------------------
                            	  3113: * OPCODE : CHK
                            	  3114: *-----------------------------------------------------------
                            	  3115: *-----------------------------------------------------------
                            	  3116: op_CHK:
01:00001DFA 303C1122        	  3117:             move.w #$1122,d0
01:00001DFE 323C1122        	  3118:             move.w #$1122,d1
01:00001E02 4380            	  3119:             chk d0,d1
                            	  3120: 
01:00001E04 4E71            	  3121:             nop
01:00001E06 4E71            	  3122:             nop
                            	  3123: 
01:00001E08 323C1122        	  3124:             move.w #$1122,d1
01:00001E0C 43BC1122        	  3125:             chk #$1122,d1
                            	  3126: 
01:00001E10 323C1122        	  3127:             move.w #$1122,d1
01:00001E14 43BC007A        	  3128:             chk #00122,d1
01:00001E18 BCBCEEEE0006    	  3129:             cmp.l #$EEEE0006,d6
01:00001E1E 66FE            	  3130:             bne.s *                   * branch if Z set
                            	  3131: 
01:00001E20 303C1122        	  3132:             move.w #$1122,d0
01:00001E24 323C8000        	  3133:             move.w #$8000,d1
01:00001E28 4380            	  3134:             chk d0,d1
01:00001E2A BCBCEEEE0006    	  3135:             cmp.l #$EEEE0006,d6
01:00001E30 66FE            	  3136:             bne.s *                   * branch if Z set
                            	  3137: 
01:00001E32 4E75            	  3138:             rts
                            	  3139: 
                            	  3140: 
                            	  3141: *-----------------------------------------------------------
                            	  3142: *-----------------------------------------------------------
                            	  3143: * OPCODE : NEGS
                            	  3144: *-----------------------------------------------------------
                            	  3145: *-----------------------------------------------------------
                            	  3146: op_NEGS:
                            	  3147: 
                            	  3148: *     NOT - BYTE
01:00001E34 307C0100        	  3149:             move.l #$00000100,a0
01:00001E38 7000            	  3150:             moveq  #$00000000,d0
01:00001E3A 4600            	  3151:             not.b d0
01:00001E3C 6AFE            	  3152:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E3E 67FE            	  3153:             beq.s *                   * Check Z Flag  beq/bne
01:00001E40 4600            	  3154:             not.b d0
01:00001E42 6BFE            	  3155:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E44 66FE            	  3156:             bne.s *                   * Check Z Flag  beq/bne
01:00001E46 4A00            	  3157:             cmpi.b #$00,d0
01:00001E48 66FE            	  3158:             bne.s *                   * Check Z Flag  beq/bne
01:00001E4A 10BC0080        	  3159:             move.b #$80,(a0)
01:00001E4E 4610            	  3160:             not.b (a0)
01:00001E50 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E52 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
01:00001E54 4610            	  3163:             not.b (a0)
01:00001E56 6AFE            	  3164:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E58 67FE            	  3165:             beq.s *                   * Check Z Flag  beq/bne
01:00001E5A 0C100080        	  3166:             cmpi.b #$80,(a0)
01:00001E5E 66FE            	  3167:             bne.s *                   * Check Z Flag  beq/bne
                            	  3168: 
                            	  3169: *     NOT - WORD
01:00001E60 307C0100        	  3170:             move.l #$00000100,a0
01:00001E64 7000            	  3171:             moveq  #$00000000,d0
01:00001E66 4640            	  3172:             not.w d0
01:00001E68 6AFE            	  3173:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E6A 67FE            	  3174:             beq.s *                   * Check Z Flag  beq/bne
01:00001E6C 4640            	  3175:             not.w d0
01:00001E6E 6BFE            	  3176:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E70 66FE            	  3177:             bne.s *                   * Check Z Flag  beq/bne
01:00001E72 4A40            	  3178:             cmpi.w #$0000,d0
01:00001E74 66FE            	  3179:             bne.s *                   * Check Z Flag  beq/bne
01:00001E76 30BC5A5A        	  3180:             move.w #$5a5a,(a0)
01:00001E7A 4650            	  3181:             not.w (a0)
01:00001E7C 6AFE            	  3182:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E7E 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
01:00001E80 4650            	  3184:             not.w (a0)
01:00001E82 6BFE            	  3185:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E84 67FE            	  3186:             beq.s *                   * Check Z Flag  beq/bne
01:00001E86 0C505A5A        	  3187:             cmpi.w #$5a5a,(a0)
01:00001E8A 66FE            	  3188:             bne.s *                   * Check Z Flag  beq/bne
                            	  3189: 
                            	  3190: *     NOT - LONG
01:00001E8C 307C0100        	  3191:             move.l #$00000100,a0
01:00001E90 7000            	  3192:             moveq  #$00000000,d0
01:00001E92 4680            	  3193:             not.l d0
01:00001E94 6AFE            	  3194:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E96 67FE            	  3195:             beq.s *                   * Check Z Flag  beq/bne
01:00001E98 4680            	  3196:             not.l d0
01:00001E9A 6BFE            	  3197:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E9C 66FE            	  3198:             bne.s *                   * Check Z Flag  beq/bne
01:00001E9E 4A80            	  3199:             cmpi.l #$00000000,d0
01:00001EA0 66FE            	  3200:             bne.s *                   * Check Z Flag  beq/bne
01:00001EA2 20BC5A5A1234    	  3201:             move.l #$5a5a1234,(a0)
01:00001EA8 4690            	  3202:             not.l (a0)
01:00001EAA 6AFE            	  3203:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001EAC 67FE            	  3204:             beq.s *                   * Check Z Flag  beq/bne
01:00001EAE 4690            	  3205:             not.l (a0)
01:00001EB0 6BFE            	  3206:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EB2 67FE            	  3207:             beq.s *                   * Check Z Flag  beq/bne
01:00001EB4 0C905A5A1234    	  3208:             cmpi.l #$5a5a1234,(a0)
01:00001EBA 66FE            	  3209:             bne.s *                   * Check Z Flag  beq/bne
                            	  3210: 
                            	  3211: * -----
                            	  3212: 
                            	  3213: *     NEG - BYTE
01:00001EBC 307C0100        	  3214:             move.l #$00000100,a0
01:00001EC0 7000            	  3215:             moveq  #$00000000,d0
01:00001EC2 7240D241        	  3216:             move.l #$00000080,d1
01:00001EC6 4400            	  3217:             neg.b d0
01:00001EC8 6BFE            	  3218:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001ECA 66FE            	  3219:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001ECC 65FE            	  3220:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001ECE 69FE            	  3221:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001ED0 4401            	  3222:             neg.b d1
01:00001ED2 6AFE            	  3223:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001ED4 67FE            	  3224:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001ED6 64FE            	  3225:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001ED8 68FE            	  3226:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001EDA 0C010080        	  3227:             cmpi.b #$80,d1
01:00001EDE 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne
01:00001EE0 10BC007F        	  3229:             move.b #$7F,(a0)
01:00001EE4 4410            	  3230:             neg.b (a0)
01:00001EE6 6AFE            	  3231:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EE8 67FE            	  3232:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EEA 64FE            	  3233:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EEC 69FE            	  3234:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EEE 10BC00F5        	  3235:             move.b #$F5,(a0)
01:00001EF2 4410            	  3236:             neg.b (a0)
01:00001EF4 6BFE            	  3237:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EF6 67FE            	  3238:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EF8 64FE            	  3239:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EFA 69FE            	  3240:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EFC 0C10000B        	  3241:             cmpi.b #$0B,(a0)
01:00001F00 66FE            	  3242:             bne.s *                   * Check Z Flag  beq/bne
                            	  3243: 
                            	  3244: * -----
                            	  3245: 
                            	  3246: *     NEG - WORD
01:00001F02 307C0100        	  3247:             move.l #$00000100,a0
01:00001F06 7000            	  3248:             moveq  #$00000000,d0
01:00001F08 223C00008000    	  3249:             move.l #$00008000,d1
01:00001F0E 4440            	  3250:             neg.w d0
01:00001F10 6BFE            	  3251:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F12 66FE            	  3252:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F14 65FE            	  3253:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F16 69FE            	  3254:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F18 4441            	  3255:             neg.w d1
01:00001F1A 6AFE            	  3256:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F1C 67FE            	  3257:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F1E 64FE            	  3258:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F20 68FE            	  3259:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F22 0C418000        	  3260:             cmpi.w #$8000,d1
01:00001F26 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne
01:00001F28 30BC7FFF        	  3262:             move.w #$7FFF,(a0)
01:00001F2C 4450            	  3263:             neg.w (a0)
01:00001F2E 6AFE            	  3264:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F30 67FE            	  3265:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F32 64FE            	  3266:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F34 69FE            	  3267:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F36 30BCF578        	  3268:             move.w #$F578,(a0)
01:00001F3A 4450            	  3269:             neg.w (a0)
01:00001F3C 6BFE            	  3270:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F3E 67FE            	  3271:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F40 64FE            	  3272:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F42 69FE            	  3273:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F44 0C500A88        	  3274:             cmpi.w #$0A88,(a0)
01:00001F48 66FE            	  3275:             bne.s *                   * Check Z Flag  beq/bne
                            	  3276: 
                            	  3277: * -----
                            	  3278: 
                            	  3279: *     NEG - LONG
01:00001F4A 307C0100        	  3280:             move.l #$00000100,a0
01:00001F4E 7000            	  3281:             moveq  #$00000000,d0
01:00001F50 223C80000000    	  3282:             move.l #$80000000,d1
01:00001F56 4480            	  3283:             neg.l d0
01:00001F58 6BFE            	  3284:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F5A 66FE            	  3285:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F5C 65FE            	  3286:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F5E 69FE            	  3287:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F60 4481            	  3288:             neg.l d1
01:00001F62 6AFE            	  3289:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F64 67FE            	  3290:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F66 64FE            	  3291:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F68 68FE            	  3292:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F6A 0C8180000000    	  3293:             cmpi.l #$80000000,d1
01:00001F70 66FE            	  3294:             bne.s *                   * Check Z Flag  beq/bne
01:00001F72 20BC7FFFFFFF    	  3295:             move.l #$7FFFFFFF,(a0)
01:00001F78 4490            	  3296:             neg.l (a0)
01:00001F7A 6AFE            	  3297:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F7C 67FE            	  3298:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F7E 64FE            	  3299:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F80 69FE            	  3300:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F82 20BCF5781234    	  3301:             move.l #$F5781234,(a0)
01:00001F88 4490            	  3302:             neg.l (a0)
01:00001F8A 6BFE            	  3303:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F8C 67FE            	  3304:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F8E 64FE            	  3305:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F90 69FE            	  3306:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F92 0C900A87EDCC    	  3307:             cmpi.l #$0A87EDCC,(a0)
01:00001F98 66FE            	  3308:             bne.s *                   * Check Z Flag  beq/bne
                            	  3309: 
                            	  3310: 
                            	  3311: * -----
                            	  3312: 
                            	  3313: *     NEGX - BYTE
01:00001F9A 307C0100        	  3314:             move.l #$00000100,a0
01:00001F9E 7000            	  3315:             moveq  #$00000000,d0
01:00001FA0 7240D241        	  3316:             move.l #$00000080,d1
01:00001FA4 003C0010        	  3317:             ori.b #$10,CCR        * Set X Flag
01:00001FA8 4000            	  3318:             negx.b d0
01:00001FAA 6AFE            	  3319:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FAC 67FE            	  3320:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FAE 64FE            	  3321:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FB0 69FE            	  3322:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FB2 023C00EF        	  3323:             andi.b #$EF,CCR       * Clear X Flag
01:00001FB6 4000            	  3324:             negx.b d0
01:00001FB8 6BFE            	  3325:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FBA 67FE            	  3326:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FBC 64FE            	  3327:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FBE 69FE            	  3328:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FC0 003C0010        	  3329:             ori.b #$10,CCR        * Set X Flag
01:00001FC4 4001            	  3330:             negx.b d1
01:00001FC6 6BFE            	  3331:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FC8 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FCA 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FCC 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FCE 0C01007F        	  3335:             cmpi.b #$7F,d1
01:00001FD2 66FE            	  3336:             bne.s *                   * Check Z Flag  beq/bne
01:00001FD4 023C00EF        	  3337:             andi.b #$EF,CCR       * Clear X Flag
01:00001FD8 4001            	  3338:             negx.b d1
01:00001FDA 6AFE            	  3339:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FDC 67FE            	  3340:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FDE 64FE            	  3341:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FE0 69FE            	  3342:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FE2 0C010081        	  3343:             cmpi.b #$81,d1
01:00001FE6 66FE            	  3344:             bne.s *                   * Check Z Flag  beq/bne
01:00001FE8 10BC007F        	  3345:             move.b #$7F,(a0)
01:00001FEC 003C0010        	  3346:             ori.b #$10,CCR        * Set X Flag
01:00001FF0 4010            	  3347:             negx.b (a0)
01:00001FF2 6AFE            	  3348:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FF4 67FE            	  3349:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FF6 64FE            	  3350:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3351:             * I think overflow should happen here.
                            	  3352: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FF8 10BC007F        	  3353:             move.b #$7F,(a0)
01:00001FFC 023C00EF        	  3354:             andi.b #$EF,CCR       * Clear X Flag
01:00002000 4010            	  3355:             negx.b (a0)
01:00002002 6AFE            	  3356:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002004 67FE            	  3357:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002006 64FE            	  3358:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002008 69FE            	  3359:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000200A 10BC00F5        	  3360:             move.b #$F5,(a0)
01:0000200E 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
01:00002012 4010            	  3362:             negx.b (a0)
01:00002014 6BFE            	  3363:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002016 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002018 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000201A 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000201C 0C10000A        	  3367:             cmpi.b #$0A,(a0)
01:00002020 66FE            	  3368:             bne.s *                   * Check Z Flag  beq/bne
01:00002022 023C00EF        	  3369:             andi.b #$EF,CCR       * Clear X Flag
01:00002026 4010            	  3370:             negx.b (a0)
01:00002028 6AFE            	  3371:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000202A 67FE            	  3372:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000202C 64FE            	  3373:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000202E 69FE            	  3374:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002030 0C1000F6        	  3375:             cmpi.b #$F6,(a0)
01:00002034 66FE            	  3376:             bne.s *                   * Check Z Flag  beq/bne
                            	  3377: 
                            	  3378: 
                            	  3379: 
                            	  3380: * -----
                            	  3381: 
                            	  3382: *     NEGX - WORD
01:00002036 307C0100        	  3383:             move.l #$00000100,a0
01:0000203A 7000            	  3384:             moveq  #$00000000,d0
01:0000203C 223C00008000    	  3385:             move.l #$00008000,d1
01:00002042 003C0010        	  3386:             ori.b #$10,CCR        * Set X Flag
01:00002046 4040            	  3387:             negx.w d0
01:00002048 6AFE            	  3388:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000204A 67FE            	  3389:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000204C 64FE            	  3390:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:0000204E 69FE            	  3391:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002050 023C00EF        	  3392:             andi.b #$EF,CCR       * Clear X Flag
01:00002054 4040            	  3393:             negx.w d0
01:00002056 6BFE            	  3394:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002058 67FE            	  3395:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000205A 64FE            	  3396:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:0000205C 69FE            	  3397:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000205E 003C0010        	  3398:             ori.b #$10,CCR        * Set X Flag
01:00002062 4041            	  3399:             negx.w d1
01:00002064 6BFE            	  3400:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002066 67FE            	  3401:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002068 64FE            	  3402:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000206A 69FE            	  3403:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000206C 0C417FFF        	  3404:             cmpi.w #$7FFF,d1
01:00002070 66FE            	  3405:             bne.s *                   * Check Z Flag  beq/bne
01:00002072 023C00EF        	  3406:             andi.b #$EF,CCR       * Clear X Flag
01:00002076 4041            	  3407:             negx.w d1
01:00002078 6AFE            	  3408:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000207A 67FE            	  3409:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000207C 64FE            	  3410:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000207E 69FE            	  3411:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002080 0C418001        	  3412:             cmpi.w #$8001,d1
01:00002084 66FE            	  3413:             bne.s *                   * Check Z Flag  beq/bne
01:00002086 30BC7FFF        	  3414:             move.w #$7FFF,(a0)
01:0000208A 003C0010        	  3415:             ori.b #$10,CCR        * Set X Flag
01:0000208E 4050            	  3416:             negx.w (a0)
01:00002090 6AFE            	  3417:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002092 67FE            	  3418:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002094 64FE            	  3419:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3420: ***            
                            	  3421: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002096 30BCF567        	  3422:             move.w #$F567,(a0)
01:0000209A 023C00EF        	  3423:             andi.b #$EF,CCR       * Clear X Flag
01:0000209E 4050            	  3424:             negx.w (a0)
01:000020A0 6BFE            	  3425:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020A2 67FE            	  3426:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020A4 64FE            	  3427:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020A6 69FE            	  3428:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020A8 30BCF567        	  3429:             move.w #$F567,(a0)
01:000020AC 003C0010        	  3430:             ori.b #$10,CCR        * Set X Flag
01:000020B0 4050            	  3431:             negx.w (a0)
01:000020B2 6BFE            	  3432:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020B4 67FE            	  3433:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020B6 64FE            	  3434:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020B8 69FE            	  3435:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020BA 0C500A98        	  3436:             cmpi.w #$0A98,(a0)
01:000020BE 66FE            	  3437:             bne.s *                   * Check Z Flag  beq/bne
01:000020C0 023C00EF        	  3438:             andi.b #$EF,CCR       * Clear X Flag
01:000020C4 4050            	  3439:             negx.w (a0)
01:000020C6 6AFE            	  3440:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020C8 67FE            	  3441:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020CA 64FE            	  3442:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020CC 69FE            	  3443:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020CE 0C50F568        	  3444:             cmpi.w #$F568,(a0)
01:000020D2 66FE            	  3445:             bne.s *                   * Check Z Flag  beq/bne
                            	  3446: 
                            	  3447: 
                            	  3448: * -----
                            	  3449: 
                            	  3450: *     NEGX - LONG
01:000020D4 307C0100        	  3451:             move.l #$00000100,a0
01:000020D8 7000            	  3452:             moveq  #$00000000,d0
01:000020DA 223C80000000    	  3453:             move.l #$80000000,d1
01:000020E0 003C0010        	  3454:             ori.b #$10,CCR        * Set X Flag
01:000020E4 4080            	  3455:             negx.l d0
01:000020E6 6AFE            	  3456:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020E8 67FE            	  3457:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020EA 64FE            	  3458:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020EC 69FE            	  3459:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020EE 023C00EF        	  3460:             andi.b #$EF,CCR       * Clear X Flag
01:000020F2 4080            	  3461:             negx.l d0
01:000020F4 6BFE            	  3462:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020F6 67FE            	  3463:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020F8 64FE            	  3464:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020FA 69FE            	  3465:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020FC 003C0010        	  3466:             ori.b #$10,CCR        * Set X Flag
01:00002100 4081            	  3467:             negx.l d1
01:00002102 6BFE            	  3468:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002104 67FE            	  3469:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002106 64FE            	  3470:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002108 69FE            	  3471:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000210A 0C817FFFFFFF    	  3472:             cmpi.l #$7FFFFFFF,d1
01:00002110 66FE            	  3473:             bne.s *                   * Check Z Flag  beq/bne
01:00002112 023C00EF        	  3474:             andi.b #$EF,CCR       * Clear X Flag
01:00002116 4081            	  3475:             negx.l d1
01:00002118 6AFE            	  3476:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000211A 67FE            	  3477:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000211C 64FE            	  3478:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3479: ****            
                            	  3480: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000211E 0C8180000001    	  3481:             cmpi.l #$80000001,d1
01:00002124 66FE            	  3482:             bne.s *                   * Check Z Flag  beq/bne
01:00002126 20BC00007FFF    	  3483:             move.l #$7FFF,(a0)
01:0000212C 003C0010        	  3484:             ori.b #$10,CCR        * Set X Flag
01:00002130 4090            	  3485:             negx.l (a0)
01:00002132 6AFE            	  3486:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002134 67FE            	  3487:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002136 64FE            	  3488:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3489: ****            
                            	  3490: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002138 20BCF5671234    	  3491:             move.l #$F5671234,(a0)
01:0000213E 023C00EF        	  3492:             andi.b #$EF,CCR       * Clear X Flag
01:00002142 4090            	  3493:             negx.l (a0)
01:00002144 6BFE            	  3494:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002146 67FE            	  3495:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002148 64FE            	  3496:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000214A 69FE            	  3497:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000214C 20BCF5675678    	  3498:             move.l #$F5675678,(a0)
01:00002152 003C0010        	  3499:             ori.b #$10,CCR        * Set X Flag
01:00002156 4090            	  3500:             negx.l (a0)
01:00002158 6BFE            	  3501:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000215A 67FE            	  3502:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000215C 64FE            	  3503:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000215E 69FE            	  3504:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002160 0C900A98A987    	  3505:             cmpi.l #$0A98A987,(a0)
01:00002166 66FE            	  3506:             bne.s *                   * Check Z Flag  beq/bne
01:00002168 023C00EF        	  3507:             andi.b #$EF,CCR       * Clear X Flag
01:0000216C 4090            	  3508:             negx.l (a0)
01:0000216E 6AFE            	  3509:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002170 67FE            	  3510:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002172 64FE            	  3511:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002174 69FE            	  3512:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002176 0C90F5675679    	  3513:             cmpi.l #$F5675679,(a0)
01:0000217C 66FE            	  3514:             bne.s *                   * Check Z Flag  beq/bne
                            	  3515: 
                            	  3516: 
                            	  3517: * -----
                            	  3518: 
                            	  3519: *     CLR - BYTE
01:0000217E 307C0100        	  3520:             move.l #$00000100,a0
01:00002182 203C12345678    	  3521:             move.l #$12345678,d0
01:00002188 223C12345678    	  3522:             move.l #$12345678,d1
01:0000218E 243C12345678    	  3523:             move.l #$12345678,d2
01:00002194 283C12345600    	  3524:             move.l #$12345600,d4
01:0000219A 2A3C12340000    	  3525:             move.l #$12340000,d5
01:000021A0 7C00            	  3526:             moveq  #$00000000,d6
                            	  3527: 
01:000021A2 4200            	  3528:             clr.b d0
01:000021A4 66FE            	  3529:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021A6 6BFE            	  3530:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021A8 B880            	  3531:             cmp.l d0,d4
01:000021AA 66FE            	  3532:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3533: 
01:000021AC 4241            	  3534:             clr.w d1
01:000021AE 66FE            	  3535:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021B0 6BFE            	  3536:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021B2 BA81            	  3537:             cmp.l d1,d5
01:000021B4 66FE            	  3538:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3539: 
01:000021B6 7400            	  3540:             clr.l d2
01:000021B8 66FE            	  3541:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021BA 6BFE            	  3542:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021BC BC82            	  3543:             cmp.l d2,d6
01:000021BE 66FE            	  3544:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3545: 
01:000021C0 4E75            	  3546:             rts
                            	  3547: 
                            	  3548: 
                            	  3549: 
                            	  3550: *-----------------------------------------------------------
                            	  3551: *-----------------------------------------------------------
                            	  3552: * OPCODE : MOVEM
                            	  3553: *-----------------------------------------------------------
                            	  3554: *-----------------------------------------------------------
                            	  3555: op_MOVEM:
                            	  3556: 
                            	  3557: *     WORD  Registers --> Memory
01:000021C2 203C0000D0D0    	  3558:             move.l #$0000d0d0,d0
01:000021C8 223C0000D1D1    	  3559:             move.l #$0000d1d1,d1
01:000021CE 243C0000D2D2    	  3560:             move.l #$0000d2d2,d2
01:000021D4 263C0000D3D3    	  3561:             move.l #$0000d3d3,d3
01:000021DA 283C0000D4D4    	  3562:             move.l #$0000d4d4,d4
01:000021E0 2A3C0000D5D5    	  3563:             move.l #$0000d5d5,d5
01:000021E6 2C3C0000D6D6    	  3564:             move.l #$0000d6d6,d6
01:000021EC 2E3C0000D7D7    	  3565:             move.l #$0000d7d7,d7
01:000021F2 307C0A0A        	  3566:             move.l #$00000a0a,a0
01:000021F6 327C1A1A        	  3567:             move.l #$00001a1a,a1
01:000021FA 347C2A2A        	  3568:             move.l #$00002a2a,a2
01:000021FE 367C3A3A        	  3569:             move.l #$00003a3a,a3
01:00002202 387C4A4A        	  3570:             move.l #$00004a4a,a4
01:00002206 3A7C5A5A        	  3571:             move.l #$00005a5a,a5
01:0000220A 3C7C6A6A        	  3572:             move.l #$00006a6a,a6
                            	  3573: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3574: 
01:0000220E 48B8FFFF0100    	  3575:             movem.w D0-D7/A0-A7,$00000100
                            	  3576: 
01:00002214 307C0100        	  3577:             move.l #$00000100,a0
                            	  3578: 
01:00002218 B058            	  3579:             cmp.w (a0)+,d0
01:0000221A 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000221C B258            	  3581:             cmp.w (a0)+,d1
01:0000221E 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002220 B458            	  3583:             cmp.w (a0)+,d2
01:00002222 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002224 B658            	  3585:             cmp.w (a0)+,d3
01:00002226 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002228 B858            	  3587:             cmp.w (a0)+,d4
01:0000222A 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000222C BA58            	  3589:             cmp.w (a0)+,d5
01:0000222E 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002230 BC58            	  3591:             cmp.w (a0)+,d6
01:00002232 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002234 BE58            	  3593:             cmp.w (a0)+,d7
01:00002236 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3595: 
01:00002238 0C580A0A        	  3596:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:0000223C 66FE            	  3597:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3598: 
01:0000223E B2D8            	  3599:             cmp.w (a0)+,a1
01:00002240 66FE            	  3600:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002242 B4D8            	  3601:             cmp.w (a0)+,a2
01:00002244 66FE            	  3602:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002246 B6D8            	  3603:             cmp.w (a0)+,a3
01:00002248 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000224A B8D8            	  3605:             cmp.w (a0)+,a4
01:0000224C 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000224E BAD8            	  3607:             cmp.w (a0)+,a5
01:00002250 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002252 BCD8            	  3609:             cmp.w (a0)+,a6
01:00002254 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: *     LONG  Registers --> Memory
01:00002256 203CD0D0D0D0    	  3616:             move.l #$d0d0d0d0,d0
01:0000225C 223CD1D1D1D1    	  3617:             move.l #$d1d1d1d1,d1
01:00002262 243CD2D2D2D2    	  3618:             move.l #$d2d2d2d2,d2
01:00002268 263CD3D3D3D3    	  3619:             move.l #$d3d3d3d3,d3
01:0000226E 283CD4D4D4D4    	  3620:             move.l #$d4d4d4d4,d4
01:00002274 2A3CD5D5D5D5    	  3621:             move.l #$d5d5d5d5,d5
01:0000227A 2C3CD6D6D6D6    	  3622:             move.l #$d6d6d6d6,d6
01:00002280 2E3CD7D7D7D7    	  3623:             move.l #$d7d7d7d7,d7
01:00002286 207C0A0A0A0A    	  3624:             move.l #$0a0a0a0a,a0
01:0000228C 227C1A1A1A1A    	  3625:             move.l #$1a1a1a1a,a1
01:00002292 247C2A2A2A2A    	  3626:             move.l #$2a2a2a2a,a2
01:00002298 267C3A3A3A3A    	  3627:             move.l #$3a3a3a3a,a3
01:0000229E 287C4A4A4A4A    	  3628:             move.l #$4a4a4a4a,a4
01:000022A4 2A7C5A5A5A5A    	  3629:             move.l #$5a5a5a5a,a5
01:000022AA 2C7C6A6A6A6A    	  3630:             move.l #$6a6a6a6a,a6
                            	  3631: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3632: 
                            	  3633: 
01:000022B0 48F8FFFF0120    	  3634:             movem.l D0-D7/A0-A7,$00000120
                            	  3635: 
01:000022B6 307C0120        	  3636:             move.l #$00000120,a0
                            	  3637: 
01:000022BA B098            	  3638:             cmp.l (a0)+,d0
01:000022BC 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022BE B298            	  3640:             cmp.l (a0)+,d1
01:000022C0 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C2 B498            	  3642:             cmp.l (a0)+,d2
01:000022C4 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C6 B698            	  3644:             cmp.l (a0)+,d3
01:000022C8 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CA B898            	  3646:             cmp.l (a0)+,d4
01:000022CC 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CE BA98            	  3648:             cmp.l (a0)+,d5
01:000022D0 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D2 BC98            	  3650:             cmp.l (a0)+,d6
01:000022D4 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D6 BE98            	  3652:             cmp.l (a0)+,d7
01:000022D8 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3654: 
01:000022DA 0C980A0A0A0A    	  3655:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:000022E0 66FE            	  3656:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3657: 
01:000022E2 B3D8            	  3658:             cmp.l (a0)+,a1
01:000022E4 66FE            	  3659:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E6 B5D8            	  3660:             cmp.l (a0)+,a2
01:000022E8 66FE            	  3661:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022EA B7D8            	  3662:             cmp.l (a0)+,a3
01:000022EC 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022EE B9D8            	  3664:             cmp.l (a0)+,a4
01:000022F0 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F2 BBD8            	  3666:             cmp.l (a0)+,a5
01:000022F4 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F6 BDD8            	  3668:             cmp.l (a0)+,a6
01:000022F8 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3670: *      ----
                            	  3671: 
                            	  3672: 
                            	  3673: *     WORD  Registers --> Memory  -(An) EA Mode
01:000022FA 203C0000D0D0    	  3674:             move.l #$0000d0d0,d0
01:00002300 223C0000D1D1    	  3675:             move.l #$0000d1d1,d1
01:00002306 243C0000D2D2    	  3676:             move.l #$0000d2d2,d2
01:0000230C 263C0000D3D3    	  3677:             move.l #$0000d3d3,d3
01:00002312 283C0000D4D4    	  3678:             move.l #$0000d4d4,d4
01:00002318 2A3C0000D5D5    	  3679:             move.l #$0000d5d5,d5
01:0000231E 2C3C0000D6D6    	  3680:             move.l #$0000d6d6,d6
01:00002324 2E3C0000D7D7    	  3681:             move.l #$0000d7d7,d7
01:0000232A 307C0A0A        	  3682:             move.l #$00000a0a,a0
01:0000232E 327C1A1A        	  3683:             move.l #$00001a1a,a1
01:00002332 347C2A2A        	  3684:             move.l #$00002a2a,a2
01:00002336 367C3A3A        	  3685:             move.l #$00003a3a,a3
01:0000233A 387C4A4A        	  3686:             move.l #$00004a4a,a4
01:0000233E 3A7C5A5A        	  3687:             move.l #$00005a5a,a5
01:00002342 3C7C6A6A        	  3688:             move.l #$00006a6a,a6
                            	  3689: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3690: 
01:00002346 307C01A0        	  3691:             move.l #$000001A0,a0
01:0000234A 48A0FFFF        	  3692:             movem.w D0-D7/A0-A7,-(a0)
                            	  3693: 
01:0000234E 307C019E        	  3694:             move.l #$0000019E,a0
                            	  3695: 
01:00002352 BCE0            	  3696:             cmp.w -(a0),a6
01:00002354 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002356 BAE0            	  3698:             cmp.w -(a0),a5
01:00002358 66FE            	  3699:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235A B8E0            	  3700:             cmp.w -(a0),a4
01:0000235C 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235E B6E0            	  3702:             cmp.w -(a0),a3
01:00002360 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002362 B4E0            	  3704:             cmp.w -(a0),a2
01:00002364 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002366 B2E0            	  3706:             cmp.w -(a0),a1
01:00002368 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236A B0E0            	  3708:             cmp.w -(a0),a0
                            	  3709: *            bne.s *                   * Check Z Flag  beq/bne 0
01:0000236C BE60            	  3710:             cmp.w -(a0),d7
01:0000236E 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002370 BC60            	  3712:             cmp.w -(a0),d6
01:00002372 66FE            	  3713:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002374 BA60            	  3714:             cmp.w -(a0),d5
01:00002376 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002378 B860            	  3716:             cmp.w -(a0),d4
01:0000237A 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237C B660            	  3718:             cmp.w -(a0),d3
01:0000237E 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002380 B460            	  3720:             cmp.w -(a0),d2
01:00002382 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002384 B260            	  3722:             cmp.w -(a0),d1
01:00002386 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002388 B060            	  3724:             cmp.w -(a0),d0
01:0000238A 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: *     LONG  Registers --> Memory   -(An) EA Mode
01:0000238C 203CD0D0D0D0    	  3731:             move.l #$d0d0d0d0,d0
01:00002392 223CD1D1D1D1    	  3732:             move.l #$d1d1d1d1,d1
01:00002398 243CD2D2D2D2    	  3733:             move.l #$d2d2d2d2,d2
01:0000239E 263CD3D3D3D3    	  3734:             move.l #$d3d3d3d3,d3
01:000023A4 283CD4D4D4D4    	  3735:             move.l #$d4d4d4d4,d4
01:000023AA 2A3CD5D5D5D5    	  3736:             move.l #$d5d5d5d5,d5
01:000023B0 2C3CD6D6D6D6    	  3737:             move.l #$d6d6d6d6,d6
01:000023B6 2E3CD7D7D7D7    	  3738:             move.l #$d7d7d7d7,d7
01:000023BC 207C0A0A0A0A    	  3739:             move.l #$0a0a0a0a,a0
01:000023C2 227C1A1A1A1A    	  3740:             move.l #$1a1a1a1a,a1
01:000023C8 247C2A2A2A2A    	  3741:             move.l #$2a2a2a2a,a2
01:000023CE 267C3A3A3A3A    	  3742:             move.l #$3a3a3a3a,a3
01:000023D4 287C4A4A4A4A    	  3743:             move.l #$4a4a4a4a,a4
01:000023DA 2A7C5A5A5A5A    	  3744:             move.l #$5a5a5a5a,a5
01:000023E0 2C7C6A6A6A6A    	  3745:             move.l #$6a6a6a6a,a6
                            	  3746: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3747: 
                            	  3748: 
01:000023E6 307C01A0        	  3749:             move.l #$000001A0,a0
01:000023EA 48E0FFFF        	  3750:             movem.l D0-D7/A0-A7,-(a0)
                            	  3751: 
01:000023EE 307C019C        	  3752:             move.l #$0000019C,a0
                            	  3753: 
01:000023F2 BDE0            	  3754:             cmp.l -(a0),a6
01:000023F4 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F6 BBE0            	  3756:             cmp.l -(a0),a5
01:000023F8 66FE            	  3757:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FA B9E0            	  3758:             cmp.l -(a0),a4
01:000023FC 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FE B7E0            	  3760:             cmp.l -(a0),a3
01:00002400 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002402 B5E0            	  3762:             cmp.l -(a0),a2
01:00002404 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002406 B3E0            	  3764:             cmp.l -(a0),a1
01:00002408 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000240A B1E0            	  3766:             cmp.l -(a0),a0
                            	  3767: *            bne.s *                   * Check Z Flag  beq/bne 0
01:0000240C BEA0            	  3768:             cmp.l -(a0),d7
01:0000240E 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002410 BCA0            	  3770:             cmp.l -(a0),d6
01:00002412 66FE            	  3771:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002414 BAA0            	  3772:             cmp.l -(a0),d5
01:00002416 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002418 B8A0            	  3774:             cmp.l -(a0),d4
01:0000241A 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000241C B6A0            	  3776:             cmp.l -(a0),d3
01:0000241E 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002420 B4A0            	  3778:             cmp.l -(a0),d2
01:00002422 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002424 B2A0            	  3780:             cmp.l -(a0),d1
01:00002426 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002428 B0A0            	  3782:             cmp.l -(a0),d0
01:0000242A 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3784: 
                            	  3785: 
                            	  3786: 
                            	  3787: *     ----
                            	  3788: 
                            	  3789: *     WORD - Memory --> Registers
01:0000242C 7000            	  3790:             moveq  #$00000000,d0
01:0000242E 7200            	  3791:             moveq  #$00000000,d1
01:00002430 7400            	  3792:             moveq  #$00000000,d2
01:00002432 7600            	  3793:             moveq  #$00000000,d3
01:00002434 7800            	  3794:             moveq  #$00000000,d4
01:00002436 7A00            	  3795:             moveq  #$00000000,d5
01:00002438 7C00            	  3796:             moveq  #$00000000,d6
01:0000243A 7E00            	  3797:             moveq  #$00000000,d7
01:0000243C 91C8            	  3798:             move.l #$00000000,a0
01:0000243E 93C9            	  3799:             move.l #$00000000,a1
01:00002440 95CA            	  3800:             move.l #$00000000,a2
01:00002442 97CB            	  3801:             move.l #$00000000,a3
01:00002444 99CC            	  3802:             move.l #$00000000,a4
01:00002446 9BCD            	  3803:             move.l #$00000000,a5
01:00002448 9DCE            	  3804:             move.l #$00000000,a6
                            	  3805: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3806: 
01:0000244A 4CB82A550100    	  3807:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3808: 
01:00002450 B0BCFFFFD0D0    	  3809:             cmp.l #$FFFFD0D0,d0
01:00002456 66FE            	  3810:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002458 B4BCFFFFD1D1    	  3811:             cmp.l #$FFFFD1D1,d2
01:0000245E 66FE            	  3812:             bne.s *                  * Check Z Flag  beq/bne 0
01:00002460 B8BCFFFFD2D2    	  3813:             cmp.l #$FFFFD2D2,d4
01:00002466 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002468 BCBCFFFFD3D3    	  3815:             cmp.l #$FFFFD3D3,d6
01:0000246E 66FE            	  3816:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002470 B2FCD4D4        	  3817:             cmp.l #$FFFFD4D4,a1
01:00002474 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002476 B6FCD5D5        	  3819:             cmp.l #$FFFFD5D5,a3
01:0000247A 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000247C BAFCD6D6        	  3821:             cmp.l #$FFFFD6D6,a5
01:00002480 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3823: 
                            	  3824: 
                            	  3825: *     LONG - Memory --> Registers
01:00002482 7000            	  3826:             moveq  #$00000000,d0
01:00002484 7200            	  3827:             moveq  #$00000000,d1
01:00002486 7400            	  3828:             moveq  #$00000000,d2
01:00002488 7600            	  3829:             moveq  #$00000000,d3
01:0000248A 7800            	  3830:             moveq  #$00000000,d4
01:0000248C 7A00            	  3831:             moveq  #$00000000,d5
01:0000248E 7C00            	  3832:             moveq  #$00000000,d6
01:00002490 7E00            	  3833:             moveq  #$00000000,d7
01:00002492 91C8            	  3834:             move.l #$00000000,a0
01:00002494 93C9            	  3835:             move.l #$00000000,a1
01:00002496 95CA            	  3836:             move.l #$00000000,a2
01:00002498 97CB            	  3837:             move.l #$00000000,a3
01:0000249A 99CC            	  3838:             move.l #$00000000,a4
01:0000249C 9BCD            	  3839:             move.l #$00000000,a5
01:0000249E 9DCE            	  3840:             move.l #$00000000,a6
                            	  3841: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3842: 
01:000024A0 4CF82A550120    	  3843:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3844: 
01:000024A6 B0BCD0D0D0D0    	  3845:             cmp.l #$D0D0D0D0,d0
01:000024AC 66FE            	  3846:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024AE B4BCD1D1D1D1    	  3847:             cmp.l #$D1D1D1D1,d2
01:000024B4 66FE            	  3848:             bne.s *                  * Check Z Flag  beq/bne 0
01:000024B6 B8BCD2D2D2D2    	  3849:             cmp.l #$D2D2D2D2,d4
01:000024BC 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024BE BCBCD3D3D3D3    	  3851:             cmp.l #$D3D3D3D3,d6
01:000024C4 66FE            	  3852:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024C6 B3FCD4D4D4D4    	  3853:             cmp.l #$D4D4D4D4,a1
01:000024CC 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024CE B7FCD5D5D5D5    	  3855:             cmp.l #$D5D5D5D5,a3
01:000024D4 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024D6 BBFCD6D6D6D6    	  3857:             cmp.l #$D6D6D6D6,a5
01:000024DC 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3859: 
01:000024DE 4E75            	  3860:             rts
                            	  3861: 
                            	  3862: 
                            	  3863: *-----------------------------------------------------------
                            	  3864: *-----------------------------------------------------------
                            	  3865: * OPCODE : ABCD
                            	  3866: *-----------------------------------------------------------
                            	  3867: *-----------------------------------------------------------
                            	  3868: op_ABCD:
                            	  3869: 
                            	  3870: *     Test with X Flag CLEARED
01:000024E0 307C0110        	  3871:                 move.l #$00000110,a0 * Address pointer-X
01:000024E4 327C0120        	  3872:                 move.l #$00000120,a1 * Address pointer-Y
01:000024E8 7000            	  3873:                 moveq  #$00000000,d0 * BCD byte-X
01:000024EA 7200            	  3874:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024EC 7400            	  3875:                 moveq  #$00000000,d2
01:000024EE 7600            	  3876:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000024F0 7800            	  3877:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000024F2 7A00            	  3878:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000024F4 2C3C00000099    	  3879:                 move.l #$00000099,d6 * Inner loop counter
01:000024FA 2E3C00000099    	  3880:                 move.l #$00000099,d7 * Outer loop counter
                            	  3881: 
01:00002500 2007            	  3882: ABCD_OUTER1:    move.l d7,d0
01:00002502 2206            	  3883: ABCD_INNER1:    move.l d6,d1
01:00002504 023C00EF        	  3884:                 andi.b #$EF,CCR     * Clear X Flag
01:00002508 307C0110        	  3885:                 move.l #$00000110,a0 * Address pointer-X
01:0000250C 327C0120        	  3886:                 move.l #$00000120,a1 * Address pointer-Y
01:00002510 1140FFFF        	  3887:                 move.b d0,-1(a0)
01:00002514 1341FFFF        	  3888:                 move.b d1,-1(a1)
                            	  3889: 
01:00002518 C300            	  3890:                 abcd d0,d1
01:0000251A 6402            	  3891:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:0000251C 5284            	  3892:                 add.l #1,d4
01:0000251E DA81            	  3893: ABCD_NO_C1:     add.l d1,d5
                            	  3894: 
01:00002520 C308            	  3895:                 abcd -(a0),-(a1)
01:00002522 6402            	  3896:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002524 5284            	  3897:                 add.l #1,d4
01:00002526 D611            	  3898: ABCD_NO_C2:     add.b (a1),d3
                            	  3899: 
                            	  3900: 
01:00002528 51CEFFD8        	  3901:                 dbf d6,ABCD_INNER1
01:0000252C 2C3C00000099    	  3902:                 move.l #$00000099,d6
01:00002532 51CFFFCC        	  3903:                 dbf d7,ABCD_OUTER1
01:00002536 0C8400005AFC    	  3904:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:0000253C 66FE            	  3905:                 bne.s *
01:0000253E 0C85001C9A34    	  3906:                 cmpi.l #$001C9A34,d5
01:00002544 66FE            	  3907:                 bne.s *
01:00002546 0C8300000034    	  3908:                 cmpi.l #$00000034,d3
01:0000254C 66FE            	  3909:                 bne.s *
                            	  3910: 
                            	  3911: *     Test with X Flag SET
01:0000254E 307C0110        	  3912:                 move.l #$00000110,a0 * Address pointer-X
01:00002552 327C0120        	  3913:                 move.l #$00000120,a1 * Address pointer-Y
01:00002556 7000            	  3914:                 moveq  #$00000000,d0 * BCD byte-X
01:00002558 7200            	  3915:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000255A 7400            	  3916:                 moveq  #$00000000,d2
01:0000255C 7600            	  3917:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:0000255E 7800            	  3918:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002560 7A00            	  3919:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002562 2C3C00000099    	  3920:                 move.l #$00000099,d6 * Inner loop counter
01:00002568 2E3C00000099    	  3921:                 move.l #$00000099,d7 * Outer loop counter
                            	  3922: 
01:0000256E 2007            	  3923: ABCD_OUTER2:    move.l d7,d0
01:00002570 2206            	  3924: ABCD_INNER2:    move.l d6,d1
01:00002572 003C0010        	  3925:                 ori.b #$10,CCR      * Set X Flag
01:00002576 307C0110        	  3926:                 move.l #$00000110,a0 * Address pointer-X
01:0000257A 327C0120        	  3927:                 move.l #$00000120,a1 * Address pointer-Y
01:0000257E 1140FFFF        	  3928:                 move.b d0,-1(a0)
01:00002582 1341FFFF        	  3929:                 move.b d1,-1(a1)
                            	  3930: 
01:00002586 C300            	  3931:                 abcd d0,d1
01:00002588 6402            	  3932:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:0000258A 5284            	  3933:                 add.l #1,d4
01:0000258C DA81            	  3934: ABCD_NO_C3:     add.l d1,d5
                            	  3935: 
01:0000258E C308            	  3936:                 abcd -(a0),-(a1)
01:00002590 6402            	  3937:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002592 5284            	  3938:                 add.l #1,d4
01:00002594 D611            	  3939: ABCD_NO_C4:     add.b (a1),d3
                            	  3940: 
                            	  3941: 
01:00002596 51CEFFD8        	  3942:                 dbf d6,ABCD_INNER2
01:0000259A 2C3C00000099    	  3943:                 move.l #$00000099,d6
01:000025A0 51CFFFCC        	  3944:                 dbf d7,ABCD_OUTER2
01:000025A4 0C8400005B60    	  3945:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:000025AA 66FE            	  3946:                 bne.s *
01:000025AC 0C85001CCFC8    	  3947:                 cmpi.l #$001CCFC8,d5
01:000025B2 66FE            	  3948:                 bne.s *
01:000025B4 0C8300000034    	  3949:                 cmpi.l #$00000034,d3
01:000025BA 66FE            	  3950:                 bne.s *
                            	  3951: 
                            	  3952: *             Quick check of Z Flag
01:000025BC 4200            	  3953:                 move.b #$00,d0
01:000025BE 4201            	  3954:                 move.b #$00,d1
01:000025C0 44FC0000        	  3955:                 move #$00,CCR              * Set Z flag to 0
01:000025C4 C101            	  3956:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025C6 67FE            	  3957:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3958: 
01:000025C8 103C0001        	  3959:                 move.b #$01,d0
01:000025CC 4201            	  3960:                 move.b #$00,d1
01:000025CE 44FC0004        	  3961:                 move #$04,CCR              * Set Z flag to 0
01:000025D2 C101            	  3962:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025D4 67FE            	  3963:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3964: 
01:000025D6 4E75            	  3965:                 rts
                            	  3966: 
                            	  3967: *-----------------------------------------------------------
                            	  3968: *-----------------------------------------------------------
                            	  3969: * OPCODE : SBCD
                            	  3970: *-----------------------------------------------------------
                            	  3971: *-----------------------------------------------------------
                            	  3972: op_SBCD:
                            	  3973: 
                            	  3974: *     Test with X Flag CLEARED
01:000025D8 307C0110        	  3975:                 move.l #$00000110,a0 * Address pointer-X
01:000025DC 327C0120        	  3976:                 move.l #$00000120,a1 * Address pointer-Y
01:000025E0 7000            	  3977:                 moveq  #$00000000,d0 * BCD byte-X
01:000025E2 7200            	  3978:                 moveq  #$00000000,d1 * BCD byte-Y
01:000025E4 7400            	  3979:                 moveq  #$00000000,d2
01:000025E6 7600            	  3980:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000025E8 7800            	  3981:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025EA 7A00            	  3982:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000025EC 2C3C00000099    	  3983:                 move.l #$00000099,d6 * Inner loop counter
01:000025F2 2E3C00000099    	  3984:                 move.l #$00000099,d7 * Outer loop counter
                            	  3985: 
01:000025F8 2007            	  3986: SBCD_OUTER1:    move.l d7,d0
01:000025FA 2206            	  3987: SBCD_INNER1:    move.l d6,d1
01:000025FC 023C00EF        	  3988:                 andi.b #$EF,CCR     * Clear X Flag
01:00002600 307C0110        	  3989:                 move.l #$00000110,a0 * Address pointer-X
01:00002604 327C0120        	  3990:                 move.l #$00000120,a1 * Address pointer-Y
01:00002608 1140FFFF        	  3991:                 move.b d0,-1(a0)
01:0000260C 1341FFFF        	  3992:                 move.b d1,-1(a1)
                            	  3993: 
01:00002610 8300            	  3994:                 sbcd d0,d1
01:00002612 6402            	  3995:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002614 5284            	  3996:                 add.l #1,d4
01:00002616 DA81            	  3997: SBCD_NO_C1:     add.l d1,d5
                            	  3998: 
01:00002618 8308            	  3999:                 sbcd -(a0),-(a1)
01:0000261A 6402            	  4000:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:0000261C 5284            	  4001:                 add.l #1,d4
01:0000261E D611            	  4002: SBCD_NO_C2:     add.b (a1),d3
                            	  4003: 
                            	  4004: 
01:00002620 51CEFFD8        	  4005:                 dbf d6,SBCD_INNER1
01:00002624 2C3C00000099    	  4006:                 move.l #$00000099,d6
01:0000262A 51CFFFCC        	  4007:                 dbf d7,SBCD_OUTER1
01:0000262E 0C8400005C0A    	  4008:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:00002634 66FE            	  4009:                 bne.s *
01:00002636 0C85001C459E    	  4010:                 cmpi.l #$001C459E,d5
01:0000263C 66FE            	  4011:                 bne.s *
01:0000263E 0C830000009E    	  4012:                 cmpi.l #$0000009E,d3
01:00002644 66FE            	  4013:                 bne.s *
                            	  4014: 
                            	  4015: *     Test with X Flag SET
01:00002646 307C0110        	  4016:                 move.l #$00000110,a0 * Address pointer-X
01:0000264A 327C0120        	  4017:                 move.l #$00000120,a1 * Address pointer-Y
01:0000264E 7000            	  4018:                 moveq  #$00000000,d0 * BCD byte-X
01:00002650 7200            	  4019:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002652 7400            	  4020:                 moveq  #$00000000,d2
01:00002654 7600            	  4021:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002656 7800            	  4022:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002658 7A00            	  4023:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:0000265A 2C3C00000099    	  4024:                 move.l #$00000099,d6 * Inner loop counter
01:00002660 2E3C00000099    	  4025:                 move.l #$00000099,d7 * Outer loop counter
                            	  4026: 
01:00002666 2007            	  4027: SBCD_OUTER2:    move.l d7,d0
01:00002668 2206            	  4028: SBCD_INNER2:    move.l d6,d1
01:0000266A 003C0010        	  4029:                 ori.b #$10,CCR      * Set X Flag
01:0000266E 307C0110        	  4030:                 move.l #$00000110,a0 * Address pointer-X
01:00002672 327C0120        	  4031:                 move.l #$00000120,a1 * Address pointer-Y
01:00002676 1140FFFF        	  4032:                 move.b d0,-1(a0)
01:0000267A 1341FFFF        	  4033:                 move.b d1,-1(a1)
                            	  4034: 
01:0000267E 8300            	  4035:                 sbcd d0,d1
01:00002680 6402            	  4036:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002682 5284            	  4037:                 add.l #1,d4
01:00002684 DA81            	  4038: SBCD_NO_C3:     add.l d1,d5
                            	  4039: 
01:00002686 8308            	  4040:                 sbcd -(a0),-(a1)
01:00002688 6402            	  4041:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:0000268A 5284            	  4042:                 add.l #1,d4
01:0000268C D611            	  4043: SBCD_NO_C4:     add.b (a1),d3
                            	  4044: 
01:0000268E 51CEFFD8        	  4045:                 dbf d6,SBCD_INNER2
01:00002692 2C3C00000099    	  4046:                 move.l #$00000099,d6
01:00002698 51CFFFCC        	  4047:                 dbf d7,SBCD_OUTER2
01:0000269C 0C8400005CA4    	  4048:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:000026A2 66FE            	  4049:                 bne.s *
01:000026A4 0C85001C5C66    	  4050:                 cmpi.l #$001C5C66,d5
01:000026AA 66FE            	  4051:                 bne.s *
01:000026AC 0C830000009E    	  4052:                 cmpi.l #$0000009E,d3
01:000026B2 66FE            	  4053:                 bne.s *
                            	  4054: 
                            	  4055: 
                            	  4056: *             Quick check of Z Flag
01:000026B4 4200            	  4057:                 move.b #$00,d0
01:000026B6 4201            	  4058:                 move.b #$00,d1
01:000026B8 44FC0000        	  4059:                 move #$00,CCR              * Set Z flag to 0
01:000026BC 8101            	  4060:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026BE 67FE            	  4061:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4062: 
01:000026C0 103C0001        	  4063:                 move.b #$01,d0
01:000026C4 4201            	  4064:                 move.b #$00,d1
01:000026C6 44FC0004        	  4065:                 move #$04,CCR              * Set Z flag to 0
01:000026CA 8101            	  4066:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026CC 67FE            	  4067:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4068: 
01:000026CE 4E75            	  4069:                 rts
                            	  4070: 
                            	  4071: *-----------------------------------------------------------
                            	  4072: *-----------------------------------------------------------
                            	  4073: * OPCODE : NBCD
                            	  4074: *-----------------------------------------------------------
                            	  4075: *-----------------------------------------------------------
                            	  4076: op_NBCD:
                            	  4077: 
                            	  4078: *        NBCD to a  Register
                            	  4079: 
01:000026D0 7000            	  4080:                 moveq  #$00000000,d0 * BCD byte
01:000026D2 7200            	  4081:                 moveq  #$00000000,d1
01:000026D4 7400            	  4082:                 moveq  #$00000000,d2
01:000026D6 7600            	  4083:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000026D8 7800            	  4084:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026DA 7A00            	  4085:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026DC 2C3C00000099    	  4086:                 move.l #$00000099,d6
01:000026E2 2E3C00000099    	  4087:                 move.l #$00000099,d7 * Loop counter
                            	  4088: 
01:000026E8 2007            	  4089: NBCD_LOOP:      move.l d7,d0
01:000026EA 44FC0004        	  4090:                 move #$04,CCR        * Set Z flag to 0
                            	  4091: 
01:000026EE 4800            	  4092:                 nbcd d0
                            	  4093: 
01:000026F0 6402            	  4094:                 bcc.s NBCD_NO_C         * Check C Flag
01:000026F2 5284            	  4095:                 add.l #1,d4
01:000026F4 6602            	  4096: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:000026F6 5283            	  4097:                 add.l #1,d3
01:000026F8 DA80            	  4098: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4099: 
01:000026FA 51CFFFEC        	  4100:                 dbf d7,NBCD_LOOP
                            	  4101: 
01:000026FE 0C8300000001    	  4102:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002704 66FE            	  4103:                 bne.s *
01:00002706 0C8400000099    	  4104:                 cmpi.l #$00000099,d4
01:0000270C 66FE            	  4105:                 bne.s *
01:0000270E 0C8500002E3B    	  4106:                 cmpi.l #$00002E3B,d5
01:00002714 66FE            	  4107:                 bne.s *
                            	  4108: 
                            	  4109: 
                            	  4110: *        NBCD to a memory location
                            	  4111: 
01:00002716 7000            	  4112:                 moveq  #$00000000,d0 * BCD byte
01:00002718 7200            	  4113:                 moveq  #$00000000,d1
01:0000271A 7400            	  4114:                 moveq  #$00000000,d2
01:0000271C 7600            	  4115:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:0000271E 7800            	  4116:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002720 7A00            	  4117:                 moveq  #$00000000,d5 * Cumulative BCD results
01:00002722 2C3C00000099    	  4118:                 move.l #$00000099,d6
01:00002728 2E3C00000099    	  4119:                 move.l #$00000099,d7 * Loop counter
                            	  4120: 
01:0000272E 11C70100        	  4121: NBCD_LOOP1:     move.b d7,$00000100
01:00002732 44FC0004        	  4122:                 move #$04,CCR        * Set Z flag to 0
                            	  4123: 
01:00002736 48380100        	  4124:                 nbcd $00000100
01:0000273A 10380100        	  4125:                 move.b $00000100,d0
                            	  4126: 
01:0000273E 6402            	  4127:                 bcc.s NBCD_NO_C1        * Check C Flag
01:00002740 5284            	  4128:                 add.l #1,d4
01:00002742 6602            	  4129: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:00002744 5283            	  4130:                 add.l #1,d3
01:00002746 DA80            	  4131: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4132: 
01:00002748 51CFFFE4        	  4133:                 dbf d7,NBCD_LOOP1
                            	  4134: 
01:0000274C 0C8300000001    	  4135:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002752 66FE            	  4136:                 bne.s *
01:00002754 4A84            	  4137:                 cmpi.l #$00000000,d4
01:00002756 66FE            	  4138:                 bne.s *
01:00002758 0C8500002E3B    	  4139:                 cmpi.l #$00002E3B,d5
01:0000275E 66FE            	  4140:                 bne.s *
                            	  4141: 
                            	  4142: 
01:00002760 4E75            	  4143:                 rts
                            	  4144: 
                            	  4145: 
                            	  4146: 
                            	  4147: *-----------------------------------------------------------
                            	  4148: *-----------------------------------------------------------
                            	  4149: * OPCODE : TRAPV
                            	  4150: *-----------------------------------------------------------
                            	  4151: *-----------------------------------------------------------
                            	  4152: op_TRAPV:
                            	  4153: 
                            	  4154: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4155: 
01:00002762 7000            	  4156:                 moveq  #$00000000,d0 * Clear d0
                            	  4157: 
01:00002764 44FC0000        	  4158:                 move #$00,CCR        * Clear V flag
01:00002768 4E76            	  4159:                 trapv
01:0000276A 4A80            	  4160:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:0000276C 66FE            	  4161:                 bne.s *
                            	  4162: 
01:0000276E 44FC0002        	  4163:                 move #$02,CCR        * Set V flag
01:00002772 4E76            	  4164:                 trapv
01:00002774 0C8012345678    	  4165:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:0000277A 66FE            	  4166:                 bne.s *
                            	  4167: 
                            	  4168: 
01:0000277C 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: 
                            	  4173: *-----------------------------------------------------------
                            	  4174: *-----------------------------------------------------------
                            	  4175: * OPCODE : RTR
                            	  4176: *-----------------------------------------------------------
                            	  4177: *-----------------------------------------------------------
                            	  4178: 
                            	  4179: op_RTR:
                            	  4180: 
                            	  4181: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4182: 
01:0000277E 41FA000C        	  4183:                 lea RTR_DONE,a0
01:00002782 2F08            	  4184:                 move.l a0,-(a7)     * push destination PC to the stack
01:00002784 2F3C0000FF15    	  4185:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
01:0000278A 4E77            	  4186:                 rtr
                            	  4187: 
01:0000278C 4180            	  4188: RTR_DONE:       move.l SR,d0
01:0000278E 0240001F        	  4189:                 andi #$1F,d0
01:00002792 0C400015        	  4190:                 cmpi #$15,d0
01:00002796 66FE            	  4191:                 bne.s *
                            	  4192: 
01:00002798 4E75            	  4193:                 rts
                            	  4194: 
                            	  4195: 
01:0000279A 283C44444444    	  4196: BSR_FAR2:       move.l #$44444444,d4
01:000027A0 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
                            	  4200: *-----------------------------------------------------------
                            	  4201: *-----------------------------------------------------------
                            	  4202: * OPCODE : BCC
                            	  4203: *-----------------------------------------------------------
                            	  4204: *-----------------------------------------------------------
                            	  4205: 
01:000027A2 44FC0000        	  4206: op_BCC:         move #$00,CCR
01:000027A6 6202            	  4207:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:000027A8 60FE            	  4208:                 bra.s *
                            	  4209: 
01:000027AA 44FC0001        	  4210: BCC1:           move #$01,CCR
01:000027AE 63000004        	  4211:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:000027B2 60FE            	  4212:                 bra.s *
                            	  4213: 
01:000027B4 44FC0000        	  4214: BCC2:           move #$00,CCR
01:000027B8 6402            	  4215:                 bcc.s BCC3            * Carry Clear         C=0
01:000027BA 60FE            	  4216:                 bra.s *
                            	  4217: 
01:000027BC 44FC0001        	  4218: BCC3:           move #$01,CCR
01:000027C0 65000004        	  4219:                 bcs.w BCC4            * Carry Set           C=1
01:000027C4 60FE            	  4220:                 bra.s *
                            	  4221: 
01:000027C6 44FC0000        	  4222: BCC4:           move #$00,CCR
01:000027CA 6602            	  4223:                 bne.s BCC5            * Not Equal           Z=0
01:000027CC 60FE            	  4224:                 bra.s *
                            	  4225: 
01:000027CE 44FC0004        	  4226: BCC5:           move #$04,CCR
01:000027D2 67000004        	  4227:                 beq.w BCC6            * Equal               Z=1
01:000027D6 60FE            	  4228:                 bra.s *
                            	  4229: 
01:000027D8 44FC0000        	  4230: BCC6:           move #$00,CCR
01:000027DC 6802            	  4231:                 bvc.s BCC7            * V Clear             V=0
01:000027DE 60FE            	  4232:                 bra.s *
                            	  4233: 
01:000027E0 44FC0002        	  4234: BCC7:           move #$02,CCR
01:000027E4 69000004        	  4235:                 bvs.w BCC8            * V Set               V=1
01:000027E8 60FE            	  4236:                 bra.s *
                            	  4237: 
01:000027EA 44FC0000        	  4238: BCC8:           move #$00,CCR
01:000027EE 6A02            	  4239:                 bpl.s BCC9            * Plus                N=0
01:000027F0 60FE            	  4240:                 bra.s *
                            	  4241: 
01:000027F2 44FC0008        	  4242: BCC9:           move #$08,CCR
01:000027F6 6B000004        	  4243:                 bmi.w BCC10           * Minus               N=1
01:000027FA 60FE            	  4244:                 bra.s *
                            	  4245: 
01:000027FC 44FC0000        	  4246: BCC10:          move #$00,CCR
01:00002800 6C02            	  4247:                 bge.s BCC11           * Greater or Equal    N=V
01:00002802 60FE            	  4248:                 bra.s *
                            	  4249: 
01:00002804 44FC0002        	  4250: BCC11:          move #$02,CCR
01:00002808 6D000004        	  4251:                 blt.w BCC12           * Less Than           N!=V
01:0000280C 60FE            	  4252:                 bra.s *
                            	  4253: 
01:0000280E 44FC000A        	  4254: BCC12:          move #$0A,CCR
01:00002812 6E02            	  4255:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:00002814 60FE            	  4256:                 bra.s *
                            	  4257: 
01:00002816 44FC0006        	  4258: BCC13:          move #$06,CCR
01:0000281A 6F000004        	  4259:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:0000281E 60FE            	  4260:                 bra.s *
                            	  4261: 
                            	  4262: 
01:00002820 4E75            	  4263: BCC14:          rts
                            	  4264: 
                            	  4265: 
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: * OPCODE : DBCC
                            	  4269: *-----------------------------------------------------------
                            	  4270: *-----------------------------------------------------------
                            	  4271: 
01:00002822 7003            	  4272: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:00002824 7200            	  4273:                 moveq  #$00000000,d1    * Accumulator
01:00002826 44FC0000        	  4274:                 move #$00,CCR
                            	  4275: 
01:0000282A 5201            	  4276: DBCC_LOOP1:     addi.b #$1,d1
01:0000282C 51C8FFFC        	  4277:                 dbf d0,DBCC_LOOP1
                            	  4278: 
01:00002830 0C8100000004    	  4279:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:00002836 66FE            	  4280:                 bne.s *
                            	  4281: 
01:00002838 5201            	  4282: DBCC_LOOP2:     addi.b #$1,d1
01:0000283A 54C8FFFC        	  4283:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4284: 
01:0000283E 0C8100000005    	  4285:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:00002844 66FE            	  4286:                 bne.s *
                            	  4287: 
01:00002846 4E75            	  4288:                 rts
                            	  4289: 
                            	  4290: 
                            	  4291: *-----------------------------------------------------------
                            	  4292: *-----------------------------------------------------------
                            	  4293: * OPCODE : SCC
                            	  4294: *-----------------------------------------------------------
                            	  4295: *-----------------------------------------------------------
                            	  4296: 
01:00002848 44FC0001        	  4297: op_SCC:         move #$01,CCR
01:0000284C 54F900010000    	  4298:                 scc $00010000                   * Clear the EA byte
01:00002852 4A3900010000    	  4299:                 cmpi.b #$00,$00010000
01:00002858 66FE            	  4300:                 bne.s *
                            	  4301: 
01:0000285A 44FC0000        	  4302:                 move #$00,CCR
01:0000285E 54F900010000    	  4303:                 scc $00010000                   * Set the EA byte to 0xFF
01:00002864 0C3900FF00010000	  4304:                 cmpi.b #$FF,$00010000
01:0000286C 66FE            	  4305:                 bne.s *
                            	  4306: 
01:0000286E 4E75            	  4307:                 rts
                            	  4308: 
                            	  4309: 
                            	  4310: 
                            	  4311: *-----------------------------------------------------------
                            	  4312: *-----------------------------------------------------------
                            	  4313: * OPCODE : ADDQ
                            	  4314: *-----------------------------------------------------------
                            	  4315: *-----------------------------------------------------------
                            	  4316: 
                            	  4317: op_ADDQ:
                            	  4318: 
                            	  4319: *     BYTE
01:00002870 203C000000FF    	  4320:                 move.l #$000000FF,d0    * Loop counter
01:00002876 7200            	  4321:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002878 7400            	  4322:                 moveq  #$00000000,d2    * Data results accumulator
01:0000287A 7600            	  4323:                 moveq  #$00000000,d3
01:0000287C 7800            	  4324:                 moveq  #$00000000,d4
01:0000287E 7A00            	  4325:                 moveq  #$00000000,d5
01:00002880 7C00            	  4326:                 moveq  #$00000000,d6
01:00002882 7E00            	  4327:                 moveq  #$00000000,d7
                            	  4328: 
01:00002884 5605            	  4329: ADDQ_LOOP1:     addq.b #3,d5
01:00002886 4186            	  4330:                 move.l SR,d6
01:00002888 02860000001F    	  4331:                 andi.l #$1F,d6        * Isolate flags
01:0000288E D286            	  4332:                 add.l d6,d1           * Copy flag results into accumulator
01:00002890 D485            	  4333:                 add.l d5,d2           * Copy data results into data accumulator
01:00002892 51C8FFF0        	  4334:                 dbf d0,ADDQ_LOOP1
                            	  4335: 
01:00002896 0C810000043D    	  4336:                 cmpi.l #$0000043D,d1
01:0000289C 66FE            	  4337:                 bne.s *
01:0000289E 0C8200007F80    	  4338:                 cmpi.l #$00007F80,d2
01:000028A4 66FE            	  4339:                 bne.s *
                            	  4340: 
                            	  4341: 
                            	  4342: *     WORD
01:000028A6 203C000000FF    	  4343:                 move.l #$000000FF,d0    * Loop counter
01:000028AC 7200            	  4344:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028AE 7400            	  4345:                 moveq  #$00000000,d2    * Data results accumulator
01:000028B0 7600            	  4346:                 moveq  #$00000000,d3
01:000028B2 7800            	  4347:                 moveq  #$00000000,d4
01:000028B4 2A3C0000FFF0    	  4348:                 move.l #$0000FFF0,d5
01:000028BA 7C00            	  4349:                 moveq  #$00000000,d6
01:000028BC 7E00            	  4350:                 moveq  #$00000000,d7
01:000028BE 307C0100        	  4351:                 move.l #$00000100,a0
                            	  4352: 
01:000028C2 5A45            	  4353: ADDQ_LOOP2:     addq.w #5,d5
01:000028C4 4186            	  4354:                 move.l SR,d6
01:000028C6 02860000001F    	  4355:                 andi.l #$1F,d6        * Isolate flags
01:000028CC D286            	  4356:                 add.l d6,d1           * Copy flag results into accumulator
01:000028CE D485            	  4357:                 add.l d5,d2           * Copy data results into data accumulator
01:000028D0 51C8FFF0        	  4358:                 dbf d0,ADDQ_LOOP2
                            	  4359: 
01:000028D4 0C8100000029    	  4360:                 cmpi.l #$00000029,d1
01:000028DA 66FE            	  4361:                 bne.s *
01:000028DC 0C8200057280    	  4362:                 cmpi.l #$00057280,d2
01:000028E2 66FE            	  4363:                 bne.s *
                            	  4364: 
                            	  4365: 
                            	  4366: *     LONG
01:000028E4 203C000000FF    	  4367:                 move.l #$000000FF,d0    * Loop counter
01:000028EA 7200            	  4368:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028EC 7400            	  4369:                 moveq  #$00000000,d2    * Data results accumulator
01:000028EE 7600            	  4370:                 moveq  #$00000000,d3
01:000028F0 7800            	  4371:                 moveq  #$00000000,d4
01:000028F2 7AF0            	  4372:                 move.l #$FFFFFFF0,d5
01:000028F4 7C00            	  4373:                 moveq  #$00000000,d6
01:000028F6 7E00            	  4374:                 moveq  #$00000000,d7
                            	  4375: 
01:000028F8 5285            	  4376: ADDQ_LOOP3:     addq.l #1,d5
01:000028FA 4186            	  4377:                 move.l SR,d6
01:000028FC 02860000001F    	  4378:                 andi.l #$1F,d6        * Isolate flags
01:00002902 D286            	  4379:                 add.l d6,d1           * Copy flag results into accumulator
01:00002904 D485            	  4380:                 add.l d5,d2           * Copy data results into data accumulator
01:00002906 51C8FFF0        	  4381:                 dbf d0,ADDQ_LOOP3
                            	  4382: 
01:0000290A 0C810000008D    	  4383:                 cmpi.l #$0000008D,d1
01:00002910 66FE            	  4384:                 bne.s *
01:00002912 0C8200007080    	  4385:                 cmpi.l #$00007080,d2
01:00002918 66FE            	  4386:                 bne.s *
                            	  4387: 
                            	  4388: *     Check that Flags are not updated for Address registers
01:0000291A 207C0000FFFF    	  4389:                 move.l #$0000FFFF,a0
01:00002920 44FC0000        	  4390:                 move #$00,CCR         * Clear flags
01:00002924 5E48            	  4391:                 addq.w #$7,a0
01:00002926 65FE            	  4392:                 bcs.s *
                            	  4393: 
01:00002928 4E75            	  4394:                 rts
                            	  4395: 
                            	  4396: 
                            	  4397: 
                            	  4398: *-----------------------------------------------------------
                            	  4399: *-----------------------------------------------------------
                            	  4400: * OPCODE : SUBQ
                            	  4401: *-----------------------------------------------------------
                            	  4402: *-----------------------------------------------------------
                            	  4403: 
                            	  4404: op_SUBQ:
                            	  4405: 
                            	  4406: *     BYTE
01:0000292A 203C000000FF    	  4407:                 move.l #$000000FF,d0    * Loop counter
01:00002930 7200            	  4408:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002932 243C00001234    	  4409:                 move.l #$00001234,d2    * Data results accumulator
01:00002938 7600            	  4410:                 moveq  #$00000000,d3
01:0000293A 7800            	  4411:                 moveq  #$00000000,d4
01:0000293C 7A12            	  4412:                 moveq  #$00000012,d5
01:0000293E 7C00            	  4413:                 moveq  #$00000000,d6
01:00002940 7E00            	  4414:                 moveq  #$00000000,d7
                            	  4415: 
01:00002942 5305            	  4416: SUBQ_LOOP1:     subq.b #1,d5
01:00002944 4186            	  4417:                 move.l SR,d6
01:00002946 02860000001F    	  4418:                 andi.l #$1F,d6        * Isolate flags
01:0000294C D286            	  4419:                 add.l d6,d1           * Copy flag results into accumulator
01:0000294E D485            	  4420:                 add.l d5,d2           * Copy data results into data accumulator
01:00002950 51C8FFF0        	  4421:                 dbf d0,SUBQ_LOOP1
                            	  4422: 
01:00002954 0C8100000417    	  4423:                 cmpi.l #$00000417,d1
01:0000295A 66FE            	  4424:                 bne.s *
01:0000295C 0C82000091B4    	  4425:                 cmpi.l #$000091B4,d2
01:00002962 66FE            	  4426:                 bne.s *
                            	  4427: 
                            	  4428: 
                            	  4429: *     WORD
01:00002964 203C000000FF    	  4430:                 move.l #$000000FF,d0    * Loop counter
01:0000296A 7200            	  4431:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000296C 7400            	  4432:                 moveq  #$00000000,d2    * Data results accumulator
01:0000296E 7600            	  4433:                 moveq  #$00000000,d3
01:00002970 7800            	  4434:                 moveq  #$00000000,d4
01:00002972 7A02            	  4435:                 moveq  #$00000002,d5
01:00002974 7C00            	  4436:                 moveq  #$00000000,d6
01:00002976 7E00            	  4437:                 moveq  #$00000000,d7
01:00002978 307C0100        	  4438:                 move.l #$00000100,a0
                            	  4439: 
01:0000297C 5B45            	  4440: SUBQ_LOOP2:     subq.w #5,d5
01:0000297E 4186            	  4441:                 move.l SR,d6
01:00002980 02860000001F    	  4442:                 andi.l #$1F,d6        * Isolate flags
01:00002986 D286            	  4443:                 add.l d6,d1           * Copy flag results into accumulator
01:00002988 D485            	  4444:                 add.l d5,d2           * Copy data results into data accumulator
01:0000298A 51C8FFF0        	  4445:                 dbf d0,SUBQ_LOOP2
                            	  4446: 
01:0000298E 0C8100000811    	  4447:                 cmpi.l #$00000811,d1
01:00002994 66FE            	  4448:                 bne.s *
01:00002996 0C8200FD7F80    	  4449:                 cmpi.l #$00FD7F80,d2
01:0000299C 66FE            	  4450:                 bne.s *
                            	  4451: 
                            	  4452: 
                            	  4453: *     LONG
01:0000299E 203C000000FF    	  4454:                 move.l #$000000FF,d0    * Loop counter
01:000029A4 7200            	  4455:                 moveq  #$00000000,d1    * Flag results accumulator
01:000029A6 7400            	  4456:                 moveq  #$00000000,d2    * Data results accumulator
01:000029A8 7600            	  4457:                 moveq  #$00000000,d3
01:000029AA 7800            	  4458:                 moveq  #$00000000,d4
01:000029AC 7A07            	  4459:                 moveq  #$00000007,d5
01:000029AE 7C00            	  4460:                 moveq  #$00000000,d6
01:000029B0 7E00            	  4461:                 moveq  #$00000000,d7
                            	  4462: 
01:000029B2 5385            	  4463: SUBQ_LOOP3:     subq.l #1,d5
01:000029B4 4186            	  4464:                 move.l SR,d6
01:000029B6 02860000001F    	  4465:                 andi.l #$1F,d6        * Isolate flags
01:000029BC D286            	  4466:                 add.l d6,d1           * Copy flag results into accumulator
01:000029BE D485            	  4467:                 add.l d5,d2           * Copy data results into data accumulator
01:000029C0 51C8FFF0        	  4468:                 dbf d0,SUBQ_LOOP3
                            	  4469: 
01:000029C4 0C81000007DD    	  4470:                 cmpi.l #$000007DD,d1
01:000029CA 66FE            	  4471:                 bne.s *
01:000029CC 0C82FFFF8680    	  4472:                 cmpi.l #$FFFF8680,d2
01:000029D2 66FE            	  4473:                 bne.s *
                            	  4474: 
                            	  4475: *     Check that Flags are not updated for Address registers
01:000029D4 207C0001FFFF    	  4476:                 move.l #$0001FFFF,a0
01:000029DA 44FC0000        	  4477:                 move #$00,CCR         * Clear flags
01:000029DE 5F48            	  4478:                 subq.w #$7,a0
01:000029E0 65FE            	  4479:                 bcs.s *
                            	  4480: 
01:000029E2 4E75            	  4481:                 rts
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: *-----------------------------------------------------------
                            	  4487: *-----------------------------------------------------------
                            	  4488: * OPCODE : MOVEQ
                            	  4489: *-----------------------------------------------------------
                            	  4490: *-----------------------------------------------------------
                            	  4491: 
                            	  4492: op_MOVEQ:
01:000029E4 7000            	  4493:                 moveq  #$00000000,d0
01:000029E6 7000            	  4494:                 moveq #$0,d0
01:000029E8 66FE            	  4495:                 bne.s *
01:000029EA 4A80            	  4496:                 cmpi.l #$00000000,d0
01:000029EC 66FE            	  4497:                 bne.s *
                            	  4498: 
01:000029EE 7000            	  4499:                 moveq  #$00000000,d0
01:000029F0 7080            	  4500:                 moveq #-128,d0
01:000029F2 67FE            	  4501:                 beq.s *
01:000029F4 6AFE            	  4502:                 bpl.s *
01:000029F6 0C80FFFFFF80    	  4503:                 cmpi.l #$FFFFFF80,d0
01:000029FC 66FE            	  4504:                 bne.s *
                            	  4505: 
                            	  4506: 
01:000029FE 4E75            	  4507:                 rts
                            	  4508: 
                            	  4509: 
                            	  4510: *-----------------------------------------------------------
                            	  4511: *-----------------------------------------------------------
                            	  4512: * OPCODE : DIVU
                            	  4513: *-----------------------------------------------------------
                            	  4514: *-----------------------------------------------------------
                            	  4515: 
                            	  4516: op_DIVU:
                            	  4517: 
01:00002A00 203CA5A5A5A5    	  4518:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A06 223C00005A5A    	  4519:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A0C 243CA5A5A5A5    	  4520:                 move.l #$a5a5a5a5,d2
01:00002A12 7600            	  4521:                 moveq  #$00000000,d3
01:00002A14 7800            	  4522:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A16 7A00            	  4523:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A18 7C0E            	  4524:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A1A 7E1E            	  4525:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4526: 
                            	  4527: 
01:00002A1C 80C1            	  4528: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:00002A1E 4183            	  4529:                 move.l SR,d3
01:00002A20 02830000000C    	  4530:                 andi.l #$0C,d3            * Isolate flags
01:00002A26 DA83            	  4531:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A28 D880            	  4532:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A2A E289            	  4533:                 lsr.l #$1,d1
                            	  4534: 
01:00002A2C 51CEFFEE        	  4535:                 dbf d6,DIVU_OUTER1
01:00002A30 E28A            	  4536:                 lsr.l #$1,d2
01:00002A32 2002            	  4537:                 move.l d2,d0
01:00002A34 223C00005A5A    	  4538:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A3A 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A3C 51CFFFDE        	  4540:                 dbf d7,DIVU_OUTER1
                            	  4541: 
01:00002A40 0C8492FEDB89    	  4542:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002A46 66FE            	  4543:                 bne.s *
                            	  4544: 
01:00002A48 0C8500000110    	  4545:                 cmpi.l #$00000110,d5      * Check the Flag results
01:00002A4E 66FE            	  4546:                 bne.s *
                            	  4547: 
                            	  4548: 
01:00002A50 4E75            	  4549:                 rts
                            	  4550: 
                            	  4551: 
                            	  4552: 
                            	  4553: *-----------------------------------------------------------
                            	  4554: *-----------------------------------------------------------
                            	  4555: * OPCODE : DIVS
                            	  4556: *-----------------------------------------------------------
                            	  4557: *-----------------------------------------------------------
                            	  4558: 
                            	  4559: op_DIVS:
                            	  4560: 
01:00002A52 203CA5A5A5A5    	  4561:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A58 223C00005A5A    	  4562:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A5E 243CA5A5A5A5    	  4563:                 move.l #$a5a5a5a5,d2
01:00002A64 7600            	  4564:                 moveq  #$00000000,d3
01:00002A66 7800            	  4565:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A68 7A00            	  4566:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A6A 7C0E            	  4567:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A6C 7E1E            	  4568:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4569: 
                            	  4570: 
01:00002A6E 81C1            	  4571: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:00002A70 4183            	  4572:                 move.l SR,d3
01:00002A72 02830000000C    	  4573:                 andi.l #$0C,d3            * Isolate flags
01:00002A78 DA83            	  4574:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A7A D880            	  4575:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A7C E289            	  4576:                 lsr.l #$1,d1
                            	  4577: 
01:00002A7E 51CEFFEE        	  4578:                 dbf d6,DIVS_OUTER1
01:00002A82 E28A            	  4579:                 lsr.l #$1,d2
01:00002A84 2002            	  4580:                 move.l d2,d0
01:00002A86 223C00005A5A    	  4581:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A8C 7C0E            	  4582:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A8E 51CFFFDE        	  4583:                 dbf d7,DIVS_OUTER1
                            	  4584: 
01:00002A92 0C844EC5D057    	  4585:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002A98 66FE            	  4586:                 bne.s *
                            	  4587: 
01:00002A9A 0C8500000038    	  4588:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002AA0 66FE            	  4589:                 bne.s *
                            	  4590: 
                            	  4591: 
01:00002AA2 4E75            	  4592:                 rts
                            	  4593: 
                            	  4594: 
                            	  4595: 
                            	  4596: *-----------------------------------------------------------
                            	  4597: *-----------------------------------------------------------
                            	  4598: * OPCODE : OR
                            	  4599: *-----------------------------------------------------------
                            	  4600: *-----------------------------------------------------------
                            	  4601: 
                            	  4602: op_OR:
                            	  4603: 
                            	  4604: *  * <EA> to Register
                            	  4605: 
01:00002AA4 203CA5A5A5A5    	  4606:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002AAA 223C8167E123    	  4607:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002AB0 243CA5A5A5A5    	  4608:                 move.l #$a5a5a5a5,d2
01:00002AB6 7600            	  4609:                 moveq  #$00000000,d3
01:00002AB8 7800            	  4610:                 moveq  #$00000000,d4       * Cumulative data results
01:00002ABA 7A00            	  4611:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002ABC 7C1E            	  4612:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ABE 7E1E            	  4613:                 move.l #$0000001E,d7       * Outer loop counter
01:00002AC0 307C0100        	  4614:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4615: 
                            	  4616: 
                            	  4617: OR_OUTER1:
                            	  4618: 
                            	  4619: *     BYTE
01:00002AC4 2081            	  4620:                 move.l d1,(a0)
01:00002AC6 8010            	  4621:                 or.b (a0),d0
01:00002AC8 4183            	  4622:                 move.l SR,d3
01:00002ACA 02830000000C    	  4623:                 andi.l #$0C,d3            * Isolate flags
01:00002AD0 DA83            	  4624:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AD2 D880            	  4625:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4626: 
                            	  4627: *     WORD
01:00002AD4 2081            	  4628:                 move.l d1,(a0)
01:00002AD6 8050            	  4629:                 or.w (a0),d0
01:00002AD8 4183            	  4630:                 move.l SR,d3
01:00002ADA 02830000000C    	  4631:                 andi.l #$0C,d3            * Isolate flags
01:00002AE0 DA83            	  4632:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AE2 D880            	  4633:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4634: 
                            	  4635: *     LONG
01:00002AE4 2081            	  4636:                 move.l d1,(a0)
01:00002AE6 8090            	  4637:                 or.l (a0),d0
01:00002AE8 4183            	  4638:                 move.l SR,d3
01:00002AEA 02830000000F    	  4639:                 andi.l #$0F,d3            * Isolate flags
01:00002AF0 DA83            	  4640:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AF2 D880            	  4641:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4642: 
                            	  4643: 
01:00002AF4 E289            	  4644:                 lsr.l #$1,d1
01:00002AF6 51CEFFCC        	  4645:                 dbf d6,OR_OUTER1
01:00002AFA E28A            	  4646:                 lsr.l #$1,d2
01:00002AFC 223C8167E123    	  4647:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B02 7C1E            	  4648:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B04 51CFFFBE        	  4649:                 dbf d7,OR_OUTER1
                            	  4650: 
01:00002B08 0C8476EAC803    	  4651:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002B0E 66FE            	  4652:                 bne.s *
01:00002B10 0C8500005A18    	  4653:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002B16 66FE            	  4654:                 bne.s *
                            	  4655: 
                            	  4656: 
                            	  4657: *  * Register to <EA>
                            	  4658: 
01:00002B18 203C86738374    	  4659:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B1E 223CFC55F2FE    	  4660:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B24 243C86738374    	  4661:                 move.l #$86738374,d2
01:00002B2A 7600            	  4662:                 moveq  #$00000000,d3
01:00002B2C 7800            	  4663:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B2E 7A00            	  4664:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B30 7C1E            	  4665:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B32 7E1D            	  4666:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B34 307C0100        	  4667:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4668: 
                            	  4669: 
                            	  4670: OR_OUTER2:
                            	  4671: 
                            	  4672: *     BYTE
01:00002B38 2080            	  4673:                 move.l d0,(a0)
01:00002B3A 8310            	  4674:                 or.b d1,(a0)
01:00002B3C 4183            	  4675:                 move.l SR,d3
01:00002B3E 02830000000C    	  4676:                 andi.l #$0C,d3            * Isolate flags
01:00002B44 DA83            	  4677:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B46 D890            	  4678:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4679: 
                            	  4680: *     WORD
01:00002B48 2080            	  4681:                 move.l d0,(a0)
01:00002B4A 8350            	  4682:                 or.w d1,(a0)
01:00002B4C 4183            	  4683:                 move.l SR,d3
01:00002B4E 02830000000C    	  4684:                 andi.l #$0C,d3            * Isolate flags
01:00002B54 DA83            	  4685:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B56 D890            	  4686:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4687: 
                            	  4688: *     LONG
01:00002B58 2080            	  4689:                 move.l d0,(a0)
01:00002B5A 8390            	  4690:                 or.l d1,(a0)
01:00002B5C 4183            	  4691:                 move.l SR,d3
01:00002B5E 02830000000F    	  4692:                 andi.l #$0F,d3            * Isolate flags
01:00002B64 DA83            	  4693:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B66 D890            	  4694:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4695: 
                            	  4696: 
01:00002B68 E289            	  4697:                 lsr.l #$1,d1
01:00002B6A 51CEFFCC        	  4698:                 dbf d6,OR_OUTER2
01:00002B6E E28A            	  4699:                 lsr.l #$1,d2
01:00002B70 223C8167E123    	  4700:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B76 7C1E            	  4701:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B78 51CFFFBE        	  4702:                 dbf d7,OR_OUTER2
                            	  4703: 
01:00002B7C 0C84FA82B9E4    	  4704:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002B82 66FE            	  4705:                 bne.s *
01:00002B84 0C8500005730    	  4706:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002B8A 66FE            	  4707:                 bne.s *
                            	  4708: 
                            	  4709: 
01:00002B8C 4E75            	  4710:                 rts
                            	  4711: 
                            	  4712: 
                            	  4713: 
                            	  4714: *-----------------------------------------------------------
                            	  4715: *-----------------------------------------------------------
                            	  4716: * OPCODE : AND
                            	  4717: *-----------------------------------------------------------
                            	  4718: *-----------------------------------------------------------
                            	  4719: 
                            	  4720: op_AND:
                            	  4721: 
                            	  4722: *  * <EA> to Register
                            	  4723: 
01:00002B8E 203CA5A5A5A5    	  4724:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002B94 223C8167E123    	  4725:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002B9A 243CA5A5A5A5    	  4726:                 move.l #$a5a5a5a5,d2
01:00002BA0 7600            	  4727:                 moveq  #$00000000,d3
01:00002BA2 7800            	  4728:                 moveq  #$00000000,d4       * Cumulative data results
01:00002BA4 7A00            	  4729:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002BA6 7C1E            	  4730:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BA8 7E1E            	  4731:                 move.l #$0000001E,d7       * Outer loop counter
01:00002BAA 307C0100        	  4732:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4733: 
                            	  4734: 
                            	  4735: AND_OUTER1:
                            	  4736: 
                            	  4737: *     BYTE
01:00002BAE 2081            	  4738:                 move.l d1,(a0)
01:00002BB0 C010            	  4739:                 and.b (a0),d0
01:00002BB2 4183            	  4740:                 move.l SR,d3
01:00002BB4 02830000000C    	  4741:                 andi.l #$0C,d3            * Isolate flags
01:00002BBA DA83            	  4742:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BBC D880            	  4743:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4744: 
                            	  4745: *     WORD
01:00002BBE 2081            	  4746:                 move.l d1,(a0)
01:00002BC0 C050            	  4747:                 and.w (a0),d0
01:00002BC2 4183            	  4748:                 move.l SR,d3
01:00002BC4 02830000000C    	  4749:                 andi.l #$0C,d3            * Isolate flags
01:00002BCA DA83            	  4750:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BCC D880            	  4751:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4752: 
                            	  4753: *     LONG
01:00002BCE 2081            	  4754:                 move.l d1,(a0)
01:00002BD0 C090            	  4755:                 and.l (a0),d0
01:00002BD2 4183            	  4756:                 move.l SR,d3
01:00002BD4 02830000000F    	  4757:                 andi.l #$0F,d3            * Isolate flags
01:00002BDA DA83            	  4758:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BDC D880            	  4759:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4760: 
                            	  4761: 
01:00002BDE E289            	  4762:                 lsr.l #$1,d1
01:00002BE0 51CEFFCC        	  4763:                 dbf d6,AND_OUTER1
01:00002BE4 E28A            	  4764:                 lsr.l #$1,d2
01:00002BE6 223C8167E123    	  4765:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BEC 7C1E            	  4766:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BEE 51CFFFBE        	  4767:                 dbf d7,AND_OUTER1
                            	  4768: 
01:00002BF2 0C84CF212883    	  4769:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002BF8 66FE            	  4770:                 bne.s *
01:00002BFA 0C8500002D10    	  4771:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002C00 66FE            	  4772:                 bne.s *
                            	  4773: 
                            	  4774: 
                            	  4775: *  * Register to <EA>
                            	  4776: 
01:00002C02 203C86738374    	  4777:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C08 223CFC55F2FE    	  4778:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C0E 243C86738374    	  4779:                 move.l #$86738374,d2
01:00002C14 7600            	  4780:                 moveq  #$00000000,d3
01:00002C16 7800            	  4781:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C18 7A00            	  4782:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C1A 7C1E            	  4783:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C1C 7E1D            	  4784:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C1E 307C0100        	  4785:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4786: 
                            	  4787: 
                            	  4788: AND_OUTER2:
                            	  4789: 
                            	  4790: *     BYTE
01:00002C22 2080            	  4791:                 move.l d0,(a0)
01:00002C24 C310            	  4792:                 and.b d1,(a0)
01:00002C26 4183            	  4793:                 move.l SR,d3
01:00002C28 02830000000C    	  4794:                 andi.l #$0C,d3            * Isolate flags
01:00002C2E DA83            	  4795:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C30 D890            	  4796:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4797: 
                            	  4798: *     WORD
01:00002C32 2080            	  4799:                 move.l d0,(a0)
01:00002C34 C350            	  4800:                 and.w d1,(a0)
01:00002C36 4183            	  4801:                 move.l SR,d3
01:00002C38 02830000000C    	  4802:                 andi.l #$0C,d3            * Isolate flags
01:00002C3E DA83            	  4803:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C40 D890            	  4804:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4805: 
                            	  4806: *     LONG
01:00002C42 2080            	  4807:                 move.l d0,(a0)
01:00002C44 C390            	  4808:                 and.l d1,(a0)
01:00002C46 4183            	  4809:                 move.l SR,d3
01:00002C48 02830000000F    	  4810:                 andi.l #$0F,d3            * Isolate flags
01:00002C4E DA83            	  4811:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C50 D890            	  4812:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4813: 
                            	  4814: 
01:00002C52 E289            	  4815:                 lsr.l #$1,d1
01:00002C54 51CEFFCC        	  4816:                 dbf d6,AND_OUTER2
01:00002C58 E28A            	  4817:                 lsr.l #$1,d2
01:00002C5A 223C8167E123    	  4818:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C60 7C1E            	  4819:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C62 51CFFFBE        	  4820:                 dbf d7,AND_OUTER2
                            	  4821: 
01:00002C66 0C844A3DE544    	  4822:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002C6C 66FE            	  4823:                 bne.s *
01:00002C6E 0C85000018E8    	  4824:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002C74 66FE            	  4825:                 bne.s *
                            	  4826: 
                            	  4827: 
01:00002C76 4E75            	  4828:                 rts
                            	  4829: 
                            	  4830: 
                            	  4831: 
                            	  4832: *-----------------------------------------------------------
                            	  4833: *-----------------------------------------------------------
                            	  4834: * OPCODE : EOR
                            	  4835: *-----------------------------------------------------------
                            	  4836: *-----------------------------------------------------------
                            	  4837: 
                            	  4838: op_EOR:
                            	  4839: 
                            	  4840: *  * Register to <EA>
                            	  4841: 
01:00002C78 203C86738374    	  4842:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C7E 223CFC55F2FE    	  4843:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C84 243C86738374    	  4844:                 move.l #$86738374,d2
01:00002C8A 7600            	  4845:                 moveq  #$00000000,d3
01:00002C8C 7800            	  4846:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C8E 7A00            	  4847:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C90 7C1E            	  4848:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C92 7E1D            	  4849:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C94 307C0100        	  4850:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4851: 
                            	  4852: 
                            	  4853: EOR_OUTER2:
                            	  4854: 
                            	  4855: *     BYTE
01:00002C98 2080            	  4856:                 move.l d0,(a0)
01:00002C9A B310            	  4857:                 eor.b d1,(a0)
01:00002C9C 4183            	  4858:                 move.l SR,d3
01:00002C9E 02830000000C    	  4859:                 andi.l #$0C,d3            * Isolate flags
01:00002CA4 DA83            	  4860:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CA6 D890            	  4861:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4862: 
                            	  4863: *     WORD
01:00002CA8 2080            	  4864:                 move.l d0,(a0)
01:00002CAA B350            	  4865:                 eor.w d1,(a0)
01:00002CAC 4183            	  4866:                 move.l SR,d3
01:00002CAE 02830000000C    	  4867:                 andi.l #$0C,d3            * Isolate flags
01:00002CB4 DA83            	  4868:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CB6 D890            	  4869:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4870: 
                            	  4871: *     LONG
01:00002CB8 2080            	  4872:                 move.l d0,(a0)
01:00002CBA B390            	  4873:                 eor.l d1,(a0)
01:00002CBC 4183            	  4874:                 move.l SR,d3
01:00002CBE 02830000000F    	  4875:                 andi.l #$0F,d3            * Isolate flags
01:00002CC4 DA83            	  4876:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CC6 D890            	  4877:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4878: 
                            	  4879: 
01:00002CC8 E289            	  4880:                 lsr.l #$1,d1
01:00002CCA 51CEFFCC        	  4881:                 dbf d6,EOR_OUTER2
01:00002CCE E28A            	  4882:                 lsr.l #$1,d2
01:00002CD0 223C8167E123    	  4883:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CD6 7C1E            	  4884:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CD8 51CFFFBE        	  4885:                 dbf d7,EOR_OUTER2
                            	  4886: 
01:00002CDC 0C8455C5EB70    	  4887:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002CE2 66FE            	  4888:                 bne.s *
01:00002CE4 0C8500004430    	  4889:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002CEA 66FE            	  4890:                 bne.s *
                            	  4891: 
                            	  4892: 
01:00002CEC 4E75            	  4893:                 rts
                            	  4894: 
                            	  4895: 
                            	  4896: *-----------------------------------------------------------
                            	  4897: *-----------------------------------------------------------
                            	  4898: * OPCODE : CMP
                            	  4899: *-----------------------------------------------------------
                            	  4900: *-----------------------------------------------------------
                            	  4901: 
                            	  4902: op_CMP:
                            	  4903: 
                            	  4904: 
                            	  4905: *  * <EA> to Register
                            	  4906: 
01:00002CEE 203CA5A5A5A5    	  4907:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002CF4 223C8167E123    	  4908:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002CFA 243CA5A5A5A5    	  4909:                 move.l #$a5a5a5a5,d2
01:00002D00 7600            	  4910:                 moveq  #$00000000,d3
01:00002D02 7800            	  4911:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D04 7A00            	  4912:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D06 7C1E            	  4913:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D08 7E1E            	  4914:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D0A 307C0100        	  4915:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4916: 
                            	  4917: 
                            	  4918: CMP_OUTER1:
                            	  4919: 
                            	  4920: *     BYTE
01:00002D0E 2081            	  4921:                 move.l d1,(a0)
01:00002D10 B010            	  4922:                 cmp.b (a0),d0
01:00002D12 4183            	  4923:                 move.l SR,d3
01:00002D14 02830000000F    	  4924:                 andi.l #$0F,d3            * Isolate flags
01:00002D1A DA83            	  4925:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D1C D880            	  4926:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4927: 
                            	  4928: *     WORD
01:00002D1E 2081            	  4929:                 move.l d1,(a0)
01:00002D20 B050            	  4930:                 cmp.w (a0),d0
01:00002D22 4183            	  4931:                 move.l SR,d3
01:00002D24 02830000000F    	  4932:                 andi.l #$0F,d3            * Isolate flags
01:00002D2A DA83            	  4933:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D2C D880            	  4934:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4935: 
                            	  4936: *     LONG
01:00002D2E 2081            	  4937:                 move.l d1,(a0)
01:00002D30 B090            	  4938:                 cmp.l (a0),d0
01:00002D32 4183            	  4939:                 move.l SR,d3
01:00002D34 02830000000F    	  4940:                 andi.l #$0F,d3            * Isolate flags
01:00002D3A DA83            	  4941:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D3C D880            	  4942:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4943: 
                            	  4944: 
01:00002D3E E289            	  4945:                 lsr.l #$1,d1
01:00002D40 51CEFFCC        	  4946:                 dbf d6,CMP_OUTER1
01:00002D44 E28A            	  4947:                 lsr.l #$1,d2
01:00002D46 223C8167E123    	  4948:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D4C 7C1E            	  4949:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D4E 51CFFFBE        	  4950:                 dbf d7,CMP_OUTER1
                            	  4951: 
01:00002D52 0C847878712F    	  4952:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002D58 66FE            	  4953:                 bne.s *
01:00002D5A 0C8500005502    	  4954:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002D60 66FE            	  4955:                 bne.s *
                            	  4956: 
                            	  4957: 
                            	  4958: 
01:00002D62 4E75            	  4959:                 rts
                            	  4960: 
                            	  4961: 
                            	  4962: *-----------------------------------------------------------
                            	  4963: *-----------------------------------------------------------
                            	  4964: * OPCODE : CMPA
                            	  4965: *-----------------------------------------------------------
                            	  4966: *-----------------------------------------------------------
                            	  4967: 
                            	  4968: op_CMPA:
                            	  4969: 
                            	  4970: 
                            	  4971: *  * <EA> to Register
                            	  4972: 
01:00002D64 207CA5A5A5A5    	  4973:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002D6A 223C8167E123    	  4974:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D70 243CA5A5A5A5    	  4975:                 move.l #$a5a5a5a5,d2
01:00002D76 7600            	  4976:                 moveq  #$00000000,d3
01:00002D78 7800            	  4977:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D7A 7A00            	  4978:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D7C 7C1E            	  4979:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D7E 7E1E            	  4980:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D80 327C0100        	  4981:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4982: 
                            	  4983: 
                            	  4984: CMPA_OUTER1:
                            	  4985: 
                            	  4986: 
                            	  4987: *     WORD
01:00002D84 2281            	  4988:                 move.l d1,(a1)
01:00002D86 B0D1            	  4989:                 cmpa.w (a1),a0
01:00002D88 4183            	  4990:                 move.l SR,d3
01:00002D8A 02830000000F    	  4991:                 andi.l #$0F,d3            * Isolate flags
01:00002D90 DA83            	  4992:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D92 D888            	  4993:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4994: 
                            	  4995: *     LONG
01:00002D94 2281            	  4996:                 move.l d1,(a1)
01:00002D96 B1D1            	  4997:                 cmpa.l (a1),a0
01:00002D98 4183            	  4998:                 move.l SR,d3
01:00002D9A 02830000000F    	  4999:                 andi.l #$0F,d3            * Isolate flags
01:00002DA0 DA83            	  5000:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DA2 D888            	  5001:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5002: 
                            	  5003: 
01:00002DA4 E289            	  5004:                 lsr.l #$1,d1
01:00002DA6 51CEFFDC        	  5005:                 dbf d6,CMPA_OUTER1
01:00002DAA E28A            	  5006:                 lsr.l #$1,d2
01:00002DAC 223C8167E123    	  5007:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002DB2 7C1E            	  5008:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DB4 51CFFFCE        	  5009:                 dbf d7,CMPA_OUTER1
                            	  5010: 
01:00002DB8 0C84A5A5A0CA    	  5011:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002DBE 66FE            	  5012:                 bne.s *
01:00002DC0 0C8500003A7D    	  5013:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002DC6 66FE            	  5014:                 bne.s *
                            	  5015: 
                            	  5016: 
01:00002DC8 4E75            	  5017:                 rts
                            	  5018: 
                            	  5019: 
                            	  5020: 
                            	  5021: *-----------------------------------------------------------
                            	  5022: *-----------------------------------------------------------
                            	  5023: * OPCODE : CMPM
                            	  5024: *-----------------------------------------------------------
                            	  5025: *-----------------------------------------------------------
                            	  5026: 
                            	  5027: op_CMPM:
                            	  5028: 
01:00002DCA 307C0100        	  5029:                 move.l #$00000100,a0       * Address for Data-X
01:00002DCE 327C0200        	  5030:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DD2 7000            	  5031:                 moveq  #$00000000,d0
01:00002DD4 7200            	  5032:                 moveq  #$00000000,d1
01:00002DD6 7400            	  5033:                 moveq  #$00000000,d2
                            	  5034: 
01:00002DD8 20FC11FF5580    	  5035:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002DDE 20FC1111FFFF    	  5036:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002DE4 20FC33333333    	  5037:                 move.l #$33333333,(a0)+   * Populate test data
01:00002DEA 20FC44444444    	  5038:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5039: 
01:00002DF0 22FC80FF337F    	  5040:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002DF6 22FCFFFF1111    	  5041:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002DFC 22FC33333333    	  5042:                 move.l #$33333333,(a1)+   * Populate test data
01:00002E02 22FC44444444    	  5043:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5044: 
01:00002E08 307C0100        	  5045:                 move.l #$00000100,a0       * Address for Data-X
01:00002E0C 327C0200        	  5046:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E10 7C0F            	  5047:                 move.l #$0000000F,d6       * Loop counter
                            	  5048: 
01:00002E12 B308            	  5049: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002E14 4183            	  5050:                 move.l SR,d3
01:00002E16 02830000000F    	  5051:                 andi.l #$0F,d3            * Isolate flags
01:00002E1C D083            	  5052:                 add.l d3,d0               * Copy flag results into accumulator
01:00002E1E 51CEFFF2        	  5053:                 dbf d6,CMPM_LOOP1
                            	  5054: 
                            	  5055: 
01:00002E22 307C0100        	  5056:                 move.l #$00000100,a0       * Address for Data-X
01:00002E26 327C0200        	  5057:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E2A 7C07            	  5058:                 moveq  #$00000007,d6       * Loop counter
                            	  5059: 
01:00002E2C B348            	  5060: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002E2E 4183            	  5061:                 move.l SR,d3
01:00002E30 02830000000F    	  5062:                 andi.l #$0F,d3            * Isolate flags
01:00002E36 D283            	  5063:                 add.l d3,d1               * Copy flag results into accumulator
01:00002E38 51CEFFF2        	  5064:                 dbf d6,CMPM_LOOP2
                            	  5065: 
                            	  5066: 
01:00002E3C 307C0100        	  5067:                 move.l #$00000100,a0       * Address for Data-X
01:00002E40 327C0200        	  5068:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E44 7C03            	  5069:                 moveq  #$00000003,d6       * Loop counter
                            	  5070: 
01:00002E46 B388            	  5071: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002E48 4183            	  5072:                 move.l SR,d3
01:00002E4A 02830000000F    	  5073:                 andi.l #$0F,d3            * Isolate flags
01:00002E50 D483            	  5074:                 add.l d3,d2               * Copy flag results into accumulator
01:00002E52 51CEFFF2        	  5075:                 dbf d6,CMPM_LOOP3
                            	  5076: 
                            	  5077: 
01:00002E56 0C800000004C    	  5078:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002E5C 66FE            	  5079:                 bne.s *
01:00002E5E 0C8100000024    	  5080:                 cmpi.l #$00000024,d1
01:00002E64 66FE            	  5081:                 bne.s *
01:00002E66 0C8200000012    	  5082:                 cmpi.l #$00000012,d2
01:00002E6C 66FE            	  5083:                 bne.s *
                            	  5084: 
01:00002E6E 4E75            	  5085:                 rts
                            	  5086: 
                            	  5087: 
                            	  5088: *-----------------------------------------------------------
                            	  5089: *-----------------------------------------------------------
                            	  5090: * OPCODE : ADD
                            	  5091: *-----------------------------------------------------------
                            	  5092: *-----------------------------------------------------------
                            	  5093: 
                            	  5094: op_ADD:
                            	  5095: 
                            	  5096: 
                            	  5097: *  * <EA> to Register
01:00002E70 203CA5A5A5A5    	  5098:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002E76 223C8167E123    	  5099:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002E7C 243CA5A5A5A5    	  5100:                 move.l #$a5a5a5a5,d2
01:00002E82 7600            	  5101:                 moveq  #$00000000,d3
01:00002E84 7800            	  5102:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E86 7A00            	  5103:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E88 7C1E            	  5104:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E8A 7E1E            	  5105:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E8C 307C0100        	  5106:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5107: 
                            	  5108: 
                            	  5109: ADD_OUTER1:
                            	  5110: 
                            	  5111: *     BYTE
01:00002E90 2081            	  5112:                 move.l d1,(a0)
01:00002E92 D010            	  5113:                 add.b (a0),d0
01:00002E94 4183            	  5114:                 move.l SR,d3
01:00002E96 02830000001F    	  5115:                 andi.l #$1F,d3            * Isolate flags
01:00002E9C DA83            	  5116:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E9E D880            	  5117:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5118: 
                            	  5119: *     WORD
01:00002EA0 2081            	  5120:                 move.l d1,(a0)
01:00002EA2 D050            	  5121:                 add.w (a0),d0
01:00002EA4 4183            	  5122:                 move.l SR,d3
01:00002EA6 02830000000C    	  5123:                 andi.l #$0C,d3            * Isolate flags
01:00002EAC DA83            	  5124:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EAE D880            	  5125:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5126: 
                            	  5127: *     LONG
01:00002EB0 2081            	  5128:                 move.l d1,(a0)
01:00002EB2 D090            	  5129:                 add.l (a0),d0
01:00002EB4 4183            	  5130:                 move.l SR,d3
01:00002EB6 02830000000F    	  5131:                 andi.l #$0F,d3            * Isolate flags
01:00002EBC DA83            	  5132:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EBE D880            	  5133:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5134: 
                            	  5135: 
01:00002EC0 E299            	  5136:                 ror.l #$1,d1
01:00002EC2 51CEFFCC        	  5137:                 dbf d6,ADD_OUTER1
01:00002EC6 E29A            	  5138:                 ror.l #$1,d2
01:00002EC8 223C8167E123    	  5139:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002ECE 7C1E            	  5140:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ED0 51CFFFBE        	  5141:                 dbf d7,ADD_OUTER1
                            	  5142: 
01:00002ED4 0C8423ED428F    	  5143:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002EDA 66FE            	  5144:                 bne.s *
01:00002EDC 0C8500004C96    	  5145:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002EE2 66FE            	  5146:                 bne.s *
                            	  5147: 
                            	  5148: 
                            	  5149: *  * Register to <EA>
01:00002EE4 203C86738374    	  5150:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002EEA 223CFC55F2FE    	  5151:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002EF0 243C86738374    	  5152:                 move.l #$86738374,d2
01:00002EF6 7600            	  5153:                 moveq  #$00000000,d3
01:00002EF8 7800            	  5154:                 moveq  #$00000000,d4       * Cumulative data results
01:00002EFA 7A00            	  5155:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002EFC 7C1E            	  5156:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EFE 7E1D            	  5157:                 move.l #$0000001D,d7       * Outer loop counter
01:00002F00 307C0100        	  5158:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5159: 
                            	  5160: 
                            	  5161: ADD_OUTER2:
                            	  5162: 
                            	  5163: *     BYTE
01:00002F04 2080            	  5164:                 move.l d0,(a0)
01:00002F06 D310            	  5165:                 add.b d1,(a0)
01:00002F08 4183            	  5166:                 move.l SR,d3
01:00002F0A 02830000000C    	  5167:                 andi.l #$0C,d3            * Isolate flags
01:00002F10 DA83            	  5168:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F12 D890            	  5169:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5170: 
                            	  5171: *     WORD
01:00002F14 2080            	  5172:                 move.l d0,(a0)
01:00002F16 D350            	  5173:                 add.w d1,(a0)
01:00002F18 4183            	  5174:                 move.l SR,d3
01:00002F1A 02830000001F    	  5175:                 andi.l #$1F,d3            * Isolate flags
01:00002F20 DA83            	  5176:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F22 D890            	  5177:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5178: 
                            	  5179: *     LONG
01:00002F24 2080            	  5180:                 move.l d0,(a0)
01:00002F26 D390            	  5181:                 add.l d1,(a0)
01:00002F28 4183            	  5182:                 move.l SR,d3
01:00002F2A 02830000000F    	  5183:                 andi.l #$0F,d3            * Isolate flags
01:00002F30 DA83            	  5184:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F32 D890            	  5185:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5186: 
                            	  5187: 
01:00002F34 E299            	  5188:                 ror.l #$1,d1
01:00002F36 51CEFFCC        	  5189:                 dbf d6,ADD_OUTER2
01:00002F3A E29A            	  5190:                 ror.l #$1,d2
01:00002F3C 223C8167E123    	  5191:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F42 7C1E            	  5192:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F44 51CFFFBE        	  5193:                 dbf d7,ADD_OUTER2
                            	  5194: 
01:00002F48 0C846701B884    	  5195:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002F4E 66FE            	  5196:                 bne.s *
01:00002F50 0C8500005467    	  5197:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002F56 66FE            	  5198:                 bne.s *
                            	  5199: 
01:00002F58 4E75            	  5200:                 rts
                            	  5201: 
                            	  5202: *-----------------------------------------------------------
                            	  5203: *-----------------------------------------------------------
                            	  5204: * OPCODE : SUB
                            	  5205: *-----------------------------------------------------------
                            	  5206: *-----------------------------------------------------------
                            	  5207: 
                            	  5208: op_SUB:
                            	  5209: 
                            	  5210: *  * <EA> to Register
01:00002F5A 203CA5A5A5A5    	  5211:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002F60 223C8167E123    	  5212:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002F66 243CA5A5A5A5    	  5213:                 move.l #$a5a5a5a5,d2
01:00002F6C 7600            	  5214:                 moveq  #$00000000,d3
01:00002F6E 7800            	  5215:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F70 7A00            	  5216:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F72 7C1E            	  5217:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F74 7E1E            	  5218:                 move.l #$0000001E,d7       * Outer loop counter
01:00002F76 307C0100        	  5219:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5220: 
                            	  5221: 
                            	  5222: SUB_OUTER1:
                            	  5223: 
                            	  5224: *     BYTE
01:00002F7A 2081            	  5225:                 move.l d1,(a0)
01:00002F7C 9010            	  5226:                 sub.b (a0),d0
01:00002F7E 4183            	  5227:                 move.l SR,d3
01:00002F80 02830000001F    	  5228:                 andi.l #$1F,d3            * Isolate flags
01:00002F86 DA83            	  5229:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F88 D880            	  5230:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5231: 
                            	  5232: *     WORD
01:00002F8A 2081            	  5233:                 move.l d1,(a0)
01:00002F8C 9050            	  5234:                 sub.w (a0),d0
01:00002F8E 4183            	  5235:                 move.l SR,d3
01:00002F90 02830000000C    	  5236:                 andi.l #$0C,d3            * Isolate flags
01:00002F96 DA83            	  5237:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F98 D880            	  5238:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5239: 
                            	  5240: *     LONG
01:00002F9A 2081            	  5241:                 move.l d1,(a0)
01:00002F9C 9090            	  5242:                 sub.l (a0),d0
01:00002F9E 4183            	  5243:                 move.l SR,d3
01:00002FA0 02830000000F    	  5244:                 andi.l #$0F,d3            * Isolate flags
01:00002FA6 DA83            	  5245:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FA8 D880            	  5246:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5247: 
                            	  5248: 
01:00002FAA E299            	  5249:                 ror.l #$1,d1
01:00002FAC 51CEFFCC        	  5250:                 dbf d6,SUB_OUTER1
01:00002FB0 E29A            	  5251:                 ror.l #$1,d2
01:00002FB2 223C8167E123    	  5252:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FB8 7C1E            	  5253:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FBA 51CFFFBE        	  5254:                 dbf d7,SUB_OUTER1
                            	  5255: 
01:00002FBE 0C841A8D14CF    	  5256:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002FC4 66FE            	  5257:                 bne.s *
01:00002FC6 0C8500004FC4    	  5258:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002FCC 66FE            	  5259:                 bne.s *
                            	  5260: 
                            	  5261: 
                            	  5262: *  * Register to <EA>
01:00002FCE 203C86738374    	  5263:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002FD4 223CFC55F2FE    	  5264:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002FDA 243C86738374    	  5265:                 move.l #$86738374,d2
01:00002FE0 7600            	  5266:                 moveq  #$00000000,d3
01:00002FE2 7800            	  5267:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FE4 7A00            	  5268:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FE6 7C1E            	  5269:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FE8 7E1D            	  5270:                 move.l #$0000001D,d7       * Outer loop counter
01:00002FEA 307C0100        	  5271:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5272: 
                            	  5273: 
                            	  5274: SUB_OUTER2:
                            	  5275: 
                            	  5276: *     BYTE
01:00002FEE 2080            	  5277:                 move.l d0,(a0)
01:00002FF0 9310            	  5278:                 sub.b d1,(a0)
01:00002FF2 4183            	  5279:                 move.l SR,d3
01:00002FF4 02830000000C    	  5280:                 andi.l #$0C,d3            * Isolate flags
01:00002FFA DA83            	  5281:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FFC D890            	  5282:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5283: 
                            	  5284: *     WORD
01:00002FFE 2080            	  5285:                 move.l d0,(a0)
01:00003000 9350            	  5286:                 sub.w d1,(a0)
01:00003002 4183            	  5287:                 move.l SR,d3
01:00003004 02830000001F    	  5288:                 andi.l #$1F,d3            * Isolate flags
01:0000300A DA83            	  5289:                 add.l d3,d5               * Copy flag results into accumulator
01:0000300C D890            	  5290:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5291: 
                            	  5292: *     LONG
01:0000300E 2080            	  5293:                 move.l d0,(a0)
01:00003010 9390            	  5294:                 sub.l d1,(a0)
01:00003012 4183            	  5295:                 move.l SR,d3
01:00003014 02830000000F    	  5296:                 andi.l #$0F,d3            * Isolate flags
01:0000301A DA83            	  5297:                 add.l d3,d5               * Copy flag results into accumulator
01:0000301C D890            	  5298:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5299: 
                            	  5300: 
01:0000301E E299            	  5301:                 ror.l #$1,d1
01:00003020 51CEFFCC        	  5302:                 dbf d6,SUB_OUTER2
01:00003024 E29A            	  5303:                 ror.l #$1,d2
01:00003026 223C8167E123    	  5304:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000302C 7C1E            	  5305:                 move.l #$0000001E,d6       * Inner loop counter
01:0000302E 51CFFFBE        	  5306:                 dbf d7,SUB_OUTER2
                            	  5307: 
01:00003032 0C8436D38BEC    	  5308:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:00003038 66FE            	  5309:                 bne.s *
01:0000303A 0C85000045A5    	  5310:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00003040 66FE            	  5311:                 bne.s *
                            	  5312: 
                            	  5313: 
                            	  5314: 
                            	  5315: 
01:00003042 4E75            	  5316:                 rts
                            	  5317: 
                            	  5318: 
                            	  5319: 
                            	  5320: *-----------------------------------------------------------
                            	  5321: *-----------------------------------------------------------
                            	  5322: * OPCODE : ADDA
                            	  5323: *-----------------------------------------------------------
                            	  5324: *-----------------------------------------------------------
                            	  5325: 
                            	  5326: op_ADDA:
                            	  5327: 
                            	  5328: *  * <EA> to Register
01:00003044 203CA5A5A5A5    	  5329:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000304A 223C8167E123    	  5330:                 move.l #$8167E123,d1
01:00003050 243CA5A5A5A5    	  5331:                 move.l #$a5a5a5a5,d2
01:00003056 7600            	  5332:                 moveq  #$00000000,d3
01:00003058 7800            	  5333:                 moveq  #$00000000,d4       * Cumulative data results
01:0000305A 7A00            	  5334:                 moveq  #$00000000,d5       * Cumulative flag results
01:0000305C 7C1E            	  5335:                 move.l #$0000001E,d6       * Inner loop counter
01:0000305E 7E1E            	  5336:                 move.l #$0000001E,d7       * Outer loop counter
01:00003060 307C0100        	  5337:                 move.l #$00000100,a0       * Address for memory EA operations
01:00003064 227C8167E123    	  5338:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5339: 
                            	  5340: ADDA_OUTER1:
                            	  5341: 
                            	  5342: *     WORD
                            	  5343: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5344: *                adda.w (a0),a1
                            	  5345: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5346: 
                            	  5347: *     LONG
01:0000306A 2081            	  5348:                 move.l d1,(a0)
01:0000306C D3D0            	  5349:                 adda.l (a0),a1
01:0000306E D889            	  5350:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5351: 
01:00003070 E299            	  5352:                 ror.l #$1,d1
01:00003072 51CEFFF6        	  5353:                 dbf d6,ADDA_OUTER1
01:00003076 E299            	  5354:                 ror.l #$1,d1
01:00003078 2241            	  5355:                 move.l d1,a1
01:0000307A 223C8167E123    	  5356:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003080 7C1E            	  5357:                 move.l #$0000001E,d6       * Inner loop counter
01:00003082 51CFFFE6        	  5358:                 dbf d7,ADDA_OUTER1
                            	  5359: 
01:00003086 0C84AC04DB4C    	  5360:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:0000308C 66FE            	  5361:                 bne.s *
                            	  5362: 
                            	  5363: 
01:0000308E 4E75            	  5364:                 rts
                            	  5365: 
                            	  5366: 
                            	  5367: *-----------------------------------------------------------
                            	  5368: *-----------------------------------------------------------
                            	  5369: * OPCODE : SUBA
                            	  5370: *-----------------------------------------------------------
                            	  5371: *-----------------------------------------------------------
                            	  5372: 
                            	  5373: op_SUBA:
                            	  5374: 
                            	  5375: *  * <EA> to Register
01:00003090 203CA5A5A5A5    	  5376:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003096 223C8167E123    	  5377:                 move.l #$8167E123,d1
01:0000309C 243CA5A5A5A5    	  5378:                 move.l #$a5a5a5a5,d2
01:000030A2 7600            	  5379:                 moveq  #$00000000,d3
01:000030A4 7800            	  5380:                 moveq  #$00000000,d4       * Cumulative data results
01:000030A6 7A00            	  5381:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030A8 7C1E            	  5382:                 move.l #$0000001E,d6       * Inner loop counter
01:000030AA 7E1E            	  5383:                 move.l #$0000001E,d7       * Outer loop counter
01:000030AC 307C0100        	  5384:                 move.l #$00000100,a0       * Address for memory EA operations
01:000030B0 227C8167E123    	  5385:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5386: 
                            	  5387: SUBA_OUTER1:
                            	  5388: 
                            	  5389: *     WORD
                            	  5390: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5391: *                suba.w (a0),a1
                            	  5392: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5393: 
                            	  5394: *     LONG
01:000030B6 2081            	  5395:                 move.l d1,(a0)
01:000030B8 93D0            	  5396:                 suba.l (a0),a1
01:000030BA D889            	  5397:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5398: 
01:000030BC E299            	  5399:                 ror.l #$1,d1
01:000030BE 51CEFFF6        	  5400:                 dbf d6,SUBA_OUTER1
01:000030C2 E299            	  5401:                 ror.l #$1,d1
01:000030C4 2241            	  5402:                 move.l d1,a1
01:000030C6 223C8167E123    	  5403:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030CC 7C1E            	  5404:                 move.l #$0000001E,d6       * Inner loop counter
01:000030CE 51CFFFE6        	  5405:                 dbf d7,SUBA_OUTER1
                            	  5406: 
01:000030D2 0C84E1E36D7A    	  5407:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:000030D8 66FE            	  5408:                 bne.s *
                            	  5409: 
                            	  5410: 
01:000030DA 4E75            	  5411:                 rts
                            	  5412: 
                            	  5413: 
                            	  5414: 
                            	  5415: *-----------------------------------------------------------
                            	  5416: *-----------------------------------------------------------
                            	  5417: * OPCODE : ADDX
                            	  5418: *-----------------------------------------------------------
                            	  5419: *-----------------------------------------------------------
                            	  5420: 
                            	  5421: op_ADDX:
                            	  5422: 
                            	  5423: 
                            	  5424: *  * Register to Register
01:000030DC 203CA5A5A5A5    	  5425:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000030E2 223C8167E123    	  5426:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000030E8 243CA5A5A5A5    	  5427:                 move.l #$a5a5a5a5,d2
01:000030EE 7600            	  5428:                 moveq  #$00000000,d3
01:000030F0 7800            	  5429:                 moveq  #$00000000,d4       * Cumulative data results
01:000030F2 7A00            	  5430:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030F4 7C1E            	  5431:                 move.l #$0000001E,d6       * Inner loop counter
01:000030F6 7E1E            	  5432:                 move.l #$0000001E,d7       * Outer loop counter
01:000030F8 307C0100        	  5433:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5434: 
                            	  5435: 
                            	  5436: ADDX_OUTER1:
                            	  5437: 
                            	  5438: *     BYTE
01:000030FC 2002            	  5439:                 move.l d2,d0
01:000030FE D101            	  5440:                 addx.b d1,d0
01:00003100 4183            	  5441:                 move.l SR,d3
01:00003102 02830000001F    	  5442:                 andi.l #$1F,d3            * Isolate flags
01:00003108 DA83            	  5443:                 add.l d3,d5               * Copy flag results into accumulator
01:0000310A D880            	  5444:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5445: 
                            	  5446: *     WORD
01:0000310C 2002            	  5447:                 move.l d2,d0
01:0000310E D141            	  5448:                 addx.w d1,d0
01:00003110 4183            	  5449:                 move.l SR,d3
01:00003112 02830000001F    	  5450:                 andi.l #$1F,d3            * Isolate flags
01:00003118 DA83            	  5451:                 add.l d3,d5               * Copy flag results into accumulator
01:0000311A D880            	  5452:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5453: 
                            	  5454: *     LONG
01:0000311C 2002            	  5455:                 move.l d2,d0
01:0000311E D181            	  5456:                 addx.l d1,d0
01:00003120 4183            	  5457:                 move.l SR,d3
01:00003122 02830000001F    	  5458:                 andi.l #$1F,d3            * Isolate flags
01:00003128 DA83            	  5459:                 add.l d3,d5               * Copy flag results into accumulator
01:0000312A D880            	  5460:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5461: 
01:0000312C E299            	  5462:                 ror.l #$1,d1
01:0000312E 51CEFFCC        	  5463:                 dbf d6,ADDX_OUTER1
01:00003132 E29A            	  5464:                 ror.l #$1,d2
01:00003134 223C8167E123    	  5465:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000313A 7C1E            	  5466:                 move.l #$0000001E,d6       * Inner loop counter
01:0000313C 51CFFFBE        	  5467:                 dbf d7,ADDX_OUTER1
                            	  5468: 
01:00003140 0C844E96A4D9    	  5469:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:00003146 66FE            	  5470:                 bne.s *
01:00003148 0C85000085CD    	  5471:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:0000314E 66FE            	  5472:                 bne.s *
                            	  5473: 
                            	  5474: 
                            	  5475: 
                            	  5476: *     -(An),-(An)
                            	  5477: 
01:00003150 7000            	  5478:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003152 7200            	  5479:                 moveq  #$00000000,d1
01:00003154 7400            	  5480:                 moveq  #$00000000,d2
01:00003156 307C0100        	  5481:                 move.l #$00000100,a0       * Address for Data-X
01:0000315A 327C0200        	  5482:                 move.l #$00000200,a1       * Address for Data-Y
01:0000315E 20FC11FF5580    	  5483:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003164 20FC1111FFFF    	  5484:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:0000316A 20FC33333333    	  5485:                 move.l #$33333333,(a0)+   * Populate test data
01:00003170 20FC44444444    	  5486:                 move.l #$44444444,(a0)+   * Populate test data
01:00003176 22FC80FF337F    	  5487:                 move.l #$80FF337F,(a1)+   * Populate test data
01:0000317C 22FCFFFF1111    	  5488:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00003182 22FC33333333    	  5489:                 move.l #$33333333,(a1)+   * Populate test data
01:00003188 22FC44444444    	  5490:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5491: 
                            	  5492: 
01:0000318E 7C0F            	  5493:                 move.l #$0000000F,d6       * Loop counter
                            	  5494: 
01:00003190 D308            	  5495: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:00003192 4183            	  5496:                 move.l SR,d3
01:00003194 02830000000F    	  5497:                 andi.l #$0F,d3            * Isolate flags
01:0000319A D083            	  5498:                 add.l d3,d0               * Copy flag results into accumulator
01:0000319C D211            	  5499:                 add.b (a1),d1
01:0000319E 51CEFFF0        	  5500:                 dbf d6,ADDX_LOOP3
                            	  5501: 
                            	  5502: 
01:000031A2 307C0110        	  5503:                 move.l #$00000110,a0       * Address for Data-X
01:000031A6 327C0210        	  5504:                 move.l #$00000210,a1       * Address for Data-Y
01:000031AA 7C07            	  5505:                 moveq  #$00000007,d6       * Loop counter
                            	  5506: 
01:000031AC D348            	  5507: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:000031AE 4183            	  5508:                 move.l SR,d3
01:000031B0 02830000000F    	  5509:                 andi.l #$0F,d3            * Isolate flags
01:000031B6 D083            	  5510:                 add.l d3,d0               * Copy flag results into accumulator
01:000031B8 D251            	  5511:                 add.w (a1),d1
01:000031BA 51CEFFF0        	  5512:                 dbf d6,ADDX_LOOP4
                            	  5513: 
                            	  5514: 
01:000031BE 307C0110        	  5515:                 move.l #$00000110,a0       * Address for Data-X
01:000031C2 327C0210        	  5516:                 move.l #$00000210,a1       * Address for Data-Y
01:000031C6 7C03            	  5517:                 moveq  #$00000003,d6       * Loop counter
                            	  5518: 
01:000031C8 D388            	  5519: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:000031CA 4183            	  5520:                 move.l SR,d3
01:000031CC 02830000000F    	  5521:                 andi.l #$0F,d3            * Isolate flags
01:000031D2 D083            	  5522:                 add.l d3,d0               * Copy flag results into accumulator
01:000031D4 D291            	  5523:                 add.l (a1),d1
01:000031D6 51CEFFF0        	  5524:                 dbf d6,ADDX_LOOP5
                            	  5525: 
                            	  5526: 
01:000031DA 0C8000000095    	  5527:                 cmpi.l #$00000095,d0      * Check the flag results
01:000031E0 66FE            	  5528:                 bne.s *
01:000031E2 0C81C812A682    	  5529:                 cmpi.l #$C812A682,d1      * Check the data results
01:000031E8 66FE            	  5530:                 bne.s *
                            	  5531: 
01:000031EA 4E75            	  5532:                 rts
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: *-----------------------------------------------------------
                            	  5538: *-----------------------------------------------------------
                            	  5539: * OPCODE : SUBX
                            	  5540: *-----------------------------------------------------------
                            	  5541: *-----------------------------------------------------------
                            	  5542: 
                            	  5543: op_SUBX:
                            	  5544: 
                            	  5545: 
                            	  5546: *  * Register to Register
01:000031EC 203CA5A5A5A5    	  5547:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000031F2 223C8167E123    	  5548:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000031F8 243CA5A5A5A5    	  5549:                 move.l #$a5a5a5a5,d2
01:000031FE 7600            	  5550:                 moveq  #$00000000,d3
01:00003200 7800            	  5551:                 moveq  #$00000000,d4       * Cumulative data results
01:00003202 7A00            	  5552:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003204 7C1E            	  5553:                 move.l #$0000001E,d6       * Inner loop counter
01:00003206 7E1E            	  5554:                 move.l #$0000001E,d7       * Outer loop counter
01:00003208 307C0100        	  5555:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5556: 
                            	  5557: 
                            	  5558: SUBX_OUTER1:
                            	  5559: 
                            	  5560: *     BYTE
01:0000320C 2002            	  5561:                 move.l d2,d0
01:0000320E 9101            	  5562:                 subx.b d1,d0
01:00003210 4183            	  5563:                 move.l SR,d3
01:00003212 02830000001F    	  5564:                 andi.l #$1F,d3            * Isolate flags
01:00003218 DA83            	  5565:                 add.l d3,d5               * Copy flag results into accumulator
01:0000321A D880            	  5566:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5567: 
                            	  5568: *     WORD
01:0000321C 2002            	  5569:                 move.l d2,d0
01:0000321E 9141            	  5570:                 subx.w d1,d0
01:00003220 4183            	  5571:                 move.l SR,d3
01:00003222 02830000001F    	  5572:                 andi.l #$1F,d3            * Isolate flags
01:00003228 DA83            	  5573:                 add.l d3,d5               * Copy flag results into accumulator
01:0000322A D880            	  5574:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5575: 
                            	  5576: *     LONG
01:0000322C 2002            	  5577:                 move.l d2,d0
01:0000322E 9181            	  5578:                 subx.l d1,d0
01:00003230 4183            	  5579:                 move.l SR,d3
01:00003232 02830000001F    	  5580:                 andi.l #$1F,d3            * Isolate flags
01:00003238 DA83            	  5581:                 add.l d3,d5               * Copy flag results into accumulator
01:0000323A D880            	  5582:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5583: 
01:0000323C E299            	  5584:                 ror.l #$1,d1
01:0000323E 51CEFFCC        	  5585:                 dbf d6,SUBX_OUTER1
01:00003242 E29A            	  5586:                 ror.l #$1,d2
01:00003244 223C8167E123    	  5587:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000324A 7C1E            	  5588:                 move.l #$0000001E,d6       * Inner loop counter
01:0000324C 51CFFFBE        	  5589:                 dbf d7,SUBX_OUTER1
                            	  5590: 
01:00003250 0C84FCAA913E    	  5591:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:00003256 66FE            	  5592:                 bne.s *
01:00003258 0C8500007E89    	  5593:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:0000325E 66FE            	  5594:                 bne.s *
                            	  5595: 
                            	  5596: 
                            	  5597: 
                            	  5598: *     -(An),-(An)
                            	  5599: 
01:00003260 7000            	  5600:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003262 7200            	  5601:                 moveq  #$00000000,d1
01:00003264 7400            	  5602:                 moveq  #$00000000,d2
01:00003266 307C0100        	  5603:                 move.l #$00000100,a0       * Address for Data-X
01:0000326A 327C0200        	  5604:                 move.l #$00000200,a1       * Address for Data-Y
01:0000326E 20FC11FF5580    	  5605:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003274 20FC1111FFFF    	  5606:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:0000327A 20FC80FF337F    	  5607:                 move.l #$80FF337F,(a0)+   * Populate test data
01:00003280 20FC44444444    	  5608:                 move.l #$44444444,(a0)+   * Populate test data
01:00003286 22FC80FF337F    	  5609:                 move.l #$80FF337F,(a1)+   * Populate test data
01:0000328C 22FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:00003292 22FC33333333    	  5611:                 move.l #$33333333,(a1)+   * Populate test data
01:00003298 22FC5580EECC    	  5612:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5613: 
                            	  5614: 
01:0000329E 7C0F            	  5615:                 move.l #$0000000F,d6       * Loop counter
                            	  5616: 
01:000032A0 9308            	  5617: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:000032A2 4183            	  5618:                 move.l SR,d3
01:000032A4 02830000000F    	  5619:                 andi.l #$0F,d3            * Isolate flags
01:000032AA D083            	  5620:                 add.l d3,d0               * Copy flag results into accumulator
01:000032AC D211            	  5621:                 add.b (a1),d1
01:000032AE 51CEFFF0        	  5622:                 dbf d6,SUBX_LOOP3
                            	  5623: 
                            	  5624: 
01:000032B2 307C0110        	  5625:                 move.l #$00000110,a0       * Address for Data-X
01:000032B6 327C0210        	  5626:                 move.l #$00000210,a1       * Address for Data-Y
01:000032BA 7C07            	  5627:                 moveq  #$00000007,d6       * Loop counter
                            	  5628: 
01:000032BC 9348            	  5629: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:000032BE 4183            	  5630:                 move.l SR,d3
01:000032C0 02830000000F    	  5631:                 andi.l #$0F,d3            * Isolate flags
01:000032C6 D083            	  5632:                 add.l d3,d0               * Copy flag results into accumulator
01:000032C8 D251            	  5633:                 add.w (a1),d1
01:000032CA 51CEFFF0        	  5634:                 dbf d6,SUBX_LOOP4
                            	  5635: 
                            	  5636: 
01:000032CE 307C0110        	  5637:                 move.l #$00000110,a0       * Address for Data-X
01:000032D2 327C0210        	  5638:                 move.l #$00000210,a1       * Address for Data-Y
01:000032D6 7C03            	  5639:                 moveq  #$00000003,d6       * Loop counter
                            	  5640: 
01:000032D8 9388            	  5641: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:000032DA 4183            	  5642:                 move.l SR,d3
01:000032DC 02830000000F    	  5643:                 andi.l #$0F,d3            * Isolate flags
01:000032E2 D083            	  5644:                 add.l d3,d0               * Copy flag results into accumulator
01:000032E4 D291            	  5645:                 add.l (a1),d1
01:000032E6 51CEFFF0        	  5646:                 dbf d6,SUBX_LOOP5
                            	  5647: 
                            	  5648: 
01:000032EA 0C80000000B1    	  5649:                 cmpi.l #$000000B1,d0      * Check the flag results
01:000032F0 66FE            	  5650:                 bne.s *
01:000032F2 0C8162C6F417    	  5651:                 cmpi.l #$62C6F417,d1      * Check the data results
01:000032F8 66FE            	  5652:                 bne.s *
                            	  5653: 
01:000032FA 4E75            	  5654:                 rts
                            	  5655: 
                            	  5656: 
                            	  5657: *-----------------------------------------------------------
                            	  5658: *-----------------------------------------------------------
                            	  5659: * OPCODE : MULU
                            	  5660: *-----------------------------------------------------------
                            	  5661: *-----------------------------------------------------------
                            	  5662: 
                            	  5663: op_MULU:
                            	  5664: 
01:000032FC 203CFE805501    	  5665:                 move.l #$FE805501,d0        * Initial
01:00003302 223C5697EDB6    	  5666:                 move.l #$5697EDB6,d1        * Initial Y
01:00003308 243CFE805501    	  5667:                 move.l #$FE805501,d2
01:0000330E 7600            	  5668:                 moveq  #$00000000,d3
01:00003310 7800            	  5669:                 moveq  #$00000000,d4        * Cumulative data results
01:00003312 7A00            	  5670:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003314 7C0E            	  5671:                 move.l #$0000000E,d6       * Inner loop counter
01:00003316 7E0E            	  5672:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5673: 
                            	  5674: 
01:00003318 C0C1            	  5675: MULU_OUTER1:    mulu d1,d0
01:0000331A 4183            	  5676:                 move.l SR,d3
01:0000331C 02830000000C    	  5677:                 andi.l #$0C,d3            * Isolate flags
01:00003322 DA83            	  5678:                 add.l d3,d5               * Copy flag results into accumulator
01:00003324 D880            	  5679:                 add.l d0,d4               * Copy data results into data accumulator
01:00003326 E299            	  5680:                 ror.l #$1,d1
                            	  5681: 
01:00003328 51CEFFEE        	  5682:                 dbf d6,MULU_OUTER1
01:0000332C E29A            	  5683:                 ror.l #$1,d2
01:0000332E 2002            	  5684:                 move.l d2,d0
01:00003330 7C0E            	  5685:                 move.l #$0000000E,d6       * Inner loop counter
01:00003332 51CFFFE4        	  5686:                 dbf d7,MULU_OUTER1
                            	  5687: 
01:00003336 0C8476FB988C    	  5688:                 cmpi.l #$76FB988C,d4      * Check the data results
01:0000333C 66FE            	  5689:                 bne.s *
                            	  5690: 
01:0000333E 0C8500000170    	  5691:                 cmpi.l #$00000170,d5      * Check the Flag results
01:00003344 66FE            	  5692:                 bne.s *
                            	  5693: 
                            	  5694: 
01:00003346 4E75            	  5695:                 rts
                            	  5696: 
                            	  5697: 
                            	  5698: *-----------------------------------------------------------
                            	  5699: *-----------------------------------------------------------
                            	  5700: * OPCODE : MULS
                            	  5701: *-----------------------------------------------------------
                            	  5702: *-----------------------------------------------------------
                            	  5703: 
                            	  5704: op_MULS:
                            	  5705: 
01:00003348 203CFE805501    	  5706:                 move.l #$FE805501,d0        * Initial
01:0000334E 223C5697EDB6    	  5707:                 move.l #$5697EDB6,d1        * Initial Y
01:00003354 243CFE805501    	  5708:                 move.l #$FE805501,d2
01:0000335A 7600            	  5709:                 moveq  #$00000000,d3
01:0000335C 7800            	  5710:                 moveq  #$00000000,d4        * Cumulative data results
01:0000335E 7A00            	  5711:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003360 7C0E            	  5712:                 move.l #$0000000E,d6       * Inner loop counter
01:00003362 7E0E            	  5713:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5714: 
                            	  5715: 
01:00003364 C1C1            	  5716: MULS_OUTER1:    muls d1,d0
01:00003366 4183            	  5717:                 move.l SR,d3
01:00003368 02830000000C    	  5718:                 andi.l #$0C,d3            * Isolate flags
01:0000336E DA83            	  5719:                 add.l d3,d5               * Copy flag results into accumulator
01:00003370 D880            	  5720:                 add.l d0,d4               * Copy data results into data accumulator
01:00003372 E299            	  5721:                 ror.l #$1,d1
                            	  5722: 
01:00003374 51CEFFEE        	  5723:                 dbf d6,MULS_OUTER1
01:00003378 E29A            	  5724:                 ror.l #$1,d2
01:0000337A 2002            	  5725:                 move.l d2,d0
01:0000337C 7C0E            	  5726:                 move.l #$0000000E,d6       * Inner loop counter
01:0000337E 51CFFFE4        	  5727:                 dbf d7,MULS_OUTER1
                            	  5728: 
01:00003382 0C84D4E2988C    	  5729:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:00003388 66FE            	  5730:                 bne.s *
                            	  5731: 
01:0000338A 0C85000003E0    	  5732:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:00003390 66FE            	  5733:                 bne.s *
                            	  5734: 
                            	  5735: 
01:00003392 4E75            	  5736:                 rts
                            	  5737: 
                            	  5738: 
                            	  5739: 
                            	  5740: *-----------------------------------------------------------
                            	  5741: *-----------------------------------------------------------
                            	  5742: * OPCODE : EXG
                            	  5743: *-----------------------------------------------------------
                            	  5744: *-----------------------------------------------------------
                            	  5745: 
                            	  5746: op_EXG:
01:00003394 223CD1D1D1D1    	  5747:                 move.l #$d1d1d1d1,d1
01:0000339A 243CD2D2D2D2    	  5748:                 move.l #$d2d2d2d2,d2
01:000033A0 263CD3D3D3D3    	  5749:                 move.l #$d3d3d3d3,d3
01:000033A6 227CA1A1A1A1    	  5750:                 move.l #$a1a1a1a1,a1
01:000033AC 247CA2A2A2A2    	  5751:                 move.l #$a2a2a2a2,a2
01:000033B2 267CA3A3A3A3    	  5752:                 move.l #$a3a3a3a3,a3
                            	  5753: 
01:000033B8 C342            	  5754:                 exg d1,d2
01:000033BA C34A            	  5755:                 exg a1,a2
01:000033BC C78B            	  5756:                 exg d3,a3
                            	  5757: 
01:000033BE 0C81D2D2D2D2    	  5758:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:000033C4 66FE            	  5759:                 bne.s *
01:000033C6 0C82D1D1D1D1    	  5760:                 cmpi.l #$d1d1d1d1,d2
01:000033CC 66FE            	  5761:                 bne.s *
01:000033CE 0C83A3A3A3A3    	  5762:                 cmpi.l #$a3a3a3a3,d3
01:000033D4 66FE            	  5763:                 bne.s *
                            	  5764: 
01:000033D6 2209            	  5765:                 move.l a1,d1
01:000033D8 240A            	  5766:                 move.l a2,d2
01:000033DA 260B            	  5767:                 move.l a3,d3
                            	  5768: 
01:000033DC 0C81A2A2A2A2    	  5769:                 cmpi.l #$a2a2a2a2,d1
01:000033E2 66FE            	  5770:                 bne.s *
01:000033E4 0C82A1A1A1A1    	  5771:                 cmpi.l #$a1a1a1a1,d2
01:000033EA 66FE            	  5772:                 bne.s *
01:000033EC 0C83D3D3D3D3    	  5773:                 cmpi.l #$d3d3d3d3,d3
01:000033F2 66FE            	  5774:                 bne.s *
                            	  5775: 
01:000033F4 4E75            	  5776:                 rts
                            	  5777: 
                            	  5778: 
                            	  5779: *-----------------------------------------------------------
                            	  5780: *-----------------------------------------------------------
                            	  5781: * OPCODE : ROx
                            	  5782: *-----------------------------------------------------------
                            	  5783: *-----------------------------------------------------------
                            	  5784: 
                            	  5785: *     Subroutine to check and accumulate the flags
01:000033F6 4183            	  5786: ROx_FLAGS:      move.l SR,d3
01:000033F8 02830000000F    	  5787:                 andi.l #$0F,d3            * Isolate flags
01:000033FE DA83            	  5788:                 add.l d3,d5               * Copy flag results into accumulator
01:00003400 4E75            	  5789:                 rts
                            	  5790: 
                            	  5791: op_ROx:
                            	  5792: 
                            	  5793: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5794: 
                            	  5795: *        BYTE LEFT
01:00003402 203C80018FF1    	  5796:                 move.l #$80018FF1,d0
01:00003408 7A00            	  5797:                 moveq  #$00000000,d5
01:0000340A 7C11            	  5798:                 moveq  #$00000011,d6
                            	  5799: ROx_LOOP1:
01:0000340C ED38            	  5800:                 rol.b d6,d0
01:0000340E 61E6            	  5801:                 bsr ROx_FLAGS
01:00003410 51CEFFFA        	  5802:                 dbf d6,ROx_LOOP1
01:00003414 0C8080018FE3    	  5803:                 cmpi.l #$80018FE3,d0
01:0000341A 66FE            	  5804:                 bne.s *
01:0000341C 0C850000006B    	  5805:                 cmpi.l #$0000006B,d5
01:00003422 66FE            	  5806:                 bne.s *
                            	  5807: 
                            	  5808: *        BYTE RIGHT
01:00003424 203C80018FF1    	  5809:                 move.l #$80018FF1,d0
01:0000342A 7C12            	  5810:                 moveq  #$00000012,d6
                            	  5811: ROx_LOOP2:
01:0000342C EC38            	  5812:                 ror.b d6,d0
01:0000342E 61C6            	  5813:                 bsr ROx_FLAGS
01:00003430 51CEFFFA        	  5814:                 dbf d6,ROx_LOOP2
01:00003434 0C8080018F3E    	  5815:                 cmpi.l #$80018F3E,d0
01:0000343A 66FE            	  5816:                 bne.s *
01:0000343C 0C85000000C5    	  5817:                 cmpi.l #$000000C5,d5
01:00003442 66FE            	  5818:                 bne.s *
                            	  5819: 
                            	  5820: 
                            	  5821: *        WORD LEFT
01:00003444 203C80018FF1    	  5822:                 move.l #$80018FF1,d0
01:0000344A 7C13            	  5823:                 moveq  #$00000013,d6
                            	  5824: ROx_LOOP3:
01:0000344C ED78            	  5825:                 rol.w d6,d0
01:0000344E 61A6            	  5826:                 bsr ROx_FLAGS
01:00003450 51CEFFFA        	  5827:                 dbf d6,ROx_LOOP3
01:00003454 0C80800163FC    	  5828:                 cmpi.l #$800163FC,d0
01:0000345A 66FE            	  5829:                 bne.s *
01:0000345C 0C8500000131    	  5830:                 cmpi.l #$00000131,d5
01:00003462 66FE            	  5831:                 bne.s *
                            	  5832: 
                            	  5833: *        WORD RIGHT
01:00003464 203C80018FF1    	  5834:                 move.l #$80018FF1,d0
01:0000346A 7C1E            	  5835:                 move.l #$0000001E,d6
                            	  5836: ROx_LOOP4:
01:0000346C EC78            	  5837:                 ror.w d6,d0
01:0000346E 6186            	  5838:                 bsr ROx_FLAGS
01:00003470 51CEFFFA        	  5839:                 dbf d6,ROx_LOOP4
01:00003474 0C808001C7F8    	  5840:                 cmpi.l #$8001C7F8,d0
01:0000347A 66FE            	  5841:                 bne.s *
01:0000347C 0C85000001DB    	  5842:                 cmpi.l #$000001DB,d5
01:00003482 66FE            	  5843:                 bne.s *
                            	  5844: 
                            	  5845: 
                            	  5846: *        LONG LEFT
01:00003484 203C80018FF1    	  5847:                 move.l #$80018FF1,d0
01:0000348A 7C15            	  5848:                 moveq  #$00000015,d6
                            	  5849: ROx_LOOP5:
01:0000348C EDB8            	  5850:                 rol.l d6,d0
01:0000348E 6100FF66        	  5851:                 bsr ROx_FLAGS
01:00003492 51CEFFF8        	  5852:                 dbf d6,ROx_LOOP5
01:00003496 0C8000C7F8C0    	  5853:                 cmpi.l #$00C7F8C0,d0
01:0000349C 66FE            	  5854:                 bne.s *
01:0000349E 0C850000021A    	  5855:                 cmpi.l #$0000021A,d5
01:000034A4 66FE            	  5856:                 bne.s *
                            	  5857: 
                            	  5858: *        LONG RIGHT
01:000034A6 203C80018FF1    	  5859:                 move.l #$80018FF1,d0
01:000034AC 7C16            	  5860:                 moveq  #$00000016,d6
                            	  5861: ROx_LOOP6:
01:000034AE ECB8            	  5862:                 ror.l d6,d0
01:000034B0 6100FF44        	  5863:                 bsr ROx_FLAGS
01:000034B4 51CEFFF8        	  5864:                 dbf d6,ROx_LOOP6
01:000034B8 0C80000C7F8C    	  5865:                 cmpi.l #$000C7F8C,d0
01:000034BE 66FE            	  5866:                 bne.s *
01:000034C0 0C8500000250    	  5867:                 cmpi.l #$00000250,d5
01:000034C6 66FE            	  5868:                 bne.s *
                            	  5869: 
                            	  5870: 
                            	  5871: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5872: 
01:000034C8 203C80018FF1    	  5873:                 move.l #$80018FF1,d0
01:000034CE 7A00            	  5874:                 moveq  #$00000000,d5
                            	  5875: 
                            	  5876: *        BYTE LEFT
01:000034D0 E318            	  5877:                 rol.b #1,d0
01:000034D2 6100FF22        	  5878:                 bsr ROx_FLAGS
01:000034D6 EB18            	  5879:                 rol.b #5,d0
01:000034D8 6100FF1C        	  5880:                 bsr ROx_FLAGS
01:000034DC EF18            	  5881:                 rol.b #7,d0
01:000034DE 6100FF16        	  5882:                 bsr ROx_FLAGS
01:000034E2 E118            	  5883:                 rol.b #8,d0
01:000034E4 6100FF10        	  5884:                 bsr ROx_FLAGS
01:000034E8 0C8080018F3E    	  5885:                 cmpi.l #$80018F3E,d0
01:000034EE 66FE            	  5886:                 bne.s *
01:000034F0 0C8500000009    	  5887:                 cmpi.l #$00000009,d5
01:000034F6 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        BYTE RIGHT
01:000034F8 E218            	  5891:                 ror.b #1,d0
01:000034FA 6100FEFA        	  5892:                 bsr ROx_FLAGS
01:000034FE EA18            	  5893:                 ror.b #5,d0
01:00003500 6100FEF4        	  5894:                 bsr ROx_FLAGS
01:00003504 EE18            	  5895:                 ror.b #7,d0
01:00003506 6100FEEE        	  5896:                 bsr ROx_FLAGS
01:0000350A E018            	  5897:                 ror.b #8,d0
01:0000350C 6100FEE8        	  5898:                 bsr ROx_FLAGS
01:00003510 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
01:00003516 66FE            	  5900:                 bne.s *
01:00003518 0C8500000024    	  5901:                 cmpi.l #$00000024,d5
01:0000351E 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        WORD LEFT
01:00003520 E358            	  5905:                 rol.w #1,d0
01:00003522 6100FED2        	  5906:                 bsr ROx_FLAGS
01:00003526 EB58            	  5907:                 rol.w #5,d0
01:00003528 6100FECC        	  5908:                 bsr ROx_FLAGS
01:0000352C EF58            	  5909:                 rol.w #7,d0
01:0000352E 6100FEC6        	  5910:                 bsr ROx_FLAGS
01:00003532 E158            	  5911:                 rol.w #8,d0
01:00003534 6100FEC0        	  5912:                 bsr ROx_FLAGS
01:00003538 0C808001FE31    	  5913:                 cmpi.l #$8001FE31,d0
01:0000353E 66FE            	  5914:                 bne.s *
01:00003540 0C8500000037    	  5915:                 cmpi.l #$00000037,d5
01:00003546 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        WORD RIGHT
01:00003548 E258            	  5919:                 ror.w #1,d0
01:0000354A 6100FEAA        	  5920:                 bsr ROx_FLAGS
01:0000354E EA58            	  5921:                 ror.w #5,d0
01:00003550 6100FEA4        	  5922:                 bsr ROx_FLAGS
01:00003554 EE58            	  5923:                 ror.w #7,d0
01:00003556 6100FE9E        	  5924:                 bsr ROx_FLAGS
01:0000355A E058            	  5925:                 ror.w #8,d0
01:0000355C 6100FE98        	  5926:                 bsr ROx_FLAGS
01:00003560 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
01:00003566 66FE            	  5928:                 bne.s *
01:00003568 0C850000005B    	  5929:                 cmpi.l #$0000005B,d5
01:0000356E 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: *        LONG LEFT
01:00003570 E398            	  5933:                 rol.l #1,d0
01:00003572 6100FE82        	  5934:                 bsr ROx_FLAGS
01:00003576 EB98            	  5935:                 rol.l #5,d0
01:00003578 6100FE7C        	  5936:                 bsr ROx_FLAGS
01:0000357C EF98            	  5937:                 rol.l #7,d0
01:0000357E 6100FE76        	  5938:                 bsr ROx_FLAGS
01:00003582 E198            	  5939:                 rol.l #8,d0
01:00003584 6100FE70        	  5940:                 bsr ROx_FLAGS
01:00003588 0C80FE300031    	  5941:                 cmpi.l #$FE300031,d0
01:0000358E 66FE            	  5942:                 bne.s *
01:00003590 0C8500000065    	  5943:                 cmpi.l #$00000065,d5
01:00003596 66FE            	  5944:                 bne.s *
                            	  5945: 
                            	  5946: *        LONG RIGHT
01:00003598 E298            	  5947:                 ror.l #1,d0
01:0000359A 6100FE5A        	  5948:                 bsr ROx_FLAGS
01:0000359E EA98            	  5949:                 ror.l #5,d0
01:000035A0 6100FE54        	  5950:                 bsr ROx_FLAGS
01:000035A4 EE98            	  5951:                 ror.l #7,d0
01:000035A6 6100FE4E        	  5952:                 bsr ROx_FLAGS
01:000035AA E098            	  5953:                 ror.l #8,d0
01:000035AC 6100FE48        	  5954:                 bsr ROx_FLAGS
01:000035B0 0C8080018FF1    	  5955:                 cmpi.l #$80018FF1,d0
01:000035B6 66FE            	  5956:                 bne.s *
01:000035B8 0C8500000080    	  5957:                 cmpi.l #$00000080,d5
01:000035BE 66FE            	  5958:                 bne.s *
                            	  5959: 
                            	  5960: 
                            	  5961: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5962: 
01:000035C0 7A00            	  5963:                 moveq  #$00000000,d5
01:000035C2 307C0100        	  5964:                 move.l #$00000100,a0
01:000035C6 30BC8FF1        	  5965:                 move.w #$8FF1,(a0)
                            	  5966: 
                            	  5967: *        WORD LEFT
01:000035CA E7D0            	  5968:                 rol (a0)
01:000035CC 6100FE28        	  5969:                 bsr ROx_FLAGS
01:000035D0 E7D0            	  5970:                 rol (a0)
01:000035D2 6100FE22        	  5971:                 bsr ROx_FLAGS
01:000035D6 E7D0            	  5972:                 rol (a0)
01:000035D8 6100FE1C        	  5973:                 bsr ROx_FLAGS
01:000035DC E7D0            	  5974:                 rol (a0)
01:000035DE 6100FE16        	  5975:                 bsr ROx_FLAGS
01:000035E2 3010            	  5976:                 move.w (a0),d0
01:000035E4 0C808001FF18    	  5977:                 cmpi.l #$8001FF18,d0
01:000035EA 66FE            	  5978:                 bne.s *
01:000035EC 0C8500000009    	  5979:                 cmpi.l #$00000009,d5
01:000035F2 66FE            	  5980:                 bne.s *
                            	  5981: 
                            	  5982: *        WORD RIGHT
01:000035F4 E6D0            	  5983:                 ror (a0)
01:000035F6 6100FDFE        	  5984:                 bsr ROx_FLAGS
01:000035FA E6D0            	  5985:                 ror (a0)
01:000035FC 6100FDF8        	  5986:                 bsr ROx_FLAGS
01:00003600 E6D0            	  5987:                 ror (a0)
01:00003602 6100FDF2        	  5988:                 bsr ROx_FLAGS
01:00003606 E6D0            	  5989:                 ror (a0)
01:00003608 6100FDEC        	  5990:                 bsr ROx_FLAGS
01:0000360C E6D0            	  5991:                 ror (a0)
01:0000360E 6100FDE6        	  5992:                 bsr ROx_FLAGS
01:00003612 E6D0            	  5993:                 ror (a0)
01:00003614 6100FDE0        	  5994:                 bsr ROx_FLAGS
01:00003618 3010            	  5995:                 move.w (a0),d0
01:0000361A 0C80800163FC    	  5996:                 cmpi.l #$800163FC,d0
01:00003620 66FE            	  5997:                 bne.s *
01:00003622 0C850000001B    	  5998:                 cmpi.l #$0000001B,d5
01:00003628 66FE            	  5999:                 bne.s *
                            	  6000: 
01:0000362A 4E75            	  6001:                 rts
                            	  6002: 
                            	  6003: 
                            	  6004: 
                            	  6005: *-----------------------------------------------------------
                            	  6006: *-----------------------------------------------------------
                            	  6007: * OPCODE : ROXx
                            	  6008: *-----------------------------------------------------------
                            	  6009: *-----------------------------------------------------------
                            	  6010: 
                            	  6011: *     Subroutine to check and accumulate the flags
01:0000362C 4183            	  6012: ROXx_FLAGS:     move.l SR,d3
01:0000362E 02830000000F    	  6013:                 andi.l #$0F,d3            * Isolate flags
01:00003634 DA83            	  6014:                 add.l d3,d5               * Copy flag results into accumulator
01:00003636 4E75            	  6015:                 rts
                            	  6016: 
                            	  6017: op_ROXx:
                            	  6018: 
                            	  6019: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6020: 
                            	  6021: *        BYTE LEFT
01:00003638 203C80018FF1    	  6022:                 move.l #$80018FF1,d0
01:0000363E 7A00            	  6023:                 moveq  #$00000000,d5
01:00003640 7C11            	  6024:                 moveq  #$00000011,d6
                            	  6025: ROXx_LOOP1:
01:00003642 ED30            	  6026:                 roxl.b d6,d0
01:00003644 61E6            	  6027:                 bsr ROXx_FLAGS
01:00003646 51CEFFFA        	  6028:                 dbf d6,ROXx_LOOP1
01:0000364A 0C8080018FD0    	  6029:                 cmpi.l #$80018FD0,d0
01:00003650 66FE            	  6030:                 bne.s *
01:00003652 0C8500000042    	  6031:                 cmpi.l #$00000042,d5
01:00003658 66FE            	  6032:                 bne.s *
                            	  6033: 
                            	  6034: *        BYTE RIGHT
01:0000365A 203C80018FF1    	  6035:                 move.l #$80018FF1,d0
01:00003660 7C12            	  6036:                 moveq  #$00000012,d6
                            	  6037: ROXx_LOOP2:
01:00003662 EC30            	  6038:                 roxr.b d6,d0
01:00003664 61C6            	  6039:                 bsr ROXx_FLAGS
01:00003666 51CEFFFA        	  6040:                 dbf d6,ROXx_LOOP2
01:0000366A 0C8080018F51    	  6041:                 cmpi.l #$80018F51,d0
01:00003670 66FE            	  6042:                 bne.s *
01:00003672 0C850000009C    	  6043:                 cmpi.l #$0000009C,d5
01:00003678 66FE            	  6044:                 bne.s *
                            	  6045: 
                            	  6046: 
                            	  6047: *        WORD LEFT
01:0000367A 203C80018FF1    	  6048:                 move.l #$80018FF1,d0
01:00003680 7C13            	  6049:                 moveq  #$00000013,d6
                            	  6050: ROXx_LOOP3:
01:00003682 ED70            	  6051:                 roxl.w d6,d0
01:00003684 61A6            	  6052:                 bsr ROXx_FLAGS
01:00003686 51CEFFFA        	  6053:                 dbf d6,ROXx_LOOP3
01:0000368A 0C8080013980    	  6054:                 cmpi.l #$80013980,d0
01:00003690 66FE            	  6055:                 bne.s *
01:00003692 0C85000000C9    	  6056:                 cmpi.l #$000000C9,d5
01:00003698 66FE            	  6057:                 bne.s *
                            	  6058: 
                            	  6059: *        WORD RIGHT
01:0000369A 203C80018FF1    	  6060:                 move.l #$80018FF1,d0
01:000036A0 7C1E            	  6061:                 move.l #$0000001E,d6
                            	  6062: ROXx_LOOP4:
01:000036A2 EC70            	  6063:                 roxr.w d6,d0
01:000036A4 6186            	  6064:                 bsr ROXx_FLAGS
01:000036A6 51CEFFFA        	  6065:                 dbf d6,ROXx_LOOP4
01:000036AA 0C8080010A1D    	  6066:                 cmpi.l #$80010A1D,d0
01:000036B0 66FE            	  6067:                 bne.s *
01:000036B2 0C850000014D    	  6068:                 cmpi.l #$0000014D,d5
01:000036B8 66FE            	  6069:                 bne.s *
                            	  6070: 
                            	  6071: 
                            	  6072: *        LONG LEFT
01:000036BA 203C80018FF1    	  6073:                 move.l #$80018FF1,d0
01:000036C0 7C15            	  6074:                 moveq  #$00000015,d6
                            	  6075: ROXx_LOOP5:
01:000036C2 EDB0            	  6076:                 roxl.l d6,d0
01:000036C4 6100FF66        	  6077:                 bsr ROXx_FLAGS
01:000036C8 51CEFFF8        	  6078:                 dbf d6,ROXx_LOOP5
01:000036CC 0C80800185D0    	  6079:                 cmpi.l #$800185D0,d0
01:000036D2 66FE            	  6080:                 bne.s *
01:000036D4 0C85000001A1    	  6081:                 cmpi.l #$000001A1,d5
01:000036DA 66FE            	  6082:                 bne.s *
                            	  6083: 
                            	  6084: *        LONG RIGHT
01:000036DC 203C80018FF1    	  6085:                 move.l #$80018FF1,d0
01:000036E2 7C16            	  6086:                 moveq  #$00000016,d6
                            	  6087: ROXx_LOOP6:
01:000036E4 ECB0            	  6088:                 roxr.l d6,d0
01:000036E6 6100FF44        	  6089:                 bsr ROXx_FLAGS
01:000036EA 51CEFFF8        	  6090:                 dbf d6,ROXx_LOOP6
01:000036EE 0C80082D8200    	  6091:                 cmpi.l #$082D8200,d0
01:000036F4 66FE            	  6092:                 bne.s *
01:000036F6 0C85000001DE    	  6093:                 cmpi.l #$000001DE,d5
01:000036FC 66FE            	  6094:                 bne.s *
                            	  6095: 
                            	  6096: 
                            	  6097: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6098: 
01:000036FE 203C80018FF1    	  6099:                 move.l #$80018FF1,d0
01:00003704 7A00            	  6100:                 moveq  #$00000000,d5
                            	  6101: 
                            	  6102: *        BYTE LEFT
01:00003706 E310            	  6103:                 roxl.b #1,d0
01:00003708 6100FF22        	  6104:                 bsr ROXx_FLAGS
01:0000370C EB10            	  6105:                 roxl.b #5,d0
01:0000370E 6100FF1C        	  6106:                 bsr ROXx_FLAGS
01:00003712 EF10            	  6107:                 roxl.b #7,d0
01:00003714 6100FF16        	  6108:                 bsr ROXx_FLAGS
01:00003718 E110            	  6109:                 roxl.b #8,d0
01:0000371A 6100FF10        	  6110:                 bsr ROXx_FLAGS
01:0000371E 0C8080018F09    	  6111:                 cmpi.l #$80018F09,d0
01:00003724 66FE            	  6112:                 bne.s *
01:00003726 0C850000000B    	  6113:                 cmpi.l #$0000000B,d5
01:0000372C 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        BYTE RIGHT
01:0000372E E210            	  6117:                 roxr.b #1,d0
01:00003730 6100FEFA        	  6118:                 bsr ROXx_FLAGS
01:00003734 EA10            	  6119:                 roxr.b #5,d0
01:00003736 6100FEF4        	  6120:                 bsr ROXx_FLAGS
01:0000373A EE10            	  6121:                 roxr.b #7,d0
01:0000373C 6100FEEE        	  6122:                 bsr ROXx_FLAGS
01:00003740 E010            	  6123:                 roxr.b #8,d0
01:00003742 6100FEE8        	  6124:                 bsr ROXx_FLAGS
01:00003746 0C8080018F00    	  6125:                 cmpi.l #$80018F00,d0
01:0000374C 66FE            	  6126:                 bne.s *
01:0000374E 0C8500000015    	  6127:                 cmpi.l #$00000015,d5
01:00003754 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        WORD LEFT
01:00003756 E350            	  6131:                 roxl.w #1,d0
01:00003758 6100FED2        	  6132:                 bsr ROXx_FLAGS
01:0000375C EB50            	  6133:                 roxl.w #5,d0
01:0000375E 6100FECC        	  6134:                 bsr ROXx_FLAGS
01:00003762 EF50            	  6135:                 roxl.w #7,d0
01:00003764 6100FEC6        	  6136:                 bsr ROXx_FLAGS
01:00003768 E150            	  6137:                 roxl.w #8,d0
01:0000376A 6100FEC0        	  6138:                 bsr ROXx_FLAGS
01:0000376E 0C808001B000    	  6139:                 cmpi.l #$8001B000,d0
01:00003774 66FE            	  6140:                 bne.s *
01:00003776 0C8500000027    	  6141:                 cmpi.l #$00000027,d5
01:0000377C 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        WORD RIGHT
01:0000377E E250            	  6145:                 roxr.w #1,d0
01:00003780 6100FEAA        	  6146:                 bsr ROXx_FLAGS
01:00003784 EA50            	  6147:                 roxr.w #5,d0
01:00003786 6100FEA4        	  6148:                 bsr ROXx_FLAGS
01:0000378A EE50            	  6149:                 roxr.w #7,d0
01:0000378C 6100FE9E        	  6150:                 bsr ROXx_FLAGS
01:00003790 E050            	  6151:                 roxr.w #8,d0
01:00003792 6100FE98        	  6152:                 bsr ROXx_FLAGS
01:00003796 0C8080010A00    	  6153:                 cmpi.l #$80010A00,d0
01:0000379C 66FE            	  6154:                 bne.s *
01:0000379E 0C8500000028    	  6155:                 cmpi.l #$00000028,d5
01:000037A4 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: *        LONG LEFT
01:000037A6 E390            	  6159:                 roxl.l #1,d0
01:000037A8 6100FE82        	  6160:                 bsr ROXx_FLAGS
01:000037AC EB90            	  6161:                 roxl.l #5,d0
01:000037AE 6100FE7C        	  6162:                 bsr ROXx_FLAGS
01:000037B2 EF90            	  6163:                 roxl.l #7,d0
01:000037B4 6100FE76        	  6164:                 bsr ROXx_FLAGS
01:000037B8 E190            	  6165:                 roxl.l #8,d0
01:000037BA 6100FE70        	  6166:                 bsr ROXx_FLAGS
01:000037BE 0C8040000010    	  6167:                 cmpi.l #$40000010,d0
01:000037C4 66FE            	  6168:                 bne.s *
01:000037C6 0C850000002A    	  6169:                 cmpi.l #$0000002A,d5
01:000037CC 66FE            	  6170:                 bne.s *
                            	  6171: 
                            	  6172: *        LONG RIGHT
01:000037CE E290            	  6173:                 roxr.l #1,d0
01:000037D0 6100FE5A        	  6174:                 bsr ROXx_FLAGS
01:000037D4 EA90            	  6175:                 roxr.l #5,d0
01:000037D6 6100FE54        	  6176:                 bsr ROXx_FLAGS
01:000037DA EE90            	  6177:                 roxr.l #7,d0
01:000037DC 6100FE4E        	  6178:                 bsr ROXx_FLAGS
01:000037E0 E090            	  6179:                 roxr.l #8,d0
01:000037E2 6100FE48        	  6180:                 bsr ROXx_FLAGS
01:000037E6 0C8000010200    	  6181:                 cmpi.l #$00010200,d0
01:000037EC 66FE            	  6182:                 bne.s *
01:000037EE 0C8500000032    	  6183:                 cmpi.l #$00000032,d5
01:000037F4 66FE            	  6184:                 bne.s *
                            	  6185: 
                            	  6186: 
                            	  6187: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6188: 
01:000037F6 7A00            	  6189:                 moveq  #$00000000,d5
01:000037F8 307C0100        	  6190:                 move.l #$00000100,a0
01:000037FC 30BC8FF1        	  6191:                 move.w #$8FF1,(a0)
                            	  6192: 
                            	  6193: *        WORD LEFT
01:00003800 E5D0            	  6194:                 roxl (a0)
01:00003802 6100FE28        	  6195:                 bsr ROXx_FLAGS
01:00003806 E5D0            	  6196:                 roxl (a0)
01:00003808 6100FE22        	  6197:                 bsr ROXx_FLAGS
01:0000380C E5D0            	  6198:                 roxl (a0)
01:0000380E 6100FE1C        	  6199:                 bsr ROXx_FLAGS
01:00003812 E5D0            	  6200:                 roxl (a0)
01:00003814 6100FE16        	  6201:                 bsr ROXx_FLAGS
01:00003818 3010            	  6202:                 move.w (a0),d0
01:0000381A 0C800001FF10    	  6203:                 cmpi.l #$0001FF10,d0
01:00003820 66FE            	  6204:                 bne.s *
01:00003822 0C8500000009    	  6205:                 cmpi.l #$00000009,d5
01:00003828 66FE            	  6206:                 bne.s *
                            	  6207: 
                            	  6208: *        WORD RIGHT
01:0000382A E4D0            	  6209:                 roxr (a0)
01:0000382C 6100FDFE        	  6210:                 bsr ROXx_FLAGS
01:00003830 E4D0            	  6211:                 roxr (a0)
01:00003832 6100FDF8        	  6212:                 bsr ROXx_FLAGS
01:00003836 E4D0            	  6213:                 roxr (a0)
01:00003838 6100FDF2        	  6214:                 bsr ROXx_FLAGS
01:0000383C E4D0            	  6215:                 roxr (a0)
01:0000383E 6100FDEC        	  6216:                 bsr ROXx_FLAGS
01:00003842 E4D0            	  6217:                 roxr (a0)
01:00003844 6100FDE6        	  6218:                 bsr ROXx_FLAGS
01:00003848 E4D0            	  6219:                 roxr (a0)
01:0000384A 6100FDE0        	  6220:                 bsr ROXx_FLAGS
01:0000384E 3010            	  6221:                 move.w (a0),d0
01:00003850 0C80000103FC    	  6222:                 cmpi.l #$000103FC,d0
01:00003856 66FE            	  6223:                 bne.s *
01:00003858 0C850000000A    	  6224:                 cmpi.l #$0000000A,d5
01:0000385E 66FE            	  6225:                 bne.s *
                            	  6226: 
01:00003860 4E75            	  6227:                 rts
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: *-----------------------------------------------------------
                            	  6233: *-----------------------------------------------------------
                            	  6234: * OPCODE : SHIFTS
                            	  6235: *-----------------------------------------------------------
                            	  6236: *-----------------------------------------------------------
                            	  6237: 
                            	  6238: *     Subroutine to check and accumulate the flags
01:00003862 4183            	  6239: SHIFTS_FLAGS:   move.l SR,d3
01:00003864 02830000000F    	  6240:                 andi.l #$0F,d3            * Isolate flags
01:0000386A DA83            	  6241:                 add.l d3,d5               * Copy flag results into accumulator
01:0000386C 4E75            	  6242:                 rts
                            	  6243: 
                            	  6244: op_SHIFTS:
                            	  6245: 
                            	  6246: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6247: 
                            	  6248: *        BYTE LEFT
01:0000386E 203C80018F81    	  6249:                 move.l #$80018F81,d0
01:00003874 7A00            	  6250:                 moveq  #$00000000,d5
01:00003876 7C02            	  6251:                 moveq  #$00000002,d6
                            	  6252: SHIFTS_LOOP1:
01:00003878 ED20            	  6253:                 asl.b d6,d0
01:0000387A 61E6            	  6254:                 bsr SHIFTS_FLAGS
01:0000387C 51CEFFFA        	  6255:                 dbf d6,SHIFTS_LOOP1
01:00003880 0C8080018F08    	  6256:                 cmpi.l #$80018F08,d0
01:00003886 66FE            	  6257:                 bne.s *
01:00003888 0C8500000002    	  6258:                 cmpi.l #$00000002,d5
01:0000388E 66FE            	  6259:                 bne.s *
                            	  6260: 
                            	  6261: *        BYTE RIGHT
01:00003890 203C80018F81    	  6262:                 move.l #$80018F81,d0
01:00003896 7C02            	  6263:                 moveq  #$00000002,d6
                            	  6264: SHIFTS_LOOP2:
01:00003898 EC20            	  6265:                 asr.b d6,d0
01:0000389A 61C6            	  6266:                 bsr SHIFTS_FLAGS
01:0000389C 51CEFFFA        	  6267:                 dbf d6,SHIFTS_LOOP2
01:000038A0 0C8080018FF0    	  6268:                 cmpi.l #$80018FF0,d0
01:000038A6 66FE            	  6269:                 bne.s *
01:000038A8 0C850000001A    	  6270:                 cmpi.l #$0000001A,d5
01:000038AE 66FE            	  6271:                 bne.s *
                            	  6272: 
                            	  6273: 
                            	  6274: *        WORD LEFT
01:000038B0 203C80018FF1    	  6275:                 move.l #$80018FF1,d0
01:000038B6 7C02            	  6276:                 moveq  #$00000002,d6
                            	  6277: SHIFTS_LOOP3:
01:000038B8 ED60            	  6278:                 asl.w d6,d0
01:000038BA 61A6            	  6279:                 bsr SHIFTS_FLAGS
01:000038BC 51CEFFFA        	  6280:                 dbf d6,SHIFTS_LOOP3
01:000038C0 0C8080017F88    	  6281:                 cmpi.l #$80017F88,d0
01:000038C6 66FE            	  6282:                 bne.s *
01:000038C8 0C850000001C    	  6283:                 cmpi.l #$0000001C,d5
01:000038CE 66FE            	  6284:                 bne.s *
                            	  6285: 
                            	  6286: *        WORD RIGHT
01:000038D0 203C80018FF1    	  6287:                 move.l #$80018FF1,d0
01:000038D6 7C02            	  6288:                 moveq  #$00000002,d6
                            	  6289: SHIFTS_LOOP4:
01:000038D8 EC60            	  6290:                 asr.w d6,d0
01:000038DA 6186            	  6291:                 bsr SHIFTS_FLAGS
01:000038DC 51CEFFFA        	  6292:                 dbf d6,SHIFTS_LOOP4
01:000038E0 0C808001F1FE    	  6293:                 cmpi.l #$8001F1FE,d0
01:000038E6 66FE            	  6294:                 bne.s *
01:000038E8 0C8500000034    	  6295:                 cmpi.l #$00000034,d5
01:000038EE 66FE            	  6296:                 bne.s *
                            	  6297: 
                            	  6298: 
                            	  6299: *        LONG LEFT
01:000038F0 203C80018FF1    	  6300:                 move.l #$80018FF1,d0
01:000038F6 7C02            	  6301:                 moveq  #$00000002,d6
                            	  6302: SHIFTS_LOOP5:
01:000038F8 EDA0            	  6303:                 asl.l d6,d0
01:000038FA 6100FF66        	  6304:                 bsr SHIFTS_FLAGS
01:000038FE 51CEFFF8        	  6305:                 dbf d6,SHIFTS_LOOP5
01:00003902 0C80000C7F88    	  6306:                 cmpi.l #$000C7F88,d0
01:00003908 66FE            	  6307:                 bne.s *
01:0000390A 0C8500000036    	  6308:                 cmpi.l #$00000036,d5
01:00003910 66FE            	  6309:                 bne.s *
                            	  6310: 
                            	  6311: *        LONG RIGHT
01:00003912 203C80018FF1    	  6312:                 move.l #$80018FF1,d0
01:00003918 7C02            	  6313:                 moveq  #$00000002,d6
                            	  6314: SHIFTS_LOOP6:
01:0000391A ECA0            	  6315:                 asr.l d6,d0
01:0000391C 6100FF44        	  6316:                 bsr SHIFTS_FLAGS
01:00003920 51CEFFF8        	  6317:                 dbf d6,SHIFTS_LOOP6
01:00003924 0C80F00031FE    	  6318:                 cmpi.l #$F00031FE,d0
01:0000392A 66FE            	  6319:                 bne.s *
01:0000392C 0C850000004E    	  6320:                 cmpi.l #$0000004E,d5
01:00003932 66FE            	  6321:                 bne.s *
                            	  6322: 
                            	  6323: 
                            	  6324: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6325: 
01:00003934 203C80018FF1    	  6326:                 move.l #$80018FF1,d0
01:0000393A 7A00            	  6327:                 moveq  #$00000000,d5
                            	  6328: 
                            	  6329: *        BYTE LEFT
01:0000393C D000            	  6330:                 asl.b #1,d0
01:0000393E 6100FF22        	  6331:                 bsr SHIFTS_FLAGS
01:00003942 E500            	  6332:                 asl.b #2,d0
01:00003944 6100FF1C        	  6333:                 bsr SHIFTS_FLAGS
01:00003948 D000            	  6334:                 asl.b #1,d0
01:0000394A 6100FF16        	  6335:                 bsr SHIFTS_FLAGS
01:0000394E E700            	  6336:                 asl.b #3,d0
01:00003950 6100FF10        	  6337:                 bsr SHIFTS_FLAGS
01:00003954 0C8080018F80    	  6338:                 cmpi.l #$80018F80,d0
01:0000395A 66FE            	  6339:                 bne.s *
01:0000395C 0C850000001F    	  6340:                 cmpi.l #$0000001F,d5
01:00003962 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        BYTE RIGHT
01:00003964 E200            	  6344:                 asr.b #1,d0
01:00003966 6100FEFA        	  6345:                 bsr SHIFTS_FLAGS
01:0000396A E400            	  6346:                 asr.b #2,d0
01:0000396C 6100FEF4        	  6347:                 bsr SHIFTS_FLAGS
01:00003970 E600            	  6348:                 asr.b #3,d0
01:00003972 6100FEEE        	  6349:                 bsr SHIFTS_FLAGS
01:00003976 E200            	  6350:                 asr.b #1,d0
01:00003978 6100FEE8        	  6351:                 bsr SHIFTS_FLAGS
01:0000397C 0C8080018FFF    	  6352:                 cmpi.l #$80018FFF,d0
01:00003982 66FE            	  6353:                 bne.s *
01:00003984 0C850000003F    	  6354:                 cmpi.l #$0000003F,d5
01:0000398A 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        WORD LEFT
01:0000398C D040            	  6358:                 asl.w #1,d0
01:0000398E 6100FED2        	  6359:                 bsr SHIFTS_FLAGS
01:00003992 E540            	  6360:                 asl.w #2,d0
01:00003994 6100FECC        	  6361:                 bsr SHIFTS_FLAGS
01:00003998 E740            	  6362:                 asl.w #3,d0
01:0000399A 6100FEC6        	  6363:                 bsr SHIFTS_FLAGS
01:0000399E EB40            	  6364:                 asl.w #5,d0
01:000039A0 6100FEC0        	  6365:                 bsr SHIFTS_FLAGS
01:000039A4 0C808001F800    	  6366:                 cmpi.l #$8001F800,d0
01:000039AA 66FE            	  6367:                 bne.s *
01:000039AC 0C8500000056    	  6368:                 cmpi.l #$00000056,d5
01:000039B2 66FE            	  6369:                 bne.s *
                            	  6370: 
                            	  6371: *        WORD RIGHT
01:000039B4 EA40            	  6372:                 asr.w #5,d0
01:000039B6 6100FEAA        	  6373:                 bsr SHIFTS_FLAGS
01:000039BA E240            	  6374:                 asr.w #1,d0
01:000039BC 6100FEA4        	  6375:                 bsr SHIFTS_FLAGS
01:000039C0 E440            	  6376:                 asr.w #2,d0
01:000039C2 6100FE9E        	  6377:                 bsr SHIFTS_FLAGS
01:000039C6 E840            	  6378:                 asr.w #4,d0
01:000039C8 6100FE98        	  6379:                 bsr SHIFTS_FLAGS
01:000039CC 0C808001FFFF    	  6380:                 cmpi.l #$8001FFFF,d0
01:000039D2 66FE            	  6381:                 bne.s *
01:000039D4 0C8500000077    	  6382:                 cmpi.l #$00000077,d5
01:000039DA 66FE            	  6383:                 bne.s *
                            	  6384: 
                            	  6385: *        LONG LEFT
01:000039DC 203C80018FF1    	  6386:                 move.l #$80018FF1,d0
01:000039E2 D080            	  6387:                 asl.l #1,d0
01:000039E4 6100FE7C        	  6388:                 bsr SHIFTS_FLAGS
01:000039E8 E580            	  6389:                 asl.l #2,d0
01:000039EA 6100FE76        	  6390:                 bsr SHIFTS_FLAGS
01:000039EE EF80            	  6391:                 asl.l #7,d0
01:000039F0 6100FE70        	  6392:                 bsr SHIFTS_FLAGS
01:000039F4 E980            	  6393:                 asl.l #4,d0
01:000039F6 6100FE6A        	  6394:                 bsr SHIFTS_FLAGS
01:000039FA 0C8063FC4000    	  6395:                 cmpi.l #$63FC4000,d0
01:00003A00 66FE            	  6396:                 bne.s *
01:00003A02 0C850000007A    	  6397:                 cmpi.l #$0000007A,d5
01:00003A08 66FE            	  6398:                 bne.s *
                            	  6399: 
                            	  6400: *        LONG RIGHT
01:00003A0A 203C80018FF1    	  6401:                 move.l #$80018FF1,d0
01:00003A10 E280            	  6402:                 asr.l #1,d0
01:00003A12 6100FE4E        	  6403:                 bsr SHIFTS_FLAGS
01:00003A16 EA80            	  6404:                 asr.l #5,d0
01:00003A18 6100FE48        	  6405:                 bsr SHIFTS_FLAGS
01:00003A1C EE80            	  6406:                 asr.l #7,d0
01:00003A1E 6100FE42        	  6407:                 bsr SHIFTS_FLAGS
01:00003A22 E080            	  6408:                 asr.l #8,d0
01:00003A24 6100FE3C        	  6409:                 bsr SHIFTS_FLAGS
01:00003A28 0C80FFFFFC00    	  6410:                 cmpi.l #$FFFFFC00,d0
01:00003A2E 66FE            	  6411:                 bne.s *
01:00003A30 0C850000009C    	  6412:                 cmpi.l #$0000009C,d5
01:00003A36 66FE            	  6413:                 bne.s *
                            	  6414: 
                            	  6415: 
                            	  6416: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6417: 
01:00003A38 7A00            	  6418:                 moveq  #$00000000,d5
01:00003A3A 307C0100        	  6419:                 move.l #$00000100,a0
01:00003A3E 30BC8FF1        	  6420:                 move.w #$8FF1,(a0)
                            	  6421: 
                            	  6422: *        WORD LEFT
01:00003A42 E1D0            	  6423:                 asl  (a0)
01:00003A44 6100FE1C        	  6424:                 bsr SHIFTS_FLAGS
01:00003A48 E1D0            	  6425:                 asl  (a0)
01:00003A4A 6100FE16        	  6426:                 bsr SHIFTS_FLAGS
01:00003A4E E1D0            	  6427:                 asl  (a0)
01:00003A50 6100FE10        	  6428:                 bsr SHIFTS_FLAGS
01:00003A54 E1D0            	  6429:                 asl  (a0)
01:00003A56 6100FE0A        	  6430:                 bsr SHIFTS_FLAGS
01:00003A5A 3010            	  6431:                 move.w (a0),d0
01:00003A5C 0C80FFFFFF10    	  6432:                 cmpi.l #$FFFFFF10,d0
01:00003A62 66FE            	  6433:                 bne.s *
01:00003A64 0C850000000D    	  6434:                 cmpi.l #$0000000D,d5
01:00003A6A 66FE            	  6435:                 bne.s *
                            	  6436: 
                            	  6437: *        WORD RIGHT
01:00003A6C E0D0            	  6438:                 asr (a0)
01:00003A6E 6100FDF2        	  6439:                 bsr SHIFTS_FLAGS
01:00003A72 E0D0            	  6440:                 asr (a0)
01:00003A74 6100FDEC        	  6441:                 bsr SHIFTS_FLAGS
01:00003A78 E0D0            	  6442:                 asr (a0)
01:00003A7A 6100FDE6        	  6443:                 bsr SHIFTS_FLAGS
01:00003A7E E0D0            	  6444:                 asr (a0)
01:00003A80 6100FDE0        	  6445:                 bsr SHIFTS_FLAGS
01:00003A84 E0D0            	  6446:                 asr (a0)
01:00003A86 6100FDDA        	  6447:                 bsr SHIFTS_FLAGS
01:00003A8A E0D0            	  6448:                 asr (a0)
01:00003A8C 6100FDD4        	  6449:                 bsr SHIFTS_FLAGS
01:00003A90 3010            	  6450:                 move.w (a0),d0
01:00003A92 0C80FFFFFFFC    	  6451:                 cmpi.l #$FFFFFFFC,d0
01:00003A98 66FE            	  6452:                 bne.s *
01:00003A9A 0C850000003E    	  6453:                 cmpi.l #$0000003E,d5
01:00003AA0 66FE            	  6454:                 bne.s *
                            	  6455: 
01:00003AA2 4E75            	  6456:                 rts
                            	  6457: 
                            	  6458: 
                            	  6459: 
                            	  6460: *-----------------------------------------------------------
                            	  6461: *-----------------------------------------------------------
                            	  6462: * OPCODE : SHIFTS2
                            	  6463: *-----------------------------------------------------------
                            	  6464: *-----------------------------------------------------------
                            	  6465: 
                            	  6466: *     Subroutine to check and accumulate the flags
01:00003AA4 4183            	  6467: SHIFTS2_FLAGS:  move.l SR,d3
01:00003AA6 02830000000F    	  6468:                 andi.l #$0F,d3            * Isolate flags
01:00003AAC DA83            	  6469:                 add.l d3,d5               * Copy flag results into accumulator
01:00003AAE 4E75            	  6470:                 rts
                            	  6471: 
                            	  6472: op_SHIFTS2:
                            	  6473: 
                            	  6474: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6475: 
                            	  6476: *        BYTE LEFT
01:00003AB0 203C80018F81    	  6477:                 move.l #$80018F81,d0
01:00003AB6 7A00            	  6478:                 moveq  #$00000000,d5
01:00003AB8 7C02            	  6479:                 moveq  #$00000002,d6
                            	  6480: SHIFTS2_LOOP1:
01:00003ABA ED28            	  6481:                 lsl.b d6,d0
01:00003ABC 61E6            	  6482:                 bsr SHIFTS2_FLAGS
01:00003ABE 51CEFFFA        	  6483:                 dbf d6,SHIFTS2_LOOP1
01:00003AC2 0C8080018F08    	  6484:                 cmpi.l #$80018F08,d0
01:00003AC8 66FE            	  6485:                 bne.s *
01:00003ACA 4A85            	  6486:                 cmpi.l #$00000000,d5
01:00003ACC 66FE            	  6487:                 bne.s *
                            	  6488: 
                            	  6489: *        BYTE RIGHT
01:00003ACE 203C80018F81    	  6490:                 move.l #$80018F81,d0
01:00003AD4 7C02            	  6491:                 moveq  #$00000002,d6
                            	  6492: SHIFTS2_LOOP2:
01:00003AD6 EC28            	  6493:                 lsr.b d6,d0
01:00003AD8 61CA            	  6494:                 bsr SHIFTS2_FLAGS
01:00003ADA 51CEFFFA        	  6495:                 dbf d6,SHIFTS2_LOOP2
01:00003ADE 0C8080018F10    	  6496:                 cmpi.l #$80018F10,d0
01:00003AE4 66FE            	  6497:                 bne.s *
01:00003AE6 4A85            	  6498:                 cmpi.l #$00000000,d5
01:00003AE8 66FE            	  6499:                 bne.s *
                            	  6500: 
                            	  6501: 
                            	  6502: *        WORD LEFT
01:00003AEA 203C80018FF1    	  6503:                 move.l #$80018FF1,d0
01:00003AF0 7C02            	  6504:                 moveq  #$00000002,d6
                            	  6505: SHIFTS2_LOOP3:
01:00003AF2 ED68            	  6506:                 lsl.w d6,d0
01:00003AF4 61AE            	  6507:                 bsr SHIFTS2_FLAGS
01:00003AF6 51CEFFFA        	  6508:                 dbf d6,SHIFTS2_LOOP3
01:00003AFA 0C8080017F88    	  6509:                 cmpi.l #$80017F88,d0
01:00003B00 66FE            	  6510:                 bne.s *
01:00003B02 4A85            	  6511:                 cmpi.l #$00000000,d5
01:00003B04 66FE            	  6512:                 bne.s *
                            	  6513: 
                            	  6514: *        WORD RIGHT
01:00003B06 203C80018FF1    	  6515:                 move.l #$80018FF1,d0
01:00003B0C 7C02            	  6516:                 moveq  #$00000002,d6
                            	  6517: SHIFTS2_LOOP4:
01:00003B0E EC68            	  6518:                 lsr.w d6,d0
01:00003B10 6192            	  6519:                 bsr SHIFTS2_FLAGS
01:00003B12 51CEFFFA        	  6520:                 dbf d6,SHIFTS2_LOOP4
01:00003B16 0C80800111FE    	  6521:                 cmpi.l #$800111FE,d0
01:00003B1C 66FE            	  6522:                 bne.s *
01:00003B1E 4A85            	  6523:                 cmpi.l #$00000000,d5
01:00003B20 66FE            	  6524:                 bne.s *
                            	  6525: 
                            	  6526: 
                            	  6527: *        LONG LEFT
01:00003B22 203C80018FF1    	  6528:                 move.l #$80018FF1,d0
01:00003B28 7C02            	  6529:                 moveq  #$00000002,d6
                            	  6530: SHIFTS2_LOOP5:
01:00003B2A EDA8            	  6531:                 lsl.l d6,d0
01:00003B2C 6100FF76        	  6532:                 bsr SHIFTS2_FLAGS
01:00003B30 51CEFFF8        	  6533:                 dbf d6,SHIFTS2_LOOP5
01:00003B34 0C80000C7F88    	  6534:                 cmpi.l #$000C7F88,d0
01:00003B3A 66FE            	  6535:                 bne.s *
01:00003B3C 4A85            	  6536:                 cmpi.l #$00000000,d5
01:00003B3E 66FE            	  6537:                 bne.s *
                            	  6538: 
                            	  6539: *        LONG RIGHT
01:00003B40 203C80018FF1    	  6540:                 move.l #$80018FF1,d0
01:00003B46 7C02            	  6541:                 moveq  #$00000002,d6
                            	  6542: SHIFTS2_LOOP6:
01:00003B48 ECA8            	  6543:                 lsr.l d6,d0
01:00003B4A 6100FF58        	  6544:                 bsr SHIFTS2_FLAGS
01:00003B4E 51CEFFF8        	  6545:                 dbf d6,SHIFTS2_LOOP6
01:00003B52 0C80100031FE    	  6546:                 cmpi.l #$100031FE,d0
01:00003B58 66FE            	  6547:                 bne.s *
01:00003B5A 4A85            	  6548:                 cmpi.l #$00000000,d5
01:00003B5C 66FE            	  6549:                 bne.s *
                            	  6550: 
                            	  6551: 
                            	  6552: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6553: 
01:00003B5E 203C80018FF1    	  6554:                 move.l #$80018FF1,d0
01:00003B64 7A00            	  6555:                 moveq  #$00000000,d5
                            	  6556: 
                            	  6557: *        BYTE LEFT
01:00003B66 E308            	  6558:                 lsl.b #1,d0
01:00003B68 6100FF3A        	  6559:                 bsr SHIFTS2_FLAGS
01:00003B6C E508            	  6560:                 lsl.b #2,d0
01:00003B6E 6100FF34        	  6561:                 bsr SHIFTS2_FLAGS
01:00003B72 E308            	  6562:                 lsl.b #1,d0
01:00003B74 6100FF2E        	  6563:                 bsr SHIFTS2_FLAGS
01:00003B78 E708            	  6564:                 lsl.b #3,d0
01:00003B7A 6100FF28        	  6565:                 bsr SHIFTS2_FLAGS
01:00003B7E 0C8080018F80    	  6566:                 cmpi.l #$80018F80,d0
01:00003B84 66FE            	  6567:                 bne.s *
01:00003B86 0C850000001B    	  6568:                 cmpi.l #$0000001B,d5
01:00003B8C 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        BYTE RIGHT
01:00003B8E E208            	  6572:                 lsr.b #1,d0
01:00003B90 6100FF12        	  6573:                 bsr SHIFTS2_FLAGS
01:00003B94 E408            	  6574:                 lsr.b #2,d0
01:00003B96 6100FF0C        	  6575:                 bsr SHIFTS2_FLAGS
01:00003B9A E608            	  6576:                 lsr.b #3,d0
01:00003B9C 6100FF06        	  6577:                 bsr SHIFTS2_FLAGS
01:00003BA0 E208            	  6578:                 lsr.b #1,d0
01:00003BA2 6100FF00        	  6579:                 bsr SHIFTS2_FLAGS
01:00003BA6 0C8080018F01    	  6580:                 cmpi.l #$80018F01,d0
01:00003BAC 66FE            	  6581:                 bne.s *
01:00003BAE 0C850000001B    	  6582:                 cmpi.l #$0000001B,d5
01:00003BB4 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        WORD LEFT
01:00003BB6 E348            	  6586:                 lsl.w #1,d0
01:00003BB8 6100FEEA        	  6587:                 bsr SHIFTS2_FLAGS
01:00003BBC E548            	  6588:                 lsl.w #2,d0
01:00003BBE 6100FEE4        	  6589:                 bsr SHIFTS2_FLAGS
01:00003BC2 E748            	  6590:                 lsl.w #3,d0
01:00003BC4 6100FEDE        	  6591:                 bsr SHIFTS2_FLAGS
01:00003BC8 EB48            	  6592:                 lsl.w #5,d0
01:00003BCA 6100FED8        	  6593:                 bsr SHIFTS2_FLAGS
01:00003BCE 0C8080010800    	  6594:                 cmpi.l #$80010800,d0
01:00003BD4 66FE            	  6595:                 bne.s *
01:00003BD6 0C8500000025    	  6596:                 cmpi.l #$00000025,d5
01:00003BDC 66FE            	  6597:                 bne.s *
                            	  6598: 
                            	  6599: *        WORD RIGHT
01:00003BDE EA48            	  6600:                 lsr.w #5,d0
01:00003BE0 6100FEC2        	  6601:                 bsr SHIFTS2_FLAGS
01:00003BE4 E248            	  6602:                 lsr.w #1,d0
01:00003BE6 6100FEBC        	  6603:                 bsr SHIFTS2_FLAGS
01:00003BEA E448            	  6604:                 lsr.w #2,d0
01:00003BEC 6100FEB6        	  6605:                 bsr SHIFTS2_FLAGS
01:00003BF0 E848            	  6606:                 lsr.w #4,d0
01:00003BF2 6100FEB0        	  6607:                 bsr SHIFTS2_FLAGS
01:00003BF6 0C8080010000    	  6608:                 cmpi.l #$80010000,d0
01:00003BFC 66FE            	  6609:                 bne.s *
01:00003BFE 0C850000002A    	  6610:                 cmpi.l #$0000002A,d5
01:00003C04 66FE            	  6611:                 bne.s *
                            	  6612: 
                            	  6613: *        LONG LEFT
01:00003C06 203C80018FF1    	  6614:                 move.l #$80018FF1,d0
01:00003C0C E388            	  6615:                 lsl.l #1,d0
01:00003C0E 6100FE94        	  6616:                 bsr SHIFTS2_FLAGS
01:00003C12 E588            	  6617:                 lsl.l #2,d0
01:00003C14 6100FE8E        	  6618:                 bsr SHIFTS2_FLAGS
01:00003C18 EF88            	  6619:                 lsl.l #7,d0
01:00003C1A 6100FE88        	  6620:                 bsr SHIFTS2_FLAGS
01:00003C1E E988            	  6621:                 lsl.l #4,d0
01:00003C20 6100FE82        	  6622:                 bsr SHIFTS2_FLAGS
01:00003C24 0C8063FC4000    	  6623:                 cmpi.l #$63FC4000,d0
01:00003C2A 66FE            	  6624:                 bne.s *
01:00003C2C 0C850000002B    	  6625:                 cmpi.l #$0000002B,d5
01:00003C32 66FE            	  6626:                 bne.s *
                            	  6627: 
                            	  6628: *        LONG RIGHT
01:00003C34 203C80018FF1    	  6629:                 move.l #$80018FF1,d0
01:00003C3A E288            	  6630:                 lsr.l #1,d0
01:00003C3C 6100FE66        	  6631:                 bsr SHIFTS2_FLAGS
01:00003C40 EA88            	  6632:                 lsr.l #5,d0
01:00003C42 6100FE60        	  6633:                 bsr SHIFTS2_FLAGS
01:00003C46 EE88            	  6634:                 lsr.l #7,d0
01:00003C48 6100FE5A        	  6635:                 bsr SHIFTS2_FLAGS
01:00003C4C E088            	  6636:                 lsr.l #8,d0
01:00003C4E 6100FE54        	  6637:                 bsr SHIFTS2_FLAGS
01:00003C52 0C8000000400    	  6638:                 cmpi.l #$00000400,d0
01:00003C58 66FE            	  6639:                 bne.s *
01:00003C5A 0C850000002D    	  6640:                 cmpi.l #$0000002D,d5
01:00003C60 66FE            	  6641:                 bne.s *
                            	  6642: 
                            	  6643: 
                            	  6644: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6645: 
01:00003C62 7A00            	  6646:                 moveq  #$00000000,d5
01:00003C64 307C0100        	  6647:                 move.l #$00000100,a0
01:00003C68 30BC8FF1        	  6648:                 move.w #$8FF1,(a0)
                            	  6649: 
                            	  6650: *        WORD LEFT
01:00003C6C E3D0            	  6651:                 lsl  (a0)
01:00003C6E 6100FE34        	  6652:                 bsr SHIFTS2_FLAGS
01:00003C72 E3D0            	  6653:                 lsl  (a0)
01:00003C74 6100FE2E        	  6654:                 bsr SHIFTS2_FLAGS
01:00003C78 E3D0            	  6655:                 lsl  (a0)
01:00003C7A 6100FE28        	  6656:                 bsr SHIFTS2_FLAGS
01:00003C7E E3D0            	  6657:                 lsl  (a0)
01:00003C80 6100FE22        	  6658:                 bsr SHIFTS2_FLAGS
01:00003C84 3010            	  6659:                 move.w (a0),d0
01:00003C86 0C800000FF10    	  6660:                 cmpi.l #$0000FF10,d0
01:00003C8C 66FE            	  6661:                 bne.s *
01:00003C8E 0C8500000009    	  6662:                 cmpi.l #$00000009,d5
01:00003C94 66FE            	  6663:                 bne.s *
                            	  6664: 
                            	  6665: *        WORD RIGHT
01:00003C96 E2D0            	  6666:                 lsr (a0)
01:00003C98 6100FE0A        	  6667:                 bsr SHIFTS2_FLAGS
01:00003C9C E2D0            	  6668:                 lsr (a0)
01:00003C9E 6100FE04        	  6669:                 bsr SHIFTS2_FLAGS
01:00003CA2 E2D0            	  6670:                 lsr (a0)
01:00003CA4 6100FDFE        	  6671:                 bsr SHIFTS2_FLAGS
01:00003CA8 E2D0            	  6672:                 lsr (a0)
01:00003CAA 6100FDF8        	  6673:                 bsr SHIFTS2_FLAGS
01:00003CAE E2D0            	  6674:                 lsr (a0)
01:00003CB0 6100FDF2        	  6675:                 bsr SHIFTS2_FLAGS
01:00003CB4 E2D0            	  6676:                 lsr (a0)
01:00003CB6 6100FDEC        	  6677:                 bsr SHIFTS2_FLAGS
01:00003CBA 3010            	  6678:                 move.w (a0),d0
01:00003CBC 0C80000003FC    	  6679:                 cmpi.l #$000003FC,d0
01:00003CC2 66FE            	  6680:                 bne.s *
01:00003CC4 0C850000000A    	  6681:                 cmpi.l #$0000000A,d5
01:00003CCA 66FE            	  6682:                 bne.s *
                            	  6683: 
01:00003CCC 4E75            	  6684:                 rts
                            	  6685: 
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ; OPCODE : BSR / RTS
                            	  6689: ;-----------------------------------------------------------
                            	  6690: ;-----------------------------------------------------------
                            	  6691: 
                            	  6692: ;t3_bsr:
                            	  6693: ;	moveq	#3,d3
                            	  6694: ;	rts
                            	  6695: 
                            	  6696: ;t1_bsr:
                            	  6697: ;	moveq	#1,d1
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;op_bsr:
                            	  6701: ;	bsr			t1_bsr
                            	  6702: ;	bsr			t2_bsr
                            	  6703: ;	bsr.w		t3_bsr
                            	  6704: ;	bsr.w		t4_bsr
                            	  6705: ;	cmpi.l	#1,d1
                            	  6706: ;	bne			*
                            	  6707: ;	cmpi.l	#2,d2
                            	  6708: ;	bne			*
                            	  6709: ;	cmpi.l	#3,d3
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#4,d4
                            	  6712: ;	bne			*
                            	  6713: ;	rts
                            	  6714: 
                            	  6715: ;t2_bsr:
                            	  6716: ;	moveq	#2,d2
                            	  6717: ;	rts
                            	  6718: 	
                            	  6719: ;t4_bsr:
                            	  6720: ;	moveq	#4,d4
                            	  6721: ;	rts
                            	  6722: 

Source: "boot.asm"
                            	   422: 
                            	   423: ; -----------------------------------------------------------------------------
                            	   424: ; Gets the screen color in d0 and d1.
                            	   425: ; -----------------------------------------------------------------------------
                            	   426: 
                            	   427: get_screen_color:
01:00003CCE 203900000400    	   428: 	move.l	fgcolor,d0			; get foreground color
01:00003CD4 EB80            	   429: 	asl.l		#5,d0						; shift into position
01:00003CD6 008040000000    	   430: 	ori.l		#$40000000,d0		; set priority
01:00003CDC 223900000404    	   431: 	move.l	bkcolor,d1
01:00003CE2 E089            	   432: 	lsr.l		#8,d1
01:00003CE4 E089            	   433: 	lsr.l		#8,d1
01:00003CE6 02810000001F    	   434: 	andi.l	#31,d1					; mask off extra bits
01:00003CEC 8081            	   435: 	or.l		d1,d0						; set background color bits in upper long word
01:00003CEE 223900000404    	   436: 	move.l	bkcolor,d1			; get background color
01:00003CF4 E181            	   437: 	asl.l		#8,d1						; shift into position for display ram
01:00003CF6 E181            	   438: 	asl.l		#8,d1
01:00003CF8 4E75            	   439: 	rts
                            	   440: 
                            	   441: ; -----------------------------------------------------------------------------
                            	   442: ; -----------------------------------------------------------------------------
                            	   443: 
                            	   444: clear_screen:
01:00003CFA 207900000410    	   445: 	move.l	TextScr,a0				; a0 = pointer to screen area
01:00003D00 10390000040A    	   446: 	move.b	TextRows,d0				; d0 = rows
01:00003D06 14390000040B    	   447: 	move.b	TextCols,d2				; d2 = cols
01:00003D0C 4880            	   448: 	ext.w		d0								; convert to word
01:00003D0E 4882            	   449: 	ext.w		d2								; convert to word
01:00003D10 C4C0            	   450: 	mulu		d0,d2							; d2 = number of character cells to clear
01:00003D12 61BA            	   451: 	bsr			get_screen_color	; get the color bits
01:00003D14 00410020        	   452: 	ori.w		#32,d1						; load space character
01:00003D18 E159            	   453: 	rol.w		#8,d1							; swap endian, text controller expects little endian
01:00003D1A 4841            	   454: 	swap		d1
01:00003D1C E159            	   455: 	rol.w		#8,d1
01:00003D1E E158            	   456: 	rol.w		#8,d0							; swap endian
01:00003D20 4840            	   457: 	swap		d0
01:00003D22 E158            	   458: 	rol.w		#8,d0
                            	   459: loop3:
01:00003D24 20C1            	   460: 	move.l	d1,(a0)+					; copy char plus bkcolor to cell
01:00003D26 4E71            	   461: 	nop	
01:00003D28 4E71            	   462: 	nop
01:00003D2A 4E71            	   463: 	nop	
01:00003D2C 4E71            	   464: 	nop
01:00003D2E 20C0            	   465: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003D30 4E71            	   466: 	nop
01:00003D32 4E71            	   467: 	nop
01:00003D34 4E71            	   468: 	nop	
01:00003D36 4E71            	   469: 	nop
01:00003D38 51CAFFEA        	   470: 	dbra		d2,loop3
01:00003D3C 4E75            	   471: 	rts
                            	   472: 
                            	   473: CRLF:
01:00003D3E 2F01            	   474: 	move.l	d1,-(a7)
01:00003D40 123C000D        	   475: 	move.b	#13,d1
01:00003D44 6142            	   476: 	bsr			DisplayChar
01:00003D46 123C000A        	   477: 	move.b	#10,d1
01:00003D4A 613C            	   478: 	bsr			DisplayChar
01:00003D4C 221F            	   479: 	move.l	(a7)+,d1
01:00003D4E 4E75            	   480: 	rts
                            	   481: 
                            	   482: ;------------------------------------------------------------------------------
                            	   483: ;------------------------------------------------------------------------------
                            	   484: 
                            	   485: UpdateTextPos:
01:00003D50 103900000408    	   486: 	move.b	CursorRow,d0		; compute screen location
01:00003D56 0240007F        	   487: 	andi.w	#$7f,d0
01:00003D5A 14390000040B    	   488: 	move.b	TextCols,d2
01:00003D60 4882            	   489: 	ext.w		d2
01:00003D62 C0C2            	   490: 	mulu.w	d2,d0
01:00003D64 143900000409    	   491: 	move.b	CursorCol,d2
01:00003D6A 024200FF        	   492: 	andi.w	#$ff,d2
01:00003D6E D042            	   493: 	add.w		d2,d0
01:00003D70 33C00000040C    	   494: 	move.w	d0,TextPos			; save cursor pos
01:00003D76 4E75            	   495: 	rts
                            	   496: 
                            	   497: ;------------------------------------------------------------------------------
                            	   498: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   499: ; Destroys d0,d2,a0
                            	   500: ;------------------------------------------------------------------------------
                            	   501: 
                            	   502: CalcScreenLoc:
01:00003D78 61D6            	   503: 	bsr			UpdateTextPos
01:00003D7A 48C0            	   504: 	ext.l		d0							; make it into a long
01:00003D7C E780            	   505: 	asl.l		#3,d0						; 8 bytes per char
01:00003D7E D0B900000410    	   506: 	add.l		TextScr,d0
01:00003D84 2040            	   507: 	move.l	d0,a0						; a0 = screen location
01:00003D86 4E75            	   508: 	rts
                            	   509: 
                            	   510: ;------------------------------------------------------------------------------
                            	   511: ; Display a character on the screen
                            	   512: ; d1.b = char to display
                            	   513: ;------------------------------------------------------------------------------
                            	   514: 
                            	   515: DisplayChar:
01:00003D88 48E77000        	   516: 	movem.l	d1/d2/d3,-(a7)
01:00003D8C 0281000000FF    	   517: 	andi.l	#$ff,d1				; zero out upper bytes of d1
01:00003D92 0C01000D        	   518: 	cmpi.b	#13,d1				; carriage return ?
01:00003D96 6610            	   519: 	bne.s		dccr
01:00003D98 423900000409    	   520: 	clr.b		CursorCol			; just set cursor column to zero on a CR
01:00003D9E 61000256        	   521: 	bsr			SyncCursor		; set position in text controller
01:00003DA2 4CDF000E        	   522: 	movem.l	(a7)+,d1/d2/d3
01:00003DA6 4E75            	   523: 	rts
                            	   524: dccr:
01:00003DA8 0C010091        	   525: 	cmpi.b	#$91,d1			; cursor right ?
01:00003DAC 6620            	   526: 	bne.s   dcx6
01:00003DAE 14390000040B    	   527: 	move.b	TextCols,d2
01:00003DB4 5302            	   528: 	sub.b		#1,d2
01:00003DB6 943900000409    	   529: 	sub.b		CursorCol,d2
01:00003DBC 670A            	   530: 	beq.s		dcx7
01:00003DBE 523900000409    	   531: 	addi.b	#1,CursorCol
                            	   532: dcx14:
01:00003DC4 61000230        	   533: 	bsr		SyncCursor
                            	   534: dcx7:
01:00003DC8 4CDF000E        	   535: 	movem.l	(a7)+,d1/d2/d3
01:00003DCC 4E75            	   536: 	rts
                            	   537: dcx6:
01:00003DCE 0C010090        	   538: 	cmpi.b	#$90,d1			; cursor up ?
01:00003DD2 6610            	   539: 	bne.s	dcx8
01:00003DD4 4A3900000408    	   540: 	cmpi.b	#0,CursorRow
01:00003DDA 67EC            	   541: 	beq.s	dcx7
01:00003DDC 533900000408    	   542: 	subi.b	#1,CursorRow
01:00003DE2 60E0            	   543: 	bra.s	dcx14
                            	   544: dcx8:
01:00003DE4 0C010093        	   545: 	cmpi.b	#$93,d1			; cursor left?
01:00003DE8 6610            	   546: 	bne.s	dcx9
01:00003DEA 4A3900000409    	   547: 	cmpi.b	#0,CursorCol
01:00003DF0 67D6            	   548: 	beq.s	dcx7
01:00003DF2 533900000409    	   549: 	subi.b	#1,CursorCol
01:00003DF8 60CA            	   550: 	bra.s	dcx14
                            	   551: dcx9:
01:00003DFA 0C010092        	   552: 	cmpi.b	#$92,d1			; cursor down ?
01:00003DFE 6618            	   553: 	bne.s	dcx10
01:00003E00 14390000040A    	   554: 	move.b	TextRows,d2
01:00003E06 5302            	   555: 	sub.b	#1,d2
01:00003E08 B43900000408    	   556: 	cmp.b	CursorRow,d2
01:00003E0E 67B8            	   557: 	beq.s	dcx7
01:00003E10 523900000408    	   558: 	addi.b	#1,CursorRow
01:00003E16 60AC            	   559: 	bra.s	dcx14
                            	   560: dcx10:
01:00003E18 0C010094        	   561: 	cmpi.b	#$94,d1			; cursor home ?
01:00003E1C 6618            	   562: 	bne.s	dcx11
01:00003E1E 4A3900000409    	   563: 	cmpi.b	#0,CursorCol
01:00003E24 6708            	   564: 	beq.s	dcx12
01:00003E26 423900000409    	   565: 	clr.b	CursorCol
01:00003E2C 6096            	   566: 	bra.s	dcx14
                            	   567: dcx12:
01:00003E2E 423900000408    	   568: 	clr.b	CursorRow
01:00003E34 608E            	   569: 	bra.s	dcx14
                            	   570: dcx11:
01:00003E36 48E7E080        	   571: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003E3A 0C010099        	   572: 	cmpi.b	#$99,d1			; delete ?
01:00003E3E 675C            	   573: 	beq.s		doDelete
01:00003E40 0C010008        	   574: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003E44 6748            	   575: 	beq.s   doBackspace
01:00003E46 0C010018        	   576: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003E4A 6700008C        	   577: 	beq			doCtrlX
01:00003E4E 0C01000A        	   578: 	cmpi.b	#10,d1		; linefeed ?
01:00003E52 6728            	   579: 	beq.s		dclf
                            	   580: 
                            	   581: 	; regular char
01:00003E54 6100FF22        	   582: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003E58 2401            	   583: 	move.l	d1,d2					; d2 = char
01:00003E5A 6100FE72        	   584: 	bsr			get_screen_color	; d0,d1 = color
01:00003E5E 8282            	   585: 	or.l		d2,d1					; d1 = char + color
01:00003E60 E159            	   586: 	rol.w		#8,d1					; text controller expects little endian data
01:00003E62 4841            	   587: 	swap		d1
01:00003E64 E159            	   588: 	rol.w		#8,d1
01:00003E66 2081            	   589: 	move.l	d1,(a0)
01:00003E68 E158            	   590: 	rol.w		#8,d0					; swap bytes
01:00003E6A 4840            	   591: 	swap		d0						; swap halfs
01:00003E6C E158            	   592: 	rol.w		#8,d0					; swap remaining bytes
01:00003E6E 21400004        	   593: 	move.l	d0,4(a0)
01:00003E72 61000088        	   594: 	bsr			IncCursorPos
01:00003E76 6100017E        	   595: 	bsr			SyncCursor
01:00003E7A 6008            	   596: 	bra			dcx4
                            	   597: dclf:
01:00003E7C 6100009E        	   598: 	bsr			IncCursorRow
                            	   599: dcx16:
01:00003E80 61000174        	   600: 	bsr			SyncCursor
                            	   601: dcx4:
01:00003E84 4CDF0107        	   602: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003E88 4CDF000E        	   603: 	movem.l	(a7)+,d1/d2/d3
01:00003E8C 4E75            	   604: 	rts
                            	   605: 
                            	   606: 	;---------------------------
                            	   607: 	; CTRL-H: backspace
                            	   608: 	;---------------------------
                            	   609: doBackspace:
01:00003E8E 4A3900000409    	   610: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003E94 67EE            	   611: 	beq.s   dcx4						; nothing to do
01:00003E96 533900000409    	   612: 	subi.b	#1,CursorCol		; decrement column
                            	   613: 
                            	   614: 	;---------------------------
                            	   615: 	; Delete key
                            	   616: 	;---------------------------
                            	   617: doDelete:
01:00003E9C 48E7C080        	   618: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003EA0 6100FED6        	   619: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003EA4 103900000409    	   620: 	move.b	CursorCol,d0
                            	   621: .0001:
01:00003EAA 20A80008        	   622: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003EAE 2168000C0004    	   623: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003EB4 5088            	   624: 	lea			8(a0),a0
01:00003EB6 5200            	   625: 	addi.b	#1,d0
01:00003EB8 B0390000040B    	   626: 	cmp.b		TextCols,d0
01:00003EBE 65EA            	   627: 	blo.s		.0001
01:00003EC0 6100FE0C        	   628: 	bsr			get_screen_color
01:00003EC4 323C0020        	   629: 	move.w	#' ',d1				; terminate line with a space
01:00003EC8 E159            	   630: 	rol.w		#8,d1
01:00003ECA 4841            	   631: 	swap		d1
01:00003ECC E159            	   632: 	rol.w		#8,d1
01:00003ECE 2141FFF8        	   633: 	move.l	d1,-8(a0)
01:00003ED2 4CDF0103        	   634: 	movem.l	(a7)+,d0/d1/a0
01:00003ED6 60A8            	   635: 	bra.s		dcx16				; finished
                            	   636: 
                            	   637: 	;---------------------------
                            	   638: 	; CTRL-X: erase line
                            	   639: 	;---------------------------
                            	   640: doCtrlX:
01:00003ED8 423900000409    	   641: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003EDE 10390000040B    	   642: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003EE4 4880            	   643: 	ext.w		d0
01:00003EE6 48C0            	   644: 	ext.l		d0
01:00003EE8 123C0020        	   645: 	move.b	#' ',d1				; d1 = space char
                            	   646: .0001:
                            	   647: 	; DisplayChar is called recursively here
                            	   648: 	; It's safe to do because we know it won't recurse again due to the
                            	   649: 	; fact we know the character being displayed is a space char
01:00003EEC 6100FE9A        	   650: 	bsr		DisplayChar			
01:00003EF0 5340            	   651: 	subq	#1,d0
01:00003EF2 66F8            	   652: 	bne.s	.0001
01:00003EF4 423900000409    	   653: 	clr.b	CursorCol			; now really go back to start of line
01:00003EFA 6084            	   654: 	bra.s	dcx16				; we're done
                            	   655: 
                            	   656: ;------------------------------------------------------------------------------
                            	   657: ; Increment the cursor position, scroll the screen if needed.
                            	   658: ;------------------------------------------------------------------------------
                            	   659: 
                            	   660: IncCursorPos:
01:00003EFC 52790000040C    	   661: 	addi.w	#1,TextCurpos
01:00003F02 523900000409    	   662: 	addi.b	#1,CursorCol
01:00003F08 10390000040B    	   663: 	move.b	TextCols,d0
01:00003F0E B03900000409    	   664: 	cmp.b		CursorCol,d0
01:00003F14 6438            	   665: 	bhs.s		icc1
01:00003F16 423900000409    	   666: 	clr.b		CursorCol
                            	   667: IncCursorRow:
01:00003F1C 523900000408    	   668: 	addi.b	#1,CursorRow
01:00003F22 10390000040A    	   669: 	move.b	TextRows,d0
01:00003F28 B03900000408    	   670: 	cmp.b		CursorRow,d0
01:00003F2E 621E            	   671: 	bhi.s		icc1
01:00003F30 10390000040A    	   672: 	move.b	TextRows,d0
01:00003F36 13C000000408    	   673: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003F3C 533900000408    	   674: 	subi.b	#1,CursorRow
01:00003F42 4880            	   675: 	ext.w		d0
01:00003F44 D040            	   676: 	asl.w		#1,d0
01:00003F46 91790000040C    	   677: 	sub.w		d0,TextCurpos
01:00003F4C 6102            	   678: 	bsr			ScrollUp
                            	   679: icc1:
01:00003F4E 4E75            	   680: 	rts
                            	   681: 
                            	   682: ;------------------------------------------------------------------------------
                            	   683: ; Scroll screen up.
                            	   684: ;------------------------------------------------------------------------------
                            	   685: 
                            	   686: ScrollUp:
01:00003F50 48E7C084        	   687: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
01:00003F54 2A7900000410    	   688: 	move.l	TextScr,a5					; a5 = pointer to text screen
                            	   689: .0003:								
01:00003F5A 10390000040B    	   690: 	move.b	TextCols,d0					; d0 = columns
01:00003F60 12390000040A    	   691: 	move.b	TextRows,d1					; d1 = rows
01:00003F66 4880            	   692: 	ext.w		d0									; make cols into a word value
01:00003F68 4881            	   693: 	ext.w		d1									; make rows into a word value
01:00003F6A E740            	   694: 	asl.w		#3,d0								; make into cell index
01:00003F6C 41F50000        	   695: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
01:00003F70 E648            	   696: 	lsr.w		#3,d0								; get back d0
01:00003F72 5341            	   697: 	subq		#1,d1								; number of rows-1
01:00003F74 C0C1            	   698: 	mulu		d1,d0								; d0 = count of characters to move
                            	   699: .0001:
01:00003F76 2AD8            	   700: 	move.l	(a0)+,(a5)+					; each char is 64 bits
01:00003F78 2AD8            	   701: 	move.l	(a0)+,(a5)+	
01:00003F7A 51C8FFFA        	   702: 	dbra		d0,.0001
01:00003F7E 4CDF2103        	   703: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   704: 	; Fall through into blanking out last line
                            	   705: 
                            	   706: ;------------------------------------------------------------------------------
                            	   707: ; Blank out the last line on the screen.
                            	   708: ;------------------------------------------------------------------------------
                            	   709: 
                            	   710: BlankLastLine:
01:00003F82 48E7E004        	   711: 	movem.l	d0/d1/d2/a5,-(a7)
01:00003F86 2A7900000410    	   712: 	move.l	TextScr,a5
01:00003F8C 10390000040A    	   713: 	move.b	TextRows,d0					; d0 = columns
01:00003F92 12390000040B    	   714: 	move.b	TextCols,d1					; d1 = rows
01:00003F98 4880            	   715: 	ext.w		d0
01:00003F9A 4881            	   716: 	ext.w		d1
01:00003F9C 5341            	   717: 	subq		#1,d1								; last row = #rows-1
01:00003F9E C0C1            	   718: 	mulu		d1,d0								; d0 = index of last line
01:00003FA0 E740            	   719: 	asl.w		#3,d0								; *8 bytes per char
01:00003FA2 4BF50000        	   720: 	lea			(a5,d0.w),a5				; point a5 to last row
01:00003FA6 14390000040B    	   721: 	move.b	TextCols,d2					; number of text cells to clear
01:00003FAC 4882            	   722: 	ext.w		d2
01:00003FAE 5342            	   723: 	subi.w	#1,d2								; count must be one less than desired
01:00003FB0 6100FD1C        	   724: 	bsr			get_screen_color		; d0,d1 = screen color
01:00003FB4 323C0020        	   725: 	move.w	#32,d1							; set the character for display in low 16 bits
                            	   726: .0001:
01:00003FB8 2AC1            	   727: 	move.l	d1,(a5)+
01:00003FBA 2AC0            	   728: 	move.l	d0,(a5)+
01:00003FBC 51CAFFFA        	   729: 	dbra		d2,.0001
01:00003FC0 4CDF2007        	   730: 	movem.l	(a7)+,d0/d1/d2/a5
01:00003FC4 4E75            	   731: 	rts
                            	   732: 
                            	   733: ;------------------------------------------------------------------------------
                            	   734: ; Display a string on the screen.
                            	   735: ;------------------------------------------------------------------------------
                            	   736: 
                            	   737: DisplayString:
01:00003FC6 48E7C040        	   738: 	movem.l	d0/d1/a1,-(a7)
                            	   739: dspj1:
01:00003FCA 7200            	   740: 	clr.l		d1				; clear upper bits of d1
01:00003FCC 1219            	   741: 	move.b	(a1)+,d1		; move string char into d1
01:00003FCE 4A01            	   742: 	cmpi.b	#0,d1			; is it end of string ?
01:00003FD0 6706            	   743: 	beq.s		dsret			
01:00003FD2 6100FDB4        	   744: 	bsr			DisplayChar		; display character
01:00003FD6 60F2            	   745: 	bra.s		dspj1			; go back for next character
                            	   746: dsret:
01:00003FD8 4CDF0203        	   747: 	movem.l	(a7)+,d0/d1/a1
01:00003FDC 4E75            	   748: 	rts
                            	   749: 
                            	   750: ;------------------------------------------------------------------------------
                            	   751: ; Display a string on the screen followed by carriage return / linefeed.
                            	   752: ;------------------------------------------------------------------------------
                            	   753: 
                            	   754: DisplayStringCRLF:
01:00003FDE 61E6            	   755: 	bsr		DisplayString
01:00003FE0 6000FD5C        	   756: 	bra		CRLF
                            	   757: 
                            	   758: ;------------------------------------------------------------------------------
                            	   759: ; Set cursor position to top left of screen.
                            	   760: ;
                            	   761: ; Parameters:
                            	   762: ;		<none>
                            	   763: ; Returns:
                            	   764: ;		<none>
                            	   765: ; Registers Affected:
                            	   766: ;		<none>
                            	   767: ;------------------------------------------------------------------------------
                            	   768: 
                            	   769: HomeCursor:
01:00003FE4 423900000408    	   770: 	clr.b		CursorRow
01:00003FEA 423900000409    	   771: 	clr.b		CursorCol
01:00003FF0 42790000040C    	   772: 	clr.w		TextPos
                            	   773: 	; fall through
                            	   774: 
                            	   775: ;------------------------------------------------------------------------------
                            	   776: ; SyncCursor:
                            	   777: ;
                            	   778: ; Sync the hardware cursor's position to the text cursor position.
                            	   779: ;
                            	   780: ; Parameters:
                            	   781: ;		<none>
                            	   782: ; Returns:
                            	   783: ;		<none>
                            	   784: ; Registers Affected:
                            	   785: ;		<none>
                            	   786: ;------------------------------------------------------------------------------
                            	   787: 
                            	   788: SyncCursor:
01:00003FF6 48E7A000        	   789: 	movem.l	d0/d2,-(a7)
01:00003FFA 6100FD54        	   790: 	bsr			UpdateTextPos
01:00003FFE E158            	   791: 	rol.w		#8,d0						; swap byte order
01:00004000 33C0FD03FF24    	   792: 	move.w	d0,TEXTREG+$24
01:00004006 4CDF0005        	   793: 	movem.l	(a7)+,d0/d2
01:0000400A 4E75            	   794: 	rts
                            	   795: 
                            	   796: ;==============================================================================
                            	   797: ; TRAP #15 handler
                            	   798: ;==============================================================================
                            	   799: 
                            	   800: TRAP15:
01:0000400C 48E78080        	   801: 	movem.l	d0/a0,-(a7)
01:00004010 41FA0012        	   802: 	lea			T15DispatchTable,a0
01:00004014 E580            	   803: 	asl.l		#2,d0
01:00004016 20700000        	   804: 	move.l	(a0,d0.w),a0
01:0000401A 4E90            	   805: 	jsr			(a0)
01:0000401C 4CDF0101        	   806: 	movem.l	(a7)+,d0/a0
01:00004020 4E73            	   807: 	rte
                            	   808: 
                            	   809: 		align	2
                            	   810: T15DispatchTable:
01:00004024 000040C4        	   811: 	dc.l	StubRout
01:00004028 000040C4        	   812: 	dc.l	StubRout
01:0000402C 000040C4        	   813: 	dc.l	StubRout
01:00004030 000040C4        	   814: 	dc.l	StubRout
01:00004034 000040C4        	   815: 	dc.l	StubRout
01:00004038 0000414C        	   816: 	dc.l	GetKey
01:0000403C 00003D88        	   817: 	dc.l	DisplayChar
01:00004040 0000413A        	   818: 	dc.l	CheckForKey
01:00004044 000040C4        	   819: 	dc.l	StubRout
01:00004048 000040C4        	   820: 	dc.l	StubRout
01:0000404C 000040C4        	   821: 	dc.l	StubRout
01:00004050 000040C4        	   822: 	dc.l	Cursor1
01:00004054 00004132        	   823: 	dc.l	SetKeyboardEcho
01:00004058 00003FDE        	   824: 	dc.l	DisplayStringCRLF
01:0000405C 00003FC6        	   825: 	dc.l	DisplayString
01:00004060 000040C4        	   826: 	dc.l	StubRout
01:00004064 000040C4        	   827: 	dc.l	StubRout
01:00004068 000040C4        	   828: 	dc.l	StubRout
01:0000406C 000040C4        	   829: 	dc.l	StubRout
01:00004070 000040C4        	   830: 	dc.l	StubRout
01:00004074 000040C4        	   831: 	dc.l	StubRout
01:00004078 000040C4        	   832: 	dc.l	StubRout
01:0000407C 000040C4        	   833: 	dc.l	StubRout
01:00004080 000040C4        	   834: 	dc.l	StubRout
01:00004084 000040C4        	   835: 	dc.l	StubRout
01:00004088 000040C4        	   836: 	dc.l	StubRout
01:0000408C 000040C4        	   837: 	dc.l	StubRout
01:00004090 000040C4        	   838: 	dc.l	StubRout
01:00004094 000040C4        	   839: 	dc.l	StubRout
01:00004098 000040C4        	   840: 	dc.l	StubRout
01:0000409C 000040C4        	   841: 	dc.l	StubRout
01:000040A0 000040C4        	   842: 	dc.l	StubRout
01:000040A4 000040C4        	   843: 	dc.l	StubRout
01:000040A8 000040C4        	   844: 	dc.l	StubRout
01:000040AC 000040C4        	   845: 	dc.l	StubRout
01:000040B0 000040C4        	   846: 	dc.l	StubRout
01:000040B4 000040C4        	   847: 	dc.l	StubRout
01:000040B8 000040C4        	   848: 	dc.l	StubRout
01:000040BC 000040C4        	   849: 	dc.l	StubRout
01:000040C0 000040C4        	   850: 	dc.l	StubRout
                            	   851: 
                            	   852: ;------------------------------------------------------------------------------
                            	   853: ; Stub routine for unimplemented functionality.
                            	   854: ;------------------------------------------------------------------------------
                            	   855: 
                            	   856: Cursor1:
                            	   857: StubRout:
01:000040C4 4E75            	   858: 	rts
                            	   859: 
                            	   860: ;==============================================================================
                            	   861: ; Keyboard stuff
                            	   862: ;
                            	   863: ; KeyState2_
                            	   864: ; 876543210
                            	   865: ; ||||||||+ = shift
                            	   866: ; |||||||+- = alt
                            	   867: ; ||||||+-- = control
                            	   868: ; |||||+--- = numlock
                            	   869: ; ||||+---- = capslock
                            	   870: ; |||+----- = scrolllock
                            	   871: ; ||+------ =
                            	   872: ; |+------- = 
                            	   873: ; +-------- = extended
                            	   874: ;
                            	   875: ;==============================================================================
                            	   876: 
                            	   877: _KeybdInit:
01:000040C6 42390000041B    	   878: 	clr.b	_KeyState1
01:000040CC 42390000041C    	   879: 	clr.b	_KeyState2
01:000040D2 4E75            	   880: 	rts
                            	   881: 
                            	   882: _KeybdGetStatus:
01:000040D4 1239FD0FFE01    	   883: 	move.b	KEYBD+1,d1
01:000040DA 4E75            	   884: 	rts
                            	   885: 
                            	   886: ; Get the scancode from the keyboard port
                            	   887: ;
                            	   888: _KeybdGetScancode:
01:000040DC 7200            	   889: 	moveq	#0,d1
01:000040DE 1239FD0FFE00    	   890: 	move.b	KEYBD,d1				; get the scan code
01:000040E4 4239FD0FFE01    	   891: 	move.b	#0,KEYBD+1				; clear receive register
01:000040EA 4E75            	   892: 	rts
                            	   893: 
                            	   894: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   895: ; keyboard in order to wait for a response.
                            	   896: ;
                            	   897: KeybdRecvByte:
01:000040EC 2F03            	   898: 	move.l	d3,-(a7)
01:000040EE 363C0064        	   899: 	move.w	#100,d3		; wait up to 1s
                            	   900: .0003:
01:000040F2 61E0            	   901: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:000040F4 4A01            	   902: 	tst.b	d1
01:000040F6 6B0E            	   903: 	bmi		.0004		; is input buffer full ? yes, branch
01:000040F8 61000322        	   904: 	bsr		Wait10ms		; wait a bit
01:000040FC 51CBFFF4        	   905: 	dbra	d3,.0003	; go back and try again
01:00004100 261F            	   906: 	move.l	(a7)+,d3
01:00004102 72FF            	   907: 	moveq	#-1,d1			; return -1
01:00004104 4E75            	   908: 	rts
                            	   909: .0004:
01:00004106 61D4            	   910: 	bsr		_KeybdGetScancode
01:00004108 261F            	   911: 	move.l	(a7)+,d3
01:0000410A 4E75            	   912: 	rts
                            	   913: 
                            	   914: 
                            	   915: ; Wait until the keyboard transmit is complete
                            	   916: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	   917: ;
                            	   918: KeybdWaitTx:
01:0000410C 48E73000        	   919: 	movem.l	d2/d3,-(a7)
01:00004110 7664            	   920: 	moveq	#100,d3		; wait a max of 1s
                            	   921: .0001:
01:00004112 61C0            	   922: 	bsr		_KeybdGetStatus
01:00004114 08010006        	   923: 	btst	#6,d1		; check for transmit complete bit
01:00004118 6610            	   924: 	bne	    .0002		; branch if bit set
01:0000411A 61000300        	   925: 	bsr		Wait10ms		; delay a little bit
01:0000411E 51CBFFF2        	   926: 	dbra	d3,.0001	; go back and try again
01:00004122 4CDF000C        	   927: 	movem.l	(a7)+,d2/d3
01:00004126 72FF            	   928: 	moveq	#-1,d1		; return -1
01:00004128 4E75            	   929: 	rts
                            	   930: .0002:
01:0000412A 4CDF000C        	   931: 	movem.l	(a7)+,d2/d3
01:0000412E 7200            	   932: 	moveq	#0,d1		; return 0
01:00004130 4E75            	   933: 	rts
                            	   934: 
                            	   935: ;------------------------------------------------------------------------------
                            	   936: ; d1.b 0=echo off, non-zero = echo on
                            	   937: ;------------------------------------------------------------------------------
                            	   938: 
                            	   939: SetKeyboardEcho:
01:00004132 13C100000418    	   940: 	move.b	d1,KeybdEcho
01:00004138 4E75            	   941: 	rts
                            	   942: 
                            	   943: ;------------------------------------------------------------------------------
                            	   944: ; get key pending status into d1.b
                            	   945: ;------------------------------------------------------------------------------
                            	   946: 
                            	   947: CheckForKey:
01:0000413A 1239FD0FFE01    	   948: 	move.b	KEYBD+1,d1
01:00004140 6A06            	   949: 	bpl.s		cfk1
01:00004142 123C0001        	   950: 	move.b	#1,d1
01:00004146 4E75            	   951: 	rts
                            	   952: cfk1:
01:00004148 4201            	   953: 	clr.b		d1
01:0000414A 4E75            	   954: 	rts
                            	   955: 
                            	   956: ;------------------------------------------------------------------------------
                            	   957: ; GetKey
                            	   958: ; 	Get a character from the keyboard. If Alt-tab is pressed then the screen
                            	   959: ; is switched to the next screen and -1 is returned.
                            	   960: ;
                            	   961: ; Modifies:
                            	   962: ;		d1
                            	   963: ; Returns:
                            	   964: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	   965: ;------------------------------------------------------------------------------
                            	   966: 
                            	   967: GetKey:
01:0000414C 2F00            	   968: 	move.l	d0,-(a7)					* push d0
                            	   969: 	* Check for focus. Even if the core does not have the focus ALT-TAB still
                            	   970: 	* needs to be checked for.
01:0000414E 223900100000    	   971: 	move.l	IOFocus,d1				* Check if the core has the IO focus
01:00004154 4E7A0FE0        	   972: 	movec.l	coreno,d0
01:00004158 0101            	   973: 	btst		d0,d1
01:0000415A 661A            	   974: 	bne.s		.0007
                            	   975: 	* If the core does not have the focus then the keyboard scan code buffer
                            	   976: 	* must be read directly to determine if a tab character is pressed. A non-
                            	   977: 	* destructive buffer read is needed.
01:0000415C 7200            	   978: 	moveq		#0,d1
01:0000415E 1239FD0FFE00    	   979: 	move.b	KEYBD,d1					* get the scan code non destructively
01:00004164 0C01000D        	   980: 	cmpi.b	#SC_TAB,d1				* is it the TAB key?
01:00004168 6658            	   981: 	bne.s		.0004							* if not return no key available
01:0000416A 083900010000041C	   982: 	btst		#1,_KeyState2			* is ALT down?
01:00004172 6614            	   983: 	bne.s		.0008							* if ALT-TAB goto switch screens
01:00004174 604C            	   984: 	bra.s		.0004							* otherwise return no key available
                            	   985: .0007:	
01:00004176 616A            	   986: 	bsr			KeybdGetCharWait	* get a character
01:00004178 0C010009        	   987: 	cmpi.b	#9,d1							* tab pressed?
01:0000417C 6628            	   988: 	bne.s		.0006
01:0000417E 083900010000041C	   989: 	btst		#1,_KeyState2			* is ALT down?
01:00004186 671E            	   990: 	beq.s		.0006
                            	   991: .0008:
                            	   992: 	* Got alt-tab, switch screens
01:00004188 3039FD03FF28    	   993: 	move.w	TEXTREG+$28,d0
01:0000418E E158            	   994: 	rol.w		#8,d0							* swap byte order
01:00004190 D07C0800        	   995: 	add.w		#2048,d0					* increment to next screen page
01:00004194 B07C4000        	   996: 	cmp.w		#16384,d0					* hit max screen page?
01:00004198 6502            	   997: 	blo.s		.0002
01:0000419A 7000            	   998: 	moveq		#0,d0							* wrap around
                            	   999: .0002:
01:0000419C E058            	  1000: 	ror.w		#8,d0							* swap byte order
01:0000419E 33C0FD03FF28    	  1001: 	move.w	d0,TEXTREG+$28
01:000041A4 601C            	  1002: 	bra.s		.0004							* eat Alt-tab, return no key available
                            	  1003: .0006:
01:000041A6 4A3900000418    	  1004: 	cmpi.b	#0,KeybdEcho			* is keyboard echo on ?
01:000041AC 6710            	  1005: 	beq.s		.0003							* no echo, just return the key
01:000041AE 0C01000D        	  1006: 	cmpi.b	#CR,d1						* convert CR keystroke into CRLF
01:000041B2 6606            	  1007: 	bne.s		.0005
01:000041B4 6100FB88        	  1008: 	bsr			CRLF
01:000041B8 6004            	  1009: 	bra.s		.0003
                            	  1010: .0005:
01:000041BA 6100FBCC        	  1011: 	bsr			DisplayChar
                            	  1012: .0003:
01:000041BE 201F            	  1013: 	move.l	(a7)+,d0					* pop d0
01:000041C0 4E75            	  1014: 	rts												* return key
                            	  1015: * Return -1 indicating no char was available
                            	  1016: .0004:
01:000041C2 201F            	  1017: 	move.l	(a7)+,d0					* pop d0
01:000041C4 72FF            	  1018: 	moveq		#-1,d1						* return no key available
01:000041C6 4E75            	  1019: 	rts
                            	  1020: 
                            	  1021: CheckForCtrlC
01:000041C8 6100FF70        	  1022: 	bsr			CheckForKey
01:000041CC 670A            	  1023: 	beq.s		.0001
01:000041CE 611A            	  1024: 	bsr			KeybdGetChar
01:000041D0 B23C0003        	  1025: 	cmp.b		#CTRLC,d1
01:000041D4 67000562        	  1026: 	beq			Monitor
                            	  1027: .0001:
01:000041D8 4E75            	  1028: 	rts
                            	  1029: 
                            	  1030: ;------------------------------------------------------------------------------
                            	  1031: ;------------------------------------------------------------------------------
                            	  1032: 
                            	  1033: KeybdGetCharNoWait:
01:000041DA 423900000419    	  1034: 	clr.b	KeybdWaitFlag
01:000041E0 6008            	  1035: 	bra		KeybdGetChar
                            	  1036: 
                            	  1037: KeybdGetCharWait:
01:000041E2 13FC00FF00000419	  1038: 	move.b	#-1,KeybdWaitFlag
                            	  1039: 
                            	  1040: KeybdGetChar:
01:000041EA 48E73080        	  1041: 	movem.l	d2/d3/a0,-(a7)
                            	  1042: .0003:
01:000041EE 6100FEE4        	  1043: 	bsr		_KeybdGetStatus			; check keyboard status for key available
01:000041F2 6B10            	  1044: 	bmi		.0006					; yes, go process
01:000041F4 4A3900000419    	  1045: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:000041FA 6BF2            	  1046: 	bmi		.0003					; yes, branch back
01:000041FC 4CDF010C        	  1047: 	movem.l	(a7)+,d2/d3/a0
01:00004200 72FF            	  1048: 	moveq	#-1,d1					; flag no char available
01:00004202 4E75            	  1049: 	rts
                            	  1050: .0006:
01:00004204 6100FED6        	  1051: 	bsr		_KeybdGetScancode
                            	  1052: .0001:
01:00004208 33FC0001FD0FFF00	  1053: 	move.w	#1,leds
01:00004210 B23C00F0        	  1054: 	cmp.b	#SC_KEYUP,d1
01:00004214 670000BE        	  1055: 	beq		.doKeyup
01:00004218 B23C00E0        	  1056: 	cmp.b	#SC_EXTEND,d1
01:0000421C 670000C2        	  1057: 	beq		.doExtend
01:00004220 B23C0014        	  1058: 	cmp.b	#SC_CTRL,d1
01:00004224 670000C6        	  1059: 	beq		.doCtrl
01:00004228 B23C0012        	  1060: 	cmp.b	#SC_LSHIFT,d1
01:0000422C 67000128        	  1061: 	beq		.doShift
01:00004230 B23C0059        	  1062: 	cmp.b	#SC_RSHIFT,d1
01:00004234 67000120        	  1063: 	beq		.doShift
01:00004238 B23C0077        	  1064: 	cmp.b	#SC_NUMLOCK,d1
01:0000423C 67000140        	  1065: 	beq		.doNumLock
01:00004240 B23C0058        	  1066: 	cmp.b	#SC_CAPSLOCK,d1
01:00004244 67000146        	  1067: 	beq		.doCapsLock
01:00004248 B23C007E        	  1068: 	cmp.b	#SC_SCROLLLOCK,d1
01:0000424C 6700014C        	  1069: 	beq		.doScrollLock
01:00004250 B23C0011        	  1070: 	cmp.b   #SC_ALT,d1
01:00004254 670000BE        	  1071: 	beq     .doAlt
01:00004258 14390000041B    	  1072: 	move.b	_KeyState1,d2			; check key up/down
01:0000425E 42390000041B    	  1073: 	move.b	#0,_KeyState1			; clear keyup status
01:00004264 4A02            	  1074: 	tst.b	d2
01:00004266 6686            	  1075: 	bne	    .0003					; ignore key up
01:00004268 B23C000D        	  1076: 	cmp.b   #SC_TAB,d1
01:0000426C 670000CE        	  1077: 	beq     .doTab
                            	  1078: .0013:
01:00004270 14390000041C    	  1079: 	move.b	_KeyState2,d2
01:00004276 6A1A            	  1080: 	bpl		.0010					; is it extended code ?
01:00004278 C43C007F        	  1081: 	and.b	#$7F,d2					; clear extended bit
01:0000427C 13C20000041C    	  1082: 	move.b	d2,_KeyState2
01:00004282 42390000041B    	  1083: 	move.b	#0,_KeyState1			; clear keyup
01:00004288 41FA0422        	  1084: 	lea		_keybdExtendedCodes,a0
01:0000428C 12301000        	  1085: 	move.b	(a0,d1.w),d1
01:00004290 6034            	  1086: 	bra		.0008
                            	  1087: .0010:
01:00004292 08020002        	  1088: 	btst	#2,d2					; is it CTRL code ?
01:00004296 670E            	  1089: 	beq		.0009
01:00004298 C27C007F        	  1090: 	and.w	#$7F,d1
01:0000429C 41FA038E        	  1091: 	lea		_keybdControlCodes,a0
01:000042A0 12301000        	  1092: 	move.b	(a0,d1.w),d1
01:000042A4 6020            	  1093: 	bra		.0008
                            	  1094: .0009:
01:000042A6 08020000        	  1095: 	btst	#0,d2					; is it shift down ?
01:000042AA 670A            	  1096: 	beq  	.0007
01:000042AC 41FA027E        	  1097: 	lea		_shiftedScanCodes,a0
01:000042B0 12301000        	  1098: 	move.b	(a0,d1.w),d1
01:000042B4 6010            	  1099: 	bra		.0008
                            	  1100: .0007:
01:000042B6 41FA0174        	  1101: 	lea		_unshiftedScanCodes,a0
01:000042BA 12301000        	  1102: 	move.b	(a0,d1.w),d1
01:000042BE 33FC0202FD0FFF00	  1103: 	move.w	#$0202,leds
                            	  1104: .0008:
01:000042C6 33FC0303FD0FFF00	  1105: 	move.w	#$0303,leds
01:000042CE 4CDF010C        	  1106: 	movem.l	(a7)+,d2/d3/a0
01:000042D2 4E75            	  1107: 	rts
                            	  1108: .doKeyup:
01:000042D4 13FC00FF0000041B	  1109: 	move.b	#-1,_KeyState1
01:000042DC 6000FF10        	  1110: 	bra		.0003
                            	  1111: .doExtend:
01:000042E0 003900800000041C	  1112: 	or.b	#$80,_KeyState2
01:000042E8 6000FF04        	  1113: 	bra		.0003
                            	  1114: .doCtrl:
01:000042EC 12390000041B    	  1115: 	move.b	_KeyState1,d1
01:000042F2 42390000041B    	  1116: 	clr.b	_KeyState1
01:000042F8 4A01            	  1117: 	tst.b	d1
01:000042FA 6A0C            	  1118: 	bpl.s	.0004
01:000042FC 08B900020000041C	  1119: 	bclr	#2,_KeyState2
01:00004304 6000FEE8        	  1120: 	bra		.0003
                            	  1121: .0004:
01:00004308 08F900020000041C	  1122: 	bset	#2,_KeyState2
01:00004310 6000FEDC        	  1123: 	bra		.0003
                            	  1124: .doAlt:
01:00004314 12390000041B    	  1125: 	move.b	_KeyState1,d1
01:0000431A 42390000041B    	  1126: 	clr.b	_KeyState1
01:00004320 4A01            	  1127: 	tst.b	d1
01:00004322 6A0C            	  1128: 	bpl		.0011
01:00004324 08B900010000041C	  1129: 	bclr	#1,_KeyState2
01:0000432C 6000FEC0        	  1130: 	bra		.0003
                            	  1131: .0011:
01:00004330 08F900010000041C	  1132: 	bset	#1,_KeyState2
01:00004338 6000FEB4        	  1133: 	bra		.0003
                            	  1134: .doTab:
01:0000433C 2F01            	  1135: 	move.l	d1,-(a7)
01:0000433E 12390000041C    	  1136:   move.b  _KeyState2,d1
01:00004344 08010000        	  1137:   btst	#0,d1                 ; is ALT down ?
01:00004348 6706            	  1138:   beq     .0012
                            	  1139: ;    	inc     _iof_switch
01:0000434A 221F            	  1140:   move.l	(a7)+,d1
01:0000434C 6000FEA0        	  1141:   bra     .0003
                            	  1142: .0012:
01:00004350 221F            	  1143:   move.l	(a7)+,d1
01:00004352 6000FF1C        	  1144:   bra     .0013
                            	  1145: .doShift:
01:00004356 12390000041B    	  1146: 	move.b	_KeyState1,d1
01:0000435C 42390000041B    	  1147: 	clr.b	_KeyState1
01:00004362 4A01            	  1148: 	tst.b	d1
01:00004364 6A0C            	  1149: 	bpl.s	.0005
01:00004366 08B900000000041C	  1150: 	bclr	#0,_KeyState2
01:0000436E 6000FE7E        	  1151: 	bra		.0003
                            	  1152: .0005:
01:00004372 08F900000000041C	  1153: 	bset	#0,_KeyState2
01:0000437A 6000FE72        	  1154: 	bra		.0003
                            	  1155: .doNumLock:
01:0000437E 087900040000041C	  1156: 	bchg	#4,_KeyState2
01:00004386 6120            	  1157: 	bsr		KeybdSetLEDStatus
01:00004388 6000FE64        	  1158: 	bra		.0003
                            	  1159: .doCapsLock:
01:0000438C 087900050000041C	  1160: 	bchg	#5,_KeyState2
01:00004394 6112            	  1161: 	bsr		KeybdSetLEDStatus
01:00004396 6000FE56        	  1162: 	bra		.0003
                            	  1163: .doScrollLock:
01:0000439A 087900060000041C	  1164: 	bchg	#6,_KeyState2
01:000043A2 6104            	  1165: 	bsr		KeybdSetLEDStatus
01:000043A4 6000FE48        	  1166: 	bra		.0003
                            	  1167: 
                            	  1168: KeybdSetLEDStatus:
01:000043A8 48E73000        	  1169: 	movem.l	d2/d3,-(a7)
01:000043AC 42390000041A    	  1170: 	clr.b	KeybdLEDs
01:000043B2 083900040000041C	  1171: 	btst	#4,_KeyState2
01:000043BA 6708            	  1172: 	beq.s	.0002
01:000043BC 13FC00020000041A	  1173: 	move.b	#2,KeybdLEDs
                            	  1174: .0002:
01:000043C4 083900050000041C	  1175: 	btst	#5,_KeyState2
01:000043CC 6708            	  1176: 	beq.s	.0003
01:000043CE 08F900020000041A	  1177: 	bset	#2,KeybdLEDs
                            	  1178: .0003:
01:000043D6 083900060000041C	  1179: 	btst	#6,_KeyState2
01:000043DE 6708            	  1180: 	beq.s	.0004
01:000043E0 08F900000000041A	  1181: 	bset	#0,KeybdLEDs
                            	  1182: .0004:
01:000043E8 123C00ED        	  1183: 	move.b	#$ED,d1
01:000043EC 6126            	  1184: 	bsr		KeybdSendByte
01:000043EE 6100FD1C        	  1185: 	bsr		KeybdWaitTx
01:000043F2 6100FCF8        	  1186: 	bsr		KeybdRecvByte
01:000043F6 4A01            	  1187: 	tst.b	d1
01:000043F8 6B14            	  1188: 	bmi		.0001
01:000043FA B27C00FA        	  1189: 	cmp		#$FA,d1
01:000043FE 12390000041A    	  1190: 	move.b	KeybdLEDs,d1
01:00004404 610E            	  1191: 	bsr		KeybdSendByte
01:00004406 6100FD04        	  1192: 	bsr		KeybdWaitTx
01:0000440A 6100FCE0        	  1193: 	bsr		KeybdRecvByte
                            	  1194: .0001:
01:0000440E 4CDF000C        	  1195: 	movem.l	(a7)+,d2/d3
01:00004412 4E75            	  1196: 	rts
                            	  1197: 
                            	  1198: KeybdSendByte:
01:00004414 13C1FD0FFE00    	  1199: 	move.b	d1,KEYBD
01:0000441A 4E75            	  1200: 	rts
                            	  1201: 	
                            	  1202: Wait10ms:
01:0000441C 2F03            	  1203: 	move.l	d3,-(a7)
01:0000441E 263C000003E8    	  1204: 	move.l	#1000,d3
                            	  1205: .0001:
01:00004424 51CBFFFE        	  1206: 	dbra	d3,.0001
01:00004428 261F            	  1207: 	move.l	(a7)+,d3
01:0000442A 4E75            	  1208: 	rts
                            	  1209: 
                            	  1210: 
                            	  1211: ;--------------------------------------------------------------------------
                            	  1212: ; PS2 scan codes to ascii conversion tables.
                            	  1213: ;--------------------------------------------------------------------------
                            	  1214: ;
                            	  1215: _unshiftedScanCodes:
01:0000442C 2E              	  1216: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:0000442D A9
01:0000442E 2E
01:0000442F A5
01:00004430 A3
01:00004431 A1
01:00004432 A2
01:00004433 AC
01:00004434 2E              	  1217: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:00004435 AA
01:00004436 A8
01:00004437 A6
01:00004438 A4
01:00004439 09
01:0000443A 60
01:0000443B 2E
01:0000443C 2E              	  1218: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:0000443D 2E
01:0000443E 2E
01:0000443F 2E
01:00004440 2E
01:00004441 71
01:00004442 31
01:00004443 2E
01:00004444 2E              	  1219: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:00004445 2E
01:00004446 7A
01:00004447 73
01:00004448 61
01:00004449 77
01:0000444A 32
01:0000444B 2E
01:0000444C 2E              	  1220: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:0000444D 63
01:0000444E 78
01:0000444F 64
01:00004450 65
01:00004451 34
01:00004452 33
01:00004453 2E
01:00004454 2E              	  1221: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:00004455 20
01:00004456 76
01:00004457 66
01:00004458 74
01:00004459 72
01:0000445A 35
01:0000445B 2E
01:0000445C 2E              	  1222: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:0000445D 6E
01:0000445E 62
01:0000445F 68
01:00004460 67
01:00004461 79
01:00004462 36
01:00004463 2E
01:00004464 2E              	  1223: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:00004465 2E
01:00004466 6D
01:00004467 6A
01:00004468 75
01:00004469 37
01:0000446A 38
01:0000446B 2E
01:0000446C 2E              	  1224: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:0000446D 2C
01:0000446E 6B
01:0000446F 69
01:00004470 6F
01:00004471 30
01:00004472 39
01:00004473 2E
01:00004474 2E              	  1225: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:00004475 2E
01:00004476 2F
01:00004477 6C
01:00004478 3B
01:00004479 70
01:0000447A 2D
01:0000447B 2E
01:0000447C 2E              	  1226: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:0000447D 2E
01:0000447E 27
01:0000447F 2E
01:00004480 5B
01:00004481 3D
01:00004482 2E
01:00004483 2E
01:00004484 AD              	  1227: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:00004485 2E
01:00004486 0D
01:00004487 5D
01:00004488 2E
01:00004489 5C
01:0000448A 2E
01:0000448B 2E
01:0000448C 2E              	  1228: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:0000448D 2E
01:0000448E 2E
01:0000448F 2E
01:00004490 2E
01:00004491 2E
01:00004492 08
01:00004493 2E
01:00004494 2E              	  1229: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:00004495 95
01:00004496 2E
01:00004497 93
01:00004498 94
01:00004499 2E
01:0000449A 2E
01:0000449B 2E
01:0000449C 98              	  1230: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:0000449D 7F
01:0000449E 92
01:0000449F 2E
01:000044A0 91
01:000044A1 90
01:000044A2 1B
01:000044A3 AF
01:000044A4 AB              	  1231: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:000044A5 2E
01:000044A6 97
01:000044A7 2E
01:000044A8 2E
01:000044A9 96
01:000044AA AE
01:000044AB 2E
                            	  1232: 
01:000044AC 2E              	  1233: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:000044AD 2E
01:000044AE 2E
01:000044AF A7
01:000044B0 2E
01:000044B1 2E
01:000044B2 2E
01:000044B3 2E
01:000044B4 2E              	  1234: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044B5 2E
01:000044B6 2E
01:000044B7 2E
01:000044B8 2E
01:000044B9 2E
01:000044BA 2E
01:000044BB 2E
01:000044BC 2E              	  1235: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044BD 2E
01:000044BE 2E
01:000044BF 2E
01:000044C0 2E
01:000044C1 2E
01:000044C2 2E
01:000044C3 2E
01:000044C4 2E              	  1236: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044C5 2E
01:000044C6 2E
01:000044C7 2E
01:000044C8 2E
01:000044C9 2E
01:000044CA 2E
01:000044CB 2E
01:000044CC 2E              	  1237: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044CD 2E
01:000044CE 2E
01:000044CF 2E
01:000044D0 2E
01:000044D1 2E
01:000044D2 2E
01:000044D3 2E
01:000044D4 2E              	  1238: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044D5 2E
01:000044D6 2E
01:000044D7 2E
01:000044D8 2E
01:000044D9 2E
01:000044DA 2E
01:000044DB 2E
01:000044DC 2E              	  1239: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044DD 2E
01:000044DE 2E
01:000044DF 2E
01:000044E0 2E
01:000044E1 2E
01:000044E2 2E
01:000044E3 2E
01:000044E4 2E              	  1240: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044E5 2E
01:000044E6 2E
01:000044E7 2E
01:000044E8 2E
01:000044E9 2E
01:000044EA 2E
01:000044EB 2E
01:000044EC 2E              	  1241: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044ED 2E
01:000044EE 2E
01:000044EF 2E
01:000044F0 2E
01:000044F1 2E
01:000044F2 2E
01:000044F3 2E
01:000044F4 2E              	  1242: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044F5 2E
01:000044F6 2E
01:000044F7 2E
01:000044F8 2E
01:000044F9 2E
01:000044FA 2E
01:000044FB 2E
01:000044FC 2E              	  1243: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044FD 2E
01:000044FE 2E
01:000044FF 2E
01:00004500 2E
01:00004501 2E
01:00004502 2E
01:00004503 2E
01:00004504 2E              	  1244: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004505 2E
01:00004506 2E
01:00004507 2E
01:00004508 2E
01:00004509 2E
01:0000450A 2E
01:0000450B 2E
01:0000450C 2E              	  1245: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000450D 2E
01:0000450E 2E
01:0000450F 2E
01:00004510 2E
01:00004511 2E
01:00004512 2E
01:00004513 2E
01:00004514 2E              	  1246: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004515 2E
01:00004516 2E
01:00004517 2E
01:00004518 2E
01:00004519 2E
01:0000451A 2E
01:0000451B 2E
01:0000451C 2E              	  1247: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000451D 2E
01:0000451E 2E
01:0000451F 2E
01:00004520 2E
01:00004521 2E
01:00004522 2E
01:00004523 2E
01:00004524 2E              	  1248: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:00004525 2E
01:00004526 FA
01:00004527 2E
01:00004528 2E
01:00004529 2E
01:0000452A 2E
01:0000452B 2E
                            	  1249: 
                            	  1250: _shiftedScanCodes:
01:0000452C 2E              	  1251: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000452D 2E
01:0000452E 2E
01:0000452F 2E
01:00004530 2E
01:00004531 2E
01:00004532 2E
01:00004533 2E
01:00004534 2E              	  1252: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:00004535 2E
01:00004536 2E
01:00004537 2E
01:00004538 2E
01:00004539 09
01:0000453A 7E
01:0000453B 2E
01:0000453C 2E              	  1253: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:0000453D 2E
01:0000453E 2E
01:0000453F 2E
01:00004540 2E
01:00004541 51
01:00004542 21
01:00004543 2E
01:00004544 2E              	  1254: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:00004545 2E
01:00004546 5A
01:00004547 53
01:00004548 41
01:00004549 57
01:0000454A 40
01:0000454B 2E
01:0000454C 2E              	  1255: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:0000454D 43
01:0000454E 58
01:0000454F 44
01:00004550 45
01:00004551 24
01:00004552 23
01:00004553 2E
01:00004554 2E              	  1256: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:00004555 20
01:00004556 56
01:00004557 46
01:00004558 54
01:00004559 52
01:0000455A 25
01:0000455B 2E
01:0000455C 2E              	  1257: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:0000455D 4E
01:0000455E 42
01:0000455F 48
01:00004560 47
01:00004561 59
01:00004562 5E
01:00004563 2E
01:00004564 2E              	  1258: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:00004565 2E
01:00004566 4D
01:00004567 4A
01:00004568 55
01:00004569 26
01:0000456A 2A
01:0000456B 2E
01:0000456C 2E              	  1259: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:0000456D 3C
01:0000456E 4B
01:0000456F 49
01:00004570 4F
01:00004571 29
01:00004572 28
01:00004573 2E
01:00004574 2E              	  1260: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:00004575 3E
01:00004576 3F
01:00004577 4C
01:00004578 3A
01:00004579 50
01:0000457A 5F
01:0000457B 2E
01:0000457C 2E              	  1261: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:0000457D 2E
01:0000457E 22
01:0000457F 2E
01:00004580 7B
01:00004581 2B
01:00004582 2E
01:00004583 2E
01:00004584 2E              	  1262: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004585 2E
01:00004586 0D
01:00004587 7D
01:00004588 2E
01:00004589 7C
01:0000458A 2E
01:0000458B 2E
01:0000458C 2E              	  1263: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:0000458D 2E
01:0000458E 2E
01:0000458F 2E
01:00004590 2E
01:00004591 2E
01:00004592 08
01:00004593 2E
01:00004594 2E              	  1264: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004595 2E
01:00004596 2E
01:00004597 2E
01:00004598 2E
01:00004599 2E
01:0000459A 2E
01:0000459B 2E
01:0000459C 2E              	  1265: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:0000459D 7F
01:0000459E 2E
01:0000459F 2E
01:000045A0 2E
01:000045A1 2E
01:000045A2 1B
01:000045A3 2E
01:000045A4 2E              	  1266: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045A5 2E
01:000045A6 2E
01:000045A7 2E
01:000045A8 2E
01:000045A9 2E
01:000045AA 2E
01:000045AB 2E
                            	  1267: 
01:000045AC 2E              	  1268: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045AD 2E
01:000045AE 2E
01:000045AF 2E
01:000045B0 2E
01:000045B1 2E
01:000045B2 2E
01:000045B3 2E
01:000045B4 2E              	  1269: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B5 2E
01:000045B6 2E
01:000045B7 2E
01:000045B8 2E
01:000045B9 2E
01:000045BA 2E
01:000045BB 2E
01:000045BC 2E              	  1270: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045BD 2E
01:000045BE 2E
01:000045BF 2E
01:000045C0 2E
01:000045C1 2E
01:000045C2 2E
01:000045C3 2E
01:000045C4 2E              	  1271: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C5 2E
01:000045C6 2E
01:000045C7 2E
01:000045C8 2E
01:000045C9 2E
01:000045CA 2E
01:000045CB 2E
01:000045CC 2E              	  1272: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045CD 2E
01:000045CE 2E
01:000045CF 2E
01:000045D0 2E
01:000045D1 2E
01:000045D2 2E
01:000045D3 2E
01:000045D4 2E              	  1273: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D5 2E
01:000045D6 2E
01:000045D7 2E
01:000045D8 2E
01:000045D9 2E
01:000045DA 2E
01:000045DB 2E
01:000045DC 2E              	  1274: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045DD 2E
01:000045DE 2E
01:000045DF 2E
01:000045E0 2E
01:000045E1 2E
01:000045E2 2E
01:000045E3 2E
01:000045E4 2E              	  1275: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E5 2E
01:000045E6 2E
01:000045E7 2E
01:000045E8 2E
01:000045E9 2E
01:000045EA 2E
01:000045EB 2E
01:000045EC 2E              	  1276: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045ED 2E
01:000045EE 2E
01:000045EF 2E
01:000045F0 2E
01:000045F1 2E
01:000045F2 2E
01:000045F3 2E
01:000045F4 2E              	  1277: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F5 2E
01:000045F6 2E
01:000045F7 2E
01:000045F8 2E
01:000045F9 2E
01:000045FA 2E
01:000045FB 2E
01:000045FC 2E              	  1278: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045FD 2E
01:000045FE 2E
01:000045FF 2E
01:00004600 2E
01:00004601 2E
01:00004602 2E
01:00004603 2E
01:00004604 2E              	  1279: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004605 2E
01:00004606 2E
01:00004607 2E
01:00004608 2E
01:00004609 2E
01:0000460A 2E
01:0000460B 2E
01:0000460C 2E              	  1280: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000460D 2E
01:0000460E 2E
01:0000460F 2E
01:00004610 2E
01:00004611 2E
01:00004612 2E
01:00004613 2E
01:00004614 2E              	  1281: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004615 2E
01:00004616 2E
01:00004617 2E
01:00004618 2E
01:00004619 2E
01:0000461A 2E
01:0000461B 2E
01:0000461C 2E              	  1282: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000461D 2E
01:0000461E 2E
01:0000461F 2E
01:00004620 2E
01:00004621 2E
01:00004622 2E
01:00004623 2E
01:00004624 2E              	  1283: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004625 2E
01:00004626 2E
01:00004627 2E
01:00004628 2E
01:00004629 2E
01:0000462A 2E
01:0000462B 2E
                            	  1284: 
                            	  1285: ; control
                            	  1286: _keybdControlCodes:
01:0000462C 2E              	  1287: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000462D 2E
01:0000462E 2E
01:0000462F 2E
01:00004630 2E
01:00004631 2E
01:00004632 2E
01:00004633 2E
01:00004634 2E              	  1288: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:00004635 2E
01:00004636 2E
01:00004637 2E
01:00004638 2E
01:00004639 09
01:0000463A 7E
01:0000463B 2E
01:0000463C 2E              	  1289: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:0000463D 2E
01:0000463E 2E
01:0000463F 2E
01:00004640 2E
01:00004641 11
01:00004642 21
01:00004643 2E
01:00004644 2E              	  1290: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:00004645 2E
01:00004646 1A
01:00004647 13
01:00004648 01
01:00004649 17
01:0000464A 40
01:0000464B 2E
01:0000464C 2E              	  1291: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:0000464D 03
01:0000464E 18
01:0000464F 04
01:00004650 05
01:00004651 24
01:00004652 23
01:00004653 2E
01:00004654 2E              	  1292: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:00004655 20
01:00004656 16
01:00004657 06
01:00004658 14
01:00004659 12
01:0000465A 25
01:0000465B 2E
01:0000465C 2E              	  1293: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:0000465D 0E
01:0000465E 02
01:0000465F 08
01:00004660 07
01:00004661 19
01:00004662 5E
01:00004663 2E
01:00004664 2E              	  1294: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:00004665 2E
01:00004666 0D
01:00004667 0A
01:00004668 15
01:00004669 26
01:0000466A 2A
01:0000466B 2E
01:0000466C 2E              	  1295: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:0000466D 3C
01:0000466E 0B
01:0000466F 09
01:00004670 0F
01:00004671 29
01:00004672 28
01:00004673 2E
01:00004674 2E              	  1296: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:00004675 3E
01:00004676 3F
01:00004677 0C
01:00004678 3A
01:00004679 10
01:0000467A 5F
01:0000467B 2E
01:0000467C 2E              	  1297: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:0000467D 2E
01:0000467E 22
01:0000467F 2E
01:00004680 7B
01:00004681 2B
01:00004682 2E
01:00004683 2E
01:00004684 2E              	  1298: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004685 2E
01:00004686 0D
01:00004687 7D
01:00004688 2E
01:00004689 7C
01:0000468A 2E
01:0000468B 2E
01:0000468C 2E              	  1299: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:0000468D 2E
01:0000468E 2E
01:0000468F 2E
01:00004690 2E
01:00004691 2E
01:00004692 08
01:00004693 2E
01:00004694 2E              	  1300: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004695 2E
01:00004696 2E
01:00004697 2E
01:00004698 2E
01:00004699 2E
01:0000469A 2E
01:0000469B 2E
01:0000469C 2E              	  1301: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:0000469D 7F
01:0000469E 2E
01:0000469F 2E
01:000046A0 2E
01:000046A1 2E
01:000046A2 1B
01:000046A3 2E
01:000046A4 2E              	  1302: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046A5 2E
01:000046A6 2E
01:000046A7 2E
01:000046A8 2E
01:000046A9 2E
01:000046AA 2E
01:000046AB 2E
                            	  1303: 
                            	  1304: _keybdExtendedCodes:
01:000046AC 2E              	  1305: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:000046AD 2E
01:000046AE 2E
01:000046AF 2E
01:000046B0 A3
01:000046B1 A1
01:000046B2 A2
01:000046B3 2E
01:000046B4 2E              	  1306: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B5 2E
01:000046B6 2E
01:000046B7 2E
01:000046B8 2E
01:000046B9 2E
01:000046BA 2E
01:000046BB 2E
01:000046BC 2E              	  1307: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046BD 2E
01:000046BE 2E
01:000046BF 2E
01:000046C0 2E
01:000046C1 2E
01:000046C2 2E
01:000046C3 2E
01:000046C4 2E              	  1308: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C5 2E
01:000046C6 2E
01:000046C7 2E
01:000046C8 2E
01:000046C9 2E
01:000046CA 2E
01:000046CB 2E
01:000046CC 2E              	  1309: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046CD 2E
01:000046CE 2E
01:000046CF 2E
01:000046D0 2E
01:000046D1 2E
01:000046D2 2E
01:000046D3 2E
01:000046D4 2E              	  1310: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D5 2E
01:000046D6 2E
01:000046D7 2E
01:000046D8 2E
01:000046D9 2E
01:000046DA 2E
01:000046DB 2E
01:000046DC 2E              	  1311: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046DD 2E
01:000046DE 2E
01:000046DF 2E
01:000046E0 2E
01:000046E1 2E
01:000046E2 2E
01:000046E3 2E
01:000046E4 2E              	  1312: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E5 2E
01:000046E6 2E
01:000046E7 2E
01:000046E8 2E
01:000046E9 2E
01:000046EA 2E
01:000046EB 2E
01:000046EC 2E              	  1313: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046ED 2E
01:000046EE 2E
01:000046EF 2E
01:000046F0 2E
01:000046F1 2E
01:000046F2 2E
01:000046F3 2E
01:000046F4 2E              	  1314: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046F5 2E
01:000046F6 2E
01:000046F7 2E
01:000046F8 2E
01:000046F9 2E
01:000046FA 2E
01:000046FB 2E
01:000046FC 2E              	  1315: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046FD 2E
01:000046FE 2E
01:000046FF 2E
01:00004700 2E
01:00004701 2E
01:00004702 2E
01:00004703 2E
01:00004704 2E              	  1316: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004705 2E
01:00004706 2E
01:00004707 2E
01:00004708 2E
01:00004709 2E
01:0000470A 2E
01:0000470B 2E
01:0000470C 2E              	  1317: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000470D 2E
01:0000470E 2E
01:0000470F 2E
01:00004710 2E
01:00004711 2E
01:00004712 2E
01:00004713 2E
01:00004714 2E              	  1318: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:00004715 95
01:00004716 2E
01:00004717 93
01:00004718 94
01:00004719 2E
01:0000471A 2E
01:0000471B 2E
01:0000471C 98              	  1319: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:0000471D 99
01:0000471E 92
01:0000471F 2E
01:00004720 91
01:00004721 90
01:00004722 2E
01:00004723 2E
01:00004724 2E              	  1320: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:00004725 2E
01:00004726 97
01:00004727 2E
01:00004728 2E
01:00004729 96
01:0000472A 2E
01:0000472B 2E
                            	  1321: 
                            	  1322: ;==============================================================================
                            	  1323: ;==============================================================================
                            	  1324: ; Monitor
                            	  1325: ;==============================================================================
                            	  1326: ;==============================================================================
                            	  1327: ;
                            	  1328: ; Get a word from screen memory and swap byte order
                            	  1329: 
                            	  1330: FromScreen:
01:0000472C 2210            	  1331: 	move.l	(a0),d1
01:0000472E E159            	  1332: 	rol.w		#8,d1
01:00004730 4841            	  1333: 	swap		d1
01:00004732 E159            	  1334: 	rol.w		#8,d1
01:00004734 5088            	  1335: 	lea			8(a0),a0	; increment screen pointer
01:00004736 4E75            	  1336: 	rts
                            	  1337: 
                            	  1338: StartMon:
                            	  1339: Monitor:
01:00004738 7201            	  1340: 	moveq	#1,d1
01:0000473A 6100B9C8        	  1341: 	bsr		UnlockSemaphore
                            	  1342: ;	lea		STACK,a7		; reset the stack pointer
01:0000473E 423900000418    	  1343: 	clr.b	KeybdEcho		; turn off keyboard echo
                            	  1344: PromptLn:
01:00004744 6100F5F8        	  1345: 	bsr			CRLF
01:00004748 123C0024        	  1346: 	move.b	#'$',d1
01:0000474C 6100F63A        	  1347: 	bsr			DisplayChar
                            	  1348: 
                            	  1349: ; Get characters until a CR is keyed
                            	  1350: ;
                            	  1351: Prompt3:
01:00004750 6100F9FA        	  1352: 	bsr			GetKey
01:00004754 0C01000D        	  1353: 	cmpi.b	#CR,d1
01:00004758 6706            	  1354: 	beq.s		Prompt1
01:0000475A 6100F62C        	  1355: 	bsr			DisplayChar
01:0000475E 60F0            	  1356: 	bra.s		Prompt3
                            	  1357: 
                            	  1358: ; Process the screen line that the CR was keyed on
                            	  1359: ;
                            	  1360: Prompt1:
01:00004760 423900000409    	  1361: 	clr.b		CursorCol			; go back to the start of the line
01:00004766 6100F610        	  1362: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1363: .0001:
01:0000476A 61C0            	  1364: 	bsr			FromScreen		; grab character off screen
01:0000476C 0C010024        	  1365: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:00004770 67F8            	  1366: 	beq.s		.0001
                            	  1367: 	
                            	  1368: ; Dispatch based on command character
                            	  1369: ;
                            	  1370: Prompt2:
01:00004772 0C010061        	  1371: 	cmpi.b	#'a',d1
01:00004776 6700054A        	  1372: 	beq			AudioInputTest
01:0000477A 0C010062        	  1373: 	cmpi.b	#'b',d1
01:0000477E 67000544        	  1374: 	beq			BouncingBalls
01:00004782 0C010067        	  1375: 	cmpi.b	#'g',d1
01:00004786 6700053E        	  1376: 	beq			GraphicsDemo
01:0000478A 0C01003A        	  1377: 	cmpi.b	#':',d1			; $: - edit memory
01:0000478E 6700022A        	  1378: 	beq			EditMem
01:00004792 0C010044        	  1379: 	cmpi.b	#'D',d1			; $D - dump memory
01:00004796 6700027C        	  1380: 	beq			DumpMem
01:0000479A 0C010046        	  1381: 	cmpi.b	#'F',d1
01:0000479E 670001C2        	  1382: 	beq			FillMem
01:000047A2 0C010042        	  1383: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:000047A6 6606            	  1384: 	bne.s	.0001
01:000047A8 4EF9FFFCC000    	  1385: 	jmp			$FFFCC000
                            	  1386: .0001:
01:000047AE 0C01004A        	  1387: 	cmpi.b	#'J',d1			; $J - execute code
01:000047B2 67000252        	  1388: 	beq			ExecuteCode
01:000047B6 0C01004C        	  1389: 	cmpi.b	#'L',d1			; $L - load S19 file
01:000047BA 6700038C        	  1390: 	beq			LoadS19
01:000047BE 0C01003F        	  1391: 	cmpi.b	#'?',d1			; $? - display help
01:000047C2 673C            	  1392: 	beq			DisplayHelp
01:000047C4 0C010043        	  1393: 	cmpi.b	#'C',d1			; $C - clear screen
01:000047C8 670E            	  1394: 	beq			TestCLS
01:000047CA 0C010054        	  1395: 	cmpi.b	#'T',d1			; $T - run cpu test program
01:000047CE 6604            	  1396: 	bne.s		.0002
01:000047D0 6100B976        	  1397: 	bsr			cpu_test
                            	  1398: .0002:
01:000047D4 6000FF62        	  1399: 	bra			Monitor
                            	  1400: 
                            	  1401: TestCLS:
01:000047D8 6100FF52        	  1402: 	bsr			FromScreen
01:000047DC 5242            	  1403: 	addq		#1,d2
01:000047DE 0C01004C        	  1404: 	cmpi.b	#'L',d1
01:000047E2 6600FF54        	  1405: 	bne			Monitor
01:000047E6 6100FF44        	  1406: 	bsr			FromScreen
01:000047EA 5242            	  1407: 	addq		#1,d2
01:000047EC 0C010053        	  1408: 	cmpi.b	#'S',d1
01:000047F0 6600FF46        	  1409: 	bne			Monitor
01:000047F4 610004D2        	  1410: 	bsr			ClearScreen
01:000047F8 6100F7EA        	  1411: 	bsr			HomeCursor
01:000047FC 6000FF3A        	  1412: 	bra			Monitor
                            	  1413: 	
                            	  1414: DisplayHelp:
01:00004800 43FA000A        	  1415: 	lea			HelpMsg,a1
01:00004804 6100F7C0        	  1416: 	bsr			DisplayString
01:00004808 6000FF2E        	  1417: 	bra			Monitor
                            	  1418: 
                            	  1419: HelpMsg:
01:0000480C 3F203D2044697370	  1420: 	dc.b	"? = Display help",CR,LF
01:00004814 6C61792068656C70
01:0000481C 0D
01:0000481D 0A
01:0000481E 434C53203D20636C	  1421: 	dc.b	"CLS = clear screen",CR,LF
01:00004826 6561722073637265
01:0000482E 656E
01:00004830 0D
01:00004831 0A
01:00004832 3A203D2045646974	  1422: 	dc.b	": = Edit memory bytes",CR,LF
01:0000483A 206D656D6F727920
01:00004842 6279746573
01:00004847 0D
01:00004848 0A
01:00004849 46203D2046696C6C	  1423: 	dc.b	"F = Fill memory",CR,LF
01:00004851 206D656D6F7279
01:00004858 0D
01:00004859 0A
01:0000485A 4C203D204C6F6164	  1424: 	dc.b	"L = Load S19 file",CR,LF
01:00004862 205331392066696C
01:0000486A 65
01:0000486B 0D
01:0000486C 0A
01:0000486D 44203D2044756D70	  1425: 	dc.b	"D = Dump memory",CR,LF
01:00004875 206D656D6F7279
01:0000487C 0D
01:0000487D 0A
01:0000487E 42203D2073746172	  1426: 	dc.b	"B = start tiny basic",CR,LF
01:00004886 742074696E792062
01:0000488E 61736963
01:00004892 0D
01:00004893 0A
01:00004894 4A203D204A756D70	  1427: 	dc.b	"J = Jump to code",CR,LF
01:0000489C 20746F20636F6465
01:000048A4 0D
01:000048A5 0A
01:000048A6 54203D2063707520	  1428: 	dc.b	"T = cpu test program",CR,LF,0
01:000048AE 746573742070726F
01:000048B6 6772616D
01:000048BA 0D
01:000048BB 0A
01:000048BC 00
                            	  1429: 	even
                            	  1430: 
                            	  1431: ;------------------------------------------------------------------------------
                            	  1432: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1433: ; Used to fetch a command line. (Not currently used).
                            	  1434: ;
                            	  1435: ; d0.b	- command prompt
                            	  1436: ;------------------------------------------------------------------------------
                            	  1437: 
                            	  1438: GetCmdLine:
01:000048BE 6100F4C8        	  1439: 		bsr		DisplayChar		; display prompt
01:000048C2 103C0020        	  1440: 		move.b	#' ',d0
01:000048C6 6100F4C0        	  1441: 		bsr		DisplayChar
01:000048CA 41F90000041D    	  1442: 		lea		CmdBuf,a0
                            	  1443: .0001:
01:000048D0 6100F87A        	  1444: 		bsr		GetKey
01:000048D4 B03C0008        	  1445: 		cmp.b	#CTRLH,d0
01:000048D8 6728            	  1446: 		beq.s	.0003
01:000048DA B03C0018        	  1447: 		cmp.b	#CTRLX,d0
01:000048DE 6746            	  1448: 		beq.s	.0004
01:000048E0 B03C000D        	  1449: 		cmp.b	#CR,d0
01:000048E4 6706            	  1450: 		beq.s	.0002
01:000048E6 B03C0020        	  1451: 		cmp.b	#' ',d0
01:000048EA 65E4            	  1452: 		bcs.s	.0001
                            	  1453: .0002:
01:000048EC 1080            	  1454: 		move.b	d0,(a0)
01:000048EE 5088            	  1455: 		lea			8(a0),a0
01:000048F0 6100F496        	  1456: 		bsr		DisplayChar
01:000048F4 B03C000D        	  1457: 		cmp.b	#CR,d0
01:000048F8 675E            	  1458: 		beq		.0007
01:000048FA B1FC0000041D    	  1459: 		cmp.l	#CmdBufEnd-1,a0
01:00004900 65CE            	  1460: 		bcs.s	.0001
                            	  1461: .0003:
01:00004902 103C0008        	  1462: 		move.b	#CTRLH,d0
01:00004906 6100F480        	  1463: 		bsr		DisplayChar
01:0000490A 103C0020        	  1464: 		move.b	#' ',d0
01:0000490E 6100F478        	  1465: 		bsr		DisplayChar
01:00004912 B1FC0000041D    	  1466: 		cmp.l	#CmdBuf,a0
01:00004918 63B6            	  1467: 		bls.s	.0001
01:0000491A 103C0008        	  1468: 		move.b	#CTRLH,d0
01:0000491E 6100F468        	  1469: 		bsr		DisplayChar
01:00004922 5388            	  1470: 		subq.l	#1,a0
01:00004924 60AA            	  1471: 		bra.s	.0001
                            	  1472: .0004:
01:00004926 2208            	  1473: 		move.l	a0,d1
01:00004928 92BC0000041D    	  1474: 		sub.l	#CmdBuf,d1
01:0000492E 671E            	  1475: 		beq.s	.0006
01:00004930 5341            	  1476: 		subq	#1,d1
                            	  1477: .0005:
01:00004932 103C0008        	  1478: 		move.b	#CTRLH,d0
01:00004936 6100F450        	  1479: 		bsr		DisplayChar
01:0000493A 103C0020        	  1480: 		move.b	#' ',d0
01:0000493E 6100F448        	  1481: 		bsr		DisplayChar
01:00004942 103C0008        	  1482: 		move.b	#CTRLH,d0
01:00004946 6100F440        	  1483: 		bsr		DisplayChar
01:0000494A 51C9FFE6        	  1484: 		dbra	d1,.0005
                            	  1485: .0006:
01:0000494E 41F90000041D    	  1486: 		lea		CmdBuf,a0
01:00004954 6000FF7A        	  1487: 		bra		.0001
                            	  1488: .0007:
01:00004958 103C000A        	  1489: 		move.b	#LF,d0
01:0000495C 6100F42A        	  1490: 		bsr		DisplayChar
01:00004960 4E75            	  1491: 		rts
                            	  1492: 
                            	  1493: 		
                            	  1494: ;------------------------------------------------------------------------------
                            	  1495: ; Fill memory
                            	  1496: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1497: ; FW = fill words
                            	  1498: ; FL = fill longs
                            	  1499: ; F = fill bytes
                            	  1500: ;------------------------------------------------------------------------------
                            	  1501: ;
                            	  1502: FillMem:
01:00004962 6100FDC8        	  1503: 	bsr			FromScreen
                            	  1504: 	;bsr		ScreenToAscii
01:00004966 1801            	  1505: 	move.b	d1,d4			; d4 = fill size
01:00004968 613E            	  1506: 	bsr			ignBlanks
01:0000496A 61000130        	  1507: 	bsr			GetHexNumber
01:0000496E 2241            	  1508: 	move.l	d1,a1			; a1 = start
01:00004970 6136            	  1509: 	bsr			ignBlanks
01:00004972 61000128        	  1510: 	bsr			GetHexNumber
01:00004976 2601            	  1511: 	move.l	d1,d3			; d3 = count
01:00004978 612E            	  1512: 	bsr			ignBlanks
01:0000497A 61000120        	  1513: 	bsr			GetHexNumber	; fill value
01:0000497E 0C04004C        	  1514: 	cmpi.b	#'L',d4
01:00004982 660A            	  1515: 	bne			fmem1
                            	  1516: fmemL:
01:00004984 22C1            	  1517: 	move.l	d1,(a1)+
01:00004986 5383            	  1518: 	sub.l	#1,d3
01:00004988 66FA            	  1519: 	bne.s	fmemL
01:0000498A 6000FDAC        	  1520: 	bra		Monitor
                            	  1521: fmem1
01:0000498E 0C040057        	  1522: 	cmpi.b	#'W',d4
01:00004992 660A            	  1523: 	bne		fmemB
                            	  1524: fmemW:
01:00004994 32C1            	  1525: 	move.w	d1,(a1)+
01:00004996 5383            	  1526: 	sub.l	#1,d3
01:00004998 66FA            	  1527: 	bne.s	fmemW
01:0000499A 6000FD9C        	  1528: 	bra		Monitor
                            	  1529: fmemB:
01:0000499E 12C1            	  1530: 	move.b	d1,(a1)+
01:000049A0 5383            	  1531: 	sub.l	#1,d3
01:000049A2 66FA            	  1532: 	bne.s	fmemB
01:000049A4 6000FD92        	  1533: 	bra		Monitor
                            	  1534: 
                            	  1535: ;------------------------------------------------------------------------------
                            	  1536: ; Modifies:
                            	  1537: ;	a0	- text pointer
                            	  1538: ;------------------------------------------------------------------------------
                            	  1539: ;
                            	  1540: ignBlanks:
01:000049A8 2F01            	  1541: 	move.l	d1,-(a7)
                            	  1542: .0001:
01:000049AA 6100FD80        	  1543: 	bsr			FromScreen
01:000049AE 0C010020        	  1544: 	cmpi.b	#' ',d1
01:000049B2 67F6            	  1545: 	beq.s		.0001
01:000049B4 5188            	  1546: 	lea			-8(a0),a0
01:000049B6 221F            	  1547: 	move.l	(a7)+,d1
01:000049B8 4E75            	  1548: 	rts
                            	  1549: 
                            	  1550: ;------------------------------------------------------------------------------
                            	  1551: ; Edit memory byte.
                            	  1552: ;------------------------------------------------------------------------------
                            	  1553: ;
                            	  1554: EditMem:
01:000049BA 61EC            	  1555: 	bsr		ignBlanks
01:000049BC 610000DE        	  1556: 	bsr		GetHexNumber
01:000049C0 2241            	  1557: 	move.l	d1,a1
                            	  1558: edtmem1:
01:000049C2 61E4            	  1559: 	bsr		ignBlanks
01:000049C4 610000D6        	  1560: 	bsr		GetHexNumber
01:000049C8 12C1            	  1561: 	move.b	d1,(a1)+
01:000049CA 61DC            	  1562: 	bsr		ignBlanks
01:000049CC 610000CE        	  1563: 	bsr		GetHexNumber
01:000049D0 12C1            	  1564: 	move.b	d1,(a1)+
01:000049D2 61D4            	  1565: 	bsr		ignBlanks
01:000049D4 610000C6        	  1566: 	bsr		GetHexNumber
01:000049D8 12C1            	  1567: 	move.b	d1,(a1)+
01:000049DA 61CC            	  1568: 	bsr		ignBlanks
01:000049DC 610000BE        	  1569: 	bsr		GetHexNumber
01:000049E0 12C1            	  1570: 	move.b	d1,(a1)+
01:000049E2 61C4            	  1571: 	bsr		ignBlanks
01:000049E4 610000B6        	  1572: 	bsr		GetHexNumber
01:000049E8 12C1            	  1573: 	move.b	d1,(a1)+
01:000049EA 61BC            	  1574: 	bsr		ignBlanks
01:000049EC 610000AE        	  1575: 	bsr		GetHexNumber
01:000049F0 12C1            	  1576: 	move.b	d1,(a1)+
01:000049F2 61B4            	  1577: 	bsr		ignBlanks
01:000049F4 610000A6        	  1578: 	bsr		GetHexNumber
01:000049F8 12C1            	  1579: 	move.b	d1,(a1)+
01:000049FA 61AC            	  1580: 	bsr		ignBlanks
01:000049FC 6100009E        	  1581: 	bsr		GetHexNumber
01:00004A00 12C1            	  1582: 	move.b	d1,(a1)+
01:00004A02 6000FD34        	  1583: 	bra		Monitor
                            	  1584: 
                            	  1585: ;------------------------------------------------------------------------------
                            	  1586: ; Execute code at the specified address.
                            	  1587: ;------------------------------------------------------------------------------
                            	  1588: 
                            	  1589: ExecuteCode:
01:00004A06 61A0            	  1590: 	bsr			ignBlanks
01:00004A08 61000092        	  1591: 	bsr			GetHexNumber
01:00004A0C 2041            	  1592: 	move.l	d1,a0
01:00004A0E 4E90            	  1593: 	jsr			(a0)
01:00004A10 6000FD26        	  1594: 	bra     Monitor
                            	  1595: 
                            	  1596: ;------------------------------------------------------------------------------
                            	  1597: ; Do a memory dump of the requested location.
                            	  1598: ; D 0800 0850
                            	  1599: ;------------------------------------------------------------------------------
                            	  1600: 
                            	  1601: DumpMem:
01:00004A14 6192            	  1602: 	bsr			ignBlanks
01:00004A16 61000084        	  1603: 	bsr			GetHexNumber
01:00004A1A 6700FD1C        	  1604: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
01:00004A1E 2601            	  1605: 	move.l	d1,d3				; save off start of range
01:00004A20 6186            	  1606: 	bsr			ignBlanks
01:00004A22 6178            	  1607: 	bsr			GetHexNumber
01:00004A24 6608            	  1608: 	bne.s		DumpMem1
01:00004A26 2203            	  1609: 	move.l	d3,d1
01:00004A28 068100000040    	  1610: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1611: DumpMem1:
01:00004A2E 2043            	  1612: 	move.l	d3,a0
01:00004A30 2241            	  1613: 	move.l	d1,a1
01:00004A32 6100F30A        	  1614: 	bsr			CRLF
                            	  1615: .0001:
01:00004A36 B3C8            	  1616: 	cmpa.l	a0,a1
01:00004A38 6300FCFE        	  1617: 	bls			Monitor
01:00004A3C 6102            	  1618: 	bsr			DisplayMem
01:00004A3E 60F6            	  1619: 	bra.s		.0001
                            	  1620: 
                            	  1621: ;------------------------------------------------------------------------------
                            	  1622: ; Display memory dump in a format suitable for edit.
                            	  1623: ;
                            	  1624: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  1625: ;
                            	  1626: ; Modifies:
                            	  1627: ;		d1,d2,a0
                            	  1628: ;------------------------------------------------------------------------------
                            	  1629: 
                            	  1630: DisplayMem:
01:00004A40 123C003A        	  1631: 	move.b	#':',d1
01:00004A44 6100F342        	  1632: 	bsr			DisplayChar
01:00004A48 2208            	  1633: 	move.l	a0,d1
01:00004A4A 610000D0        	  1634: 	bsr			DisplayTetra
01:00004A4E 7407            	  1635: 	moveq		#7,d2
                            	  1636: dspmem1:
01:00004A50 123C0020        	  1637: 	move.b	#' ',d1
01:00004A54 6100F332        	  1638: 	bsr			DisplayChar
01:00004A58 1218            	  1639: 	move.b	(a0)+,d1
01:00004A5A 610000CC        	  1640: 	bsr			DisplayByte
01:00004A5E 51CAFFF0        	  1641: 	dbra		d2,dspmem1
01:00004A62 6100009E        	  1642: 	bsr			DisplayTwoSpaces
01:00004A66 123C0022        	  1643: 	move.b	#34,d1
01:00004A6A 6100F31C        	  1644: 	bsr			DisplayChar
01:00004A6E 5188            	  1645: 	lea			-8(a0),a0
01:00004A70 7407            	  1646: 	moveq		#7,d2
                            	  1647: .0002:	
01:00004A72 1218            	  1648: 	move.b	(a0)+,d1
01:00004A74 B23C0020        	  1649: 	cmp.b		#' ',d1
01:00004A78 6506            	  1650: 	blo.s		.0003
01:00004A7A B23C007F        	  1651: 	cmp.b		#127,d1
01:00004A7E 6304            	  1652: 	bls.s		.0001
                            	  1653: .0003:
01:00004A80 123C002E        	  1654: 	move.b	#'.',d1
                            	  1655: .0001:
01:00004A84 6100F302        	  1656: 	bsr			DisplayChar
01:00004A88 51CAFFE8        	  1657: 	dbra		d2,.0002
01:00004A8C 123C0022        	  1658: 	move.b	#34,d1
01:00004A90 6100F2F6        	  1659: 	bsr			DisplayChar
01:00004A94 6100F732        	  1660: 	bsr			CheckForCtrlC
01:00004A98 6000F2A4        	  1661: 	bra			CRLF
                            	  1662: 
                            	  1663: ;------------------------------------------------------------------------------
                            	  1664: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1665: ;
                            	  1666: ; Returns:
                            	  1667: ;		d0 = number of digits
                            	  1668: ;		d1 = value of number
                            	  1669: ;		zf = number of digits == 0
                            	  1670: ;------------------------------------------------------------------------------
                            	  1671: ;
                            	  1672: GetHexNumber:
01:00004A9C 2F02            	  1673: 	move.l	d2,-(a7)
01:00004A9E 7400            	  1674: 	clr.l		d2
01:00004AA0 7000            	  1675: 	moveq		#0,d0
                            	  1676: .0002:
01:00004AA2 6100FC88        	  1677: 	bsr			FromScreen
01:00004AA6 6120            	  1678: 	bsr			AsciiToHexNybble
01:00004AA8 B23C00FF        	  1679: 	cmp.b		#$ff,d1
01:00004AAC 6712            	  1680: 	beq.s		.0001
01:00004AAE E98A            	  1681: 	lsl.l		#4,d2
01:00004AB0 02810000000F    	  1682: 	andi.l	#$0f,d1
01:00004AB6 8481            	  1683: 	or.l		d1,d2
01:00004AB8 5240            	  1684: 	addq		#1,d0
01:00004ABA 0C000008        	  1685: 	cmpi.b	#8,d0
01:00004ABE 65E2            	  1686: 	blo.s		.0002
                            	  1687: .0001:
01:00004AC0 2202            	  1688: 	move.l	d2,d1
01:00004AC2 241F            	  1689: 	move.l	(a7)+,d2
01:00004AC4 4A00            	  1690: 	tst.b		d0
01:00004AC6 4E75            	  1691: 	rts	
                            	  1692: 
                            	  1693: ;------------------------------------------------------------------------------
                            	  1694: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  1695: ; to a hex nybble.
                            	  1696: ;------------------------------------------------------------------------------
                            	  1697: 
                            	  1698: AsciiToHexNybble:
01:00004AC8 0C010030        	  1699: 	cmpi.b	#'0',d1
01:00004ACC 6530            	  1700: 	blo.s		gthx3
01:00004ACE 0C010039        	  1701: 	cmpi.b	#'9',d1
01:00004AD2 6206            	  1702: 	bhi.s		gthx5
01:00004AD4 04010030        	  1703: 	subi.b	#'0',d1
01:00004AD8 4E75            	  1704: 	rts
                            	  1705: gthx5:
01:00004ADA 0C010041        	  1706: 	cmpi.b	#'A',d1
01:00004ADE 651E            	  1707: 	blo.s		gthx3
01:00004AE0 0C010046        	  1708: 	cmpi.b	#'F',d1
01:00004AE4 6206            	  1709: 	bhi.s		gthx6
01:00004AE6 060100C9        	  1710: 	addi.b	#10-'A',d1
01:00004AEA 4E75            	  1711: 	rts
                            	  1712: gthx6:
01:00004AEC 0C010061        	  1713: 	cmpi.b	#'a',d1
01:00004AF0 650C            	  1714: 	blo.s		gthx3
01:00004AF2 0C010066        	  1715: 	cmpi.b	#'f',d1
01:00004AF6 6206            	  1716: 	bhi.s		gthx3
01:00004AF8 060100A9        	  1717: 	addi.b	#10-'a',d1
01:00004AFC 4E75            	  1718: 	rts
                            	  1719: gthx3:
01:00004AFE 72FF            	  1720: 	moveq	#-1,d1		; not a hex number
01:00004B00 4E75            	  1721: 	rts
                            	  1722: 
                            	  1723: ;------------------------------------------------------------------------------
                            	  1724: ;------------------------------------------------------------------------------
                            	  1725: 
                            	  1726: DisplayTwoSpaces:
01:00004B02 2F01            	  1727: 	move.l	d1,-(a7)
01:00004B04 123C0020        	  1728: 	move.b	#' ',d1
01:00004B08 6100F27E        	  1729: 	bsr			DisplayChar
                            	  1730: dspspc1:
01:00004B0C 6100F27A        	  1731: 	bsr			DisplayChar
01:00004B10 221F            	  1732: 	move.l	(a7)+,d1
01:00004B12 4E75            	  1733: 	rts
                            	  1734: 
                            	  1735: DisplaySpace:
01:00004B14 2F01            	  1736: 	move.l	d1,-(a7)
01:00004B16 123C0020        	  1737: 	move.b	#' ',d1
01:00004B1A 60F0            	  1738: 	bra			dspspc1
                            	  1739: 
                            	  1740: ;------------------------------------------------------------------------------
                            	  1741: ; Display the 32 bit word in D1.L
                            	  1742: ;------------------------------------------------------------------------------
                            	  1743: 
                            	  1744: DisplayTetra:
01:00004B1C 4841            	  1745: 	swap	d1
01:00004B1E 6102            	  1746: 	bsr		DisplayWyde
01:00004B20 4841            	  1747: 	swap	d1
                            	  1748: 
                            	  1749: ;------------------------------------------------------------------------------
                            	  1750: ; Display the byte in D1.W
                            	  1751: ;------------------------------------------------------------------------------
                            	  1752: 
                            	  1753: DisplayWyde:
01:00004B22 E059            	  1754: 	ror.w		#8,d1
01:00004B24 6102            	  1755: 	bsr			DisplayByte
01:00004B26 E159            	  1756: 	rol.w		#8,d1
                            	  1757: 
                            	  1758: ;------------------------------------------------------------------------------
                            	  1759: ; Display the byte in D1.B
                            	  1760: ;------------------------------------------------------------------------------
                            	  1761: 
                            	  1762: DisplayByte:
01:00004B28 E819            	  1763: 	ror.b		#4,d1
01:00004B2A 6102            	  1764: 	bsr			DisplayNybble
01:00004B2C E919            	  1765: 	rol.b		#4,d1
                            	  1766: 
                            	  1767: ;------------------------------------------------------------------------------
                            	  1768: ; Display nybble in D1.B
                            	  1769: ;------------------------------------------------------------------------------
                            	  1770: 
                            	  1771: DisplayNybble:
01:00004B2E 2F01            	  1772: 	move.l	d1,-(a7)
01:00004B30 0201000F        	  1773: 	andi.b	#$F,d1
01:00004B34 06010030        	  1774: 	addi.b	#'0',d1
01:00004B38 0C010039        	  1775: 	cmpi.b	#'9',d1
01:00004B3C 6302            	  1776: 	bls.s		.0001
01:00004B3E 5E01            	  1777: 	addi.b	#7,d1
                            	  1778: .0001:
01:00004B40 6100F246        	  1779: 	bsr			DisplayChar
01:00004B44 221F            	  1780: 	move.l	(a7)+,d1
01:00004B46 4E75            	  1781: 	rts
                            	  1782: 
                            	  1783: ;------------------------------------------------------------------------------
                            	  1784: ;------------------------------------------------------------------------------
                            	  1785: ;
                            	  1786: ;DisplayHexNumber:
                            	  1787: ;	move.w	#$A6A6,leds		; diagnostics
                            	  1788: ;	move.l	#VDGREG,a6
                            	  1789: ;	move.w	#7,d2		; number-1 of digits to display
                            	  1790: ;disphnum1:
                            	  1791: ;	move.b	d1,d0		; get digit into d0.b
                            	  1792: ;	andi.w	#$0f,d0
                            	  1793: ;	cmpi.w	#$09,d0
                            	  1794: ;	bls.s	disphnum2
                            	  1795: ;	addi.w	#7,d0
                            	  1796: ;disphnum2:
                            	  1797: ;	addi.w	#$30,d0	; convert to display char
                            	  1798: ;	move.w	d2,d3		; char count into d3
                            	  1799: ;	asl.w	#3,d3		; scale * 8
                            	  1800: ;disphnum3:
                            	  1801: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  1802: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  1803: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  1804: ;	ext.w	d0						; zero out high order bits
                            	  1805: ;	move.w	d0,$420(a6)			; set char code
                            	  1806: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  1807: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  1808: ;	move.w	d3,$426(a6)			; set x pos
                            	  1809: ;	move.w	#8,$428(a6)			; set y pos
                            	  1810: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  1811: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  1812: ;	ror.l	#4,d1					; rot to next digit
                            	  1813: ;	dbeq	d2,disphnum1
                            	  1814: ;	jmp		(a5)
                            	  1815: 
                            	  1816: ;==============================================================================
                            	  1817: ; Load an S19 format file
                            	  1818: ;==============================================================================
                            	  1819: ;
                            	  1820: LoadS19:
01:00004B48 600A            	  1821: 	bra			ProcessRec
                            	  1822: NextRec:
01:00004B4A 6100015A        	  1823: 	bsr			sGetChar
01:00004B4E 0C00000A        	  1824: 	cmpi.b	#LF,d0
01:00004B52 66F6            	  1825: 	bne			NextRec
                            	  1826: ProcessRec
01:00004B54 61000150        	  1827: 	bsr			sGetChar
01:00004B58 1800            	  1828: 	move.b	d0,d4
01:00004B5A 0C04001A        	  1829: 	cmpi.b	#26,d4		; CTRL-Z ?
01:00004B5E 6700FBD8        	  1830: 	beq			Monitor
01:00004B62 0C040053        	  1831: 	cmpi.b	#'S',d4
01:00004B66 66E2            	  1832: 	bne			NextRec
01:00004B68 6100013C        	  1833: 	bsr			sGetChar
01:00004B6C 1800            	  1834: 	move.b	d0,d4
01:00004B6E 0C040030        	  1835: 	cmpi.b	#'0',d4
01:00004B72 65D6            	  1836: 	blo			NextRec
01:00004B74 0C040039        	  1837: 	cmpi.b	#'9',d4		; d4 = record type
01:00004B78 62D0            	  1838: 	bhi			NextRec
01:00004B7A 6100012A        	  1839: 	bsr			sGetChar
01:00004B7E 6100FF48        	  1840: 	bsr			AsciiToHexNybble
01:00004B82 1401            	  1841: 	move.b	d1,d2
01:00004B84 61000120        	  1842: 	bsr		sGetChar
01:00004B88 6100FF3E        	  1843: 	bsr		AsciiToHexNybble
01:00004B8C E90A            	  1844: 	lsl.b	#4,d2
01:00004B8E 8202            	  1845: 	or.b	d2,d1		; d1 = byte count
01:00004B90 1601            	  1846: 	move.b	d1,d3		; d3 = byte count
01:00004B92 0C040030        	  1847: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
01:00004B96 67B2            	  1848: 	beq		NextRec
01:00004B98 0C040031        	  1849: 	cmpi.b	#'1',d4
01:00004B9C 676A            	  1850: 	beq		ProcessS1
01:00004B9E 0C040032        	  1851: 	cmpi.b	#'2',d4
01:00004BA2 6768            	  1852: 	beq		ProcessS2
01:00004BA4 0C040033        	  1853: 	cmpi.b	#'3',d4
01:00004BA8 6766            	  1854: 	beq		ProcessS3
01:00004BAA 0C040035        	  1855: 	cmpi.b	#'5',d4		; record count record, ignore
01:00004BAE 679A            	  1856: 	beq		NextRec
01:00004BB0 0C040037        	  1857: 	cmpi.b	#'7',d4
01:00004BB4 675E            	  1858: 	beq		ProcessS7
01:00004BB6 0C040038        	  1859: 	cmpi.b	#'8',d4
01:00004BBA 6764            	  1860: 	beq		ProcessS8
01:00004BBC 0C040039        	  1861: 	cmpi.b	#'9',d4
01:00004BC0 676A            	  1862: 	beq		ProcessS9
01:00004BC2 6086            	  1863: 	bra		NextRec
                            	  1864: 
                            	  1865: pcssxa
01:00004BC4 024300FF        	  1866: 	andi.w	#$ff,d3
01:00004BC8 5343            	  1867: 	subi.w	#1,d3			; one less for dbra
                            	  1868: .0001
01:00004BCA 7400            	  1869: 	clr.l		d2
01:00004BCC 610000D8        	  1870: 	bsr			sGetChar
01:00004BD0 6100FEF6        	  1871: 	bsr			AsciiToHexNybble
01:00004BD4 E98A            	  1872: 	lsl.l		#4,d2
01:00004BD6 8401            	  1873: 	or.b		d1,d2
01:00004BD8 610000CC        	  1874: 	bsr			sGetChar
01:00004BDC 6100FEEA        	  1875: 	bsr			AsciiToHexNybble
01:00004BE0 E98A            	  1876: 	lsl.l		#4,d2
01:00004BE2 8401            	  1877: 	or.b		d1,d2
01:00004BE4 12C2            	  1878: 	move.b	d2,(a1)+
01:00004BE6 51CBFFE2        	  1879: 	dbra		d3,.0001
                            	  1880: ; Get the checksum byte
01:00004BEA 7400            	  1881: 	clr.l		d2
01:00004BEC 610000B8        	  1882: 	bsr			sGetChar
01:00004BF0 6100FED6        	  1883: 	bsr			AsciiToHexNybble
01:00004BF4 E98A            	  1884: 	lsl.l		#4,d2
01:00004BF6 8401            	  1885: 	or.b		d1,d2
01:00004BF8 610000AC        	  1886: 	bsr			sGetChar
01:00004BFC 6100FECA        	  1887: 	bsr			AsciiToHexNybble
01:00004C00 E98A            	  1888: 	lsl.l		#4,d2
01:00004C02 8401            	  1889: 	or.b		d1,d2
01:00004C04 6000FF44        	  1890: 	bra			NextRec
                            	  1891: 
                            	  1892: ProcessS1:
01:00004C08 612E            	  1893: 	bsr			S19Get16BitAddress
01:00004C0A 60B8            	  1894: 	bra			pcssxa
                            	  1895: ProcessS2:
01:00004C0C 6136            	  1896: 	bsr			S19Get24BitAddress
01:00004C0E 60B4            	  1897: 	bra			pcssxa
                            	  1898: ProcessS3:
01:00004C10 613E            	  1899: 	bsr			S19Get32BitAddress
01:00004C12 60B0            	  1900: 	bra			pcssxa
                            	  1901: ProcessS7:
01:00004C14 613A            	  1902: 	bsr			S19Get32BitAddress
01:00004C16 23C900000414    	  1903: 	move.l	a1,S19StartAddress
01:00004C1C 6000FB1A        	  1904: 	bra			Monitor
                            	  1905: ProcessS8:
01:00004C20 6122            	  1906: 	bsr			S19Get24BitAddress
01:00004C22 23C900000414    	  1907: 	move.l	a1,S19StartAddress
01:00004C28 6000FB0E        	  1908: 	bra			Monitor
                            	  1909: ProcessS9:
01:00004C2C 610A            	  1910: 	bsr			S19Get16BitAddress
01:00004C2E 23C900000414    	  1911: 	move.l	a1,S19StartAddress
01:00004C34 6000FB02        	  1912: 	bra			Monitor
                            	  1913: 
                            	  1914: S19Get16BitAddress:
01:00004C38 7400            	  1915: 	clr.l		d2
01:00004C3A 616A            	  1916: 	bsr			sGetChar
01:00004C3C 6100FE8A        	  1917: 	bsr			AsciiToHexNybble
01:00004C40 1401            	  1918: 	move.b	d1,d2
01:00004C42 603E            	  1919: 	bra			S1932b
                            	  1920: 
                            	  1921: S19Get24BitAddress:
01:00004C44 7400            	  1922: 	clr.l	d2
01:00004C46 615E            	  1923: 	bsr		sGetChar
01:00004C48 6100FE7E        	  1924: 	bsr		AsciiToHexNybble
01:00004C4C 1401            	  1925: 	move.b	d1,d2
01:00004C4E 601E            	  1926: 	bra		S1932a
                            	  1927: 
                            	  1928: S19Get32BitAddress:
01:00004C50 7400            	  1929: 	clr.l	d2
01:00004C52 6152            	  1930: 	bsr			sGetChar
01:00004C54 6100FE72        	  1931: 	bsr			AsciiToHexNybble
01:00004C58 1401            	  1932: 	move.b	d1,d2
01:00004C5A 614A            	  1933: 	bsr			sGetChar
01:00004C5C 6100FE6A        	  1934: 	bsr			AsciiToHexNybble
01:00004C60 E98A            	  1935: 	lsl.l		#4,d2
01:00004C62 8401            	  1936: 	or.b		d1,d2
01:00004C64 6140            	  1937: 	bsr			sGetChar
01:00004C66 6100FE60        	  1938: 	bsr			AsciiToHexNybble
01:00004C6A E98A            	  1939: 	lsl.l		#4,d2
01:00004C6C 8401            	  1940: 	or.b		d1,d2
                            	  1941: S1932a:
01:00004C6E 6136            	  1942: 	bsr			sGetChar
01:00004C70 6100FE56        	  1943: 	bsr			AsciiToHexNybble
01:00004C74 E98A            	  1944: 	lsl.l		#4,d2
01:00004C76 8401            	  1945: 	or.b		d1,d2
01:00004C78 612C            	  1946: 	bsr			sGetChar
01:00004C7A 6100FE4C        	  1947: 	bsr			AsciiToHexNybble
01:00004C7E E98A            	  1948: 	lsl.l		#4,d2
01:00004C80 8401            	  1949: 	or.b		d1,d2
                            	  1950: S1932b:
01:00004C82 6122            	  1951: 	bsr			sGetChar
01:00004C84 6100FE42        	  1952: 	bsr			AsciiToHexNybble
01:00004C88 E98A            	  1953: 	lsl.l		#4,d2
01:00004C8A 8401            	  1954: 	or.b		d1,d2
01:00004C8C 6118            	  1955: 	bsr			sGetChar
01:00004C8E 6100FE38        	  1956: 	bsr			AsciiToHexNybble
01:00004C92 E98A            	  1957: 	lsl.l		#4,d2
01:00004C94 8401            	  1958: 	or.b		d1,d2
01:00004C96 610E            	  1959: 	bsr			sGetChar
01:00004C98 6100FE2E        	  1960: 	bsr			AsciiToHexNybble
01:00004C9C E98A            	  1961: 	lsl.l		#4,d2
01:00004C9E 8401            	  1962: 	or.b		d1,d2
01:00004CA0 7800            	  1963: 	clr.l		d4
01:00004CA2 2242            	  1964: 	move.l	d2,a1
01:00004CA4 4E75            	  1965: 	rts
                            	  1966: 
                            	  1967: ;------------------------------------------------------------------------------
                            	  1968: ; Get a character from auxillary input, checking the keyboard status for a
                            	  1969: ; CTRL-C
                            	  1970: ;------------------------------------------------------------------------------
                            	  1971: ;
                            	  1972: sGetChar:
01:00004CA6 6100F492        	  1973: 	bsr			CheckForKey
01:00004CAA 670C            	  1974: 	beq			.0001
01:00004CAC 6100F49E        	  1975: 	bsr			GetKey
01:00004CB0 0C010003        	  1976: 	cmpi.b	#CTRLC,d1
01:00004CB4 6700FA82        	  1977: 	beq			Monitor
                            	  1978: .0001:
01:00004CB8 6114            	  1979: 	bsr			AUXIN
01:00004CBA 4A80            	  1980: 	tst.l		d0
01:00004CBC 6BE8            	  1981: 	bmi			sGetChar
01:00004CBE 1200            	  1982: 	move.b	d0,d1
01:00004CC0 4E75            	  1983: 	rts
                            	  1984: 
                            	  1985: AudioInputTest:
01:00004CC2 4E75            	  1986: 	rts
                            	  1987: BouncingBalls:
01:00004CC4 4E75            	  1988: 	rts
                            	  1989: GraphicsDemo:
01:00004CC6 4E75            	  1990: 	rts
                            	  1991: ClearScreen:
01:00004CC8 6000F030        	  1992: 	bra		clear_screen
01:00004CCC 4E75            	  1993: 	rts
                            	  1994: 
                            	  1995: AUXIN:
                            	  1996: 
                            	  1997: ;------------------------------------------------------------------------------
                            	  1998: ; SerialPeekChar
                            	  1999: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2000: ; buffer.
                            	  2001: ;
                            	  2002: ; Stack Space:
                            	  2003: ;		0 words
                            	  2004: ; Parameters:
                            	  2005: ;		none
                            	  2006: ; Modifies:
                            	  2007: ;		d
                            	  2008: ; Returns:
                            	  2009: ;		d0 = character or -1
                            	  2010: ;------------------------------------------------------------------------------
                            	  2011: 
                            	  2012: SerialPeekCharDirect:
                            	  2013: 	; Disallow interrupts between status read and rx read.
01:00004CCE 40E7            	  2014: 	move.w	sr,-(a7)					; save off SR
01:00004CD0 007C7000        	  2015: 	ori.w		#$7000,sr					; disable interrupts
01:00004CD4 2039FD060004    	  2016: 	move.l	ACIA+ACIA_STAT,d0	; get serial status
01:00004CDA 08000003        	  2017: 	btst		#3,d0							; look for Rx not empty
01:00004CDE 670A            	  2018: 	beq.s		.0001
01:00004CE0 7000            	  2019: 	moveq.l	#0,d0							; clear upper bits of return value
01:00004CE2 2039FD060000    	  2020: 	move.l	ACIA+ACIA_RX,d0		; get data from ACIA
01:00004CE8 4E73            	  2021: 	rte												; restore SR and return
                            	  2022: .0001:
01:00004CEA 70FF            	  2023: 	moveq		#-1,d0
01:00004CEC 4E73            	  2024: 	rte
                            	  2025: 
                            	  2026: irq_rout:
01:00004CEE 2F08            	  2027: 	move.l	a0,-(a7)
01:00004CF0 207900000410    	  2028: 	move.l	TextScr,a0
01:00004CF6 52A801F0        	  2029: 	addi.l	#1,496(a0)
01:00004CFA 205F            	  2030: 	move.l	(a7)+,a0
01:00004CFC 4E73            	  2031: 	rte
                            	  2032: 
                            	  2033: brdisp_trap:
01:00004CFE 584F            	  2034: 	addq		#4,sp					; get rid of sr
01:00004D00 43FA0066        	  2035: 	lea			msg_bad_branch_disp,a1
01:00004D04 6100F2C0        	  2036: 	bsr			DisplayString
01:00004D08 6100FE0A        	  2037: 	bsr			DisplaySpace
01:00004D0C 221F            	  2038: 	move.l	(sp)+,d1			; pop exception address
01:00004D0E 6100FE0C        	  2039: 	bsr			DisplayTetra	; and display it
01:00004D12 221F            	  2040: 	move.l	(sp)+,d1			; pop format word
01:00004D14 6000FA22        	  2041: 	bra			Monitor
                            	  2042: 
                            	  2043: illegal_trap:
01:00004D18 584F            	  2044: 	addq		#4,sp						; get rid of sr
01:00004D1A 221F            	  2045: 	move.l	(sp)+,d1				; pop exception address
01:00004D1C 6100FDFE        	  2046: 	bsr			DisplayTetra		; and display it
01:00004D20 43FA0034        	  2047: 	lea			msg_illegal,a1	; followed by message
01:00004D24 6100F2A0        	  2048: 	bsr			DisplayString
                            	  2049: .0001:
01:00004D28 60FE            	  2050: 	bra			.0001
01:00004D2A 6000FA0C        	  2051: 	bra			Monitor
                            	  2052: 	
                            	  2053: ; -----------------------------------------------------------------------------
                            	  2054: ; -----------------------------------------------------------------------------
                            	  2055: 
                            	  2056: msg_start:
01:00004D2E 726636386B205379	  2057: 	dc.b	"rf68k System Starting",CR,LF,0
01:00004D36 7374656D20537461
01:00004D3E 7274696E67
01:00004D43 0D
01:00004D44 0A
01:00004D45 00
                            	  2058: msg_core_start:
01:00004D46 20636F7265207374	  2059: 	dc.b	" core starting",CR,LF
01:00004D4E 617274696E67
01:00004D54 0D
01:00004D55 0A
                            	  2060: msg_illegal:
01:00004D56 20696C6C6567616C	  2061: 	dc.b	" illegal opcode",CR,LF,0
01:00004D5E 206F70636F6465
01:00004D65 0D
01:00004D66 0A
01:00004D67 00
                            	  2062: msg_bad_branch_disp:
01:00004D68 206272616E636820	  2063: 	dc.b	" branch selfref: ",0
01:00004D70 73656C667265663A
01:00004D78 20
01:00004D79 00
                            	  2064: 
                            	  2065: 
                            	  2066: 


Symbols by name:
ABCD_INNER1                     01:00002502
ABCD_INNER2                     01:00002570
ABCD_NO_C1                      01:0000251E
ABCD_NO_C2                      01:00002526
ABCD_NO_C3                      01:0000258C
ABCD_NO_C4                      01:00002594
ABCD_OUTER1                     01:00002500
ABCD_OUTER2                     01:0000256E
ACIA                             E:FD060000
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ADDA_OUTER1                     01:0000306A
ADDQ_LOOP1                      01:00002884
ADDQ_LOOP2                      01:000028C2
ADDQ_LOOP3                      01:000028F8
ADDX_LOOP3                      01:00003190
ADDX_LOOP4                      01:000031AC
ADDX_LOOP5                      01:000031C8
ADDX_OUTER1                     01:000030FC
ADD_OUTER1                      01:00002E90
ADD_OUTER2                      01:00002F04
ALL_DONE                        01:0000021E
AND_OUTER1                      01:00002BAE
AND_OUTER2                      01:00002C22
AUXIN                           01:00004CCE
AsciiToHexNybble                01:00004AC8
AudioInputTest                  01:00004CC2
BCC1                            01:000027AA
BCC10                           01:000027FC
BCC11                           01:00002804
BCC12                           01:0000280E
BCC13                           01:00002816
BCC14                           01:00002820
BCC2                            01:000027B4
BCC3                            01:000027BC
BCC4                            01:000027C6
BCC5                            01:000027CE
BCC6                            01:000027D8
BCC7                            01:000027E0
BCC8                            01:000027EA
BCC9                            01:000027F2
BSR_CLOSE1                      01:00001322
BSR_CLOSE2                      01:00001358
BSR_FAR1                        01:00000220
BSR_FAR2                        01:0000279A
BlankLastLine                   01:00003F82
BouncingBalls                   01:00004CC4
CMPA_OUTER1                     01:00002D84
CMPM_LOOP1                      01:00002E12
CMPM_LOOP2                      01:00002E2C
CMPM_LOOP3                      01:00002E46
CMP_OUTER1                      01:00002D0E
CR                               E:0000000D
CRLF                            01:00003D3E
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003D78
CheckForCtrlC                   01:000041C8
CheckForKey                     01:0000413A
ClearScreen                     01:00004CC8
CmdBuf                          00:0000041D
CmdBufEnd                       00:0000041E
Cursor1                         01:000040C4
CursorCol                       00:00000409
CursorRow                       00:00000408
DBCC_LOOP1                      01:0000282A
DBCC_LOOP2                      01:00002838
DIVS_OUTER1                     01:00002A6E
DIVU_OUTER1                     01:00002A1C
DecrementSemaphore              01:000000E4
Delay3s                         01:00000124
DisplayByte                     01:00004B28
DisplayChar                     01:00003D88
DisplayHelp                     01:00004800
DisplayMem                      01:00004A40
DisplayNybble                   01:00004B2E
DisplaySpace                    01:00004B14
DisplayString                   01:00003FC6
DisplayStringCRLF               01:00003FDE
DisplayTetra                    01:00004B1C
DisplayTwoSpaces                01:00004B02
DisplayWyde                     01:00004B22
DumpMem                         01:00004A14
DumpMem1                        01:00004A2E
EOR_OUTER2                      01:00002C98
EXCEPTION_6                     01:00000230
EXCEPTION_7                     01:00000240
EditMem                         01:000049BA
ExecuteCode                     01:00004A06
FillMem                         01:00004962
FromScreen                      01:0000472C
GetCmdLine                      01:000048BE
GetHexNumber                    01:00004A9C
GetKey                          01:0000414C
GraphicsDemo                    01:00004CC6
HelpMsg                         01:0000480C
HomeCursor                      01:00003FE4
IOFocus                          E:00100000
IncCursorPos                    01:00003EFC
IncCursorRow                    01:00003F1C
IncrementSemaphore              01:000000CC
InitSemaphores                  01:0000008A
KEYBD                            E:FD0FFE00
KeybdEcho                       00:00000418
KeybdGetChar                    01:000041EA
KeybdGetCharNoWait              01:000041DA
KeybdGetCharWait                01:000041E2
KeybdLEDs                       00:0000041A
KeybdRecvByte                   01:000040EC
KeybdSendByte                   01:00004414
KeybdSetLEDStatus               01:000043A8
KeybdWaitFlag                   00:00000419
KeybdWaitTx                     01:0000410C
LEA1                            01:00001D52
LF                               E:0000000A
LoadS19                         01:00004B48
LockSemaphore                   01:000000FE
MOVE1                           01:0000199C
MOVE2                           01:00001920
MOVE3                           01:00001A1C
MOVE4                           01:00001B76
MULS_OUTER1                     01:00003364
MULU_OUTER1                     01:00003318
Monitor                         01:00004738
NBCD_LOOP                       01:000026E8
NBCD_LOOP1                      01:0000272E
NBCD_NO_C                       01:000026F4
NBCD_NO_C1                      01:00002742
NBCD_NO_Z                       01:000026F8
NBCD_NO_Z1                      01:00002746
NextRec                         01:00004B4A
OR_OUTER1                       01:00002AC4
OR_OUTER2                       01:00002B38
ProcessRec                      01:00004B54
ProcessS1                       01:00004C08
ProcessS2                       01:00004C0C
ProcessS3                       01:00004C10
ProcessS7                       01:00004C14
ProcessS8                       01:00004C20
ProcessS9                       01:00004C2C
Prompt1                         01:00004760
Prompt2                         01:00004772
Prompt3                         01:00004750
PromptLn                        01:00004744
ROXx_FLAGS                      01:0000362C
ROXx_LOOP1                      01:00003642
ROXx_LOOP2                      01:00003662
ROXx_LOOP3                      01:00003682
ROXx_LOOP4                      01:000036A2
ROXx_LOOP5                      01:000036C2
ROXx_LOOP6                      01:000036E4
ROx_FLAGS                       01:000033F6
ROx_LOOP1                       01:0000340C
ROx_LOOP2                       01:0000342C
ROx_LOOP3                       01:0000344C
ROx_LOOP4                       01:0000346C
ROx_LOOP5                       01:0000348C
ROx_LOOP6                       01:000034AE
RTR_DONE                        01:0000278C
S1932a                          01:00004C6E
S1932b                          01:00004C82
S19Get16BitAddress              01:00004C38
S19Get24BitAddress              01:00004C44
S19Get32BitAddress              01:00004C50
S19StartAddress                 00:00000414
SBCD_INNER1                     01:000025FA
SBCD_INNER2                     01:00002668
SBCD_NO_C1                      01:00002616
SBCD_NO_C2                      01:0000261E
SBCD_NO_C3                      01:00002684
SBCD_NO_C4                      01:0000268C
SBCD_OUTER1                     01:000025F8
SBCD_OUTER2                     01:00002666
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003AA4
SHIFTS2_LOOP1                   01:00003ABA
SHIFTS2_LOOP2                   01:00003AD6
SHIFTS2_LOOP3                   01:00003AF2
SHIFTS2_LOOP4                   01:00003B0E
SHIFTS2_LOOP5                   01:00003B2A
SHIFTS2_LOOP6                   01:00003B48
SHIFTS_FLAGS                    01:00003862
SHIFTS_LOOP1                    01:00003878
SHIFTS_LOOP2                    01:00003898
SHIFTS_LOOP3                    01:000038B8
SHIFTS_LOOP4                    01:000038D8
SHIFTS_LOOP5                    01:000038F8
SHIFTS_LOOP6                    01:0000391A
SUBA_OUTER1                     01:000030B6
SUBQ_LOOP1                      01:00002942
SUBQ_LOOP2                      01:0000297C
SUBQ_LOOP3                      01:000029B2
SUBX_LOOP3                      01:000032A0
SUBX_LOOP4                      01:000032BC
SUBX_LOOP5                      01:000032D8
SUBX_OUTER1                     01:0000320C
SUB_OUTER1                      01:00002F7A
SUB_OUTER2                      01:00002FEE
ScrollUp                        01:00003F50
SerialPeekCharDirect            01:00004CCE
SetKeyboardEcho                 01:00004132
StartMon                        01:00004738
StubRout                        01:000040C4
SyncCursor                      01:00003FF6
T15DispatchTable                01:00004024
TEXTREG                          E:FD03FF00
TRAP15                          01:0000400C
TestCLS                         01:000047D8
TestSemaphore                   01:000000B0
TextCols                        00:0000040B
TextCurpos                      00:0000040C
TextPos                         00:0000040C
TextRows                        00:0000040A
TextScr                         00:00000410
UnlockSemaphore                 01:00000104
UpdateTextPos                   01:00003D50
Wait10ms                        01:0000441C
_KeyState1                      00:0000041B
_KeyState2                      00:0000041C
_KeybdGetScancode               01:000040DC
_KeybdGetStatus                 01:000040D4
_KeybdInit                      01:000040C6
_keybdControlCodes              01:0000462C
_keybdExtendedCodes             01:000046AC
_shiftedScanCodes               01:0000452C
_unshiftedScanCodes             01:0000442C
bkcolor                         00:00000404
brdisp_trap                     01:00004CFE
cfk1                            01:00004148
clear_screen                    01:00003CFA
const_tbl                       00:00000400
cpu_test                        01:00000148
dccr                            01:00003DA8
dclf                            01:00003E7C
dcx10                           01:00003E18
dcx11                           01:00003E36
dcx12                           01:00003E2E
dcx14                           01:00003DC4
dcx16                           01:00003E80
dcx4                            01:00003E84
dcx6                            01:00003DCE
dcx7                            01:00003DC8
dcx8                            01:00003DE4
dcx9                            01:00003DFA
dly3s1                          01:00000134
dly3s2                          01:00000132
doBackspace                     01:00003E8E
doCtrlX                         01:00003ED8
doDelete                        01:00003E9C
do_nothing                      01:00000086
dspj1                           01:00003FCA
dspmem1                         01:00004A50
dspspc1                         01:00004B0C
dsret                           01:00003FD8
edtmem1                         01:000049C2
fgcolor                         00:00000400
fmem1                           01:0000498E
fmemB                           01:0000499E
fmemL                           01:00004984
fmemW                           01:00004994
get_screen_color                01:00003CCE
gthx3                           01:00004AFE
gthx5                           01:00004ADA
gthx6                           01:00004AEC
icc1                            01:00003F4E
ignBlanks                       01:000049A8
illegal_trap                    01:00004D18
irq_rout                        01:00004CEE
leds                             E:FD0FFF00
loop1                           01:00000048
loop2                           01:00000046
loop3                           01:00003D24
msg_bad_branch_disp             01:00004D68
msg_core_start                  01:00004D46
msg_illegal                     01:00004D56
msg_start                       01:00004D2E
op_ABCD                         01:000024E0
op_ADD                          01:00002E70
op_ADDA                         01:00003044
op_ADDQ                         01:00002870
op_ADDX                         01:000030DC
op_ADD_I                        01:00001548
op_AND                          01:00002B8E
op_ANDI_TO_CCR                  01:000002EE
op_ANDI_TO_SR                   01:00000314
op_BCC                          01:000027A2
op_BCHG                         01:000006EE
op_BCLR                         01:00000A56
op_BOOL_I                       01:00001178
op_BSET                         01:00000DA4
op_BSR                          01:0000132A
op_BTST                         01:00000344
op_BTST0                        01:000004CE
op_BTST1                        01:000004DA
op_BTST10                       01:00000522
op_BTST11                       01:0000052A
op_BTST12                       01:00000530
op_BTST2                        01:000004E2
op_BTST20                       01:00000688
op_BTST21                       01:00000692
op_BTST22                       01:00000698
op_BTST23                       01:0000069E
op_BTST24                       01:000006A4
op_BTST25                       01:000006AA
op_BTST26                       01:000006B0
op_BTST27                       01:000006B6
op_BTST28                       01:000006BC
op_BTST29                       01:000006C2
op_BTST3                        01:000004EA
op_BTST30                       01:000006C8
op_BTST31                       01:000006CE
op_BTST32                       01:000006D2
op_BTST4                        01:000004F2
op_BTST5                        01:000004FA
op_BTST6                        01:00000502
op_BTST7                        01:0000050A
op_BTST8                        01:00000512
op_BTST9                        01:0000051A
op_CHK                          01:00001DFA
op_CMP                          01:00002CEE
op_CMPA                         01:00002D64
op_CMPM                         01:00002DCA
op_CMP_I                        01:00001360
op_DBCC                         01:00002822
op_DIVS                         01:00002A52
op_DIVU                         01:00002A00
op_EOR                          01:00002C78
op_EORI_TO_CCR                  01:00000296
op_EORI_TO_SR                   01:000002BE
op_EXG                          01:00003394
op_EXT                          01:00001C78
op_LEAPEA                       01:00001CBA
op_LINKS                        01:00001DCC
op_MOVE                         01:00001854
op_MOVEM                        01:000021C2
op_MOVEP                        01:000010EC
op_MOVEQ                        01:000029E4
op_MOVE_USP                     01:00001DEA
op_MOVE_xxx_FLAGS               01:00001A60
op_MULS                         01:00003348
op_MULU                         01:000032FC
op_NBCD                         01:000026D0
op_NEGS                         01:00001E34
op_OR                           01:00002AA4
op_ORI_TO_CCR                   01:00000248
op_ORI_TO_SR                    01:0000026C
op_ROXx                         01:00003638
op_ROx                          01:00003402
op_RTR                          01:0000277E
op_SBCD                         01:000025D8
op_SCC                          01:00002848
op_SHIFTS                       01:0000386E
op_SHIFTS2                      01:00003AB0
op_SUB                          01:00002F5A
op_SUBA                         01:00003090
op_SUBQ                         01:0000292A
op_SUBX                         01:000031EC
op_SUB_I                        01:000016CE
op_SWAP                         01:00001CA4
op_TAS                          01:00001D68
op_TRAPV                        01:00002762
op_TST                          01:00001D8E
pcssxa                          01:00004BC4
sGetChar                        01:00004CA6
semamem                          E:FD050000
start                           01:00000000
start_other                     01:0000005A

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 ACIA_RX
00000000 start
00000003 CTRLC
00000004 ACIA_STAT
00000008 CTRLH
0000000A LF
0000000D CR
0000000D SC_TAB
00000011 SC_ALT
00000012 SC_LSHIFT
00000014 SC_CTRL
00000018 CTRLX
00000046 loop2
00000048 loop1
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
0000005A start_other
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
00000086 do_nothing
0000008A InitSemaphores
000000B0 TestSemaphore
000000CC IncrementSemaphore
000000E0 SC_EXTEND
000000E4 DecrementSemaphore
000000F0 SC_KEYUP
000000FE LockSemaphore
00000104 UnlockSemaphore
00000124 Delay3s
00000132 dly3s2
00000134 dly3s1
00000148 cpu_test
0000021E ALL_DONE
00000220 BSR_FAR1
00000230 EXCEPTION_6
00000240 EXCEPTION_7
00000248 op_ORI_TO_CCR
0000026C op_ORI_TO_SR
00000296 op_EORI_TO_CCR
000002BE op_EORI_TO_SR
000002EE op_ANDI_TO_CCR
00000314 op_ANDI_TO_SR
00000344 op_BTST
00000400 const_tbl
00000400 fgcolor
00000404 bkcolor
00000408 CursorRow
00000409 CursorCol
0000040A TextRows
0000040B TextCols
0000040C TextPos
0000040C TextCurpos
00000410 TextScr
00000414 S19StartAddress
00000418 KeybdEcho
00000419 KeybdWaitFlag
0000041A KeybdLEDs
0000041B _KeyState1
0000041C _KeyState2
0000041D CmdBuf
0000041E CmdBufEnd
000004CE op_BTST0
000004DA op_BTST1
000004E2 op_BTST2
000004EA op_BTST3
000004F2 op_BTST4
000004FA op_BTST5
00000502 op_BTST6
0000050A op_BTST7
00000512 op_BTST8
0000051A op_BTST9
00000522 op_BTST10
0000052A op_BTST11
00000530 op_BTST12
00000688 op_BTST20
00000692 op_BTST21
00000698 op_BTST22
0000069E op_BTST23
000006A4 op_BTST24
000006AA op_BTST25
000006B0 op_BTST26
000006B6 op_BTST27
000006BC op_BTST28
000006C2 op_BTST29
000006C8 op_BTST30
000006CE op_BTST31
000006D2 op_BTST32
000006EE op_BCHG
00000A56 op_BCLR
00000DA4 op_BSET
000010EC op_MOVEP
00001178 op_BOOL_I
00001322 BSR_CLOSE1
0000132A op_BSR
00001358 BSR_CLOSE2
00001360 op_CMP_I
00001548 op_ADD_I
000016CE op_SUB_I
00001854 op_MOVE
00001920 MOVE2
0000199C MOVE1
00001A1C MOVE3
00001A60 op_MOVE_xxx_FLAGS
00001B76 MOVE4
00001C78 op_EXT
00001CA4 op_SWAP
00001CBA op_LEAPEA
00001D52 LEA1
00001D68 op_TAS
00001D8E op_TST
00001DCC op_LINKS
00001DEA op_MOVE_USP
00001DFA op_CHK
00001E34 op_NEGS
000021C2 op_MOVEM
000024E0 op_ABCD
00002500 ABCD_OUTER1
00002502 ABCD_INNER1
0000251E ABCD_NO_C1
00002526 ABCD_NO_C2
0000256E ABCD_OUTER2
00002570 ABCD_INNER2
0000258C ABCD_NO_C3
00002594 ABCD_NO_C4
000025D8 op_SBCD
000025F8 SBCD_OUTER1
000025FA SBCD_INNER1
00002616 SBCD_NO_C1
0000261E SBCD_NO_C2
00002666 SBCD_OUTER2
00002668 SBCD_INNER2
00002684 SBCD_NO_C3
0000268C SBCD_NO_C4
000026D0 op_NBCD
000026E8 NBCD_LOOP
000026F4 NBCD_NO_C
000026F8 NBCD_NO_Z
0000272E NBCD_LOOP1
00002742 NBCD_NO_C1
00002746 NBCD_NO_Z1
00002762 op_TRAPV
0000277E op_RTR
0000278C RTR_DONE
0000279A BSR_FAR2
000027A2 op_BCC
000027AA BCC1
000027B4 BCC2
000027BC BCC3
000027C6 BCC4
000027CE BCC5
000027D8 BCC6
000027E0 BCC7
000027EA BCC8
000027F2 BCC9
000027FC BCC10
00002804 BCC11
0000280E BCC12
00002816 BCC13
00002820 BCC14
00002822 op_DBCC
0000282A DBCC_LOOP1
00002838 DBCC_LOOP2
00002848 op_SCC
00002870 op_ADDQ
00002884 ADDQ_LOOP1
000028C2 ADDQ_LOOP2
000028F8 ADDQ_LOOP3
0000292A op_SUBQ
00002942 SUBQ_LOOP1
0000297C SUBQ_LOOP2
000029B2 SUBQ_LOOP3
000029E4 op_MOVEQ
00002A00 op_DIVU
00002A1C DIVU_OUTER1
00002A52 op_DIVS
00002A6E DIVS_OUTER1
00002AA4 op_OR
00002AC4 OR_OUTER1
00002B38 OR_OUTER2
00002B8E op_AND
00002BAE AND_OUTER1
00002C22 AND_OUTER2
00002C78 op_EOR
00002C98 EOR_OUTER2
00002CEE op_CMP
00002D0E CMP_OUTER1
00002D64 op_CMPA
00002D84 CMPA_OUTER1
00002DCA op_CMPM
00002E12 CMPM_LOOP1
00002E2C CMPM_LOOP2
00002E46 CMPM_LOOP3
00002E70 op_ADD
00002E90 ADD_OUTER1
00002F04 ADD_OUTER2
00002F5A op_SUB
00002F7A SUB_OUTER1
00002FEE SUB_OUTER2
00003044 op_ADDA
0000306A ADDA_OUTER1
00003090 op_SUBA
000030B6 SUBA_OUTER1
000030DC op_ADDX
000030FC ADDX_OUTER1
00003190 ADDX_LOOP3
000031AC ADDX_LOOP4
000031C8 ADDX_LOOP5
000031EC op_SUBX
0000320C SUBX_OUTER1
000032A0 SUBX_LOOP3
000032BC SUBX_LOOP4
000032D8 SUBX_LOOP5
000032FC op_MULU
00003318 MULU_OUTER1
00003348 op_MULS
00003364 MULS_OUTER1
00003394 op_EXG
000033F6 ROx_FLAGS
00003402 op_ROx
0000340C ROx_LOOP1
0000342C ROx_LOOP2
0000344C ROx_LOOP3
0000346C ROx_LOOP4
0000348C ROx_LOOP5
000034AE ROx_LOOP6
0000362C ROXx_FLAGS
00003638 op_ROXx
00003642 ROXx_LOOP1
00003662 ROXx_LOOP2
00003682 ROXx_LOOP3
000036A2 ROXx_LOOP4
000036C2 ROXx_LOOP5
000036E4 ROXx_LOOP6
00003862 SHIFTS_FLAGS
0000386E op_SHIFTS
00003878 SHIFTS_LOOP1
00003898 SHIFTS_LOOP2
000038B8 SHIFTS_LOOP3
000038D8 SHIFTS_LOOP4
000038F8 SHIFTS_LOOP5
0000391A SHIFTS_LOOP6
00003AA4 SHIFTS2_FLAGS
00003AB0 op_SHIFTS2
00003ABA SHIFTS2_LOOP1
00003AD6 SHIFTS2_LOOP2
00003AF2 SHIFTS2_LOOP3
00003B0E SHIFTS2_LOOP4
00003B2A SHIFTS2_LOOP5
00003B48 SHIFTS2_LOOP6
00003CCE get_screen_color
00003CFA clear_screen
00003D24 loop3
00003D3E CRLF
00003D50 UpdateTextPos
00003D78 CalcScreenLoc
00003D88 DisplayChar
00003DA8 dccr
00003DC4 dcx14
00003DC8 dcx7
00003DCE dcx6
00003DE4 dcx8
00003DFA dcx9
00003E18 dcx10
00003E2E dcx12
00003E36 dcx11
00003E7C dclf
00003E80 dcx16
00003E84 dcx4
00003E8E doBackspace
00003E9C doDelete
00003ED8 doCtrlX
00003EFC IncCursorPos
00003F1C IncCursorRow
00003F4E icc1
00003F50 ScrollUp
00003F82 BlankLastLine
00003FC6 DisplayString
00003FCA dspj1
00003FD8 dsret
00003FDE DisplayStringCRLF
00003FE4 HomeCursor
00003FF6 SyncCursor
0000400C TRAP15
00004024 T15DispatchTable
000040C4 StubRout
000040C4 Cursor1
000040C6 _KeybdInit
000040D4 _KeybdGetStatus
000040DC _KeybdGetScancode
000040EC KeybdRecvByte
0000410C KeybdWaitTx
00004132 SetKeyboardEcho
0000413A CheckForKey
00004148 cfk1
0000414C GetKey
000041C8 CheckForCtrlC
000041DA KeybdGetCharNoWait
000041E2 KeybdGetCharWait
000041EA KeybdGetChar
000043A8 KeybdSetLEDStatus
00004414 KeybdSendByte
0000441C Wait10ms
0000442C _unshiftedScanCodes
0000452C _shiftedScanCodes
0000462C _keybdControlCodes
000046AC _keybdExtendedCodes
0000472C FromScreen
00004738 StartMon
00004738 Monitor
00004744 PromptLn
00004750 Prompt3
00004760 Prompt1
00004772 Prompt2
000047D8 TestCLS
00004800 DisplayHelp
0000480C HelpMsg
000048BE GetCmdLine
00004962 FillMem
00004984 fmemL
0000498E fmem1
00004994 fmemW
0000499E fmemB
000049A8 ignBlanks
000049BA EditMem
000049C2 edtmem1
00004A06 ExecuteCode
00004A14 DumpMem
00004A2E DumpMem1
00004A40 DisplayMem
00004A50 dspmem1
00004A9C GetHexNumber
00004AC8 AsciiToHexNybble
00004ADA gthx5
00004AEC gthx6
00004AFE gthx3
00004B02 DisplayTwoSpaces
00004B0C dspspc1
00004B14 DisplaySpace
00004B1C DisplayTetra
00004B22 DisplayWyde
00004B28 DisplayByte
00004B2E DisplayNybble
00004B48 LoadS19
00004B4A NextRec
00004B54 ProcessRec
00004BC4 pcssxa
00004C08 ProcessS1
00004C0C ProcessS2
00004C10 ProcessS3
00004C14 ProcessS7
00004C20 ProcessS8
00004C2C ProcessS9
00004C38 S19Get16BitAddress
00004C44 S19Get24BitAddress
00004C50 S19Get32BitAddress
00004C6E S1932a
00004C82 S1932b
00004CA6 sGetChar
00004CC2 AudioInputTest
00004CC4 BouncingBalls
00004CC6 GraphicsDemo
00004CC8 ClearScreen
00004CCE AUXIN
00004CCE SerialPeekCharDirect
00004CEE irq_rout
00004CFE brdisp_trap
00004D18 illegal_trap
00004D2E msg_start
00004D46 msg_core_start
00004D56 msg_illegal
00004D68 msg_bad_branch_disp
00100000 IOFocus

Sections:
00: "DATA" (0-420)
01: "CODE" (0-48EC)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+
                            	     7: ;          | startup sp,pc  | 8 B
                            	     8: ; 00000008 +----------------+
                            	     9: ;					 |    vectors     |
                            	    10: ; 00000400 +----------------+
                            	    11: ;					 |   bios mem     |
                            	    12: ; 00000800 +----------------+
                            	    13: ;					 |   bios code    |
                            	    14: ; 00008000 +----------------+
                            	    15: ;					 |    unused      |
                            	    16: ; 20000000 +----------------+
                            	    17: ;          |                |
                            	    18: ;          |                |
                            	    19: ;          |                |
                            	    20: ;          :  dram memory   : 512 MB
                            	    21: ;          |                |
                            	    22: ;          |                |
                            	    23: ;          |                |
                            	    24: ; 40000000 +----------------+
                            	    25: ;          |                |
                            	    26: ;          :     unused     :
                            	    27: ;          |                |
                            	    28: ; FFD00000 +----------------+
                            	    29: ;          |                |
                            	    30: ;          :    I/O area    : 1.0 M
                            	    31: ;          |                |
                            	    32: ; FFE00000 +----------------+
                            	    33: ;          |                |
                            	    34: ;          :     unused     :
                            	    35: ;          |                |
                            	    36: ; FFFFFFE0 +----------------+
                            	    37: ;          | special regs   |
                            	    38: ; FFFFFFFF +----------------+
                            	    39: ;
                            	    40: ;-------------------------------------------------------------------------------
                            	    41: ;
                            	    42: CTRLC	EQU		$03
                            	    43: CTRLH	EQU		$08
                            	    44: CTRLX	EQU		$18
                            	    45: LF		EQU		$0A
                            	    46: CR		EQU		$0D
                            	    47: 
                            	    48: SC_F12  EQU    $07
                            	    49: SC_C    EQU    $21
                            	    50: SC_T    EQU    $2C
                            	    51: SC_Z    EQU    $1A
                            	    52: SC_KEYUP	EQU		$F0
                            	    53: SC_EXTEND   EQU		$E0
                            	    54: SC_CTRL		EQU		$14
                            	    55: SC_RSHIFT	EQU		$59
                            	    56: SC_NUMLOCK	EQU		$77
                            	    57: SC_SCROLLLOCK	EQU	$7E
                            	    58: SC_CAPSLOCK		EQU	$58
                            	    59: SC_ALT		EQU		$11
                            	    60: SC_LSHIFT	EQU		$12
                            	    61: SC_DEL		EQU		$71		; extend
                            	    62: SC_LCTRL	EQU		$58
                            	    63: SC_TAB      EQU		$0D
                            	    64: 
                            	    65: TEXTREG		EQU	$FD01FF00
                            	    66: txtscreen	EQU	$FD000000
                            	    67: leds			EQU	$FD0FFF00
                            	    68: keybd			EQU	$FD0FFE00
                            	    69: KEYBD			EQU	$FD0FFE00
                            	    70: rand			EQU	$FD0FFD00
                            	    71: 
                            	    72: 	data
00:00000000 0001FFFC        	    73: 	dc.l		$0001FFFC
00:00000004 00000000        	    74: 	dc.l		start
00:00000008 00000000        	    75: 	dc.l		0
00:0000000C 00000000        	    76: 	dc.l		0
00:00000010 00000000        	    77: 	dc.l		0
00:00000014 00000000        	    78: 	dc.l		0
00:00000018 00000160        	    79: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000170        	    80: 	dc.l		EXCEPTION_7			* TRAPV
                            	    81: 
                            	    82: 	align		10
00:00000400 00000000        	    83: 	dc.l		0
                            	    84: fgcolor:
00:00000404 001FFFFF        	    85: 	dc.l		$1fffff					; white
                            	    86: bkcolor:
00:00000408 0000003F        	    87: 	dc.l		$00003f					; dark blue
                            	    88: CursorRow
00:0000040C 00              	    89: 	dc.b		$00
                            	    90: CursorCol
00:0000040D 00              	    91: 	dc.b		$00
                            	    92: TextRows
00:0000040E 20              	    93: 	dc.b		32
                            	    94: TextCols
00:0000040F 40              	    95: 	dc.b		64
                            	    96: TextPos
                            	    97: TextCurpos
00:00000410 0000            	    98: 	dc.w		$00
00:00000412 0000            	    99: 	dc.w		0
                            	   100: TextScr
00:00000414 FD000000        	   101: 	dc.l		$FD000000
                            	   102: KeybdEcho
00:00000418 00              	   103: 	dc.b		0
                            	   104: KeybdWaitFlag
00:00000419 00              	   105: 	dc.b		0
                            	   106: KeybdLEDs
00:0000041A 00              	   107: 	dc.b		0
                            	   108: _KeyState1
00:0000041B 00              	   109: 	dc.b		0
                            	   110: _KeyState2
00:0000041C 00              	   111: 	dc.b		0
                            	   112: CmdBuf:
00:0000041D 00              	   113: 	dc.b		0
                            	   114: CmdBufEnd:
00:0000041E 00              	   115: 	dc.b		0
                            	   116: DisplayMem:
00:0000041F 00              	   117: 	dc.b		0
                            	   118: 
                            	   119: 
                            	   120: ;-------------------------------------------------------------------------------
                            	   121: ;-------------------------------------------------------------------------------
                            	   122: 
                            	   123: 	code
                            	   124: start:
01:00000000 2038FFE0        	   125: 	move.l	$FFFFFFE0,d0		; get core number
01:00000004 0C000002        	   126: 	cmpi.b	#2,d0
01:00000008 6642            	   127: 	bne			do_nothing
01:0000000A 6142            	   128: 	bsr			Delay3s					; give devices time to reset
01:0000000C 61003C6C        	   129: 	bsr			clear_screen
01:00000010 42390000040D    	   130: 	clr.b		CursorCol
01:00000016 42390000040C    	   131: 	clr.b		CursorRow
01:0000001C 427900000410    	   132: 	clr.w		TextCurpos
                            	   133: 
                            	   134: 	; Write startup message to screen
                            	   135: 
01:00000022 43FA48B0        	   136: 	lea			msg_start,a1
01:00000026 61003EF2        	   137: 	bsr			DisplayString
01:0000002A 33FCA4A4FD0FFF00	   138: 	move.w	#$A4A4,leds			; diagnostics
01:00000032 6000451C        	   139: 	bra			Monitor
01:00000036 613A            	   140: 	bsr			cpu_test
                            	   141: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   142: ;	move.l	a0,64*4
                            	   143: 
                            	   144: loop2:
01:00000038 70FF            	   145: 	move.l	#-1,d0
                            	   146: loop1:
01:0000003A 2200            	   147: 	move.l	d0,d1
01:0000003C E089            	   148: 	lsr.l		#8,d1
01:0000003E E089            	   149: 	lsr.l		#8,d1
01:00000040 13C1FD0FFF00    	   150: 	move.b	d1,leds
01:00000046 51C8FFF2        	   151: 	dbra		d0,loop1
01:0000004A 60EC            	   152: 	bra			loop2
                            	   153: do_nothing:
01:0000004C 60FE            	   154: 	bra			do_nothing
                            	   155: 
                            	   156: ; -----------------------------------------------------------------------------
                            	   157: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   158: ; -----------------------------------------------------------------------------
                            	   159: 
                            	   160: Delay3s:
01:0000004E 203C002DC6C0    	   161: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:00000054 41F9FD0FFF00    	   162: 	lea			leds,a0				; a0 = address of LED output register
01:0000005A 6002            	   163: 	bra			dly3s1				; branch to the loop
                            	   164: dly3s2:	
01:0000005C 4840            	   165: 	swap		d0						; loop is larger than 16-bits
                            	   166: dly3s1:
01:0000005E 2200            	   167: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:00000060 E199            	   168: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:00000062 E199            	   169: 	rol.l		#8,d1
01:00000064 1081            	   170: 	move.b	d1,(a0)				; set the LEDs
01:00000066 51C8FFF6        	   171: 	dbra		d0,dly3s1			; decrement and branch back
01:0000006A 4840            	   172: 	swap		d0
01:0000006C 51C8FFEE        	   173: 	dbra		d0,dly3s2
01:00000070 4E75            	   174: 	rts
                            	   175: 
                            	   176: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
01:00000072 61000FE8        	    84: 	bsr op_MOVEP
01:00000076 61000100        	    85: 	bsr	op_ORI_TO_CCR
01:0000007A 6100011E        	    86: 	bsr	op_ORI_TO_SR
01:0000007E 6100013C        	    87: 	bsr	op_EORI_TO_CCR
01:00000082 6100015E        	    88: 	bsr	op_EORI_TO_SR
01:00000086 61000180        	    89: 	bsr	op_ANDI_TO_CCR
01:0000008A 610001A2        	    90: 	bsr	op_ANDI_TO_SR
01:0000008E 610001C4        	    91: 	bsr	op_BTST
01:00000092 6100056A        	    92: 	bsr	op_BCHG
01:00000096 610008CE        	    93: 	bsr	op_BCLR
01:0000009A 61000C1A        	    94: 	bsr	op_BSET
01:0000009E 61000FBC        	    95: 	bsr op_MOVEP
01:000000A2 6100104C        	    96: 	bsr op_BOOL_I
01:000000A6 61001244        	    97: 	bsr op_CMP_I
01:000000AA 6100142C        	    98: 	bsr op_ADD_I
01:000000AE 610015AE        	    99: 	bsr op_SUB_I
01:000000B2 61001730        	   100: 	bsr op_MOVE
01:000000B6 61001938        	   101: 	bsr op_MOVE_xxx_FLAGS
01:000000BA 61001B28        	   102: 	bsr op_EXT
01:000000BE 61001B50        	   103: 	bsr op_SWAP
01:000000C2 61001B62        	   104: 	bsr op_LEAPEA
01:000000C6 61001C0A        	   105: 	bsr op_TAS
01:000000CA 61001C2E        	   106: 	bsr op_TST
01:000000CE 61001C70        	   107: 	bsr op_LINKS
01:000000D2 61001C8A        	   108: 	bsr op_MOVE_USP
                            	   109: *	bsr op_CHK
01:000000D6 61001CD0        	   110: 	bsr op_NEGS
01:000000DA 6100205A        	   111: 	bsr op_MOVEM
                            	   112: ** fails
                            	   113: *	bsr op_ABCD
                            	   114: *	bsr op_SBCD
                            	   115: *	bsr op_NBCD
                            	   116: *	bsr op_TRAPV
01:000000DE 6100261E        	   117: 	bsr op_RTR
01:000000E2 610011D2        	   118: 	bsr op_BSR
01:000000E6 6100263A        	   119: 	bsr op_BCC
01:000000EA 610026B6        	   120: 	bsr op_DBCC
01:000000EE 610026D8        	   121: 	bsr op_SCC
01:000000F2 610026FC        	   122: 	bsr op_ADDQ
01:000000F6 610027B2        	   123: 	bsr op_SUBQ
01:000000FA 61002868        	   124: 	bsr op_MOVEQ
                            	   125: *** fails
                            	   126: *	bsr op_DIVU
                            	   127: *	bsr op_DIVS
01:000000FE 61002924        	   128: 	bsr op_OR
01:00000102 61002A0A        	   129: 	bsr op_AND
01:00000106 61002AF0        	   130: 	bsr op_EOR
01:0000010A 61002B62        	   131: 	bsr op_CMP
01:0000010E 61002BD4        	   132: 	bsr op_CMPA
01:00000112 61002C36        	   133: 	bsr op_CMPM
01:00000116 61002CD8        	   134: 	bsr op_ADD
01:0000011A 61002DBE        	   135: 	bsr op_SUB
01:0000011E 61002EA4        	   136: 	bsr op_ADDA
01:00000122 61002EEC        	   137: 	bsr op_SUBA
01:00000126 61002F34        	   138: 	bsr op_ADDX
01:0000012A 61003040        	   139: 	bsr op_SUBX
01:0000012E 6100314C        	   140: 	bsr op_MULU
01:00000132 61003194        	   141: 	bsr op_MULS
01:00000136 610031DC        	   142: 	bsr op_EXG
01:0000013A 61003246        	   143: 	bsr op_ROx
01:0000013E 61003478        	   144: 	bsr op_ROXx
01:00000142 610036AA        	   145: 	bsr op_SHIFTS
01:00000146 610038E8        	   146: 	bsr op_SHIFTS2
                            	   147: 
01:0000014A 4E75            	   148: 	rts
                            	   149: 	bra ALL_DONE
                            	   150: 
                            	   151: * Loop here when all tests pass
                            	   152: *
                            	   153: 
01:0000014C 60FE            	   154: ALL_DONE: bra.s ALL_DONE
                            	   155: 
01:0000014E 263C33333333    	   156: BSR_FAR1:       move.l #$33333333,d3
01:00000154 4E75            	   157:                 rts
                            	   158: 
                            	   159: ;	moveq		#-1,d0
                            	   160: ;	move.l	d0,$FD0FFF00
                            	   161: ;do_nothing:
                            	   162: ;	bra			*		
                            	   163: 
                            	   164: 
                            	   165: * Exception Vector = 6   CHK Instruction
                            	   166: *
                            	   167: 	align	4
                            	   168: EXCEPTION_6:
01:00000160 2C3CEEEE0006    	   169: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000166 4E73            	   170: 	rte
                            	   171: 
                            	   172: * Exception Vector = 7   TRAPV Instruction
                            	   173: *
                            	   174: 	align	4
                            	   175: EXCEPTION_7:
01:00000170 203C12345678    	   176: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000176 4E73            	   177: 	rte
                            	   178: 
                            	   179: ;-----------------------------------------------------------
                            	   180: ;-----------------------------------------------------------
                            	   181: ; OPCODE : ORI_TO_CCR
                            	   182: ;-----------------------------------------------------------
                            	   183: ;-----------------------------------------------------------
                            	   184: op_ORI_TO_CCR:
                            	   185: 
01:00000178 003C00FF        	   186:     ori.b #$FF,CCR
01:0000017C 6AFE            	   187:     bpl.s *                   ; branch if Z clear
01:0000017E 66FE            	   188:     bne.s *                   ; branch if N clear
01:00000180 68FE            	   189:     bvc.s *                   ; branch if V clear
01:00000182 64FE            	   190:     bcc.s *                   ; branch if C clear
                            	   191: 
01:00000184 44FC0000        	   192:     move #$00,CCR
01:00000188 003C0000        	   193:     ori.b #$00,CCR
01:0000018C 67FE            	   194:     beq.s *                   ; branch if Z set
01:0000018E 6BFE            	   195:     bmi.s *                   ; branch if N set
01:00000190 69FE            	   196:     bvs.s *                   ; branch if V set
01:00000192 65FE            	   197:     bcs.s *                   ; branch if C set
                            	   198: 
01:00000194 46FC2700        	   199:     move #$2700,SR          ; Put flags back to initial value
                            	   200: 
01:00000198 4E75            	   201:     rts
                            	   202: 
                            	   203: ;-----------------------------------------------------------
                            	   204: ;-----------------------------------------------------------
                            	   205: ; OPCODE : ORI_TO_SR
                            	   206: ;-----------------------------------------------------------
                            	   207: ;-----------------------------------------------------------
                            	   208: 
                            	   209: op_ORI_TO_SR:
                            	   210: 
01:0000019A 007C2FFF        	   211:     ori.w #$2FFF,SR
01:0000019E 6AFE            	   212:     bpl.s *                   * branch if Z clear
01:000001A0 66FE            	   213:     bne.s *                   * branch if N clear
01:000001A2 68FE            	   214:     bvc.s *                   * branch if V clear
01:000001A4 64FE            	   215:     bcc.s *                   * branch if C clear
                            	   216: 
01:000001A6 46FC2000        	   217:     move #$2000,SR
01:000001AA 007C0000        	   218:     ori.w #$0000,SR
01:000001AE 67FE            	   219:     beq.s *                   * branch if Z set
01:000001B0 6BFE            	   220:     bmi.s *                   * branch if N set
01:000001B2 69FE            	   221:     bvs.s *                   * branch if V set
01:000001B4 65FE            	   222:     bcs.s *                   * branch if C set
                            	   223: 
01:000001B6 46FC2700        	   224:     move #$2700,SR         * Put flags back to initial value
                            	   225: 
01:000001BA 4E75            	   226:     rts
                            	   227: ; 
                            	   228: ;-----------------------------------------------------------
                            	   229: ;-----------------------------------------------------------
                            	   230: ; OPCODE : EORI_TO_CCR
                            	   231: ;-----------------------------------------------------------
                            	   232: ;-----------------------------------------------------------
                            	   233: op_EORI_TO_CCR:
                            	   234: 
01:000001BC 44FC0000        	   235:     move #$00,CCR
01:000001C0 0A3C00FF        	   236:     eori.b #$FF,CCR
01:000001C4 6AFE            	   237:     bpl.s *                   ; branch if Z clear
01:000001C6 66FE            	   238:     bne.s *                   ; branch if N clear
01:000001C8 68FE            	   239:     bvc.s *                   ; branch if V clear
01:000001CA 64FE            	   240:     bcc.s *                   ; branch if C clear
                            	   241: 
01:000001CC 44FC0000        	   242:     move #$00,CCR
01:000001D0 0A3C0000        	   243:     eori.b #$00,CCR
01:000001D4 67FE            	   244:     beq.s *                   ; branch if Z set
01:000001D6 6BFE            	   245:     bmi.s *                   ; branch if N set
01:000001D8 69FE            	   246:     bvs.s *                   ; branch if V set
01:000001DA 65FE            	   247:     bcs.s *                   ; branch if C set
                            	   248: 
01:000001DC 46FC2700        	   249:     move #$2700,SR           ; Put flags back to initial value
                            	   250: 
01:000001E0 4E75            	   251:     rts
                            	   252: 
                            	   253: 
                            	   254: 
                            	   255: *-----------------------------------------------------------
                            	   256: *-----------------------------------------------------------
                            	   257: * OPCODE : EORI_TO_SR
                            	   258: *-----------------------------------------------------------
                            	   259: *-----------------------------------------------------------
                            	   260: op_EORI_TO_SR:
                            	   261: 
01:000001E2 46FC2000        	   262:     move #$2000,SR
01:000001E6 0A7C0FFF        	   263:     eori.w #$0FFF,SR
01:000001EA 6AFE            	   264:     bpl.s *                   * branch if Z clear
01:000001EC 66FE            	   265:     bne.s *                   * branch if N clear
01:000001EE 68FE            	   266:     bvc.s *                   * branch if V clear
01:000001F0 64FE            	   267:     bcc.s *                   * branch if C clear
                            	   268: 
01:000001F2 46FC2000        	   269:     move #$2000,SR
01:000001F6 0A7C0000        	   270:     eori.w #$0000,SR
01:000001FA 67FE            	   271:     beq.s *                   * branch if Z set
01:000001FC 6BFE            	   272:     bmi.s *                   * branch if N set
01:000001FE 69FE            	   273:     bvs.s *                   * branch if V set
01:00000200 65FE            	   274:     bcs.s *                   * branch if C set
                            	   275: 
01:00000202 46FC2700        	   276:     move #$2700,SR          * Put flags back to initial value
                            	   277: 
01:00000206 4E75            	   278:     rts
                            	   279: 
                            	   280: 
                            	   281: 
                            	   282: *-----------------------------------------------------------
                            	   283: *-----------------------------------------------------------
                            	   284: * OPCODE : ANDI_TO_CCR
                            	   285: *-----------------------------------------------------------
                            	   286: *-----------------------------------------------------------
                            	   287: op_ANDI_TO_CCR:
                            	   288: 
01:00000208 44FC00FF        	   289:     move #$FF,CCR
01:0000020C 023C00FF        	   290:     andi.b #$FF,CCR
01:00000210 6AFE            	   291:     bpl.s *                   * branch if Z clear
01:00000212 66FE            	   292:     bne.s *                   * branch if N clear
01:00000214 68FE            	   293:     bvc.s *                   * branch if V clear
01:00000216 64FE            	   294:     bcc.s *                   * branch if C clear
                            	   295: 
01:00000218 44FC00FF        	   296:     move #$FF,CCR
01:0000021C 023C0000        	   297:     andi.b #$00,CCR
01:00000220 67FE            	   298:     beq.s *                   * branch if Z set
01:00000222 6BFE            	   299:     bmi.s *                   * branch if N set
01:00000224 69FE            	   300:     bvs.s *                   * branch if V set
01:00000226 65FE            	   301:     bcs.s *                   * branch if C set
                            	   302: 
01:00000228 46FC2700        	   303:     move #$2700,SR           * Put flags back to initial value
                            	   304: 
01:0000022C 4E75            	   305:     rts
                            	   306: 
                            	   307: 
                            	   308: 
                            	   309: *-----------------------------------------------------------
                            	   310: *-----------------------------------------------------------
                            	   311: * OPCODE : ANDI_TO_SR
                            	   312: *-----------------------------------------------------------
                            	   313: *-----------------------------------------------------------
                            	   314: op_ANDI_TO_SR:
01:0000022E 46FC20FF        	   315:     move #$20FF,SR
01:00000232 027CFFFF        	   316:     andi.w #$FFFF,SR
01:00000236 6AFE            	   317:     bpl.s *                   * branch if Z clear
01:00000238 66FE            	   318:     bne.s *                   * branch if N clear
01:0000023A 68FE            	   319:     bvc.s *                   * branch if V clear
01:0000023C 64FE            	   320:     bcc.s *                   * branch if C clear
                            	   321: 
01:0000023E 46FC20FF        	   322:     move #$20FF,SR
01:00000242 027CFF00        	   323:     andi.w #$FF00,SR
01:00000246 67FE            	   324:     beq.s *                   * branch if Z set
01:00000248 6BFE            	   325:     bmi.s *                   * branch if N set
01:0000024A 69FE            	   326:     bvs.s *                   * branch if V set
01:0000024C 65FE            	   327:     bcs.s *                   * branch if C set
                            	   328: 
01:0000024E 46FC2700        	   329:     move #$2700,SR           * Put flags back to initial value
                            	   330: 
01:00000252 4E75            	   331:     rts
                            	   332: 
                            	   333: 
                            	   334: *-----------------------------------------------------------
                            	   335: *-----------------------------------------------------------
                            	   336: * OPCODE : BTST
                            	   337: *-----------------------------------------------------------
                            	   338: *-----------------------------------------------------------
                            	   339: op_BTST:
                            	   340: 
                            	   341: *  Bit Number.s Static
                            	   342: 
                            	   343: *             EA = Dn  - LONG only
01:00000254 203C80000001    	   344:             move.l #$80000001,d0      * populate test data
01:0000025A 08000000        	   345:             btst.l #0,d0
01:0000025E 67FE            	   346:             beq.s *               * branch if Z set
01:00000260 08000001        	   347:             btst.l #1,d0              *
01:00000264 66FE            	   348:             bne.s *               * branch if Z clear
01:00000266 0800001F        	   349:             btst.l #31,d0             *
01:0000026A 67FE            	   350:             beq.s *               * branch if Z set
                            	   351: 
                            	   352: 
                            	   353: *             EA = (An)  - BYTE only
01:0000026C 307C0100        	   354:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000270 10BC0081        	   355:             move.b #$81,(a0)          * populate test data
01:00000274 1210            	   356:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000276 08100000        	   357:             btst.b #0,(a0)
01:0000027A 67FE            	   358:             beq.s *               * branch if Z set
01:0000027C 08100001        	   359:             btst.b #1,(a0)            *
01:00000280 66FE            	   360:             bne.s *               * branch if Z clear
01:00000282 08100007        	   361:             btst.b #7,(a0)            *
01:00000286 67FE            	   362:             beq.s *               * branch if Z set
                            	   363: 
                            	   364: 
                            	   365: *             EA = (An)+  - BYTE only
01:00000288 307C0100        	   366:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000028C 10FC0001        	   367:             move.b #$01,(a0)+         * populate test data
01:00000290 10FC00FC        	   368:             move.b #$FC,(a0)+         * populate test data
01:00000294 10FC0080        	   369:             move.b #$80,(a0)+         * populate test data
01:00000298 307C0100        	   370:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000029C 08180000        	   371:             btst.b #0,(a0)+
01:000002A0 67FE            	   372:             beq.s *               * branch if Z set
01:000002A2 08180001        	   373:             btst.b #1,(a0)+           *
01:000002A6 66FE            	   374:             bne.s *               * branch if Z clear
01:000002A8 08180007        	   375:             btst.b #7,(a0)+           *
01:000002AC 67FE            	   376:             beq.s *               * branch if Z set
                            	   377: 
                            	   378: 
                            	   379: *             EA = -(An)  - BYTE only
01:000002AE 307C0100        	   380:             move.l #$00000100,a0      * point to memory to address
01:000002B2 10FC0080        	   381:             move.b #$80,(a0)+         * populate test data
01:000002B6 10FC00FC        	   382:             move.b #$FC,(a0)+         * populate test data
01:000002BA 10FC0001        	   383:             move.b #$01,(a0)+         * populate test data
01:000002BE 307C0103        	   384:             move.l #$00000103,a0      * point to memory to address
01:000002C2 08200000        	   385:             btst.b #0,-(a0)
01:000002C6 67FE            	   386:             beq.s *               * branch if Z set
01:000002C8 08200001        	   387:             btst.b #1,-(a0)           *
01:000002CC 66FE            	   388:             bne.s *               * branch if Z clear
01:000002CE 08200007        	   389:             btst.b #7,-(a0)           *
01:000002D2 67FE            	   390:             beq.s *               * branch if Z set
                            	   391: 
                            	   392: 
                            	   393: *             EA = n(An)  - BYTE only
01:000002D4 307C0100        	   394:             move.l #$00000100,a0      * point to memory to address
01:000002D8 10FC0001        	   395:             move.b #$01,(a0)+         * populate test data
01:000002DC 10FC00FC        	   396:             move.b #$FC,(a0)+         * populate test data
01:000002E0 10FC0080        	   397:             move.b #$80,(a0)+         * populate test data
01:000002E4 307C0100        	   398:             move.l #$00000100,a0      * point to memory to address
01:000002E8 08100000        	   399:             btst.b #0,0(a0)
01:000002EC 67FE            	   400:             beq.s *               * branch if Z set
01:000002EE 082800010001    	   401:             btst.b #1,1(a0)           *
01:000002F4 66FE            	   402:             bne.s *               * branch if Z clear
01:000002F6 082800070002    	   403:             btst.b #7,2(a0)           *
01:000002FC 67FE            	   404:             beq.s *               * branch if Z set
                            	   405: 
                            	   406: 
                            	   407: *             EA = n(An,R.W)  - BYTE only
01:000002FE 307C0100        	   408:             move.l #$00000100,a0      * point to memory to address
01:00000302 93C9            	   409:             move.l #$00000000,a1      * point to memory to address
01:00000304 347C0001        	   410:             move.l #$00000001,a2      * point to memory to address
01:00000308 7000            	   411:             moveq  #$00000000,d0      * point to memory to address
01:0000030A 7201            	   412:             moveq  #$00000001,d1      * point to memory to address
01:0000030C 083000000000    	   413:             btst.b #0,0(a0,d0.w)
01:00000312 67FE            	   414:             beq.s *               * branch if Z set
01:00000314 083000011000    	   415:             btst.b #1,0(a0,d1.w)      *
01:0000031A 66FE            	   416:             bne.s *               * branch if Z clear
01:0000031C 083000071001    	   417:             btst.b #7,1(a0,d1.w)      *
01:00000322 67FE            	   418:             beq.s *               * branch if Z set
                            	   419: *             EA = n(An,R.L)  - BYTE only
01:00000324 083000000800    	   420:             btst.b #0,0(a0,d0.l)
01:0000032A 67FE            	   421:             beq.s *               * branch if Z set
01:0000032C 083000011800    	   422:             btst.b #1,0(a0,d1.l)      *
01:00000332 66FE            	   423:             bne.s *               * branch if Z clear
01:00000334 083000071801    	   424:             btst.b #7,1(a0,d1.l)      *
01:0000033A 67FE            	   425:             beq.s *               * branch if Z set
                            	   426: *             EA = n(An,A.W)  - BYTE only
01:0000033C 083000009000    	   427:             btst.b #0,0(a0,a1.w)
01:00000342 67FE            	   428:             beq.s *               * branch if Z set
01:00000344 08300001A000    	   429:             btst.b #1,0(a0,a2.w)      *
01:0000034A 66FE            	   430:             bne.s *               * branch if Z clear
01:0000034C 08300007A001    	   431:             btst.b #7,1(a0,a2.w)      *
01:00000352 67FE            	   432:             beq.s *               * branch if Z set
                            	   433: *             EA = n(An,A.L)  - BYTE only
01:00000354 083000009800    	   434:             btst.b #0,0(a0,a1.l)
01:0000035A 67FE            	   435:             beq.s *               * branch if Z set
01:0000035C 08300001A800    	   436:             btst.b #1,0(a0,a2.l)      *
01:00000362 66FE            	   437:             bne.s *               * branch if Z clear
01:00000364 08300007A801    	   438:             btst.b #7,1(a0,a2.l)      *
01:0000036A 67FE            	   439:             beq.s *               * branch if Z set
                            	   440: 
                            	   441: 
                            	   442: *             EA = x.W  - BYTE only
01:0000036C 083800000100    	   443:             btst.b #0,$0100
01:00000372 67FE            	   444:             beq.s *               * branch if Z set
01:00000374 083800010101    	   445:             btst.b #1,$0101           *
01:0000037A 66FE            	   446:             bne.s *               * branch if Z clear
01:0000037C 083800070102    	   447:             btst.b #7,$0102           *
01:00000382 67FE            	   448:             beq.s *               * branch if Z set
                            	   449: 
                            	   450: 
                            	   451: *             EA = x.L  - BYTE only
01:00000384 207C0000F100    	   452:             move.l #$F100,a0      * point to memory to address 0x100
01:0000038A 10FC0001        	   453:             move.b #$01,(a0)+         * populate test data
01:0000038E 10FC00FC        	   454:             move.b #$FC,(a0)+         * populate test data
01:00000392 10FC0080        	   455:             move.b #$80,(a0)+         * populate test data
01:00000396 083900000000F100	   456:             btst.b #0,$F100
01:0000039E 67FE            	   457:             beq.s *               * branch if Z set
01:000003A0 083900010000F101	   458:             btst.b #1,$F101       *
01:000003A8 66FE            	   459:             bne.s *               * branch if Z clear
01:000003AA 083900070000F102	   460:             btst.b #7,$F102       *
01:000003B2 67FE            	   461:             beq.s *               * branch if Z set
                            	   462: 
                            	   463: 
                            	   464: *             EA = x(PC)  - BYTE only
01:000003B4 4BFAFE9E        	   465:             lea op_BTST(pc),a5
01:000003B8 083A0000FE98    	   466:             btst.b #0,op_BTST(pc)
01:000003BE 66FE            	   467:             bne.s *               * branch if Z clear
01:000003C0 083A0003001A    	   468:             btst.b #3,op_BTST0(pc)     *
01:000003C6 67FE            	   469:             beq.s *               * branch if Z set
01:000003C8 083A00060074    	   470:             btst.b #6,op_BTST12(pc)    *
01:000003CE 67FE            	   471:             beq.s *               * branch if Z set
                            	   472: 
                            	   473: 
                            	   474: *             EA = n(PC,R.W)  - BYTE only
01:000003D0 307C0100        	   475:             move.l #$00000100,a0      * point to memory to address
01:000003D4 93C9            	   476:             move.l #$00000000,a1      * point to memory to address
01:000003D6 347C0001        	   477:             move.l #$00000001,a2      * point to memory to address
01:000003DA 7000            	   478:             moveq  #$00000000,d0      * point to memory to address
01:000003DC 7201            	   479:             moveq  #$00000001,d1      * point to memory to address
                            	   480: 
01:000003DE 083B000000FC    	   481: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:000003E4 66FE            	   482:             bne.s *               * branch if Z clear
                            	   483: 
01:000003E6 4BFB1002        	   484:             lea op_BTST1(pc,d1.w),a5
01:000003EA 083B000110FC    	   485: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:000003F0 67FE            	   486:             beq.s *               * branch if Z set
01:000003F2 083B000710FC    	   487: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:000003F8 66FE            	   488:             bne.s *               * branch if Z clear
                            	   489: *             EA = n(PC,R.L)  - BYTE only
01:000003FA 083B000008FC    	   490: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:00000400 66FE            	   491:             bne.s *               * branch if Z clear
01:00000402 083B000118FC    	   492: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:00000408 67FE            	   493:             beq.s *               * branch if Z set
01:0000040A 083B000718FC    	   494: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:00000410 66FE            	   495:             bne.s *               * branch if Z clear
                            	   496: *             EA = n(PC,A.W)  - BYTE only
01:00000412 083B000090FC    	   497: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:00000418 66FE            	   498:             bne.s *               * branch if Z clear
01:0000041A 083B0001A0FC    	   499: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:00000420 67FE            	   500:             beq.s *               * branch if Z set
01:00000422 083B0007A0FC    	   501: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:00000428 66FE            	   502:             bne.s *               * branch if Z clear
                            	   503: *             EA = n(PC,A.L)  - BYTE only
01:0000042A 083B000098FC    	   504: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:00000430 66FE            	   505:             bne.s *               * branch if Z clear
01:00000432 083B0001A8FC    	   506: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:00000438 67FE            	   507:             beq.s *               * branch if Z set
01:0000043A 083B0007A8FC    	   508: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:00000440 66FE            	   509: op_BTST12:  bne.s *               * branch if Z clear
                            	   510: 
                            	   511: 
                            	   512: 
                            	   513: * Bit Number.s Dynamic
                            	   514: 
                            	   515: *             EA = Dn  - LONG only
01:00000442 203C80000001    	   516:             move.l #$80000001,d0      * populate test data
01:00000448 7A00            	   517:             move.l #0,d5              * populate bit.s number to test
01:0000044A 7C01            	   518:             move.l #1,d6              * populate bit.s number to test
01:0000044C 7E1F            	   519:             move.l #31,d7              * populate bit.s number to test
                            	   520: 
01:0000044E 0B00            	   521:             btst.l d5,d0
01:00000450 67FE            	   522:             beq.s *               * branch if Z set
01:00000452 0D00            	   523:             btst.l d6,d0              *
01:00000454 66FE            	   524:             bne.s *               * branch if Z clear
01:00000456 0F00            	   525:             btst.l d7,d0             *
01:00000458 67FE            	   526:             beq.s *               * branch if Z set
                            	   527: 
                            	   528: 
                            	   529: *             EA = (An)  - BYTE only
01:0000045A 7A00            	   530:             move.l #0,d5              * populate bit.s number to test
01:0000045C 7C01            	   531:             move.l #1,d6              * populate bit.s number to test
01:0000045E 7E07            	   532:             move.l #7,d7              * populate bit.s number to test
01:00000460 307C0100        	   533:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000464 10BC0081        	   534:             move.b #$81,(a0)          * populate test data
01:00000468 1210            	   535:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000046A 0B10            	   536:             btst.b d5,(a0)
01:0000046C 67FE            	   537:             beq.s *               * branch if Z set
01:0000046E 0D10            	   538:             btst.b d6,(a0)            *
01:00000470 66FE            	   539:             bne.s *               * branch if Z clear
01:00000472 0F10            	   540:             btst.b d7,(a0)            *
01:00000474 67FE            	   541:             beq.s *               * branch if Z set
                            	   542: 
                            	   543: * ---
                            	   544: 
                            	   545: 
                            	   546: *             EA = (An)+  - BYTE only
01:00000476 307C0100        	   547:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000047A 10FC0001        	   548:             move.b #$01,(a0)+         * populate test data
01:0000047E 10FC00FC        	   549:             move.b #$FC,(a0)+         * populate test data
01:00000482 10FC0080        	   550:             move.b #$80,(a0)+         * populate test data
01:00000486 307C0100        	   551:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000048A 0B18            	   552:             btst.b d5,(a0)+
01:0000048C 67FE            	   553:             beq.s *               * branch if Z set
01:0000048E 0D18            	   554:             btst.b d6,(a0)+           *
01:00000490 66FE            	   555:             bne.s *               * branch if Z clear
01:00000492 0F18            	   556:             btst.b d7,(a0)+           *
01:00000494 67FE            	   557:             beq.s *               * branch if Z set
                            	   558: 
                            	   559: 
                            	   560: *             EA = -(An)  - BYTE only
01:00000496 307C0100        	   561:             move.l #$00000100,a0      * point to memory to address
01:0000049A 10FC0080        	   562:             move.b #$80,(a0)+         * populate test data
01:0000049E 10FC00FC        	   563:             move.b #$FC,(a0)+         * populate test data
01:000004A2 10FC0001        	   564:             move.b #$01,(a0)+         * populate test data
01:000004A6 307C0103        	   565:             move.l #$00000103,a0      * point to memory to address
01:000004AA 0B20            	   566:             btst.b d5,-(a0)
01:000004AC 67FE            	   567:             beq.s *               * branch if Z set
01:000004AE 0D20            	   568:             btst.b d6,-(a0)           *
01:000004B0 66FE            	   569:             bne.s *               * branch if Z clear
01:000004B2 0F20            	   570:             btst.b d7,-(a0)           *
01:000004B4 67FE            	   571:             beq.s *               * branch if Z set
                            	   572: 
                            	   573: 
                            	   574: *             EA = n(An)  - BYTE only
01:000004B6 307C0100        	   575:             move.l #$00000100,a0      * point to memory to address
01:000004BA 10FC0001        	   576:             move.b #$01,(a0)+         * populate test data
01:000004BE 10FC00FC        	   577:             move.b #$FC,(a0)+         * populate test data
01:000004C2 10FC0080        	   578:             move.b #$80,(a0)+         * populate test data
01:000004C6 307C0100        	   579:             move.l #$00000100,a0      * point to memory to address
01:000004CA 0B10            	   580:             btst.b d5,0(a0)
01:000004CC 67FE            	   581:             beq.s *               * branch if Z set
01:000004CE 0D280001        	   582:             btst.b d6,1(a0)           *
01:000004D2 66FE            	   583:             bne.s *               * branch if Z clear
01:000004D4 0F280002        	   584:             btst.b d7,2(a0)           *
01:000004D8 67FE            	   585:             beq.s *               * branch if Z set
                            	   586: 
                            	   587: 
                            	   588: *             EA = n(An,R.W)  - BYTE only
01:000004DA 307C0100        	   589:             move.l #$00000100,a0      * point to memory to address
01:000004DE 93C9            	   590:             move.l #$00000000,a1      * point to memory to address
01:000004E0 347C0001        	   591:             move.l #$00000001,a2      * point to memory to address
01:000004E4 7000            	   592:             moveq  #$00000000,d0      * point to memory to address
01:000004E6 7201            	   593:             moveq  #$00000001,d1      * point to memory to address
01:000004E8 0B300000        	   594:             btst.b d5,0(a0,d0.w)
01:000004EC 67FE            	   595:             beq.s *               * branch if Z set
01:000004EE 0D301000        	   596:             btst.b d6,0(a0,d1.w)      *
01:000004F2 66FE            	   597:             bne.s *               * branch if Z clear
01:000004F4 0F301001        	   598:             btst.b d7,1(a0,d1.w)      *
01:000004F8 67FE            	   599:             beq.s *               * branch if Z set
                            	   600: *             EA = n(An,R.L)  - BYTE only
01:000004FA 0B300800        	   601:             btst.b d5,0(a0,d0.l)
01:000004FE 67FE            	   602:             beq.s *               * branch if Z set
01:00000500 0D301800        	   603:             btst.b d6,0(a0,d1.l)      *
01:00000504 66FE            	   604:             bne.s *               * branch if Z clear
01:00000506 0F301801        	   605:             btst.b d7,1(a0,d1.l)      *
01:0000050A 67FE            	   606:             beq.s *               * branch if Z set
                            	   607: *             EA = n(An,A.W)  - BYTE only
01:0000050C 0B309000        	   608:             btst.b d5,0(a0,a1.w)
01:00000510 67FE            	   609:             beq.s *               * branch if Z set
01:00000512 0D30A000        	   610:             btst.b d6,0(a0,a2.w)      *
01:00000516 66FE            	   611:             bne.s *               * branch if Z clear
01:00000518 0F30A001        	   612:             btst.b d7,1(a0,a2.w)      *
01:0000051C 67FE            	   613:             beq.s *               * branch if Z set
                            	   614: *             EA = n(An,A.L)  - BYTE only
01:0000051E 0B309800        	   615:             btst.b d5,0(a0,a1.l)
01:00000522 67FE            	   616:             beq.s *               * branch if Z set
01:00000524 0D30A800        	   617:             btst.b d6,0(a0,a2.l)      *
01:00000528 66FE            	   618:             bne.s *               * branch if Z clear
01:0000052A 0F30A801        	   619:             btst.b d7,1(a0,a2.l)      *
01:0000052E 67FE            	   620:             beq.s *               * branch if Z set
                            	   621: 
                            	   622: 
                            	   623: *             EA = x.W  - BYTE only
01:00000530 0B380100        	   624:             btst.b d5,$0100
01:00000534 67FE            	   625:             beq.s *               * branch if Z set
01:00000536 0D380101        	   626:             btst.b d6,$0101           *
01:0000053A 66FE            	   627:             bne.s *               * branch if Z clear
01:0000053C 0F380102        	   628:             btst.b d7,$0102           *
01:00000540 67FE            	   629:             beq.s *               * branch if Z set
                            	   630: 
                            	   631: 
                            	   632: *             EA = x.L  - BYTE only
01:00000542 207C0000F100    	   633:             move.l #$F100,a0      * point to memory to address 0x100
01:00000548 10FC0001        	   634:             move.b #$01,(a0)+         * populate test data
01:0000054C 10FC00FC        	   635:             move.b #$FC,(a0)+         * populate test data
01:00000550 10FC0080        	   636:             move.b #$80,(a0)+         * populate test data
01:00000554 0B390000F100    	   637:             btst.b d5,$F100
01:0000055A 67FE            	   638:             beq.s *               * branch if Z set
01:0000055C 0D390000F101    	   639:             btst.b d6,$F101       *
01:00000562 66FE            	   640:             bne.s *               * branch if Z clear
01:00000564 0F390000F102    	   641:             btst.b d7,$F102       *
01:0000056A 67FE            	   642:             beq.s *               * branch if Z set
                            	   643: 
                            	   644: 
                            	   645: *             EA = x(PC)  - BYTE only
01:0000056C 7C03            	   646:             move.l #3,d6              * populate bit.s number to test
01:0000056E 7E06            	   647:             move.l #6,d7              * populate bit.s number to test
01:00000570 4BFAFCE2        	   648:             lea op_BTST(pc),a5
01:00000574 0B3AFCDE        	   649:             btst.b d5,op_BTST(pc)
01:00000578 66FE            	   650:             bne.s *               * branch if Z clear
01:0000057A 0D3AFE62        	   651:             btst.b d6,op_BTST0(pc)     *
01:0000057E 67FE            	   652:             beq.s *               * branch if Z set
01:00000580 0F3AFEBE        	   653:             btst.b d7,op_BTST12(pc)    *
01:00000584 67FE            	   654:             beq.s *               * branch if Z set
                            	   655: 
                            	   656: 
                            	   657: *             EA = n(PC,R.W)  - BYTE only
01:00000586 307C0100        	   658:             move.l #$00000100,a0      * point to memory to address
01:0000058A 93C9            	   659:             move.l #$00000000,a1      * point to memory to address
01:0000058C 347C0001        	   660:             move.l #$00000001,a2      * point to memory to address
01:00000590 7000            	   661:             moveq  #$00000000,d0      * point to memory to address
01:00000592 7201            	   662:             moveq  #$00000001,d1      * point to memory to address
01:00000594 7C01            	   663:             move.l #1,d6              * populate bit.s number to test
01:00000596 7E07            	   664:             move.l #7,d7              * populate bit.s number to test
                            	   665: 
01:00000598 0B3B00FE        	   666: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:0000059C 67FE            	   667:             beq.s *               * branch if Z set
01:0000059E 4BFB1002        	   668:             lea op_BTST21(pc,d1.w),a5
01:000005A2 0D3B10FE        	   669: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:000005A6 67FE            	   670:             beq.s *               * branch if Z set
01:000005A8 0F3B10FE        	   671: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:000005AC 66FE            	   672:             bne.s *               * branch if Z clear
                            	   673: *             EA = n(PC,R.L)  - BYTE only
01:000005AE 0B3B08FE        	   674: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:000005B2 67FE            	   675:             beq.s *               * branch if Z set
01:000005B4 0D3B18FE        	   676: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:000005B8 67FE            	   677:             beq.s *               * branch if Z set
01:000005BA 0F3B18FE        	   678: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:000005BE 66FE            	   679:             bne.s *               * branch if Z clear
                            	   680: *             EA = n(PC,A.W)  - BYTE only
01:000005C0 0B3B90FE        	   681: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:000005C4 67FE            	   682:             beq.s *               * branch if Z set
01:000005C6 0D3BA0FE        	   683: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:000005CA 67FE            	   684:             beq.s *               * branch if Z set
01:000005CC 0F3BA0FE        	   685: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:000005D0 66FE            	   686:             bne.s *               * branch if Z clear
                            	   687: *             EA = n(PC,A.L)  - BYTE only
01:000005D2 0B3B98FE        	   688: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:000005D6 67FE            	   689:             beq.s *               * branch if Z set
01:000005D8 0D3BA8FE        	   690: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:000005DC 67FE            	   691:             beq.s *               * branch if Z set
01:000005DE 0F3BA8FE        	   692: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000005E2 66FE            	   693: op_BTST32:  bne.s *               * branch if Z clear
                            	   694: 
                            	   695: *             EA = #x  - BYTE only
                            	   696: 
01:000005E4 7A00            	   697:             move.l #0,d5              * populate bit.s number to test
01:000005E6 7C03            	   698:             move.l #3,d6              * populate bit.s number to test
01:000005E8 7E07            	   699:             move.l #7,d7              * populate bit.s number to test
                            	   700: 
01:000005EA 0B3C0088        	   701:             btst.b d5,#$88
01:000005EE 66FE            	   702:             bne.s *               * branch if Z clear
01:000005F0 0D3C0088        	   703:             btst.b d6,#$88
01:000005F4 67FE            	   704:             beq.s *               * branch if Z set
01:000005F6 0F3C0088        	   705:             btst.b d7,#$88
01:000005FA 67FE            	   706:             beq.s *               * branch if Z set
                            	   707: 
                            	   708: 
01:000005FC 4E75            	   709:     rts
                            	   710: 
                            	   711: *-----------------------------------------------------------
                            	   712: *-----------------------------------------------------------
                            	   713: * OPCODE : BCHG
                            	   714: *-----------------------------------------------------------
                            	   715: *-----------------------------------------------------------
                            	   716: op_BCHG:
                            	   717: 
                            	   718: 
                            	   719: *  Bit Number.s Static
                            	   720: 
                            	   721: *             EA = Dn  - LONG only
01:000005FE 203C80000001    	   722:             move.l #$80000001,d0      * populate test data
01:00000604 08400000        	   723:             bchg.l #0,d0
01:00000608 67FE            	   724:             beq.s *               * branch if Z set
01:0000060A 08400001        	   725:             bchg.l #1,d0              *
01:0000060E 66FE            	   726:             bne.s *               * branch if Z clear
01:00000610 0840001F        	   727:             bchg.l #31,d0             *
01:00000614 67FE            	   728:             beq.s *               * branch if Z set
01:00000616 0C8000000002    	   729:             cmpi.l #$00000002,d0
01:0000061C 66FE            	   730:             bne.s *               * branch if Z clear
                            	   731: 
                            	   732: 
                            	   733: *             EA = (An)  - BYTE only
01:0000061E 307C0100        	   734:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000622 10BC0081        	   735:             move.b #$81,(a0)          * populate test data
01:00000626 1210            	   736:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000628 08500000        	   737:             bchg.b #0,(a0)
01:0000062C 67FE            	   738:             beq.s *               * branch if Z set
01:0000062E 08500001        	   739:             bchg.b #1,(a0)            *
01:00000632 66FE            	   740:             bne.s *               * branch if Z clear
01:00000634 08500007        	   741:             bchg.b #7,(a0)            *
01:00000638 67FE            	   742:             beq.s *               * branch if Z set
01:0000063A 0C100002        	   743:             cmpi.b #$02,(a0)
01:0000063E 66FE            	   744:             bne.s *               * branch if Z clear
                            	   745: 
                            	   746: *             EA = (An)+  - BYTE only
01:00000640 307C0100        	   747:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000644 10FC0001        	   748:             move.b #$01,(a0)+         * populate test data
01:00000648 10FC00FC        	   749:             move.b #$FC,(a0)+         * populate test data
01:0000064C 10FC0080        	   750:             move.b #$80,(a0)+         * populate test data
01:00000650 307C0100        	   751:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000654 08580000        	   752:             bchg.b #0,(a0)+
01:00000658 67FE            	   753:             beq.s *               * branch if Z set
01:0000065A 08580001        	   754:             bchg.b #1,(a0)+           *
01:0000065E 66FE            	   755:             bne.s *               * branch if Z clear
01:00000660 08580007        	   756:             bchg.b #7,(a0)+           *
01:00000664 67FE            	   757:             beq.s *               * branch if Z set
01:00000666 307C0100        	   758:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000066A 4A18            	   759:             cmpi.b #$00,(a0)+
01:0000066C 66FE            	   760:             bne.s *               * branch if Z clear
01:0000066E 0C1800FE        	   761:             cmpi.b #$FE,(a0)+
01:00000672 66FE            	   762:             bne.s *               * branch if Z clear
01:00000674 4A18            	   763:             cmpi.b #$00,(a0)+
01:00000676 66FE            	   764:             bne.s *               * branch if Z clear
                            	   765: 
                            	   766: *             EA = -(An)  - BYTE only
01:00000678 307C0100        	   767:             move.l #$00000100,a0      * point to memory to address
01:0000067C 10FC0080        	   768:             move.b #$80,(a0)+         * populate test data
01:00000680 10FC00FC        	   769:             move.b #$FC,(a0)+         * populate test data
01:00000684 10FC0001        	   770:             move.b #$01,(a0)+         * populate test data
01:00000688 307C0103        	   771:             move.l #$00000103,a0      * point to memory to address
01:0000068C 08600000        	   772:             bchg.b #0,-(a0)
01:00000690 67FE            	   773:             beq.s *               * branch if Z set
01:00000692 08600001        	   774:             bchg.b #1,-(a0)           *
01:00000696 66FE            	   775:             bne.s *               * branch if Z clear
01:00000698 08600007        	   776:             bchg.b #7,-(a0)           *
01:0000069C 67FE            	   777:             beq.s *               * branch if Z set
01:0000069E 307C0103        	   778:             move.l #$00000103,a0      * point to memory to address 0x100
01:000006A2 4A20            	   779:             cmpi.b #$00,-(a0)
01:000006A4 66FE            	   780:             bne.s *               * branch if Z clear
01:000006A6 0C2000FE        	   781:             cmpi.b #$FE,-(a0)
01:000006AA 66FE            	   782:             bne.s *               * branch if Z clear
01:000006AC 4A20            	   783:             cmpi.b #$00,-(a0)
01:000006AE 66FE            	   784:             bne.s *               * branch if Z clear
                            	   785: 
                            	   786: 
                            	   787: *             EA = n(An)  - BYTE only
01:000006B0 307C0100        	   788:             move.l #$00000100,a0      * point to memory to address
01:000006B4 10FC0001        	   789:             move.b #$01,(a0)+         * populate test data
01:000006B8 10FC00FC        	   790:             move.b #$FC,(a0)+         * populate test data
01:000006BC 10FC0080        	   791:             move.b #$80,(a0)+         * populate test data
01:000006C0 307C0100        	   792:             move.l #$00000100,a0      * point to memory to address
01:000006C4 08500000        	   793:             bchg.b #0,0(a0)
01:000006C8 67FE            	   794:             beq.s *               * branch if Z set
01:000006CA 086800010001    	   795:             bchg.b #1,1(a0)           *
01:000006D0 66FE            	   796:             bne.s *               * branch if Z clear
01:000006D2 086800070002    	   797:             bchg.b #7,2(a0)           *
01:000006D8 67FE            	   798:             beq.s *               * branch if Z set
01:000006DA 307C0100        	   799:             move.l #$00000100,a0      * point to memory to address 0x100
01:000006DE 4A18            	   800:             cmpi.b #$00,(a0)+
01:000006E0 66FE            	   801:             bne.s *               * branch if Z clear
01:000006E2 0C1800FE        	   802:             cmpi.b #$FE,(a0)+
01:000006E6 66FE            	   803:             bne.s *               * branch if Z clear
01:000006E8 4A18            	   804:             cmpi.b #$00,(a0)+
01:000006EA 66FE            	   805:             bne.s *               * branch if Z clear
                            	   806: 
                            	   807: 
                            	   808: *             EA = n(An,D.W)  - BYTE only
01:000006EC 307C0100        	   809:             move.l #$00000100,a0      * point to memory to address
01:000006F0 93C9            	   810:             move.l #$00000000,a1      * point to memory to address
01:000006F2 347C0001        	   811:             move.l #$00000001,a2      * point to memory to address
01:000006F6 7000            	   812:             moveq  #$00000000,d0      * point to memory to address
01:000006F8 7201            	   813:             moveq  #$00000001,d1      * point to memory to address
01:000006FA 087000000000    	   814:             bchg.b #0,0(a0,d0.w)
01:00000700 66FE            	   815:             bne.s *               * branch if Z clear
01:00000702 087000011000    	   816:             bchg.b #1,0(a0,d1.w)      *
01:00000708 67FE            	   817:             beq.s *               * branch if Z set
01:0000070A 087000071001    	   818:             bchg.b #7,1(a0,d1.w)      *
01:00000710 66FE            	   819:             bne.s *               * branch if Z clear
                            	   820: *             EA = n(An,D.L)  - BYTE only
01:00000712 087000000800    	   821:             bchg.b #0,0(a0,d0.l)
01:00000718 67FE            	   822:             beq.s *               * branch if Z set
01:0000071A 087000011800    	   823:             bchg.b #1,0(a0,d1.l)      *
01:00000720 66FE            	   824:             bne.s *               * branch if Z clear
01:00000722 087000071801    	   825:             bchg.b #7,1(a0,d1.l)      *
01:00000728 67FE            	   826:             beq.s *               * branch if Z set
                            	   827: *             EA = n(An,A.W)  - BYTE only
01:0000072A 087000009000    	   828:             bchg.b #0,0(a0,a1.w)
01:00000730 66FE            	   829:             bne.s *               * branch if Z clear
01:00000732 08700001A000    	   830:             bchg.b #1,0(a0,a2.w)      *
01:00000738 67FE            	   831:             beq.s *               * branch if Z set
01:0000073A 08700007A001    	   832:             bchg.b #7,1(a0,a2.w)      *
01:00000740 66FE            	   833:             bne.s *               * branch if Z clear
                            	   834: *             EA = n(An,A.L)  - BYTE only
01:00000742 087000009800    	   835:             bchg.b #0,0(a0,a1.l)
01:00000748 67FE            	   836:             beq.s *               * branch if Z set
01:0000074A 08700001A800    	   837:             bchg.b #1,0(a0,a2.l)      *
01:00000750 66FE            	   838:             bne.s *               * branch if Z clear
01:00000752 08700007A801    	   839:             bchg.b #7,1(a0,a2.l)      *
01:00000758 67FE            	   840:             beq.s *               * branch if Z set
01:0000075A 307C0100        	   841:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000075E 4A18            	   842:             cmpi.b #$00,(a0)+
01:00000760 66FE            	   843:             bne.s *               * branch if Z clear
01:00000762 0C1800FE        	   844:             cmpi.b #$FE,(a0)+
01:00000766 66FE            	   845:             bne.s *               * branch if Z clear
01:00000768 4A18            	   846:             cmpi.b #$00,(a0)+
01:0000076A 66FE            	   847:             bne.s *               * branch if Z clear
                            	   848: 
                            	   849: 
                            	   850: *             EA = x.W  - BYTE only
01:0000076C 087800000100    	   851:             bchg.b #0,$0100
01:00000772 66FE            	   852:             bne.s *               * branch if Z clear
01:00000774 087800010101    	   853:             bchg.b #1,$0101           *
01:0000077A 67FE            	   854:             beq.s *               * branch if Z set
01:0000077C 087800070102    	   855:             bchg.b #7,$0102           *
01:00000782 66FE            	   856:             bne.s *               * branch if Z clear
01:00000784 307C0100        	   857:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000788 0C180001        	   858:             cmpi.b #$01,(a0)+
01:0000078C 66FE            	   859:             bne.s *               * branch if Z clear
01:0000078E 0C1800FC        	   860:             cmpi.b #$FC,(a0)+
01:00000792 66FE            	   861:             bne.s *               * branch if Z clear
01:00000794 0C180080        	   862:             cmpi.b #$80,(a0)+
01:00000798 66FE            	   863:             bne.s *               * branch if Z clear
                            	   864: 
                            	   865: *             EA = x.L  - BYTE only
01:0000079A 207C0000F100    	   866:             move.l #$F100,a0      * point to memory to address 0x100
01:000007A0 10FC0001        	   867:             move.b #$01,(a0)+         * populate test data
01:000007A4 10FC00FC        	   868:             move.b #$FC,(a0)+         * populate test data
01:000007A8 10FC0080        	   869:             move.b #$80,(a0)+         * populate test data
01:000007AC 087900000000F100	   870:             bchg.b #0,$F100
01:000007B4 67FE            	   871:             beq.s *               * branch if Z set
01:000007B6 087900010000F101	   872:             bchg.b #1,$F101       *
01:000007BE 66FE            	   873:             bne.s *               * branch if Z clear
01:000007C0 087900070000F102	   874:             bchg.b #7,$F102       *
01:000007C8 67FE            	   875:             beq.s *               * branch if Z set
01:000007CA 307C0100        	   876:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007CE 0C180001        	   877:             cmpi.b #$01,(a0)+
01:000007D2 66FE            	   878:             bne.s *               * branch if Z clear
01:000007D4 0C1800FC        	   879:             cmpi.b #$FC,(a0)+
01:000007D8 66FE            	   880:             bne.s *               * branch if Z clear
01:000007DA 0C180080        	   881:             cmpi.b #$80,(a0)+
01:000007DE 66FE            	   882:             bne.s *               * branch if Z clear
                            	   883: 
                            	   884: 
                            	   885: * Bit Number.s Dynamic
                            	   886: 
                            	   887: *             EA = Dn  - LONG only
01:000007E0 203C80000001    	   888:             move.l #$80000001,d0      * populate test data
01:000007E6 7A00            	   889:             move.l #0,d5              * populate bit.s number to test
01:000007E8 7C01            	   890:             move.l #1,d6              * populate bit.s number to test
01:000007EA 7E1F            	   891:             move.l #31,d7              * populate bit.s number to test
                            	   892: 
01:000007EC 0B40            	   893:             bchg.l d5,d0
01:000007EE 67FE            	   894:             beq.s *               * branch if Z set
01:000007F0 0D40            	   895:             bchg.l d6,d0              *
01:000007F2 66FE            	   896:             bne.s *               * branch if Z clear
01:000007F4 0F40            	   897:             bchg.l d7,d0             *
01:000007F6 67FE            	   898:             beq.s *               * branch if Z set
01:000007F8 0C8000000002    	   899:             cmpi.l #$00000002,d0
01:000007FE 66FE            	   900:             bne.s *               * branch if Z clear
                            	   901: 
                            	   902: 
                            	   903: *             EA = (An)  - BYTE only
01:00000800 7A00            	   904:             move.l #0,d5              * populate bit.s number to test
01:00000802 7C01            	   905:             move.l #1,d6              * populate bit.s number to test
01:00000804 7E07            	   906:             move.l #7,d7              * populate bit.s number to test
01:00000806 307C0100        	   907:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000080A 10BC0081        	   908:             move.b #$81,(a0)          * populate test data
01:0000080E 1210            	   909:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000810 0B50            	   910:             bchg.b d5,(a0)
01:00000812 67FE            	   911:             beq.s *               * branch if Z set
01:00000814 0D50            	   912:             bchg.b d6,(a0)            *
01:00000816 66FE            	   913:             bne.s *               * branch if Z clear
01:00000818 0F50            	   914:             bchg.b d7,(a0)            *
01:0000081A 67FE            	   915:             beq.s *               * branch if Z set
01:0000081C 0C100002        	   916:             cmpi.b #$02,(a0)
01:00000820 66FE            	   917:             bne.s *               * branch if Z clear
                            	   918: 
                            	   919: 
                            	   920: *             EA = (An)+  - BYTE only
01:00000822 307C0100        	   921:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000826 10FC0001        	   922:             move.b #$01,(a0)+         * populate test data
01:0000082A 10FC00FC        	   923:             move.b #$FC,(a0)+         * populate test data
01:0000082E 10FC0080        	   924:             move.b #$80,(a0)+         * populate test data
01:00000832 307C0100        	   925:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000836 0B58            	   926:             bchg.b d5,(a0)+
01:00000838 67FE            	   927:             beq.s *               * branch if Z set
01:0000083A 0D58            	   928:             bchg.b d6,(a0)+           *
01:0000083C 66FE            	   929:             bne.s *               * branch if Z clear
01:0000083E 0F58            	   930:             bchg.b d7,(a0)+           *
01:00000840 67FE            	   931:             beq.s *               * branch if Z set
01:00000842 307C0100        	   932:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000846 4A18            	   933:             cmpi.b #$00,(a0)+
01:00000848 66FE            	   934:             bne.s *               * branch if Z clear
01:0000084A 0C1800FE        	   935:             cmpi.b #$FE,(a0)+
01:0000084E 66FE            	   936:             bne.s *               * branch if Z clear
01:00000850 4A18            	   937:             cmpi.b #$00,(a0)+
01:00000852 66FE            	   938:             bne.s *               * branch if Z clear
                            	   939: 
                            	   940: *             EA = -(An)  - BYTE only
01:00000854 307C0100        	   941:             move.l #$00000100,a0      * point to memory to address
01:00000858 10FC0080        	   942:             move.b #$80,(a0)+         * populate test data
01:0000085C 10FC00FC        	   943:             move.b #$FC,(a0)+         * populate test data
01:00000860 10FC0001        	   944:             move.b #$01,(a0)+         * populate test data
01:00000864 307C0103        	   945:             move.l #$00000103,a0      * point to memory to address
01:00000868 0B60            	   946:             bchg.b d5,-(a0)
01:0000086A 67FE            	   947:             beq.s *               * branch if Z set
01:0000086C 0D60            	   948:             bchg.b d6,-(a0)           *
01:0000086E 66FE            	   949:             bne.s *               * branch if Z clear
01:00000870 0F60            	   950:             bchg.b d7,-(a0)           *
01:00000872 67FE            	   951:             beq.s *               * branch if Z set
01:00000874 307C0103        	   952:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000878 4A20            	   953:             cmpi.b #$00,-(a0)
01:0000087A 66FE            	   954:             bne.s *               * branch if Z clear
01:0000087C 0C2000FE        	   955:             cmpi.b #$FE,-(a0)
01:00000880 66FE            	   956:             bne.s *               * branch if Z clear
01:00000882 4A20            	   957:             cmpi.b #$00,-(a0)
01:00000884 66FE            	   958:             bne.s *               * branch if Z clear
                            	   959: 
                            	   960: *             EA = n(An)  - BYTE only
01:00000886 307C0100        	   961:             move.l #$00000100,a0      * point to memory to address
01:0000088A 10FC0001        	   962:             move.b #$01,(a0)+         * populate test data
01:0000088E 10FC00FC        	   963:             move.b #$FC,(a0)+         * populate test data
01:00000892 10FC0080        	   964:             move.b #$80,(a0)+         * populate test data
01:00000896 307C0100        	   965:             move.l #$00000100,a0      * point to memory to address
01:0000089A 0B50            	   966:             bchg.b d5,0(a0)
01:0000089C 67FE            	   967:             beq.s *               * branch if Z set
01:0000089E 0D680001        	   968:             bchg.b d6,1(a0)           *
01:000008A2 66FE            	   969:             bne.s *               * branch if Z clear
01:000008A4 0F680002        	   970:             bchg.b d7,2(a0)           *
01:000008A8 67FE            	   971:             beq.s *               * branch if Z set
01:000008AA 307C0100        	   972:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008AE 4A18            	   973:             cmpi.b #$00,(a0)+
01:000008B0 66FE            	   974:             bne.s *               * branch if Z clear
01:000008B2 0C1800FE        	   975:             cmpi.b #$FE,(a0)+
01:000008B6 66FE            	   976:             bne.s *               * branch if Z clear
01:000008B8 4A18            	   977:             cmpi.b #$00,(a0)+
01:000008BA 66FE            	   978:             bne.s *               * branch if Z clear
                            	   979: 
                            	   980: *             EA = n(An,R.W)  - BYTE only
01:000008BC 307C0100        	   981:             move.l #$00000100,a0      * point to memory to address
01:000008C0 93C9            	   982:             move.l #$00000000,a1      * point to memory to address
01:000008C2 347C0001        	   983:             move.l #$00000001,a2      * point to memory to address
01:000008C6 7000            	   984:             moveq  #$00000000,d0      * point to memory to address
01:000008C8 7201            	   985:             moveq  #$00000001,d1      * point to memory to address
01:000008CA 0B700000        	   986:             bchg.b d5,0(a0,d0.w)
01:000008CE 66FE            	   987:             bne.s *               * branch if Z clear
01:000008D0 0D701000        	   988:             bchg.b d6,0(a0,d1.w)      *
01:000008D4 67FE            	   989:             beq.s *               * branch if Z set
01:000008D6 0F701001        	   990:             bchg.b d7,1(a0,d1.w)      *
01:000008DA 66FE            	   991:             bne.s *               * branch if Z clear
                            	   992: *             EA = n(An,R.L)  - BYTE only
01:000008DC 0B700800        	   993:             bchg.b d5,0(a0,d0.l)
01:000008E0 67FE            	   994:             beq.s *               * branch if Z set
01:000008E2 0D701800        	   995:             bchg.b d6,0(a0,d1.l)      *
01:000008E6 66FE            	   996:             bne.s *               * branch if Z clear
01:000008E8 0F701801        	   997:             bchg.b d7,1(a0,d1.l)      *
01:000008EC 67FE            	   998:             beq.s *               * branch if Z set
                            	   999: *             EA = n(An,A.W)  - BYTE only
01:000008EE 0B709000        	  1000:             bchg.b d5,0(a0,a1.w)
01:000008F2 66FE            	  1001:             bne.s *               * branch if Z clear
01:000008F4 0D70A000        	  1002:             bchg.b d6,0(a0,a2.w)      *
01:000008F8 67FE            	  1003:             beq.s *               * branch if Z set
01:000008FA 0F70A001        	  1004:             bchg.b d7,1(a0,a2.w)      *
01:000008FE 66FE            	  1005:             bne.s *               * branch if Z clear
                            	  1006: *             EA = n(An,A.L)  - BYTE only
01:00000900 0B709800        	  1007:             bchg.b d5,0(a0,a1.l)
01:00000904 67FE            	  1008:             beq.s *               * branch if Z set
01:00000906 0D70A800        	  1009:             bchg.b d6,0(a0,a2.l)      *
01:0000090A 66FE            	  1010:             bne.s *               * branch if Z clear
01:0000090C 0F70A801        	  1011:             bchg.b d7,1(a0,a2.l)      *
01:00000910 67FE            	  1012:             beq.s *               * branch if Z set
01:00000912 4A18            	  1013:             cmpi.b #$00,(a0)+
01:00000914 66FE            	  1014:             bne.s *               * branch if Z clear
                            	  1015: 
                            	  1016: *             EA = x.W  - BYTE only
01:00000916 0B780100        	  1017:             bchg.b d5,$0100
01:0000091A 66FE            	  1018:             bne.s *               * branch if Z clear
01:0000091C 0D780101        	  1019:             bchg.b d6,$0101           *
01:00000920 67FE            	  1020:             beq.s *               * branch if Z set
01:00000922 0F780102        	  1021:             bchg.b d7,$0102           *
01:00000926 66FE            	  1022:             bne.s *               * branch if Z clear
01:00000928 0C1800FC        	  1023:             cmpi.b #$FC,(a0)+
01:0000092C 66FE            	  1024:             bne.s *               * branch if Z clear
                            	  1025: 
                            	  1026: *             EA = x.L  - BYTE only
01:0000092E 207C0000F100    	  1027:             move.l #$F100,a0      * point to memory to address 0x100
01:00000934 10FC0001        	  1028:             move.b #$01,(a0)+         * populate test data
01:00000938 10FC00FC        	  1029:             move.b #$FC,(a0)+         * populate test data
01:0000093C 10FC0080        	  1030:             move.b #$80,(a0)+         * populate test data
01:00000940 0B790000F100    	  1031:             bchg.b d5,$F100
01:00000946 67FE            	  1032:             beq.s *               * branch if Z set
01:00000948 0D790000F101    	  1033:             bchg.b d6,$F101       *
01:0000094E 66FE            	  1034:             bne.s *               * branch if Z clear
01:00000950 0F790000F102    	  1035:             bchg.b d7,$F102       *
01:00000956 67FE            	  1036:             beq.s *               * branch if Z set
01:00000958 207C0000F101    	  1037:             move.l #$F101,a0      * point to memory to address 0x100
01:0000095E 0C1000FE        	  1038:             cmpi.b #$FE,(a0)
01:00000962 66FE            	  1039:             bne.s *               * branch if Z clear
                            	  1040: 
                            	  1041: 
01:00000964 4E75            	  1042:     rts
                            	  1043: 
                            	  1044: *-----------------------------------------------------------
                            	  1045: *-----------------------------------------------------------
                            	  1046: * OPCODE : BCLR
                            	  1047: *-----------------------------------------------------------
                            	  1048: *-----------------------------------------------------------
                            	  1049: op_BCLR:
                            	  1050: 
                            	  1051: 
                            	  1052: *  Bit Number.s Static
                            	  1053: 
                            	  1054: *             EA = Dn  - LONG only
01:00000966 203CFF0000FF    	  1055:             move.l #$FF0000FF,d0      * populate test data
01:0000096C 08800000        	  1056:             bclr.l #0,d0
01:00000970 67FE            	  1057:             beq.s *               * branch if Z set
01:00000972 08800001        	  1058:             bclr.l #1,d0              *
01:00000976 67FE            	  1059:             beq.s *               * branch if Z set
01:00000978 0880000F        	  1060:             bclr.l #15,d0             *
01:0000097C 66FE            	  1061:             bne.s *               * branch if Z clear
01:0000097E 0880001F        	  1062:             bclr.l #31,d0             *
01:00000982 67FE            	  1063:             beq.s *               * branch if Z set
01:00000984 0C807F0000FC    	  1064:             cmpi.l #$7F0000FC,d0
01:0000098A 66FE            	  1065:             bne.s *               * branch if Z clear
                            	  1066: 
                            	  1067: 
                            	  1068: *             EA = (An)  - BYTE only
01:0000098C 307C0100        	  1069:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000990 10BC000F        	  1070:             move.b #$0F,(a0)          * populate test data
01:00000994 08900000        	  1071:             bclr.b #0,(a0)
01:00000998 67FE            	  1072:             beq.s *               * branch if Z set
01:0000099A 08900007        	  1073:             bclr.b #7,(a0)            *
01:0000099E 66FE            	  1074:             bne.s *               * branch if Z clear
01:000009A0 0C10000E        	  1075:             cmpi.b #$0E,(a0)
01:000009A4 66FE            	  1076:             bne.s *               * branch if Z clear
                            	  1077: 
                            	  1078: *             EA = (An)+  - BYTE only
01:000009A6 307C0100        	  1079:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009AA 10FC0001        	  1080:             move.b #$01,(a0)+         * populate test data
01:000009AE 10FC0000        	  1081:             move.b #$00,(a0)+         * populate test data
01:000009B2 307C0100        	  1082:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009B6 08980000        	  1083:             bclr.b #0,(a0)+
01:000009BA 67FE            	  1084:             beq.s *               * branch if Z set
01:000009BC 08980001        	  1085:             bclr.b #1,(a0)+           *
01:000009C0 66FE            	  1086:             bne.s *               * branch if Z clear
01:000009C2 307C0100        	  1087:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009C6 4A18            	  1088:             cmpi.b #$00,(a0)+
01:000009C8 66FE            	  1089:             bne.s *               * branch if Z clear
01:000009CA 4A18            	  1090:             cmpi.b #$00,(a0)+
01:000009CC 66FE            	  1091:             bne.s *               * branch if Z clear
                            	  1092: 
                            	  1093: 
                            	  1094: *             EA = -(An)  - BYTE only
01:000009CE 307C0100        	  1095:             move.l #$00000100,a0      * point to memory to address
01:000009D2 10FC0001        	  1096:             move.b #$01,(a0)+         * populate test data
01:000009D6 10FC0080        	  1097:             move.b #$80,(a0)+         * populate test data
01:000009DA 08A00007        	  1098:             bclr.b #7,-(a0)
01:000009DE 67FE            	  1099:             beq.s *               * branch if Z set
01:000009E0 08A00000        	  1100:             bclr.b #0,-(a0)           *
01:000009E4 67FE            	  1101:             beq.s *               * branch if Z set
01:000009E6 307C0102        	  1102:             move.l #$00000102,a0      * point to memory to address 0x100
01:000009EA 4A20            	  1103:             cmpi.b #$00,-(a0)
01:000009EC 66FE            	  1104:             bne.s *               * branch if Z clear
01:000009EE 4A20            	  1105:             cmpi.b #$00,-(a0)
01:000009F0 66FE            	  1106:             bne.s *               * branch if Z clear
                            	  1107: 
                            	  1108: 
                            	  1109: *             EA = n(An)  - BYTE only
01:000009F2 307C0100        	  1110:             move.l #$00000100,a0      * point to memory to address
01:000009F6 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
01:000009FA 10FC00FF        	  1112:             move.b #$FF,(a0)+         * populate test data
01:000009FE 307C0100        	  1113:             move.l #$00000100,a0      * point to memory to address
01:00000A02 08900000        	  1114:             bclr.b #0,0(a0)
01:00000A06 67FE            	  1115:             beq.s *               * branch if Z set
01:00000A08 08A800040001    	  1116:             bclr.b #4,1(a0)           *
01:00000A0E 67FE            	  1117:             beq.s *               * branch if Z set
01:00000A10 307C0100        	  1118:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A14 0C1800FE        	  1119:             cmpi.b #$FE,(a0)+
01:00000A18 66FE            	  1120:             bne.s *               * branch if Z clear
01:00000A1A 0C1800EF        	  1121:             cmpi.b #$EF,(a0)+
01:00000A1E 66FE            	  1122:             bne.s *               * branch if Z clear
                            	  1123: 
                            	  1124: 
                            	  1125: *             EA = n(An,D.W)  - BYTE only
01:00000A20 307C0100        	  1126:             move.l #$00000100,a0      * point to memory to address
01:00000A24 93C9            	  1127:             move.l #$00000000,a1      * point to memory to address
01:00000A26 347C0001        	  1128:             move.l #$00000001,a2      * point to memory to address
01:00000A2A 7000            	  1129:             moveq  #$00000000,d0      * point to memory to address
01:00000A2C 7201            	  1130:             moveq  #$00000001,d1      * point to memory to address
01:00000A2E 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
01:00000A32 10FC00FF        	  1132:             move.b #$FF,(a0)+         * populate test data
01:00000A36 307C0100        	  1133:             move.l #$00000100,a0      * point to memory to address
01:00000A3A 08B000000000    	  1134:             bclr.b #0,0(a0,d0.w)
01:00000A40 67FE            	  1135:             beq.s *               * branch if Z set
01:00000A42 08B000011000    	  1136:             bclr.b #1,0(a0,d1.w)      *
01:00000A48 67FE            	  1137:             beq.s *               * branch if Z set
01:00000A4A 08B000021001    	  1138:             bclr.b #2,1(a0,d1.w)      *
01:00000A50 66FE            	  1139:             bne.s *               * branch if Z clear
                            	  1140: *             EA = n(An,D.L)  - BYTE only
01:00000A52 08B000030800    	  1141:             bclr.b #3,0(a0,d0.l)
01:00000A58 67FE            	  1142:             beq.s *               * branch if Z set
01:00000A5A 08B000041800    	  1143:             bclr.b #4,0(a0,d1.l)      *
01:00000A60 67FE            	  1144:             beq.s *               * branch if Z set
01:00000A62 08B000051801    	  1145:             bclr.b #5,1(a0,d1.l)      *
01:00000A68 66FE            	  1146:             bne.s *               * branch if Z clear
                            	  1147: *             EA = n(An,A.W)  - BYTE only
01:00000A6A 08B000069000    	  1148:             bclr.b #6,0(a0,a1.w)
01:00000A70 67FE            	  1149:             beq.s *               * branch if Z set
01:00000A72 08B00001A000    	  1150:             bclr.b #1,0(a0,a2.w)      *
01:00000A78 66FE            	  1151:             bne.s *               * branch if Z clear
01:00000A7A 08B00007A001    	  1152:             bclr.b #7,1(a0,a2.w)      *
01:00000A80 67FE            	  1153:             beq.s *               * branch if Z set
                            	  1154: *             EA = n(An,A.L)  - BYTE only
01:00000A82 08B000009800    	  1155:             bclr.b #0,0(a0,a1.l)
01:00000A88 66FE            	  1156:             bne.s *               * branch if Z clear
01:00000A8A 08B00000A800    	  1157:             bclr.b #0,0(a0,a2.l)      *
01:00000A90 67FE            	  1158:             beq.s *               * branch if Z set
01:00000A92 08B00001A801    	  1159:             bclr.b #1,1(a0,a2.l)      *
01:00000A98 66FE            	  1160:             bne.s *               * branch if Z clear
01:00000A9A 307C0100        	  1161:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A9E 0C1800B6        	  1162:             cmpi.b #$B6,(a0)+
01:00000AA2 66FE            	  1163:             bne.s *               * branch if Z clear
01:00000AA4 0C1800EC        	  1164:             cmpi.b #$EC,(a0)+
01:00000AA8 66FE            	  1165:             bne.s *               * branch if Z clear
01:00000AAA 0C180059        	  1166:             cmpi.b #$59,(a0)+
01:00000AAE 67FE            	  1167:             beq.s *               * branch if Z set
                            	  1168: 
                            	  1169: 
                            	  1170: *             EA = x.W  - BYTE only
01:00000AB0 307C0100        	  1171:             move.l #$00000100,a0      * point to memory to address
01:00000AB4 10FC00FF        	  1172:             move.b #$FF,(a0)+         * populate test data
01:00000AB8 08B800000100    	  1173:             bclr.b #0,$0100
01:00000ABE 67FE            	  1174:             beq.s *               * branch if Z set
01:00000AC0 08B800010100    	  1175:             bclr.b #1,$0100           *
01:00000AC6 67FE            	  1176:             beq.s *               * branch if Z set
01:00000AC8 307C0100        	  1177:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000ACC 0C1800FC        	  1178:             cmpi.b #$FC,(a0)+
01:00000AD0 66FE            	  1179:             bne.s *               * branch if Z clear
                            	  1180: 
                            	  1181: 
                            	  1182: *             EA = x.L  - BYTE only
01:00000AD2 207C0000F100    	  1183:             move.l #$F100,a0      * point to memory to address 0x100
01:00000AD8 10BC00FF        	  1184:             move.b #$FF,(a0)          * populate test data
01:00000ADC 08B900000000F100	  1185:             bclr.b #0,$F100
01:00000AE4 67FE            	  1186:             beq.s *               * branch if Z set
01:00000AE6 08B900010000F100	  1187:             bclr.b #1,$F100       *
01:00000AEE 67FE            	  1188:             beq.s *               * branch if Z set
01:00000AF0 08B900020000F100	  1189:             bclr.b #2,$F100       *
01:00000AF8 67FE            	  1190:             beq.s *               * branch if Z set
01:00000AFA 207C0000F100    	  1191:             move.l #$F100,a0      * point to memory to address 0x100
01:00000B00 0C1800F8        	  1192:             cmpi.b #$F8,(a0)+
01:00000B04 66FE            	  1193:             bne.s *               * branch if Z clear
                            	  1194: 
                            	  1195: 
                            	  1196: * Bit Number.s Dynamic
                            	  1197: 
                            	  1198: *             EA = Dn  - LONG only
01:00000B06 203CFF00FF00    	  1199:             move.l #$FF00FF00,d0      * populate test data
01:00000B0C 7A00            	  1200:             move.l #0,d5              * populate bit.s number to test
01:00000B0E 7C01            	  1201:             move.l #1,d6              * populate bit.s number to test
01:00000B10 7E1F            	  1202:             move.l #31,d7              * populate bit.s number to test
                            	  1203: 
01:00000B12 0B80            	  1204:             bclr.l d5,d0
01:00000B14 66FE            	  1205:             bne.s *               * branch if Z clear
01:00000B16 0D80            	  1206:             bclr.l d6,d0              *
01:00000B18 66FE            	  1207:             bne.s *               * branch if Z clear
01:00000B1A 0F80            	  1208:             bclr.l d7,d0             *
01:00000B1C 67FE            	  1209:             beq.s *               * branch if Z set
01:00000B1E 0C807F00FF00    	  1210:             cmpi.l #$7F00FF00,d0
01:00000B24 66FE            	  1211:             bne.s *               * branch if Z clear
                            	  1212: 
                            	  1213: 
                            	  1214: *             EA = (An)  - BYTE only
01:00000B26 7A00            	  1215:             move.l #0,d5              * populate bit.s number to test
01:00000B28 7C01            	  1216:             move.l #1,d6              * populate bit.s number to test
01:00000B2A 7E07            	  1217:             move.l #7,d7              * populate bit.s number to test
01:00000B2C 307C0100        	  1218:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B30 10BC0081        	  1219:             move.b #$81,(a0)          * populate test data
01:00000B34 0B90            	  1220:             bclr.b d5,(a0)
01:00000B36 67FE            	  1221:             beq.s *               * branch if Z set
01:00000B38 0D90            	  1222:             bclr.b d6,(a0)            *
01:00000B3A 66FE            	  1223:             bne.s *               * branch if Z clear
01:00000B3C 0F90            	  1224:             bclr.b d7,(a0)            *
01:00000B3E 67FE            	  1225:             beq.s *               * branch if Z set
01:00000B40 4A10            	  1226:             cmpi.b #$00,(a0)
01:00000B42 66FE            	  1227:             bne.s *               * branch if Z clear
                            	  1228: 
                            	  1229: 
                            	  1230: *             EA = (An)+  - BYTE only
01:00000B44 307C0100        	  1231:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B48 10FC0001        	  1232:             move.b #$01,(a0)+         * populate test data
01:00000B4C 10FC00FC        	  1233:             move.b #$FC,(a0)+         * populate test data
01:00000B50 10FC0080        	  1234:             move.b #$80,(a0)+         * populate test data
01:00000B54 307C0100        	  1235:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B58 0B98            	  1236:             bclr.b d5,(a0)+
01:00000B5A 67FE            	  1237:             beq.s *               * branch if Z set
01:00000B5C 0D98            	  1238:             bclr.b d6,(a0)+           *
01:00000B5E 66FE            	  1239:             bne.s *               * branch if Z clear
01:00000B60 0F98            	  1240:             bclr.b d7,(a0)+           *
01:00000B62 67FE            	  1241:             beq.s *               * branch if Z set
01:00000B64 307C0100        	  1242:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B68 4A18            	  1243:             cmpi.b #$00,(a0)+
01:00000B6A 66FE            	  1244:             bne.s *               * branch if Z clear
01:00000B6C 0C1800FC        	  1245:             cmpi.b #$FC,(a0)+
01:00000B70 66FE            	  1246:             bne.s *               * branch if Z clear
01:00000B72 4A18            	  1247:             cmpi.b #$00,(a0)+
01:00000B74 66FE            	  1248:             bne.s *               * branch if Z clear
                            	  1249: 
                            	  1250: *             EA = -(An)  - BYTE only
01:00000B76 307C0100        	  1251:             move.l #$00000100,a0      * point to memory to address
01:00000B7A 10FC0080        	  1252:             move.b #$80,(a0)+         * populate test data
01:00000B7E 10FC00FC        	  1253:             move.b #$FC,(a0)+         * populate test data
01:00000B82 10FC0001        	  1254:             move.b #$01,(a0)+         * populate test data
01:00000B86 307C0103        	  1255:             move.l #$00000103,a0      * point to memory to address
01:00000B8A 0BA0            	  1256:             bclr.b d5,-(a0)
01:00000B8C 67FE            	  1257:             beq.s *               * branch if Z set
01:00000B8E 0DA0            	  1258:             bclr.b d6,-(a0)           *
01:00000B90 66FE            	  1259:             bne.s *               * branch if Z clear
01:00000B92 0FA0            	  1260:             bclr.b d7,-(a0)           *
01:00000B94 67FE            	  1261:             beq.s *               * branch if Z set
01:00000B96 307C0103        	  1262:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000B9A 4A20            	  1263:             cmpi.b #$00,-(a0)
01:00000B9C 66FE            	  1264:             bne.s *               * branch if Z clear
01:00000B9E 0C2000FC        	  1265:             cmpi.b #$FC,-(a0)
01:00000BA2 66FE            	  1266:             bne.s *               * branch if Z clear
01:00000BA4 4A20            	  1267:             cmpi.b #$00,-(a0)
01:00000BA6 66FE            	  1268:             bne.s *               * branch if Z clear
                            	  1269: 
                            	  1270: *             EA = n(An)  - BYTE only
01:00000BA8 307C0100        	  1271:             move.l #$00000100,a0      * point to memory to address
01:00000BAC 10FC0001        	  1272:             move.b #$01,(a0)+         * populate test data
01:00000BB0 10FC00FC        	  1273:             move.b #$FC,(a0)+         * populate test data
01:00000BB4 10FC0080        	  1274:             move.b #$80,(a0)+         * populate test data
01:00000BB8 307C0100        	  1275:             move.l #$00000100,a0      * point to memory to address
01:00000BBC 0B90            	  1276:             bclr.b d5,0(a0)
01:00000BBE 67FE            	  1277:             beq.s *               * branch if Z set
01:00000BC0 0DA80001        	  1278:             bclr.b d6,1(a0)           *
01:00000BC4 66FE            	  1279:             bne.s *               * branch if Z clear
01:00000BC6 0FA80002        	  1280:             bclr.b d7,2(a0)           *
01:00000BCA 67FE            	  1281:             beq.s *               * branch if Z set
01:00000BCC 307C0100        	  1282:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BD0 4A18            	  1283:             cmpi.b #$00,(a0)+
01:00000BD2 66FE            	  1284:             bne.s *               * branch if Z clear
01:00000BD4 0C1800FC        	  1285:             cmpi.b #$FC,(a0)+
01:00000BD8 66FE            	  1286:             bne.s *               * branch if Z clear
01:00000BDA 4A18            	  1287:             cmpi.b #$00,(a0)+
01:00000BDC 66FE            	  1288:             bne.s *               * branch if Z clear
                            	  1289: 
                            	  1290: *             EA = n(An,R.W)  - BYTE only
01:00000BDE 307C0100        	  1291:             move.l #$00000100,a0      * point to memory to address
01:00000BE2 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000BE6 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
01:00000BEA 10FC00FF        	  1294:             move.b #$FF,(a0)+         * populate test data
01:00000BEE 307C0103        	  1295:             move.l #$00000103,a0      * point to memory to address
01:00000BF2 307C0100        	  1296:             move.l #$00000100,a0      * point to memory to address
01:00000BF6 93C9            	  1297:             move.l #$00000000,a1      * point to memory to address
01:00000BF8 347C0001        	  1298:             move.l #$00000001,a2      * point to memory to address
01:00000BFC 7000            	  1299:             moveq  #$00000000,d0      * point to memory to address
01:00000BFE 7201            	  1300:             moveq  #$00000001,d1      * point to memory to address
01:00000C00 0BB00000        	  1301:             bclr.b d5,0(a0,d0.w)
01:00000C04 67FE            	  1302:             beq.s *               * branch if Z set
01:00000C06 0DB01000        	  1303:             bclr.b d6,0(a0,d1.w)      *
01:00000C0A 67FE            	  1304:             beq.s *               * branch if Z set
01:00000C0C 0FB01001        	  1305:             bclr.b d7,1(a0,d1.w)      *
01:00000C10 67FE            	  1306:             beq.s *               * branch if Z set
                            	  1307: *             EA = n(An,R.L)  - BYTE only
01:00000C12 0BB00800        	  1308:             bclr.b d5,0(a0,d0.l)
01:00000C16 66FE            	  1309:             bne.s *               * branch if Z clear
01:00000C18 0DB01800        	  1310:             bclr.b d6,0(a0,d1.l)      *
01:00000C1C 66FE            	  1311:             bne.s *               * branch if Z clear
01:00000C1E 0FB01801        	  1312:             bclr.b d7,1(a0,d1.l)      *
01:00000C22 66FE            	  1313:             bne.s *               * branch if Z clear
                            	  1314: *             EA = n(An,A.W)  - BYTE only
01:00000C24 0BB09000        	  1315:             bclr.b d5,0(a0,a1.w)
01:00000C28 66FE            	  1316:             bne.s *               * branch if Z clear
01:00000C2A 0DB0A000        	  1317:             bclr.b d6,0(a0,a2.w)      *
01:00000C2E 66FE            	  1318:             bne.s *               * branch if Z clear
01:00000C30 0FB0A001        	  1319:             bclr.b d7,1(a0,a2.w)      *
01:00000C34 66FE            	  1320:             bne.s *               * branch if Z clear
                            	  1321: *             EA = n(An,A.L)  - BYTE only
01:00000C36 0BB09800        	  1322:             bclr.b d5,0(a0,a1.l)
01:00000C3A 66FE            	  1323:             bne.s *               * branch if Z clear
01:00000C3C 0DB0A800        	  1324:             bclr.b d6,0(a0,a2.l)      *
01:00000C40 66FE            	  1325:             bne.s *               * branch if Z clear
01:00000C42 0FB0A801        	  1326:             bclr.b d7,1(a0,a2.l)      *
01:00000C46 66FE            	  1327:             bne.s *               * branch if Z clear
01:00000C48 307C0100        	  1328:             move.l #$00000100,a0      * point to memory to address
01:00000C4C 0C1000FE        	  1329:             cmpi.b #$FE,(a0)
01:00000C50 66FE            	  1330:             bne.s *               * branch if Z clear
                            	  1331: 
                            	  1332: *             EA = x.W  - BYTE only
01:00000C52 307C0100        	  1333:             move.l #$00000100,a0      * point to memory to address
01:00000C56 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000C5A 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
01:00000C5E 10FC00FF        	  1336:             move.b #$FF,(a0)+         * populate test data
01:00000C62 0BB80100        	  1337:             bclr.b d5,$0100
01:00000C66 67FE            	  1338:             beq.s *               * branch if Z set
01:00000C68 0DB80101        	  1339:             bclr.b d6,$0101           *
01:00000C6C 67FE            	  1340:             beq.s *               * branch if Z set
01:00000C6E 0FB80102        	  1341:             bclr.b d7,$0102           *
01:00000C72 67FE            	  1342:             beq.s *               * branch if Z set
01:00000C74 307C0100        	  1343:             move.l #$00000100,a0      * point to memory to address
01:00000C78 0C1800FE        	  1344:             cmpi.b #$FE,(a0)+
01:00000C7C 66FE            	  1345:             bne.s *               * branch if Z clear
                            	  1346: 
                            	  1347: *             EA = x.L  - BYTE only
01:00000C7E 207C0000F100    	  1348:             move.l #$F100,a0      * point to memory to address 0x100
01:00000C84 10FC0001        	  1349:             move.b #$01,(a0)+         * populate test data
01:00000C88 10FC00FC        	  1350:             move.b #$FC,(a0)+         * populate test data
01:00000C8C 10FC0080        	  1351:             move.b #$80,(a0)+         * populate test data
01:00000C90 0BB90000F100    	  1352:             bclr.b d5,$F100
01:00000C96 67FE            	  1353:             beq.s *               * branch if Z set
01:00000C98 0DB90000F101    	  1354:             bclr.b d6,$F101       *
01:00000C9E 66FE            	  1355:             bne.s *               * branch if Z clear
01:00000CA0 0FB90000F102    	  1356:             bclr.b d7,$F102       *
01:00000CA6 67FE            	  1357:             beq.s *               * branch if Z set
01:00000CA8 207C0000F101    	  1358:             move.l #$F101,a0      * point to memory to address 0x100
01:00000CAE 0C1000FC        	  1359:             cmpi.b #$FC,(a0)
01:00000CB2 66FE            	  1360:             bne.s *               * branch if Z clear
                            	  1361: 
                            	  1362: 
                            	  1363: 
01:00000CB4 4E75            	  1364:     rts
                            	  1365: 
                            	  1366: *-----------------------------------------------------------
                            	  1367: *-----------------------------------------------------------
                            	  1368: * OPCODE : BSET
                            	  1369: *-----------------------------------------------------------
                            	  1370: *-----------------------------------------------------------
                            	  1371: op_BSET:
                            	  1372: 
                            	  1373: 
                            	  1374: *  Bit Number.s Static
                            	  1375: 
                            	  1376: *             EA = Dn  - LONG only
01:00000CB6 7000            	  1377:             moveq  #$00000000,d0      * populate test data
01:00000CB8 08C00000        	  1378:             bset.l #0,d0
01:00000CBC 66FE            	  1379:             bne.s *               * branch if Z clear
01:00000CBE 08C00001        	  1380:             bset.l #1,d0              *
01:00000CC2 66FE            	  1381:             bne.s *               * branch if Z clear
01:00000CC4 08C0000F        	  1382:             bset.l #15,d0             *
01:00000CC8 66FE            	  1383:             bne.s *               * branch if Z clear
01:00000CCA 08C0001F        	  1384:             bset.l #31,d0             *
01:00000CCE 66FE            	  1385:             bne.s *               * branch if Z clear
01:00000CD0 0C8080008003    	  1386:             cmpi.l #$80008003,d0
01:00000CD6 66FE            	  1387:             bne.s *               * branch if Z clear
                            	  1388: 
                            	  1389: 
                            	  1390: *             EA = (An)  - BYTE only
01:00000CD8 307C0100        	  1391:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CDC 10BC0000        	  1392:             move.b #$00,(a0)          * populate test data
01:00000CE0 08D00000        	  1393:             bset.b #0,(a0)
01:00000CE4 66FE            	  1394:             bne.s *               * branch if Z clear
01:00000CE6 08D00007        	  1395:             bset.b #7,(a0)            *
01:00000CEA 66FE            	  1396:             bne.s *               * branch if Z clear
01:00000CEC 0C100081        	  1397:             cmpi.b #$81,(a0)
01:00000CF0 66FE            	  1398:             bne.s *               * branch if Z clear
                            	  1399: 
                            	  1400: *             EA = (An)+  - BYTE only
01:00000CF2 307C0100        	  1401:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CF6 10FC0000        	  1402:             move.b #$00,(a0)+         * populate test data
01:00000CFA 10FC0000        	  1403:             move.b #$00,(a0)+         * populate test data
01:00000CFE 307C0100        	  1404:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000D02 08D80000        	  1405:             bset.b #0,(a0)+
01:00000D06 66FE            	  1406:             bne.s *               * branch if Z clear
01:00000D08 08D80001        	  1407:             bset.b #1,(a0)+           *
01:00000D0C 66FE            	  1408:             bne.s *               * branch if Z clear
01:00000D0E 307C0100        	  1409:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000D12 0C180001        	  1410:             cmpi.b #$01,(a0)+
01:00000D16 66FE            	  1411:             bne.s *               * branch if Z clear
01:00000D18 0C180002        	  1412:             cmpi.b #$02,(a0)+
01:00000D1C 66FE            	  1413:             bne.s *               * branch if Z clear
                            	  1414: 
                            	  1415: 
                            	  1416: *             EA = -(An)  - BYTE only
01:00000D1E 307C0100        	  1417:             move.l #$00000100,a0      * point to memory to address
01:00000D22 10FC0000        	  1418:             move.b #$00,(a0)+         * populate test data
01:00000D26 10FC0000        	  1419:             move.b #$00,(a0)+         * populate test data
01:00000D2A 08E00007        	  1420:             bset.b #7,-(a0)
01:00000D2E 66FE            	  1421:             bne.s *               * branch if Z clear
01:00000D30 08E00000        	  1422:             bset.b #0,-(a0)           *
01:00000D34 66FE            	  1423:             bne.s *               * branch if Z clear
01:00000D36 307C0102        	  1424:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000D3A 0C200080        	  1425:             cmpi.b #$80,-(a0)
01:00000D3E 66FE            	  1426:             bne.s *               * branch if Z clear
01:00000D40 0C200001        	  1427:             cmpi.b #$01,-(a0)
01:00000D44 66FE            	  1428:             bne.s *               * branch if Z clear
                            	  1429: 
                            	  1430: 
                            	  1431: *             EA = n(An)  - BYTE only
01:00000D46 307C0100        	  1432:             move.l #$00000100,a0      * point to memory to address
01:00000D4A 10FC0000        	  1433:             move.b #$00,(a0)+         * populate test data
01:00000D4E 10FC0000        	  1434:             move.b #$00,(a0)+         * populate test data
01:00000D52 307C0100        	  1435:             move.l #$00000100,a0      * point to memory to address
01:00000D56 08D00000        	  1436:             bset.b #0,0(a0)
01:00000D5A 66FE            	  1437:             bne.s *               * branch if Z clear
01:00000D5C 08E800040001    	  1438:             bset.b #4,1(a0)           *
01:00000D62 66FE            	  1439:             bne.s *               * branch if Z clear
01:00000D64 307C0100        	  1440:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000D68 0C180001        	  1441:             cmpi.b #$01,(a0)+
01:00000D6C 66FE            	  1442:             bne.s *               * branch if Z clear
01:00000D6E 0C180010        	  1443:             cmpi.b #$10,(a0)+
01:00000D72 66FE            	  1444:             bne.s *               * branch if Z clear
                            	  1445: 
                            	  1446: 
                            	  1447: *             EA = n(An,D.W)  - BYTE only
01:00000D74 307C0100        	  1448:             move.l #$00000100,a0      * point to memory to address
01:00000D78 93C9            	  1449:             move.l #$00000000,a1      * point to memory to address
01:00000D7A 347C0004        	  1450:             move.l #$00000004,a2      * point to memory to address
01:00000D7E 7000            	  1451:             moveq  #$00000000,d0      * point to memory to address
01:00000D80 7201            	  1452:             moveq  #$00000001,d1      * point to memory to address
01:00000D82 10FC0000        	  1453:             move.b #$00,(a0)+         * populate test data
01:00000D86 10FC0000        	  1454:             move.b #$00,(a0)+         * populate test data
01:00000D8A 10FC0000        	  1455:             move.b #$00,(a0)+         * populate test data
01:00000D8E 10FC0000        	  1456:             move.b #$00,(a0)+         * populate test data
01:00000D92 10FC0000        	  1457:             move.b #$00,(a0)+         * populate test data
01:00000D96 10FC0000        	  1458:             move.b #$00,(a0)+         * populate test data
01:00000D9A 10FC0000        	  1459:             move.b #$00,(a0)+         * populate test data
01:00000D9E 10FC0000        	  1460:             move.b #$00,(a0)+         * populate test data
01:00000DA2 10FC0000        	  1461:             move.b #$00,(a0)+         * populate test data
01:00000DA6 10FC0000        	  1462:             move.b #$00,(a0)+         * populate test data
01:00000DAA 307C0100        	  1463:             move.l #$00000100,a0      * point to memory to address
01:00000DAE 08F000000000    	  1464:             bset.b #0,0(a0,d0.w)
01:00000DB4 66FE            	  1465:             bne.s *               * branch if Z clear
01:00000DB6 08F000011000    	  1466:             bset.b #1,0(a0,d1.w)      *
01:00000DBC 66FE            	  1467:             bne.s *               * branch if Z clear
01:00000DBE 08F000021001    	  1468:             bset.b #2,1(a0,d1.w)      *
01:00000DC4 66FE            	  1469:             bne.s *               * branch if Z clear
                            	  1470: *             EA = n(An,D.L)  - BYTE only
01:00000DC6 08F000030802    	  1471:             bset.b #3,2(a0,d0.l)
01:00000DCC 66FE            	  1472:             bne.s *               * branch if Z clear
01:00000DCE 08F000041800    	  1473:             bset.b #4,0(a0,d1.l)      *
01:00000DD4 66FE            	  1474:             bne.s *               * branch if Z clear
01:00000DD6 08F000051801    	  1475:             bset.b #5,1(a0,d1.l)      *
01:00000DDC 66FE            	  1476:             bne.s *               * branch if Z clear
                            	  1477: *             EA = n(An,A.W)  - BYTE only
01:00000DDE 08F000069000    	  1478:             bset.b #6,0(a0,a1.w)
01:00000DE4 66FE            	  1479:             bne.s *               * branch if Z clear
01:00000DE6 08F00001A000    	  1480:             bset.b #1,0(a0,a2.w)      *
01:00000DEC 66FE            	  1481:             bne.s *               * branch if Z clear
01:00000DEE 08F00007A001    	  1482:             bset.b #7,1(a0,a2.w)      *
01:00000DF4 66FE            	  1483:             bne.s *               * branch if Z clear
                            	  1484: *             EA = n(An,A.L)  - BYTE only
01:00000DF6 08F00000A802    	  1485:             bset.b #0,2(a0,a2.l)
01:00000DFC 66FE            	  1486:             bne.s *               * branch if Z clear
01:00000DFE 08F00000A803    	  1487:             bset.b #0,3(a0,a2.l)      *
01:00000E04 66FE            	  1488:             bne.s *               * branch if Z clear
01:00000E06 08F00001A804    	  1489:             bset.b #1,4(a0,a2.l)      *
01:00000E0C 66FE            	  1490:             bne.s *               * branch if Z clear
01:00000E0E 307C0100        	  1491:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E12 0C9841122C00    	  1492:             cmpi.l #$41122C00,(a0)+
01:00000E18 66FE            	  1493:             bne.s *               * branch if Z clear
01:00000E1A 0C9802800101    	  1494:             cmpi.l #$02800101,(a0)+
01:00000E20 66FE            	  1495:             bne.s *
                            	  1496: 
                            	  1497: 
                            	  1498: 
                            	  1499: *             EA = x.W  - BYTE only
01:00000E22 307C0100        	  1500:             move.l #$00000100,a0      * point to memory to address
01:00000E26 10FC0000        	  1501:             move.b #$00,(a0)+         * populate test data
01:00000E2A 08F800000100    	  1502:             bset.b #0,$0100
01:00000E30 66FE            	  1503:             bne.s *               * branch if Z clear
01:00000E32 08F800010100    	  1504:             bset.b #1,$0100           *
01:00000E38 66FE            	  1505:             bne.s *               * branch if Z clear
01:00000E3A 307C0100        	  1506:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E3E 0C180003        	  1507:             cmpi.b #$03,(a0)+
01:00000E42 66FE            	  1508:             bne.s *
                            	  1509: 
                            	  1510: 
                            	  1511: *             EA = x.L  - BYTE only
01:00000E44 207C0000F100    	  1512:             move.l #$F100,a0      * point to memory to address 0x100
01:00000E4A 10BC0000        	  1513:             move.b #$00,(a0)          * populate test data
01:00000E4E 08F900000000F100	  1514:             bset.b #0,$F100
01:00000E56 66FE            	  1515:             bne.s *               * branch if Z clear
01:00000E58 08F900010000F100	  1516:             bset.b #1,$F100       *
01:00000E60 66FE            	  1517:             bne.s *               * branch if Z clear
01:00000E62 08F900020000F100	  1518:             bset.b #2,$F100       *
01:00000E6A 66FE            	  1519:             bne.s *               * branch if Z clear
01:00000E6C 207C0000F100    	  1520:             move.l #$F100,a0      * point to memory to address 0x100
01:00000E72 0C180007        	  1521:             cmpi.b #$07,(a0)+
01:00000E76 66FE            	  1522:             bne.s *
                            	  1523: 
                            	  1524: 
                            	  1525: * Bit Number.s Dynamic
                            	  1526: 
                            	  1527: *             EA = Dn  - LONG only
01:00000E78 7000            	  1528:             moveq  #$00000000,d0      * populate test data
01:00000E7A 7A00            	  1529:             move.l #0,d5              * populate bit.s number to test
01:00000E7C 7C01            	  1530:             move.l #1,d6              * populate bit.s number to test
01:00000E7E 7E1F            	  1531:             move.l #31,d7              * populate bit.s number to test
                            	  1532: 
01:00000E80 0BC0            	  1533:             bset.l d5,d0
01:00000E82 66FE            	  1534:             bne.s *               * branch if Z clear
01:00000E84 0DC0            	  1535:             bset.l d6,d0              *
01:00000E86 66FE            	  1536:             bne.s *               * branch if Z clear
01:00000E88 0FC0            	  1537:             bset.l d7,d0             *
01:00000E8A 66FE            	  1538:             bne.s *               * branch if Z clear
01:00000E8C 0C8080000003    	  1539:             cmpi.l #$80000003,d0
01:00000E92 66FE            	  1540:             bne.s *               * branch if Z clear
                            	  1541: 
                            	  1542: 
                            	  1543: *             EA = (An)  - BYTE only
01:00000E94 7A00            	  1544:             move.l #0,d5              * populate bit.s number to test
01:00000E96 7C01            	  1545:             move.l #1,d6              * populate bit.s number to test
01:00000E98 7E07            	  1546:             move.l #7,d7              * populate bit.s number to test
01:00000E9A 307C0100        	  1547:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E9E 10BC0000        	  1548:             move.b #$00,(a0)          * populate test data
01:00000EA2 0BD0            	  1549:             bset.b d5,(a0)
01:00000EA4 66FE            	  1550:             bne.s *               * branch if Z clear
01:00000EA6 0DD0            	  1551:             bset.b d6,(a0)            *
01:00000EA8 66FE            	  1552:             bne.s *               * branch if Z clear
01:00000EAA 0FD0            	  1553:             bset.b d7,(a0)            *
01:00000EAC 66FE            	  1554:             bne.s *               * branch if Z clear
01:00000EAE 0C100083        	  1555:             cmpi.b #$83,(a0)
01:00000EB2 66FE            	  1556:             bne.s *               * branch if Z clear
                            	  1557: 
                            	  1558: 
                            	  1559: *             EA = (An)+  - BYTE only
01:00000EB4 307C0100        	  1560:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EB8 10FC0000        	  1561:             move.b #$00,(a0)+         * populate test data
01:00000EBC 10FC0000        	  1562:             move.b #$00,(a0)+         * populate test data
01:00000EC0 10FC0000        	  1563:             move.b #$00,(a0)+         * populate test data
01:00000EC4 307C0100        	  1564:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EC8 0BD8            	  1565:             bset.b d5,(a0)+
01:00000ECA 66FE            	  1566:             bne.s *               * branch if Z clear
01:00000ECC 0DD8            	  1567:             bset.b d6,(a0)+           *
01:00000ECE 66FE            	  1568:             bne.s *               * branch if Z clear
01:00000ED0 0FD8            	  1569:             bset.b d7,(a0)+           *
01:00000ED2 66FE            	  1570:             bne.s *               * branch if Z clear
01:00000ED4 307C0100        	  1571:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000ED8 0C180001        	  1572:             cmpi.b #$01,(a0)+
01:00000EDC 66FE            	  1573:             bne.s *               * branch if Z clear
01:00000EDE 0C180002        	  1574:             cmpi.b #$02,(a0)+
01:00000EE2 66FE            	  1575:             bne.s *               * branch if Z clear
01:00000EE4 0C180080        	  1576:             cmpi.b #$80,(a0)+
01:00000EE8 66FE            	  1577:             bne.s *               * branch if Z clear
                            	  1578: 
                            	  1579: *             EA = -(An)  - BYTE only
01:00000EEA 307C0100        	  1580:             move.l #$00000100,a0      * point to memory to address
01:00000EEE 10FC0000        	  1581:             move.b #$00,(a0)+         * populate test data
01:00000EF2 10FC0000        	  1582:             move.b #$00,(a0)+         * populate test data
01:00000EF6 10FC0000        	  1583:             move.b #$00,(a0)+         * populate test data
01:00000EFA 307C0103        	  1584:             move.l #$00000103,a0      * point to memory to address
01:00000EFE 0BE0            	  1585:             bset.b d5,-(a0)
01:00000F00 66FE            	  1586:             bne.s *               * branch if Z clear
01:00000F02 0DE0            	  1587:             bset.b d6,-(a0)           *
01:00000F04 66FE            	  1588:             bne.s *               * branch if Z clear
01:00000F06 0FE0            	  1589:             bset.b d7,-(a0)           *
01:00000F08 66FE            	  1590:             bne.s *               * branch if Z clear
01:00000F0A 307C0103        	  1591:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000F0E 0C200001        	  1592:             cmpi.b #$01,-(a0)
01:00000F12 66FE            	  1593:             bne.s *               * branch if Z clear
01:00000F14 0C200002        	  1594:             cmpi.b #$02,-(a0)
01:00000F18 66FE            	  1595:             bne.s *               * branch if Z clear
01:00000F1A 0C200080        	  1596:             cmpi.b #$80,-(a0)
01:00000F1E 66FE            	  1597:             bne.s *               * branch if Z clear
                            	  1598: 
                            	  1599: *             EA = n(An)  - BYTE only
01:00000F20 307C0100        	  1600:             move.l #$00000100,a0      * point to memory to address
01:00000F24 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
01:00000F28 10FC0000        	  1602:             move.b #$00,(a0)+         * populate test data
01:00000F2C 10FC0000        	  1603:             move.b #$00,(a0)+         * populate test data
01:00000F30 307C0100        	  1604:             move.l #$00000100,a0      * point to memory to address
01:00000F34 0BD0            	  1605:             bset.b d5,0(a0)
01:00000F36 66FE            	  1606:             bne.s *               * branch if Z clear
01:00000F38 0DE80001        	  1607:             bset.b d6,1(a0)           *
01:00000F3C 66FE            	  1608:             bne.s *               * branch if Z clear
01:00000F3E 0FE80002        	  1609:             bset.b d7,2(a0)           *
01:00000F42 66FE            	  1610:             bne.s *               * branch if Z clear
01:00000F44 307C0100        	  1611:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F48 0C180001        	  1612:             cmpi.b #$01,(a0)+
01:00000F4C 66FE            	  1613:             bne.s *               * branch if Z clear
01:00000F4E 0C180002        	  1614:             cmpi.b #$02,(a0)+
01:00000F52 66FE            	  1615:             bne.s *               * branch if Z clear
01:00000F54 0C180080        	  1616:             cmpi.b #$80,(a0)+
01:00000F58 66FE            	  1617:             bne.s *               * branch if Z clear
                            	  1618: 
                            	  1619: *             EA = n(An,R.W)  - BYTE only
01:00000F5A 307C0100        	  1620:             move.l #$00000100,a0      * point to memory to address
01:00000F5E 10FC0000        	  1621:             move.b #$00,(a0)+         * populate test data
01:00000F62 10FC0000        	  1622:             move.b #$00,(a0)+         * populate test data
01:00000F66 10FC0000        	  1623:             move.b #$00,(a0)+         * populate test data
01:00000F6A 10FC0000        	  1624:             move.b #$00,(a0)+         * populate test data
01:00000F6E 10FC0000        	  1625:             move.b #$00,(a0)+         * populate test data
01:00000F72 10FC0000        	  1626:             move.b #$00,(a0)+         * populate test data
01:00000F76 10FC0000        	  1627:             move.b #$00,(a0)+         * populate test data
01:00000F7A 10FC0000        	  1628:             move.b #$00,(a0)+         * populate test data
01:00000F7E 10FC0000        	  1629:             move.b #$00,(a0)+         * populate test data
01:00000F82 10FC0000        	  1630:             move.b #$00,(a0)+         * populate test data
01:00000F86 10FC0000        	  1631:             move.b #$00,(a0)+         * populate test data
01:00000F8A 10FC0000        	  1632:             move.b #$00,(a0)+         * populate test data
01:00000F8E 307C0100        	  1633:             move.l #$00000100,a0      * point to memory to address
01:00000F92 93C9            	  1634:             move.l #$00000000,a1      * point to memory to address
01:00000F94 347C0001        	  1635:             move.l #$00000001,a2      * point to memory to address
01:00000F98 7000            	  1636:             moveq  #$00000000,d0      * point to memory to address
01:00000F9A 7201            	  1637:             moveq  #$00000001,d1      * point to memory to address
01:00000F9C 0BF00000        	  1638:             bset.b d5,0(a0,d0.w)
01:00000FA0 66FE            	  1639:             bne.s *               * branch if Z clear
01:00000FA2 0DF01000        	  1640:             bset.b d6,0(a0,d1.w)      *
01:00000FA6 66FE            	  1641:             bne.s *               * branch if Z clear
01:00000FA8 0FF01001        	  1642:             bset.b d7,1(a0,d1.w)      *
01:00000FAC 66FE            	  1643:             bne.s *               * branch if Z clear
                            	  1644: *             EA = n(An,R.L)  - BYTE only
01:00000FAE 0BF00802        	  1645:             bset.b d5,2(a0,d0.l)
01:00000FB2 66FE            	  1646:             bne.s *               * branch if Z clear
01:00000FB4 0DF01803        	  1647:             bset.b d6,3(a0,d1.l)      *
01:00000FB8 66FE            	  1648:             bne.s *               * branch if Z clear
01:00000FBA 0FF01804        	  1649:             bset.b d7,4(a0,d1.l)      *
01:00000FBE 66FE            	  1650:             bne.s *               * branch if Z clear
                            	  1651: *             EA = n(An,A.W)  - BYTE only
01:00000FC0 0BF09005        	  1652:             bset.b d5,5(a0,a1.w)
01:00000FC4 66FE            	  1653:             bne.s *               * branch if Z clear
01:00000FC6 0DF0A006        	  1654:             bset.b d6,6(a0,a2.w)      *
01:00000FCA 66FE            	  1655:             bne.s *               * branch if Z clear
01:00000FCC 0FF0A007        	  1656:             bset.b d7,7(a0,a2.w)      *
01:00000FD0 66FE            	  1657:             bne.s *               * branch if Z clear
                            	  1658: *             EA = n(An,A.L)  - BYTE only
01:00000FD2 0BF09808        	  1659:             bset.b d5,8(a0,a1.l)
01:00000FD6 66FE            	  1660:             bne.s *               * branch if Z clear
01:00000FD8 0DF0A809        	  1661:             bset.b d6,9(a0,a2.l)      *
01:00000FDC 66FE            	  1662:             bne.s *               * branch if Z clear
01:00000FDE 0FF0A80A        	  1663:             bset.b d7,10(a0,a2.l)      *
01:00000FE2 66FE            	  1664:             bne.s *               * branch if Z clear
01:00000FE4 307C0100        	  1665:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FE8 0C9801028100    	  1666:             cmpi.l #$01028100,(a0)+
01:00000FEE 66FE            	  1667:             bne.s *               * branch if Z clear
01:00000FF0 0C9802810002    	  1668:             cmpi.l #$02810002,(a0)+
01:00000FF6 66FE            	  1669:             bne.s *
                            	  1670: 
                            	  1671: 
                            	  1672: *             EA = x.W  - BYTE only
01:00000FF8 307C0100        	  1673:             move.l #$00000100,a0      * point to memory to address
01:00000FFC 10FC0000        	  1674:             move.b #$00,(a0)+         * populate test data
01:00001000 10FC0000        	  1675:             move.b #$00,(a0)+         * populate test data
01:00001004 10FC0000        	  1676:             move.b #$00,(a0)+         * populate test data
01:00001008 0BF80100        	  1677:             bset.b d5,$0100
01:0000100C 66FE            	  1678:             bne.s *               * branch if Z clear
01:0000100E 0DF80100        	  1679:             bset.b d6,$0100           *
01:00001012 66FE            	  1680:             bne.s *               * branch if Z clear
01:00001014 0FF80100        	  1681:             bset.b d7,$0100           *
01:00001018 66FE            	  1682:             bne.s *               * branch if Z clear
01:0000101A 307C0100        	  1683:             move.l #$00000100,a0      * point to memory to address
01:0000101E 0C180083        	  1684:             cmpi.b #$83,(a0)+
01:00001022 66FE            	  1685:             bne.s *               * branch if Z clear
                            	  1686: 
                            	  1687: *             EA = x.L  - BYTE only
01:00001024 207C0000F100    	  1688:             move.l #$F100,a0      * point to memory to address 0x100
01:0000102A 10FC0000        	  1689:             move.b #$00,(a0)+         * populate test data
01:0000102E 10FC0000        	  1690:             move.b #$00,(a0)+         * populate test data
01:00001032 10FC0000        	  1691:             move.b #$00,(a0)+         * populate test data
01:00001036 0BF90000F100    	  1692:             bset.b d5,$F100
01:0000103C 66FE            	  1693:             bne.s *               * branch if Z clear
01:0000103E 0DF90000F100    	  1694:             bset.b d6,$F100       *
01:00001044 66FE            	  1695:             bne.s *               * branch if Z clear
01:00001046 0FF90000F100    	  1696:             bset.b d7,$F100       *
01:0000104C 66FE            	  1697:             bne.s *               * branch if Z clear
01:0000104E 207C0000F100    	  1698:             move.l #$F100,a0      * point to memory to address 0x100
01:00001054 0C100083        	  1699:             cmpi.b #$83,(a0)
01:00001058 66FE            	  1700:             bne.s *               * branch if Z clear
                            	  1701: 
                            	  1702: 
01:0000105A 4E75            	  1703:     rts
                            	  1704: 
                            	  1705: *-----------------------------------------------------------
                            	  1706: *-----------------------------------------------------------
                            	  1707: * OPCODE : MOVEP
                            	  1708: *-----------------------------------------------------------
                            	  1709: *-----------------------------------------------------------
                            	  1710: op_MOVEP:
                            	  1711: 
                            	  1712: * Dn --> x(An)
01:0000105C 307C0100        	  1713:             move.l #$00000100,a0
01:00001060 203C12345678    	  1714:             move.l #$12345678,d0
01:00001066 223CAABBCCDD    	  1715:             move.l #$AABBCCDD,d1
01:0000106C 20BC00000000    	  1716:             move.l #0,(a0)
01:00001072 217C000000000004	  1717:             move.l #0,4(a0)
                            	  1718: 
01:0000107A 01880000        	  1719:             movep.w d0,0(a0)      * even offset
01:0000107E 03880001        	  1720:             movep.w d1,1(a0)      * odd offset
                            	  1721: 
01:00001082 01C80004        	  1722:             movep.l d0,4(a0)      * even offset
01:00001086 03C80005        	  1723:             movep.l d1,5(a0)      * odd offset
                            	  1724: 
01:0000108A 0C9056CC78DD    	  1725:             cmpi.l #$56CC78DD,(a0)
01:00001090 66FE            	  1726:             bne.s *
01:00001092 0CA812AA34BB0004	  1727:             cmpi.l #$12AA34BB,4(a0)
01:0000109A 66FE            	  1728:             bne.s *
01:0000109C 0CA856CC78DD0008	  1729:             cmpi.l #$56CC78DD,8(a0)
01:000010A4 66FE            	  1730:             bne.s *
                            	  1731: 
                            	  1732: 
                            	  1733: * x(An)--> Dn
01:000010A6 203C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d0
01:000010AC 223C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d1
01:000010B2 243C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d2
01:000010B8 263C5A5A5A5A    	  1737:             move.l #$5a5a5a5a,d3
                            	  1738: 
01:000010BE 01080000        	  1739:             movep.w 0(a0),d0      * even offset
01:000010C2 03080001        	  1740:             movep.w 1(a0),d1      * odd offset
                            	  1741: 
01:000010C6 05480004        	  1742:             movep.l 4(a0),d2      * even offset
01:000010CA 07480005        	  1743:             movep.l 5(a0),d3      * odd offset
                            	  1744: 
01:000010CE 0C805A5A5678    	  1745:             cmpi.l #$5a5a5678,d0
01:000010D4 66FE            	  1746:             bne.s *
01:000010D6 0C815A5ACCDD    	  1747:             cmpi.l #$5a5aCCDD,d1
01:000010DC 66FE            	  1748:             bne.s *
01:000010DE 0C8212345678    	  1749:             cmpi.l #$12345678,d2
01:000010E4 66FE            	  1750:             bne.s *
01:000010E6 0C83AABBCCDD    	  1751:             cmpi.l #$AABBCCDD,d3
01:000010EC 66FE            	  1752:             bne.s *
                            	  1753: 
01:000010EE 4E75            	  1754:             rts
                            	  1755: 
                            	  1756: 
                            	  1757: 
                            	  1758: *-----------------------------------------------------------
                            	  1759: *-----------------------------------------------------------
                            	  1760: * OPCODE : BOOL_I
                            	  1761: *-----------------------------------------------------------
                            	  1762: *-----------------------------------------------------------
                            	  1763: op_BOOL_I:
                            	  1764: 
                            	  1765: *     Dn -- BYTE
01:000010F0 203C12345678    	  1766:             move.l #$12345678,d0
01:000010F6 44FC000F        	  1767:             move.w #$000F,CCR          * pre-set Flags
01:000010FA 000000FF        	  1768:             ori.b  #$FF,d0
01:000010FE 0A00005A        	  1769:             eori.b #$5A,d0
01:00001102 020000F0        	  1770:             andi.b #$F0,d0
01:00001106 69FE            	  1771:             bvs.s *                       * Check V,C are cleared
01:00001108 65FE            	  1772:             bcs.s *
01:0000110A 6AFE            	  1773:             bpl.s *                       * Verify if N flag is set
01:0000110C 02000000        	  1774:             andi.b #$00,d0
01:00001110 6BFE            	  1775:             bmi.s *                       * Verify if N flag is cleared
01:00001112 66FE            	  1776:             bne.s *                       * Verify if Z flag is set
                            	  1777: 
                            	  1778: *     Dn -- WORD
01:00001114 223C12345678    	  1779:             move.l #$12345678,d1
01:0000111A 44FC000F        	  1780:             move.w #$000F,CCR          * pre-set Flags
01:0000111E 0041FFFF        	  1781:             ori.w  #$FFFF,d1
01:00001122 0A415A5A        	  1782:             eori.w #$5A5A,d1
01:00001126 0241F0F0        	  1783:             andi.w #$F0F0,d1
01:0000112A 69FE            	  1784:             bvs.s *                       * Check V,C are cleared
01:0000112C 65FE            	  1785:             bcs.s *
01:0000112E 6AFE            	  1786:             bpl.s *                       * Verify if N flag is set
01:00001130 02410000        	  1787:             andi.w #$0000,d1
01:00001134 6BFE            	  1788:             bmi.s *                       * Verify if N flag is cleared
01:00001136 66FE            	  1789:             bne.s *                       * Verify if Z flag is set
                            	  1790: 
                            	  1791: *     Dn -- LONG
01:00001138 243C12345678    	  1792:             move.l #$12345678,d2
01:0000113E 44FC000F        	  1793:             move.w #$000F,CCR          * pre-set Flags
01:00001142 0082FFFFFFFF    	  1794:             ori.l  #$FFFFFFFF,d2
01:00001148 0A825A5A5A5A    	  1795:             eori.l #$5A5A5A5A,d2
01:0000114E 0282F0F0F0F0    	  1796:             andi.l #$F0F0F0F0,d2
01:00001154 69FE            	  1797:             bvs.s *                       * Check V,C are cleared
01:00001156 65FE            	  1798:             bcs.s *
01:00001158 6AFE            	  1799:             bpl.s *                       * Verify if N flag is set
01:0000115A 028200000000    	  1800:             andi.l #$00000000,d2
01:00001160 6BFE            	  1801:             bmi.s *                       * Verify if N flag is cleared
01:00001162 66FE            	  1802:             bne.s *                       * Verify if Z flag is set
                            	  1803: 
                            	  1804: 
                            	  1805: *     (An) -- BYTE
01:00001164 307C0100        	  1806:             move.l #$00000100,a0
01:00001168 20BC12345678    	  1807:             move.l #$12345678,(a0)
01:0000116E 44FC000F        	  1808:             move.w #$000F,CCR          * pre-set Flags
01:00001172 001000FF        	  1809:             ori.b  #$FF,(a0)
01:00001176 0A10005A        	  1810:             eori.b #$5A,(a0)
01:0000117A 021000F0        	  1811:             andi.b #$F0,(a0)
01:0000117E 69FE            	  1812:             bvs.s *                       * Check V,C are cleared
01:00001180 65FE            	  1813:             bcs.s *
01:00001182 6AFE            	  1814:             bpl.s *                       * Verify if N flag is set
01:00001184 02100000        	  1815:             andi.b #$00,(a0)
01:00001188 6BFE            	  1816:             bmi.s *                       * Verify if N flag is cleared
01:0000118A 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
01:0000118C 4A10            	  1818:             cmpi.b #$00,(a0)
01:0000118E 66FE            	  1819:             bne.s *                       * Verify if Z flag is set
                            	  1820: 
                            	  1821: *     (An) -- WORD
01:00001190 20BC12345678    	  1822:             move.l #$12345678,(a0)
01:00001196 44FC000F        	  1823:             move.w #$000F,CCR          * pre-set Flags
01:0000119A 0050FFFF        	  1824:             ori.w  #$FFFF,(a0)
01:0000119E 0A505A5A        	  1825:             eori.w #$5A5A,(a0)
01:000011A2 0250F0F0        	  1826:             andi.w #$F0F0,(a0)
01:000011A6 69FE            	  1827:             bvs.s *                       * Check V,C are cleared
01:000011A8 65FE            	  1828:             bcs.s *
01:000011AA 6AFE            	  1829:             bpl.s *                       * Verify if N flag is set
01:000011AC 02500000        	  1830:             andi.w #$0000,(a0)
01:000011B0 6BFE            	  1831:             bmi.s *                       * Verify if N flag is cleared
01:000011B2 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
01:000011B4 4A50            	  1833:             cmpi.w #$00,(a0)
01:000011B6 66FE            	  1834:             bne.s *                       * Verify if Z flag is set
                            	  1835: 
                            	  1836: *     (An) -- LONG
01:000011B8 20BC12345678    	  1837:             move.l #$12345678,(a0)
01:000011BE 44FC000F        	  1838:             move.w #$000F,CCR          * pre-set Flags
01:000011C2 0090FFFFFFFF    	  1839:             ori.l  #$FFFFFFFF,(a0)
01:000011C8 0A905A5A5A5A    	  1840:             eori.l #$5A5A5A5A,(a0)
01:000011CE 0290F0F0F0F0    	  1841:             andi.l #$F0F0F0F0,(a0)
01:000011D4 69FE            	  1842:             bvs.s *                       * Check V,C are cleared
01:000011D6 65FE            	  1843:             bcs.s *
01:000011D8 6AFE            	  1844:             bpl.s *                       * Verify if N flag is set
01:000011DA 029000000000    	  1845:             andi.l #$00000000,(a0)
01:000011E0 6BFE            	  1846:             bmi.s *                       * Verify if N flag is cleared
01:000011E2 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
01:000011E4 4A90            	  1848:             cmpi.l #$00,(a0)
01:000011E6 66FE            	  1849:             bne.s *                       * Verify if Z flag is set
                            	  1850: 
                            	  1851: 
                            	  1852: 
                            	  1853: *     (An)+ -- BYTE
01:000011E8 307C0100        	  1854:             move.l #$00000100,a0
01:000011EC 20BC00A5FF88    	  1855:             move.l #$00A5FF88,(a0)
01:000011F2 44FC000F        	  1856:             move.w #$000F,CCR          * pre-set Flags
                            	  1857: 
01:000011F6 001800F5        	  1858:             ori.b  #$F5,(a0)+
01:000011FA 6AFE            	  1859:             bpl.s *                       * Verify if N flag is set
01:000011FC 67FE            	  1860:             beq.s *                       * Verify if Z flag is cleared
                            	  1861: 
01:000011FE 4618            	  1862:             eori.b #$FF,(a0)+
01:00001200 6BFE            	  1863:             bmi.s *                       * Verify if N flag is cleared
01:00001202 67FE            	  1864:             beq.s *                       * Verify if Z flag is cleared
                            	  1865: 
01:00001204 021800AA        	  1866:             andi.b #$AA,(a0)+
01:00001208 6AFE            	  1867:             bpl.s *                       * Verify if N flag is set
01:0000120A 67FE            	  1868:             beq.s *                       * Verify if Z flag is cleared
                            	  1869: 
01:0000120C 307C0100        	  1870:             move.l #$00000100,a0
01:00001210 0C90F55AAA88    	  1871:             cmpi.l #$F55AAA88,(a0)
01:00001216 66FE            	  1872:             bne.s *                       * Verify if Z flag is set
                            	  1873: 
                            	  1874: 
                            	  1875: *     (An)+ -- WORD
01:00001218 307C0100        	  1876:             move.l #$00000100,a0
01:0000121C 327C0104        	  1877:             move.l #$00000104,a1
01:00001220 20BC00005A5A    	  1878:             move.l #$00005a5a,(a0)
01:00001226 22BC12345678    	  1879:             move.l #$12345678,(a1)
01:0000122C 44FC000F        	  1880:             move.w #$000F,CCR          * pre-set Flags
                            	  1881: 
01:00001230 00585678        	  1882:             ori.w  #$5678,(a0)+
01:00001234 6BFE            	  1883:             bmi.s *                       * Verify if N flag is cleared
01:00001236 67FE            	  1884:             beq.s *                       * Verify if Z flag is cleared
                            	  1885: 
01:00001238 4658            	  1886:             eori.w #$FFFF,(a0)+
01:0000123A 6AFE            	  1887:             bpl.s *                       * Verify if N flag is set
01:0000123C 67FE            	  1888:             beq.s *                       * Verify if Z flag is cleared
                            	  1889: 
01:0000123E 0258A55A        	  1890:             andi.w #$A55A,(a0)+
01:00001242 6BFE            	  1891:             bmi.s *                       * Verify if N flag is cleared
01:00001244 67FE            	  1892:             beq.s *                       * Verify if Z flag is cleared
                            	  1893: 
01:00001246 307C0100        	  1894:             move.l #$00000100,a0
01:0000124A 0C905678A5A5    	  1895:             cmpi.l #$5678a5a5,(a0)
01:00001250 307C0104        	  1896:             move.l #$00000104,a0
01:00001254 0C9000105678    	  1897:             cmpi.l #$00105678,(a0)
01:0000125A 66FE            	  1898:             bne.s *                       * Verify if Z flag is set
                            	  1899: 
                            	  1900: *     (An)+ -- LONG
01:0000125C 307C0100        	  1901:             move.l #$00000100,a0
01:00001260 20FC00000000    	  1902:             move.l #$00000000,(a0)+
01:00001266 20FC5A5A5A5A    	  1903:             move.l #$5a5a5a5a,(a0)+
01:0000126C 20FCFFFFFFFF    	  1904:             move.l #$FFFFFFFF,(a0)+
01:00001272 307C0100        	  1905:             move.l #$00000100,a0
01:00001276 44FC000F        	  1906:             move.w #$000F,CCR          * pre-set Flags
                            	  1907: 
01:0000127A 009812345678    	  1908:             ori.l  #$12345678,(a0)+
01:00001280 6BFE            	  1909:             bmi.s *                       * Verify if N flag is cleared
01:00001282 67FE            	  1910:             beq.s *                       * Verify if Z flag is cleared
                            	  1911: 
01:00001284 4698            	  1912:             eori.l #$FFFFFFFF,(a0)+
01:00001286 6AFE            	  1913:             bpl.s *                       * Verify if N flag is set
01:00001288 67FE            	  1914:             beq.s *                       * Verify if Z flag is cleared
                            	  1915: 
01:0000128A 0298A5A5A55A    	  1916:             andi.l #$A5A5A55A,(a0)+
01:00001290 6AFE            	  1917:             bpl.s *                       * Verify if N flag is set
01:00001292 67FE            	  1918:             beq.s *                       * Verify if Z flag is cleared
                            	  1919: 
01:00001294 307C0100        	  1920:             move.l #$00000100,a0
01:00001298 0C9812345678    	  1921:             cmpi.l #$12345678,(a0)+
01:0000129E 0C98A5A5A5A5    	  1922:             cmpi.l #$a5a5a5a5,(a0)+
01:000012A4 0C98A5A5A55A    	  1923:             cmpi.l #$a5a5a55a,(a0)+
01:000012AA 66FE            	  1924:             bne.s *                       * Verify if Z flag is set
                            	  1925: 
01:000012AC 4E75            	  1926:             rts
                            	  1927: 
                            	  1928: 
                            	  1929: *-----------------------------------------------------------
                            	  1930: *-----------------------------------------------------------
                            	  1931: * OPCODE : BSR
                            	  1932: *-----------------------------------------------------------
                            	  1933: *-----------------------------------------------------------
                            	  1934: 
                            	  1935: 
01:000012AE 223C11111111    	  1936: BSR_CLOSE1:     move.l #$11111111,d1
01:000012B4 4E75            	  1937:                 rts
                            	  1938: 
                            	  1939: 
                            	  1940: 
01:000012B6 61F6            	  1941: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:000012B8 612A            	  1942:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:000012BA 6100EE92        	  1943:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:000012BE 6100145A        	  1944:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1945: 
01:000012C2 0C8111111111    	  1946:                 cmpi.l #$11111111,d1
01:000012C8 66FE            	  1947:                 bne.s *
01:000012CA 0C8222222222    	  1948:                 cmpi.l #$22222222,d2
01:000012D0 66FE            	  1949:                 bne.s *
01:000012D2 0C8333333333    	  1950:                 cmpi.l #$33333333,d3
01:000012D8 66FE            	  1951:                 bne.s *
01:000012DA 0C8444444444    	  1952:                 cmpi.l #$44444444,d4
01:000012E0 66FE            	  1953:                 bne.s *
                            	  1954: 
01:000012E2 4E75            	  1955:                 rts
                            	  1956: 
                            	  1957: 
01:000012E4 243C22222222    	  1958: BSR_CLOSE2:     move.l #$22222222,d2
01:000012EA 4E75            	  1959:                 rts
                            	  1960: 
                            	  1961: *-----------------------------------------------------------
                            	  1962: *-----------------------------------------------------------
                            	  1963: * OPCODE : op_CMP_I
                            	  1964: *-----------------------------------------------------------
                            	  1965: *-----------------------------------------------------------
                            	  1966: op_CMP_I:
                            	  1967: 
01:000012EC 307C0100        	  1968:             move.l #$00000100,a0
01:000012F0 20BC00000100    	  1969:             move.l #$00000100,(a0)
                            	  1970: 
                            	  1971: *     REGISTER - BYTE
01:000012F6 7080            	  1972:             move.l #$FFFFFF80,d0
01:000012F8 0C000080        	  1973:             cmpi.b #$80,d0
01:000012FC 66FE            	  1974:             bne.s *                       * Check Z Flag  beq/bne
01:000012FE 6BFE            	  1975:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001300 65FE            	  1976:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001302 69FE            	  1977:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1978: 
01:00001304 223CFFFFF000    	  1979:             move.l #$FFFFF000,d1
01:0000130A 4A01            	  1980:             cmpi.b #$00,d1
01:0000130C 66FE            	  1981:             bne.s *                       * Check Z Flag  beq/bne
01:0000130E 6BFE            	  1982:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001310 65FE            	  1983:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001312 69FE            	  1984:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1985: 
01:00001314 7481D442        	  1986:             move.l #$FFFFFF02,d2
01:00001318 0C0200FF        	  1987:             cmpi.b #$FF,d2
01:0000131C 67FE            	  1988:             beq.s *                       * Check Z Flag  beq/bne
01:0000131E 6BFE            	  1989:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001320 64FE            	  1990:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001322 69FE            	  1991:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1992: 
01:00001324 263CFFFFFF7F    	  1993:             move.l #$FFFFFF7F,d3
01:0000132A 0C0300FF        	  1994:             cmpi.b #$FF,d3
01:0000132E 67FE            	  1995:             beq.s *                       * Check Z Flag  beq/bne
01:00001330 6AFE            	  1996:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001332 64FE            	  1997:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001334 68FE            	  1998:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1999: 
                            	  2000: 
                            	  2001: *     REGISTER - WORD
01:00001336 203CFFFF8000    	  2002:             move.l #$FFFF8000,d0
01:0000133C 0C408000        	  2003:             cmpi.w #$8000,d0
01:00001340 66FE            	  2004:             bne.s *                       * Check Z Flag  beq/bne
01:00001342 6BFE            	  2005:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001344 65FE            	  2006:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001346 69FE            	  2007:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2008: 
01:00001348 223CFFF00000    	  2009:             move.l #$FFF00000,d1
01:0000134E 4A41            	  2010:             cmpi.w #$0000,d1
01:00001350 66FE            	  2011:             bne.s *                       * Check Z Flag  beq/bne
01:00001352 6BFE            	  2012:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001354 65FE            	  2013:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001356 69FE            	  2014:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2015: 
01:00001358 243CFFFF0002    	  2016:             move.l #$FFFF0002,d2
01:0000135E 0C42FFFF        	  2017:             cmpi.w #$FFFF,d2
01:00001362 67FE            	  2018:             beq.s *                       * Check Z Flag  beq/bne
01:00001364 6BFE            	  2019:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001366 64FE            	  2020:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001368 69FE            	  2021:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2022: 
01:0000136A 263CFFFF7FFF    	  2023:             move.l #$FFFF7FFF,d3
01:00001370 0C43FFFF        	  2024:             cmpi.w #$FFFF,d3
01:00001374 67FE            	  2025:             beq.s *                       * Check Z Flag  beq/bne
01:00001376 6AFE            	  2026:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001378 64FE            	  2027:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000137A 68FE            	  2028:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2029: 
                            	  2030: *     REGISTER - LONG
01:0000137C 203C80000000    	  2031:             move.l #$80000000,d0
01:00001382 0C8080000000    	  2032:             cmpi.l #$80000000,d0
01:00001388 66FE            	  2033:             bne.s *                       * Check Z Flag  beq/bne
01:0000138A 6BFE            	  2034:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000138C 65FE            	  2035:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000138E 69FE            	  2036:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2037: 
01:00001390 7200            	  2038:             moveq  #$00000000,d1
01:00001392 4A81            	  2039:             cmpi.l #$00000000,d1
01:00001394 66FE            	  2040:             bne.s *                       * Check Z Flag  beq/bne
01:00001396 6BFE            	  2041:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001398 65FE            	  2042:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000139A 69FE            	  2043:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2044: 
01:0000139C 7402            	  2045:             moveq  #$00000002,d2
01:0000139E 0C82FFFFFFFF    	  2046:             cmpi.l #$FFFFFFFF,d2
01:000013A4 67FE            	  2047:             beq.s *                       * Check Z Flag  beq/bne
01:000013A6 6BFE            	  2048:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013A8 64FE            	  2049:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013AA 69FE            	  2050:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2051: 
01:000013AC 263C7FFFFFFF    	  2052:             move.l #$7FFFFFFF,d3
01:000013B2 0C83FFFFFFFF    	  2053:             cmpi.l #$FFFFFFFF,d3
01:000013B8 67FE            	  2054:             beq.s *                       * Check Z Flag  beq/bne
01:000013BA 6AFE            	  2055:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013BC 64FE            	  2056:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013BE 68FE            	  2057:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: 
                            	  2062: *     EA=x(An,Dn) - BYTE
01:000013C0 307C0100        	  2063:             move.l #$00000100,a0
01:000013C4 7E04            	  2064:             moveq  #$00000004,d7
                            	  2065: 
01:000013C6 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
01:000013CE 21BCFFFFFF80700C	  2067:             move.l #$FFFFFF80,12(a0,d7)
01:000013D6 0C300080700F    	  2068:             cmpi.b #$80,15(a0,d7)
01:000013DC 66FE            	  2069:             bne.s *                       * Check Z Flag  beq/bne
01:000013DE 6BFE            	  2070:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013E0 65FE            	  2071:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013E2 69FE            	  2072:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2073: 
01:000013E4 21BCFFFFF000700C	  2074:             move.l #$FFFFF000,12(a0,d7)
01:000013EC 4A30700F        	  2075:             cmpi.b #$00,15(a0,d7)
01:000013F0 66FE            	  2076:             bne.s *                       * Check Z Flag  beq/bne
01:000013F2 6BFE            	  2077:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013F4 65FE            	  2078:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013F6 69FE            	  2079:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2080: 
01:000013F8 21BCFFFFFF02700C	  2081:             move.l #$FFFFFF02,12(a0,d7)
01:00001400 0C3000FF700F    	  2082:             cmpi.b #$FF,15(a0,d7)
01:00001406 67FE            	  2083:             beq.s *                       * Check Z Flag  beq/bne
01:00001408 6BFE            	  2084:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000140A 64FE            	  2085:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000140C 69FE            	  2086:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2087: 
01:0000140E 21BCFFFFFF7F700C	  2088:             move.l #$FFFFFF7F,12(a0,d7)
01:00001416 0C3000FF700F    	  2089:             cmpi.b #$FF,15(a0,d7)
01:0000141C 67FE            	  2090:             beq.s *                       * Check Z Flag  beq/bne
01:0000141E 6AFE            	  2091:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001420 64FE            	  2092:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001422 68FE            	  2093:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2094: 
                            	  2095: 
                            	  2096: *     EA=x(An,Dn) - WORD
01:00001424 21BCFFFF8000700C	  2097:             move.l #$FFFF8000,12(a0,d7)
01:0000142C 0C708000700E    	  2098:             cmpi.w #$8000,14(a0,d7)
01:00001432 66FE            	  2099:             bne.s *                       * Check Z Flag  beq/bne
01:00001434 6BFE            	  2100:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001436 65FE            	  2101:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001438 69FE            	  2102:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2103: 
01:0000143A 21BCFFF00000700C	  2104:             move.l #$FFF00000,12(a0,d7)
01:00001442 4A70700E        	  2105:             cmpi.w #$0000,14(a0,d7)
01:00001446 66FE            	  2106:             bne.s *                       * Check Z Flag  beq/bne
01:00001448 6BFE            	  2107:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000144A 65FE            	  2108:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000144C 69FE            	  2109:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2110: 
01:0000144E 21BCFFFF0002700C	  2111:             move.l #$FFFF0002,12(a0,d7)
01:00001456 0C70FFFF700E    	  2112:             cmpi.w #$FFFF,14(a0,d7)
01:0000145C 67FE            	  2113:             beq.s *                       * Check Z Flag  beq/bne
01:0000145E 6BFE            	  2114:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001460 64FE            	  2115:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001462 69FE            	  2116:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2117: 
01:00001464 21BCFFFF7FFF700C	  2118:             move.l #$FFFF7FFF,12(a0,d7)
01:0000146C 0C70FFFF700E    	  2119:             cmpi.w #$FFFF,14(a0,d7)
01:00001472 67FE            	  2120:             beq.s *                       * Check Z Flag  beq/bne
01:00001474 6AFE            	  2121:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001476 64FE            	  2122:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001478 68FE            	  2123:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2124: 
                            	  2125: *     EA=x(An,Dn) - LONG
01:0000147A 21BC80000000700C	  2126:             move.l #$80000000,12(a0,d7)
01:00001482 0CB080000000700C	  2127:             cmpi.l #$80000000,12(a0,d7)
01:0000148A 66FE            	  2128:             bne.s *                       * Check Z Flag  beq/bne
01:0000148C 6BFE            	  2129:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000148E 65FE            	  2130:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001490 69FE            	  2131:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2132: 
01:00001492 21BC00000000700C	  2133:             move.l #$00000000,12(a0,d7)
01:0000149A 4AB0700C        	  2134:             cmpi.l #$00000000,12(a0,d7)
01:0000149E 66FE            	  2135:             bne.s *                       * Check Z Flag  beq/bne
01:000014A0 6BFE            	  2136:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014A2 65FE            	  2137:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014A4 69FE            	  2138:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2139: 
01:000014A6 21BC00000002700C	  2140:             move.l #$00000002,12(a0,d7)
01:000014AE 0CB0FFFFFFFF700C	  2141:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:000014B6 67FE            	  2142:             beq.s *                       * Check Z Flag  beq/bne
01:000014B8 6BFE            	  2143:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014BA 64FE            	  2144:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014BC 69FE            	  2145:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2146: 
01:000014BE 21BC7FFFFFFF700C	  2147:             move.l #$7FFFFFFF,12(a0,d7)
01:000014C6 0CB0FFFFFFFF700C	  2148:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:000014CE 67FE            	  2149:             beq.s *                       * Check Z Flag  beq/bne
01:000014D0 6AFE            	  2150:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014D2 64FE            	  2151:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014D4 68FE            	  2152:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2153: 
                            	  2154: 
                            	  2155: 
                            	  2156: 
01:000014D6 4E75            	  2157:             rts
                            	  2158: 
                            	  2159: 
                            	  2160: 
                            	  2161: *-----------------------------------------------------------
                            	  2162: *-----------------------------------------------------------
                            	  2163: * OPCODE : ADD_I
                            	  2164: *-----------------------------------------------------------
                            	  2165: *-----------------------------------------------------------
                            	  2166: op_ADD_I:
                            	  2167: 
                            	  2168: *     EA = Dn  - Byte
01:000014D8 203C12345678    	  2169:             move.l #$12345678,d0      * populate test data
01:000014DE 06000000        	  2170:             addi.b #0,d0
01:000014E2 67FE            	  2171:             beq.s *                       * Check Z Flag  beq/bne
01:000014E4 6BFE            	  2172:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014E6 65FE            	  2173:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014E8 69FE            	  2174:             bvs.s *                       * Check V Flag  bvc/bvs
01:000014EA 06000010        	  2175:             addi.b #$10,d0
01:000014EE 67FE            	  2176:             beq.s *                       * Check Z Flag  beq/bne
01:000014F0 6AFE            	  2177:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014F2 65FE            	  2178:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014F4 68FE            	  2179:             bvc.s *                       * Check V Flag  bvc/bvs
01:000014F6 060000A5        	  2180:             addi.b #$A5,d0
01:000014FA 67FE            	  2181:             beq.s *                       * Check Z Flag  beq/bne
01:000014FC 6BFE            	  2182:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014FE 64FE            	  2183:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001500 68FE            	  2184:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001502 0C00002D        	  2185:             cmpi.b #$2D,d0
01:00001506 66FE            	  2186:             bne.s *                       * Check Z Flag  beq/bne
                            	  2187: 
                            	  2188: *     EA = Dn  - WORD
01:00001508 203C12345678    	  2189:             move.l #$12345678,d0      * populate test data
01:0000150E 06400000        	  2190:             addi.w #0,d0
01:00001512 67FE            	  2191:             beq.s *                       * Check Z Flag  beq/bne
01:00001514 6BFE            	  2192:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001516 65FE            	  2193:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001518 69FE            	  2194:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000151A 06407000        	  2195:             addi.w #$7000,d0
01:0000151E 67FE            	  2196:             beq.s *                       * Check Z Flag  beq/bne
01:00001520 6AFE            	  2197:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001522 65FE            	  2198:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001524 68FE            	  2199:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001526 0640A55A        	  2200:             addi.w #$A55A,d0
01:0000152A 67FE            	  2201:             beq.s *                       * Check Z Flag  beq/bne
01:0000152C 6BFE            	  2202:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000152E 64FE            	  2203:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001530 68FE            	  2204:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001532 0C406BD2        	  2205:             cmpi.w #$6BD2,d0
01:00001536 66FE            	  2206:             bne.s *                       * Check Z Flag  beq/bne
                            	  2207: 
                            	  2208: *     EA = Dn  - LONG
01:00001538 203C12345678    	  2209:             move.l #$12345678,d0      * populate test data
01:0000153E 068000000000    	  2210:             addi.l #0,d0
01:00001544 67FE            	  2211:             beq.s *                       * Check Z Flag  beq/bne
01:00001546 6BFE            	  2212:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001548 65FE            	  2213:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000154A 69FE            	  2214:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000154C 0680F0000000    	  2215:             addi.l #$F0000000,d0
01:00001552 67FE            	  2216:             beq.s *                       * Check Z Flag  beq/bne
01:00001554 6BFE            	  2217:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001556 64FE            	  2218:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001558 69FE            	  2219:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000155A 0680855AA55A    	  2220:             addi.l #$855AA55A,d0
01:00001560 67FE            	  2221:             beq.s *                       * Check Z Flag  beq/bne
01:00001562 6AFE            	  2222:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001564 65FE            	  2223:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001566 69FE            	  2224:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001568 0680A0000000    	  2225:             addi.l #$A0000000,d0
01:0000156E 68FE            	  2226:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001570 0C80278EFBD2    	  2227:             cmpi.l #$278EFBD2,d0
01:00001576 66FE            	  2228:             bne.s *                       * Check Z Flag  beq/bne
                            	  2229: 
                            	  2230: 
                            	  2231: 
                            	  2232: *     EA = x.L  - Byte
01:00001578 207C0000F100    	  2233:             move.l #$F100,a0      * populate test data
01:0000157E 20BC12345678    	  2234:             move.l #$12345678,(a0)     * populate test data
01:00001584 063900000000F103	  2235:             addi.b #0,$F103
01:0000158C 67FE            	  2236:             beq.s *                       * Check Z Flag  beq/bne
01:0000158E 6BFE            	  2237:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001590 65FE            	  2238:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001592 69FE            	  2239:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001594 063900100000F103	  2240:             addi.b #$10,$F103
01:0000159C 67FE            	  2241:             beq.s *                       * Check Z Flag  beq/bne
01:0000159E 6AFE            	  2242:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015A0 65FE            	  2243:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015A2 68FE            	  2244:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015A4 063900A50000F103	  2245:             addi.b #$A5,$F103
01:000015AC 67FE            	  2246:             beq.s *                       * Check Z Flag  beq/bne
01:000015AE 6BFE            	  2247:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015B0 64FE            	  2248:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015B2 68FE            	  2249:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015B4 0C39002D0000F103	  2250:             cmpi.b #$2D,$F103
01:000015BC 66FE            	  2251:             bne.s *                       * Check Z Flag  beq/bne
                            	  2252: 
                            	  2253: *     EA = x.L- WORD
01:000015BE 207C0000F100    	  2254:             move.l #$F100,a0      * populate test data
01:000015C4 20BC12345678    	  2255:             move.l #$12345678,(a0)     * populate test data
01:000015CA 067900000000F100	  2256:             addi.w #0,$F100
01:000015D2 67FE            	  2257:             beq.s *                       * Check Z Flag  beq/bne
01:000015D4 6BFE            	  2258:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015D6 65FE            	  2259:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015D8 69FE            	  2260:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015DA 067970000000F100	  2261:             addi.w #$7000,$F100
01:000015E2 67FE            	  2262:             beq.s *                       * Check Z Flag  beq/bne
01:000015E4 6AFE            	  2263:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015E6 65FE            	  2264:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015E8 68FE            	  2265:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015EA 0679A55A0000F100	  2266:             addi.w #$A55A,$F100
01:000015F2 67FE            	  2267:             beq.s *                       * Check Z Flag  beq/bne
01:000015F4 6BFE            	  2268:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015F6 64FE            	  2269:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015F8 68FE            	  2270:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015FA 0C79278E0000F100	  2271:             cmpi.w #$278E,$F100
01:00001602 66FE            	  2272:             bne.s *                       * Check Z Flag  beq/bne
                            	  2273: 
                            	  2274: *     EA = x.L- LONG
01:00001604 23FC123456780000	  2275:             move.l #$12345678,$F100  * populate test data
01:0000160C F100
01:0000160E 06B9000000000000	  2276:             addi.l #0,$F100
01:00001616 F100
01:00001618 67FE            	  2277:             beq.s *                       * Check Z Flag  beq/bne
01:0000161A 6BFE            	  2278:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000161C 65FE            	  2279:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000161E 69FE            	  2280:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001620 06B9F00000000000	  2281:             addi.l #$F0000000,$F100
01:00001628 F100
01:0000162A 67FE            	  2282:             beq.s *                       * Check Z Flag  beq/bne
01:0000162C 6BFE            	  2283:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000162E 64FE            	  2284:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001630 69FE            	  2285:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001632 06B9855AA55A0000	  2286:             addi.l #$855AA55A,$F100
01:0000163A F100
01:0000163C 67FE            	  2287:             beq.s *                       * Check Z Flag  beq/bne
01:0000163E 6AFE            	  2288:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001640 65FE            	  2289:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001642 69FE            	  2290:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001644 06B9A00000000000	  2291:             addi.l #$A0000000,$F100
01:0000164C F100
01:0000164E 68FE            	  2292:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001650 0CB9278EFBD20000	  2293:             cmpi.l #$278EFBD2,$F100
01:00001658 F100
01:0000165A 66FE            	  2294:             bne.s *                       * Check Z Flag  beq/bne
                            	  2295: 
01:0000165C 4E75            	  2296:             rts
                            	  2297: 
                            	  2298: 
                            	  2299: *-----------------------------------------------------------
                            	  2300: *-----------------------------------------------------------
                            	  2301: * OPCODE : SUB_I
                            	  2302: *-----------------------------------------------------------
                            	  2303: *-----------------------------------------------------------
                            	  2304: op_SUB_I:
                            	  2305: 
                            	  2306: *     EA = Dn  - Byte
01:0000165E 203C12345678    	  2307:             move.l #$12345678,d0      * populate test data
01:00001664 04000000        	  2308:             subi.b #0,d0
01:00001668 67FE            	  2309:             beq.s *                       * Check Z Flag  beq/bne
01:0000166A 6BFE            	  2310:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000166C 65FE            	  2311:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000166E 69FE            	  2312:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001670 04000010        	  2313:             subi.b #$10,d0
01:00001674 67FE            	  2314:             beq.s *                       * Check Z Flag  beq/bne
01:00001676 6BFE            	  2315:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001678 65FE            	  2316:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000167A 69FE            	  2317:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000167C 040000A5        	  2318:             subi.b #$A5,d0
01:00001680 67FE            	  2319:             beq.s *                       * Check Z Flag  beq/bne
01:00001682 6AFE            	  2320:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001684 64FE            	  2321:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001686 68FE            	  2322:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001688 0C0000C3        	  2323:             cmpi.b #$C3,d0
01:0000168C 66FE            	  2324:             bne.s *                       * Check Z Flag  beq/bne
                            	  2325: 
                            	  2326: *     EA = Dn  - WORD
01:0000168E 203C12345678    	  2327:             move.l #$12345678,d0      * populate test data
01:00001694 04400000        	  2328:             subi.w #0,d0
01:00001698 67FE            	  2329:             beq.s *                       * Check Z Flag  beq/bne
01:0000169A 6BFE            	  2330:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000169C 65FE            	  2331:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000169E 69FE            	  2332:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016A0 04407000        	  2333:             subi.w #$7000,d0
01:000016A4 67FE            	  2334:             beq.s *                       * Check Z Flag  beq/bne
01:000016A6 6AFE            	  2335:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016A8 64FE            	  2336:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016AA 69FE            	  2337:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016AC 0440A55A        	  2338:             subi.w #$A55A,d0
01:000016B0 67FE            	  2339:             beq.s *                       * Check Z Flag  beq/bne
01:000016B2 6BFE            	  2340:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016B4 65FE            	  2341:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016B6 69FE            	  2342:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016B8 0C40411E        	  2343:             cmpi.w #$411E,d0
01:000016BC 66FE            	  2344:             bne.s *                       * Check Z Flag  beq/bne
                            	  2345: 
                            	  2346: *     EA = Dn  - LONG
01:000016BE 203C12345678    	  2347:             move.l #$12345678,d0      * populate test data
01:000016C4 048000000000    	  2348:             subi.l #0,d0
01:000016CA 67FE            	  2349:             beq.s *                       * Check Z Flag  beq/bne
01:000016CC 6BFE            	  2350:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016CE 65FE            	  2351:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016D0 69FE            	  2352:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016D2 0480F0000000    	  2353:             subi.l #$F0000000,d0
01:000016D8 67FE            	  2354:             beq.s *                       * Check Z Flag  beq/bne
01:000016DA 6BFE            	  2355:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016DC 64FE            	  2356:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016DE 69FE            	  2357:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016E0 0480855AA55A    	  2358:             subi.l #$855AA55A,d0
01:000016E6 67FE            	  2359:             beq.s *                       * Check Z Flag  beq/bne
01:000016E8 6AFE            	  2360:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016EA 64FE            	  2361:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016EC 68FE            	  2362:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016EE 0480A0000000    	  2363:             subi.l #$A0000000,d0
01:000016F4 69FE            	  2364:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016F6 0C80FCD9B11E    	  2365:             cmpi.l #$FCD9B11E,d0
01:000016FC 66FE            	  2366:             bne.s *                       * Check Z Flag  beq/bne
                            	  2367: 
                            	  2368: 
                            	  2369: 
                            	  2370: *     EA = x.L  - Byte
01:000016FE 207C0000F100    	  2371:             move.l #$F100,a0      * populate test data
01:00001704 20BC12345678    	  2372:             move.l #$12345678,(a0)     * populate test data
01:0000170A 043900000000F103	  2373:             subi.b #0,$F103
01:00001712 67FE            	  2374:             beq.s *                       * Check Z Flag  beq/bne
01:00001714 6BFE            	  2375:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001716 65FE            	  2376:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001718 69FE            	  2377:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000171A 043900100000F103	  2378:             subi.b #$10,$F103
01:00001722 67FE            	  2379:             beq.s *                       * Check Z Flag  beq/bne
01:00001724 6BFE            	  2380:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001726 65FE            	  2381:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001728 69FE            	  2382:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000172A 043900A50000F103	  2383:             subi.b #$A5,$F103
01:00001732 67FE            	  2384:             beq.s *                       * Check Z Flag  beq/bne
01:00001734 6AFE            	  2385:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001736 64FE            	  2386:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001738 68FE            	  2387:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000173A 0C3900C30000F103	  2388:             cmpi.b #$C3,$F103
01:00001742 66FE            	  2389:             bne.s *                       * Check Z Flag  beq/bne
                            	  2390: 
                            	  2391: *     EA = x.L- WORD
01:00001744 207C0000F100    	  2392:             move.l #$F100,a0      * populate test data
01:0000174A 20BC12345678    	  2393:             move.l #$12345678,(a0)     * populate test data
01:00001750 047900000000F100	  2394:             subi.w #0,$F100
01:00001758 67FE            	  2395:             beq.s *                       * Check Z Flag  beq/bne
01:0000175A 6BFE            	  2396:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000175C 65FE            	  2397:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000175E 69FE            	  2398:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001760 047970000000F100	  2399:             subi.w #$7000,$F100
01:00001768 67FE            	  2400:             beq.s *                       * Check Z Flag  beq/bne
01:0000176A 6AFE            	  2401:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000176C 64FE            	  2402:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000176E 69FE            	  2403:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001770 0479A55A0000F100	  2404:             subi.w #$A55A,$F100
01:00001778 67FE            	  2405:             beq.s *                       * Check Z Flag  beq/bne
01:0000177A 6AFE            	  2406:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000177C 64FE            	  2407:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000177E 69FE            	  2408:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001780 0C79FCDA0000F100	  2409:             cmpi.w #$FCDA,$F100
01:00001788 66FE            	  2410:             bne.s *                       * Check Z Flag  beq/bne
                            	  2411: 
                            	  2412: *     EA = x.L- LONG
01:0000178A 23FC123456780000	  2413:             move.l #$12345678,$F100  * populate test data
01:00001792 F100
01:00001794 04B9000000000000	  2414:             subi.l #0,$F100
01:0000179C F100
01:0000179E 67FE            	  2415:             beq.s *                       * Check Z Flag  beq/bne
01:000017A0 6BFE            	  2416:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017A2 65FE            	  2417:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017A4 69FE            	  2418:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017A6 04B9F00000000000	  2419:             subi.l #$F0000000,$F100
01:000017AE F100
01:000017B0 67FE            	  2420:             beq.s *                       * Check Z Flag  beq/bne
01:000017B2 6BFE            	  2421:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017B4 64FE            	  2422:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017B6 69FE            	  2423:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017B8 04B9855AA55A0000	  2424:             subi.l #$855AA55A,$F100
01:000017C0 F100
01:000017C2 67FE            	  2425:             beq.s *                       * Check Z Flag  beq/bne
01:000017C4 6AFE            	  2426:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017C6 64FE            	  2427:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017C8 68FE            	  2428:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017CA 04B9A00000000000	  2429:             subi.l #$A0000000,$F100
01:000017D2 F100
01:000017D4 69FE            	  2430:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017D6 0CB9FCD9B11E0000	  2431:             cmpi.l #$FCD9B11E,$F100
01:000017DE F100
01:000017E0 66FE            	  2432:             bne.s *                       * Check Z Flag  beq/bne
                            	  2433: 
01:000017E2 4E75            	  2434:             rts
                            	  2435: 
                            	  2436: 
                            	  2437: 
                            	  2438: *-----------------------------------------------------------
                            	  2439: *-----------------------------------------------------------
                            	  2440: * OPCODE : MOVE
                            	  2441: *-----------------------------------------------------------
                            	  2442: *-----------------------------------------------------------
                            	  2443: op_MOVE:
01:000017E4 203C11223344    	  2444:             move.l #$11223344,d0
01:000017EA 223C55667788    	  2445:             move.l #$55667788,d1
01:000017F0 243C8899AABB    	  2446:             move.l #$8899aabb,d2
01:000017F6 263CCCDDEEFF    	  2447:             move.l #$ccddeeff,d3
01:000017FC 7800            	  2448:             moveq  #$00000000,d4
01:000017FE 7A00            	  2449:             moveq  #$00000000,d5
01:00001800 7C00            	  2450:             moveq  #$00000000,d6
01:00001802 7E00            	  2451:             moveq  #$00000000,d7
01:00001804 207C44332211    	  2452:             move.l #$44332211,a0
01:0000180A 227C88776655    	  2453:             move.l #$88776655,a1
01:00001810 247CBBAA9988    	  2454:             move.l #$bbaa9988,a2
01:00001816 267CFFEEDDCC    	  2455:             move.l #$ffeeddcc,a3
                            	  2456: 
01:0000181C 1800            	  2457:             move.b d0,d4              * BYTE - DATA REGISTER
01:0000181E 67FE            	  2458:             beq.s *                       * Check Z Flag  beq/bne
01:00001820 6BFE            	  2459:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001822 0C8400000044    	  2460:             cmpi.l #$00000044,d4
01:00001828 66FE            	  2461:             bne.s *                       * Check Z Flag  beq/bne
                            	  2462: 
01:0000182A 3A01            	  2463:             move.w d1,d5              * WORD - DATA REGISTER
01:0000182C 67FE            	  2464:             beq.s *                       * Check Z Flag  beq/bne
01:0000182E 6BFE            	  2465:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001830 0C8500007788    	  2466:             cmpi.l #$00007788,d5
01:00001836 66FE            	  2467:             bne.s *                       * Check Z Flag  beq/bne
                            	  2468: 
01:00001838 2C02            	  2469:             move.l d2,d6              * LONG - DATA REGISTER
01:0000183A 67FE            	  2470:             beq.s *                       * Check Z Flag  beq/bne
01:0000183C 6AFE            	  2471:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000183E 0C868899AABB    	  2472:             cmpi.l #$8899aabb,d6
01:00001844 66FE            	  2473:             bne.s *                       * Check Z Flag  beq/bne
                            	  2474: 
01:00001846 3A09            	  2475:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:00001848 67FE            	  2476:             beq.s *                       * Check Z Flag  beq/bne
01:0000184A 6BFE            	  2477:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000184C 0C8500006655    	  2478:             cmpi.l #$00006655,d5
01:00001852 66FE            	  2479:             bne.s *                       * Check Z Flag  beq/bne
                            	  2480: 
01:00001854 2C0A            	  2481:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:00001856 67FE            	  2482:             beq.s *                       * Check Z Flag  beq/bne
01:00001858 6AFE            	  2483:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000185A 0C86BBAA9988    	  2484:             cmpi.l #$bbaa9988,d6
01:00001860 66FE            	  2485:             bne.s *                       * Check Z Flag  beq/bne
                            	  2486: 
                            	  2487: 
01:00001862 3842            	  2488:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:00001864 B9C2            	  2489:             cmpa.l d2,a4
01:00001866 67FE            	  2490:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2491: 
01:00001868 2A41            	  2492:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:0000186A BBC1            	  2493:             cmpa.l d1,a5
01:0000186C 66FE            	  2494:             bne.s *                       * Check Z Flag  beq/bne
                            	  2495: 
                            	  2496: 
                            	  2497: 
                            	  2498: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2499: 
01:0000186E 203C11223344    	  2500:             move.l #$11223344,d0
01:00001874 223C00010100    	  2501:             move.l #$00010100,d1
01:0000187A 243C8899AABB    	  2502:             move.l #$8899aabb,d2
01:00001880 7601            	  2503:             moveq  #$00000001,d3
01:00001882 7800            	  2504:             moveq  #$00000000,d4
01:00001884 7A00            	  2505:             moveq  #$00000000,d5
01:00001886 7C00            	  2506:             moveq  #$00000000,d6
01:00001888 7E00            	  2507:             moveq  #$00000000,d7
01:0000188A 91C8            	  2508:             move.l #$00000000,a0
01:0000188C 227C00010100    	  2509:             move.l #$00010100,a1
                            	  2510: 
                            	  2511: *     x(An,AL) --> x.L
01:00001892 11BC005A9804    	  2512:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001898 47F09804        	  2513:             lea 4(a0,a1.l),a3
01:0000189C 13F0980400010105	  2514:             move.b 4(a0,a1.l),$00010105
01:000018A4 67FE            	  2515:             beq.s *                       * Check Z Flag  beq/bne
01:000018A6 6BFE            	  2516:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018A8 0C30005A9805    	  2517:             cmpi.b #$5A,5(a0,a1.l)
01:000018AE 66FE            	  2518:             bne.s *                       * Check Z Flag  beq/bne
                            	  2519: 
                            	  2520: *     x.L --> n(An,Dw)
01:000018B0 11B9000101051007	  2521: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:000018B8 67FE            	  2522:             beq.s *                       * Check Z Flag  beq/bne
01:000018BA 6BFE            	  2523:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018BC 0C30005A1007    	  2524:             cmpi.b #$5A,7(a0,d1.w)
01:000018C2 66FE            	  2525:             bne.s *                       * Check Z Flag  beq/bne
                            	  2526: 
                            	  2527: *     x(PC,Ds) --> x.w
01:000018C4 11FB30660100    	  2528:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:000018CA 67FE            	  2529:             beq.s *                       * Check Z Flag  beq/bne
01:000018CC 6AFE            	  2530:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018CE 0C3900B9000018B1	  2531:             cmpi.b #$B9,1+MOVE2
01:000018D6 66FE            	  2532:             bne.s *                       * Check Z Flag  beq/bne
                            	  2533: 
                            	  2534: *     #x -->    n(An,AL)
01:000018D8 11BC00781007    	  2535:             move.b  #$78,7(a0,d1.w)    * BYTE
01:000018DE 67FE            	  2536:             beq.s *                       * Check Z Flag  beq/bne
01:000018E0 6BFE            	  2537:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018E2 0C3000781007    	  2538:             cmpi.b #$78,7(a0,d1.w)
01:000018E8 66FE            	  2539:             bne.s *                       * Check Z Flag  beq/bne
                            	  2540: 
01:000018EA 203C11223344    	  2541:             move.l #$11223344,d0
01:000018F0 223C00010100    	  2542:             move.l #$00010100,d1
01:000018F6 243C8899AABB    	  2543:             move.l #$8899aabb,d2
01:000018FC 7602            	  2544:             moveq  #$00000002,d3
01:000018FE 7800            	  2545:             moveq  #$00000000,d4
01:00001900 7A00            	  2546:             moveq  #$00000000,d5
01:00001902 7C00            	  2547:             moveq  #$00000000,d6
01:00001904 7E00            	  2548:             moveq  #$00000000,d7
01:00001906 91C8            	  2549:             move.l #$00000000,a0
01:00001908 227C00010100    	  2550:             move.l #$00010100,a1
                            	  2551: 
                            	  2552: *     x(An,AL) --> x.L
01:0000190E 31BC5A5A9804    	  2553:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:00001914 49F09804        	  2554:             lea 4(a0,a1.l),a4
01:00001918 33F0980400010104	  2555:             move.w 4(a0,a1.l),$00010104
01:00001920 67FE            	  2556:             beq.s *                       * Check Z Flag  beq/bne
01:00001922 6BFE            	  2557:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001924 0C705A5A9804    	  2558:             cmpi.w #$5A5A,4(a0,a1.l)
01:0000192A 66FE            	  2559:             bne.s *                       * Check Z Flag  beq/bne
                            	  2560: 
                            	  2561: *     x.L --> n(An,Dw)
01:0000192C 31B9000101041006	  2562: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:00001934 67FE            	  2563:             beq.s *                       * Check Z Flag  beq/bne
01:00001936 6BFE            	  2564:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001938 0C705A5A1006    	  2565:             cmpi.w #$5A5A,6(a0,d1.w)
01:0000193E 66FE            	  2566:             bne.s *                       * Check Z Flag  beq/bne
                            	  2567: 
                            	  2568: *     x(PC,Ds) --> x.w
01:00001940 31FB30EA0100    	  2569:             move.w  MOVE1(pc,d3),$0100 * WORD
01:00001946 67FE            	  2570:             beq.s *                       * Check Z Flag  beq/bne
01:00001948 6BFE            	  2571:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000194A 0C7967FE00001934	  2572:             cmpi.w #$67FE,8+MOVE1
01:00001952 66FE            	  2573:             bne.s *                       * Check Z Flag  beq/bne
                            	  2574: 
                            	  2575: *     #x -->    n(An,AL)
01:00001954 31BC78781006    	  2576:             move.w  #$7878,6(a0,d1.w)    * WORD
01:0000195A 67FE            	  2577:             beq.s *                       * Check Z Flag  beq/bne
01:0000195C 6BFE            	  2578:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000195E 0C7078781006    	  2579:             cmpi.w #$7878,6(a0,d1.w)
01:00001964 66FE            	  2580:             bne.s *                       * Check Z Flag  beq/bne
                            	  2581: 
                            	  2582: * ---
                            	  2583: 
01:00001966 203C11223344    	  2584:             move.l #$11223344,d0
01:0000196C 223C00010100    	  2585:             move.l #$00010100,d1
01:00001972 243C8899AABB    	  2586:             move.l #$8899aabb,d2
01:00001978 7602            	  2587:             moveq  #$00000002,d3
01:0000197A 7800            	  2588:             moveq  #$00000000,d4
01:0000197C 7A00            	  2589:             moveq  #$00000000,d5
01:0000197E 7C00            	  2590:             moveq  #$00000000,d6
01:00001980 7E00            	  2591:             moveq  #$00000000,d7
01:00001982 91C8            	  2592:             move.l #$00000000,a0
01:00001984 227C00010100    	  2593:             move.l #$00010100,a1
                            	  2594: 
                            	  2595: *     x(An,AL) --> x.L
01:0000198A 21BC5A5A12349804	  2596:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:00001992 49F09804        	  2597:             lea 4(a0,a1.l),a4
01:00001996 23F0980400010104	  2598:             move.l 4(a0,a1.l),$00010104
01:0000199E 67FE            	  2599:             beq.s *                       * Check Z Flag  beq/bne
01:000019A0 6BFE            	  2600:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019A2 0CB05A5A12349804	  2601:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:000019AA 66FE            	  2602:             bne.s *                       * Check Z Flag  beq/bne
                            	  2603: 
                            	  2604: *     x.L --> n(An,Dw)
01:000019AC 21B9000101041006	  2605: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:000019B4 67FE            	  2606:             beq.s *                       * Check Z Flag  beq/bne
01:000019B6 6BFE            	  2607:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019B8 0CB05A5A12341006	  2608:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:000019C0 66FE            	  2609:             bne.s *                       * Check Z Flag  beq/bne
                            	  2610: 
                            	  2611: *     x(PC,Ds) --> x.w
01:000019C2 21FB30E80100    	  2612:             move.l  MOVE3(pc,d3),$0100 * LONG
01:000019C8 67FE            	  2613:             beq.s *                       * Check Z Flag  beq/bne
01:000019CA 6BFE            	  2614:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019CC 0CB967FE6BFE0000	  2615:             cmpi.l #$67FE6BFE,8+MOVE3
01:000019D4 19B4
01:000019D6 66FE            	  2616:             bne.s *                       * Check Z Flag  beq/bne
                            	  2617: 
                            	  2618: *     #x -->    n(An,AL)
01:000019D8 21BC787823231006	  2619:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:000019E0 67FE            	  2620:             beq.s *                       * Check Z Flag  beq/bne
01:000019E2 6BFE            	  2621:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019E4 0CB0787823231006	  2622:             cmpi.l #$78782323,6(a0,d1.w)
01:000019EC 66FE            	  2623:             bne.s *                       * Check Z Flag  beq/bne
                            	  2624: 
                            	  2625: 
01:000019EE 4E75            	  2626:          rts
                            	  2627: 
                            	  2628: 
                            	  2629: *-----------------------------------------------------------
                            	  2630: *-----------------------------------------------------------
                            	  2631: * OPCODE : MOVE_xxx_FLAGS
                            	  2632: *-----------------------------------------------------------
                            	  2633: *-----------------------------------------------------------
                            	  2634: op_MOVE_xxx_FLAGS:
                            	  2635: 
                            	  2636: *     Move_To_SR
                            	  2637: 
                            	  2638: *     Dn
                            	  2639: 
01:000019F0 303C2FFF        	  2640:             move.w #$2FFF,d0
01:000019F4 46C0            	  2641:             move d0,SR
01:000019F6 6AFE            	  2642:             bpl.s *           * branch if Z clear
01:000019F8 66FE            	  2643:             bne.s *           * branch if N clear
01:000019FA 68FE            	  2644:             bvc.s *           * branch if V clear
01:000019FC 64FE            	  2645:             bcc.s *           * branch if C clear
01:000019FE 303C2F00        	  2646:             move.w #$2F00,d0
01:00001A02 44C0            	  2647:             move d0,CCR
01:00001A04 67FE            	  2648:             beq.s *           * branch if Z set
01:00001A06 6BFE            	  2649:             bmi.s *           * branch if N set
01:00001A08 69FE            	  2650:             bvs.s *           * branch if V set
01:00001A0A 65FE            	  2651:             bcs.s *           * branch if C set
                            	  2652: 
01:00001A0C 303C2000        	  2653:             move.w #$2000,d0
01:00001A10 46C0            	  2654:             move d0,SR
01:00001A12 67FE            	  2655:             beq.s *           * branch if Z set
01:00001A14 6BFE            	  2656:             bmi.s *           * branch if N set
01:00001A16 69FE            	  2657:             bvs.s *           * branch if V set
01:00001A18 65FE            	  2658:             bcs.s *           * branch if C set
                            	  2659: 
                            	  2660: *     (An)
01:00001A1A 307C0100        	  2661:             move.l #$00000100,a0
01:00001A1E 30BC2FFF        	  2662:             move.w #$2FFF,(a0)
01:00001A22 46D0            	  2663:             move (a0),SR
01:00001A24 6AFE            	  2664:             bpl.s *           * branch if Z clear
01:00001A26 66FE            	  2665:             bne.s *           * branch if N clear
01:00001A28 68FE            	  2666:             bvc.s *           * branch if V clear
01:00001A2A 64FE            	  2667:             bcc.s *           * branch if C clear
                            	  2668: 
01:00001A2C 30BC2000        	  2669:             move.w #$2000,(a0)
01:00001A30 46D0            	  2670:             move (a0),SR
01:00001A32 67FE            	  2671:             beq.s *           * branch if Z set
01:00001A34 6BFE            	  2672:             bmi.s *           * branch if N set
01:00001A36 69FE            	  2673:             bvs.s *           * branch if V set
01:00001A38 65FE            	  2674:             bcs.s *           * branch if C set
                            	  2675: 
                            	  2676: *     (An)+
01:00001A3A 307C0100        	  2677:             move.l #$00000100,a0
01:00001A3E 30BC2FFF        	  2678:             move.w #$2FFF,(a0)
01:00001A42 46D8            	  2679:             move (a0)+,SR
01:00001A44 6AFE            	  2680:             bpl.s *           * branch if Z clear
01:00001A46 66FE            	  2681:             bne.s *           * branch if N clear
01:00001A48 68FE            	  2682:             bvc.s *           * branch if V clear
01:00001A4A 64FE            	  2683:             bcc.s *           * branch if C clear
                            	  2684: 
01:00001A4C 30BC2000        	  2685:             move.w #$2000,(a0)
01:00001A50 46D8            	  2686:             move (a0)+,SR
01:00001A52 67FE            	  2687:             beq.s *           * branch if Z set
01:00001A54 6BFE            	  2688:             bmi.s *           * branch if N set
01:00001A56 69FE            	  2689:             bvs.s *           * branch if V set
01:00001A58 65FE            	  2690:             bcs.s *           * branch if C set
                            	  2691: 
                            	  2692: *     -(An)
01:00001A5A 307C0102        	  2693:             move.l #$00000102,a0
01:00001A5E 30BC2FFF        	  2694:             move.w #$2FFF,(a0)
01:00001A62 46D8            	  2695:             move (a0)+,SR
01:00001A64 6AFE            	  2696:             bpl.s *           * branch if Z clear
01:00001A66 66FE            	  2697:             bne.s *           * branch if N clear
01:00001A68 68FE            	  2698:             bvc.s *           * branch if V clear
01:00001A6A 64FE            	  2699:             bcc.s *           * branch if C clear
                            	  2700: 
01:00001A6C 30BC2000        	  2701:             move.w #$2000,(a0)
01:00001A70 46D8            	  2702:             move (a0)+,SR
01:00001A72 67FE            	  2703:             beq.s *           * branch if Z set
01:00001A74 6BFE            	  2704:             bmi.s *           * branch if N set
01:00001A76 69FE            	  2705:             bvs.s *           * branch if V set
01:00001A78 65FE            	  2706:             bcs.s *           * branch if C set
                            	  2707: 
                            	  2708: *     n(An)
01:00001A7A 307C0102        	  2709:             move.l #$00000102,a0
01:00001A7E 317C2FFF0002    	  2710:             move.w #$2FFF,2(a0)
01:00001A84 46E80002        	  2711:             move 2(a0),SR
01:00001A88 6AFE            	  2712:             bpl.s *           * branch if Z clear
01:00001A8A 66FE            	  2713:             bne.s *           * branch if N clear
01:00001A8C 68FE            	  2714:             bvc.s *           * branch if V clear
01:00001A8E 64FE            	  2715:             bcc.s *           * branch if C clear
                            	  2716: 
01:00001A90 317C20000002    	  2717:             move.w #$2000,2(a0)
01:00001A96 46E80002        	  2718:             move 2(a0),SR
01:00001A9A 67FE            	  2719:             beq.s *           * branch if Z set
01:00001A9C 6BFE            	  2720:             bmi.s *           * branch if N set
01:00001A9E 69FE            	  2721:             bvs.s *           * branch if V set
01:00001AA0 65FE            	  2722:             bcs.s *           * branch if C set
                            	  2723: 
                            	  2724: *     n(An,Rn.l)
01:00001AA2 307C0100        	  2725:             move.l #$00000100,a0
01:00001AA6 7002            	  2726:             moveq  #$00000002,d0
01:00001AA8 31BC2FFF0802    	  2727:             move.w #$2FFF,2(a0,d0.l)
01:00001AAE 46F00802        	  2728:             move 2(a0,d0.l),SR
01:00001AB2 6AFE            	  2729:             bpl.s *           * branch if Z clear
01:00001AB4 66FE            	  2730:             bne.s *           * branch if N clear
01:00001AB6 68FE            	  2731:             bvc.s *           * branch if V clear
01:00001AB8 64FE            	  2732:             bcc.s *           * branch if C clear
                            	  2733: 
01:00001ABA 31BC20000802    	  2734:             move.w #$2000,2(a0,d0.l)
01:00001AC0 46F00802        	  2735:             move 2(a0,d0.l),SR
01:00001AC4 67FE            	  2736:             beq.s *           * branch if Z set
01:00001AC6 6BFE            	  2737:             bmi.s *           * branch if N set
01:00001AC8 69FE            	  2738:             bvs.s *           * branch if V set
01:00001ACA 65FE            	  2739:             bcs.s *           * branch if C set
                            	  2740: 
                            	  2741: *     x.W
01:00001ACC 31FC2FFF0100    	  2742:             move.w #$2FFF,$0100
01:00001AD2 46F80100        	  2743:             move $0100,SR
01:00001AD6 6AFE            	  2744:             bpl.s *           * branch if Z clear
01:00001AD8 66FE            	  2745:             bne.s *           * branch if N clear
01:00001ADA 68FE            	  2746:             bvc.s *           * branch if V clear
01:00001ADC 64FE            	  2747:             bcc.s *           * branch if C clear
                            	  2748: 
01:00001ADE 31FC20000100    	  2749:             move.w #$2000,$0100
01:00001AE4 46F80100        	  2750:             move $0100,SR
01:00001AE8 67FE            	  2751:             beq.s *           * branch if Z set
01:00001AEA 6BFE            	  2752:             bmi.s *           * branch if N set
01:00001AEC 69FE            	  2753:             bvs.s *           * branch if V set
01:00001AEE 65FE            	  2754:             bcs.s *           * branch if C set
                            	  2755: 
                            	  2756: *     x.L
01:00001AF0 33FC2FFF00010100	  2757:             move.w #$2FFF,$00010100
01:00001AF8 46F900010100    	  2758:             move $00010100,SR
01:00001AFE 6AFE            	  2759:             bpl.s *           * branch if Z clear
01:00001B00 66FE            	  2760:             bne.s *           * branch if N clear
01:00001B02 68FE            	  2761:             bvc.s *           * branch if V clear
01:00001B04 64FE            	  2762:             bcc.s *           * branch if C clear
                            	  2763: 
01:00001B06 33FC200000010100	  2764: MOVE4:      move.w #$2000,$00010100
01:00001B0E 46F900010100    	  2765:             move $00010100,SR
01:00001B14 67FE            	  2766:             beq.s *           * branch if Z set
01:00001B16 6BFE            	  2767:             bmi.s *           * branch if N set
01:00001B18 69FE            	  2768:             bvs.s *           * branch if V set
01:00001B1A 65FE            	  2769:             bcs.s *           * branch if C set
                            	  2770: 
                            	  2771: *     x(PC)
01:00001B1C 46FAFFEA        	  2772:             move MOVE4+2(pc),SR
01:00001B20 67FE            	  2773:             beq.s *           * branch if Z set
01:00001B22 6BFE            	  2774:             bmi.s *           * branch if N set
01:00001B24 69FE            	  2775:             bvs.s *           * branch if V set
01:00001B26 65FE            	  2776:             bcs.s *           * branch if C set
                            	  2777: 
                            	  2778: *     x(PC,d0.l)
01:00001B28 7000            	  2779:             moveq  #$00000000,d0
01:00001B2A 46FB08DC        	  2780:             move MOVE4+2(pc,d0.l),SR
01:00001B2E 67FE            	  2781:             beq.s *           * branch if Z set
01:00001B30 6BFE            	  2782:             bmi.s *           * branch if N set
01:00001B32 69FE            	  2783:             bvs.s *           * branch if V set
01:00001B34 65FE            	  2784:             bcs.s *           * branch if C set
01:00001B36 44FB08D0        	  2785:             move MOVE4+2(pc,d0.l),CCR
01:00001B3A 67FE            	  2786:             beq.s *           * branch if Z set
01:00001B3C 6BFE            	  2787:             bmi.s *           * branch if N set
01:00001B3E 69FE            	  2788:             bvs.s *           * branch if V set
01:00001B40 65FE            	  2789:             bcs.s *           * branch if C set
                            	  2790: 
                            	  2791: *     #x
01:00001B42 46FC2FFF        	  2792:             move #$2FFF,SR
01:00001B46 66FE            	  2793:             bne.s *           * branch if Z clear
01:00001B48 6AFE            	  2794:             bpl.s *           * branch if N clear
01:00001B4A 68FE            	  2795:             bvc.s *           * branch if V clear
01:00001B4C 64FE            	  2796:             bcc.s *           * branch if C clear
                            	  2797: 
                            	  2798: 
                            	  2799: 
                            	  2800: *  MOVE_From_SR
                            	  2801: 
                            	  2802: 
                            	  2803: 
                            	  2804: *     Dn
01:00001B4E 46FC275A        	  2805:             move #$275A,SR          * Initial value
01:00001B52 40C0            	  2806:             move SR,d0
01:00001B54 0C40271A        	  2807:             cmpi.w #$271A,d0
                            	  2808: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2809: *            bne.s *                   * branch if Z set
                            	  2810: 
                            	  2811: *     (An)
01:00001B58 307C0100        	  2812:             move.l #$00000100,a0
01:00001B5C 46FC275A        	  2813:             move #$275A,SR          * Initial value
01:00001B60 40D0            	  2814:             move SR,(a0)
01:00001B62 0C50275A        	  2815:             cmpi.w #$275A,(a0)
01:00001B66 66FE            	  2816:             bne.s *                   * branch if Z set
                            	  2817: 
                            	  2818: *     (An)+
01:00001B68 307C0100        	  2819:             move.l #$00000100,a0
01:00001B6C 46FC257A        	  2820:             move #$257A,SR          * Initial value
01:00001B70 40D8            	  2821:             move SR,(a0)+
01:00001B72 307C0100        	  2822:             move.l #$00000100,a0
01:00001B76 0C58257A        	  2823:             cmpi.w #$257A,(a0)+
01:00001B7A 66FE            	  2824:             bne.s *                   * branch if Z set
                            	  2825: 
                            	  2826: *     -(An)
01:00001B7C 307C0102        	  2827:             move.l #$00000102,a0
01:00001B80 46FC2766        	  2828:             move #$2766,SR          * Initial value
01:00001B84 40E0            	  2829:             move SR,-(a0)
01:00001B86 307C0100        	  2830:             move.l #$00000100,a0
01:00001B8A 0C502766        	  2831:             cmpi.w #$2766,(a0)
01:00001B8E 66FE            	  2832:             bne.s *                   * branch if Z set
                            	  2833: 
                            	  2834: *     x(An)
01:00001B90 307C0102        	  2835:             move.l #$00000102,a0
01:00001B94 46FC2733        	  2836:             move #$2733,SR          * Initial value
01:00001B98 40E80004        	  2837:             move SR,4(a0)
01:00001B9C 0C6827330004    	  2838:             cmpi.w #$2733,4(a0)
01:00001BA2 66FE            	  2839:             bne.s *                   * branch if Z set
                            	  2840: 
                            	  2841: *     x(An,rn)
01:00001BA4 307C0102        	  2842:             move.l #$00000102,a0
01:00001BA8 7004            	  2843:             moveq  #$00000004,d0
01:00001BAA 46FC275A        	  2844:             move #$275a,SR          * Initial value
01:00001BAE 40F00804        	  2845:             move SR,4(a0,d0.l)
01:00001BB2 0C70275A0804    	  2846:             cmpi.w #$275a,4(a0,d0.l)
01:00001BB8 66FE            	  2847:             bne.s *                   * branch if Z set
                            	  2848: 
                            	  2849: *     x.W
01:00001BBA 46FC2777        	  2850:             move #$2777,SR          * Initial value
01:00001BBE 40F80102        	  2851:             move SR,$0102
01:00001BC2 0C7827770102    	  2852:             cmpi.w #$2777,$0102
01:00001BC8 66FE            	  2853:             bne.s *                   * branch if Z set
                            	  2854: 
                            	  2855: *     x.L
01:00001BCA 46FC2777        	  2856:             move #$2777,SR          * Initial value
01:00001BCE 40F900010102    	  2857:             move SR,$10102
01:00001BD4 0C79277700010102	  2858:             cmpi.w #$2777,$10102
01:00001BDC 66FE            	  2859:             bne.s *                   * branch if Z set
                            	  2860: 
                            	  2861: 
                            	  2862: 
01:00001BDE 46FC2700        	  2863:             move #$2700,SR          * Put flags back to initial value
                            	  2864: 
01:00001BE2 4E75            	  2865:             rts
                            	  2866: 
                            	  2867: 
                            	  2868: *-----------------------------------------------------------
                            	  2869: *-----------------------------------------------------------
                            	  2870: * OPCODE : EXT
                            	  2871: *-----------------------------------------------------------
                            	  2872: *-----------------------------------------------------------
                            	  2873: op_EXT:
                            	  2874: 
01:00001BE4 707F            	  2875:             move.l #$0000007F,d0
01:00001BE6 223C00008FFF    	  2876:             move.l #$00008FFF,d1
01:00001BEC 7400            	  2877:             moveq  #$00000000,d2
                            	  2878: 
01:00001BEE 4880            	  2879:             ext.w d0
01:00001BF0 6BFE            	  2880:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001BF2 67FE            	  2881:             beq.s *                   * Check Z Flag  beq/bne
01:00001BF4 0C800000007F    	  2882:             cmpi.l #$0000007F,d0
01:00001BFA 66FE            	  2883:             bne.s *                   * branch if Z set
                            	  2884: 
01:00001BFC 48C1            	  2885:             ext.l d1
01:00001BFE 6AFE            	  2886:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C00 67FE            	  2887:             beq.s *                   * Check Z Flag  beq/bne
01:00001C02 0C81FFFF8FFF    	  2888:             cmpi.l #$FFFF8FFF,d1
01:00001C08 66FE            	  2889:             bne.s *                   * branch if Z set
                            	  2890: 
01:00001C0A 48C2            	  2891:             ext.l d2
01:00001C0C 66FE            	  2892:             bne.s *                   * Check Z Flag  beq/bne
                            	  2893: 
                            	  2894: 
                            	  2895: 
01:00001C0E 4E75            	  2896:             rts
                            	  2897: 
                            	  2898: 
                            	  2899: *-----------------------------------------------------------
                            	  2900: *-----------------------------------------------------------
                            	  2901: * OPCODE : SWAP
                            	  2902: *-----------------------------------------------------------
                            	  2903: *-----------------------------------------------------------
                            	  2904: op_SWAP:
                            	  2905: 
01:00001C10 203C12345678    	  2906:             move.l #$12345678,d0
                            	  2907: 
01:00001C16 4840            	  2908:             swap d0
01:00001C18 6BFE            	  2909:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C1A 67FE            	  2910:             beq.s *                   * Check Z Flag  beq/bne
01:00001C1C 0C8056781234    	  2911:             cmpi.l #$56781234,d0
01:00001C22 66FE            	  2912:             bne.s *                   * branch if Z set
                            	  2913: 
                            	  2914: 
                            	  2915: 
01:00001C24 4E75            	  2916:             rts
                            	  2917: 
                            	  2918: 
                            	  2919: *-----------------------------------------------------------
                            	  2920: *-----------------------------------------------------------
                            	  2921: * OPCODE : LEA_PEA
                            	  2922: *-----------------------------------------------------------
                            	  2923: *-----------------------------------------------------------
                            	  2924: op_LEAPEA:
                            	  2925: 
01:00001C26 207C00345678    	  2926:             move.l #$00345678,a0
01:00001C2C 7800            	  2927:             moveq  #$00000000,d4
                            	  2928: 
                            	  2929: *     (An)
01:00001C2E 4DD0            	  2930:             lea (a0),a6
01:00001C30 200E            	  2931:             move.l a6,d0
01:00001C32 0C8000345678    	  2932:             cmpi.l #$00345678,d0
01:00001C38 66FE            	  2933:             bne.s *                   * branch if Z set
01:00001C3A 4850            	  2934:             pea (a0)
01:00001C3C 0C9700345678    	  2935:             cmpi.l #$00345678,(a7)
01:00001C42 66FE            	  2936:             bne.s *                   * branch if Z set
                            	  2937:             * This was without a specifier which the assembler defaulted to .w
01:00001C44 588F            	  2938:             addq.l #4,a7            * Restore Stack Pointer
                            	  2939: 
                            	  2940: *     x(An)
01:00001C46 4DE80004        	  2941:             lea 4(a0),a6
01:00001C4A 200E            	  2942:             move.l a6,d0
01:00001C4C 0C800034567C    	  2943:             cmpi.l #$0034567C,d0
01:00001C52 66FE            	  2944:             bne.s *                   * branch if Z set
01:00001C54 48680004        	  2945:             pea 4(a0)
01:00001C58 0C970034567C    	  2946:             cmpi.l #$0034567C,(a7)
01:00001C5E 66FE            	  2947:             bne.s *                   * branch if Z set
                            	  2948:             * This was without a specifier which the assembler defaulted to .w
01:00001C60 588F            	  2949:             addq.l #4,a7            * Restore Stack Pointer
                            	  2950: 
                            	  2951: *     x(An,Dn.l)
01:00001C62 4DF04004        	  2952:             lea 4(a0,d4),a6
01:00001C66 200E            	  2953:             move.l a6,d0
01:00001C68 0C800034567C    	  2954:             cmpi.l #$0034567C,d0
01:00001C6E 66FE            	  2955:             bne.s *                   * branch if Z set
01:00001C70 48704804        	  2956:             pea 4(a0,d4.l)
01:00001C74 0C970034567C    	  2957:             cmpi.l #$0034567C,(a7)
01:00001C7A 66FE            	  2958:             bne.s *                   * branch if Z set
                            	  2959:             * This was without a specifier which the assembler defaulted to .w
01:00001C7C 588F            	  2960:             addq.l #4,a7            * Restore Stack Pointer
                            	  2961: 
                            	  2962: *     x.W
01:00001C7E 4DF81234        	  2963:             lea $1234,a6
01:00001C82 200E            	  2964:             move.l a6,d0
01:00001C84 0C401234        	  2965:             cmpi.w #$1234,d0
01:00001C88 66FE            	  2966:             bne.s *                   * branch if Z set
01:00001C8A 48781234        	  2967:             pea $1234
01:00001C8E 0C9700001234    	  2968:             cmpi.l #$00001234,(a7)
01:00001C94 66FE            	  2969:             bne.s *                   * branch if Z set
                            	  2970:             * This was without a specifier which the assembler defaulted to .w
01:00001C96 588F            	  2971:             addq.l #4,a7            * Restore Stack Pointer
                            	  2972: 
                            	  2973: *     x.L
01:00001C98 4DF900345678    	  2974:             lea $00345678,a6
01:00001C9E 200E            	  2975:             move.l a6,d0
01:00001CA0 B08E            	  2976:             cmp.l a6,d0
01:00001CA2 66FE            	  2977:             bne.s *                   * branch if Z set
01:00001CA4 487900345678    	  2978:             pea $00345678
01:00001CAA 0C9700345678    	  2979:             cmpi.l #$00345678,(a7)
01:00001CB0 66FE            	  2980:             bne.s *                   * branch if Z set
                            	  2981:             * This was without a specifier which the assembler defaulted to .w
01:00001CB2 588F            	  2982:             addq.l #4,a7            * Restore Stack Pointer
                            	  2983: 
                            	  2984: *     x(PC)
01:00001CB4 4DFA0008        	  2985:             lea LEA1(pc),a6
01:00001CB8 200E            	  2986:             move.l a6,d0
01:00001CBA B08E            	  2987:             cmp.l a6,d0
01:00001CBC 66FE            	  2988:             bne.s *                   * branch if Z set
01:00001CBE 487AFFFE        	  2989: LEA1:       pea LEA1(pc)
01:00001CC2 0C970000241E    	  2990:             cmpi.l #$0000241E,(a7)
01:00001CC8 67FE            	  2991:             beq.s *                   * branch if Z clear
                            	  2992:             * This was without a specifier which the assembler defaulted to .w
01:00001CCA 588F            	  2993:             addq.l #4,a7              * Restore Stack Pointer
                            	  2994: 
                            	  2995: 
                            	  2996: 
                            	  2997: 
01:00001CCC 46FC2700        	  2998:             move #$2700,SR          * Put flags back to initial value
                            	  2999: 
01:00001CD0 4E75            	  3000:             rts
                            	  3001: 
                            	  3002: 
                            	  3003: 
                            	  3004: *-----------------------------------------------------------
                            	  3005: *-----------------------------------------------------------
                            	  3006: * OPCODE : LEA_TAS
                            	  3007: *-----------------------------------------------------------
                            	  3008: *-----------------------------------------------------------
                            	  3009: op_TAS:
                            	  3010: 
                            	  3011: *     Test just one addressing mode
                            	  3012: 
01:00001CD2 307C0100        	  3013:             move.l #$00000100,a0
                            	  3014: 
                            	  3015: *     (An)
01:00001CD6 10BC0000        	  3016:             move.b #$00,(a0)
01:00001CDA 6BFE            	  3017:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CDC 66FE            	  3018:             bne.s *                   * Check Z Flag  beq/bne
01:00001CDE 4AD0            	  3019:             tas (a0)
01:00001CE0 0C100080        	  3020:             cmpi.b #$80,(a0)
01:00001CE4 66FE            	  3021:             bne.s *                   * branch if Z set
01:00001CE6 10BC00F5        	  3022:             move.b #$F5,(a0)
01:00001CEA 4AD0            	  3023:             tas (a0)
01:00001CEC 6AFE            	  3024:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001CEE 67FE            	  3025:             beq.s *                   * Check Z Flag  beq/bne
01:00001CF0 4AD0            	  3026:             tas (a0)
01:00001CF2 0C1000F5        	  3027:             cmpi.b #$F5,(a0)
01:00001CF6 66FE            	  3028:             bne.s *                   * branch if Z set
                            	  3029: 
01:00001CF8 4E75            	  3030:             rts
                            	  3031: 
                            	  3032: 
                            	  3033: *-----------------------------------------------------------
                            	  3034: *-----------------------------------------------------------
                            	  3035: * OPCODE : LEA_TST
                            	  3036: *-----------------------------------------------------------
                            	  3037: *-----------------------------------------------------------
                            	  3038: op_TST:
                            	  3039: 
                            	  3040: *     Test just one addressing mode
                            	  3041: 
01:00001CFA 307C0100        	  3042:             move.l #$00000100,a0
                            	  3043: 
                            	  3044: *     (An) - BYTE
01:00001CFE 10BC0000        	  3045:             move.b #$00,(a0)
01:00001D02 4A10            	  3046:             tst.b (a0)
01:00001D04 6BFE            	  3047:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D06 66FE            	  3048:             bne.s *                   * Check Z Flag  beq/bne
01:00001D08 10BC00F5        	  3049:             move.b #$F5,(a0)
01:00001D0C 4A10            	  3050:             tst.b (a0)
01:00001D0E 6AFE            	  3051:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D10 67FE            	  3052:             beq.s *                   * Check Z Flag  beq/bne
                            	  3053: 
                            	  3054: *     (An) - WORD
01:00001D12 30BC0000        	  3055:             move.w #$0000,(a0)
01:00001D16 4A50            	  3056:             tst.w (a0)
01:00001D18 6BFE            	  3057:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D1A 66FE            	  3058:             bne.s *                   * Check Z Flag  beq/bne
01:00001D1C 30BCF567        	  3059:             move.w #$F567,(a0)
01:00001D20 4A50            	  3060:             tst.w (a0)
01:00001D22 6AFE            	  3061:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D24 67FE            	  3062:             beq.s *                   * Check Z Flag  beq/bne
                            	  3063: 
                            	  3064: *     (An) - LONG
01:00001D26 20BC00000000    	  3065:             move.l #$00000000,(a0)
01:00001D2C 4A90            	  3066:             tst.l (a0)
01:00001D2E 6BFE            	  3067:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D30 66FE            	  3068:             bne.s *                   * Check Z Flag  beq/bne
01:00001D32 20BCF56789AB    	  3069:             move.l #$F56789ab,(a0)
01:00001D38 4A90            	  3070:             tst.l (a0)
01:00001D3A 6AFE            	  3071:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D3C 67FE            	  3072:             beq.s *                   * Check Z Flag  beq/bne
                            	  3073: 
                            	  3074: 
01:00001D3E 4E75            	  3075:             rts
                            	  3076: 
                            	  3077: 
                            	  3078: *-----------------------------------------------------------
                            	  3079: *-----------------------------------------------------------
                            	  3080: * OPCODE : LINKS
                            	  3081: *-----------------------------------------------------------
                            	  3082: *-----------------------------------------------------------
                            	  3083: op_LINKS:
                            	  3084: 
01:00001D40 207C11223344    	  3085:             move.l #$11223344,a0
01:00001D46 203C11223344    	  3086:             move.l #$11223344,d0
01:00001D4C 4E500000        	  3087:             link a0,#$0
01:00001D50 0C9711223344    	  3088:             cmpi.l #$11223344,(a7)
                            	  3089: 
01:00001D56 4E58            	  3090:             unlk a0
01:00001D58 B1C0            	  3091:             cmp.l d0,a0
01:00001D5A 66FE            	  3092:             bne.s *                   * branch if Z set
                            	  3093: 
01:00001D5C 4E75            	  3094:             rts
                            	  3095: 
                            	  3096: *-----------------------------------------------------------
                            	  3097: *-----------------------------------------------------------
                            	  3098: * OPCODE : MOVE_USP
                            	  3099: *-----------------------------------------------------------
                            	  3100: *-----------------------------------------------------------
                            	  3101: op_MOVE_USP:
                            	  3102: 
01:00001D5E 207C11223344    	  3103:             move.l #$11223344,a0
01:00001D64 4E60            	  3104:             move a0,USP
01:00001D66 4E69            	  3105:             move USP,a1
01:00001D68 B3C8            	  3106:             cmp.l a0,a1
01:00001D6A 66FE            	  3107:             bne.s *                   * branch if Z set
                            	  3108: 
01:00001D6C 4E75            	  3109:             rts
                            	  3110: 
                            	  3111: 
                            	  3112: *-----------------------------------------------------------
                            	  3113: *-----------------------------------------------------------
                            	  3114: * OPCODE : CHK
                            	  3115: *-----------------------------------------------------------
                            	  3116: *-----------------------------------------------------------
                            	  3117: op_CHK:
01:00001D6E 303C1122        	  3118:             move.w #$1122,d0
01:00001D72 323C1122        	  3119:             move.w #$1122,d1
01:00001D76 4380            	  3120:             chk d0,d1
                            	  3121: 
01:00001D78 4E71            	  3122:             nop
01:00001D7A 4E71            	  3123:             nop
                            	  3124: 
01:00001D7C 323C1122        	  3125:             move.w #$1122,d1
01:00001D80 43BC1122        	  3126:             chk #$1122,d1
                            	  3127: 
01:00001D84 323C1122        	  3128:             move.w #$1122,d1
01:00001D88 43BC007A        	  3129:             chk #00122,d1
01:00001D8C BCBCEEEE0006    	  3130:             cmp.l #$EEEE0006,d6
01:00001D92 66FE            	  3131:             bne.s *                   * branch if Z set
                            	  3132: 
01:00001D94 303C1122        	  3133:             move.w #$1122,d0
01:00001D98 323C8000        	  3134:             move.w #$8000,d1
01:00001D9C 4380            	  3135:             chk d0,d1
01:00001D9E BCBCEEEE0006    	  3136:             cmp.l #$EEEE0006,d6
01:00001DA4 66FE            	  3137:             bne.s *                   * branch if Z set
                            	  3138: 
01:00001DA6 4E75            	  3139:             rts
                            	  3140: 
                            	  3141: 
                            	  3142: *-----------------------------------------------------------
                            	  3143: *-----------------------------------------------------------
                            	  3144: * OPCODE : NEGS
                            	  3145: *-----------------------------------------------------------
                            	  3146: *-----------------------------------------------------------
                            	  3147: op_NEGS:
                            	  3148: 
                            	  3149: *     NOT - BYTE
01:00001DA8 307C0100        	  3150:             move.l #$00000100,a0
01:00001DAC 7000            	  3151:             moveq  #$00000000,d0
01:00001DAE 4600            	  3152:             not.b d0
01:00001DB0 6AFE            	  3153:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DB2 67FE            	  3154:             beq.s *                   * Check Z Flag  beq/bne
01:00001DB4 4600            	  3155:             not.b d0
01:00001DB6 6BFE            	  3156:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DB8 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
01:00001DBA 4A00            	  3158:             cmpi.b #$00,d0
01:00001DBC 66FE            	  3159:             bne.s *                   * Check Z Flag  beq/bne
01:00001DBE 10BC0080        	  3160:             move.b #$80,(a0)
01:00001DC2 4610            	  3161:             not.b (a0)
01:00001DC4 6BFE            	  3162:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DC6 67FE            	  3163:             beq.s *                   * Check Z Flag  beq/bne
01:00001DC8 4610            	  3164:             not.b (a0)
01:00001DCA 6AFE            	  3165:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DCC 67FE            	  3166:             beq.s *                   * Check Z Flag  beq/bne
01:00001DCE 0C100080        	  3167:             cmpi.b #$80,(a0)
01:00001DD2 66FE            	  3168:             bne.s *                   * Check Z Flag  beq/bne
                            	  3169: 
                            	  3170: *     NOT - WORD
01:00001DD4 307C0100        	  3171:             move.l #$00000100,a0
01:00001DD8 7000            	  3172:             moveq  #$00000000,d0
01:00001DDA 4640            	  3173:             not.w d0
01:00001DDC 6AFE            	  3174:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DDE 67FE            	  3175:             beq.s *                   * Check Z Flag  beq/bne
01:00001DE0 4640            	  3176:             not.w d0
01:00001DE2 6BFE            	  3177:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DE4 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
01:00001DE6 4A40            	  3179:             cmpi.w #$0000,d0
01:00001DE8 66FE            	  3180:             bne.s *                   * Check Z Flag  beq/bne
01:00001DEA 30BC5A5A        	  3181:             move.w #$5a5a,(a0)
01:00001DEE 4650            	  3182:             not.w (a0)
01:00001DF0 6AFE            	  3183:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DF2 67FE            	  3184:             beq.s *                   * Check Z Flag  beq/bne
01:00001DF4 4650            	  3185:             not.w (a0)
01:00001DF6 6BFE            	  3186:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DF8 67FE            	  3187:             beq.s *                   * Check Z Flag  beq/bne
01:00001DFA 0C505A5A        	  3188:             cmpi.w #$5a5a,(a0)
01:00001DFE 66FE            	  3189:             bne.s *                   * Check Z Flag  beq/bne
                            	  3190: 
                            	  3191: *     NOT - LONG
01:00001E00 307C0100        	  3192:             move.l #$00000100,a0
01:00001E04 7000            	  3193:             moveq  #$00000000,d0
01:00001E06 4680            	  3194:             not.l d0
01:00001E08 6AFE            	  3195:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E0A 67FE            	  3196:             beq.s *                   * Check Z Flag  beq/bne
01:00001E0C 4680            	  3197:             not.l d0
01:00001E0E 6BFE            	  3198:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E10 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
01:00001E12 4A80            	  3200:             cmpi.l #$00000000,d0
01:00001E14 66FE            	  3201:             bne.s *                   * Check Z Flag  beq/bne
01:00001E16 20BC5A5A1234    	  3202:             move.l #$5a5a1234,(a0)
01:00001E1C 4690            	  3203:             not.l (a0)
01:00001E1E 6AFE            	  3204:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E20 67FE            	  3205:             beq.s *                   * Check Z Flag  beq/bne
01:00001E22 4690            	  3206:             not.l (a0)
01:00001E24 6BFE            	  3207:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E26 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne
01:00001E28 0C905A5A1234    	  3209:             cmpi.l #$5a5a1234,(a0)
01:00001E2E 66FE            	  3210:             bne.s *                   * Check Z Flag  beq/bne
                            	  3211: 
                            	  3212: * -----
                            	  3213: 
                            	  3214: *     NEG - BYTE
01:00001E30 307C0100        	  3215:             move.l #$00000100,a0
01:00001E34 7000            	  3216:             moveq  #$00000000,d0
01:00001E36 7240D241        	  3217:             move.l #$00000080,d1
01:00001E3A 4400            	  3218:             neg.b d0
01:00001E3C 6BFE            	  3219:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E3E 66FE            	  3220:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001E40 65FE            	  3221:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001E42 69FE            	  3222:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E44 4401            	  3223:             neg.b d1
01:00001E46 6AFE            	  3224:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E48 67FE            	  3225:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E4A 64FE            	  3226:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E4C 68FE            	  3227:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001E4E 0C010080        	  3228:             cmpi.b #$80,d1
01:00001E52 66FE            	  3229:             bne.s *                   * Check Z Flag  beq/bne
01:00001E54 10BC007F        	  3230:             move.b #$7F,(a0)
01:00001E58 4410            	  3231:             neg.b (a0)
01:00001E5A 6AFE            	  3232:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E5C 67FE            	  3233:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E5E 64FE            	  3234:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E60 69FE            	  3235:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E62 10BC00F5        	  3236:             move.b #$F5,(a0)
01:00001E66 4410            	  3237:             neg.b (a0)
01:00001E68 6BFE            	  3238:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E6A 67FE            	  3239:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E6C 64FE            	  3240:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E6E 69FE            	  3241:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E70 0C10000B        	  3242:             cmpi.b #$0B,(a0)
01:00001E74 66FE            	  3243:             bne.s *                   * Check Z Flag  beq/bne
                            	  3244: 
                            	  3245: * -----
                            	  3246: 
                            	  3247: *     NEG - WORD
01:00001E76 307C0100        	  3248:             move.l #$00000100,a0
01:00001E7A 7000            	  3249:             moveq  #$00000000,d0
01:00001E7C 223C00008000    	  3250:             move.l #$00008000,d1
01:00001E82 4440            	  3251:             neg.w d0
01:00001E84 6BFE            	  3252:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E86 66FE            	  3253:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001E88 65FE            	  3254:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001E8A 69FE            	  3255:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E8C 4441            	  3256:             neg.w d1
01:00001E8E 6AFE            	  3257:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E90 67FE            	  3258:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E92 64FE            	  3259:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E94 68FE            	  3260:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001E96 0C418000        	  3261:             cmpi.w #$8000,d1
01:00001E9A 66FE            	  3262:             bne.s *                   * Check Z Flag  beq/bne
01:00001E9C 30BC7FFF        	  3263:             move.w #$7FFF,(a0)
01:00001EA0 4450            	  3264:             neg.w (a0)
01:00001EA2 6AFE            	  3265:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EA4 67FE            	  3266:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EA6 64FE            	  3267:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EA8 69FE            	  3268:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EAA 30BCF578        	  3269:             move.w #$F578,(a0)
01:00001EAE 4450            	  3270:             neg.w (a0)
01:00001EB0 6BFE            	  3271:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EB2 67FE            	  3272:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EB4 64FE            	  3273:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EB6 69FE            	  3274:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EB8 0C500A88        	  3275:             cmpi.w #$0A88,(a0)
01:00001EBC 66FE            	  3276:             bne.s *                   * Check Z Flag  beq/bne
                            	  3277: 
                            	  3278: * -----
                            	  3279: 
                            	  3280: *     NEG - LONG
01:00001EBE 307C0100        	  3281:             move.l #$00000100,a0
01:00001EC2 7000            	  3282:             moveq  #$00000000,d0
01:00001EC4 223C80000000    	  3283:             move.l #$80000000,d1
01:00001ECA 4480            	  3284:             neg.l d0
01:00001ECC 6BFE            	  3285:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001ECE 66FE            	  3286:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001ED0 65FE            	  3287:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001ED2 69FE            	  3288:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001ED4 4481            	  3289:             neg.l d1
01:00001ED6 6AFE            	  3290:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001ED8 67FE            	  3291:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EDA 64FE            	  3292:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EDC 68FE            	  3293:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001EDE 0C8180000000    	  3294:             cmpi.l #$80000000,d1
01:00001EE4 66FE            	  3295:             bne.s *                   * Check Z Flag  beq/bne
01:00001EE6 20BC7FFFFFFF    	  3296:             move.l #$7FFFFFFF,(a0)
01:00001EEC 4490            	  3297:             neg.l (a0)
01:00001EEE 6AFE            	  3298:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EF0 67FE            	  3299:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EF2 64FE            	  3300:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EF4 69FE            	  3301:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EF6 20BCF5781234    	  3302:             move.l #$F5781234,(a0)
01:00001EFC 4490            	  3303:             neg.l (a0)
01:00001EFE 6BFE            	  3304:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F00 67FE            	  3305:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F02 64FE            	  3306:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F04 69FE            	  3307:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F06 0C900A87EDCC    	  3308:             cmpi.l #$0A87EDCC,(a0)
01:00001F0C 66FE            	  3309:             bne.s *                   * Check Z Flag  beq/bne
                            	  3310: 
                            	  3311: 
                            	  3312: * -----
                            	  3313: 
                            	  3314: *     NEGX - BYTE
01:00001F0E 307C0100        	  3315:             move.l #$00000100,a0
01:00001F12 7000            	  3316:             moveq  #$00000000,d0
01:00001F14 7240D241        	  3317:             move.l #$00000080,d1
01:00001F18 003C0010        	  3318:             ori.b #$10,CCR        * Set X Flag
01:00001F1C 4000            	  3319:             negx.b d0
01:00001F1E 6AFE            	  3320:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001F20 67FE            	  3321:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F22 64FE            	  3322:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F24 69FE            	  3323:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F26 023C00EF        	  3324:             andi.b #$EF,CCR       * Clear X Flag
01:00001F2A 4000            	  3325:             negx.b d0
01:00001F2C 6BFE            	  3326:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F2E 67FE            	  3327:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F30 64FE            	  3328:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F32 69FE            	  3329:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F34 003C0010        	  3330:             ori.b #$10,CCR        * Set X Flag
01:00001F38 4001            	  3331:             negx.b d1
01:00001F3A 6BFE            	  3332:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001F3C 67FE            	  3333:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F3E 64FE            	  3334:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F40 69FE            	  3335:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001F42 0C01007F        	  3336:             cmpi.b #$7F,d1
01:00001F46 66FE            	  3337:             bne.s *                   * Check Z Flag  beq/bne
01:00001F48 023C00EF        	  3338:             andi.b #$EF,CCR       * Clear X Flag
01:00001F4C 4001            	  3339:             negx.b d1
01:00001F4E 6AFE            	  3340:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F50 67FE            	  3341:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F52 64FE            	  3342:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F54 69FE            	  3343:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001F56 0C010081        	  3344:             cmpi.b #$81,d1
01:00001F5A 66FE            	  3345:             bne.s *                   * Check Z Flag  beq/bne
01:00001F5C 10BC007F        	  3346:             move.b #$7F,(a0)
01:00001F60 003C0010        	  3347:             ori.b #$10,CCR        * Set X Flag
01:00001F64 4010            	  3348:             negx.b (a0)
01:00001F66 6AFE            	  3349:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F68 67FE            	  3350:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F6A 64FE            	  3351:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3352:             * I think overflow should happen here.
                            	  3353: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F6C 10BC007F        	  3354:             move.b #$7F,(a0)
01:00001F70 023C00EF        	  3355:             andi.b #$EF,CCR       * Clear X Flag
01:00001F74 4010            	  3356:             negx.b (a0)
01:00001F76 6AFE            	  3357:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F78 67FE            	  3358:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F7A 64FE            	  3359:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F7C 69FE            	  3360:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F7E 10BC00F5        	  3361:             move.b #$F5,(a0)
01:00001F82 003C0010        	  3362:             ori.b #$10,CCR        * Set X Flag
01:00001F86 4010            	  3363:             negx.b (a0)
01:00001F88 6BFE            	  3364:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F8A 67FE            	  3365:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F8C 64FE            	  3366:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F8E 69FE            	  3367:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F90 0C10000A        	  3368:             cmpi.b #$0A,(a0)
01:00001F94 66FE            	  3369:             bne.s *                   * Check Z Flag  beq/bne
01:00001F96 023C00EF        	  3370:             andi.b #$EF,CCR       * Clear X Flag
01:00001F9A 4010            	  3371:             negx.b (a0)
01:00001F9C 6AFE            	  3372:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001F9E 67FE            	  3373:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FA0 64FE            	  3374:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FA2 69FE            	  3375:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FA4 0C1000F6        	  3376:             cmpi.b #$F6,(a0)
01:00001FA8 66FE            	  3377:             bne.s *                   * Check Z Flag  beq/bne
                            	  3378: 
                            	  3379: 
                            	  3380: 
                            	  3381: * -----
                            	  3382: 
                            	  3383: *     NEGX - WORD
01:00001FAA 307C0100        	  3384:             move.l #$00000100,a0
01:00001FAE 7000            	  3385:             moveq  #$00000000,d0
01:00001FB0 223C00008000    	  3386:             move.l #$00008000,d1
01:00001FB6 003C0010        	  3387:             ori.b #$10,CCR        * Set X Flag
01:00001FBA 4040            	  3388:             negx.w d0
01:00001FBC 6AFE            	  3389:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FBE 67FE            	  3390:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FC0 64FE            	  3391:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FC2 69FE            	  3392:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FC4 023C00EF        	  3393:             andi.b #$EF,CCR       * Clear X Flag
01:00001FC8 4040            	  3394:             negx.w d0
01:00001FCA 6BFE            	  3395:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FCC 67FE            	  3396:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FCE 64FE            	  3397:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FD0 69FE            	  3398:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FD2 003C0010        	  3399:             ori.b #$10,CCR        * Set X Flag
01:00001FD6 4041            	  3400:             negx.w d1
01:00001FD8 6BFE            	  3401:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FDA 67FE            	  3402:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FDC 64FE            	  3403:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FDE 69FE            	  3404:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FE0 0C417FFF        	  3405:             cmpi.w #$7FFF,d1
01:00001FE4 66FE            	  3406:             bne.s *                   * Check Z Flag  beq/bne
01:00001FE6 023C00EF        	  3407:             andi.b #$EF,CCR       * Clear X Flag
01:00001FEA 4041            	  3408:             negx.w d1
01:00001FEC 6AFE            	  3409:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FEE 67FE            	  3410:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FF0 64FE            	  3411:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FF2 69FE            	  3412:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FF4 0C418001        	  3413:             cmpi.w #$8001,d1
01:00001FF8 66FE            	  3414:             bne.s *                   * Check Z Flag  beq/bne
01:00001FFA 30BC7FFF        	  3415:             move.w #$7FFF,(a0)
01:00001FFE 003C0010        	  3416:             ori.b #$10,CCR        * Set X Flag
01:00002002 4050            	  3417:             negx.w (a0)
01:00002004 6AFE            	  3418:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002006 67FE            	  3419:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002008 64FE            	  3420:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3421: ***            
                            	  3422: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000200A 30BCF567        	  3423:             move.w #$F567,(a0)
01:0000200E 023C00EF        	  3424:             andi.b #$EF,CCR       * Clear X Flag
01:00002012 4050            	  3425:             negx.w (a0)
01:00002014 6BFE            	  3426:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002016 67FE            	  3427:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002018 64FE            	  3428:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000201A 69FE            	  3429:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000201C 30BCF567        	  3430:             move.w #$F567,(a0)
01:00002020 003C0010        	  3431:             ori.b #$10,CCR        * Set X Flag
01:00002024 4050            	  3432:             negx.w (a0)
01:00002026 6BFE            	  3433:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002028 67FE            	  3434:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000202A 64FE            	  3435:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000202C 69FE            	  3436:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000202E 0C500A98        	  3437:             cmpi.w #$0A98,(a0)
01:00002032 66FE            	  3438:             bne.s *                   * Check Z Flag  beq/bne
01:00002034 023C00EF        	  3439:             andi.b #$EF,CCR       * Clear X Flag
01:00002038 4050            	  3440:             negx.w (a0)
01:0000203A 6AFE            	  3441:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000203C 67FE            	  3442:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000203E 64FE            	  3443:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002040 69FE            	  3444:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002042 0C50F568        	  3445:             cmpi.w #$F568,(a0)
01:00002046 66FE            	  3446:             bne.s *                   * Check Z Flag  beq/bne
                            	  3447: 
                            	  3448: 
                            	  3449: * -----
                            	  3450: 
                            	  3451: *     NEGX - LONG
01:00002048 307C0100        	  3452:             move.l #$00000100,a0
01:0000204C 7000            	  3453:             moveq  #$00000000,d0
01:0000204E 223C80000000    	  3454:             move.l #$80000000,d1
01:00002054 003C0010        	  3455:             ori.b #$10,CCR        * Set X Flag
01:00002058 4080            	  3456:             negx.l d0
01:0000205A 6AFE            	  3457:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000205C 67FE            	  3458:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000205E 64FE            	  3459:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002060 69FE            	  3460:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002062 023C00EF        	  3461:             andi.b #$EF,CCR       * Clear X Flag
01:00002066 4080            	  3462:             negx.l d0
01:00002068 6BFE            	  3463:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000206A 67FE            	  3464:             beq.s *                   * Check Z Flag  beq/bne 1
01:0000206C 64FE            	  3465:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:0000206E 69FE            	  3466:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002070 003C0010        	  3467:             ori.b #$10,CCR        * Set X Flag
01:00002074 4081            	  3468:             negx.l d1
01:00002076 6BFE            	  3469:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002078 67FE            	  3470:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000207A 64FE            	  3471:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000207C 69FE            	  3472:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000207E 0C817FFFFFFF    	  3473:             cmpi.l #$7FFFFFFF,d1
01:00002084 66FE            	  3474:             bne.s *                   * Check Z Flag  beq/bne
01:00002086 023C00EF        	  3475:             andi.b #$EF,CCR       * Clear X Flag
01:0000208A 4081            	  3476:             negx.l d1
01:0000208C 6AFE            	  3477:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000208E 67FE            	  3478:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002090 64FE            	  3479:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3480: ****            
                            	  3481: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002092 0C8180000001    	  3482:             cmpi.l #$80000001,d1
01:00002098 66FE            	  3483:             bne.s *                   * Check Z Flag  beq/bne
01:0000209A 20BC00007FFF    	  3484:             move.l #$7FFF,(a0)
01:000020A0 003C0010        	  3485:             ori.b #$10,CCR        * Set X Flag
01:000020A4 4090            	  3486:             negx.l (a0)
01:000020A6 6AFE            	  3487:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:000020A8 67FE            	  3488:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020AA 64FE            	  3489:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3490: ****            
                            	  3491: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020AC 20BCF5671234    	  3492:             move.l #$F5671234,(a0)
01:000020B2 023C00EF        	  3493:             andi.b #$EF,CCR       * Clear X Flag
01:000020B6 4090            	  3494:             negx.l (a0)
01:000020B8 6BFE            	  3495:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020BA 67FE            	  3496:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020BC 64FE            	  3497:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020BE 69FE            	  3498:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020C0 20BCF5675678    	  3499:             move.l #$F5675678,(a0)
01:000020C6 003C0010        	  3500:             ori.b #$10,CCR        * Set X Flag
01:000020CA 4090            	  3501:             negx.l (a0)
01:000020CC 6BFE            	  3502:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020CE 67FE            	  3503:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020D0 64FE            	  3504:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020D2 69FE            	  3505:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020D4 0C900A98A987    	  3506:             cmpi.l #$0A98A987,(a0)
01:000020DA 66FE            	  3507:             bne.s *                   * Check Z Flag  beq/bne
01:000020DC 023C00EF        	  3508:             andi.b #$EF,CCR       * Clear X Flag
01:000020E0 4090            	  3509:             negx.l (a0)
01:000020E2 6AFE            	  3510:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020E4 67FE            	  3511:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020E6 64FE            	  3512:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020E8 69FE            	  3513:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020EA 0C90F5675679    	  3514:             cmpi.l #$F5675679,(a0)
01:000020F0 66FE            	  3515:             bne.s *                   * Check Z Flag  beq/bne
                            	  3516: 
                            	  3517: 
                            	  3518: * -----
                            	  3519: 
                            	  3520: *     CLR - BYTE
01:000020F2 307C0100        	  3521:             move.l #$00000100,a0
01:000020F6 203C12345678    	  3522:             move.l #$12345678,d0
01:000020FC 223C12345678    	  3523:             move.l #$12345678,d1
01:00002102 243C12345678    	  3524:             move.l #$12345678,d2
01:00002108 283C12345600    	  3525:             move.l #$12345600,d4
01:0000210E 2A3C12340000    	  3526:             move.l #$12340000,d5
01:00002114 7C00            	  3527:             moveq  #$00000000,d6
                            	  3528: 
01:00002116 4200            	  3529:             clr.b d0
01:00002118 66FE            	  3530:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000211A 6BFE            	  3531:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000211C B880            	  3532:             cmp.l d0,d4
01:0000211E 66FE            	  3533:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3534: 
01:00002120 4241            	  3535:             clr.w d1
01:00002122 66FE            	  3536:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002124 6BFE            	  3537:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002126 BA81            	  3538:             cmp.l d1,d5
01:00002128 66FE            	  3539:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3540: 
01:0000212A 7400            	  3541:             clr.l d2
01:0000212C 66FE            	  3542:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000212E 6BFE            	  3543:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002130 BC82            	  3544:             cmp.l d2,d6
01:00002132 66FE            	  3545:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3546: 
01:00002134 4E75            	  3547:             rts
                            	  3548: 
                            	  3549: 
                            	  3550: 
                            	  3551: *-----------------------------------------------------------
                            	  3552: *-----------------------------------------------------------
                            	  3553: * OPCODE : MOVEM
                            	  3554: *-----------------------------------------------------------
                            	  3555: *-----------------------------------------------------------
                            	  3556: op_MOVEM:
                            	  3557: 
                            	  3558: *     WORD  Registers --> Memory
01:00002136 203C0000D0D0    	  3559:             move.l #$0000d0d0,d0
01:0000213C 223C0000D1D1    	  3560:             move.l #$0000d1d1,d1
01:00002142 243C0000D2D2    	  3561:             move.l #$0000d2d2,d2
01:00002148 263C0000D3D3    	  3562:             move.l #$0000d3d3,d3
01:0000214E 283C0000D4D4    	  3563:             move.l #$0000d4d4,d4
01:00002154 2A3C0000D5D5    	  3564:             move.l #$0000d5d5,d5
01:0000215A 2C3C0000D6D6    	  3565:             move.l #$0000d6d6,d6
01:00002160 2E3C0000D7D7    	  3566:             move.l #$0000d7d7,d7
01:00002166 307C0A0A        	  3567:             move.l #$00000a0a,a0
01:0000216A 327C1A1A        	  3568:             move.l #$00001a1a,a1
01:0000216E 347C2A2A        	  3569:             move.l #$00002a2a,a2
01:00002172 367C3A3A        	  3570:             move.l #$00003a3a,a3
01:00002176 387C4A4A        	  3571:             move.l #$00004a4a,a4
01:0000217A 3A7C5A5A        	  3572:             move.l #$00005a5a,a5
01:0000217E 3C7C6A6A        	  3573:             move.l #$00006a6a,a6
                            	  3574: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3575: 
01:00002182 48B8FFFF0100    	  3576:             movem.w D0-D7/A0-A7,$00000100
                            	  3577: 
01:00002188 307C0100        	  3578:             move.l #$00000100,a0
                            	  3579: 
01:0000218C B058            	  3580:             cmp.w (a0)+,d0
01:0000218E 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002190 B258            	  3582:             cmp.w (a0)+,d1
01:00002192 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002194 B458            	  3584:             cmp.w (a0)+,d2
01:00002196 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002198 B658            	  3586:             cmp.w (a0)+,d3
01:0000219A 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000219C B858            	  3588:             cmp.w (a0)+,d4
01:0000219E 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021A0 BA58            	  3590:             cmp.w (a0)+,d5
01:000021A2 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021A4 BC58            	  3592:             cmp.w (a0)+,d6
01:000021A6 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021A8 BE58            	  3594:             cmp.w (a0)+,d7
01:000021AA 66FE            	  3595:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3596: 
01:000021AC 0C580A0A        	  3597:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:000021B0 66FE            	  3598:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3599: 
01:000021B2 B2D8            	  3600:             cmp.w (a0)+,a1
01:000021B4 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021B6 B4D8            	  3602:             cmp.w (a0)+,a2
01:000021B8 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021BA B6D8            	  3604:             cmp.w (a0)+,a3
01:000021BC 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021BE B8D8            	  3606:             cmp.w (a0)+,a4
01:000021C0 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021C2 BAD8            	  3608:             cmp.w (a0)+,a5
01:000021C4 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021C6 BCD8            	  3610:             cmp.w (a0)+,a6
01:000021C8 66FE            	  3611:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: 
                            	  3616: *     LONG  Registers --> Memory
01:000021CA 203CD0D0D0D0    	  3617:             move.l #$d0d0d0d0,d0
01:000021D0 223CD1D1D1D1    	  3618:             move.l #$d1d1d1d1,d1
01:000021D6 243CD2D2D2D2    	  3619:             move.l #$d2d2d2d2,d2
01:000021DC 263CD3D3D3D3    	  3620:             move.l #$d3d3d3d3,d3
01:000021E2 283CD4D4D4D4    	  3621:             move.l #$d4d4d4d4,d4
01:000021E8 2A3CD5D5D5D5    	  3622:             move.l #$d5d5d5d5,d5
01:000021EE 2C3CD6D6D6D6    	  3623:             move.l #$d6d6d6d6,d6
01:000021F4 2E3CD7D7D7D7    	  3624:             move.l #$d7d7d7d7,d7
01:000021FA 207C0A0A0A0A    	  3625:             move.l #$0a0a0a0a,a0
01:00002200 227C1A1A1A1A    	  3626:             move.l #$1a1a1a1a,a1
01:00002206 247C2A2A2A2A    	  3627:             move.l #$2a2a2a2a,a2
01:0000220C 267C3A3A3A3A    	  3628:             move.l #$3a3a3a3a,a3
01:00002212 287C4A4A4A4A    	  3629:             move.l #$4a4a4a4a,a4
01:00002218 2A7C5A5A5A5A    	  3630:             move.l #$5a5a5a5a,a5
01:0000221E 2C7C6A6A6A6A    	  3631:             move.l #$6a6a6a6a,a6
                            	  3632: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3633: 
                            	  3634: 
01:00002224 48F8FFFF0120    	  3635:             movem.l D0-D7/A0-A7,$00000120
                            	  3636: 
01:0000222A 307C0120        	  3637:             move.l #$00000120,a0
                            	  3638: 
01:0000222E B098            	  3639:             cmp.l (a0)+,d0
01:00002230 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002232 B298            	  3641:             cmp.l (a0)+,d1
01:00002234 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002236 B498            	  3643:             cmp.l (a0)+,d2
01:00002238 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000223A B698            	  3645:             cmp.l (a0)+,d3
01:0000223C 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000223E B898            	  3647:             cmp.l (a0)+,d4
01:00002240 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002242 BA98            	  3649:             cmp.l (a0)+,d5
01:00002244 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002246 BC98            	  3651:             cmp.l (a0)+,d6
01:00002248 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000224A BE98            	  3653:             cmp.l (a0)+,d7
01:0000224C 66FE            	  3654:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3655: 
01:0000224E 0C980A0A0A0A    	  3656:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002254 66FE            	  3657:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3658: 
01:00002256 B3D8            	  3659:             cmp.l (a0)+,a1
01:00002258 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000225A B5D8            	  3661:             cmp.l (a0)+,a2
01:0000225C 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000225E B7D8            	  3663:             cmp.l (a0)+,a3
01:00002260 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002262 B9D8            	  3665:             cmp.l (a0)+,a4
01:00002264 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002266 BBD8            	  3667:             cmp.l (a0)+,a5
01:00002268 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000226A BDD8            	  3669:             cmp.l (a0)+,a6
01:0000226C 66FE            	  3670:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3671: *      ----
                            	  3672: 
                            	  3673: 
                            	  3674: *     WORD  Registers --> Memory  -(An) EA Mode
01:0000226E 203C0000D0D0    	  3675:             move.l #$0000d0d0,d0
01:00002274 223C0000D1D1    	  3676:             move.l #$0000d1d1,d1
01:0000227A 243C0000D2D2    	  3677:             move.l #$0000d2d2,d2
01:00002280 263C0000D3D3    	  3678:             move.l #$0000d3d3,d3
01:00002286 283C0000D4D4    	  3679:             move.l #$0000d4d4,d4
01:0000228C 2A3C0000D5D5    	  3680:             move.l #$0000d5d5,d5
01:00002292 2C3C0000D6D6    	  3681:             move.l #$0000d6d6,d6
01:00002298 2E3C0000D7D7    	  3682:             move.l #$0000d7d7,d7
01:0000229E 307C0A0A        	  3683:             move.l #$00000a0a,a0
01:000022A2 327C1A1A        	  3684:             move.l #$00001a1a,a1
01:000022A6 347C2A2A        	  3685:             move.l #$00002a2a,a2
01:000022AA 367C3A3A        	  3686:             move.l #$00003a3a,a3
01:000022AE 387C4A4A        	  3687:             move.l #$00004a4a,a4
01:000022B2 3A7C5A5A        	  3688:             move.l #$00005a5a,a5
01:000022B6 3C7C6A6A        	  3689:             move.l #$00006a6a,a6
                            	  3690: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3691: 
01:000022BA 307C01A0        	  3692:             move.l #$000001A0,a0
01:000022BE 48A0FFFF        	  3693:             movem.w D0-D7/A0-A7,-(a0)
                            	  3694: 
01:000022C2 307C019E        	  3695:             move.l #$0000019E,a0
                            	  3696: 
01:000022C6 BCE0            	  3697:             cmp.w -(a0),a6
01:000022C8 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CA BAE0            	  3699:             cmp.w -(a0),a5
01:000022CC 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CE B8E0            	  3701:             cmp.w -(a0),a4
01:000022D0 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D2 B6E0            	  3703:             cmp.w -(a0),a3
01:000022D4 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D6 B4E0            	  3705:             cmp.w -(a0),a2
01:000022D8 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022DA B2E0            	  3707:             cmp.w -(a0),a1
01:000022DC 66FE            	  3708:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022DE B0E0            	  3709:             cmp.w -(a0),a0
                            	  3710: *            bne.s *                   * Check Z Flag  beq/bne 0
01:000022E0 BE60            	  3711:             cmp.w -(a0),d7
01:000022E2 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E4 BC60            	  3713:             cmp.w -(a0),d6
01:000022E6 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E8 BA60            	  3715:             cmp.w -(a0),d5
01:000022EA 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022EC B860            	  3717:             cmp.w -(a0),d4
01:000022EE 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F0 B660            	  3719:             cmp.w -(a0),d3
01:000022F2 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F4 B460            	  3721:             cmp.w -(a0),d2
01:000022F6 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F8 B260            	  3723:             cmp.w -(a0),d1
01:000022FA 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022FC B060            	  3725:             cmp.w -(a0),d0
01:000022FE 66FE            	  3726:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: 
                            	  3731: *     LONG  Registers --> Memory   -(An) EA Mode
01:00002300 203CD0D0D0D0    	  3732:             move.l #$d0d0d0d0,d0
01:00002306 223CD1D1D1D1    	  3733:             move.l #$d1d1d1d1,d1
01:0000230C 243CD2D2D2D2    	  3734:             move.l #$d2d2d2d2,d2
01:00002312 263CD3D3D3D3    	  3735:             move.l #$d3d3d3d3,d3
01:00002318 283CD4D4D4D4    	  3736:             move.l #$d4d4d4d4,d4
01:0000231E 2A3CD5D5D5D5    	  3737:             move.l #$d5d5d5d5,d5
01:00002324 2C3CD6D6D6D6    	  3738:             move.l #$d6d6d6d6,d6
01:0000232A 2E3CD7D7D7D7    	  3739:             move.l #$d7d7d7d7,d7
01:00002330 207C0A0A0A0A    	  3740:             move.l #$0a0a0a0a,a0
01:00002336 227C1A1A1A1A    	  3741:             move.l #$1a1a1a1a,a1
01:0000233C 247C2A2A2A2A    	  3742:             move.l #$2a2a2a2a,a2
01:00002342 267C3A3A3A3A    	  3743:             move.l #$3a3a3a3a,a3
01:00002348 287C4A4A4A4A    	  3744:             move.l #$4a4a4a4a,a4
01:0000234E 2A7C5A5A5A5A    	  3745:             move.l #$5a5a5a5a,a5
01:00002354 2C7C6A6A6A6A    	  3746:             move.l #$6a6a6a6a,a6
                            	  3747: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3748: 
                            	  3749: 
01:0000235A 307C01A0        	  3750:             move.l #$000001A0,a0
01:0000235E 48E0FFFF        	  3751:             movem.l D0-D7/A0-A7,-(a0)
                            	  3752: 
01:00002362 307C019C        	  3753:             move.l #$0000019C,a0
                            	  3754: 
01:00002366 BDE0            	  3755:             cmp.l -(a0),a6
01:00002368 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236A BBE0            	  3757:             cmp.l -(a0),a5
01:0000236C 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236E B9E0            	  3759:             cmp.l -(a0),a4
01:00002370 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002372 B7E0            	  3761:             cmp.l -(a0),a3
01:00002374 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002376 B5E0            	  3763:             cmp.l -(a0),a2
01:00002378 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237A B3E0            	  3765:             cmp.l -(a0),a1
01:0000237C 66FE            	  3766:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237E B1E0            	  3767:             cmp.l -(a0),a0
                            	  3768: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002380 BEA0            	  3769:             cmp.l -(a0),d7
01:00002382 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002384 BCA0            	  3771:             cmp.l -(a0),d6
01:00002386 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002388 BAA0            	  3773:             cmp.l -(a0),d5
01:0000238A 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000238C B8A0            	  3775:             cmp.l -(a0),d4
01:0000238E 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002390 B6A0            	  3777:             cmp.l -(a0),d3
01:00002392 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002394 B4A0            	  3779:             cmp.l -(a0),d2
01:00002396 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002398 B2A0            	  3781:             cmp.l -(a0),d1
01:0000239A 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000239C B0A0            	  3783:             cmp.l -(a0),d0
01:0000239E 66FE            	  3784:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3785: 
                            	  3786: 
                            	  3787: 
                            	  3788: *     ----
                            	  3789: 
                            	  3790: *     WORD - Memory --> Registers
01:000023A0 7000            	  3791:             moveq  #$00000000,d0
01:000023A2 7200            	  3792:             moveq  #$00000000,d1
01:000023A4 7400            	  3793:             moveq  #$00000000,d2
01:000023A6 7600            	  3794:             moveq  #$00000000,d3
01:000023A8 7800            	  3795:             moveq  #$00000000,d4
01:000023AA 7A00            	  3796:             moveq  #$00000000,d5
01:000023AC 7C00            	  3797:             moveq  #$00000000,d6
01:000023AE 7E00            	  3798:             moveq  #$00000000,d7
01:000023B0 91C8            	  3799:             move.l #$00000000,a0
01:000023B2 93C9            	  3800:             move.l #$00000000,a1
01:000023B4 95CA            	  3801:             move.l #$00000000,a2
01:000023B6 97CB            	  3802:             move.l #$00000000,a3
01:000023B8 99CC            	  3803:             move.l #$00000000,a4
01:000023BA 9BCD            	  3804:             move.l #$00000000,a5
01:000023BC 9DCE            	  3805:             move.l #$00000000,a6
                            	  3806: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3807: 
01:000023BE 4CB82A550100    	  3808:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3809: 
01:000023C4 B0BCFFFFD0D0    	  3810:             cmp.l #$FFFFD0D0,d0
01:000023CA 66FE            	  3811:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023CC B4BCFFFFD1D1    	  3812:             cmp.l #$FFFFD1D1,d2
01:000023D2 66FE            	  3813:             bne.s *                  * Check Z Flag  beq/bne 0
01:000023D4 B8BCFFFFD2D2    	  3814:             cmp.l #$FFFFD2D2,d4
01:000023DA 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023DC BCBCFFFFD3D3    	  3816:             cmp.l #$FFFFD3D3,d6
01:000023E2 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023E4 B2FCD4D4        	  3818:             cmp.l #$FFFFD4D4,a1
01:000023E8 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EA B6FCD5D5        	  3820:             cmp.l #$FFFFD5D5,a3
01:000023EE 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F0 BAFCD6D6        	  3822:             cmp.l #$FFFFD6D6,a5
01:000023F4 66FE            	  3823:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3824: 
                            	  3825: 
                            	  3826: *     LONG - Memory --> Registers
01:000023F6 7000            	  3827:             moveq  #$00000000,d0
01:000023F8 7200            	  3828:             moveq  #$00000000,d1
01:000023FA 7400            	  3829:             moveq  #$00000000,d2
01:000023FC 7600            	  3830:             moveq  #$00000000,d3
01:000023FE 7800            	  3831:             moveq  #$00000000,d4
01:00002400 7A00            	  3832:             moveq  #$00000000,d5
01:00002402 7C00            	  3833:             moveq  #$00000000,d6
01:00002404 7E00            	  3834:             moveq  #$00000000,d7
01:00002406 91C8            	  3835:             move.l #$00000000,a0
01:00002408 93C9            	  3836:             move.l #$00000000,a1
01:0000240A 95CA            	  3837:             move.l #$00000000,a2
01:0000240C 97CB            	  3838:             move.l #$00000000,a3
01:0000240E 99CC            	  3839:             move.l #$00000000,a4
01:00002410 9BCD            	  3840:             move.l #$00000000,a5
01:00002412 9DCE            	  3841:             move.l #$00000000,a6
                            	  3842: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3843: 
01:00002414 4CF82A550120    	  3844:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3845: 
01:0000241A B0BCD0D0D0D0    	  3846:             cmp.l #$D0D0D0D0,d0
01:00002420 66FE            	  3847:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002422 B4BCD1D1D1D1    	  3848:             cmp.l #$D1D1D1D1,d2
01:00002428 66FE            	  3849:             bne.s *                  * Check Z Flag  beq/bne 0
01:0000242A B8BCD2D2D2D2    	  3850:             cmp.l #$D2D2D2D2,d4
01:00002430 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002432 BCBCD3D3D3D3    	  3852:             cmp.l #$D3D3D3D3,d6
01:00002438 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000243A B3FCD4D4D4D4    	  3854:             cmp.l #$D4D4D4D4,a1
01:00002440 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002442 B7FCD5D5D5D5    	  3856:             cmp.l #$D5D5D5D5,a3
01:00002448 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000244A BBFCD6D6D6D6    	  3858:             cmp.l #$D6D6D6D6,a5
01:00002450 66FE            	  3859:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3860: 
01:00002452 4E75            	  3861:             rts
                            	  3862: 
                            	  3863: 
                            	  3864: *-----------------------------------------------------------
                            	  3865: *-----------------------------------------------------------
                            	  3866: * OPCODE : ABCD
                            	  3867: *-----------------------------------------------------------
                            	  3868: *-----------------------------------------------------------
                            	  3869: op_ABCD:
                            	  3870: 
                            	  3871: *     Test with X Flag CLEARED
01:00002454 307C0110        	  3872:                 move.l #$00000110,a0 * Address pointer-X
01:00002458 327C0120        	  3873:                 move.l #$00000120,a1 * Address pointer-Y
01:0000245C 7000            	  3874:                 moveq  #$00000000,d0 * BCD byte-X
01:0000245E 7200            	  3875:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002460 7400            	  3876:                 moveq  #$00000000,d2
01:00002462 7600            	  3877:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002464 7800            	  3878:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002466 7A00            	  3879:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002468 2C3C00000099    	  3880:                 move.l #$00000099,d6 * Inner loop counter
01:0000246E 2E3C00000099    	  3881:                 move.l #$00000099,d7 * Outer loop counter
                            	  3882: 
01:00002474 2007            	  3883: ABCD_OUTER1:    move.l d7,d0
01:00002476 2206            	  3884: ABCD_INNER1:    move.l d6,d1
01:00002478 023C00EF        	  3885:                 andi.b #$EF,CCR     * Clear X Flag
01:0000247C 307C0110        	  3886:                 move.l #$00000110,a0 * Address pointer-X
01:00002480 327C0120        	  3887:                 move.l #$00000120,a1 * Address pointer-Y
01:00002484 1140FFFF        	  3888:                 move.b d0,-1(a0)
01:00002488 1341FFFF        	  3889:                 move.b d1,-1(a1)
                            	  3890: 
01:0000248C C300            	  3891:                 abcd d0,d1
01:0000248E 6402            	  3892:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002490 5284            	  3893:                 add.l #1,d4
01:00002492 DA81            	  3894: ABCD_NO_C1:     add.l d1,d5
                            	  3895: 
01:00002494 C308            	  3896:                 abcd -(a0),-(a1)
01:00002496 6402            	  3897:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002498 5284            	  3898:                 add.l #1,d4
01:0000249A D611            	  3899: ABCD_NO_C2:     add.b (a1),d3
                            	  3900: 
                            	  3901: 
01:0000249C 51CEFFD8        	  3902:                 dbf d6,ABCD_INNER1
01:000024A0 2C3C00000099    	  3903:                 move.l #$00000099,d6
01:000024A6 51CFFFCC        	  3904:                 dbf d7,ABCD_OUTER1
01:000024AA 0C8400005AFC    	  3905:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:000024B0 66FE            	  3906:                 bne.s *
01:000024B2 0C85001C9A34    	  3907:                 cmpi.l #$001C9A34,d5
01:000024B8 66FE            	  3908:                 bne.s *
01:000024BA 0C8300000034    	  3909:                 cmpi.l #$00000034,d3
01:000024C0 66FE            	  3910:                 bne.s *
                            	  3911: 
                            	  3912: *     Test with X Flag SET
01:000024C2 307C0110        	  3913:                 move.l #$00000110,a0 * Address pointer-X
01:000024C6 327C0120        	  3914:                 move.l #$00000120,a1 * Address pointer-Y
01:000024CA 7000            	  3915:                 moveq  #$00000000,d0 * BCD byte-X
01:000024CC 7200            	  3916:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024CE 7400            	  3917:                 moveq  #$00000000,d2
01:000024D0 7600            	  3918:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000024D2 7800            	  3919:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000024D4 7A00            	  3920:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000024D6 2C3C00000099    	  3921:                 move.l #$00000099,d6 * Inner loop counter
01:000024DC 2E3C00000099    	  3922:                 move.l #$00000099,d7 * Outer loop counter
                            	  3923: 
01:000024E2 2007            	  3924: ABCD_OUTER2:    move.l d7,d0
01:000024E4 2206            	  3925: ABCD_INNER2:    move.l d6,d1
01:000024E6 003C0010        	  3926:                 ori.b #$10,CCR      * Set X Flag
01:000024EA 307C0110        	  3927:                 move.l #$00000110,a0 * Address pointer-X
01:000024EE 327C0120        	  3928:                 move.l #$00000120,a1 * Address pointer-Y
01:000024F2 1140FFFF        	  3929:                 move.b d0,-1(a0)
01:000024F6 1341FFFF        	  3930:                 move.b d1,-1(a1)
                            	  3931: 
01:000024FA C300            	  3932:                 abcd d0,d1
01:000024FC 6402            	  3933:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:000024FE 5284            	  3934:                 add.l #1,d4
01:00002500 DA81            	  3935: ABCD_NO_C3:     add.l d1,d5
                            	  3936: 
01:00002502 C308            	  3937:                 abcd -(a0),-(a1)
01:00002504 6402            	  3938:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002506 5284            	  3939:                 add.l #1,d4
01:00002508 D611            	  3940: ABCD_NO_C4:     add.b (a1),d3
                            	  3941: 
                            	  3942: 
01:0000250A 51CEFFD8        	  3943:                 dbf d6,ABCD_INNER2
01:0000250E 2C3C00000099    	  3944:                 move.l #$00000099,d6
01:00002514 51CFFFCC        	  3945:                 dbf d7,ABCD_OUTER2
01:00002518 0C8400005B60    	  3946:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:0000251E 66FE            	  3947:                 bne.s *
01:00002520 0C85001CCFC8    	  3948:                 cmpi.l #$001CCFC8,d5
01:00002526 66FE            	  3949:                 bne.s *
01:00002528 0C8300000034    	  3950:                 cmpi.l #$00000034,d3
01:0000252E 66FE            	  3951:                 bne.s *
                            	  3952: 
                            	  3953: *             Quick check of Z Flag
01:00002530 103C0000        	  3954:                 move.b #$00,d0
01:00002534 123C0000        	  3955:                 move.b #$00,d1
01:00002538 44FC0000        	  3956:                 move #$00,CCR              * Set Z flag to 0
01:0000253C C101            	  3957:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:0000253E 67FE            	  3958:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3959: 
01:00002540 103C0001        	  3960:                 move.b #$01,d0
01:00002544 123C0000        	  3961:                 move.b #$00,d1
01:00002548 44FC0004        	  3962:                 move #$04,CCR              * Set Z flag to 0
01:0000254C C101            	  3963:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:0000254E 67FE            	  3964:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3965: 
01:00002550 4E75            	  3966:                 rts
                            	  3967: 
                            	  3968: *-----------------------------------------------------------
                            	  3969: *-----------------------------------------------------------
                            	  3970: * OPCODE : SBCD
                            	  3971: *-----------------------------------------------------------
                            	  3972: *-----------------------------------------------------------
                            	  3973: op_SBCD:
                            	  3974: 
                            	  3975: *     Test with X Flag CLEARED
01:00002552 307C0110        	  3976:                 move.l #$00000110,a0 * Address pointer-X
01:00002556 327C0120        	  3977:                 move.l #$00000120,a1 * Address pointer-Y
01:0000255A 7000            	  3978:                 moveq  #$00000000,d0 * BCD byte-X
01:0000255C 7200            	  3979:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000255E 7400            	  3980:                 moveq  #$00000000,d2
01:00002560 7600            	  3981:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002562 7800            	  3982:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002564 7A00            	  3983:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002566 2C3C00000099    	  3984:                 move.l #$00000099,d6 * Inner loop counter
01:0000256C 2E3C00000099    	  3985:                 move.l #$00000099,d7 * Outer loop counter
                            	  3986: 
01:00002572 2007            	  3987: SBCD_OUTER1:    move.l d7,d0
01:00002574 2206            	  3988: SBCD_INNER1:    move.l d6,d1
01:00002576 023C00EF        	  3989:                 andi.b #$EF,CCR     * Clear X Flag
01:0000257A 307C0110        	  3990:                 move.l #$00000110,a0 * Address pointer-X
01:0000257E 327C0120        	  3991:                 move.l #$00000120,a1 * Address pointer-Y
01:00002582 1140FFFF        	  3992:                 move.b d0,-1(a0)
01:00002586 1341FFFF        	  3993:                 move.b d1,-1(a1)
                            	  3994: 
01:0000258A 8300            	  3995:                 sbcd d0,d1
01:0000258C 6402            	  3996:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:0000258E 5284            	  3997:                 add.l #1,d4
01:00002590 DA81            	  3998: SBCD_NO_C1:     add.l d1,d5
                            	  3999: 
01:00002592 8308            	  4000:                 sbcd -(a0),-(a1)
01:00002594 6402            	  4001:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002596 5284            	  4002:                 add.l #1,d4
01:00002598 D611            	  4003: SBCD_NO_C2:     add.b (a1),d3
                            	  4004: 
                            	  4005: 
01:0000259A 51CEFFD8        	  4006:                 dbf d6,SBCD_INNER1
01:0000259E 2C3C00000099    	  4007:                 move.l #$00000099,d6
01:000025A4 51CFFFCC        	  4008:                 dbf d7,SBCD_OUTER1
01:000025A8 0C8400005C0A    	  4009:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:000025AE 66FE            	  4010:                 bne.s *
01:000025B0 0C85001C459E    	  4011:                 cmpi.l #$001C459E,d5
01:000025B6 66FE            	  4012:                 bne.s *
01:000025B8 0C830000009E    	  4013:                 cmpi.l #$0000009E,d3
01:000025BE 66FE            	  4014:                 bne.s *
                            	  4015: 
                            	  4016: *     Test with X Flag SET
01:000025C0 307C0110        	  4017:                 move.l #$00000110,a0 * Address pointer-X
01:000025C4 327C0120        	  4018:                 move.l #$00000120,a1 * Address pointer-Y
01:000025C8 7000            	  4019:                 moveq  #$00000000,d0 * BCD byte-X
01:000025CA 7200            	  4020:                 moveq  #$00000000,d1 * BCD byte-Y
01:000025CC 7400            	  4021:                 moveq  #$00000000,d2
01:000025CE 7600            	  4022:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000025D0 7800            	  4023:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025D2 7A00            	  4024:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000025D4 2C3C00000099    	  4025:                 move.l #$00000099,d6 * Inner loop counter
01:000025DA 2E3C00000099    	  4026:                 move.l #$00000099,d7 * Outer loop counter
                            	  4027: 
01:000025E0 2007            	  4028: SBCD_OUTER2:    move.l d7,d0
01:000025E2 2206            	  4029: SBCD_INNER2:    move.l d6,d1
01:000025E4 003C0010        	  4030:                 ori.b #$10,CCR      * Set X Flag
01:000025E8 307C0110        	  4031:                 move.l #$00000110,a0 * Address pointer-X
01:000025EC 327C0120        	  4032:                 move.l #$00000120,a1 * Address pointer-Y
01:000025F0 1140FFFF        	  4033:                 move.b d0,-1(a0)
01:000025F4 1341FFFF        	  4034:                 move.b d1,-1(a1)
                            	  4035: 
01:000025F8 8300            	  4036:                 sbcd d0,d1
01:000025FA 6402            	  4037:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:000025FC 5284            	  4038:                 add.l #1,d4
01:000025FE DA81            	  4039: SBCD_NO_C3:     add.l d1,d5
                            	  4040: 
01:00002600 8308            	  4041:                 sbcd -(a0),-(a1)
01:00002602 6402            	  4042:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002604 5284            	  4043:                 add.l #1,d4
01:00002606 D611            	  4044: SBCD_NO_C4:     add.b (a1),d3
                            	  4045: 
01:00002608 51CEFFD8        	  4046:                 dbf d6,SBCD_INNER2
01:0000260C 2C3C00000099    	  4047:                 move.l #$00000099,d6
01:00002612 51CFFFCC        	  4048:                 dbf d7,SBCD_OUTER2
01:00002616 0C8400005CA4    	  4049:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:0000261C 66FE            	  4050:                 bne.s *
01:0000261E 0C85001C5C66    	  4051:                 cmpi.l #$001C5C66,d5
01:00002624 66FE            	  4052:                 bne.s *
01:00002626 0C830000009E    	  4053:                 cmpi.l #$0000009E,d3
01:0000262C 66FE            	  4054:                 bne.s *
                            	  4055: 
                            	  4056: 
                            	  4057: *             Quick check of Z Flag
01:0000262E 103C0000        	  4058:                 move.b #$00,d0
01:00002632 123C0000        	  4059:                 move.b #$00,d1
01:00002636 44FC0000        	  4060:                 move #$00,CCR              * Set Z flag to 0
01:0000263A 8101            	  4061:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:0000263C 67FE            	  4062:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4063: 
01:0000263E 103C0001        	  4064:                 move.b #$01,d0
01:00002642 123C0000        	  4065:                 move.b #$00,d1
01:00002646 44FC0004        	  4066:                 move #$04,CCR              * Set Z flag to 0
01:0000264A 8101            	  4067:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:0000264C 67FE            	  4068:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4069: 
01:0000264E 4E75            	  4070:                 rts
                            	  4071: 
                            	  4072: *-----------------------------------------------------------
                            	  4073: *-----------------------------------------------------------
                            	  4074: * OPCODE : NBCD
                            	  4075: *-----------------------------------------------------------
                            	  4076: *-----------------------------------------------------------
                            	  4077: op_NBCD:
                            	  4078: 
                            	  4079: *        NBCD to a  Register
                            	  4080: 
01:00002650 7000            	  4081:                 moveq  #$00000000,d0 * BCD byte
01:00002652 7200            	  4082:                 moveq  #$00000000,d1
01:00002654 7400            	  4083:                 moveq  #$00000000,d2
01:00002656 7600            	  4084:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:00002658 7800            	  4085:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000265A 7A00            	  4086:                 moveq  #$00000000,d5 * Cumulative BCD results
01:0000265C 2C3C00000099    	  4087:                 move.l #$00000099,d6
01:00002662 2E3C00000099    	  4088:                 move.l #$00000099,d7 * Loop counter
                            	  4089: 
01:00002668 2007            	  4090: NBCD_LOOP:      move.l d7,d0
01:0000266A 44FC0004        	  4091:                 move #$04,CCR        * Set Z flag to 0
                            	  4092: 
01:0000266E 4800            	  4093:                 nbcd d0
                            	  4094: 
01:00002670 6402            	  4095:                 bcc.s NBCD_NO_C         * Check C Flag
01:00002672 5284            	  4096:                 add.l #1,d4
01:00002674 6602            	  4097: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:00002676 5283            	  4098:                 add.l #1,d3
01:00002678 DA80            	  4099: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4100: 
01:0000267A 51CFFFEC        	  4101:                 dbf d7,NBCD_LOOP
                            	  4102: 
01:0000267E 0C8300000001    	  4103:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002684 66FE            	  4104:                 bne.s *
01:00002686 0C8400000099    	  4105:                 cmpi.l #$00000099,d4
01:0000268C 66FE            	  4106:                 bne.s *
01:0000268E 0C8500002E3B    	  4107:                 cmpi.l #$00002E3B,d5
01:00002694 66FE            	  4108:                 bne.s *
                            	  4109: 
                            	  4110: 
                            	  4111: *        NBCD to a memory location
                            	  4112: 
01:00002696 7000            	  4113:                 moveq  #$00000000,d0 * BCD byte
01:00002698 7200            	  4114:                 moveq  #$00000000,d1
01:0000269A 7400            	  4115:                 moveq  #$00000000,d2
01:0000269C 7600            	  4116:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:0000269E 7800            	  4117:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026A0 7A00            	  4118:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026A2 2C3C00000099    	  4119:                 move.l #$00000099,d6
01:000026A8 2E3C00000099    	  4120:                 move.l #$00000099,d7 * Loop counter
                            	  4121: 
01:000026AE 11C70100        	  4122: NBCD_LOOP1:     move.b d7,$00000100
01:000026B2 44FC0004        	  4123:                 move #$04,CCR        * Set Z flag to 0
                            	  4124: 
01:000026B6 48380100        	  4125:                 nbcd $00000100
01:000026BA 10380100        	  4126:                 move.b $00000100,d0
                            	  4127: 
01:000026BE 6402            	  4128:                 bcc.s NBCD_NO_C1        * Check C Flag
01:000026C0 5284            	  4129:                 add.l #1,d4
01:000026C2 6602            	  4130: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:000026C4 5283            	  4131:                 add.l #1,d3
01:000026C6 DA80            	  4132: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4133: 
01:000026C8 51CFFFE4        	  4134:                 dbf d7,NBCD_LOOP1
                            	  4135: 
01:000026CC 0C8300000001    	  4136:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:000026D2 66FE            	  4137:                 bne.s *
01:000026D4 4A84            	  4138:                 cmpi.l #$00000000,d4
01:000026D6 66FE            	  4139:                 bne.s *
01:000026D8 0C8500002E3B    	  4140:                 cmpi.l #$00002E3B,d5
01:000026DE 66FE            	  4141:                 bne.s *
                            	  4142: 
                            	  4143: 
01:000026E0 4E75            	  4144:                 rts
                            	  4145: 
                            	  4146: 
                            	  4147: 
                            	  4148: *-----------------------------------------------------------
                            	  4149: *-----------------------------------------------------------
                            	  4150: * OPCODE : TRAPV
                            	  4151: *-----------------------------------------------------------
                            	  4152: *-----------------------------------------------------------
                            	  4153: op_TRAPV:
                            	  4154: 
                            	  4155: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4156: 
01:000026E2 7000            	  4157:                 moveq  #$00000000,d0 * Clear d0
                            	  4158: 
01:000026E4 44FC0000        	  4159:                 move #$00,CCR        * Clear V flag
01:000026E8 4E76            	  4160:                 trapv
01:000026EA 4A80            	  4161:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:000026EC 66FE            	  4162:                 bne.s *
                            	  4163: 
01:000026EE 44FC0002        	  4164:                 move #$02,CCR        * Set V flag
01:000026F2 4E76            	  4165:                 trapv
01:000026F4 0C8012345678    	  4166:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:000026FA 66FE            	  4167:                 bne.s *
                            	  4168: 
                            	  4169: 
01:000026FC 4E75            	  4170:                 rts
                            	  4171: 
                            	  4172: 
                            	  4173: 
                            	  4174: *-----------------------------------------------------------
                            	  4175: *-----------------------------------------------------------
                            	  4176: * OPCODE : RTR
                            	  4177: *-----------------------------------------------------------
                            	  4178: *-----------------------------------------------------------
                            	  4179: 
                            	  4180: op_RTR:
                            	  4181: 
                            	  4182: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4183: 
01:000026FE 41FA000C        	  4184:                 lea RTR_DONE,a0
01:00002702 2F08            	  4185:                 move.l a0,-(a7)     * push destination PC to the stack
01:00002704 2F3C0000FF15    	  4186:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
01:0000270A 4E77            	  4187:                 rtr
                            	  4188: 
01:0000270C 40C0            	  4189: RTR_DONE:       move SR,d0
01:0000270E 0240001F        	  4190:                 andi #$1F,d0
01:00002712 0C400015        	  4191:                 cmpi #$15,d0
01:00002716 66FE            	  4192:                 bne.s *
                            	  4193: 
01:00002718 4E75            	  4194:                 rts
                            	  4195: 
                            	  4196: 
01:0000271A 283C44444444    	  4197: BSR_FAR2:       move.l #$44444444,d4
01:00002720 4E75            	  4198:                 rts
                            	  4199: 
                            	  4200: 
                            	  4201: *-----------------------------------------------------------
                            	  4202: *-----------------------------------------------------------
                            	  4203: * OPCODE : BCC
                            	  4204: *-----------------------------------------------------------
                            	  4205: *-----------------------------------------------------------
                            	  4206: 
01:00002722 44FC0000        	  4207: op_BCC:         move #$00,CCR
01:00002726 6202            	  4208:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:00002728 60FE            	  4209:                 bra.s *
                            	  4210: 
01:0000272A 44FC0001        	  4211: BCC1:           move #$01,CCR
01:0000272E 63000004        	  4212:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:00002732 60FE            	  4213:                 bra.s *
                            	  4214: 
01:00002734 44FC0000        	  4215: BCC2:           move #$00,CCR
01:00002738 6402            	  4216:                 bcc.s BCC3            * Carry Clear         C=0
01:0000273A 60FE            	  4217:                 bra.s *
                            	  4218: 
01:0000273C 44FC0001        	  4219: BCC3:           move #$01,CCR
01:00002740 65000004        	  4220:                 bcs.w BCC4            * Carry Set           C=1
01:00002744 60FE            	  4221:                 bra.s *
                            	  4222: 
01:00002746 44FC0000        	  4223: BCC4:           move #$00,CCR
01:0000274A 6602            	  4224:                 bne.s BCC5            * Not Equal           Z=0
01:0000274C 60FE            	  4225:                 bra.s *
                            	  4226: 
01:0000274E 44FC0004        	  4227: BCC5:           move #$04,CCR
01:00002752 67000004        	  4228:                 beq.w BCC6            * Equal               Z=1
01:00002756 60FE            	  4229:                 bra.s *
                            	  4230: 
01:00002758 44FC0000        	  4231: BCC6:           move #$00,CCR
01:0000275C 6802            	  4232:                 bvc.s BCC7            * V Clear             V=0
01:0000275E 60FE            	  4233:                 bra.s *
                            	  4234: 
01:00002760 44FC0002        	  4235: BCC7:           move #$02,CCR
01:00002764 69000004        	  4236:                 bvs.w BCC8            * V Set               V=1
01:00002768 60FE            	  4237:                 bra.s *
                            	  4238: 
01:0000276A 44FC0000        	  4239: BCC8:           move #$00,CCR
01:0000276E 6A02            	  4240:                 bpl.s BCC9            * Plus                N=0
01:00002770 60FE            	  4241:                 bra.s *
                            	  4242: 
01:00002772 44FC0008        	  4243: BCC9:           move #$08,CCR
01:00002776 6B000004        	  4244:                 bmi.w BCC10           * Minus               N=1
01:0000277A 60FE            	  4245:                 bra.s *
                            	  4246: 
01:0000277C 44FC0000        	  4247: BCC10:          move #$00,CCR
01:00002780 6C02            	  4248:                 bge.s BCC11           * Greater or Equal    N=V
01:00002782 60FE            	  4249:                 bra.s *
                            	  4250: 
01:00002784 44FC0002        	  4251: BCC11:          move #$02,CCR
01:00002788 6D000004        	  4252:                 blt.w BCC12           * Less Than           N!=V
01:0000278C 60FE            	  4253:                 bra.s *
                            	  4254: 
01:0000278E 44FC000A        	  4255: BCC12:          move #$0A,CCR
01:00002792 6E02            	  4256:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:00002794 60FE            	  4257:                 bra.s *
                            	  4258: 
01:00002796 44FC0006        	  4259: BCC13:          move #$06,CCR
01:0000279A 6F000004        	  4260:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:0000279E 60FE            	  4261:                 bra.s *
                            	  4262: 
                            	  4263: 
01:000027A0 4E75            	  4264: BCC14:          rts
                            	  4265: 
                            	  4266: 
                            	  4267: *-----------------------------------------------------------
                            	  4268: *-----------------------------------------------------------
                            	  4269: * OPCODE : DBCC
                            	  4270: *-----------------------------------------------------------
                            	  4271: *-----------------------------------------------------------
                            	  4272: 
01:000027A2 7003            	  4273: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:000027A4 7200            	  4274:                 moveq  #$00000000,d1    * Accumulator
01:000027A6 44FC0000        	  4275:                 move #$00,CCR
                            	  4276: 
01:000027AA 5201            	  4277: DBCC_LOOP1:     addi.b #$1,d1
01:000027AC 51C8FFFC        	  4278:                 dbf d0,DBCC_LOOP1
                            	  4279: 
01:000027B0 0C8100000004    	  4280:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:000027B6 66FE            	  4281:                 bne.s *
                            	  4282: 
01:000027B8 5201            	  4283: DBCC_LOOP2:     addi.b #$1,d1
01:000027BA 54C8FFFC        	  4284:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4285: 
01:000027BE 0C8100000005    	  4286:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:000027C4 66FE            	  4287:                 bne.s *
                            	  4288: 
01:000027C6 4E75            	  4289:                 rts
                            	  4290: 
                            	  4291: 
                            	  4292: *-----------------------------------------------------------
                            	  4293: *-----------------------------------------------------------
                            	  4294: * OPCODE : SCC
                            	  4295: *-----------------------------------------------------------
                            	  4296: *-----------------------------------------------------------
                            	  4297: 
01:000027C8 44FC0001        	  4298: op_SCC:         move #$01,CCR
01:000027CC 54F900010000    	  4299:                 scc $00010000                   * Clear the EA byte
01:000027D2 4A3900010000    	  4300:                 cmpi.b #$00,$00010000
01:000027D8 66FE            	  4301:                 bne.s *
                            	  4302: 
01:000027DA 44FC0000        	  4303:                 move #$00,CCR
01:000027DE 54F900010000    	  4304:                 scc $00010000                   * Set the EA byte to 0xFF
01:000027E4 0C3900FF00010000	  4305:                 cmpi.b #$FF,$00010000
01:000027EC 66FE            	  4306:                 bne.s *
                            	  4307: 
01:000027EE 4E75            	  4308:                 rts
                            	  4309: 
                            	  4310: 
                            	  4311: 
                            	  4312: *-----------------------------------------------------------
                            	  4313: *-----------------------------------------------------------
                            	  4314: * OPCODE : ADDQ
                            	  4315: *-----------------------------------------------------------
                            	  4316: *-----------------------------------------------------------
                            	  4317: 
                            	  4318: op_ADDQ:
                            	  4319: 
                            	  4320: *     BYTE
01:000027F0 203C000000FF    	  4321:                 move.l #$000000FF,d0    * Loop counter
01:000027F6 7200            	  4322:                 moveq  #$00000000,d1    * Flag results accumulator
01:000027F8 7400            	  4323:                 moveq  #$00000000,d2    * Data results accumulator
01:000027FA 7600            	  4324:                 moveq  #$00000000,d3
01:000027FC 7800            	  4325:                 moveq  #$00000000,d4
01:000027FE 7A00            	  4326:                 moveq  #$00000000,d5
01:00002800 7C00            	  4327:                 moveq  #$00000000,d6
01:00002802 7E00            	  4328:                 moveq  #$00000000,d7
                            	  4329: 
01:00002804 5605            	  4330: ADDQ_LOOP1:     addq.b #3,d5
01:00002806 40C6            	  4331:                 move SR,d6
01:00002808 02860000001F    	  4332:                 andi.l #$1F,d6        * Isolate flags
01:0000280E D286            	  4333:                 add.l d6,d1           * Copy flag results into accumulator
01:00002810 D485            	  4334:                 add.l d5,d2           * Copy data results into data accumulator
01:00002812 51C8FFF0        	  4335:                 dbf d0,ADDQ_LOOP1
                            	  4336: 
01:00002816 0C810000043D    	  4337:                 cmpi.l #$0000043D,d1
01:0000281C 66FE            	  4338:                 bne.s *
01:0000281E 0C8200007F80    	  4339:                 cmpi.l #$00007F80,d2
01:00002824 66FE            	  4340:                 bne.s *
                            	  4341: 
                            	  4342: 
                            	  4343: *     WORD
01:00002826 203C000000FF    	  4344:                 move.l #$000000FF,d0    * Loop counter
01:0000282C 7200            	  4345:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000282E 7400            	  4346:                 moveq  #$00000000,d2    * Data results accumulator
01:00002830 7600            	  4347:                 moveq  #$00000000,d3
01:00002832 7800            	  4348:                 moveq  #$00000000,d4
01:00002834 2A3C0000FFF0    	  4349:                 move.l #$0000FFF0,d5
01:0000283A 7C00            	  4350:                 moveq  #$00000000,d6
01:0000283C 7E00            	  4351:                 moveq  #$00000000,d7
01:0000283E 307C0100        	  4352:                 move.l #$00000100,a0
                            	  4353: 
01:00002842 5A45            	  4354: ADDQ_LOOP2:     addq.w #5,d5
01:00002844 40C6            	  4355:                 move SR,d6
01:00002846 02860000001F    	  4356:                 andi.l #$1F,d6        * Isolate flags
01:0000284C D286            	  4357:                 add.l d6,d1           * Copy flag results into accumulator
01:0000284E D485            	  4358:                 add.l d5,d2           * Copy data results into data accumulator
01:00002850 51C8FFF0        	  4359:                 dbf d0,ADDQ_LOOP2
                            	  4360: 
01:00002854 0C8100000029    	  4361:                 cmpi.l #$00000029,d1
01:0000285A 66FE            	  4362:                 bne.s *
01:0000285C 0C8200057280    	  4363:                 cmpi.l #$00057280,d2
01:00002862 66FE            	  4364:                 bne.s *
                            	  4365: 
                            	  4366: 
                            	  4367: *     LONG
01:00002864 203C000000FF    	  4368:                 move.l #$000000FF,d0    * Loop counter
01:0000286A 7200            	  4369:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000286C 7400            	  4370:                 moveq  #$00000000,d2    * Data results accumulator
01:0000286E 7600            	  4371:                 moveq  #$00000000,d3
01:00002870 7800            	  4372:                 moveq  #$00000000,d4
01:00002872 7AF0            	  4373:                 move.l #$FFFFFFF0,d5
01:00002874 7C00            	  4374:                 moveq  #$00000000,d6
01:00002876 7E00            	  4375:                 moveq  #$00000000,d7
                            	  4376: 
01:00002878 5285            	  4377: ADDQ_LOOP3:     addq.l #1,d5
01:0000287A 40C6            	  4378:                 move SR,d6
01:0000287C 02860000001F    	  4379:                 andi.l #$1F,d6        * Isolate flags
01:00002882 D286            	  4380:                 add.l d6,d1           * Copy flag results into accumulator
01:00002884 D485            	  4381:                 add.l d5,d2           * Copy data results into data accumulator
01:00002886 51C8FFF0        	  4382:                 dbf d0,ADDQ_LOOP3
                            	  4383: 
01:0000288A 0C810000008D    	  4384:                 cmpi.l #$0000008D,d1
01:00002890 66FE            	  4385:                 bne.s *
01:00002892 0C8200007080    	  4386:                 cmpi.l #$00007080,d2
01:00002898 66FE            	  4387:                 bne.s *
                            	  4388: 
                            	  4389: *     Check that Flags are not updated for Address registers
01:0000289A 207C0000FFFF    	  4390:                 move.l #$0000FFFF,a0
01:000028A0 44FC0000        	  4391:                 move #$00,CCR         * Clear flags
01:000028A4 5E48            	  4392:                 addq.w #$7,a0
01:000028A6 65FE            	  4393:                 bcs.s *
                            	  4394: 
01:000028A8 4E75            	  4395:                 rts
                            	  4396: 
                            	  4397: 
                            	  4398: 
                            	  4399: *-----------------------------------------------------------
                            	  4400: *-----------------------------------------------------------
                            	  4401: * OPCODE : SUBQ
                            	  4402: *-----------------------------------------------------------
                            	  4403: *-----------------------------------------------------------
                            	  4404: 
                            	  4405: op_SUBQ:
                            	  4406: 
                            	  4407: *     BYTE
01:000028AA 203C000000FF    	  4408:                 move.l #$000000FF,d0    * Loop counter
01:000028B0 7200            	  4409:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028B2 243C00001234    	  4410:                 move.l #$00001234,d2    * Data results accumulator
01:000028B8 7600            	  4411:                 moveq  #$00000000,d3
01:000028BA 7800            	  4412:                 moveq  #$00000000,d4
01:000028BC 7A12            	  4413:                 moveq  #$00000012,d5
01:000028BE 7C00            	  4414:                 moveq  #$00000000,d6
01:000028C0 7E00            	  4415:                 moveq  #$00000000,d7
                            	  4416: 
01:000028C2 5305            	  4417: SUBQ_LOOP1:     subq.b #1,d5
01:000028C4 40C6            	  4418:                 move SR,d6
01:000028C6 02860000001F    	  4419:                 andi.l #$1F,d6        * Isolate flags
01:000028CC D286            	  4420:                 add.l d6,d1           * Copy flag results into accumulator
01:000028CE D485            	  4421:                 add.l d5,d2           * Copy data results into data accumulator
01:000028D0 51C8FFF0        	  4422:                 dbf d0,SUBQ_LOOP1
                            	  4423: 
01:000028D4 0C8100000417    	  4424:                 cmpi.l #$00000417,d1
01:000028DA 66FE            	  4425:                 bne.s *
01:000028DC 0C82000091B4    	  4426:                 cmpi.l #$000091B4,d2
01:000028E2 66FE            	  4427:                 bne.s *
                            	  4428: 
                            	  4429: 
                            	  4430: *     WORD
01:000028E4 203C000000FF    	  4431:                 move.l #$000000FF,d0    * Loop counter
01:000028EA 7200            	  4432:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028EC 7400            	  4433:                 moveq  #$00000000,d2    * Data results accumulator
01:000028EE 7600            	  4434:                 moveq  #$00000000,d3
01:000028F0 7800            	  4435:                 moveq  #$00000000,d4
01:000028F2 7A02            	  4436:                 moveq  #$00000002,d5
01:000028F4 7C00            	  4437:                 moveq  #$00000000,d6
01:000028F6 7E00            	  4438:                 moveq  #$00000000,d7
01:000028F8 307C0100        	  4439:                 move.l #$00000100,a0
                            	  4440: 
01:000028FC 5B45            	  4441: SUBQ_LOOP2:     subq.w #5,d5
01:000028FE 40C6            	  4442:                 move SR,d6
01:00002900 02860000001F    	  4443:                 andi.l #$1F,d6        * Isolate flags
01:00002906 D286            	  4444:                 add.l d6,d1           * Copy flag results into accumulator
01:00002908 D485            	  4445:                 add.l d5,d2           * Copy data results into data accumulator
01:0000290A 51C8FFF0        	  4446:                 dbf d0,SUBQ_LOOP2
                            	  4447: 
01:0000290E 0C8100000811    	  4448:                 cmpi.l #$00000811,d1
01:00002914 66FE            	  4449:                 bne.s *
01:00002916 0C8200FD7F80    	  4450:                 cmpi.l #$00FD7F80,d2
01:0000291C 66FE            	  4451:                 bne.s *
                            	  4452: 
                            	  4453: 
                            	  4454: *     LONG
01:0000291E 203C000000FF    	  4455:                 move.l #$000000FF,d0    * Loop counter
01:00002924 7200            	  4456:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002926 7400            	  4457:                 moveq  #$00000000,d2    * Data results accumulator
01:00002928 7600            	  4458:                 moveq  #$00000000,d3
01:0000292A 7800            	  4459:                 moveq  #$00000000,d4
01:0000292C 7A07            	  4460:                 moveq  #$00000007,d5
01:0000292E 7C00            	  4461:                 moveq  #$00000000,d6
01:00002930 7E00            	  4462:                 moveq  #$00000000,d7
                            	  4463: 
01:00002932 5385            	  4464: SUBQ_LOOP3:     subq.l #1,d5
01:00002934 40C6            	  4465:                 move SR,d6
01:00002936 02860000001F    	  4466:                 andi.l #$1F,d6        * Isolate flags
01:0000293C D286            	  4467:                 add.l d6,d1           * Copy flag results into accumulator
01:0000293E D485            	  4468:                 add.l d5,d2           * Copy data results into data accumulator
01:00002940 51C8FFF0        	  4469:                 dbf d0,SUBQ_LOOP3
                            	  4470: 
01:00002944 0C81000007DD    	  4471:                 cmpi.l #$000007DD,d1
01:0000294A 66FE            	  4472:                 bne.s *
01:0000294C 0C82FFFF8680    	  4473:                 cmpi.l #$FFFF8680,d2
01:00002952 66FE            	  4474:                 bne.s *
                            	  4475: 
                            	  4476: *     Check that Flags are not updated for Address registers
01:00002954 207C0001FFFF    	  4477:                 move.l #$0001FFFF,a0
01:0000295A 44FC0000        	  4478:                 move #$00,CCR         * Clear flags
01:0000295E 5F48            	  4479:                 subq.w #$7,a0
01:00002960 65FE            	  4480:                 bcs.s *
                            	  4481: 
01:00002962 4E75            	  4482:                 rts
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: 
                            	  4487: *-----------------------------------------------------------
                            	  4488: *-----------------------------------------------------------
                            	  4489: * OPCODE : MOVEQ
                            	  4490: *-----------------------------------------------------------
                            	  4491: *-----------------------------------------------------------
                            	  4492: 
                            	  4493: op_MOVEQ:
01:00002964 7000            	  4494:                 moveq  #$00000000,d0
01:00002966 7000            	  4495:                 moveq #$0,d0
01:00002968 66FE            	  4496:                 bne.s *
01:0000296A 4A80            	  4497:                 cmpi.l #$00000000,d0
01:0000296C 66FE            	  4498:                 bne.s *
                            	  4499: 
01:0000296E 7000            	  4500:                 moveq  #$00000000,d0
01:00002970 7080            	  4501:                 moveq #-128,d0
01:00002972 67FE            	  4502:                 beq.s *
01:00002974 6AFE            	  4503:                 bpl.s *
01:00002976 0C80FFFFFF80    	  4504:                 cmpi.l #$FFFFFF80,d0
01:0000297C 66FE            	  4505:                 bne.s *
                            	  4506: 
                            	  4507: 
01:0000297E 4E75            	  4508:                 rts
                            	  4509: 
                            	  4510: 
                            	  4511: *-----------------------------------------------------------
                            	  4512: *-----------------------------------------------------------
                            	  4513: * OPCODE : DIVU
                            	  4514: *-----------------------------------------------------------
                            	  4515: *-----------------------------------------------------------
                            	  4516: 
                            	  4517: op_DIVU:
                            	  4518: 
01:00002980 203CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002986 223C00005A5A    	  4520:                 move.l #$00005a5a,d1        * Initial Divisor
01:0000298C 243CA5A5A5A5    	  4521:                 move.l #$a5a5a5a5,d2
01:00002992 7600            	  4522:                 moveq  #$00000000,d3
01:00002994 7800            	  4523:                 moveq  #$00000000,d4        * Cumulative data results
01:00002996 7A00            	  4524:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002998 7C0E            	  4525:                 move.l #$0000000E,d6       * Inner loop counter
01:0000299A 7E1E            	  4526:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4527: 
                            	  4528: 
01:0000299C 80C1            	  4529: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:0000299E 40C3            	  4530:                 move SR,d3
01:000029A0 02830000000C    	  4531:                 andi.l #$0C,d3            * Isolate flags
01:000029A6 DA83            	  4532:                 add.l d3,d5               * Copy flag results into accumulator
01:000029A8 D880            	  4533:                 add.l d0,d4               * Copy data results into data accumulator
01:000029AA E289            	  4534:                 lsr.l #$1,d1
                            	  4535: 
01:000029AC 51CEFFEE        	  4536:                 dbf d6,DIVU_OUTER1
01:000029B0 E28A            	  4537:                 lsr.l #$1,d2
01:000029B2 2002            	  4538:                 move.l d2,d0
01:000029B4 223C00005A5A    	  4539:                 move.l #$00005a5a,d1       * Initial Divisor
01:000029BA 7C0E            	  4540:                 move.l #$0000000E,d6       * Inner loop counter
01:000029BC 51CFFFDE        	  4541:                 dbf d7,DIVU_OUTER1
                            	  4542: 
01:000029C0 0C8492FEDB89    	  4543:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:000029C6 66FE            	  4544:                 bne.s *
                            	  4545: 
01:000029C8 0C8500000110    	  4546:                 cmpi.l #$00000110,d5      * Check the Flag results
01:000029CE 66FE            	  4547:                 bne.s *
                            	  4548: 
                            	  4549: 
01:000029D0 4E75            	  4550:                 rts
                            	  4551: 
                            	  4552: 
                            	  4553: 
                            	  4554: *-----------------------------------------------------------
                            	  4555: *-----------------------------------------------------------
                            	  4556: * OPCODE : DIVS
                            	  4557: *-----------------------------------------------------------
                            	  4558: *-----------------------------------------------------------
                            	  4559: 
                            	  4560: op_DIVS:
                            	  4561: 
01:000029D2 203CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:000029D8 223C00005A5A    	  4563:                 move.l #$00005a5a,d1        * Initial Divisor
01:000029DE 243CA5A5A5A5    	  4564:                 move.l #$a5a5a5a5,d2
01:000029E4 7600            	  4565:                 moveq  #$00000000,d3
01:000029E6 7800            	  4566:                 moveq  #$00000000,d4        * Cumulative data results
01:000029E8 7A00            	  4567:                 moveq  #$00000000,d5       * Cumulative flag results
01:000029EA 7C0E            	  4568:                 move.l #$0000000E,d6       * Inner loop counter
01:000029EC 7E1E            	  4569:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4570: 
                            	  4571: 
01:000029EE 81C1            	  4572: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:000029F0 40C3            	  4573:                 move SR,d3
01:000029F2 02830000000C    	  4574:                 andi.l #$0C,d3            * Isolate flags
01:000029F8 DA83            	  4575:                 add.l d3,d5               * Copy flag results into accumulator
01:000029FA D880            	  4576:                 add.l d0,d4               * Copy data results into data accumulator
01:000029FC E289            	  4577:                 lsr.l #$1,d1
                            	  4578: 
01:000029FE 51CEFFEE        	  4579:                 dbf d6,DIVS_OUTER1
01:00002A02 E28A            	  4580:                 lsr.l #$1,d2
01:00002A04 2002            	  4581:                 move.l d2,d0
01:00002A06 223C00005A5A    	  4582:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A0C 7C0E            	  4583:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A0E 51CFFFDE        	  4584:                 dbf d7,DIVS_OUTER1
                            	  4585: 
01:00002A12 0C844EC5D057    	  4586:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002A18 66FE            	  4587:                 bne.s *
                            	  4588: 
01:00002A1A 0C8500000038    	  4589:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002A20 66FE            	  4590:                 bne.s *
                            	  4591: 
                            	  4592: 
01:00002A22 4E75            	  4593:                 rts
                            	  4594: 
                            	  4595: 
                            	  4596: 
                            	  4597: *-----------------------------------------------------------
                            	  4598: *-----------------------------------------------------------
                            	  4599: * OPCODE : OR
                            	  4600: *-----------------------------------------------------------
                            	  4601: *-----------------------------------------------------------
                            	  4602: 
                            	  4603: op_OR:
                            	  4604: 
                            	  4605: *  * <EA> to Register
                            	  4606: 
01:00002A24 203CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002A2A 223C8167E123    	  4608:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002A30 243CA5A5A5A5    	  4609:                 move.l #$a5a5a5a5,d2
01:00002A36 7600            	  4610:                 moveq  #$00000000,d3
01:00002A38 7800            	  4611:                 moveq  #$00000000,d4       * Cumulative data results
01:00002A3A 7A00            	  4612:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A3C 7C1E            	  4613:                 move.l #$0000001E,d6       * Inner loop counter
01:00002A3E 7E1E            	  4614:                 move.l #$0000001E,d7       * Outer loop counter
01:00002A40 307C0100        	  4615:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4616: 
                            	  4617: 
                            	  4618: OR_OUTER1:
                            	  4619: 
                            	  4620: *     BYTE
01:00002A44 2081            	  4621:                 move.l d1,(a0)
01:00002A46 8010            	  4622:                 or.b (a0),d0
01:00002A48 40C3            	  4623:                 move SR,d3
01:00002A4A 02830000000C    	  4624:                 andi.l #$0C,d3            * Isolate flags
01:00002A50 DA83            	  4625:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A52 D880            	  4626:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4627: 
                            	  4628: *     WORD
01:00002A54 2081            	  4629:                 move.l d1,(a0)
01:00002A56 8050            	  4630:                 or.w (a0),d0
01:00002A58 40C3            	  4631:                 move SR,d3
01:00002A5A 02830000000C    	  4632:                 andi.l #$0C,d3            * Isolate flags
01:00002A60 DA83            	  4633:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A62 D880            	  4634:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4635: 
                            	  4636: *     LONG
01:00002A64 2081            	  4637:                 move.l d1,(a0)
01:00002A66 8090            	  4638:                 or.l (a0),d0
01:00002A68 40C3            	  4639:                 move SR,d3
01:00002A6A 02830000000F    	  4640:                 andi.l #$0F,d3            * Isolate flags
01:00002A70 DA83            	  4641:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A72 D880            	  4642:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4643: 
                            	  4644: 
01:00002A74 E289            	  4645:                 lsr.l #$1,d1
01:00002A76 51CEFFCC        	  4646:                 dbf d6,OR_OUTER1
01:00002A7A E28A            	  4647:                 lsr.l #$1,d2
01:00002A7C 223C8167E123    	  4648:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002A82 7C1E            	  4649:                 move.l #$0000001E,d6       * Inner loop counter
01:00002A84 51CFFFBE        	  4650:                 dbf d7,OR_OUTER1
                            	  4651: 
01:00002A88 0C8476EAC803    	  4652:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002A8E 66FE            	  4653:                 bne.s *
01:00002A90 0C8500005A18    	  4654:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002A96 66FE            	  4655:                 bne.s *
                            	  4656: 
                            	  4657: 
                            	  4658: *  * Register to <EA>
                            	  4659: 
01:00002A98 203C86738374    	  4660:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002A9E 223CFC55F2FE    	  4661:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002AA4 243C86738374    	  4662:                 move.l #$86738374,d2
01:00002AAA 7600            	  4663:                 moveq  #$00000000,d3
01:00002AAC 7800            	  4664:                 moveq  #$00000000,d4       * Cumulative data results
01:00002AAE 7A00            	  4665:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AB0 7C1E            	  4666:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AB2 7E1D            	  4667:                 move.l #$0000001D,d7       * Outer loop counter
01:00002AB4 307C0100        	  4668:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4669: 
                            	  4670: 
                            	  4671: OR_OUTER2:
                            	  4672: 
                            	  4673: *     BYTE
01:00002AB8 2080            	  4674:                 move.l d0,(a0)
01:00002ABA 8310            	  4675:                 or.b d1,(a0)
01:00002ABC 40C3            	  4676:                 move SR,d3
01:00002ABE 02830000000C    	  4677:                 andi.l #$0C,d3            * Isolate flags
01:00002AC4 DA83            	  4678:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AC6 D890            	  4679:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4680: 
                            	  4681: *     WORD
01:00002AC8 2080            	  4682:                 move.l d0,(a0)
01:00002ACA 8350            	  4683:                 or.w d1,(a0)
01:00002ACC 40C3            	  4684:                 move SR,d3
01:00002ACE 02830000000C    	  4685:                 andi.l #$0C,d3            * Isolate flags
01:00002AD4 DA83            	  4686:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AD6 D890            	  4687:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4688: 
                            	  4689: *     LONG
01:00002AD8 2080            	  4690:                 move.l d0,(a0)
01:00002ADA 8390            	  4691:                 or.l d1,(a0)
01:00002ADC 40C3            	  4692:                 move SR,d3
01:00002ADE 02830000000F    	  4693:                 andi.l #$0F,d3            * Isolate flags
01:00002AE4 DA83            	  4694:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AE6 D890            	  4695:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4696: 
                            	  4697: 
01:00002AE8 E289            	  4698:                 lsr.l #$1,d1
01:00002AEA 51CEFFCC        	  4699:                 dbf d6,OR_OUTER2
01:00002AEE E28A            	  4700:                 lsr.l #$1,d2
01:00002AF0 223C8167E123    	  4701:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002AF6 7C1E            	  4702:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AF8 51CFFFBE        	  4703:                 dbf d7,OR_OUTER2
                            	  4704: 
01:00002AFC 0C84FA82B9E4    	  4705:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002B02 66FE            	  4706:                 bne.s *
01:00002B04 0C8500005730    	  4707:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002B0A 66FE            	  4708:                 bne.s *
                            	  4709: 
                            	  4710: 
01:00002B0C 4E75            	  4711:                 rts
                            	  4712: 
                            	  4713: 
                            	  4714: 
                            	  4715: *-----------------------------------------------------------
                            	  4716: *-----------------------------------------------------------
                            	  4717: * OPCODE : AND
                            	  4718: *-----------------------------------------------------------
                            	  4719: *-----------------------------------------------------------
                            	  4720: 
                            	  4721: op_AND:
                            	  4722: 
                            	  4723: *  * <EA> to Register
                            	  4724: 
01:00002B0E 203CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002B14 223C8167E123    	  4726:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002B1A 243CA5A5A5A5    	  4727:                 move.l #$a5a5a5a5,d2
01:00002B20 7600            	  4728:                 moveq  #$00000000,d3
01:00002B22 7800            	  4729:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B24 7A00            	  4730:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B26 7C1E            	  4731:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B28 7E1E            	  4732:                 move.l #$0000001E,d7       * Outer loop counter
01:00002B2A 307C0100        	  4733:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4734: 
                            	  4735: 
                            	  4736: AND_OUTER1:
                            	  4737: 
                            	  4738: *     BYTE
01:00002B2E 2081            	  4739:                 move.l d1,(a0)
01:00002B30 C010            	  4740:                 and.b (a0),d0
01:00002B32 40C3            	  4741:                 move SR,d3
01:00002B34 02830000000C    	  4742:                 andi.l #$0C,d3            * Isolate flags
01:00002B3A DA83            	  4743:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B3C D880            	  4744:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4745: 
                            	  4746: *     WORD
01:00002B3E 2081            	  4747:                 move.l d1,(a0)
01:00002B40 C050            	  4748:                 and.w (a0),d0
01:00002B42 40C3            	  4749:                 move SR,d3
01:00002B44 02830000000C    	  4750:                 andi.l #$0C,d3            * Isolate flags
01:00002B4A DA83            	  4751:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B4C D880            	  4752:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4753: 
                            	  4754: *     LONG
01:00002B4E 2081            	  4755:                 move.l d1,(a0)
01:00002B50 C090            	  4756:                 and.l (a0),d0
01:00002B52 40C3            	  4757:                 move SR,d3
01:00002B54 02830000000F    	  4758:                 andi.l #$0F,d3            * Isolate flags
01:00002B5A DA83            	  4759:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B5C D880            	  4760:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4761: 
                            	  4762: 
01:00002B5E E289            	  4763:                 lsr.l #$1,d1
01:00002B60 51CEFFCC        	  4764:                 dbf d6,AND_OUTER1
01:00002B64 E28A            	  4765:                 lsr.l #$1,d2
01:00002B66 223C8167E123    	  4766:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B6C 7C1E            	  4767:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B6E 51CFFFBE        	  4768:                 dbf d7,AND_OUTER1
                            	  4769: 
01:00002B72 0C84CF212883    	  4770:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002B78 66FE            	  4771:                 bne.s *
01:00002B7A 0C8500002D10    	  4772:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002B80 66FE            	  4773:                 bne.s *
                            	  4774: 
                            	  4775: 
                            	  4776: *  * Register to <EA>
                            	  4777: 
01:00002B82 203C86738374    	  4778:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B88 223CFC55F2FE    	  4779:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B8E 243C86738374    	  4780:                 move.l #$86738374,d2
01:00002B94 7600            	  4781:                 moveq  #$00000000,d3
01:00002B96 7800            	  4782:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B98 7A00            	  4783:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B9A 7C1E            	  4784:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B9C 7E1D            	  4785:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B9E 307C0100        	  4786:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4787: 
                            	  4788: 
                            	  4789: AND_OUTER2:
                            	  4790: 
                            	  4791: *     BYTE
01:00002BA2 2080            	  4792:                 move.l d0,(a0)
01:00002BA4 C310            	  4793:                 and.b d1,(a0)
01:00002BA6 40C3            	  4794:                 move SR,d3
01:00002BA8 02830000000C    	  4795:                 andi.l #$0C,d3            * Isolate flags
01:00002BAE DA83            	  4796:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BB0 D890            	  4797:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4798: 
                            	  4799: *     WORD
01:00002BB2 2080            	  4800:                 move.l d0,(a0)
01:00002BB4 C350            	  4801:                 and.w d1,(a0)
01:00002BB6 40C3            	  4802:                 move SR,d3
01:00002BB8 02830000000C    	  4803:                 andi.l #$0C,d3            * Isolate flags
01:00002BBE DA83            	  4804:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BC0 D890            	  4805:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4806: 
                            	  4807: *     LONG
01:00002BC2 2080            	  4808:                 move.l d0,(a0)
01:00002BC4 C390            	  4809:                 and.l d1,(a0)
01:00002BC6 40C3            	  4810:                 move SR,d3
01:00002BC8 02830000000F    	  4811:                 andi.l #$0F,d3            * Isolate flags
01:00002BCE DA83            	  4812:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BD0 D890            	  4813:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4814: 
                            	  4815: 
01:00002BD2 E289            	  4816:                 lsr.l #$1,d1
01:00002BD4 51CEFFCC        	  4817:                 dbf d6,AND_OUTER2
01:00002BD8 E28A            	  4818:                 lsr.l #$1,d2
01:00002BDA 223C8167E123    	  4819:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BE0 7C1E            	  4820:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BE2 51CFFFBE        	  4821:                 dbf d7,AND_OUTER2
                            	  4822: 
01:00002BE6 0C844A3DE544    	  4823:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002BEC 66FE            	  4824:                 bne.s *
01:00002BEE 0C85000018E8    	  4825:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002BF4 66FE            	  4826:                 bne.s *
                            	  4827: 
                            	  4828: 
01:00002BF6 4E75            	  4829:                 rts
                            	  4830: 
                            	  4831: 
                            	  4832: 
                            	  4833: *-----------------------------------------------------------
                            	  4834: *-----------------------------------------------------------
                            	  4835: * OPCODE : EOR
                            	  4836: *-----------------------------------------------------------
                            	  4837: *-----------------------------------------------------------
                            	  4838: 
                            	  4839: op_EOR:
                            	  4840: 
                            	  4841: *  * Register to <EA>
                            	  4842: 
01:00002BF8 203C86738374    	  4843:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002BFE 223CFC55F2FE    	  4844:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C04 243C86738374    	  4845:                 move.l #$86738374,d2
01:00002C0A 7600            	  4846:                 moveq  #$00000000,d3
01:00002C0C 7800            	  4847:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C0E 7A00            	  4848:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C10 7C1E            	  4849:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C12 7E1D            	  4850:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C14 307C0100        	  4851:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4852: 
                            	  4853: 
                            	  4854: EOR_OUTER2:
                            	  4855: 
                            	  4856: *     BYTE
01:00002C18 2080            	  4857:                 move.l d0,(a0)
01:00002C1A B310            	  4858:                 eor.b d1,(a0)
01:00002C1C 40C3            	  4859:                 move SR,d3
01:00002C1E 02830000000C    	  4860:                 andi.l #$0C,d3            * Isolate flags
01:00002C24 DA83            	  4861:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C26 D890            	  4862:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4863: 
                            	  4864: *     WORD
01:00002C28 2080            	  4865:                 move.l d0,(a0)
01:00002C2A B350            	  4866:                 eor.w d1,(a0)
01:00002C2C 40C3            	  4867:                 move SR,d3
01:00002C2E 02830000000C    	  4868:                 andi.l #$0C,d3            * Isolate flags
01:00002C34 DA83            	  4869:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C36 D890            	  4870:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4871: 
                            	  4872: *     LONG
01:00002C38 2080            	  4873:                 move.l d0,(a0)
01:00002C3A B390            	  4874:                 eor.l d1,(a0)
01:00002C3C 40C3            	  4875:                 move SR,d3
01:00002C3E 02830000000F    	  4876:                 andi.l #$0F,d3            * Isolate flags
01:00002C44 DA83            	  4877:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C46 D890            	  4878:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4879: 
                            	  4880: 
01:00002C48 E289            	  4881:                 lsr.l #$1,d1
01:00002C4A 51CEFFCC        	  4882:                 dbf d6,EOR_OUTER2
01:00002C4E E28A            	  4883:                 lsr.l #$1,d2
01:00002C50 223C8167E123    	  4884:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C56 7C1E            	  4885:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C58 51CFFFBE        	  4886:                 dbf d7,EOR_OUTER2
                            	  4887: 
01:00002C5C 0C8455C5EB70    	  4888:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002C62 66FE            	  4889:                 bne.s *
01:00002C64 0C8500004430    	  4890:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002C6A 66FE            	  4891:                 bne.s *
                            	  4892: 
                            	  4893: 
01:00002C6C 4E75            	  4894:                 rts
                            	  4895: 
                            	  4896: 
                            	  4897: *-----------------------------------------------------------
                            	  4898: *-----------------------------------------------------------
                            	  4899: * OPCODE : CMP
                            	  4900: *-----------------------------------------------------------
                            	  4901: *-----------------------------------------------------------
                            	  4902: 
                            	  4903: op_CMP:
                            	  4904: 
                            	  4905: 
                            	  4906: *  * <EA> to Register
                            	  4907: 
01:00002C6E 203CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002C74 223C8167E123    	  4909:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002C7A 243CA5A5A5A5    	  4910:                 move.l #$a5a5a5a5,d2
01:00002C80 7600            	  4911:                 moveq  #$00000000,d3
01:00002C82 7800            	  4912:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C84 7A00            	  4913:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C86 7C1E            	  4914:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C88 7E1E            	  4915:                 move.l #$0000001E,d7       * Outer loop counter
01:00002C8A 307C0100        	  4916:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4917: 
                            	  4918: 
                            	  4919: CMP_OUTER1:
                            	  4920: 
                            	  4921: *     BYTE
01:00002C8E 2081            	  4922:                 move.l d1,(a0)
01:00002C90 B010            	  4923:                 cmp.b (a0),d0
01:00002C92 40C3            	  4924:                 move SR,d3
01:00002C94 02830000000F    	  4925:                 andi.l #$0F,d3            * Isolate flags
01:00002C9A DA83            	  4926:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C9C D880            	  4927:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4928: 
                            	  4929: *     WORD
01:00002C9E 2081            	  4930:                 move.l d1,(a0)
01:00002CA0 B050            	  4931:                 cmp.w (a0),d0
01:00002CA2 40C3            	  4932:                 move SR,d3
01:00002CA4 02830000000F    	  4933:                 andi.l #$0F,d3            * Isolate flags
01:00002CAA DA83            	  4934:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CAC D880            	  4935:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4936: 
                            	  4937: *     LONG
01:00002CAE 2081            	  4938:                 move.l d1,(a0)
01:00002CB0 B090            	  4939:                 cmp.l (a0),d0
01:00002CB2 40C3            	  4940:                 move SR,d3
01:00002CB4 02830000000F    	  4941:                 andi.l #$0F,d3            * Isolate flags
01:00002CBA DA83            	  4942:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CBC D880            	  4943:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4944: 
                            	  4945: 
01:00002CBE E289            	  4946:                 lsr.l #$1,d1
01:00002CC0 51CEFFCC        	  4947:                 dbf d6,CMP_OUTER1
01:00002CC4 E28A            	  4948:                 lsr.l #$1,d2
01:00002CC6 223C8167E123    	  4949:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CCC 7C1E            	  4950:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CCE 51CFFFBE        	  4951:                 dbf d7,CMP_OUTER1
                            	  4952: 
01:00002CD2 0C847878712F    	  4953:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002CD8 66FE            	  4954:                 bne.s *
01:00002CDA 0C8500005502    	  4955:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002CE0 66FE            	  4956:                 bne.s *
                            	  4957: 
                            	  4958: 
                            	  4959: 
01:00002CE2 4E75            	  4960:                 rts
                            	  4961: 
                            	  4962: 
                            	  4963: *-----------------------------------------------------------
                            	  4964: *-----------------------------------------------------------
                            	  4965: * OPCODE : CMPA
                            	  4966: *-----------------------------------------------------------
                            	  4967: *-----------------------------------------------------------
                            	  4968: 
                            	  4969: op_CMPA:
                            	  4970: 
                            	  4971: 
                            	  4972: *  * <EA> to Register
                            	  4973: 
01:00002CE4 207CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002CEA 223C8167E123    	  4975:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002CF0 243CA5A5A5A5    	  4976:                 move.l #$a5a5a5a5,d2
01:00002CF6 7600            	  4977:                 moveq  #$00000000,d3
01:00002CF8 7800            	  4978:                 moveq  #$00000000,d4       * Cumulative data results
01:00002CFA 7A00            	  4979:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002CFC 7C1E            	  4980:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CFE 7E1E            	  4981:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D00 327C0100        	  4982:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4983: 
                            	  4984: 
                            	  4985: CMPA_OUTER1:
                            	  4986: 
                            	  4987: 
                            	  4988: *     WORD
01:00002D04 2281            	  4989:                 move.l d1,(a1)
01:00002D06 B0D1            	  4990:                 cmpa.w (a1),a0
01:00002D08 40C3            	  4991:                 move SR,d3
01:00002D0A 02830000000F    	  4992:                 andi.l #$0F,d3            * Isolate flags
01:00002D10 DA83            	  4993:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D12 D888            	  4994:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4995: 
                            	  4996: *     LONG
01:00002D14 2281            	  4997:                 move.l d1,(a1)
01:00002D16 B1D1            	  4998:                 cmpa.l (a1),a0
01:00002D18 40C3            	  4999:                 move SR,d3
01:00002D1A 02830000000F    	  5000:                 andi.l #$0F,d3            * Isolate flags
01:00002D20 DA83            	  5001:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D22 D888            	  5002:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5003: 
                            	  5004: 
01:00002D24 E289            	  5005:                 lsr.l #$1,d1
01:00002D26 51CEFFDC        	  5006:                 dbf d6,CMPA_OUTER1
01:00002D2A E28A            	  5007:                 lsr.l #$1,d2
01:00002D2C 223C8167E123    	  5008:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D32 7C1E            	  5009:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D34 51CFFFCE        	  5010:                 dbf d7,CMPA_OUTER1
                            	  5011: 
01:00002D38 0C84A5A5A0CA    	  5012:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002D3E 66FE            	  5013:                 bne.s *
01:00002D40 0C8500003A7D    	  5014:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002D46 66FE            	  5015:                 bne.s *
                            	  5016: 
                            	  5017: 
01:00002D48 4E75            	  5018:                 rts
                            	  5019: 
                            	  5020: 
                            	  5021: 
                            	  5022: *-----------------------------------------------------------
                            	  5023: *-----------------------------------------------------------
                            	  5024: * OPCODE : CMPM
                            	  5025: *-----------------------------------------------------------
                            	  5026: *-----------------------------------------------------------
                            	  5027: 
                            	  5028: op_CMPM:
                            	  5029: 
01:00002D4A 307C0100        	  5030:                 move.l #$00000100,a0       * Address for Data-X
01:00002D4E 327C0200        	  5031:                 move.l #$00000200,a1       * Address for Data-Y
01:00002D52 7000            	  5032:                 moveq  #$00000000,d0
01:00002D54 7200            	  5033:                 moveq  #$00000000,d1
01:00002D56 7400            	  5034:                 moveq  #$00000000,d2
                            	  5035: 
01:00002D58 20FC11FF5580    	  5036:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002D5E 20FC1111FFFF    	  5037:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002D64 20FC33333333    	  5038:                 move.l #$33333333,(a0)+   * Populate test data
01:00002D6A 20FC44444444    	  5039:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5040: 
01:00002D70 22FC80FF337F    	  5041:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002D76 22FCFFFF1111    	  5042:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002D7C 22FC33333333    	  5043:                 move.l #$33333333,(a1)+   * Populate test data
01:00002D82 22FC44444444    	  5044:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5045: 
01:00002D88 307C0100        	  5046:                 move.l #$00000100,a0       * Address for Data-X
01:00002D8C 327C0200        	  5047:                 move.l #$00000200,a1       * Address for Data-Y
01:00002D90 7C0F            	  5048:                 move.l #$0000000F,d6       * Loop counter
                            	  5049: 
01:00002D92 B308            	  5050: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002D94 40C3            	  5051:                 move SR,d3
01:00002D96 02830000000F    	  5052:                 andi.l #$0F,d3            * Isolate flags
01:00002D9C D083            	  5053:                 add.l d3,d0               * Copy flag results into accumulator
01:00002D9E 51CEFFF2        	  5054:                 dbf d6,CMPM_LOOP1
                            	  5055: 
                            	  5056: 
01:00002DA2 307C0100        	  5057:                 move.l #$00000100,a0       * Address for Data-X
01:00002DA6 327C0200        	  5058:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DAA 7C07            	  5059:                 moveq  #$00000007,d6       * Loop counter
                            	  5060: 
01:00002DAC B348            	  5061: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002DAE 40C3            	  5062:                 move SR,d3
01:00002DB0 02830000000F    	  5063:                 andi.l #$0F,d3            * Isolate flags
01:00002DB6 D283            	  5064:                 add.l d3,d1               * Copy flag results into accumulator
01:00002DB8 51CEFFF2        	  5065:                 dbf d6,CMPM_LOOP2
                            	  5066: 
                            	  5067: 
01:00002DBC 307C0100        	  5068:                 move.l #$00000100,a0       * Address for Data-X
01:00002DC0 327C0200        	  5069:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DC4 7C03            	  5070:                 moveq  #$00000003,d6       * Loop counter
                            	  5071: 
01:00002DC6 B388            	  5072: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002DC8 40C3            	  5073:                 move SR,d3
01:00002DCA 02830000000F    	  5074:                 andi.l #$0F,d3            * Isolate flags
01:00002DD0 D483            	  5075:                 add.l d3,d2               * Copy flag results into accumulator
01:00002DD2 51CEFFF2        	  5076:                 dbf d6,CMPM_LOOP3
                            	  5077: 
                            	  5078: 
01:00002DD6 0C800000004C    	  5079:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002DDC 66FE            	  5080:                 bne.s *
01:00002DDE 0C8100000024    	  5081:                 cmpi.l #$00000024,d1
01:00002DE4 66FE            	  5082:                 bne.s *
01:00002DE6 0C8200000012    	  5083:                 cmpi.l #$00000012,d2
01:00002DEC 66FE            	  5084:                 bne.s *
                            	  5085: 
01:00002DEE 4E75            	  5086:                 rts
                            	  5087: 
                            	  5088: 
                            	  5089: *-----------------------------------------------------------
                            	  5090: *-----------------------------------------------------------
                            	  5091: * OPCODE : ADD
                            	  5092: *-----------------------------------------------------------
                            	  5093: *-----------------------------------------------------------
                            	  5094: 
                            	  5095: op_ADD:
                            	  5096: 
                            	  5097: 
                            	  5098: *  * <EA> to Register
01:00002DF0 203CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002DF6 223C8167E123    	  5100:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002DFC 243CA5A5A5A5    	  5101:                 move.l #$a5a5a5a5,d2
01:00002E02 7600            	  5102:                 moveq  #$00000000,d3
01:00002E04 7800            	  5103:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E06 7A00            	  5104:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E08 7C1E            	  5105:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E0A 7E1E            	  5106:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E0C 307C0100        	  5107:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5108: 
                            	  5109: 
                            	  5110: ADD_OUTER1:
                            	  5111: 
                            	  5112: *     BYTE
01:00002E10 2081            	  5113:                 move.l d1,(a0)
01:00002E12 D010            	  5114:                 add.b (a0),d0
01:00002E14 40C3            	  5115:                 move SR,d3
01:00002E16 02830000001F    	  5116:                 andi.l #$1F,d3            * Isolate flags
01:00002E1C DA83            	  5117:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E1E D880            	  5118:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5119: 
                            	  5120: *     WORD
01:00002E20 2081            	  5121:                 move.l d1,(a0)
01:00002E22 D050            	  5122:                 add.w (a0),d0
01:00002E24 40C3            	  5123:                 move SR,d3
01:00002E26 02830000000C    	  5124:                 andi.l #$0C,d3            * Isolate flags
01:00002E2C DA83            	  5125:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E2E D880            	  5126:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5127: 
                            	  5128: *     LONG
01:00002E30 2081            	  5129:                 move.l d1,(a0)
01:00002E32 D090            	  5130:                 add.l (a0),d0
01:00002E34 40C3            	  5131:                 move SR,d3
01:00002E36 02830000000F    	  5132:                 andi.l #$0F,d3            * Isolate flags
01:00002E3C DA83            	  5133:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E3E D880            	  5134:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5135: 
                            	  5136: 
01:00002E40 E299            	  5137:                 ror.l #$1,d1
01:00002E42 51CEFFCC        	  5138:                 dbf d6,ADD_OUTER1
01:00002E46 E29A            	  5139:                 ror.l #$1,d2
01:00002E48 223C8167E123    	  5140:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002E4E 7C1E            	  5141:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E50 51CFFFBE        	  5142:                 dbf d7,ADD_OUTER1
                            	  5143: 
01:00002E54 0C8423ED428F    	  5144:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002E5A 66FE            	  5145:                 bne.s *
01:00002E5C 0C8500004C96    	  5146:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002E62 66FE            	  5147:                 bne.s *
                            	  5148: 
                            	  5149: 
                            	  5150: *  * Register to <EA>
01:00002E64 203C86738374    	  5151:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002E6A 223CFC55F2FE    	  5152:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002E70 243C86738374    	  5153:                 move.l #$86738374,d2
01:00002E76 7600            	  5154:                 moveq  #$00000000,d3
01:00002E78 7800            	  5155:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E7A 7A00            	  5156:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E7C 7C1E            	  5157:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E7E 7E1D            	  5158:                 move.l #$0000001D,d7       * Outer loop counter
01:00002E80 307C0100        	  5159:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5160: 
                            	  5161: 
                            	  5162: ADD_OUTER2:
                            	  5163: 
                            	  5164: *     BYTE
01:00002E84 2080            	  5165:                 move.l d0,(a0)
01:00002E86 D310            	  5166:                 add.b d1,(a0)
01:00002E88 40C3            	  5167:                 move SR,d3
01:00002E8A 02830000000C    	  5168:                 andi.l #$0C,d3            * Isolate flags
01:00002E90 DA83            	  5169:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E92 D890            	  5170:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5171: 
                            	  5172: *     WORD
01:00002E94 2080            	  5173:                 move.l d0,(a0)
01:00002E96 D350            	  5174:                 add.w d1,(a0)
01:00002E98 40C3            	  5175:                 move SR,d3
01:00002E9A 02830000001F    	  5176:                 andi.l #$1F,d3            * Isolate flags
01:00002EA0 DA83            	  5177:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EA2 D890            	  5178:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5179: 
                            	  5180: *     LONG
01:00002EA4 2080            	  5181:                 move.l d0,(a0)
01:00002EA6 D390            	  5182:                 add.l d1,(a0)
01:00002EA8 40C3            	  5183:                 move SR,d3
01:00002EAA 02830000000F    	  5184:                 andi.l #$0F,d3            * Isolate flags
01:00002EB0 DA83            	  5185:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EB2 D890            	  5186:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5187: 
                            	  5188: 
01:00002EB4 E299            	  5189:                 ror.l #$1,d1
01:00002EB6 51CEFFCC        	  5190:                 dbf d6,ADD_OUTER2
01:00002EBA E29A            	  5191:                 ror.l #$1,d2
01:00002EBC 223C8167E123    	  5192:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002EC2 7C1E            	  5193:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EC4 51CFFFBE        	  5194:                 dbf d7,ADD_OUTER2
                            	  5195: 
01:00002EC8 0C846701B884    	  5196:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002ECE 66FE            	  5197:                 bne.s *
01:00002ED0 0C8500005467    	  5198:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002ED6 66FE            	  5199:                 bne.s *
                            	  5200: 
01:00002ED8 4E75            	  5201:                 rts
                            	  5202: 
                            	  5203: *-----------------------------------------------------------
                            	  5204: *-----------------------------------------------------------
                            	  5205: * OPCODE : SUB
                            	  5206: *-----------------------------------------------------------
                            	  5207: *-----------------------------------------------------------
                            	  5208: 
                            	  5209: op_SUB:
                            	  5210: 
                            	  5211: *  * <EA> to Register
01:00002EDA 203CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002EE0 223C8167E123    	  5213:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002EE6 243CA5A5A5A5    	  5214:                 move.l #$a5a5a5a5,d2
01:00002EEC 7600            	  5215:                 moveq  #$00000000,d3
01:00002EEE 7800            	  5216:                 moveq  #$00000000,d4       * Cumulative data results
01:00002EF0 7A00            	  5217:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002EF2 7C1E            	  5218:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EF4 7E1E            	  5219:                 move.l #$0000001E,d7       * Outer loop counter
01:00002EF6 307C0100        	  5220:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5221: 
                            	  5222: 
                            	  5223: SUB_OUTER1:
                            	  5224: 
                            	  5225: *     BYTE
01:00002EFA 2081            	  5226:                 move.l d1,(a0)
01:00002EFC 9010            	  5227:                 sub.b (a0),d0
01:00002EFE 40C3            	  5228:                 move SR,d3
01:00002F00 02830000001F    	  5229:                 andi.l #$1F,d3            * Isolate flags
01:00002F06 DA83            	  5230:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F08 D880            	  5231:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5232: 
                            	  5233: *     WORD
01:00002F0A 2081            	  5234:                 move.l d1,(a0)
01:00002F0C 9050            	  5235:                 sub.w (a0),d0
01:00002F0E 40C3            	  5236:                 move SR,d3
01:00002F10 02830000000C    	  5237:                 andi.l #$0C,d3            * Isolate flags
01:00002F16 DA83            	  5238:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F18 D880            	  5239:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5240: 
                            	  5241: *     LONG
01:00002F1A 2081            	  5242:                 move.l d1,(a0)
01:00002F1C 9090            	  5243:                 sub.l (a0),d0
01:00002F1E 40C3            	  5244:                 move SR,d3
01:00002F20 02830000000F    	  5245:                 andi.l #$0F,d3            * Isolate flags
01:00002F26 DA83            	  5246:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F28 D880            	  5247:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5248: 
                            	  5249: 
01:00002F2A E299            	  5250:                 ror.l #$1,d1
01:00002F2C 51CEFFCC        	  5251:                 dbf d6,SUB_OUTER1
01:00002F30 E29A            	  5252:                 ror.l #$1,d2
01:00002F32 223C8167E123    	  5253:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F38 7C1E            	  5254:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F3A 51CFFFBE        	  5255:                 dbf d7,SUB_OUTER1
                            	  5256: 
01:00002F3E 0C841A8D14CF    	  5257:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002F44 66FE            	  5258:                 bne.s *
01:00002F46 0C8500004FC4    	  5259:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002F4C 66FE            	  5260:                 bne.s *
                            	  5261: 
                            	  5262: 
                            	  5263: *  * Register to <EA>
01:00002F4E 203C86738374    	  5264:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002F54 223CFC55F2FE    	  5265:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002F5A 243C86738374    	  5266:                 move.l #$86738374,d2
01:00002F60 7600            	  5267:                 moveq  #$00000000,d3
01:00002F62 7800            	  5268:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F64 7A00            	  5269:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F66 7C1E            	  5270:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F68 7E1D            	  5271:                 move.l #$0000001D,d7       * Outer loop counter
01:00002F6A 307C0100        	  5272:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5273: 
                            	  5274: 
                            	  5275: SUB_OUTER2:
                            	  5276: 
                            	  5277: *     BYTE
01:00002F6E 2080            	  5278:                 move.l d0,(a0)
01:00002F70 9310            	  5279:                 sub.b d1,(a0)
01:00002F72 40C3            	  5280:                 move SR,d3
01:00002F74 02830000000C    	  5281:                 andi.l #$0C,d3            * Isolate flags
01:00002F7A DA83            	  5282:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F7C D890            	  5283:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5284: 
                            	  5285: *     WORD
01:00002F7E 2080            	  5286:                 move.l d0,(a0)
01:00002F80 9350            	  5287:                 sub.w d1,(a0)
01:00002F82 40C3            	  5288:                 move SR,d3
01:00002F84 02830000001F    	  5289:                 andi.l #$1F,d3            * Isolate flags
01:00002F8A DA83            	  5290:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F8C D890            	  5291:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5292: 
                            	  5293: *     LONG
01:00002F8E 2080            	  5294:                 move.l d0,(a0)
01:00002F90 9390            	  5295:                 sub.l d1,(a0)
01:00002F92 40C3            	  5296:                 move SR,d3
01:00002F94 02830000000F    	  5297:                 andi.l #$0F,d3            * Isolate flags
01:00002F9A DA83            	  5298:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F9C D890            	  5299:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5300: 
                            	  5301: 
01:00002F9E E299            	  5302:                 ror.l #$1,d1
01:00002FA0 51CEFFCC        	  5303:                 dbf d6,SUB_OUTER2
01:00002FA4 E29A            	  5304:                 ror.l #$1,d2
01:00002FA6 223C8167E123    	  5305:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FAC 7C1E            	  5306:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FAE 51CFFFBE        	  5307:                 dbf d7,SUB_OUTER2
                            	  5308: 
01:00002FB2 0C8436D38BEC    	  5309:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:00002FB8 66FE            	  5310:                 bne.s *
01:00002FBA 0C85000045A5    	  5311:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00002FC0 66FE            	  5312:                 bne.s *
                            	  5313: 
                            	  5314: 
                            	  5315: 
                            	  5316: 
01:00002FC2 4E75            	  5317:                 rts
                            	  5318: 
                            	  5319: 
                            	  5320: 
                            	  5321: *-----------------------------------------------------------
                            	  5322: *-----------------------------------------------------------
                            	  5323: * OPCODE : ADDA
                            	  5324: *-----------------------------------------------------------
                            	  5325: *-----------------------------------------------------------
                            	  5326: 
                            	  5327: op_ADDA:
                            	  5328: 
                            	  5329: *  * <EA> to Register
01:00002FC4 203CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002FCA 223C8167E123    	  5331:                 move.l #$8167E123,d1
01:00002FD0 243CA5A5A5A5    	  5332:                 move.l #$a5a5a5a5,d2
01:00002FD6 7600            	  5333:                 moveq  #$00000000,d3
01:00002FD8 7800            	  5334:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FDA 7A00            	  5335:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FDC 7C1E            	  5336:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FDE 7E1E            	  5337:                 move.l #$0000001E,d7       * Outer loop counter
01:00002FE0 307C0100        	  5338:                 move.l #$00000100,a0       * Address for memory EA operations
01:00002FE4 227C8167E123    	  5339:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5340: 
                            	  5341: ADDA_OUTER1:
                            	  5342: 
                            	  5343: *     WORD
                            	  5344: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5345: *                adda.w (a0),a1
                            	  5346: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5347: 
                            	  5348: *     LONG
01:00002FEA 2081            	  5349:                 move.l d1,(a0)
01:00002FEC D3D0            	  5350:                 adda.l (a0),a1
01:00002FEE D889            	  5351:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5352: 
01:00002FF0 E299            	  5353:                 ror.l #$1,d1
01:00002FF2 51CEFFF6        	  5354:                 dbf d6,ADDA_OUTER1
01:00002FF6 E299            	  5355:                 ror.l #$1,d1
01:00002FF8 2241            	  5356:                 move.l d1,a1
01:00002FFA 223C8167E123    	  5357:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003000 7C1E            	  5358:                 move.l #$0000001E,d6       * Inner loop counter
01:00003002 51CFFFE6        	  5359:                 dbf d7,ADDA_OUTER1
                            	  5360: 
01:00003006 0C84AC04DB4C    	  5361:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:0000300C 66FE            	  5362:                 bne.s *
                            	  5363: 
                            	  5364: 
01:0000300E 4E75            	  5365:                 rts
                            	  5366: 
                            	  5367: 
                            	  5368: *-----------------------------------------------------------
                            	  5369: *-----------------------------------------------------------
                            	  5370: * OPCODE : SUBA
                            	  5371: *-----------------------------------------------------------
                            	  5372: *-----------------------------------------------------------
                            	  5373: 
                            	  5374: op_SUBA:
                            	  5375: 
                            	  5376: *  * <EA> to Register
01:00003010 203CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003016 223C8167E123    	  5378:                 move.l #$8167E123,d1
01:0000301C 243CA5A5A5A5    	  5379:                 move.l #$a5a5a5a5,d2
01:00003022 7600            	  5380:                 moveq  #$00000000,d3
01:00003024 7800            	  5381:                 moveq  #$00000000,d4       * Cumulative data results
01:00003026 7A00            	  5382:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003028 7C1E            	  5383:                 move.l #$0000001E,d6       * Inner loop counter
01:0000302A 7E1E            	  5384:                 move.l #$0000001E,d7       * Outer loop counter
01:0000302C 307C0100        	  5385:                 move.l #$00000100,a0       * Address for memory EA operations
01:00003030 227C8167E123    	  5386:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5387: 
                            	  5388: SUBA_OUTER1:
                            	  5389: 
                            	  5390: *     WORD
                            	  5391: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5392: *                suba.w (a0),a1
                            	  5393: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5394: 
                            	  5395: *     LONG
01:00003036 2081            	  5396:                 move.l d1,(a0)
01:00003038 93D0            	  5397:                 suba.l (a0),a1
01:0000303A D889            	  5398:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5399: 
01:0000303C E299            	  5400:                 ror.l #$1,d1
01:0000303E 51CEFFF6        	  5401:                 dbf d6,SUBA_OUTER1
01:00003042 E299            	  5402:                 ror.l #$1,d1
01:00003044 2241            	  5403:                 move.l d1,a1
01:00003046 223C8167E123    	  5404:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000304C 7C1E            	  5405:                 move.l #$0000001E,d6       * Inner loop counter
01:0000304E 51CFFFE6        	  5406:                 dbf d7,SUBA_OUTER1
                            	  5407: 
01:00003052 0C84E1E36D7A    	  5408:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:00003058 66FE            	  5409:                 bne.s *
                            	  5410: 
                            	  5411: 
01:0000305A 4E75            	  5412:                 rts
                            	  5413: 
                            	  5414: 
                            	  5415: 
                            	  5416: *-----------------------------------------------------------
                            	  5417: *-----------------------------------------------------------
                            	  5418: * OPCODE : ADDX
                            	  5419: *-----------------------------------------------------------
                            	  5420: *-----------------------------------------------------------
                            	  5421: 
                            	  5422: op_ADDX:
                            	  5423: 
                            	  5424: 
                            	  5425: *  * Register to Register
01:0000305C 203CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003062 223C8167E123    	  5427:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00003068 243CA5A5A5A5    	  5428:                 move.l #$a5a5a5a5,d2
01:0000306E 7600            	  5429:                 moveq  #$00000000,d3
01:00003070 7800            	  5430:                 moveq  #$00000000,d4       * Cumulative data results
01:00003072 7A00            	  5431:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003074 7C1E            	  5432:                 move.l #$0000001E,d6       * Inner loop counter
01:00003076 7E1E            	  5433:                 move.l #$0000001E,d7       * Outer loop counter
01:00003078 307C0100        	  5434:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5435: 
                            	  5436: 
                            	  5437: ADDX_OUTER1:
                            	  5438: 
                            	  5439: *     BYTE
01:0000307C 2002            	  5440:                 move.l d2,d0
01:0000307E D101            	  5441:                 addx.b d1,d0
01:00003080 40C3            	  5442:                 move SR,d3
01:00003082 02830000001F    	  5443:                 andi.l #$1F,d3            * Isolate flags
01:00003088 DA83            	  5444:                 add.l d3,d5               * Copy flag results into accumulator
01:0000308A D880            	  5445:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5446: 
                            	  5447: *     WORD
01:0000308C 2002            	  5448:                 move.l d2,d0
01:0000308E D141            	  5449:                 addx.w d1,d0
01:00003090 40C3            	  5450:                 move SR,d3
01:00003092 02830000001F    	  5451:                 andi.l #$1F,d3            * Isolate flags
01:00003098 DA83            	  5452:                 add.l d3,d5               * Copy flag results into accumulator
01:0000309A D880            	  5453:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5454: 
                            	  5455: *     LONG
01:0000309C 2002            	  5456:                 move.l d2,d0
01:0000309E D181            	  5457:                 addx.l d1,d0
01:000030A0 40C3            	  5458:                 move SR,d3
01:000030A2 02830000001F    	  5459:                 andi.l #$1F,d3            * Isolate flags
01:000030A8 DA83            	  5460:                 add.l d3,d5               * Copy flag results into accumulator
01:000030AA D880            	  5461:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5462: 
01:000030AC E299            	  5463:                 ror.l #$1,d1
01:000030AE 51CEFFCC        	  5464:                 dbf d6,ADDX_OUTER1
01:000030B2 E29A            	  5465:                 ror.l #$1,d2
01:000030B4 223C8167E123    	  5466:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030BA 7C1E            	  5467:                 move.l #$0000001E,d6       * Inner loop counter
01:000030BC 51CFFFBE        	  5468:                 dbf d7,ADDX_OUTER1
                            	  5469: 
01:000030C0 0C844E96A4D9    	  5470:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:000030C6 66FE            	  5471:                 bne.s *
01:000030C8 0C85000085CD    	  5472:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:000030CE 66FE            	  5473:                 bne.s *
                            	  5474: 
                            	  5475: 
                            	  5476: 
                            	  5477: *     -(An),-(An)
                            	  5478: 
01:000030D0 7000            	  5479:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:000030D2 7200            	  5480:                 moveq  #$00000000,d1
01:000030D4 7400            	  5481:                 moveq  #$00000000,d2
01:000030D6 307C0100        	  5482:                 move.l #$00000100,a0       * Address for Data-X
01:000030DA 327C0200        	  5483:                 move.l #$00000200,a1       * Address for Data-Y
01:000030DE 20FC11FF5580    	  5484:                 move.l #$11FF5580,(a0)+   * Populate test data
01:000030E4 20FC1111FFFF    	  5485:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:000030EA 20FC33333333    	  5486:                 move.l #$33333333,(a0)+   * Populate test data
01:000030F0 20FC44444444    	  5487:                 move.l #$44444444,(a0)+   * Populate test data
01:000030F6 22FC80FF337F    	  5488:                 move.l #$80FF337F,(a1)+   * Populate test data
01:000030FC 22FCFFFF1111    	  5489:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00003102 22FC33333333    	  5490:                 move.l #$33333333,(a1)+   * Populate test data
01:00003108 22FC44444444    	  5491:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5492: 
                            	  5493: 
01:0000310E 7C0F            	  5494:                 move.l #$0000000F,d6       * Loop counter
                            	  5495: 
01:00003110 D308            	  5496: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:00003112 40C3            	  5497:                 move SR,d3
01:00003114 02830000000F    	  5498:                 andi.l #$0F,d3            * Isolate flags
01:0000311A D083            	  5499:                 add.l d3,d0               * Copy flag results into accumulator
01:0000311C D211            	  5500:                 add.b (a1),d1
01:0000311E 51CEFFF0        	  5501:                 dbf d6,ADDX_LOOP3
                            	  5502: 
                            	  5503: 
01:00003122 307C0110        	  5504:                 move.l #$00000110,a0       * Address for Data-X
01:00003126 327C0210        	  5505:                 move.l #$00000210,a1       * Address for Data-Y
01:0000312A 7C07            	  5506:                 moveq  #$00000007,d6       * Loop counter
                            	  5507: 
01:0000312C D348            	  5508: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:0000312E 40C3            	  5509:                 move SR,d3
01:00003130 02830000000F    	  5510:                 andi.l #$0F,d3            * Isolate flags
01:00003136 D083            	  5511:                 add.l d3,d0               * Copy flag results into accumulator
01:00003138 D251            	  5512:                 add.w (a1),d1
01:0000313A 51CEFFF0        	  5513:                 dbf d6,ADDX_LOOP4
                            	  5514: 
                            	  5515: 
01:0000313E 307C0110        	  5516:                 move.l #$00000110,a0       * Address for Data-X
01:00003142 327C0210        	  5517:                 move.l #$00000210,a1       * Address for Data-Y
01:00003146 7C03            	  5518:                 moveq  #$00000003,d6       * Loop counter
                            	  5519: 
01:00003148 D388            	  5520: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:0000314A 40C3            	  5521:                 move SR,d3
01:0000314C 02830000000F    	  5522:                 andi.l #$0F,d3            * Isolate flags
01:00003152 D083            	  5523:                 add.l d3,d0               * Copy flag results into accumulator
01:00003154 D291            	  5524:                 add.l (a1),d1
01:00003156 51CEFFF0        	  5525:                 dbf d6,ADDX_LOOP5
                            	  5526: 
                            	  5527: 
01:0000315A 0C8000000095    	  5528:                 cmpi.l #$00000095,d0      * Check the flag results
01:00003160 66FE            	  5529:                 bne.s *
01:00003162 0C81C812A682    	  5530:                 cmpi.l #$C812A682,d1      * Check the data results
01:00003168 66FE            	  5531:                 bne.s *
                            	  5532: 
01:0000316A 4E75            	  5533:                 rts
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: 
                            	  5538: *-----------------------------------------------------------
                            	  5539: *-----------------------------------------------------------
                            	  5540: * OPCODE : SUBX
                            	  5541: *-----------------------------------------------------------
                            	  5542: *-----------------------------------------------------------
                            	  5543: 
                            	  5544: op_SUBX:
                            	  5545: 
                            	  5546: 
                            	  5547: *  * Register to Register
01:0000316C 203CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003172 223C8167E123    	  5549:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00003178 243CA5A5A5A5    	  5550:                 move.l #$a5a5a5a5,d2
01:0000317E 7600            	  5551:                 moveq  #$00000000,d3
01:00003180 7800            	  5552:                 moveq  #$00000000,d4       * Cumulative data results
01:00003182 7A00            	  5553:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003184 7C1E            	  5554:                 move.l #$0000001E,d6       * Inner loop counter
01:00003186 7E1E            	  5555:                 move.l #$0000001E,d7       * Outer loop counter
01:00003188 307C0100        	  5556:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5557: 
                            	  5558: 
                            	  5559: SUBX_OUTER1:
                            	  5560: 
                            	  5561: *     BYTE
01:0000318C 2002            	  5562:                 move.l d2,d0
01:0000318E 9101            	  5563:                 subx.b d1,d0
01:00003190 40C3            	  5564:                 move SR,d3
01:00003192 02830000001F    	  5565:                 andi.l #$1F,d3            * Isolate flags
01:00003198 DA83            	  5566:                 add.l d3,d5               * Copy flag results into accumulator
01:0000319A D880            	  5567:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5568: 
                            	  5569: *     WORD
01:0000319C 2002            	  5570:                 move.l d2,d0
01:0000319E 9141            	  5571:                 subx.w d1,d0
01:000031A0 40C3            	  5572:                 move SR,d3
01:000031A2 02830000001F    	  5573:                 andi.l #$1F,d3            * Isolate flags
01:000031A8 DA83            	  5574:                 add.l d3,d5               * Copy flag results into accumulator
01:000031AA D880            	  5575:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5576: 
                            	  5577: *     LONG
01:000031AC 2002            	  5578:                 move.l d2,d0
01:000031AE 9181            	  5579:                 subx.l d1,d0
01:000031B0 40C3            	  5580:                 move SR,d3
01:000031B2 02830000001F    	  5581:                 andi.l #$1F,d3            * Isolate flags
01:000031B8 DA83            	  5582:                 add.l d3,d5               * Copy flag results into accumulator
01:000031BA D880            	  5583:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5584: 
01:000031BC E299            	  5585:                 ror.l #$1,d1
01:000031BE 51CEFFCC        	  5586:                 dbf d6,SUBX_OUTER1
01:000031C2 E29A            	  5587:                 ror.l #$1,d2
01:000031C4 223C8167E123    	  5588:                 move.l #$8167E123,d1       * Initial Data-Y
01:000031CA 7C1E            	  5589:                 move.l #$0000001E,d6       * Inner loop counter
01:000031CC 51CFFFBE        	  5590:                 dbf d7,SUBX_OUTER1
                            	  5591: 
01:000031D0 0C84FCAA913E    	  5592:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:000031D6 66FE            	  5593:                 bne.s *
01:000031D8 0C8500007E89    	  5594:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:000031DE 66FE            	  5595:                 bne.s *
                            	  5596: 
                            	  5597: 
                            	  5598: 
                            	  5599: *     -(An),-(An)
                            	  5600: 
01:000031E0 7000            	  5601:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:000031E2 7200            	  5602:                 moveq  #$00000000,d1
01:000031E4 7400            	  5603:                 moveq  #$00000000,d2
01:000031E6 307C0100        	  5604:                 move.l #$00000100,a0       * Address for Data-X
01:000031EA 327C0200        	  5605:                 move.l #$00000200,a1       * Address for Data-Y
01:000031EE 20FC11FF5580    	  5606:                 move.l #$11FF5580,(a0)+   * Populate test data
01:000031F4 20FC1111FFFF    	  5607:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:000031FA 20FC80FF337F    	  5608:                 move.l #$80FF337F,(a0)+   * Populate test data
01:00003200 20FC44444444    	  5609:                 move.l #$44444444,(a0)+   * Populate test data
01:00003206 22FC80FF337F    	  5610:                 move.l #$80FF337F,(a1)+   * Populate test data
01:0000320C 22FC1111FFFF    	  5611:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:00003212 22FC33333333    	  5612:                 move.l #$33333333,(a1)+   * Populate test data
01:00003218 22FC5580EECC    	  5613:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5614: 
                            	  5615: 
01:0000321E 7C0F            	  5616:                 move.l #$0000000F,d6       * Loop counter
                            	  5617: 
01:00003220 9308            	  5618: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:00003222 40C3            	  5619:                 move SR,d3
01:00003224 02830000000F    	  5620:                 andi.l #$0F,d3            * Isolate flags
01:0000322A D083            	  5621:                 add.l d3,d0               * Copy flag results into accumulator
01:0000322C D211            	  5622:                 add.b (a1),d1
01:0000322E 51CEFFF0        	  5623:                 dbf d6,SUBX_LOOP3
                            	  5624: 
                            	  5625: 
01:00003232 307C0110        	  5626:                 move.l #$00000110,a0       * Address for Data-X
01:00003236 327C0210        	  5627:                 move.l #$00000210,a1       * Address for Data-Y
01:0000323A 7C07            	  5628:                 moveq  #$00000007,d6       * Loop counter
                            	  5629: 
01:0000323C 9348            	  5630: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:0000323E 40C3            	  5631:                 move SR,d3
01:00003240 02830000000F    	  5632:                 andi.l #$0F,d3            * Isolate flags
01:00003246 D083            	  5633:                 add.l d3,d0               * Copy flag results into accumulator
01:00003248 D251            	  5634:                 add.w (a1),d1
01:0000324A 51CEFFF0        	  5635:                 dbf d6,SUBX_LOOP4
                            	  5636: 
                            	  5637: 
01:0000324E 307C0110        	  5638:                 move.l #$00000110,a0       * Address for Data-X
01:00003252 327C0210        	  5639:                 move.l #$00000210,a1       * Address for Data-Y
01:00003256 7C03            	  5640:                 moveq  #$00000003,d6       * Loop counter
                            	  5641: 
01:00003258 9388            	  5642: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:0000325A 40C3            	  5643:                 move SR,d3
01:0000325C 02830000000F    	  5644:                 andi.l #$0F,d3            * Isolate flags
01:00003262 D083            	  5645:                 add.l d3,d0               * Copy flag results into accumulator
01:00003264 D291            	  5646:                 add.l (a1),d1
01:00003266 51CEFFF0        	  5647:                 dbf d6,SUBX_LOOP5
                            	  5648: 
                            	  5649: 
01:0000326A 0C80000000B1    	  5650:                 cmpi.l #$000000B1,d0      * Check the flag results
01:00003270 66FE            	  5651:                 bne.s *
01:00003272 0C8162C6F417    	  5652:                 cmpi.l #$62C6F417,d1      * Check the data results
01:00003278 66FE            	  5653:                 bne.s *
                            	  5654: 
01:0000327A 4E75            	  5655:                 rts
                            	  5656: 
                            	  5657: 
                            	  5658: *-----------------------------------------------------------
                            	  5659: *-----------------------------------------------------------
                            	  5660: * OPCODE : MULU
                            	  5661: *-----------------------------------------------------------
                            	  5662: *-----------------------------------------------------------
                            	  5663: 
                            	  5664: op_MULU:
                            	  5665: 
01:0000327C 203CFE805501    	  5666:                 move.l #$FE805501,d0        * Initial
01:00003282 223C5697EDB6    	  5667:                 move.l #$5697EDB6,d1        * Initial Y
01:00003288 243CFE805501    	  5668:                 move.l #$FE805501,d2
01:0000328E 7600            	  5669:                 moveq  #$00000000,d3
01:00003290 7800            	  5670:                 moveq  #$00000000,d4        * Cumulative data results
01:00003292 7A00            	  5671:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003294 7C0E            	  5672:                 move.l #$0000000E,d6       * Inner loop counter
01:00003296 7E0E            	  5673:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5674: 
                            	  5675: 
01:00003298 C0C1            	  5676: MULU_OUTER1:    mulu d1,d0
01:0000329A 40C3            	  5677:                 move SR,d3
01:0000329C 02830000000C    	  5678:                 andi.l #$0C,d3            * Isolate flags
01:000032A2 DA83            	  5679:                 add.l d3,d5               * Copy flag results into accumulator
01:000032A4 D880            	  5680:                 add.l d0,d4               * Copy data results into data accumulator
01:000032A6 E299            	  5681:                 ror.l #$1,d1
                            	  5682: 
01:000032A8 51CEFFEE        	  5683:                 dbf d6,MULU_OUTER1
01:000032AC E29A            	  5684:                 ror.l #$1,d2
01:000032AE 2002            	  5685:                 move.l d2,d0
01:000032B0 7C0E            	  5686:                 move.l #$0000000E,d6       * Inner loop counter
01:000032B2 51CFFFE4        	  5687:                 dbf d7,MULU_OUTER1
                            	  5688: 
01:000032B6 0C8476FB988C    	  5689:                 cmpi.l #$76FB988C,d4      * Check the data results
01:000032BC 66FE            	  5690:                 bne.s *
                            	  5691: 
01:000032BE 0C8500000170    	  5692:                 cmpi.l #$00000170,d5      * Check the Flag results
01:000032C4 66FE            	  5693:                 bne.s *
                            	  5694: 
                            	  5695: 
01:000032C6 4E75            	  5696:                 rts
                            	  5697: 
                            	  5698: 
                            	  5699: *-----------------------------------------------------------
                            	  5700: *-----------------------------------------------------------
                            	  5701: * OPCODE : MULS
                            	  5702: *-----------------------------------------------------------
                            	  5703: *-----------------------------------------------------------
                            	  5704: 
                            	  5705: op_MULS:
                            	  5706: 
01:000032C8 203CFE805501    	  5707:                 move.l #$FE805501,d0        * Initial
01:000032CE 223C5697EDB6    	  5708:                 move.l #$5697EDB6,d1        * Initial Y
01:000032D4 243CFE805501    	  5709:                 move.l #$FE805501,d2
01:000032DA 7600            	  5710:                 moveq  #$00000000,d3
01:000032DC 7800            	  5711:                 moveq  #$00000000,d4        * Cumulative data results
01:000032DE 7A00            	  5712:                 moveq  #$00000000,d5       * Cumulative flag results
01:000032E0 7C0E            	  5713:                 move.l #$0000000E,d6       * Inner loop counter
01:000032E2 7E0E            	  5714:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5715: 
                            	  5716: 
01:000032E4 C1C1            	  5717: MULS_OUTER1:    muls d1,d0
01:000032E6 40C3            	  5718:                 move SR,d3
01:000032E8 02830000000C    	  5719:                 andi.l #$0C,d3            * Isolate flags
01:000032EE DA83            	  5720:                 add.l d3,d5               * Copy flag results into accumulator
01:000032F0 D880            	  5721:                 add.l d0,d4               * Copy data results into data accumulator
01:000032F2 E299            	  5722:                 ror.l #$1,d1
                            	  5723: 
01:000032F4 51CEFFEE        	  5724:                 dbf d6,MULS_OUTER1
01:000032F8 E29A            	  5725:                 ror.l #$1,d2
01:000032FA 2002            	  5726:                 move.l d2,d0
01:000032FC 7C0E            	  5727:                 move.l #$0000000E,d6       * Inner loop counter
01:000032FE 51CFFFE4        	  5728:                 dbf d7,MULS_OUTER1
                            	  5729: 
01:00003302 0C84D4E2988C    	  5730:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:00003308 66FE            	  5731:                 bne.s *
                            	  5732: 
01:0000330A 0C85000003E0    	  5733:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:00003310 66FE            	  5734:                 bne.s *
                            	  5735: 
                            	  5736: 
01:00003312 4E75            	  5737:                 rts
                            	  5738: 
                            	  5739: 
                            	  5740: 
                            	  5741: *-----------------------------------------------------------
                            	  5742: *-----------------------------------------------------------
                            	  5743: * OPCODE : EXG
                            	  5744: *-----------------------------------------------------------
                            	  5745: *-----------------------------------------------------------
                            	  5746: 
                            	  5747: op_EXG:
01:00003314 223CD1D1D1D1    	  5748:                 move.l #$d1d1d1d1,d1
01:0000331A 243CD2D2D2D2    	  5749:                 move.l #$d2d2d2d2,d2
01:00003320 263CD3D3D3D3    	  5750:                 move.l #$d3d3d3d3,d3
01:00003326 227CA1A1A1A1    	  5751:                 move.l #$a1a1a1a1,a1
01:0000332C 247CA2A2A2A2    	  5752:                 move.l #$a2a2a2a2,a2
01:00003332 267CA3A3A3A3    	  5753:                 move.l #$a3a3a3a3,a3
                            	  5754: 
01:00003338 C342            	  5755:                 exg d1,d2
01:0000333A C34A            	  5756:                 exg a1,a2
01:0000333C C78B            	  5757:                 exg d3,a3
                            	  5758: 
01:0000333E 0C81D2D2D2D2    	  5759:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:00003344 66FE            	  5760:                 bne.s *
01:00003346 0C82D1D1D1D1    	  5761:                 cmpi.l #$d1d1d1d1,d2
01:0000334C 66FE            	  5762:                 bne.s *
01:0000334E 0C83A3A3A3A3    	  5763:                 cmpi.l #$a3a3a3a3,d3
01:00003354 66FE            	  5764:                 bne.s *
                            	  5765: 
01:00003356 2209            	  5766:                 move.l a1,d1
01:00003358 240A            	  5767:                 move.l a2,d2
01:0000335A 260B            	  5768:                 move.l a3,d3
                            	  5769: 
01:0000335C 0C81A2A2A2A2    	  5770:                 cmpi.l #$a2a2a2a2,d1
01:00003362 66FE            	  5771:                 bne.s *
01:00003364 0C82A1A1A1A1    	  5772:                 cmpi.l #$a1a1a1a1,d2
01:0000336A 66FE            	  5773:                 bne.s *
01:0000336C 0C83D3D3D3D3    	  5774:                 cmpi.l #$d3d3d3d3,d3
01:00003372 66FE            	  5775:                 bne.s *
                            	  5776: 
01:00003374 4E75            	  5777:                 rts
                            	  5778: 
                            	  5779: 
                            	  5780: *-----------------------------------------------------------
                            	  5781: *-----------------------------------------------------------
                            	  5782: * OPCODE : ROx
                            	  5783: *-----------------------------------------------------------
                            	  5784: *-----------------------------------------------------------
                            	  5785: 
                            	  5786: *     Subroutine to check and accumulate the flags
01:00003376 40C3            	  5787: ROx_FLAGS:      move SR,d3
01:00003378 02830000000F    	  5788:                 andi.l #$0F,d3            * Isolate flags
01:0000337E DA83            	  5789:                 add.l d3,d5               * Copy flag results into accumulator
01:00003380 4E75            	  5790:                 rts
                            	  5791: 
                            	  5792: op_ROx:
                            	  5793: 
                            	  5794: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5795: 
                            	  5796: *        BYTE LEFT
01:00003382 203C80018FF1    	  5797:                 move.l #$80018FF1,d0
01:00003388 7A00            	  5798:                 moveq  #$00000000,d5
01:0000338A 7C11            	  5799:                 moveq  #$00000011,d6
                            	  5800: ROx_LOOP1:
01:0000338C ED38            	  5801:                 rol.b d6,d0
01:0000338E 61E6            	  5802:                 bsr ROx_FLAGS
01:00003390 51CEFFFA        	  5803:                 dbf d6,ROx_LOOP1
01:00003394 0C8080018FE3    	  5804:                 cmpi.l #$80018FE3,d0
01:0000339A 66FE            	  5805:                 bne.s *
01:0000339C 0C850000006B    	  5806:                 cmpi.l #$0000006B,d5
01:000033A2 66FE            	  5807:                 bne.s *
                            	  5808: 
                            	  5809: *        BYTE RIGHT
01:000033A4 203C80018FF1    	  5810:                 move.l #$80018FF1,d0
01:000033AA 7C12            	  5811:                 moveq  #$00000012,d6
                            	  5812: ROx_LOOP2:
01:000033AC EC38            	  5813:                 ror.b d6,d0
01:000033AE 61C6            	  5814:                 bsr ROx_FLAGS
01:000033B0 51CEFFFA        	  5815:                 dbf d6,ROx_LOOP2
01:000033B4 0C8080018F3E    	  5816:                 cmpi.l #$80018F3E,d0
01:000033BA 66FE            	  5817:                 bne.s *
01:000033BC 0C85000000C5    	  5818:                 cmpi.l #$000000C5,d5
01:000033C2 66FE            	  5819:                 bne.s *
                            	  5820: 
                            	  5821: 
                            	  5822: *        WORD LEFT
01:000033C4 203C80018FF1    	  5823:                 move.l #$80018FF1,d0
01:000033CA 7C13            	  5824:                 moveq  #$00000013,d6
                            	  5825: ROx_LOOP3:
01:000033CC ED78            	  5826:                 rol.w d6,d0
01:000033CE 61A6            	  5827:                 bsr ROx_FLAGS
01:000033D0 51CEFFFA        	  5828:                 dbf d6,ROx_LOOP3
01:000033D4 0C80800163FC    	  5829:                 cmpi.l #$800163FC,d0
01:000033DA 66FE            	  5830:                 bne.s *
01:000033DC 0C8500000131    	  5831:                 cmpi.l #$00000131,d5
01:000033E2 66FE            	  5832:                 bne.s *
                            	  5833: 
                            	  5834: *        WORD RIGHT
01:000033E4 203C80018FF1    	  5835:                 move.l #$80018FF1,d0
01:000033EA 7C1E            	  5836:                 move.l #$0000001E,d6
                            	  5837: ROx_LOOP4:
01:000033EC EC78            	  5838:                 ror.w d6,d0
01:000033EE 6186            	  5839:                 bsr ROx_FLAGS
01:000033F0 51CEFFFA        	  5840:                 dbf d6,ROx_LOOP4
01:000033F4 0C808001C7F8    	  5841:                 cmpi.l #$8001C7F8,d0
01:000033FA 66FE            	  5842:                 bne.s *
01:000033FC 0C85000001DB    	  5843:                 cmpi.l #$000001DB,d5
01:00003402 66FE            	  5844:                 bne.s *
                            	  5845: 
                            	  5846: 
                            	  5847: *        LONG LEFT
01:00003404 203C80018FF1    	  5848:                 move.l #$80018FF1,d0
01:0000340A 7C15            	  5849:                 moveq  #$00000015,d6
                            	  5850: ROx_LOOP5:
01:0000340C EDB8            	  5851:                 rol.l d6,d0
01:0000340E 6100FF66        	  5852:                 bsr ROx_FLAGS
01:00003412 51CEFFF8        	  5853:                 dbf d6,ROx_LOOP5
01:00003416 0C8000C7F8C0    	  5854:                 cmpi.l #$00C7F8C0,d0
01:0000341C 66FE            	  5855:                 bne.s *
01:0000341E 0C850000021A    	  5856:                 cmpi.l #$0000021A,d5
01:00003424 66FE            	  5857:                 bne.s *
                            	  5858: 
                            	  5859: *        LONG RIGHT
01:00003426 203C80018FF1    	  5860:                 move.l #$80018FF1,d0
01:0000342C 7C16            	  5861:                 moveq  #$00000016,d6
                            	  5862: ROx_LOOP6:
01:0000342E ECB8            	  5863:                 ror.l d6,d0
01:00003430 6100FF44        	  5864:                 bsr ROx_FLAGS
01:00003434 51CEFFF8        	  5865:                 dbf d6,ROx_LOOP6
01:00003438 0C80000C7F8C    	  5866:                 cmpi.l #$000C7F8C,d0
01:0000343E 66FE            	  5867:                 bne.s *
01:00003440 0C8500000250    	  5868:                 cmpi.l #$00000250,d5
01:00003446 66FE            	  5869:                 bne.s *
                            	  5870: 
                            	  5871: 
                            	  5872: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5873: 
01:00003448 203C80018FF1    	  5874:                 move.l #$80018FF1,d0
01:0000344E 7A00            	  5875:                 moveq  #$00000000,d5
                            	  5876: 
                            	  5877: *        BYTE LEFT
01:00003450 E318            	  5878:                 rol.b #1,d0
01:00003452 6100FF22        	  5879:                 bsr ROx_FLAGS
01:00003456 EB18            	  5880:                 rol.b #5,d0
01:00003458 6100FF1C        	  5881:                 bsr ROx_FLAGS
01:0000345C EF18            	  5882:                 rol.b #7,d0
01:0000345E 6100FF16        	  5883:                 bsr ROx_FLAGS
01:00003462 E118            	  5884:                 rol.b #8,d0
01:00003464 6100FF10        	  5885:                 bsr ROx_FLAGS
01:00003468 0C8080018F3E    	  5886:                 cmpi.l #$80018F3E,d0
01:0000346E 66FE            	  5887:                 bne.s *
01:00003470 0C8500000009    	  5888:                 cmpi.l #$00000009,d5
01:00003476 66FE            	  5889:                 bne.s *
                            	  5890: 
                            	  5891: *        BYTE RIGHT
01:00003478 E218            	  5892:                 ror.b #1,d0
01:0000347A 6100FEFA        	  5893:                 bsr ROx_FLAGS
01:0000347E EA18            	  5894:                 ror.b #5,d0
01:00003480 6100FEF4        	  5895:                 bsr ROx_FLAGS
01:00003484 EE18            	  5896:                 ror.b #7,d0
01:00003486 6100FEEE        	  5897:                 bsr ROx_FLAGS
01:0000348A E018            	  5898:                 ror.b #8,d0
01:0000348C 6100FEE8        	  5899:                 bsr ROx_FLAGS
01:00003490 0C8080018FF1    	  5900:                 cmpi.l #$80018FF1,d0
01:00003496 66FE            	  5901:                 bne.s *
01:00003498 0C8500000024    	  5902:                 cmpi.l #$00000024,d5
01:0000349E 66FE            	  5903:                 bne.s *
                            	  5904: 
                            	  5905: *        WORD LEFT
01:000034A0 E358            	  5906:                 rol.w #1,d0
01:000034A2 6100FED2        	  5907:                 bsr ROx_FLAGS
01:000034A6 EB58            	  5908:                 rol.w #5,d0
01:000034A8 6100FECC        	  5909:                 bsr ROx_FLAGS
01:000034AC EF58            	  5910:                 rol.w #7,d0
01:000034AE 6100FEC6        	  5911:                 bsr ROx_FLAGS
01:000034B2 E158            	  5912:                 rol.w #8,d0
01:000034B4 6100FEC0        	  5913:                 bsr ROx_FLAGS
01:000034B8 0C808001FE31    	  5914:                 cmpi.l #$8001FE31,d0
01:000034BE 66FE            	  5915:                 bne.s *
01:000034C0 0C8500000037    	  5916:                 cmpi.l #$00000037,d5
01:000034C6 66FE            	  5917:                 bne.s *
                            	  5918: 
                            	  5919: *        WORD RIGHT
01:000034C8 E258            	  5920:                 ror.w #1,d0
01:000034CA 6100FEAA        	  5921:                 bsr ROx_FLAGS
01:000034CE EA58            	  5922:                 ror.w #5,d0
01:000034D0 6100FEA4        	  5923:                 bsr ROx_FLAGS
01:000034D4 EE58            	  5924:                 ror.w #7,d0
01:000034D6 6100FE9E        	  5925:                 bsr ROx_FLAGS
01:000034DA E058            	  5926:                 ror.w #8,d0
01:000034DC 6100FE98        	  5927:                 bsr ROx_FLAGS
01:000034E0 0C8080018FF1    	  5928:                 cmpi.l #$80018FF1,d0
01:000034E6 66FE            	  5929:                 bne.s *
01:000034E8 0C850000005B    	  5930:                 cmpi.l #$0000005B,d5
01:000034EE 66FE            	  5931:                 bne.s *
                            	  5932: 
                            	  5933: *        LONG LEFT
01:000034F0 E398            	  5934:                 rol.l #1,d0
01:000034F2 6100FE82        	  5935:                 bsr ROx_FLAGS
01:000034F6 EB98            	  5936:                 rol.l #5,d0
01:000034F8 6100FE7C        	  5937:                 bsr ROx_FLAGS
01:000034FC EF98            	  5938:                 rol.l #7,d0
01:000034FE 6100FE76        	  5939:                 bsr ROx_FLAGS
01:00003502 E198            	  5940:                 rol.l #8,d0
01:00003504 6100FE70        	  5941:                 bsr ROx_FLAGS
01:00003508 0C80FE300031    	  5942:                 cmpi.l #$FE300031,d0
01:0000350E 66FE            	  5943:                 bne.s *
01:00003510 0C8500000065    	  5944:                 cmpi.l #$00000065,d5
01:00003516 66FE            	  5945:                 bne.s *
                            	  5946: 
                            	  5947: *        LONG RIGHT
01:00003518 E298            	  5948:                 ror.l #1,d0
01:0000351A 6100FE5A        	  5949:                 bsr ROx_FLAGS
01:0000351E EA98            	  5950:                 ror.l #5,d0
01:00003520 6100FE54        	  5951:                 bsr ROx_FLAGS
01:00003524 EE98            	  5952:                 ror.l #7,d0
01:00003526 6100FE4E        	  5953:                 bsr ROx_FLAGS
01:0000352A E098            	  5954:                 ror.l #8,d0
01:0000352C 6100FE48        	  5955:                 bsr ROx_FLAGS
01:00003530 0C8080018FF1    	  5956:                 cmpi.l #$80018FF1,d0
01:00003536 66FE            	  5957:                 bne.s *
01:00003538 0C8500000080    	  5958:                 cmpi.l #$00000080,d5
01:0000353E 66FE            	  5959:                 bne.s *
                            	  5960: 
                            	  5961: 
                            	  5962: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5963: 
01:00003540 7A00            	  5964:                 moveq  #$00000000,d5
01:00003542 307C0100        	  5965:                 move.l #$00000100,a0
01:00003546 30BC8FF1        	  5966:                 move.w #$8FF1,(a0)
                            	  5967: 
                            	  5968: *        WORD LEFT
01:0000354A E7D0            	  5969:                 rol (a0)
01:0000354C 6100FE28        	  5970:                 bsr ROx_FLAGS
01:00003550 E7D0            	  5971:                 rol (a0)
01:00003552 6100FE22        	  5972:                 bsr ROx_FLAGS
01:00003556 E7D0            	  5973:                 rol (a0)
01:00003558 6100FE1C        	  5974:                 bsr ROx_FLAGS
01:0000355C E7D0            	  5975:                 rol (a0)
01:0000355E 6100FE16        	  5976:                 bsr ROx_FLAGS
01:00003562 3010            	  5977:                 move.w (a0),d0
01:00003564 0C808001FF18    	  5978:                 cmpi.l #$8001FF18,d0
01:0000356A 66FE            	  5979:                 bne.s *
01:0000356C 0C8500000009    	  5980:                 cmpi.l #$00000009,d5
01:00003572 66FE            	  5981:                 bne.s *
                            	  5982: 
                            	  5983: *        WORD RIGHT
01:00003574 E6D0            	  5984:                 ror (a0)
01:00003576 6100FDFE        	  5985:                 bsr ROx_FLAGS
01:0000357A E6D0            	  5986:                 ror (a0)
01:0000357C 6100FDF8        	  5987:                 bsr ROx_FLAGS
01:00003580 E6D0            	  5988:                 ror (a0)
01:00003582 6100FDF2        	  5989:                 bsr ROx_FLAGS
01:00003586 E6D0            	  5990:                 ror (a0)
01:00003588 6100FDEC        	  5991:                 bsr ROx_FLAGS
01:0000358C E6D0            	  5992:                 ror (a0)
01:0000358E 6100FDE6        	  5993:                 bsr ROx_FLAGS
01:00003592 E6D0            	  5994:                 ror (a0)
01:00003594 6100FDE0        	  5995:                 bsr ROx_FLAGS
01:00003598 3010            	  5996:                 move.w (a0),d0
01:0000359A 0C80800163FC    	  5997:                 cmpi.l #$800163FC,d0
01:000035A0 66FE            	  5998:                 bne.s *
01:000035A2 0C850000001B    	  5999:                 cmpi.l #$0000001B,d5
01:000035A8 66FE            	  6000:                 bne.s *
                            	  6001: 
01:000035AA 4E75            	  6002:                 rts
                            	  6003: 
                            	  6004: 
                            	  6005: 
                            	  6006: *-----------------------------------------------------------
                            	  6007: *-----------------------------------------------------------
                            	  6008: * OPCODE : ROXx
                            	  6009: *-----------------------------------------------------------
                            	  6010: *-----------------------------------------------------------
                            	  6011: 
                            	  6012: *     Subroutine to check and accumulate the flags
01:000035AC 40C3            	  6013: ROXx_FLAGS:     move SR,d3
01:000035AE 02830000000F    	  6014:                 andi.l #$0F,d3            * Isolate flags
01:000035B4 DA83            	  6015:                 add.l d3,d5               * Copy flag results into accumulator
01:000035B6 4E75            	  6016:                 rts
                            	  6017: 
                            	  6018: op_ROXx:
                            	  6019: 
                            	  6020: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6021: 
                            	  6022: *        BYTE LEFT
01:000035B8 203C80018FF1    	  6023:                 move.l #$80018FF1,d0
01:000035BE 7A00            	  6024:                 moveq  #$00000000,d5
01:000035C0 7C11            	  6025:                 moveq  #$00000011,d6
                            	  6026: ROXx_LOOP1:
01:000035C2 ED30            	  6027:                 roxl.b d6,d0
01:000035C4 61E6            	  6028:                 bsr ROXx_FLAGS
01:000035C6 51CEFFFA        	  6029:                 dbf d6,ROXx_LOOP1
01:000035CA 0C8080018FD0    	  6030:                 cmpi.l #$80018FD0,d0
01:000035D0 66FE            	  6031:                 bne.s *
01:000035D2 0C8500000042    	  6032:                 cmpi.l #$00000042,d5
01:000035D8 66FE            	  6033:                 bne.s *
                            	  6034: 
                            	  6035: *        BYTE RIGHT
01:000035DA 203C80018FF1    	  6036:                 move.l #$80018FF1,d0
01:000035E0 7C12            	  6037:                 moveq  #$00000012,d6
                            	  6038: ROXx_LOOP2:
01:000035E2 EC30            	  6039:                 roxr.b d6,d0
01:000035E4 61C6            	  6040:                 bsr ROXx_FLAGS
01:000035E6 51CEFFFA        	  6041:                 dbf d6,ROXx_LOOP2
01:000035EA 0C8080018F51    	  6042:                 cmpi.l #$80018F51,d0
01:000035F0 66FE            	  6043:                 bne.s *
01:000035F2 0C850000009C    	  6044:                 cmpi.l #$0000009C,d5
01:000035F8 66FE            	  6045:                 bne.s *
                            	  6046: 
                            	  6047: 
                            	  6048: *        WORD LEFT
01:000035FA 203C80018FF1    	  6049:                 move.l #$80018FF1,d0
01:00003600 7C13            	  6050:                 moveq  #$00000013,d6
                            	  6051: ROXx_LOOP3:
01:00003602 ED70            	  6052:                 roxl.w d6,d0
01:00003604 61A6            	  6053:                 bsr ROXx_FLAGS
01:00003606 51CEFFFA        	  6054:                 dbf d6,ROXx_LOOP3
01:0000360A 0C8080013980    	  6055:                 cmpi.l #$80013980,d0
01:00003610 66FE            	  6056:                 bne.s *
01:00003612 0C85000000C9    	  6057:                 cmpi.l #$000000C9,d5
01:00003618 66FE            	  6058:                 bne.s *
                            	  6059: 
                            	  6060: *        WORD RIGHT
01:0000361A 203C80018FF1    	  6061:                 move.l #$80018FF1,d0
01:00003620 7C1E            	  6062:                 move.l #$0000001E,d6
                            	  6063: ROXx_LOOP4:
01:00003622 EC70            	  6064:                 roxr.w d6,d0
01:00003624 6186            	  6065:                 bsr ROXx_FLAGS
01:00003626 51CEFFFA        	  6066:                 dbf d6,ROXx_LOOP4
01:0000362A 0C8080010A1D    	  6067:                 cmpi.l #$80010A1D,d0
01:00003630 66FE            	  6068:                 bne.s *
01:00003632 0C850000014D    	  6069:                 cmpi.l #$0000014D,d5
01:00003638 66FE            	  6070:                 bne.s *
                            	  6071: 
                            	  6072: 
                            	  6073: *        LONG LEFT
01:0000363A 203C80018FF1    	  6074:                 move.l #$80018FF1,d0
01:00003640 7C15            	  6075:                 moveq  #$00000015,d6
                            	  6076: ROXx_LOOP5:
01:00003642 EDB0            	  6077:                 roxl.l d6,d0
01:00003644 6100FF66        	  6078:                 bsr ROXx_FLAGS
01:00003648 51CEFFF8        	  6079:                 dbf d6,ROXx_LOOP5
01:0000364C 0C80800185D0    	  6080:                 cmpi.l #$800185D0,d0
01:00003652 66FE            	  6081:                 bne.s *
01:00003654 0C85000001A1    	  6082:                 cmpi.l #$000001A1,d5
01:0000365A 66FE            	  6083:                 bne.s *
                            	  6084: 
                            	  6085: *        LONG RIGHT
01:0000365C 203C80018FF1    	  6086:                 move.l #$80018FF1,d0
01:00003662 7C16            	  6087:                 moveq  #$00000016,d6
                            	  6088: ROXx_LOOP6:
01:00003664 ECB0            	  6089:                 roxr.l d6,d0
01:00003666 6100FF44        	  6090:                 bsr ROXx_FLAGS
01:0000366A 51CEFFF8        	  6091:                 dbf d6,ROXx_LOOP6
01:0000366E 0C80082D8200    	  6092:                 cmpi.l #$082D8200,d0
01:00003674 66FE            	  6093:                 bne.s *
01:00003676 0C85000001DE    	  6094:                 cmpi.l #$000001DE,d5
01:0000367C 66FE            	  6095:                 bne.s *
                            	  6096: 
                            	  6097: 
                            	  6098: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6099: 
01:0000367E 203C80018FF1    	  6100:                 move.l #$80018FF1,d0
01:00003684 7A00            	  6101:                 moveq  #$00000000,d5
                            	  6102: 
                            	  6103: *        BYTE LEFT
01:00003686 E310            	  6104:                 roxl.b #1,d0
01:00003688 6100FF22        	  6105:                 bsr ROXx_FLAGS
01:0000368C EB10            	  6106:                 roxl.b #5,d0
01:0000368E 6100FF1C        	  6107:                 bsr ROXx_FLAGS
01:00003692 EF10            	  6108:                 roxl.b #7,d0
01:00003694 6100FF16        	  6109:                 bsr ROXx_FLAGS
01:00003698 E110            	  6110:                 roxl.b #8,d0
01:0000369A 6100FF10        	  6111:                 bsr ROXx_FLAGS
01:0000369E 0C8080018F09    	  6112:                 cmpi.l #$80018F09,d0
01:000036A4 66FE            	  6113:                 bne.s *
01:000036A6 0C850000000B    	  6114:                 cmpi.l #$0000000B,d5
01:000036AC 66FE            	  6115:                 bne.s *
                            	  6116: 
                            	  6117: *        BYTE RIGHT
01:000036AE E210            	  6118:                 roxr.b #1,d0
01:000036B0 6100FEFA        	  6119:                 bsr ROXx_FLAGS
01:000036B4 EA10            	  6120:                 roxr.b #5,d0
01:000036B6 6100FEF4        	  6121:                 bsr ROXx_FLAGS
01:000036BA EE10            	  6122:                 roxr.b #7,d0
01:000036BC 6100FEEE        	  6123:                 bsr ROXx_FLAGS
01:000036C0 E010            	  6124:                 roxr.b #8,d0
01:000036C2 6100FEE8        	  6125:                 bsr ROXx_FLAGS
01:000036C6 0C8080018F00    	  6126:                 cmpi.l #$80018F00,d0
01:000036CC 66FE            	  6127:                 bne.s *
01:000036CE 0C8500000015    	  6128:                 cmpi.l #$00000015,d5
01:000036D4 66FE            	  6129:                 bne.s *
                            	  6130: 
                            	  6131: *        WORD LEFT
01:000036D6 E350            	  6132:                 roxl.w #1,d0
01:000036D8 6100FED2        	  6133:                 bsr ROXx_FLAGS
01:000036DC EB50            	  6134:                 roxl.w #5,d0
01:000036DE 6100FECC        	  6135:                 bsr ROXx_FLAGS
01:000036E2 EF50            	  6136:                 roxl.w #7,d0
01:000036E4 6100FEC6        	  6137:                 bsr ROXx_FLAGS
01:000036E8 E150            	  6138:                 roxl.w #8,d0
01:000036EA 6100FEC0        	  6139:                 bsr ROXx_FLAGS
01:000036EE 0C808001B000    	  6140:                 cmpi.l #$8001B000,d0
01:000036F4 66FE            	  6141:                 bne.s *
01:000036F6 0C8500000027    	  6142:                 cmpi.l #$00000027,d5
01:000036FC 66FE            	  6143:                 bne.s *
                            	  6144: 
                            	  6145: *        WORD RIGHT
01:000036FE E250            	  6146:                 roxr.w #1,d0
01:00003700 6100FEAA        	  6147:                 bsr ROXx_FLAGS
01:00003704 EA50            	  6148:                 roxr.w #5,d0
01:00003706 6100FEA4        	  6149:                 bsr ROXx_FLAGS
01:0000370A EE50            	  6150:                 roxr.w #7,d0
01:0000370C 6100FE9E        	  6151:                 bsr ROXx_FLAGS
01:00003710 E050            	  6152:                 roxr.w #8,d0
01:00003712 6100FE98        	  6153:                 bsr ROXx_FLAGS
01:00003716 0C8080010A00    	  6154:                 cmpi.l #$80010A00,d0
01:0000371C 66FE            	  6155:                 bne.s *
01:0000371E 0C8500000028    	  6156:                 cmpi.l #$00000028,d5
01:00003724 66FE            	  6157:                 bne.s *
                            	  6158: 
                            	  6159: *        LONG LEFT
01:00003726 E390            	  6160:                 roxl.l #1,d0
01:00003728 6100FE82        	  6161:                 bsr ROXx_FLAGS
01:0000372C EB90            	  6162:                 roxl.l #5,d0
01:0000372E 6100FE7C        	  6163:                 bsr ROXx_FLAGS
01:00003732 EF90            	  6164:                 roxl.l #7,d0
01:00003734 6100FE76        	  6165:                 bsr ROXx_FLAGS
01:00003738 E190            	  6166:                 roxl.l #8,d0
01:0000373A 6100FE70        	  6167:                 bsr ROXx_FLAGS
01:0000373E 0C8040000010    	  6168:                 cmpi.l #$40000010,d0
01:00003744 66FE            	  6169:                 bne.s *
01:00003746 0C850000002A    	  6170:                 cmpi.l #$0000002A,d5
01:0000374C 66FE            	  6171:                 bne.s *
                            	  6172: 
                            	  6173: *        LONG RIGHT
01:0000374E E290            	  6174:                 roxr.l #1,d0
01:00003750 6100FE5A        	  6175:                 bsr ROXx_FLAGS
01:00003754 EA90            	  6176:                 roxr.l #5,d0
01:00003756 6100FE54        	  6177:                 bsr ROXx_FLAGS
01:0000375A EE90            	  6178:                 roxr.l #7,d0
01:0000375C 6100FE4E        	  6179:                 bsr ROXx_FLAGS
01:00003760 E090            	  6180:                 roxr.l #8,d0
01:00003762 6100FE48        	  6181:                 bsr ROXx_FLAGS
01:00003766 0C8000010200    	  6182:                 cmpi.l #$00010200,d0
01:0000376C 66FE            	  6183:                 bne.s *
01:0000376E 0C8500000032    	  6184:                 cmpi.l #$00000032,d5
01:00003774 66FE            	  6185:                 bne.s *
                            	  6186: 
                            	  6187: 
                            	  6188: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6189: 
01:00003776 7A00            	  6190:                 moveq  #$00000000,d5
01:00003778 307C0100        	  6191:                 move.l #$00000100,a0
01:0000377C 30BC8FF1        	  6192:                 move.w #$8FF1,(a0)
                            	  6193: 
                            	  6194: *        WORD LEFT
01:00003780 E5D0            	  6195:                 roxl (a0)
01:00003782 6100FE28        	  6196:                 bsr ROXx_FLAGS
01:00003786 E5D0            	  6197:                 roxl (a0)
01:00003788 6100FE22        	  6198:                 bsr ROXx_FLAGS
01:0000378C E5D0            	  6199:                 roxl (a0)
01:0000378E 6100FE1C        	  6200:                 bsr ROXx_FLAGS
01:00003792 E5D0            	  6201:                 roxl (a0)
01:00003794 6100FE16        	  6202:                 bsr ROXx_FLAGS
01:00003798 3010            	  6203:                 move.w (a0),d0
01:0000379A 0C800001FF10    	  6204:                 cmpi.l #$0001FF10,d0
01:000037A0 66FE            	  6205:                 bne.s *
01:000037A2 0C8500000009    	  6206:                 cmpi.l #$00000009,d5
01:000037A8 66FE            	  6207:                 bne.s *
                            	  6208: 
                            	  6209: *        WORD RIGHT
01:000037AA E4D0            	  6210:                 roxr (a0)
01:000037AC 6100FDFE        	  6211:                 bsr ROXx_FLAGS
01:000037B0 E4D0            	  6212:                 roxr (a0)
01:000037B2 6100FDF8        	  6213:                 bsr ROXx_FLAGS
01:000037B6 E4D0            	  6214:                 roxr (a0)
01:000037B8 6100FDF2        	  6215:                 bsr ROXx_FLAGS
01:000037BC E4D0            	  6216:                 roxr (a0)
01:000037BE 6100FDEC        	  6217:                 bsr ROXx_FLAGS
01:000037C2 E4D0            	  6218:                 roxr (a0)
01:000037C4 6100FDE6        	  6219:                 bsr ROXx_FLAGS
01:000037C8 E4D0            	  6220:                 roxr (a0)
01:000037CA 6100FDE0        	  6221:                 bsr ROXx_FLAGS
01:000037CE 3010            	  6222:                 move.w (a0),d0
01:000037D0 0C80000103FC    	  6223:                 cmpi.l #$000103FC,d0
01:000037D6 66FE            	  6224:                 bne.s *
01:000037D8 0C850000000A    	  6225:                 cmpi.l #$0000000A,d5
01:000037DE 66FE            	  6226:                 bne.s *
                            	  6227: 
01:000037E0 4E75            	  6228:                 rts
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: 
                            	  6233: *-----------------------------------------------------------
                            	  6234: *-----------------------------------------------------------
                            	  6235: * OPCODE : SHIFTS
                            	  6236: *-----------------------------------------------------------
                            	  6237: *-----------------------------------------------------------
                            	  6238: 
                            	  6239: *     Subroutine to check and accumulate the flags
01:000037E2 40C3            	  6240: SHIFTS_FLAGS:   move SR,d3
01:000037E4 02830000000F    	  6241:                 andi.l #$0F,d3            * Isolate flags
01:000037EA DA83            	  6242:                 add.l d3,d5               * Copy flag results into accumulator
01:000037EC 4E75            	  6243:                 rts
                            	  6244: 
                            	  6245: op_SHIFTS:
                            	  6246: 
                            	  6247: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6248: 
                            	  6249: *        BYTE LEFT
01:000037EE 203C80018F81    	  6250:                 move.l #$80018F81,d0
01:000037F4 7A00            	  6251:                 moveq  #$00000000,d5
01:000037F6 7C02            	  6252:                 moveq  #$00000002,d6
                            	  6253: SHIFTS_LOOP1:
01:000037F8 ED20            	  6254:                 asl.b d6,d0
01:000037FA 61E6            	  6255:                 bsr SHIFTS_FLAGS
01:000037FC 51CEFFFA        	  6256:                 dbf d6,SHIFTS_LOOP1
01:00003800 0C8080018F08    	  6257:                 cmpi.l #$80018F08,d0
01:00003806 66FE            	  6258:                 bne.s *
01:00003808 0C8500000002    	  6259:                 cmpi.l #$00000002,d5
01:0000380E 66FE            	  6260:                 bne.s *
                            	  6261: 
                            	  6262: *        BYTE RIGHT
01:00003810 203C80018F81    	  6263:                 move.l #$80018F81,d0
01:00003816 7C02            	  6264:                 moveq  #$00000002,d6
                            	  6265: SHIFTS_LOOP2:
01:00003818 EC20            	  6266:                 asr.b d6,d0
01:0000381A 61C6            	  6267:                 bsr SHIFTS_FLAGS
01:0000381C 51CEFFFA        	  6268:                 dbf d6,SHIFTS_LOOP2
01:00003820 0C8080018FF0    	  6269:                 cmpi.l #$80018FF0,d0
01:00003826 66FE            	  6270:                 bne.s *
01:00003828 0C850000001A    	  6271:                 cmpi.l #$0000001A,d5
01:0000382E 66FE            	  6272:                 bne.s *
                            	  6273: 
                            	  6274: 
                            	  6275: *        WORD LEFT
01:00003830 203C80018FF1    	  6276:                 move.l #$80018FF1,d0
01:00003836 7C02            	  6277:                 moveq  #$00000002,d6
                            	  6278: SHIFTS_LOOP3:
01:00003838 ED60            	  6279:                 asl.w d6,d0
01:0000383A 61A6            	  6280:                 bsr SHIFTS_FLAGS
01:0000383C 51CEFFFA        	  6281:                 dbf d6,SHIFTS_LOOP3
01:00003840 0C8080017F88    	  6282:                 cmpi.l #$80017F88,d0
01:00003846 66FE            	  6283:                 bne.s *
01:00003848 0C850000001C    	  6284:                 cmpi.l #$0000001C,d5
01:0000384E 66FE            	  6285:                 bne.s *
                            	  6286: 
                            	  6287: *        WORD RIGHT
01:00003850 203C80018FF1    	  6288:                 move.l #$80018FF1,d0
01:00003856 7C02            	  6289:                 moveq  #$00000002,d6
                            	  6290: SHIFTS_LOOP4:
01:00003858 EC60            	  6291:                 asr.w d6,d0
01:0000385A 6186            	  6292:                 bsr SHIFTS_FLAGS
01:0000385C 51CEFFFA        	  6293:                 dbf d6,SHIFTS_LOOP4
01:00003860 0C808001F1FE    	  6294:                 cmpi.l #$8001F1FE,d0
01:00003866 66FE            	  6295:                 bne.s *
01:00003868 0C8500000034    	  6296:                 cmpi.l #$00000034,d5
01:0000386E 66FE            	  6297:                 bne.s *
                            	  6298: 
                            	  6299: 
                            	  6300: *        LONG LEFT
01:00003870 203C80018FF1    	  6301:                 move.l #$80018FF1,d0
01:00003876 7C02            	  6302:                 moveq  #$00000002,d6
                            	  6303: SHIFTS_LOOP5:
01:00003878 EDA0            	  6304:                 asl.l d6,d0
01:0000387A 6100FF66        	  6305:                 bsr SHIFTS_FLAGS
01:0000387E 51CEFFF8        	  6306:                 dbf d6,SHIFTS_LOOP5
01:00003882 0C80000C7F88    	  6307:                 cmpi.l #$000C7F88,d0
01:00003888 66FE            	  6308:                 bne.s *
01:0000388A 0C8500000036    	  6309:                 cmpi.l #$00000036,d5
01:00003890 66FE            	  6310:                 bne.s *
                            	  6311: 
                            	  6312: *        LONG RIGHT
01:00003892 203C80018FF1    	  6313:                 move.l #$80018FF1,d0
01:00003898 7C02            	  6314:                 moveq  #$00000002,d6
                            	  6315: SHIFTS_LOOP6:
01:0000389A ECA0            	  6316:                 asr.l d6,d0
01:0000389C 6100FF44        	  6317:                 bsr SHIFTS_FLAGS
01:000038A0 51CEFFF8        	  6318:                 dbf d6,SHIFTS_LOOP6
01:000038A4 0C80F00031FE    	  6319:                 cmpi.l #$F00031FE,d0
01:000038AA 66FE            	  6320:                 bne.s *
01:000038AC 0C850000004E    	  6321:                 cmpi.l #$0000004E,d5
01:000038B2 66FE            	  6322:                 bne.s *
                            	  6323: 
                            	  6324: 
                            	  6325: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6326: 
01:000038B4 203C80018FF1    	  6327:                 move.l #$80018FF1,d0
01:000038BA 7A00            	  6328:                 moveq  #$00000000,d5
                            	  6329: 
                            	  6330: *        BYTE LEFT
01:000038BC D000            	  6331:                 asl.b #1,d0
01:000038BE 6100FF22        	  6332:                 bsr SHIFTS_FLAGS
01:000038C2 E500            	  6333:                 asl.b #2,d0
01:000038C4 6100FF1C        	  6334:                 bsr SHIFTS_FLAGS
01:000038C8 D000            	  6335:                 asl.b #1,d0
01:000038CA 6100FF16        	  6336:                 bsr SHIFTS_FLAGS
01:000038CE E700            	  6337:                 asl.b #3,d0
01:000038D0 6100FF10        	  6338:                 bsr SHIFTS_FLAGS
01:000038D4 0C8080018F80    	  6339:                 cmpi.l #$80018F80,d0
01:000038DA 66FE            	  6340:                 bne.s *
01:000038DC 0C850000001F    	  6341:                 cmpi.l #$0000001F,d5
01:000038E2 66FE            	  6342:                 bne.s *
                            	  6343: 
                            	  6344: *        BYTE RIGHT
01:000038E4 E200            	  6345:                 asr.b #1,d0
01:000038E6 6100FEFA        	  6346:                 bsr SHIFTS_FLAGS
01:000038EA E400            	  6347:                 asr.b #2,d0
01:000038EC 6100FEF4        	  6348:                 bsr SHIFTS_FLAGS
01:000038F0 E600            	  6349:                 asr.b #3,d0
01:000038F2 6100FEEE        	  6350:                 bsr SHIFTS_FLAGS
01:000038F6 E200            	  6351:                 asr.b #1,d0
01:000038F8 6100FEE8        	  6352:                 bsr SHIFTS_FLAGS
01:000038FC 0C8080018FFF    	  6353:                 cmpi.l #$80018FFF,d0
01:00003902 66FE            	  6354:                 bne.s *
01:00003904 0C850000003F    	  6355:                 cmpi.l #$0000003F,d5
01:0000390A 66FE            	  6356:                 bne.s *
                            	  6357: 
                            	  6358: *        WORD LEFT
01:0000390C D040            	  6359:                 asl.w #1,d0
01:0000390E 6100FED2        	  6360:                 bsr SHIFTS_FLAGS
01:00003912 E540            	  6361:                 asl.w #2,d0
01:00003914 6100FECC        	  6362:                 bsr SHIFTS_FLAGS
01:00003918 E740            	  6363:                 asl.w #3,d0
01:0000391A 6100FEC6        	  6364:                 bsr SHIFTS_FLAGS
01:0000391E EB40            	  6365:                 asl.w #5,d0
01:00003920 6100FEC0        	  6366:                 bsr SHIFTS_FLAGS
01:00003924 0C808001F800    	  6367:                 cmpi.l #$8001F800,d0
01:0000392A 66FE            	  6368:                 bne.s *
01:0000392C 0C8500000056    	  6369:                 cmpi.l #$00000056,d5
01:00003932 66FE            	  6370:                 bne.s *
                            	  6371: 
                            	  6372: *        WORD RIGHT
01:00003934 EA40            	  6373:                 asr.w #5,d0
01:00003936 6100FEAA        	  6374:                 bsr SHIFTS_FLAGS
01:0000393A E240            	  6375:                 asr.w #1,d0
01:0000393C 6100FEA4        	  6376:                 bsr SHIFTS_FLAGS
01:00003940 E440            	  6377:                 asr.w #2,d0
01:00003942 6100FE9E        	  6378:                 bsr SHIFTS_FLAGS
01:00003946 E840            	  6379:                 asr.w #4,d0
01:00003948 6100FE98        	  6380:                 bsr SHIFTS_FLAGS
01:0000394C 0C808001FFFF    	  6381:                 cmpi.l #$8001FFFF,d0
01:00003952 66FE            	  6382:                 bne.s *
01:00003954 0C8500000077    	  6383:                 cmpi.l #$00000077,d5
01:0000395A 66FE            	  6384:                 bne.s *
                            	  6385: 
                            	  6386: *        LONG LEFT
01:0000395C 203C80018FF1    	  6387:                 move.l #$80018FF1,d0
01:00003962 D080            	  6388:                 asl.l #1,d0
01:00003964 6100FE7C        	  6389:                 bsr SHIFTS_FLAGS
01:00003968 E580            	  6390:                 asl.l #2,d0
01:0000396A 6100FE76        	  6391:                 bsr SHIFTS_FLAGS
01:0000396E EF80            	  6392:                 asl.l #7,d0
01:00003970 6100FE70        	  6393:                 bsr SHIFTS_FLAGS
01:00003974 E980            	  6394:                 asl.l #4,d0
01:00003976 6100FE6A        	  6395:                 bsr SHIFTS_FLAGS
01:0000397A 0C8063FC4000    	  6396:                 cmpi.l #$63FC4000,d0
01:00003980 66FE            	  6397:                 bne.s *
01:00003982 0C850000007A    	  6398:                 cmpi.l #$0000007A,d5
01:00003988 66FE            	  6399:                 bne.s *
                            	  6400: 
                            	  6401: *        LONG RIGHT
01:0000398A 203C80018FF1    	  6402:                 move.l #$80018FF1,d0
01:00003990 E280            	  6403:                 asr.l #1,d0
01:00003992 6100FE4E        	  6404:                 bsr SHIFTS_FLAGS
01:00003996 EA80            	  6405:                 asr.l #5,d0
01:00003998 6100FE48        	  6406:                 bsr SHIFTS_FLAGS
01:0000399C EE80            	  6407:                 asr.l #7,d0
01:0000399E 6100FE42        	  6408:                 bsr SHIFTS_FLAGS
01:000039A2 E080            	  6409:                 asr.l #8,d0
01:000039A4 6100FE3C        	  6410:                 bsr SHIFTS_FLAGS
01:000039A8 0C80FFFFFC00    	  6411:                 cmpi.l #$FFFFFC00,d0
01:000039AE 66FE            	  6412:                 bne.s *
01:000039B0 0C850000009C    	  6413:                 cmpi.l #$0000009C,d5
01:000039B6 66FE            	  6414:                 bne.s *
                            	  6415: 
                            	  6416: 
                            	  6417: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6418: 
01:000039B8 7A00            	  6419:                 moveq  #$00000000,d5
01:000039BA 307C0100        	  6420:                 move.l #$00000100,a0
01:000039BE 30BC8FF1        	  6421:                 move.w #$8FF1,(a0)
                            	  6422: 
                            	  6423: *        WORD LEFT
01:000039C2 E1D0            	  6424:                 asl  (a0)
01:000039C4 6100FE1C        	  6425:                 bsr SHIFTS_FLAGS
01:000039C8 E1D0            	  6426:                 asl  (a0)
01:000039CA 6100FE16        	  6427:                 bsr SHIFTS_FLAGS
01:000039CE E1D0            	  6428:                 asl  (a0)
01:000039D0 6100FE10        	  6429:                 bsr SHIFTS_FLAGS
01:000039D4 E1D0            	  6430:                 asl  (a0)
01:000039D6 6100FE0A        	  6431:                 bsr SHIFTS_FLAGS
01:000039DA 3010            	  6432:                 move.w (a0),d0
01:000039DC 0C80FFFFFF10    	  6433:                 cmpi.l #$FFFFFF10,d0
01:000039E2 66FE            	  6434:                 bne.s *
01:000039E4 0C850000000D    	  6435:                 cmpi.l #$0000000D,d5
01:000039EA 66FE            	  6436:                 bne.s *
                            	  6437: 
                            	  6438: *        WORD RIGHT
01:000039EC E0D0            	  6439:                 asr (a0)
01:000039EE 6100FDF2        	  6440:                 bsr SHIFTS_FLAGS
01:000039F2 E0D0            	  6441:                 asr (a0)
01:000039F4 6100FDEC        	  6442:                 bsr SHIFTS_FLAGS
01:000039F8 E0D0            	  6443:                 asr (a0)
01:000039FA 6100FDE6        	  6444:                 bsr SHIFTS_FLAGS
01:000039FE E0D0            	  6445:                 asr (a0)
01:00003A00 6100FDE0        	  6446:                 bsr SHIFTS_FLAGS
01:00003A04 E0D0            	  6447:                 asr (a0)
01:00003A06 6100FDDA        	  6448:                 bsr SHIFTS_FLAGS
01:00003A0A E0D0            	  6449:                 asr (a0)
01:00003A0C 6100FDD4        	  6450:                 bsr SHIFTS_FLAGS
01:00003A10 3010            	  6451:                 move.w (a0),d0
01:00003A12 0C80FFFFFFFC    	  6452:                 cmpi.l #$FFFFFFFC,d0
01:00003A18 66FE            	  6453:                 bne.s *
01:00003A1A 0C850000003E    	  6454:                 cmpi.l #$0000003E,d5
01:00003A20 66FE            	  6455:                 bne.s *
                            	  6456: 
01:00003A22 4E75            	  6457:                 rts
                            	  6458: 
                            	  6459: 
                            	  6460: 
                            	  6461: *-----------------------------------------------------------
                            	  6462: *-----------------------------------------------------------
                            	  6463: * OPCODE : SHIFTS2
                            	  6464: *-----------------------------------------------------------
                            	  6465: *-----------------------------------------------------------
                            	  6466: 
                            	  6467: *     Subroutine to check and accumulate the flags
01:00003A24 40C3            	  6468: SHIFTS2_FLAGS:  move SR,d3
01:00003A26 02830000000F    	  6469:                 andi.l #$0F,d3            * Isolate flags
01:00003A2C DA83            	  6470:                 add.l d3,d5               * Copy flag results into accumulator
01:00003A2E 4E75            	  6471:                 rts
                            	  6472: 
                            	  6473: op_SHIFTS2:
                            	  6474: 
                            	  6475: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6476: 
                            	  6477: *        BYTE LEFT
01:00003A30 203C80018F81    	  6478:                 move.l #$80018F81,d0
01:00003A36 7A00            	  6479:                 moveq  #$00000000,d5
01:00003A38 7C02            	  6480:                 moveq  #$00000002,d6
                            	  6481: SHIFTS2_LOOP1:
01:00003A3A ED28            	  6482:                 lsl.b d6,d0
01:00003A3C 61E6            	  6483:                 bsr SHIFTS2_FLAGS
01:00003A3E 51CEFFFA        	  6484:                 dbf d6,SHIFTS2_LOOP1
01:00003A42 0C8080018F08    	  6485:                 cmpi.l #$80018F08,d0
01:00003A48 66FE            	  6486:                 bne.s *
01:00003A4A 4A85            	  6487:                 cmpi.l #$00000000,d5
01:00003A4C 66FE            	  6488:                 bne.s *
                            	  6489: 
                            	  6490: *        BYTE RIGHT
01:00003A4E 203C80018F81    	  6491:                 move.l #$80018F81,d0
01:00003A54 7C02            	  6492:                 moveq  #$00000002,d6
                            	  6493: SHIFTS2_LOOP2:
01:00003A56 EC28            	  6494:                 lsr.b d6,d0
01:00003A58 61CA            	  6495:                 bsr SHIFTS2_FLAGS
01:00003A5A 51CEFFFA        	  6496:                 dbf d6,SHIFTS2_LOOP2
01:00003A5E 0C8080018F10    	  6497:                 cmpi.l #$80018F10,d0
01:00003A64 66FE            	  6498:                 bne.s *
01:00003A66 4A85            	  6499:                 cmpi.l #$00000000,d5
01:00003A68 66FE            	  6500:                 bne.s *
                            	  6501: 
                            	  6502: 
                            	  6503: *        WORD LEFT
01:00003A6A 203C80018FF1    	  6504:                 move.l #$80018FF1,d0
01:00003A70 7C02            	  6505:                 moveq  #$00000002,d6
                            	  6506: SHIFTS2_LOOP3:
01:00003A72 ED68            	  6507:                 lsl.w d6,d0
01:00003A74 61AE            	  6508:                 bsr SHIFTS2_FLAGS
01:00003A76 51CEFFFA        	  6509:                 dbf d6,SHIFTS2_LOOP3
01:00003A7A 0C8080017F88    	  6510:                 cmpi.l #$80017F88,d0
01:00003A80 66FE            	  6511:                 bne.s *
01:00003A82 4A85            	  6512:                 cmpi.l #$00000000,d5
01:00003A84 66FE            	  6513:                 bne.s *
                            	  6514: 
                            	  6515: *        WORD RIGHT
01:00003A86 203C80018FF1    	  6516:                 move.l #$80018FF1,d0
01:00003A8C 7C02            	  6517:                 moveq  #$00000002,d6
                            	  6518: SHIFTS2_LOOP4:
01:00003A8E EC68            	  6519:                 lsr.w d6,d0
01:00003A90 6192            	  6520:                 bsr SHIFTS2_FLAGS
01:00003A92 51CEFFFA        	  6521:                 dbf d6,SHIFTS2_LOOP4
01:00003A96 0C80800111FE    	  6522:                 cmpi.l #$800111FE,d0
01:00003A9C 66FE            	  6523:                 bne.s *
01:00003A9E 4A85            	  6524:                 cmpi.l #$00000000,d5
01:00003AA0 66FE            	  6525:                 bne.s *
                            	  6526: 
                            	  6527: 
                            	  6528: *        LONG LEFT
01:00003AA2 203C80018FF1    	  6529:                 move.l #$80018FF1,d0
01:00003AA8 7C02            	  6530:                 moveq  #$00000002,d6
                            	  6531: SHIFTS2_LOOP5:
01:00003AAA EDA8            	  6532:                 lsl.l d6,d0
01:00003AAC 6100FF76        	  6533:                 bsr SHIFTS2_FLAGS
01:00003AB0 51CEFFF8        	  6534:                 dbf d6,SHIFTS2_LOOP5
01:00003AB4 0C80000C7F88    	  6535:                 cmpi.l #$000C7F88,d0
01:00003ABA 66FE            	  6536:                 bne.s *
01:00003ABC 4A85            	  6537:                 cmpi.l #$00000000,d5
01:00003ABE 66FE            	  6538:                 bne.s *
                            	  6539: 
                            	  6540: *        LONG RIGHT
01:00003AC0 203C80018FF1    	  6541:                 move.l #$80018FF1,d0
01:00003AC6 7C02            	  6542:                 moveq  #$00000002,d6
                            	  6543: SHIFTS2_LOOP6:
01:00003AC8 ECA8            	  6544:                 lsr.l d6,d0
01:00003ACA 6100FF58        	  6545:                 bsr SHIFTS2_FLAGS
01:00003ACE 51CEFFF8        	  6546:                 dbf d6,SHIFTS2_LOOP6
01:00003AD2 0C80100031FE    	  6547:                 cmpi.l #$100031FE,d0
01:00003AD8 66FE            	  6548:                 bne.s *
01:00003ADA 4A85            	  6549:                 cmpi.l #$00000000,d5
01:00003ADC 66FE            	  6550:                 bne.s *
                            	  6551: 
                            	  6552: 
                            	  6553: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6554: 
01:00003ADE 203C80018FF1    	  6555:                 move.l #$80018FF1,d0
01:00003AE4 7A00            	  6556:                 moveq  #$00000000,d5
                            	  6557: 
                            	  6558: *        BYTE LEFT
01:00003AE6 E308            	  6559:                 lsl.b #1,d0
01:00003AE8 6100FF3A        	  6560:                 bsr SHIFTS2_FLAGS
01:00003AEC E508            	  6561:                 lsl.b #2,d0
01:00003AEE 6100FF34        	  6562:                 bsr SHIFTS2_FLAGS
01:00003AF2 E308            	  6563:                 lsl.b #1,d0
01:00003AF4 6100FF2E        	  6564:                 bsr SHIFTS2_FLAGS
01:00003AF8 E708            	  6565:                 lsl.b #3,d0
01:00003AFA 6100FF28        	  6566:                 bsr SHIFTS2_FLAGS
01:00003AFE 0C8080018F80    	  6567:                 cmpi.l #$80018F80,d0
01:00003B04 66FE            	  6568:                 bne.s *
01:00003B06 0C850000001B    	  6569:                 cmpi.l #$0000001B,d5
01:00003B0C 66FE            	  6570:                 bne.s *
                            	  6571: 
                            	  6572: *        BYTE RIGHT
01:00003B0E E208            	  6573:                 lsr.b #1,d0
01:00003B10 6100FF12        	  6574:                 bsr SHIFTS2_FLAGS
01:00003B14 E408            	  6575:                 lsr.b #2,d0
01:00003B16 6100FF0C        	  6576:                 bsr SHIFTS2_FLAGS
01:00003B1A E608            	  6577:                 lsr.b #3,d0
01:00003B1C 6100FF06        	  6578:                 bsr SHIFTS2_FLAGS
01:00003B20 E208            	  6579:                 lsr.b #1,d0
01:00003B22 6100FF00        	  6580:                 bsr SHIFTS2_FLAGS
01:00003B26 0C8080018F01    	  6581:                 cmpi.l #$80018F01,d0
01:00003B2C 66FE            	  6582:                 bne.s *
01:00003B2E 0C850000001B    	  6583:                 cmpi.l #$0000001B,d5
01:00003B34 66FE            	  6584:                 bne.s *
                            	  6585: 
                            	  6586: *        WORD LEFT
01:00003B36 E348            	  6587:                 lsl.w #1,d0
01:00003B38 6100FEEA        	  6588:                 bsr SHIFTS2_FLAGS
01:00003B3C E548            	  6589:                 lsl.w #2,d0
01:00003B3E 6100FEE4        	  6590:                 bsr SHIFTS2_FLAGS
01:00003B42 E748            	  6591:                 lsl.w #3,d0
01:00003B44 6100FEDE        	  6592:                 bsr SHIFTS2_FLAGS
01:00003B48 EB48            	  6593:                 lsl.w #5,d0
01:00003B4A 6100FED8        	  6594:                 bsr SHIFTS2_FLAGS
01:00003B4E 0C8080010800    	  6595:                 cmpi.l #$80010800,d0
01:00003B54 66FE            	  6596:                 bne.s *
01:00003B56 0C8500000025    	  6597:                 cmpi.l #$00000025,d5
01:00003B5C 66FE            	  6598:                 bne.s *
                            	  6599: 
                            	  6600: *        WORD RIGHT
01:00003B5E EA48            	  6601:                 lsr.w #5,d0
01:00003B60 6100FEC2        	  6602:                 bsr SHIFTS2_FLAGS
01:00003B64 E248            	  6603:                 lsr.w #1,d0
01:00003B66 6100FEBC        	  6604:                 bsr SHIFTS2_FLAGS
01:00003B6A E448            	  6605:                 lsr.w #2,d0
01:00003B6C 6100FEB6        	  6606:                 bsr SHIFTS2_FLAGS
01:00003B70 E848            	  6607:                 lsr.w #4,d0
01:00003B72 6100FEB0        	  6608:                 bsr SHIFTS2_FLAGS
01:00003B76 0C8080010000    	  6609:                 cmpi.l #$80010000,d0
01:00003B7C 66FE            	  6610:                 bne.s *
01:00003B7E 0C850000002A    	  6611:                 cmpi.l #$0000002A,d5
01:00003B84 66FE            	  6612:                 bne.s *
                            	  6613: 
                            	  6614: *        LONG LEFT
01:00003B86 203C80018FF1    	  6615:                 move.l #$80018FF1,d0
01:00003B8C E388            	  6616:                 lsl.l #1,d0
01:00003B8E 6100FE94        	  6617:                 bsr SHIFTS2_FLAGS
01:00003B92 E588            	  6618:                 lsl.l #2,d0
01:00003B94 6100FE8E        	  6619:                 bsr SHIFTS2_FLAGS
01:00003B98 EF88            	  6620:                 lsl.l #7,d0
01:00003B9A 6100FE88        	  6621:                 bsr SHIFTS2_FLAGS
01:00003B9E E988            	  6622:                 lsl.l #4,d0
01:00003BA0 6100FE82        	  6623:                 bsr SHIFTS2_FLAGS
01:00003BA4 0C8063FC4000    	  6624:                 cmpi.l #$63FC4000,d0
01:00003BAA 66FE            	  6625:                 bne.s *
01:00003BAC 0C850000002B    	  6626:                 cmpi.l #$0000002B,d5
01:00003BB2 66FE            	  6627:                 bne.s *
                            	  6628: 
                            	  6629: *        LONG RIGHT
01:00003BB4 203C80018FF1    	  6630:                 move.l #$80018FF1,d0
01:00003BBA E288            	  6631:                 lsr.l #1,d0
01:00003BBC 6100FE66        	  6632:                 bsr SHIFTS2_FLAGS
01:00003BC0 EA88            	  6633:                 lsr.l #5,d0
01:00003BC2 6100FE60        	  6634:                 bsr SHIFTS2_FLAGS
01:00003BC6 EE88            	  6635:                 lsr.l #7,d0
01:00003BC8 6100FE5A        	  6636:                 bsr SHIFTS2_FLAGS
01:00003BCC E088            	  6637:                 lsr.l #8,d0
01:00003BCE 6100FE54        	  6638:                 bsr SHIFTS2_FLAGS
01:00003BD2 0C8000000400    	  6639:                 cmpi.l #$00000400,d0
01:00003BD8 66FE            	  6640:                 bne.s *
01:00003BDA 0C850000002D    	  6641:                 cmpi.l #$0000002D,d5
01:00003BE0 66FE            	  6642:                 bne.s *
                            	  6643: 
                            	  6644: 
                            	  6645: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6646: 
01:00003BE2 7A00            	  6647:                 moveq  #$00000000,d5
01:00003BE4 307C0100        	  6648:                 move.l #$00000100,a0
01:00003BE8 30BC8FF1        	  6649:                 move.w #$8FF1,(a0)
                            	  6650: 
                            	  6651: *        WORD LEFT
01:00003BEC E3D0            	  6652:                 lsl  (a0)
01:00003BEE 6100FE34        	  6653:                 bsr SHIFTS2_FLAGS
01:00003BF2 E3D0            	  6654:                 lsl  (a0)
01:00003BF4 6100FE2E        	  6655:                 bsr SHIFTS2_FLAGS
01:00003BF8 E3D0            	  6656:                 lsl  (a0)
01:00003BFA 6100FE28        	  6657:                 bsr SHIFTS2_FLAGS
01:00003BFE E3D0            	  6658:                 lsl  (a0)
01:00003C00 6100FE22        	  6659:                 bsr SHIFTS2_FLAGS
01:00003C04 3010            	  6660:                 move.w (a0),d0
01:00003C06 0C800000FF10    	  6661:                 cmpi.l #$0000FF10,d0
01:00003C0C 66FE            	  6662:                 bne.s *
01:00003C0E 0C8500000009    	  6663:                 cmpi.l #$00000009,d5
01:00003C14 66FE            	  6664:                 bne.s *
                            	  6665: 
                            	  6666: *        WORD RIGHT
01:00003C16 E2D0            	  6667:                 lsr (a0)
01:00003C18 6100FE0A        	  6668:                 bsr SHIFTS2_FLAGS
01:00003C1C E2D0            	  6669:                 lsr (a0)
01:00003C1E 6100FE04        	  6670:                 bsr SHIFTS2_FLAGS
01:00003C22 E2D0            	  6671:                 lsr (a0)
01:00003C24 6100FDFE        	  6672:                 bsr SHIFTS2_FLAGS
01:00003C28 E2D0            	  6673:                 lsr (a0)
01:00003C2A 6100FDF8        	  6674:                 bsr SHIFTS2_FLAGS
01:00003C2E E2D0            	  6675:                 lsr (a0)
01:00003C30 6100FDF2        	  6676:                 bsr SHIFTS2_FLAGS
01:00003C34 E2D0            	  6677:                 lsr (a0)
01:00003C36 6100FDEC        	  6678:                 bsr SHIFTS2_FLAGS
01:00003C3A 3010            	  6679:                 move.w (a0),d0
01:00003C3C 0C80000003FC    	  6680:                 cmpi.l #$000003FC,d0
01:00003C42 66FE            	  6681:                 bne.s *
01:00003C44 0C850000000A    	  6682:                 cmpi.l #$0000000A,d5
01:00003C4A 66FE            	  6683:                 bne.s *
                            	  6684: 
01:00003C4C 4E75            	  6685:                 rts
                            	  6686: 
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ; OPCODE : BSR / RTS
                            	  6690: ;-----------------------------------------------------------
                            	  6691: ;-----------------------------------------------------------
                            	  6692: 
                            	  6693: ;t3_bsr:
                            	  6694: ;	moveq	#3,d3
                            	  6695: ;	rts
                            	  6696: 
                            	  6697: ;t1_bsr:
                            	  6698: ;	moveq	#1,d1
                            	  6699: ;	rts
                            	  6700: 
                            	  6701: ;op_bsr:
                            	  6702: ;	bsr			t1_bsr
                            	  6703: ;	bsr			t2_bsr
                            	  6704: ;	bsr.w		t3_bsr
                            	  6705: ;	bsr.w		t4_bsr
                            	  6706: ;	cmpi.l	#1,d1
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#2,d2
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#3,d3
                            	  6711: ;	bne			*
                            	  6712: ;	cmpi.l	#4,d4
                            	  6713: ;	bne			*
                            	  6714: ;	rts
                            	  6715: 
                            	  6716: ;t2_bsr:
                            	  6717: ;	moveq	#2,d2
                            	  6718: ;	rts
                            	  6719: 	
                            	  6720: ;t4_bsr:
                            	  6721: ;	moveq	#4,d4
                            	  6722: ;	rts
                            	  6723: 

Source: "boot.asm"
                            	   177: 
                            	   178: ; -----------------------------------------------------------------------------
                            	   179: ; Gets the screen color in d0 and d1.
                            	   180: ; -----------------------------------------------------------------------------
                            	   181: 
                            	   182: get_screen_color:
01:00003C4E 203900000404    	   183: 	move.l	fgcolor,d0			; get foreground color
01:00003C54 EB80            	   184: 	asl.l		#5,d0						; shift into position
01:00003C56 008040000000    	   185: 	ori.l		#$40000000,d0		; set priority
01:00003C5C 223900000408    	   186: 	move.l	bkcolor,d1
01:00003C62 E089            	   187: 	lsr.l		#8,d1
01:00003C64 E089            	   188: 	lsr.l		#8,d1
01:00003C66 02810000001F    	   189: 	andi.l	#31,d1					; mask off extra bits
01:00003C6C 8081            	   190: 	or.l		d1,d0						; set background color bits in upper long word
01:00003C6E 223900000408    	   191: 	move.l	bkcolor,d1			; get background color
01:00003C74 E181            	   192: 	asl.l		#8,d1						; shift into position for display ram
01:00003C76 E181            	   193: 	asl.l		#8,d1
01:00003C78 4E75            	   194: 	rts
                            	   195: 
                            	   196: ; -----------------------------------------------------------------------------
                            	   197: ; -----------------------------------------------------------------------------
                            	   198: 
                            	   199: clear_screen:
01:00003C7A 207900000414    	   200: 	move.l	TextScr,a0				; a0 = pointer to screen area
01:00003C80 10390000040E    	   201: 	move.b	TextRows,d0				; d0 = rows
01:00003C86 14390000040F    	   202: 	move.b	TextCols,d2				; d2 = cols
01:00003C8C 4880            	   203: 	ext.w		d0								; convert to word
01:00003C8E 4882            	   204: 	ext.w		d2								; convert to word
01:00003C90 C4C0            	   205: 	mulu		d0,d2							; d2 = number of character cells to clear
01:00003C92 61BA            	   206: 	bsr			get_screen_color	; get the color bits
01:00003C94 00410020        	   207: 	ori.w		#32,d1						; load space character
01:00003C98 E159            	   208: 	rol.w		#8,d1							; swap endian, text controller expects little endian
01:00003C9A 4841            	   209: 	swap		d1
01:00003C9C E159            	   210: 	rol.w		#8,d1
01:00003C9E E158            	   211: 	rol.w		#8,d0							; swap endian
01:00003CA0 4840            	   212: 	swap		d0
01:00003CA2 E158            	   213: 	rol.w		#8,d0
                            	   214: loop3:
01:00003CA4 20C1            	   215: 	move.l	d1,(a0)+					; copy char plus bkcolor to cell
01:00003CA6 20C0            	   216: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003CA8 51CAFFFA        	   217: 	dbra		d2,loop3
01:00003CAC 4E75            	   218: 	rts
                            	   219: 
                            	   220: CRLF:
01:00003CAE 2F01            	   221: 	move.l	d1,-(a7)
01:00003CB0 123C000D        	   222: 	move.b	#13,d1
01:00003CB4 613E            	   223: 	bsr			DisplayChar
01:00003CB6 123C000A        	   224: 	move.b	#10,d1
01:00003CBA 6138            	   225: 	bsr			DisplayChar
01:00003CBC 221F            	   226: 	move.l	(a7)+,d1
01:00003CBE 4E75            	   227: 	rts
                            	   228: 
                            	   229: ;------------------------------------------------------------------------------
                            	   230: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   231: ; Destroys d0,d2,a0
                            	   232: ;------------------------------------------------------------------------------
                            	   233: ;
                            	   234: CalcScreenLoc:
01:00003CC0 10390000040C    	   235: 	move.b	CursorRow,d0		; compute screen location
01:00003CC6 0240007F        	   236: 	andi.w	#$7f,d0
01:00003CCA 14390000040F    	   237: 	move.b	TextCols,d2
01:00003CD0 4882            	   238: 	ext.w		d2
01:00003CD2 C0C2            	   239: 	mulu.w	d2,d0
01:00003CD4 14390000040D    	   240: 	move.b	CursorCol,d2
01:00003CDA 024200FF        	   241: 	andi.w	#$ff,d2
01:00003CDE D042            	   242: 	add.w		d2,d0
01:00003CE0 33C000000410    	   243: 	move.w	d0,TextCurpos		; save cursor pos
01:00003CE6 48C0            	   244: 	ext.l		d0							; make it into a long
01:00003CE8 E780            	   245: 	asl.l		#3,d0						; 8 bytes per char
01:00003CEA D0B900000414    	   246: 	add.l		TextScr,d0
01:00003CF0 2040            	   247: 	move.l	d0,a0						; a0 = screen location
01:00003CF2 4E75            	   248: 	rts
                            	   249: 
                            	   250: ;------------------------------------------------------------------------------
                            	   251: ; Display a character on the screen
                            	   252: ; d1.b = char to display
                            	   253: ;------------------------------------------------------------------------------
                            	   254: ;
                            	   255: DisplayChar:
01:00003CF4 48E73000        	   256: 	movem.l	d2/d3,-(a7)
01:00003CF8 0C01000D        	   257: 	cmpi.b	#13,d1			; carriage return ?
01:00003CFC 6610            	   258: 	bne.s		dccr
01:00003CFE 42390000040D    	   259: 	clr.b		CursorCol			; just set cursor column to zero on a CR
01:00003D04 61000232        	   260: 	bsr			SyncCursor		; set position in text controller
01:00003D08 4CDF000C        	   261: 	movem.l	(a7)+,d2/d3
01:00003D0C 4E75            	   262: 	rts
                            	   263: dccr:
01:00003D0E 0C010091        	   264: 	cmpi.b	#$91,d1			; cursor right ?
01:00003D12 6620            	   265: 	bne.s   dcx6
01:00003D14 14390000040F    	   266: 	move.b	TextCols,d2
01:00003D1A 5302            	   267: 	sub.b		#1,d2
01:00003D1C 94390000040D    	   268: 	sub.b		CursorCol,d2
01:00003D22 670A            	   269: 	beq.s		dcx7
01:00003D24 52390000040D    	   270: 	addi.b	#1,CursorCol
                            	   271: dcx14:
01:00003D2A 6100020C        	   272: 	bsr		SyncCursor
                            	   273: dcx7:
01:00003D2E 4CDF000C        	   274: 	movem.l	(a7)+,d2/d3
01:00003D32 4E75            	   275: 	rts
                            	   276: dcx6:
01:00003D34 0C010090        	   277: 	cmpi.b	#$90,d1			; cursor up ?
01:00003D38 6610            	   278: 	bne.s	dcx8
01:00003D3A 4A390000040C    	   279: 	cmpi.b	#0,CursorRow
01:00003D40 67EC            	   280: 	beq.s	dcx7
01:00003D42 53390000040C    	   281: 	subi.b	#1,CursorRow
01:00003D48 60E0            	   282: 	bra.s	dcx14
                            	   283: dcx8:
01:00003D4A 0C010093        	   284: 	cmpi.b	#$93,d1			; cursor left?
01:00003D4E 6610            	   285: 	bne.s	dcx9
01:00003D50 4A390000040D    	   286: 	cmpi.b	#0,CursorCol
01:00003D56 67D6            	   287: 	beq.s	dcx7
01:00003D58 53390000040D    	   288: 	subi.b	#1,CursorCol
01:00003D5E 60CA            	   289: 	bra.s	dcx14
                            	   290: dcx9:
01:00003D60 0C010092        	   291: 	cmpi.b	#$92,d1			; cursor down ?
01:00003D64 6618            	   292: 	bne.s	dcx10
01:00003D66 14390000040E    	   293: 	move.b	TextRows,d2
01:00003D6C 5302            	   294: 	sub.b	#1,d2
01:00003D6E B4390000040C    	   295: 	cmp.b	CursorRow,d2
01:00003D74 67B8            	   296: 	beq.s	dcx7
01:00003D76 52390000040C    	   297: 	addi.b	#1,CursorRow
01:00003D7C 60AC            	   298: 	bra.s	dcx14
                            	   299: dcx10:
01:00003D7E 0C010094        	   300: 	cmpi.b	#$94,d1			; cursor home ?
01:00003D82 6618            	   301: 	bne.s	dcx11
01:00003D84 4A390000040D    	   302: 	cmpi.b	#0,CursorCol
01:00003D8A 6708            	   303: 	beq.s	dcx12
01:00003D8C 42390000040D    	   304: 	clr.b	CursorCol
01:00003D92 6096            	   305: 	bra.s	dcx14
                            	   306: dcx12:
01:00003D94 42390000040C    	   307: 	clr.b	CursorRow
01:00003D9A 608E            	   308: 	bra.s	dcx14
                            	   309: dcx11:
01:00003D9C 48E7E080        	   310: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003DA0 0C010099        	   311: 	cmpi.b	#$99,d1			; delete ?
01:00003DA4 6764            	   312: 	beq.s		doDelete
01:00003DA6 0C010008        	   313: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003DAA 6750            	   314: 	beq.s   doBackspace
01:00003DAC 0C010018        	   315: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003DB0 67000094        	   316: 	beq			doCtrlX
01:00003DB4 0C01000A        	   317: 	cmpi.b	#10,d1		; linefeed ?
01:00003DB8 6730            	   318: 	beq.s		dclf
                            	   319: 
                            	   320: 	; regular char
01:00003DBA 6100FF04        	   321: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003DBE 2401            	   322: 	move.l	d1,d2					; d2 = char
01:00003DC0 6100FE8C        	   323: 	bsr			get_screen_color	; d0,d1 = color
01:00003DC4 8282            	   324: 	or.l		d2,d1					; d1 = char + color
01:00003DC6 E159            	   325: 	rol.w		#8,d1					; text controller expects little endian data
01:00003DC8 4841            	   326: 	swap		d1
01:00003DCA E159            	   327: 	rol.w		#8,d1
01:00003DCC 2081            	   328: 	move.l	d1,(a0)
01:00003DCE E158            	   329: 	rol.w		#8,d0					; swap bytes
01:00003DD0 4840            	   330: 	swap		d0						; swap halfs
01:00003DD2 E158            	   331: 	rol.w		#8,d0					; swap remaining bytes
01:00003DD4 21400004        	   332: 	move.l	d0,4(a0)
01:00003DD8 61000090        	   333: 	bsr			IncCursorPos
01:00003DDC 6100015A        	   334: 	bsr			SyncCursor
01:00003DE0 4CDF0107        	   335: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003DE4 4CDF000C        	   336: 	movem.l	(a7)+,d2/d3
01:00003DE8 4E75            	   337: 	rts
                            	   338: dclf:
01:00003DEA 6100009E        	   339: 	bsr			IncCursorRow
                            	   340: dcx16:
01:00003DEE 61000148        	   341: 	bsr			SyncCursor
                            	   342: dcx4:
01:00003DF2 4CDF0107        	   343: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003DF6 4CDF000C        	   344: 	movem.l	(a7)+,d2/d3
01:00003DFA 4E75            	   345: 	rts
                            	   346: 
                            	   347: 	;---------------------------
                            	   348: 	; CTRL-H: backspace
                            	   349: 	;---------------------------
                            	   350: doBackspace:
01:00003DFC 4A390000040D    	   351: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003E02 67EE            	   352: 	beq.s   dcx4						; nothing to do
01:00003E04 53390000040D    	   353: 	subi.b	#1,CursorCol		; decrement column
                            	   354: 
                            	   355: 	;---------------------------
                            	   356: 	; Delete key
                            	   357: 	;---------------------------
                            	   358: doDelete:
01:00003E0A 48E7C080        	   359: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003E0E 6100FEB0        	   360: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003E12 10390000040D    	   361: 	move.b	CursorCol,d0
                            	   362: .0001:
01:00003E18 20A80008        	   363: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003E1C 2168000C0004    	   364: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003E22 5088            	   365: 	lea			8(a0),a0
01:00003E24 5200            	   366: 	addi.b	#1,d0
01:00003E26 B0390000040F    	   367: 	cmp.b		TextCols,d0
01:00003E2C 65EA            	   368: 	blo.s		.0001
01:00003E2E 6100FE1E        	   369: 	bsr			get_screen_color
01:00003E32 323C0020        	   370: 	move.w	#' ',d1				; terminate line with a space
01:00003E36 E159            	   371: 	rol.w		#8,d1
01:00003E38 4841            	   372: 	swap		d1
01:00003E3A E159            	   373: 	rol.w		#8,d1
01:00003E3C 2141FFF8        	   374: 	move.l	d1,-8(a0)
01:00003E40 4CDF0103        	   375: 	movem.l	(a7)+,d0/d1/a0
01:00003E44 60A8            	   376: 	bra.s		dcx16				; finished
                            	   377: 
                            	   378: 	;---------------------------
                            	   379: 	; CTRL-X: erase line
                            	   380: 	;---------------------------
                            	   381: doCtrlX:
01:00003E46 42390000040D    	   382: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003E4C 10390000040F    	   383: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003E52 4880            	   384: 	ext.w		d0
01:00003E54 48C0            	   385: 	ext.l		d0
01:00003E56 123C0020        	   386: 	move.b	#' ',d1				; d1 = space char
                            	   387: .0001:
                            	   388: 	; DisplayChar is called recursively here
                            	   389: 	; It's safe to do because we know it won't recurse again due to the
                            	   390: 	; fact we know the character being displayed is a space char
01:00003E5A 6100FE98        	   391: 	bsr		DisplayChar			
01:00003E5E 5340            	   392: 	subq	#1,d0
01:00003E60 66F8            	   393: 	bne.s	.0001
01:00003E62 42390000040D    	   394: 	clr.b	CursorCol			; now really go back to start of line
01:00003E68 6084            	   395: 	bra.s	dcx16				; we're done
                            	   396: 
                            	   397: ;------------------------------------------------------------------------------
                            	   398: ; Increment the cursor position, scroll the screen if needed.
                            	   399: ;------------------------------------------------------------------------------
                            	   400: ;
                            	   401: IncCursorPos:
01:00003E6A 527900000410    	   402: 	addi.w	#1,TextCurpos
01:00003E70 52390000040D    	   403: 	addi.b	#1,CursorCol
01:00003E76 10390000040F    	   404: 	move.b	TextCols,d0
01:00003E7C B0390000040D    	   405: 	cmp.b		CursorCol,d0
01:00003E82 6438            	   406: 	bhs.s		icc1
01:00003E84 42390000040D    	   407: 	clr.b		CursorCol
                            	   408: IncCursorRow:
01:00003E8A 52390000040C    	   409: 	addi.b	#1,CursorRow
01:00003E90 10390000040E    	   410: 	move.b	TextRows,d0
01:00003E96 B0390000040C    	   411: 	cmp.b		CursorRow,d0
01:00003E9C 621E            	   412: 	bhi.s		icc1
01:00003E9E 10390000040E    	   413: 	move.b	TextRows,d0
01:00003EA4 13C00000040C    	   414: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003EAA 53390000040C    	   415: 	subi.b	#1,CursorRow
01:00003EB0 4880            	   416: 	ext.w		d0
01:00003EB2 D040            	   417: 	asl.w		#1,d0
01:00003EB4 917900000410    	   418: 	sub.w		d0,TextCurpos
01:00003EBA 6102            	   419: 	bsr			ScrollUp
                            	   420: icc1:
01:00003EBC 4E75            	   421: 	rts
                            	   422: 
                            	   423: ;------------------------------------------------------------------------------
                            	   424: ; Scroll screen up.
                            	   425: ;------------------------------------------------------------------------------
                            	   426: 
                            	   427: ScrollUp:
01:00003EBE 48E7C084        	   428: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
01:00003EC2 2A7900000414    	   429: 	move.l	TextScr,a5					; a5 = pointer to text screen
                            	   430: .0003:								
01:00003EC8 10390000040F    	   431: 	move.b	TextCols,d0					; d0 = columns
01:00003ECE 12390000040E    	   432: 	move.b	TextRows,d1					; d1 = rows
01:00003ED4 4880            	   433: 	ext.w		d0									; make cols into a word value
01:00003ED6 4881            	   434: 	ext.w		d1									; make rows into a word value
01:00003ED8 E740            	   435: 	asl.w		#3,d0								; make into cell index
01:00003EDA 41F50000        	   436: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
01:00003EDE E648            	   437: 	lsr.w		#3,d0								; get back d0
01:00003EE0 C0C1            	   438: 	mulu		d1,d0								; d0 = count of characters to move
                            	   439: .0001:
01:00003EE2 2AD8            	   440: 	move.l	(a0)+,(a5)+					; each char is 64 bits
01:00003EE4 2AD8            	   441: 	move.l	(a0)+,(a5)+
01:00003EE6 51C8FFFA        	   442: 	dbra		d0,.0001
01:00003EEA 4CDF2103        	   443: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   444: 	; Fall through into blanking out last line
                            	   445: 
                            	   446: ;------------------------------------------------------------------------------
                            	   447: ; Blank out the last line on the screen.
                            	   448: ;------------------------------------------------------------------------------
                            	   449: 
                            	   450: BlankLastLine:
01:00003EEE 48E7E004        	   451: 	movem.l	d0/d1/d2/a5,-(a7)
01:00003EF2 2A7900000414    	   452: 	move.l	TextScr,a5
01:00003EF8 4BED07C0        	   453: 	lea			31*64(a5),a5
01:00003EFC 14390000040F    	   454: 	move.b	TextCols,d2
01:00003F02 4882            	   455: 	ext.w		d2
01:00003F04 6100FD48        	   456: 	bsr			get_screen_color
01:00003F08 00410020        	   457: 	ori.w		#32,d1		
                            	   458: .0001:
01:00003F0C 2AC1            	   459: 	move.l	d1,(a5)+
01:00003F0E 2AC0            	   460: 	move.l	d0,(a5)+
01:00003F10 51CAFFFA        	   461: 	dbra		d2,.0001
01:00003F14 4CDF2007        	   462: 	movem.l	(a7)+,d0/d1/d2/a5
01:00003F18 4E75            	   463: 	rts
                            	   464: 
                            	   465: ;------------------------------------------------------------------------------
                            	   466: ; Display a string on the screen.
                            	   467: ;------------------------------------------------------------------------------
                            	   468: ;
                            	   469: DisplayString:
01:00003F1A 48E7C040        	   470: 	movem.l	d0/d1/a1,-(a7)
                            	   471: dspj1:
01:00003F1E 7200            	   472: 	clr.l		d1				; clear upper bits of d1
01:00003F20 1219            	   473: 	move.b	(a1)+,d1		; move string char into d1
01:00003F22 4A01            	   474: 	cmpi.b	#0,d1			; is it end of string ?
01:00003F24 6706            	   475: 	beq.s		dsret			
01:00003F26 6100FDCC        	   476: 	bsr			DisplayChar		; display character
01:00003F2A 60F2            	   477: 	bra.s		dspj1			; go back for next character
                            	   478: dsret:
01:00003F2C 4CDF0203        	   479: 	movem.l	(a7)+,d0/d1/a1
01:00003F30 4E75            	   480: 	rts
                            	   481: 
                            	   482: ;------------------------------------------------------------------------------
                            	   483: ; Display a string on the screen followed by carriage return / linefeed.
                            	   484: ;------------------------------------------------------------------------------
                            	   485: ;
                            	   486: DisplayStringCRLF:
01:00003F32 61E6            	   487: 		bsr		DisplayString
01:00003F34 6000FD78        	   488: 		bra		CRLF
                            	   489: 
                            	   490: ;------------------------------------------------------------------------------
                            	   491: ; SyncCursor:
                            	   492: ;
                            	   493: ; Sync the hardware cursor's position to the text cursor position.
                            	   494: ;
                            	   495: ; Parameters:
                            	   496: ;		<none>
                            	   497: ; Returns:
                            	   498: ;		<none>
                            	   499: ; Registers Affected:
                            	   500: ;		<none>
                            	   501: ;------------------------------------------------------------------------------
                            	   502: 
                            	   503: SyncCursor:
01:00003F38 48E74002        	   504: 	movem.l	d1/a6,-(a7)
01:00003F3C 2C7CFD01FF00    	   505: 	move.l	#TEXTREG,a6
01:00003F42 323900000410    	   506: 	move.w	TextPos,d1
01:00003F48 E159            	   507: 	rol.w		#8,d1						; swap byte order
01:00003F4A 3D410024        	   508: 	move.w	d1,$24(a6)
01:00003F4E 4CDF4002        	   509: 	movem.l	(a7)+,d1/a6
01:00003F52 4E75            	   510: 	rts
                            	   511: 
                            	   512: ;==============================================================================
                            	   513: ; Keyboard stuff
                            	   514: ;
                            	   515: ; KeyState2_
                            	   516: ; 876543210
                            	   517: ; ||||||||+ = shift
                            	   518: ; |||||||+- = alt
                            	   519: ; ||||||+-- = control
                            	   520: ; |||||+--- = numlock
                            	   521: ; ||||+---- = capslock
                            	   522: ; |||+----- = scrolllock
                            	   523: ; ||+------ =
                            	   524: ; |+------- = 
                            	   525: ; +-------- = extended
                            	   526: ;
                            	   527: ;==============================================================================
                            	   528: 
                            	   529: _KeybdInit:
01:00003F54 42390000041B    	   530: 	clr.b	_KeyState1
01:00003F5A 42390000041C    	   531: 	clr.b	_KeyState2
01:00003F60 4E75            	   532: 	rts
                            	   533: 
                            	   534: _KeybdGetStatus:
01:00003F62 1239FD0FFE01    	   535: 	move.b	KEYBD+1,d1
01:00003F68 4E75            	   536: 	rts
                            	   537: 
                            	   538: ; Get the scancode from the keyboard port
                            	   539: ;
                            	   540: _KeybdGetScancode:
01:00003F6A 7200            	   541: 	moveq	#0,d1
01:00003F6C 1239FD0FFE00    	   542: 	move.b	KEYBD,d1				; get the scan code
01:00003F72 13FC0000FD0FFE01	   543: 	move.b	#0,KEYBD+1				; clear receive register
01:00003F7A 4E75            	   544: 	rts
                            	   545: 
                            	   546: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   547: ; keyboard in order to wait for a response.
                            	   548: ;
                            	   549: KeybdRecvByte:
01:00003F7C 2F03            	   550: 	move.l	d3,-(a7)
01:00003F7E 363C0064        	   551: 	move.w	#100,d3		; wait up to 1s
                            	   552: .0003:
01:00003F82 61DE            	   553: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:00003F84 4A01            	   554: 	tst.b	d1
01:00003F86 6B0E            	   555: 	bmi		.0004		; is input buffer full ? yes, branch
01:00003F88 610002AA        	   556: 	bsr		Wait10ms		; wait a bit
01:00003F8C 51CBFFF4        	   557: 	dbra	d3,.0003	; go back and try again
01:00003F90 261F            	   558: 	move.l	(a7)+,d3
01:00003F92 72FF            	   559: 	moveq	#-1,d1			; return -1
01:00003F94 4E75            	   560: 	rts
                            	   561: .0004:
01:00003F96 61D2            	   562: 	bsr		_KeybdGetScancode
01:00003F98 261F            	   563: 	move.l	(a7)+,d3
01:00003F9A 4E75            	   564: 	rts
                            	   565: 
                            	   566: 
                            	   567: ; Wait until the keyboard transmit is complete
                            	   568: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	   569: ;
                            	   570: KeybdWaitTx:
01:00003F9C 48E73000        	   571: 	movem.l	d2/d3,-(a7)
01:00003FA0 7664            	   572: 	moveq	#100,d3		; wait a max of 1s
                            	   573: .0001:
01:00003FA2 61BE            	   574: 	bsr		_KeybdGetStatus
01:00003FA4 08010006        	   575: 	btst	#6,d1		; check for transmit complete bit
01:00003FA8 6610            	   576: 	bne	    .0002		; branch if bit set
01:00003FAA 61000288        	   577: 	bsr		Wait10ms		; delay a little bit
01:00003FAE 51CBFFF2        	   578: 	dbra	d3,.0001	; go back and try again
01:00003FB2 4CDF000C        	   579: 	movem.l	(a7)+,d2/d3
01:00003FB6 72FF            	   580: 	moveq	#-1,d1		; return -1
01:00003FB8 4E75            	   581: 	rts
                            	   582: .0002:
01:00003FBA 4CDF000C        	   583: 	movem.l	(a7)+,d2/d3
01:00003FBE 7200            	   584: 	moveq	#0,d1		; return 0
01:00003FC0 4E75            	   585: 	rts
                            	   586: 
                            	   587: 
                            	   588: ;------------------------------------------------------------------------------
                            	   589: ; get key pending status into d1.b
                            	   590: ;------------------------------------------------------------------------------
                            	   591: ;
                            	   592: CheckForKey:
01:00003FC2 1239FD0FFE01    	   593: 	move.b	KEYBD+1,d1
01:00003FC8 6A06            	   594: 	bpl.s		cfk1
01:00003FCA 123C0001        	   595: 	move.b	#1,d1
01:00003FCE 4E75            	   596: 	rts
                            	   597: cfk1:
01:00003FD0 4201            	   598: 	clr.b		d1
01:00003FD2 4E75            	   599: 	rts
                            	   600: 
                            	   601: ;------------------------------------------------------------------------------
                            	   602: ;------------------------------------------------------------------------------
                            	   603: 
                            	   604: GetKey:
01:00003FD4 6120            	   605: 	bsr			KeybdGetCharWait
01:00003FD6 4A3900000418    	   606: 	cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
01:00003FDC 670E            	   607: 	beq.s		gk1
01:00003FDE 0C01000D        	   608: 	cmpi.b	#CR,d1				; convert CR keystroke into CRLF
01:00003FE2 6700FCCA        	   609: 	beq			CRLF
01:00003FE6 4E75            	   610: 	rts
01:00003FE8 6000FD0A        	   611: 	bra			DisplayChar
                            	   612: gk1:
                            	   613: ;	move.l	d1,d7
                            	   614: ;	bsr			DisplayByte
                            	   615: ;	moveq		#32,d1
                            	   616: ;	bsr			DisplayChar
                            	   617: ;	move.l	d7,d1
01:00003FEC 4E75            	   618: 	rts
                            	   619: 
                            	   620: 
                            	   621: ;------------------------------------------------------------------------------
                            	   622: ;------------------------------------------------------------------------------
                            	   623: 
                            	   624: KeybdGetCharNoWait:
01:00003FEE 423900000419    	   625: 	clr.b	KeybdWaitFlag
01:00003FF4 6008            	   626: 	bra		KeybdGetChar
                            	   627: 
                            	   628: KeybdGetCharWait:
01:00003FF6 13FC00FF00000419	   629: 	move.b	#-1,KeybdWaitFlag
                            	   630: 
                            	   631: KeybdGetChar:
01:00003FFE 48E73080        	   632: 	movem.l	d2/d3/a0,-(a7)
                            	   633: .0003:
01:00004002 6100FF5E        	   634: 	bsr		_KeybdGetStatus			; check keyboard status for key available
01:00004006 6B10            	   635: 	bmi		.0006					; yes, go process
01:00004008 4A3900000419    	   636: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:0000400E 6BF2            	   637: 	bmi		.0003					; yes, branch back
01:00004010 4CDF010C        	   638: 	movem.l	(a7)+,d2/d3/a0
01:00004014 72FF            	   639: 	moveq	#-1,d1					; flag no char available
01:00004016 4E75            	   640: 	rts
                            	   641: .0006:
01:00004018 6100FF50        	   642: 	bsr		_KeybdGetScancode
                            	   643: .0001:
01:0000401C 33FC0001FD0FFF00	   644: 	move.w	#1,leds
01:00004024 B23C00F0        	   645: 	cmp.b	#SC_KEYUP,d1
01:00004028 670000C2        	   646: 	beq		.doKeyup
01:0000402C B23C00E0        	   647: 	cmp.b	#SC_EXTEND,d1
01:00004030 670000C6        	   648: 	beq		.doExtend
01:00004034 B23C0014        	   649: 	cmp.b	#SC_CTRL,d1
01:00004038 670000CA        	   650: 	beq		.doCtrl
01:0000403C B23C0012        	   651: 	cmp.b	#SC_LSHIFT,d1
01:00004040 6700012C        	   652: 	beq		.doShift
01:00004044 B23C0059        	   653: 	cmp.b	#SC_RSHIFT,d1
01:00004048 67000124        	   654: 	beq		.doShift
01:0000404C B23C0077        	   655: 	cmp.b	#SC_NUMLOCK,d1
01:00004050 67000144        	   656: 	beq		.doNumLock
01:00004054 B23C0058        	   657: 	cmp.b	#SC_CAPSLOCK,d1
01:00004058 6700014A        	   658: 	beq		.doCapsLock
01:0000405C B23C007E        	   659: 	cmp.b	#SC_SCROLLLOCK,d1
01:00004060 67000150        	   660: 	beq		.doScrollLock
01:00004064 B23C0011        	   661: 	cmp.b   #SC_ALT,d1
01:00004068 670000C2        	   662: 	beq     .doAlt
01:0000406C 14390000041B    	   663: 	move.b	_KeyState1,d2			; check key up/down
01:00004072 13FC00000000041B	   664: 	move.b	#0,_KeyState1			; clear keyup status
01:0000407A 4A02            	   665: 	tst.b	d2
01:0000407C 6684            	   666: 	bne	    .0003					; ignore key up
01:0000407E B23C000D        	   667: 	cmp.b   #SC_TAB,d1
01:00004082 670000D0        	   668: 	beq     .doTab
                            	   669: .0013:
01:00004086 14390000041C    	   670: 	move.b	_KeyState2,d2
01:0000408C 6A1C            	   671: 	bpl		.0010					; is it extended code ?
01:0000408E C43C007F        	   672: 	and.b	#$7F,d2					; clear extended bit
01:00004092 13C20000041C    	   673: 	move.b	d2,_KeyState2
01:00004098 13FC00000000041B	   674: 	move.b	#0,_KeyState1			; clear keyup
01:000040A0 41FA0422        	   675: 	lea		_keybdExtendedCodes,a0
01:000040A4 12301000        	   676: 	move.b	(a0,d1.w),d1
01:000040A8 6034            	   677: 	bra		.0008
                            	   678: .0010:
01:000040AA 08020002        	   679: 	btst	#2,d2					; is it CTRL code ?
01:000040AE 670E            	   680: 	beq		.0009
01:000040B0 C27C007F        	   681: 	and.w	#$7F,d1
01:000040B4 41FA038E        	   682: 	lea		_keybdControlCodes,a0
01:000040B8 12301000        	   683: 	move.b	(a0,d1.w),d1
01:000040BC 6020            	   684: 	bra		.0008
                            	   685: .0009:
01:000040BE 08020000        	   686: 	btst	#0,d2					; is it shift down ?
01:000040C2 670A            	   687: 	beq  	.0007
01:000040C4 41FA027E        	   688: 	lea		_shiftedScanCodes,a0
01:000040C8 12301000        	   689: 	move.b	(a0,d1.w),d1
01:000040CC 6010            	   690: 	bra		.0008
                            	   691: .0007:
01:000040CE 41FA0174        	   692: 	lea		_unshiftedScanCodes,a0
01:000040D2 12301000        	   693: 	move.b	(a0,d1.w),d1
01:000040D6 33FC0202FD0FFF00	   694: 	move.w	#$0202,leds
                            	   695: .0008:
01:000040DE 33FC0303FD0FFF00	   696: 	move.w	#$0303,leds
01:000040E6 4CDF010C        	   697: 	movem.l	(a7)+,d2/d3/a0
01:000040EA 4E75            	   698: 	rts
                            	   699: .doKeyup:
01:000040EC 13FC00FF0000041B	   700: 	move.b	#-1,_KeyState1
01:000040F4 6000FF0C        	   701: 	bra		.0003
                            	   702: .doExtend:
01:000040F8 003900800000041C	   703: 	or.b	#$80,_KeyState2
01:00004100 6000FF00        	   704: 	bra		.0003
                            	   705: .doCtrl:
01:00004104 12390000041B    	   706: 	move.b	_KeyState1,d1
01:0000410A 42390000041B    	   707: 	clr.b	_KeyState1
01:00004110 4A01            	   708: 	tst.b	d1
01:00004112 6A0C            	   709: 	bpl.s	.0004
01:00004114 08B900020000041C	   710: 	bclr	#2,_KeyState2
01:0000411C 6000FEE4        	   711: 	bra		.0003
                            	   712: .0004:
01:00004120 08F900020000041C	   713: 	bset	#2,_KeyState2
01:00004128 6000FED8        	   714: 	bra		.0003
                            	   715: .doAlt:
01:0000412C 12390000041B    	   716: 	move.b	_KeyState1,d1
01:00004132 42390000041B    	   717: 	clr.b	_KeyState1
01:00004138 4A01            	   718: 	tst.b	d1
01:0000413A 6A0C            	   719: 	bpl		.0011
01:0000413C 08B900010000041C	   720: 	bclr	#1,_KeyState2
01:00004144 6000FEBC        	   721: 	bra		.0003
                            	   722: .0011:
01:00004148 08F900010000041C	   723: 	bset	#1,_KeyState2
01:00004150 6000FEB0        	   724: 	bra		.0003
                            	   725: .doTab:
01:00004154 2F01            	   726: 	move.l	d1,-(a7)
01:00004156 12390000041C    	   727:   move.b  _KeyState2,d1
01:0000415C 08010000        	   728:   btst	#0,d1                 ; is ALT down ?
01:00004160 6706            	   729:   beq     .0012
                            	   730: ;    	inc     _iof_switch
01:00004162 221F            	   731:   move.l	(a7)+,d1
01:00004164 6000FE9C        	   732:   bra     .0003
                            	   733: .0012:
01:00004168 221F            	   734:   move.l	(a7)+,d1
01:0000416A 6000FF1A        	   735:   bra     .0013
                            	   736: .doShift:
01:0000416E 12390000041B    	   737: 	move.b	_KeyState1,d1
01:00004174 42390000041B    	   738: 	clr.b	_KeyState1
01:0000417A 4A01            	   739: 	tst.b	d1
01:0000417C 6A0C            	   740: 	bpl.s	.0005
01:0000417E 08B900000000041C	   741: 	bclr	#0,_KeyState2
01:00004186 6000FE7A        	   742: 	bra		.0003
                            	   743: .0005:
01:0000418A 08F900000000041C	   744: 	bset	#0,_KeyState2
01:00004192 6000FE6E        	   745: 	bra		.0003
                            	   746: .doNumLock:
01:00004196 087900040000041C	   747: 	bchg	#4,_KeyState2
01:0000419E 6120            	   748: 	bsr		KeybdSetLEDStatus
01:000041A0 6000FE60        	   749: 	bra		.0003
                            	   750: .doCapsLock:
01:000041A4 087900050000041C	   751: 	bchg	#5,_KeyState2
01:000041AC 6112            	   752: 	bsr		KeybdSetLEDStatus
01:000041AE 6000FE52        	   753: 	bra		.0003
                            	   754: .doScrollLock:
01:000041B2 087900060000041C	   755: 	bchg	#6,_KeyState2
01:000041BA 6104            	   756: 	bsr		KeybdSetLEDStatus
01:000041BC 6000FE44        	   757: 	bra		.0003
                            	   758: 
                            	   759: KeybdSetLEDStatus:
01:000041C0 48E73000        	   760: 	movem.l	d2/d3,-(a7)
01:000041C4 42390000041A    	   761: 	clr.b	KeybdLEDs
01:000041CA 083900040000041C	   762: 	btst	#4,_KeyState2
01:000041D2 6708            	   763: 	beq.s	.0002
01:000041D4 13FC00020000041A	   764: 	move.b	#2,KeybdLEDs
                            	   765: .0002:
01:000041DC 083900050000041C	   766: 	btst	#5,_KeyState2
01:000041E4 6708            	   767: 	beq.s	.0003
01:000041E6 08F900020000041A	   768: 	bset	#2,KeybdLEDs
                            	   769: .0003:
01:000041EE 083900060000041C	   770: 	btst	#6,_KeyState2
01:000041F6 6708            	   771: 	beq.s	.0004
01:000041F8 08F900000000041A	   772: 	bset	#0,KeybdLEDs
                            	   773: .0004:
01:00004200 123C00ED        	   774: 	move.b	#$ED,d1
01:00004204 6126            	   775: 	bsr		KeybdSendByte
01:00004206 6100FD94        	   776: 	bsr		KeybdWaitTx
01:0000420A 6100FD70        	   777: 	bsr		KeybdRecvByte
01:0000420E 4A01            	   778: 	tst.b	d1
01:00004210 6B14            	   779: 	bmi		.0001
01:00004212 B27C00FA        	   780: 	cmp		#$FA,d1
01:00004216 12390000041A    	   781: 	move.b	KeybdLEDs,d1
01:0000421C 610E            	   782: 	bsr		KeybdSendByte
01:0000421E 6100FD7C        	   783: 	bsr		KeybdWaitTx
01:00004222 6100FD58        	   784: 	bsr		KeybdRecvByte
                            	   785: .0001:
01:00004226 4CDF000C        	   786: 	movem.l	(a7)+,d2/d3
01:0000422A 4E75            	   787: 	rts
                            	   788: 
                            	   789: KeybdSendByte:
01:0000422C 13C1FD0FFE00    	   790: 	move.b	d1,KEYBD
01:00004232 4E75            	   791: 	rts
                            	   792: 	
                            	   793: Wait10ms:
01:00004234 2F03            	   794: 	move.l	d3,-(a7)
01:00004236 263C000003E8    	   795: 	move.l	#1000,d3
                            	   796: .0001:
01:0000423C 51CBFFFE        	   797: 	dbra	d3,.0001
01:00004240 261F            	   798: 	move.l	(a7)+,d3
01:00004242 4E75            	   799: 	rts
                            	   800: 
                            	   801: 
                            	   802: ;--------------------------------------------------------------------------
                            	   803: ; PS2 scan codes to ascii conversion tables.
                            	   804: ;--------------------------------------------------------------------------
                            	   805: ;
                            	   806: _unshiftedScanCodes:
01:00004244 2E              	   807: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:00004245 A9
01:00004246 2E
01:00004247 A5
01:00004248 A3
01:00004249 A1
01:0000424A A2
01:0000424B AC
01:0000424C 2E              	   808: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:0000424D AA
01:0000424E A8
01:0000424F A6
01:00004250 A4
01:00004251 09
01:00004252 60
01:00004253 2E
01:00004254 2E              	   809: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:00004255 2E
01:00004256 2E
01:00004257 2E
01:00004258 2E
01:00004259 71
01:0000425A 31
01:0000425B 2E
01:0000425C 2E              	   810: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:0000425D 2E
01:0000425E 7A
01:0000425F 73
01:00004260 61
01:00004261 77
01:00004262 32
01:00004263 2E
01:00004264 2E              	   811: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:00004265 63
01:00004266 78
01:00004267 64
01:00004268 65
01:00004269 34
01:0000426A 33
01:0000426B 2E
01:0000426C 2E              	   812: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:0000426D 20
01:0000426E 76
01:0000426F 66
01:00004270 74
01:00004271 72
01:00004272 35
01:00004273 2E
01:00004274 2E              	   813: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:00004275 6E
01:00004276 62
01:00004277 68
01:00004278 67
01:00004279 79
01:0000427A 36
01:0000427B 2E
01:0000427C 2E              	   814: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:0000427D 2E
01:0000427E 6D
01:0000427F 6A
01:00004280 75
01:00004281 37
01:00004282 38
01:00004283 2E
01:00004284 2E              	   815: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:00004285 2C
01:00004286 6B
01:00004287 69
01:00004288 6F
01:00004289 30
01:0000428A 39
01:0000428B 2E
01:0000428C 2E              	   816: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:0000428D 2E
01:0000428E 2F
01:0000428F 6C
01:00004290 3B
01:00004291 70
01:00004292 2D
01:00004293 2E
01:00004294 2E              	   817: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:00004295 2E
01:00004296 27
01:00004297 2E
01:00004298 5B
01:00004299 3D
01:0000429A 2E
01:0000429B 2E
01:0000429C AD              	   818: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:0000429D 2E
01:0000429E 0D
01:0000429F 5D
01:000042A0 2E
01:000042A1 5C
01:000042A2 2E
01:000042A3 2E
01:000042A4 2E              	   819: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:000042A5 2E
01:000042A6 2E
01:000042A7 2E
01:000042A8 2E
01:000042A9 2E
01:000042AA 08
01:000042AB 2E
01:000042AC 2E              	   820: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:000042AD 95
01:000042AE 2E
01:000042AF 93
01:000042B0 94
01:000042B1 2E
01:000042B2 2E
01:000042B3 2E
01:000042B4 98              	   821: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:000042B5 7F
01:000042B6 92
01:000042B7 2E
01:000042B8 91
01:000042B9 90
01:000042BA 1B
01:000042BB AF
01:000042BC AB              	   822: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:000042BD 2E
01:000042BE 97
01:000042BF 2E
01:000042C0 2E
01:000042C1 96
01:000042C2 AE
01:000042C3 2E
                            	   823: 
01:000042C4 2E              	   824: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:000042C5 2E
01:000042C6 2E
01:000042C7 A7
01:000042C8 2E
01:000042C9 2E
01:000042CA 2E
01:000042CB 2E
01:000042CC 2E              	   825: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042CD 2E
01:000042CE 2E
01:000042CF 2E
01:000042D0 2E
01:000042D1 2E
01:000042D2 2E
01:000042D3 2E
01:000042D4 2E              	   826: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042D5 2E
01:000042D6 2E
01:000042D7 2E
01:000042D8 2E
01:000042D9 2E
01:000042DA 2E
01:000042DB 2E
01:000042DC 2E              	   827: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042DD 2E
01:000042DE 2E
01:000042DF 2E
01:000042E0 2E
01:000042E1 2E
01:000042E2 2E
01:000042E3 2E
01:000042E4 2E              	   828: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042E5 2E
01:000042E6 2E
01:000042E7 2E
01:000042E8 2E
01:000042E9 2E
01:000042EA 2E
01:000042EB 2E
01:000042EC 2E              	   829: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042ED 2E
01:000042EE 2E
01:000042EF 2E
01:000042F0 2E
01:000042F1 2E
01:000042F2 2E
01:000042F3 2E
01:000042F4 2E              	   830: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042F5 2E
01:000042F6 2E
01:000042F7 2E
01:000042F8 2E
01:000042F9 2E
01:000042FA 2E
01:000042FB 2E
01:000042FC 2E              	   831: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000042FD 2E
01:000042FE 2E
01:000042FF 2E
01:00004300 2E
01:00004301 2E
01:00004302 2E
01:00004303 2E
01:00004304 2E              	   832: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004305 2E
01:00004306 2E
01:00004307 2E
01:00004308 2E
01:00004309 2E
01:0000430A 2E
01:0000430B 2E
01:0000430C 2E              	   833: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000430D 2E
01:0000430E 2E
01:0000430F 2E
01:00004310 2E
01:00004311 2E
01:00004312 2E
01:00004313 2E
01:00004314 2E              	   834: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004315 2E
01:00004316 2E
01:00004317 2E
01:00004318 2E
01:00004319 2E
01:0000431A 2E
01:0000431B 2E
01:0000431C 2E              	   835: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000431D 2E
01:0000431E 2E
01:0000431F 2E
01:00004320 2E
01:00004321 2E
01:00004322 2E
01:00004323 2E
01:00004324 2E              	   836: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004325 2E
01:00004326 2E
01:00004327 2E
01:00004328 2E
01:00004329 2E
01:0000432A 2E
01:0000432B 2E
01:0000432C 2E              	   837: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000432D 2E
01:0000432E 2E
01:0000432F 2E
01:00004330 2E
01:00004331 2E
01:00004332 2E
01:00004333 2E
01:00004334 2E              	   838: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004335 2E
01:00004336 2E
01:00004337 2E
01:00004338 2E
01:00004339 2E
01:0000433A 2E
01:0000433B 2E
01:0000433C 2E              	   839: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:0000433D 2E
01:0000433E FA
01:0000433F 2E
01:00004340 2E
01:00004341 2E
01:00004342 2E
01:00004343 2E
                            	   840: 
                            	   841: _shiftedScanCodes:
01:00004344 2E              	   842: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004345 2E
01:00004346 2E
01:00004347 2E
01:00004348 2E
01:00004349 2E
01:0000434A 2E
01:0000434B 2E
01:0000434C 2E              	   843: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:0000434D 2E
01:0000434E 2E
01:0000434F 2E
01:00004350 2E
01:00004351 09
01:00004352 7E
01:00004353 2E
01:00004354 2E              	   844: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:00004355 2E
01:00004356 2E
01:00004357 2E
01:00004358 2E
01:00004359 51
01:0000435A 21
01:0000435B 2E
01:0000435C 2E              	   845: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:0000435D 2E
01:0000435E 5A
01:0000435F 53
01:00004360 41
01:00004361 57
01:00004362 40
01:00004363 2E
01:00004364 2E              	   846: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:00004365 43
01:00004366 58
01:00004367 44
01:00004368 45
01:00004369 24
01:0000436A 23
01:0000436B 2E
01:0000436C 2E              	   847: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:0000436D 20
01:0000436E 56
01:0000436F 46
01:00004370 54
01:00004371 52
01:00004372 25
01:00004373 2E
01:00004374 2E              	   848: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:00004375 4E
01:00004376 42
01:00004377 48
01:00004378 47
01:00004379 59
01:0000437A 5E
01:0000437B 2E
01:0000437C 2E              	   849: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:0000437D 2E
01:0000437E 4D
01:0000437F 4A
01:00004380 55
01:00004381 26
01:00004382 2A
01:00004383 2E
01:00004384 2E              	   850: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:00004385 3C
01:00004386 4B
01:00004387 49
01:00004388 4F
01:00004389 29
01:0000438A 28
01:0000438B 2E
01:0000438C 2E              	   851: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:0000438D 3E
01:0000438E 3F
01:0000438F 4C
01:00004390 3A
01:00004391 50
01:00004392 5F
01:00004393 2E
01:00004394 2E              	   852: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004395 2E
01:00004396 22
01:00004397 2E
01:00004398 7B
01:00004399 2B
01:0000439A 2E
01:0000439B 2E
01:0000439C 2E              	   853: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:0000439D 2E
01:0000439E 0D
01:0000439F 7D
01:000043A0 2E
01:000043A1 7C
01:000043A2 2E
01:000043A3 2E
01:000043A4 2E              	   854: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:000043A5 2E
01:000043A6 2E
01:000043A7 2E
01:000043A8 2E
01:000043A9 2E
01:000043AA 08
01:000043AB 2E
01:000043AC 2E              	   855: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043AD 2E
01:000043AE 2E
01:000043AF 2E
01:000043B0 2E
01:000043B1 2E
01:000043B2 2E
01:000043B3 2E
01:000043B4 2E              	   856: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:000043B5 7F
01:000043B6 2E
01:000043B7 2E
01:000043B8 2E
01:000043B9 2E
01:000043BA 1B
01:000043BB 2E
01:000043BC 2E              	   857: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043BD 2E
01:000043BE 2E
01:000043BF 2E
01:000043C0 2E
01:000043C1 2E
01:000043C2 2E
01:000043C3 2E
                            	   858: 
01:000043C4 2E              	   859: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043C5 2E
01:000043C6 2E
01:000043C7 2E
01:000043C8 2E
01:000043C9 2E
01:000043CA 2E
01:000043CB 2E
01:000043CC 2E              	   860: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043CD 2E
01:000043CE 2E
01:000043CF 2E
01:000043D0 2E
01:000043D1 2E
01:000043D2 2E
01:000043D3 2E
01:000043D4 2E              	   861: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043D5 2E
01:000043D6 2E
01:000043D7 2E
01:000043D8 2E
01:000043D9 2E
01:000043DA 2E
01:000043DB 2E
01:000043DC 2E              	   862: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043DD 2E
01:000043DE 2E
01:000043DF 2E
01:000043E0 2E
01:000043E1 2E
01:000043E2 2E
01:000043E3 2E
01:000043E4 2E              	   863: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043E5 2E
01:000043E6 2E
01:000043E7 2E
01:000043E8 2E
01:000043E9 2E
01:000043EA 2E
01:000043EB 2E
01:000043EC 2E              	   864: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043ED 2E
01:000043EE 2E
01:000043EF 2E
01:000043F0 2E
01:000043F1 2E
01:000043F2 2E
01:000043F3 2E
01:000043F4 2E              	   865: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043F5 2E
01:000043F6 2E
01:000043F7 2E
01:000043F8 2E
01:000043F9 2E
01:000043FA 2E
01:000043FB 2E
01:000043FC 2E              	   866: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000043FD 2E
01:000043FE 2E
01:000043FF 2E
01:00004400 2E
01:00004401 2E
01:00004402 2E
01:00004403 2E
01:00004404 2E              	   867: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004405 2E
01:00004406 2E
01:00004407 2E
01:00004408 2E
01:00004409 2E
01:0000440A 2E
01:0000440B 2E
01:0000440C 2E              	   868: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000440D 2E
01:0000440E 2E
01:0000440F 2E
01:00004410 2E
01:00004411 2E
01:00004412 2E
01:00004413 2E
01:00004414 2E              	   869: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004415 2E
01:00004416 2E
01:00004417 2E
01:00004418 2E
01:00004419 2E
01:0000441A 2E
01:0000441B 2E
01:0000441C 2E              	   870: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000441D 2E
01:0000441E 2E
01:0000441F 2E
01:00004420 2E
01:00004421 2E
01:00004422 2E
01:00004423 2E
01:00004424 2E              	   871: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004425 2E
01:00004426 2E
01:00004427 2E
01:00004428 2E
01:00004429 2E
01:0000442A 2E
01:0000442B 2E
01:0000442C 2E              	   872: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000442D 2E
01:0000442E 2E
01:0000442F 2E
01:00004430 2E
01:00004431 2E
01:00004432 2E
01:00004433 2E
01:00004434 2E              	   873: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004435 2E
01:00004436 2E
01:00004437 2E
01:00004438 2E
01:00004439 2E
01:0000443A 2E
01:0000443B 2E
01:0000443C 2E              	   874: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000443D 2E
01:0000443E 2E
01:0000443F 2E
01:00004440 2E
01:00004441 2E
01:00004442 2E
01:00004443 2E
                            	   875: 
                            	   876: ; control
                            	   877: _keybdControlCodes:
01:00004444 2E              	   878: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004445 2E
01:00004446 2E
01:00004447 2E
01:00004448 2E
01:00004449 2E
01:0000444A 2E
01:0000444B 2E
01:0000444C 2E              	   879: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:0000444D 2E
01:0000444E 2E
01:0000444F 2E
01:00004450 2E
01:00004451 09
01:00004452 7E
01:00004453 2E
01:00004454 2E              	   880: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:00004455 2E
01:00004456 2E
01:00004457 2E
01:00004458 2E
01:00004459 11
01:0000445A 21
01:0000445B 2E
01:0000445C 2E              	   881: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:0000445D 2E
01:0000445E 1A
01:0000445F 13
01:00004460 01
01:00004461 17
01:00004462 40
01:00004463 2E
01:00004464 2E              	   882: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:00004465 03
01:00004466 18
01:00004467 04
01:00004468 05
01:00004469 24
01:0000446A 23
01:0000446B 2E
01:0000446C 2E              	   883: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:0000446D 20
01:0000446E 16
01:0000446F 06
01:00004470 14
01:00004471 12
01:00004472 25
01:00004473 2E
01:00004474 2E              	   884: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:00004475 0E
01:00004476 02
01:00004477 08
01:00004478 07
01:00004479 19
01:0000447A 5E
01:0000447B 2E
01:0000447C 2E              	   885: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:0000447D 2E
01:0000447E 0D
01:0000447F 0A
01:00004480 15
01:00004481 26
01:00004482 2A
01:00004483 2E
01:00004484 2E              	   886: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:00004485 3C
01:00004486 0B
01:00004487 09
01:00004488 0F
01:00004489 29
01:0000448A 28
01:0000448B 2E
01:0000448C 2E              	   887: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:0000448D 3E
01:0000448E 3F
01:0000448F 0C
01:00004490 3A
01:00004491 10
01:00004492 5F
01:00004493 2E
01:00004494 2E              	   888: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004495 2E
01:00004496 22
01:00004497 2E
01:00004498 7B
01:00004499 2B
01:0000449A 2E
01:0000449B 2E
01:0000449C 2E              	   889: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:0000449D 2E
01:0000449E 0D
01:0000449F 7D
01:000044A0 2E
01:000044A1 7C
01:000044A2 2E
01:000044A3 2E
01:000044A4 2E              	   890: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:000044A5 2E
01:000044A6 2E
01:000044A7 2E
01:000044A8 2E
01:000044A9 2E
01:000044AA 08
01:000044AB 2E
01:000044AC 2E              	   891: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044AD 2E
01:000044AE 2E
01:000044AF 2E
01:000044B0 2E
01:000044B1 2E
01:000044B2 2E
01:000044B3 2E
01:000044B4 2E              	   892: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:000044B5 7F
01:000044B6 2E
01:000044B7 2E
01:000044B8 2E
01:000044B9 2E
01:000044BA 1B
01:000044BB 2E
01:000044BC 2E              	   893: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044BD 2E
01:000044BE 2E
01:000044BF 2E
01:000044C0 2E
01:000044C1 2E
01:000044C2 2E
01:000044C3 2E
                            	   894: 
                            	   895: _keybdExtendedCodes:
01:000044C4 2E              	   896: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:000044C5 2E
01:000044C6 2E
01:000044C7 2E
01:000044C8 A3
01:000044C9 A1
01:000044CA A2
01:000044CB 2E
01:000044CC 2E              	   897: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044CD 2E
01:000044CE 2E
01:000044CF 2E
01:000044D0 2E
01:000044D1 2E
01:000044D2 2E
01:000044D3 2E
01:000044D4 2E              	   898: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044D5 2E
01:000044D6 2E
01:000044D7 2E
01:000044D8 2E
01:000044D9 2E
01:000044DA 2E
01:000044DB 2E
01:000044DC 2E              	   899: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044DD 2E
01:000044DE 2E
01:000044DF 2E
01:000044E0 2E
01:000044E1 2E
01:000044E2 2E
01:000044E3 2E
01:000044E4 2E              	   900: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044E5 2E
01:000044E6 2E
01:000044E7 2E
01:000044E8 2E
01:000044E9 2E
01:000044EA 2E
01:000044EB 2E
01:000044EC 2E              	   901: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044ED 2E
01:000044EE 2E
01:000044EF 2E
01:000044F0 2E
01:000044F1 2E
01:000044F2 2E
01:000044F3 2E
01:000044F4 2E              	   902: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044F5 2E
01:000044F6 2E
01:000044F7 2E
01:000044F8 2E
01:000044F9 2E
01:000044FA 2E
01:000044FB 2E
01:000044FC 2E              	   903: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044FD 2E
01:000044FE 2E
01:000044FF 2E
01:00004500 2E
01:00004501 2E
01:00004502 2E
01:00004503 2E
01:00004504 2E              	   904: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004505 2E
01:00004506 2E
01:00004507 2E
01:00004508 2E
01:00004509 2E
01:0000450A 2E
01:0000450B 2E
01:0000450C 2E              	   905: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000450D 2E
01:0000450E 2E
01:0000450F 2E
01:00004510 2E
01:00004511 2E
01:00004512 2E
01:00004513 2E
01:00004514 2E              	   906: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004515 2E
01:00004516 2E
01:00004517 2E
01:00004518 2E
01:00004519 2E
01:0000451A 2E
01:0000451B 2E
01:0000451C 2E              	   907: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000451D 2E
01:0000451E 2E
01:0000451F 2E
01:00004520 2E
01:00004521 2E
01:00004522 2E
01:00004523 2E
01:00004524 2E              	   908: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004525 2E
01:00004526 2E
01:00004527 2E
01:00004528 2E
01:00004529 2E
01:0000452A 2E
01:0000452B 2E
01:0000452C 2E              	   909: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:0000452D 95
01:0000452E 2E
01:0000452F 93
01:00004530 94
01:00004531 2E
01:00004532 2E
01:00004533 2E
01:00004534 98              	   910: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:00004535 99
01:00004536 92
01:00004537 2E
01:00004538 91
01:00004539 90
01:0000453A 2E
01:0000453B 2E
01:0000453C 2E              	   911: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:0000453D 2E
01:0000453E 97
01:0000453F 2E
01:00004540 2E
01:00004541 96
01:00004542 2E
01:00004543 2E
                            	   912: 
                            	   913: ;==============================================================================
                            	   914: ;==============================================================================
                            	   915: ; Monitor
                            	   916: ;==============================================================================
                            	   917: ;==============================================================================
                            	   918: ;
                            	   919: ; Get a word from screen memory and swap byte order
                            	   920: 
                            	   921: FromScreen:
01:00004544 2210            	   922: 	move.l	(a0),d1
01:00004546 E159            	   923: 	rol.w		#8,d1
01:00004548 4841            	   924: 	swap		d1
01:0000454A E159            	   925: 	rol.w		#8,d1
01:0000454C 5088            	   926: 	lea			8(a0),a0	; increment screen pointer
01:0000454E 4E75            	   927: 	rts
                            	   928: 
                            	   929: StartMon:
                            	   930: Monitor:
                            	   931: ;	lea		STACK,a7		; reset the stack pointer
01:00004550 423900000418    	   932: 	clr.b	KeybdEcho		; turn off keyboard echo
                            	   933: PromptLn:
01:00004556 6100F756        	   934: 	bsr			CRLF
01:0000455A 123C0024        	   935: 	move.b	#'$',d1
01:0000455E 6100F794        	   936: 	bsr			DisplayChar
                            	   937: 
                            	   938: ; Get characters until a CR is keyed
                            	   939: ;
                            	   940: Prompt3:
01:00004562 6100FA70        	   941: 	bsr			GetKey
01:00004566 0C01000D        	   942: 	cmpi.b	#CR,d1
01:0000456A 6706            	   943: 	beq.s		Prompt1
01:0000456C 6100F786        	   944: 	bsr			DisplayChar
01:00004570 60F0            	   945: 	bra.s		Prompt3
                            	   946: 
                            	   947: ; Process the screen line that the CR was keyed on
                            	   948: ;
                            	   949: Prompt1:
01:00004572 42390000040D    	   950: 	clr.b		CursorCol			; go back to the start of the line
01:00004578 6100F746        	   951: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	   952: .0001:
01:0000457C 61C6            	   953: 	bsr			FromScreen		; grab character off screen
01:0000457E 0C010024        	   954: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:00004582 67F8            	   955: 	beq.s		.0001
                            	   956: 	
                            	   957: ; Dispatch based on command character
                            	   958: ;
                            	   959: Prompt2:
01:00004584 0C010061        	   960: 	cmpi.b	#'a',d1
01:00004588 67000332        	   961: 	beq		AudioInputTest
01:0000458C 0C010062        	   962: 	cmpi.b	#'b',d1
01:00004590 6700032C        	   963: 	beq		BouncingBalls
01:00004594 0C010067        	   964: 	cmpi.b	#'g',d1
01:00004598 67000326        	   965: 	beq		GraphicsDemo
01:0000459C 0C01003A        	   966: 	cmpi.b	#':',d1			; $: - edit memory
01:000045A0 67000206        	   967: 	beq		EditMem
01:000045A4 0C010044        	   968: 	cmpi.b	#'D',d1			; $D - dump memory
01:000045A8 67000244        	   969: 	beq		DumpMem
01:000045AC 0C010046        	   970: 	cmpi.b	#'F',d1
01:000045B0 6700019E        	   971: 	beq		FillMem
01:000045B4 0C010042        	   972: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:000045B8 6606            	   973: 	bne.s	.0001
01:000045BA 4EF9FFFCC000    	   974: 	jmp		$FFFCC000
                            	   975: .0001:
01:000045C0 0C01004A        	   976: 	cmpi.b	#'J',d1			; $J - execute code
01:000045C4 6700021C        	   977: 	beq		ExecuteCode
01:000045C8 0C01004C        	   978: 	cmpi.b	#'L',d1			; $L - load S19 file
01:000045CC 670002F4        	   979: 	beq		LoadS19
01:000045D0 0C01003F        	   980: 	cmpi.b	#'?',d1			; $? - display help
01:000045D4 672E            	   981: 	beq		DisplayHelp
01:000045D6 0C010043        	   982: 	cmpi.b	#'C',d1			; $C - clear screen
01:000045DA 6704            	   983: 	beq		TestCLS
01:000045DC 6000FF72        	   984: 	bra		Monitor
                            	   985: 
                            	   986: TestCLS:
01:000045E0 6100FF62        	   987: 	bsr			FromScreen
01:000045E4 5242            	   988: 	addq		#1,d2
01:000045E6 0C01004C        	   989: 	cmpi.b	#'L',d1
01:000045EA 6600FF64        	   990: 	bne			Monitor
01:000045EE 6100FF54        	   991: 	bsr			FromScreen
01:000045F2 5242            	   992: 	addq		#1,d2
01:000045F4 0C010053        	   993: 	cmpi.b	#'S',d1
01:000045F8 6600FF56        	   994: 	bne			Monitor
01:000045FC 610002C6        	   995: 	bsr			ClearScreen
01:00004600 6000FF4E        	   996: 	bra			Monitor
                            	   997: 	
                            	   998: DisplayHelp:
01:00004604 43FA000A        	   999: 	lea			HelpMsg,a1
01:00004608 6100F910        	  1000: 	jsr			DisplayString
01:0000460C 6000FF42        	  1001: 	bra			Monitor
                            	  1002: 
                            	  1003: HelpMsg:
01:00004610 3F203D2044697370	  1004: 	dc.b	"? = Display help",CR,LF
01:00004618 6C61792068656C70
01:00004620 0D
01:00004621 0A
01:00004622 434C53203D20636C	  1005: 	dc.b	"CLS = clear screen",CR,LF
01:0000462A 6561722073637265
01:00004632 656E
01:00004634 0D
01:00004635 0A
01:00004636 3A203D2045646974	  1006: 	dc.b	": = Edit memory bytes",CR,LF
01:0000463E 206D656D6F727920
01:00004646 6279746573
01:0000464B 0D
01:0000464C 0A
01:0000464D 46203D2046696C6C	  1007: 	dc.b	"F = Fill memory",CR,LF
01:00004655 206D656D6F7279
01:0000465C 0D
01:0000465D 0A
01:0000465E 4C203D204C6F6164	  1008: 	dc.b	"L = Load S19 file",CR,LF
01:00004666 205331392066696C
01:0000466E 65
01:0000466F 0D
01:00004670 0A
01:00004671 44203D2044756D70	  1009: 	dc.b	"D = Dump memory",CR,LF
01:00004679 206D656D6F7279
01:00004680 0D
01:00004681 0A
01:00004682 42203D2073746172	  1010: 	dc.b	"B = start tiny basic",CR,LF
01:0000468A 742074696E792062
01:00004692 61736963
01:00004696 0D
01:00004697 0A
01:00004698 4A203D204A756D70	  1011: 	dc.b	"J = Jump to code",CR,LF,0
01:000046A0 20746F20636F6465
01:000046A8 0D
01:000046A9 0A
01:000046AA 00
                            	  1012: 	even
                            	  1013: 
                            	  1014: ;------------------------------------------------------------------------------
                            	  1015: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1016: ; Used to fetch a command line. (Not currently used).
                            	  1017: ;
                            	  1018: ; d0.b	- command prompt
                            	  1019: ;------------------------------------------------------------------------------
                            	  1020: 
                            	  1021: GetCmdLine:
01:000046AC 6100F646        	  1022: 		bsr		DisplayChar		; display prompt
01:000046B0 103C0020        	  1023: 		move.b	#' ',d0
01:000046B4 6100F63E        	  1024: 		bsr		DisplayChar
01:000046B8 41F90000041D    	  1025: 		lea		CmdBuf,a0
                            	  1026: .0001:
01:000046BE 6100F914        	  1027: 		bsr		GetKey
01:000046C2 B03C0008        	  1028: 		cmp.b	#CTRLH,d0
01:000046C6 6728            	  1029: 		beq.s	.0003
01:000046C8 B03C0018        	  1030: 		cmp.b	#CTRLX,d0
01:000046CC 6746            	  1031: 		beq.s	.0004
01:000046CE B03C000D        	  1032: 		cmp.b	#CR,d0
01:000046D2 6706            	  1033: 		beq.s	.0002
01:000046D4 B03C0020        	  1034: 		cmp.b	#' ',d0
01:000046D8 65E4            	  1035: 		bcs.s	.0001
                            	  1036: .0002:
01:000046DA 1080            	  1037: 		move.b	d0,(a0)
01:000046DC 5088            	  1038: 		lea			8(a0),a0
01:000046DE 6100F614        	  1039: 		bsr		DisplayChar
01:000046E2 B03C000D        	  1040: 		cmp.b	#CR,d0
01:000046E6 675E            	  1041: 		beq		.0007
01:000046E8 B1FC0000041D    	  1042: 		cmp.l	#CmdBufEnd-1,a0
01:000046EE 65CE            	  1043: 		bcs.s	.0001
                            	  1044: .0003:
01:000046F0 103C0008        	  1045: 		move.b	#CTRLH,d0
01:000046F4 6100F5FE        	  1046: 		bsr		DisplayChar
01:000046F8 103C0020        	  1047: 		move.b	#' ',d0
01:000046FC 6100F5F6        	  1048: 		bsr		DisplayChar
01:00004700 B1FC0000041D    	  1049: 		cmp.l	#CmdBuf,a0
01:00004706 63B6            	  1050: 		bls.s	.0001
01:00004708 103C0008        	  1051: 		move.b	#CTRLH,d0
01:0000470C 6100F5E6        	  1052: 		bsr		DisplayChar
01:00004710 5388            	  1053: 		subq.l	#1,a0
01:00004712 60AA            	  1054: 		bra.s	.0001
                            	  1055: .0004:
01:00004714 2208            	  1056: 		move.l	a0,d1
01:00004716 92BC0000041D    	  1057: 		sub.l	#CmdBuf,d1
01:0000471C 671E            	  1058: 		beq.s	.0006
01:0000471E 5341            	  1059: 		subq	#1,d1
                            	  1060: .0005:
01:00004720 103C0008        	  1061: 		move.b	#CTRLH,d0
01:00004724 6100F5CE        	  1062: 		bsr		DisplayChar
01:00004728 103C0020        	  1063: 		move.b	#' ',d0
01:0000472C 6100F5C6        	  1064: 		bsr		DisplayChar
01:00004730 103C0008        	  1065: 		move.b	#CTRLH,d0
01:00004734 6100F5BE        	  1066: 		bsr		DisplayChar
01:00004738 51C9FFE6        	  1067: 		dbra	d1,.0005
                            	  1068: .0006:
01:0000473C 41F90000041D    	  1069: 		lea		CmdBuf,a0
01:00004742 6000FF7A        	  1070: 		bra		.0001
                            	  1071: .0007:
01:00004746 103C000A        	  1072: 		move.b	#LF,d0
01:0000474A 6100F5A8        	  1073: 		bsr		DisplayChar
01:0000474E 4E75            	  1074: 		rts
                            	  1075: 
                            	  1076: 		
                            	  1077: ;------------------------------------------------------------------------------
                            	  1078: ; Fill memory
                            	  1079: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1080: ; FW = fill words
                            	  1081: ; FL = fill longs
                            	  1082: ; F = fill bytes
                            	  1083: ;------------------------------------------------------------------------------
                            	  1084: ;
                            	  1085: FillMem:
01:00004750 6100FDF2        	  1086: 	bsr			FromScreen
                            	  1087: 	;bsr		ScreenToAscii
01:00004754 1801            	  1088: 	move.b	d1,d4			; d4 = fill size
01:00004756 613E            	  1089: 	bsr			ignBlanks
01:00004758 610000C4        	  1090: 	bsr			GetHexNumber
01:0000475C 2241            	  1091: 	move.l	d1,a1			; a1 = start
01:0000475E 6136            	  1092: 	bsr			ignBlanks
01:00004760 610000BC        	  1093: 	bsr			GetHexNumber
01:00004764 2601            	  1094: 	move.l	d1,d3			; d3 = count
01:00004766 612E            	  1095: 	bsr			ignBlanks
01:00004768 610000B4        	  1096: 	bsr			GetHexNumber	; fill value
01:0000476C 0C04004C        	  1097: 	cmpi.b	#'L',d4
01:00004770 660A            	  1098: 	bne			fmem1
                            	  1099: fmemL:
01:00004772 22C1            	  1100: 	move.l	d1,(a1)+
01:00004774 5383            	  1101: 	sub.l	#1,d3
01:00004776 66FA            	  1102: 	bne.s	fmemL
01:00004778 6000FDD6        	  1103: 	bra		Monitor
                            	  1104: fmem1
01:0000477C 0C040057        	  1105: 	cmpi.b	#'W',d4
01:00004780 660A            	  1106: 	bne		fmemB
                            	  1107: fmemW:
01:00004782 32C1            	  1108: 	move.w	d1,(a1)+
01:00004784 5383            	  1109: 	sub.l	#1,d3
01:00004786 66FA            	  1110: 	bne.s	fmemW
01:00004788 6000FDC6        	  1111: 	bra		Monitor
                            	  1112: fmemB:
01:0000478C 12C1            	  1113: 	move.b	d1,(a1)+
01:0000478E 5383            	  1114: 	sub.l	#1,d3
01:00004790 66FA            	  1115: 	bne.s	fmemB
01:00004792 6000FDBC        	  1116: 	bra		Monitor
                            	  1117: 
                            	  1118: ;------------------------------------------------------------------------------
                            	  1119: ; Modifies:
                            	  1120: ;	a0	- text pointer
                            	  1121: ;------------------------------------------------------------------------------
                            	  1122: ;
                            	  1123: ignBlanks:
01:00004796 2F01            	  1124: 	move.l	d1,-(a7)
                            	  1125: .0001:
01:00004798 6100FDAA        	  1126: 	bsr			FromScreen
01:0000479C 0C010020        	  1127: 	cmpi.b	#' ',d1
01:000047A0 67F6            	  1128: 	beq.s		.0001
01:000047A2 5188            	  1129: 	lea			-8(a0),a0
01:000047A4 221F            	  1130: 	move.l	(a7)+,d1
01:000047A6 4E75            	  1131: 	rts
                            	  1132: 
                            	  1133: ;------------------------------------------------------------------------------
                            	  1134: ; Edit memory byte.
                            	  1135: ;------------------------------------------------------------------------------
                            	  1136: ;
                            	  1137: EditMem:
01:000047A8 61EC            	  1138: 	bsr		ignBlanks
01:000047AA 6172            	  1139: 	bsr		GetHexNumber
01:000047AC 2241            	  1140: 	move.l	d1,a1
                            	  1141: edtmem1:
01:000047AE 61E6            	  1142: 	bsr		ignBlanks
01:000047B0 616C            	  1143: 	bsr		GetHexNumber
01:000047B2 12C1            	  1144: 	move.b	d1,(a1)+
01:000047B4 61E0            	  1145: 	bsr		ignBlanks
01:000047B6 6166            	  1146: 	bsr		GetHexNumber
01:000047B8 12C1            	  1147: 	move.b	d1,(a1)+
01:000047BA 61DA            	  1148: 	bsr		ignBlanks
01:000047BC 6160            	  1149: 	bsr		GetHexNumber
01:000047BE 12C1            	  1150: 	move.b	d1,(a1)+
01:000047C0 61D4            	  1151: 	bsr		ignBlanks
01:000047C2 615A            	  1152: 	bsr		GetHexNumber
01:000047C4 12C1            	  1153: 	move.b	d1,(a1)+
01:000047C6 61CE            	  1154: 	bsr		ignBlanks
01:000047C8 6154            	  1155: 	bsr		GetHexNumber
01:000047CA 12C1            	  1156: 	move.b	d1,(a1)+
01:000047CC 61C8            	  1157: 	bsr		ignBlanks
01:000047CE 614E            	  1158: 	bsr		GetHexNumber
01:000047D0 12C1            	  1159: 	move.b	d1,(a1)+
01:000047D2 61C2            	  1160: 	bsr		ignBlanks
01:000047D4 6148            	  1161: 	bsr		GetHexNumber
01:000047D6 12C1            	  1162: 	move.b	d1,(a1)+
01:000047D8 61BC            	  1163: 	bsr		ignBlanks
01:000047DA 6142            	  1164: 	bsr		GetHexNumber
01:000047DC 12C1            	  1165: 	move.b	d1,(a1)+
01:000047DE 6000FD70        	  1166: 	bra		Monitor
                            	  1167: 
                            	  1168: ;------------------------------------------------------------------------------
                            	  1169: ; Execute code at the specified address.
                            	  1170: ;------------------------------------------------------------------------------
                            	  1171: ;
                            	  1172: ExecuteCode:
01:000047E2 61B2            	  1173: 	bsr		ignBlanks
01:000047E4 6138            	  1174: 	bsr		GetHexNumber
01:000047E6 2041            	  1175: 	move.l	d1,a0
01:000047E8 4E90            	  1176: 	jsr		(a0)
01:000047EA 6000FD64        	  1177: 	bra     Monitor
                            	  1178: 
                            	  1179: ;------------------------------------------------------------------------------
                            	  1180: ; Do a memory dump of the requested location.
                            	  1181: ;------------------------------------------------------------------------------
                            	  1182: ;
                            	  1183: DumpMem:
01:000047EE 61A6            	  1184: 	bsr		ignBlanks
01:000047F0 612C            	  1185: 	bsr		GetHexNumber
01:000047F2 4A00            	  1186: 	tst.b	d0				; was there a number ?
01:000047F4 6700FD5A        	  1187: 	beq		Monitor			; no, other garbage, just ignore
01:000047F8 2601            	  1188: 	move.l	d1,d3			; save off start of range
01:000047FA 619A            	  1189: 	bsr		ignBlanks
01:000047FC 6120            	  1190: 	bsr		GetHexNumber
01:000047FE 4A00            	  1191: 	tst.b	d0
01:00004800 6608            	  1192: 	bne.s	DumpMem1
01:00004802 3203            	  1193: 	move	d3,d1
01:00004804 068100000040    	  1194: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1195: DumpMem1:
01:0000480A 2043            	  1196: 	move.l	d3,a0
01:0000480C 2241            	  1197: 	move.l	d1,a1
01:0000480E 6100F49E        	  1198: 	jsr		CRLF
                            	  1199: .0001:
01:00004812 B3C8            	  1200: 	cmpa.l	a0,a1
01:00004814 6200FD3A        	  1201: 	bhi		Monitor
01:00004818 6100041F        	  1202: 	bsr		DisplayMem
01:0000481C 60F4            	  1203: 	bra.s	.0001
                            	  1204: 
                            	  1205: 
                            	  1206: ;------------------------------------------------------------------------------
                            	  1207: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1208: ;
                            	  1209: ; Returns:
                            	  1210: ;	d0 = number of digits
                            	  1211: ;	d1 = value of number
                            	  1212: ;------------------------------------------------------------------------------
                            	  1213: ;
                            	  1214: GetHexNumber:
01:0000481E 2F02            	  1215: 	move.l	d2,-(a7)
01:00004820 7400            	  1216: 	clr.l	d2
01:00004822 7000            	  1217: 	moveq	#0,d0
                            	  1218: .0002:
01:00004824 6100FD1E        	  1219: 	bsr			FromScreen
01:00004828 611E            	  1220: 	bsr			AsciiToHexNybble
01:0000482A B23C00FF        	  1221: 	cmp.b		#$ff,d1
01:0000482E 6712            	  1222: 	beq.s		.0001
01:00004830 E98A            	  1223: 	lsl.l		#4,d2
01:00004832 02810000000F    	  1224: 	andi.l	#$0f,d1
01:00004838 8481            	  1225: 	or.l		d1,d2
01:0000483A 5240            	  1226: 	addq		#1,d0
01:0000483C 0C000008        	  1227: 	cmpi.b	#8,d0
01:00004840 65E2            	  1228: 	blo.s		.0002
                            	  1229: .0001:
01:00004842 2202            	  1230: 	move.l	d2,d1
01:00004844 241F            	  1231: 	move.l	(a7)+,d2
01:00004846 4E75            	  1232: 	rts	
                            	  1233: 
                            	  1234: ;------------------------------------------------------------------------------
                            	  1235: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  1236: ; to a hex nybble.
                            	  1237: ;------------------------------------------------------------------------------
                            	  1238: ;
                            	  1239: AsciiToHexNybble:
01:00004848 0C010030        	  1240: 	cmpi.b	#'0',d1
01:0000484C 6538            	  1241: 	blo.s	gthx3
01:0000484E 0C010039        	  1242: 	cmpi.b	#'9',d1
01:00004852 6206            	  1243: 	bhi.s	gthx5
01:00004854 04010030        	  1244: 	subi.b	#'0',d1
01:00004858 4E75            	  1245: 	rts
                            	  1246: gthx5:
01:0000485A 0C010041        	  1247: 	cmpi.b	#'A',d1
01:0000485E 6526            	  1248: 	blo.s	gthx3
01:00004860 0C010046        	  1249: 	cmpi.b	#'F',d1
01:00004864 620A            	  1250: 	bhi.s	gthx6
01:00004866 04010041        	  1251: 	subi.b	#'A',d1
01:0000486A 0601000A        	  1252: 	addi.b	#10,d1
01:0000486E 4E75            	  1253: 	rts
                            	  1254: gthx6:
01:00004870 0C010061        	  1255: 	cmpi.b	#'a',d1
01:00004874 6510            	  1256: 	blo.s	gthx3
01:00004876 0C010066        	  1257: 	cmpi.b	#'f',d1
01:0000487A 620A            	  1258: 	bhi.s	gthx3
01:0000487C 04010061        	  1259: 	subi.b	#'a',d1
01:00004880 0601000A        	  1260: 	addi.b	#10,d1
01:00004884 4E75            	  1261: 	rts
                            	  1262: gthx3:
01:00004886 72FF            	  1263: 	moveq	#-1,d1		; not a hex number
01:00004888 4E75            	  1264: 	rts
                            	  1265: 
                            	  1266: ;------------------------------------------------------------------------------
                            	  1267: ; Display nybble in D1.B
                            	  1268: ;------------------------------------------------------------------------------
                            	  1269: ;
                            	  1270: DisplayNybble:
01:0000488A 2F01            	  1271: 	move.l	d1,-(a7)
01:0000488C 0201000F        	  1272: 	andi.b	#$F,d1
01:00004890 06010030        	  1273: 	addi.b	#'0',d1
01:00004894 0C010039        	  1274: 	cmpi.b	#'9',d1
01:00004898 6302            	  1275: 	bls.s		dispnyb1
01:0000489A 5E01            	  1276: 	addi.b	#7,d1
                            	  1277: dispnyb1:
01:0000489C 6100F456        	  1278: 	bsr			DisplayChar
01:000048A0 221F            	  1279: 	move.l	(a7)+,d1
01:000048A2 4E75            	  1280: 	rts
                            	  1281: 
                            	  1282: ;------------------------------------------------------------------------------
                            	  1283: ; Display the byte in D1.B
                            	  1284: ;------------------------------------------------------------------------------
                            	  1285: ;
                            	  1286: DisplayByte:
01:000048A4 E819            	  1287: 	ror.b		#4,d1
01:000048A6 61E2            	  1288: 	bsr			DisplayNybble
01:000048A8 E919            	  1289: 	rol.b		#4,d1
01:000048AA 60DE            	  1290: 	bra			DisplayNybble
                            	  1291: 
                            	  1292: ;------------------------------------------------------------------------------
                            	  1293: ; Display the 32 bit word in D1.L
                            	  1294: ;------------------------------------------------------------------------------
                            	  1295: ;
                            	  1296: DisplayTetra:
01:000048AC E199            	  1297: 	rol.l	#8,d1
01:000048AE 61F4            	  1298: 	bsr		DisplayByte
01:000048B0 E199            	  1299: 	rol.l	#8,d1
01:000048B2 61F0            	  1300: 	bsr		DisplayByte
01:000048B4 E199            	  1301: 	rol.l	#8,d1
01:000048B6 61EC            	  1302: 	bsr		DisplayByte
01:000048B8 E199            	  1303: 	rol.l	#8,d1
01:000048BA 60E8            	  1304: 	bra		DisplayByte
                            	  1305: 
                            	  1306: ;------------------------------------------------------------------------------
                            	  1307: ;------------------------------------------------------------------------------
                            	  1308: ;
                            	  1309: ;DisplayHexNumber:
                            	  1310: ;	move.w	#$A6A6,leds		; diagnostics
                            	  1311: ;	move.l	#VDGREG,a6
                            	  1312: ;	move.w	#7,d2		; number-1 of digits to display
                            	  1313: ;disphnum1:
                            	  1314: ;	move.b	d1,d0		; get digit into d0.b
                            	  1315: ;	andi.w	#$0f,d0
                            	  1316: ;	cmpi.w	#$09,d0
                            	  1317: ;	bls.s	disphnum2
                            	  1318: ;	addi.w	#7,d0
                            	  1319: ;disphnum2:
                            	  1320: ;	addi.w	#$30,d0	; convert to display char
                            	  1321: ;	move.w	d2,d3		; char count into d3
                            	  1322: ;	asl.w	#3,d3		; scale * 8
                            	  1323: ;disphnum3:
                            	  1324: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  1325: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  1326: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  1327: ;	ext.w	d0						; zero out high order bits
                            	  1328: ;	move.w	d0,$420(a6)			; set char code
                            	  1329: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  1330: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  1331: ;	move.w	d3,$426(a6)			; set x pos
                            	  1332: ;	move.w	#8,$428(a6)			; set y pos
                            	  1333: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  1334: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  1335: ;	ror.l	#4,d1					; rot to next digit
                            	  1336: ;	dbeq	d2,disphnum1
                            	  1337: ;	jmp		(a5)
                            	  1338: 
                            	  1339: AudioInputTest:
01:000048BC 4E75            	  1340: 	rts
                            	  1341: BouncingBalls:
01:000048BE 4E75            	  1342: 	rts
                            	  1343: GraphicsDemo:
01:000048C0 4E75            	  1344: 	rts
                            	  1345: LoadS19:
01:000048C2 4E75            	  1346: 	rts
                            	  1347: ClearScreen:
01:000048C4 6000F3B4        	  1348: 	bra		clear_screen
01:000048C8 4E75            	  1349: 	rts
                            	  1350: 
                            	  1351: brdisp_trap:
01:000048CA 584F            	  1352: 	addq		#4,sp					; get rid of sr
01:000048CC 221F            	  1353: 	move.l	(sp)+,d1			; pop exception address
01:000048CE 61DC            	  1354: 	bsr			DisplayTetra	; and display it
01:000048D0 4E722700        	  1355: 	stop		#$2700
                            	  1356: 
                            	  1357: ; -----------------------------------------------------------------------------
                            	  1358: ; -----------------------------------------------------------------------------
                            	  1359: 
                            	  1360: msg_start:
01:000048D4 726636386B205379	  1361: 	dc.b	"rf68k System Starting",CR,LF,0
01:000048DC 7374656D20537461
01:000048E4 7274696E67
01:000048E9 0D
01:000048EA 0A
01:000048EB 00
                            	  1362: 
                            	  1363: 


Symbols by name:
ABCD_INNER1                     01:00002476
ABCD_INNER2                     01:000024E4
ABCD_NO_C1                      01:00002492
ABCD_NO_C2                      01:0000249A
ABCD_NO_C3                      01:00002500
ABCD_NO_C4                      01:00002508
ABCD_OUTER1                     01:00002474
ABCD_OUTER2                     01:000024E2
ADDA_OUTER1                     01:00002FEA
ADDQ_LOOP1                      01:00002804
ADDQ_LOOP2                      01:00002842
ADDQ_LOOP3                      01:00002878
ADDX_LOOP3                      01:00003110
ADDX_LOOP4                      01:0000312C
ADDX_LOOP5                      01:00003148
ADDX_OUTER1                     01:0000307C
ADD_OUTER1                      01:00002E10
ADD_OUTER2                      01:00002E84
ALL_DONE                        01:0000014C
AND_OUTER1                      01:00002B2E
AND_OUTER2                      01:00002BA2
AsciiToHexNybble                01:00004848
AudioInputTest                  01:000048BC
BCC1                            01:0000272A
BCC10                           01:0000277C
BCC11                           01:00002784
BCC12                           01:0000278E
BCC13                           01:00002796
BCC14                           01:000027A0
BCC2                            01:00002734
BCC3                            01:0000273C
BCC4                            01:00002746
BCC5                            01:0000274E
BCC6                            01:00002758
BCC7                            01:00002760
BCC8                            01:0000276A
BCC9                            01:00002772
BSR_CLOSE1                      01:000012AE
BSR_CLOSE2                      01:000012E4
BSR_FAR1                        01:0000014E
BSR_FAR2                        01:0000271A
BlankLastLine                   01:00003EEE
BouncingBalls                   01:000048BE
CMPA_OUTER1                     01:00002D04
CMPM_LOOP1                      01:00002D92
CMPM_LOOP2                      01:00002DAC
CMPM_LOOP3                      01:00002DC6
CMP_OUTER1                      01:00002C8E
CR                               E:0000000D
CRLF                            01:00003CAE
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003CC0
CheckForKey                     01:00003FC2
ClearScreen                     01:000048C4
CmdBuf                          00:0000041D
CmdBufEnd                       00:0000041E
CursorCol                       00:0000040D
CursorRow                       00:0000040C
DBCC_LOOP1                      01:000027AA
DBCC_LOOP2                      01:000027B8
DIVS_OUTER1                     01:000029EE
DIVU_OUTER1                     01:0000299C
Delay3s                         01:0000004E
DisplayByte                     01:000048A4
DisplayChar                     01:00003CF4
DisplayHelp                     01:00004604
DisplayMem                      00:0000041F
DisplayNybble                   01:0000488A
DisplayString                   01:00003F1A
DisplayStringCRLF               01:00003F32
DisplayTetra                    01:000048AC
DumpMem                         01:000047EE
DumpMem1                        01:0000480A
EOR_OUTER2                      01:00002C18
EXCEPTION_6                     01:00000160
EXCEPTION_7                     01:00000170
EditMem                         01:000047A8
ExecuteCode                     01:000047E2
FillMem                         01:00004750
FromScreen                      01:00004544
GetCmdLine                      01:000046AC
GetHexNumber                    01:0000481E
GetKey                          01:00003FD4
GraphicsDemo                    01:000048C0
HelpMsg                         01:00004610
IncCursorPos                    01:00003E6A
IncCursorRow                    01:00003E8A
KEYBD                            E:FD0FFE00
KeybdEcho                       00:00000418
KeybdGetChar                    01:00003FFE
KeybdGetCharNoWait              01:00003FEE
KeybdGetCharWait                01:00003FF6
KeybdLEDs                       00:0000041A
KeybdRecvByte                   01:00003F7C
KeybdSendByte                   01:0000422C
KeybdSetLEDStatus               01:000041C0
KeybdWaitFlag                   00:00000419
KeybdWaitTx                     01:00003F9C
LEA1                            01:00001CBE
LF                               E:0000000A
LoadS19                         01:000048C2
MOVE1                           01:0000192C
MOVE2                           01:000018B0
MOVE3                           01:000019AC
MOVE4                           01:00001B06
MULS_OUTER1                     01:000032E4
MULU_OUTER1                     01:00003298
Monitor                         01:00004550
NBCD_LOOP                       01:00002668
NBCD_LOOP1                      01:000026AE
NBCD_NO_C                       01:00002674
NBCD_NO_C1                      01:000026C2
NBCD_NO_Z                       01:00002678
NBCD_NO_Z1                      01:000026C6
OR_OUTER1                       01:00002A44
OR_OUTER2                       01:00002AB8
Prompt1                         01:00004572
Prompt2                         01:00004584
Prompt3                         01:00004562
PromptLn                        01:00004556
ROXx_FLAGS                      01:000035AC
ROXx_LOOP1                      01:000035C2
ROXx_LOOP2                      01:000035E2
ROXx_LOOP3                      01:00003602
ROXx_LOOP4                      01:00003622
ROXx_LOOP5                      01:00003642
ROXx_LOOP6                      01:00003664
ROx_FLAGS                       01:00003376
ROx_LOOP1                       01:0000338C
ROx_LOOP2                       01:000033AC
ROx_LOOP3                       01:000033CC
ROx_LOOP4                       01:000033EC
ROx_LOOP5                       01:0000340C
ROx_LOOP6                       01:0000342E
RTR_DONE                        01:0000270C
SBCD_INNER1                     01:00002574
SBCD_INNER2                     01:000025E2
SBCD_NO_C1                      01:00002590
SBCD_NO_C2                      01:00002598
SBCD_NO_C3                      01:000025FE
SBCD_NO_C4                      01:00002606
SBCD_OUTER1                     01:00002572
SBCD_OUTER2                     01:000025E0
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003A24
SHIFTS2_LOOP1                   01:00003A3A
SHIFTS2_LOOP2                   01:00003A56
SHIFTS2_LOOP3                   01:00003A72
SHIFTS2_LOOP4                   01:00003A8E
SHIFTS2_LOOP5                   01:00003AAA
SHIFTS2_LOOP6                   01:00003AC8
SHIFTS_FLAGS                    01:000037E2
SHIFTS_LOOP1                    01:000037F8
SHIFTS_LOOP2                    01:00003818
SHIFTS_LOOP3                    01:00003838
SHIFTS_LOOP4                    01:00003858
SHIFTS_LOOP5                    01:00003878
SHIFTS_LOOP6                    01:0000389A
SUBA_OUTER1                     01:00003036
SUBQ_LOOP1                      01:000028C2
SUBQ_LOOP2                      01:000028FC
SUBQ_LOOP3                      01:00002932
SUBX_LOOP3                      01:00003220
SUBX_LOOP4                      01:0000323C
SUBX_LOOP5                      01:00003258
SUBX_OUTER1                     01:0000318C
SUB_OUTER1                      01:00002EFA
SUB_OUTER2                      01:00002F6E
ScrollUp                        01:00003EBE
StartMon                        01:00004550
SyncCursor                      01:00003F38
TEXTREG                          E:FD01FF00
TestCLS                         01:000045E0
TextCols                        00:0000040F
TextCurpos                      00:00000410
TextPos                         00:00000410
TextRows                        00:0000040E
TextScr                         00:00000414
Wait10ms                        01:00004234
_KeyState1                      00:0000041B
_KeyState2                      00:0000041C
_KeybdGetScancode               01:00003F6A
_KeybdGetStatus                 01:00003F62
_KeybdInit                      01:00003F54
_keybdControlCodes              01:00004444
_keybdExtendedCodes             01:000044C4
_shiftedScanCodes               01:00004344
_unshiftedScanCodes             01:00004244
bkcolor                         00:00000408
brdisp_trap                     01:000048CA
cfk1                            01:00003FD0
clear_screen                    01:00003C7A
cpu_test                        01:00000072
dccr                            01:00003D0E
dclf                            01:00003DEA
dcx10                           01:00003D7E
dcx11                           01:00003D9C
dcx12                           01:00003D94
dcx14                           01:00003D2A
dcx16                           01:00003DEE
dcx4                            01:00003DF2
dcx6                            01:00003D34
dcx7                            01:00003D2E
dcx8                            01:00003D4A
dcx9                            01:00003D60
dispnyb1                        01:0000489C
dly3s1                          01:0000005E
dly3s2                          01:0000005C
doBackspace                     01:00003DFC
doCtrlX                         01:00003E46
doDelete                        01:00003E0A
do_nothing                      01:0000004C
dspj1                           01:00003F1E
dsret                           01:00003F2C
edtmem1                         01:000047AE
fgcolor                         00:00000404
fmem1                           01:0000477C
fmemB                           01:0000478C
fmemL                           01:00004772
fmemW                           01:00004782
get_screen_color                01:00003C4E
gk1                             01:00003FEC
gthx3                           01:00004886
gthx5                           01:0000485A
gthx6                           01:00004870
icc1                            01:00003EBC
ignBlanks                       01:00004796
leds                             E:FD0FFF00
loop1                           01:0000003A
loop2                           01:00000038
loop3                           01:00003CA4
msg_start                       01:000048D4
op_ABCD                         01:00002454
op_ADD                          01:00002DF0
op_ADDA                         01:00002FC4
op_ADDQ                         01:000027F0
op_ADDX                         01:0000305C
op_ADD_I                        01:000014D8
op_AND                          01:00002B0E
op_ANDI_TO_CCR                  01:00000208
op_ANDI_TO_SR                   01:0000022E
op_BCC                          01:00002722
op_BCHG                         01:000005FE
op_BCLR                         01:00000966
op_BOOL_I                       01:000010F0
op_BSET                         01:00000CB6
op_BSR                          01:000012B6
op_BTST                         01:00000254
op_BTST0                        01:000003DE
op_BTST1                        01:000003EA
op_BTST10                       01:00000432
op_BTST11                       01:0000043A
op_BTST12                       01:00000440
op_BTST2                        01:000003F2
op_BTST20                       01:00000598
op_BTST21                       01:000005A2
op_BTST22                       01:000005A8
op_BTST23                       01:000005AE
op_BTST24                       01:000005B4
op_BTST25                       01:000005BA
op_BTST26                       01:000005C0
op_BTST27                       01:000005C6
op_BTST28                       01:000005CC
op_BTST29                       01:000005D2
op_BTST3                        01:000003FA
op_BTST30                       01:000005D8
op_BTST31                       01:000005DE
op_BTST32                       01:000005E2
op_BTST4                        01:00000402
op_BTST5                        01:0000040A
op_BTST6                        01:00000412
op_BTST7                        01:0000041A
op_BTST8                        01:00000422
op_BTST9                        01:0000042A
op_CHK                          01:00001D6E
op_CMP                          01:00002C6E
op_CMPA                         01:00002CE4
op_CMPM                         01:00002D4A
op_CMP_I                        01:000012EC
op_DBCC                         01:000027A2
op_DIVS                         01:000029D2
op_DIVU                         01:00002980
op_EOR                          01:00002BF8
op_EORI_TO_CCR                  01:000001BC
op_EORI_TO_SR                   01:000001E2
op_EXG                          01:00003314
op_EXT                          01:00001BE4
op_LEAPEA                       01:00001C26
op_LINKS                        01:00001D40
op_MOVE                         01:000017E4
op_MOVEM                        01:00002136
op_MOVEP                        01:0000105C
op_MOVEQ                        01:00002964
op_MOVE_USP                     01:00001D5E
op_MOVE_xxx_FLAGS               01:000019F0
op_MULS                         01:000032C8
op_MULU                         01:0000327C
op_NBCD                         01:00002650
op_NEGS                         01:00001DA8
op_OR                           01:00002A24
op_ORI_TO_CCR                   01:00000178
op_ORI_TO_SR                    01:0000019A
op_ROXx                         01:000035B8
op_ROx                          01:00003382
op_RTR                          01:000026FE
op_SBCD                         01:00002552
op_SCC                          01:000027C8
op_SHIFTS                       01:000037EE
op_SHIFTS2                      01:00003A30
op_SUB                          01:00002EDA
op_SUBA                         01:00003010
op_SUBQ                         01:000028AA
op_SUBX                         01:0000316C
op_SUB_I                        01:0000165E
op_SWAP                         01:00001C10
op_TAS                          01:00001CD2
op_TRAPV                        01:000026E2
op_TST                          01:00001CFA
start                           01:00000000

Symbols by value:
FD01FF00 TEXTREG
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 start
00000008 CTRLH
0000000A LF
0000000D CR
0000000D SC_TAB
00000011 SC_ALT
00000012 SC_LSHIFT
00000014 SC_CTRL
00000018 CTRLX
00000038 loop2
0000003A loop1
0000004C do_nothing
0000004E Delay3s
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
0000005C dly3s2
0000005E dly3s1
00000072 cpu_test
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
000000E0 SC_EXTEND
000000F0 SC_KEYUP
0000014C ALL_DONE
0000014E BSR_FAR1
00000160 EXCEPTION_6
00000170 EXCEPTION_7
00000178 op_ORI_TO_CCR
0000019A op_ORI_TO_SR
000001BC op_EORI_TO_CCR
000001E2 op_EORI_TO_SR
00000208 op_ANDI_TO_CCR
0000022E op_ANDI_TO_SR
00000254 op_BTST
000003DE op_BTST0
000003EA op_BTST1
000003F2 op_BTST2
000003FA op_BTST3
00000402 op_BTST4
00000404 fgcolor
00000408 bkcolor
0000040A op_BTST5
0000040C CursorRow
0000040D CursorCol
0000040E TextRows
0000040F TextCols
00000410 TextCurpos
00000410 TextPos
00000412 op_BTST6
00000414 TextScr
00000418 KeybdEcho
00000419 KeybdWaitFlag
0000041A op_BTST7
0000041A KeybdLEDs
0000041B _KeyState1
0000041C _KeyState2
0000041D CmdBuf
0000041E CmdBufEnd
0000041F DisplayMem
00000422 op_BTST8
0000042A op_BTST9
00000432 op_BTST10
0000043A op_BTST11
00000440 op_BTST12
00000598 op_BTST20
000005A2 op_BTST21
000005A8 op_BTST22
000005AE op_BTST23
000005B4 op_BTST24
000005BA op_BTST25
000005C0 op_BTST26
000005C6 op_BTST27
000005CC op_BTST28
000005D2 op_BTST29
000005D8 op_BTST30
000005DE op_BTST31
000005E2 op_BTST32
000005FE op_BCHG
00000966 op_BCLR
00000CB6 op_BSET
0000105C op_MOVEP
000010F0 op_BOOL_I
000012AE BSR_CLOSE1
000012B6 op_BSR
000012E4 BSR_CLOSE2
000012EC op_CMP_I
000014D8 op_ADD_I
0000165E op_SUB_I
000017E4 op_MOVE
000018B0 MOVE2
0000192C MOVE1
000019AC MOVE3
000019F0 op_MOVE_xxx_FLAGS
00001B06 MOVE4
00001BE4 op_EXT
00001C10 op_SWAP
00001C26 op_LEAPEA
00001CBE LEA1
00001CD2 op_TAS
00001CFA op_TST
00001D40 op_LINKS
00001D5E op_MOVE_USP
00001D6E op_CHK
00001DA8 op_NEGS
00002136 op_MOVEM
00002454 op_ABCD
00002474 ABCD_OUTER1
00002476 ABCD_INNER1
00002492 ABCD_NO_C1
0000249A ABCD_NO_C2
000024E2 ABCD_OUTER2
000024E4 ABCD_INNER2
00002500 ABCD_NO_C3
00002508 ABCD_NO_C4
00002552 op_SBCD
00002572 SBCD_OUTER1
00002574 SBCD_INNER1
00002590 SBCD_NO_C1
00002598 SBCD_NO_C2
000025E0 SBCD_OUTER2
000025E2 SBCD_INNER2
000025FE SBCD_NO_C3
00002606 SBCD_NO_C4
00002650 op_NBCD
00002668 NBCD_LOOP
00002674 NBCD_NO_C
00002678 NBCD_NO_Z
000026AE NBCD_LOOP1
000026C2 NBCD_NO_C1
000026C6 NBCD_NO_Z1
000026E2 op_TRAPV
000026FE op_RTR
0000270C RTR_DONE
0000271A BSR_FAR2
00002722 op_BCC
0000272A BCC1
00002734 BCC2
0000273C BCC3
00002746 BCC4
0000274E BCC5
00002758 BCC6
00002760 BCC7
0000276A BCC8
00002772 BCC9
0000277C BCC10
00002784 BCC11
0000278E BCC12
00002796 BCC13
000027A0 BCC14
000027A2 op_DBCC
000027AA DBCC_LOOP1
000027B8 DBCC_LOOP2
000027C8 op_SCC
000027F0 op_ADDQ
00002804 ADDQ_LOOP1
00002842 ADDQ_LOOP2
00002878 ADDQ_LOOP3
000028AA op_SUBQ
000028C2 SUBQ_LOOP1
000028FC SUBQ_LOOP2
00002932 SUBQ_LOOP3
00002964 op_MOVEQ
00002980 op_DIVU
0000299C DIVU_OUTER1
000029D2 op_DIVS
000029EE DIVS_OUTER1
00002A24 op_OR
00002A44 OR_OUTER1
00002AB8 OR_OUTER2
00002B0E op_AND
00002B2E AND_OUTER1
00002BA2 AND_OUTER2
00002BF8 op_EOR
00002C18 EOR_OUTER2
00002C6E op_CMP
00002C8E CMP_OUTER1
00002CE4 op_CMPA
00002D04 CMPA_OUTER1
00002D4A op_CMPM
00002D92 CMPM_LOOP1
00002DAC CMPM_LOOP2
00002DC6 CMPM_LOOP3
00002DF0 op_ADD
00002E10 ADD_OUTER1
00002E84 ADD_OUTER2
00002EDA op_SUB
00002EFA SUB_OUTER1
00002F6E SUB_OUTER2
00002FC4 op_ADDA
00002FEA ADDA_OUTER1
00003010 op_SUBA
00003036 SUBA_OUTER1
0000305C op_ADDX
0000307C ADDX_OUTER1
00003110 ADDX_LOOP3
0000312C ADDX_LOOP4
00003148 ADDX_LOOP5
0000316C op_SUBX
0000318C SUBX_OUTER1
00003220 SUBX_LOOP3
0000323C SUBX_LOOP4
00003258 SUBX_LOOP5
0000327C op_MULU
00003298 MULU_OUTER1
000032C8 op_MULS
000032E4 MULS_OUTER1
00003314 op_EXG
00003376 ROx_FLAGS
00003382 op_ROx
0000338C ROx_LOOP1
000033AC ROx_LOOP2
000033CC ROx_LOOP3
000033EC ROx_LOOP4
0000340C ROx_LOOP5
0000342E ROx_LOOP6
000035AC ROXx_FLAGS
000035B8 op_ROXx
000035C2 ROXx_LOOP1
000035E2 ROXx_LOOP2
00003602 ROXx_LOOP3
00003622 ROXx_LOOP4
00003642 ROXx_LOOP5
00003664 ROXx_LOOP6
000037E2 SHIFTS_FLAGS
000037EE op_SHIFTS
000037F8 SHIFTS_LOOP1
00003818 SHIFTS_LOOP2
00003838 SHIFTS_LOOP3
00003858 SHIFTS_LOOP4
00003878 SHIFTS_LOOP5
0000389A SHIFTS_LOOP6
00003A24 SHIFTS2_FLAGS
00003A30 op_SHIFTS2
00003A3A SHIFTS2_LOOP1
00003A56 SHIFTS2_LOOP2
00003A72 SHIFTS2_LOOP3
00003A8E SHIFTS2_LOOP4
00003AAA SHIFTS2_LOOP5
00003AC8 SHIFTS2_LOOP6
00003C4E get_screen_color
00003C7A clear_screen
00003CA4 loop3
00003CAE CRLF
00003CC0 CalcScreenLoc
00003CF4 DisplayChar
00003D0E dccr
00003D2A dcx14
00003D2E dcx7
00003D34 dcx6
00003D4A dcx8
00003D60 dcx9
00003D7E dcx10
00003D94 dcx12
00003D9C dcx11
00003DEA dclf
00003DEE dcx16
00003DF2 dcx4
00003DFC doBackspace
00003E0A doDelete
00003E46 doCtrlX
00003E6A IncCursorPos
00003E8A IncCursorRow
00003EBC icc1
00003EBE ScrollUp
00003EEE BlankLastLine
00003F1A DisplayString
00003F1E dspj1
00003F2C dsret
00003F32 DisplayStringCRLF
00003F38 SyncCursor
00003F54 _KeybdInit
00003F62 _KeybdGetStatus
00003F6A _KeybdGetScancode
00003F7C KeybdRecvByte
00003F9C KeybdWaitTx
00003FC2 CheckForKey
00003FD0 cfk1
00003FD4 GetKey
00003FEC gk1
00003FEE KeybdGetCharNoWait
00003FF6 KeybdGetCharWait
00003FFE KeybdGetChar
000041C0 KeybdSetLEDStatus
0000422C KeybdSendByte
00004234 Wait10ms
00004244 _unshiftedScanCodes
00004344 _shiftedScanCodes
00004444 _keybdControlCodes
000044C4 _keybdExtendedCodes
00004544 FromScreen
00004550 StartMon
00004550 Monitor
00004556 PromptLn
00004562 Prompt3
00004572 Prompt1
00004584 Prompt2
000045E0 TestCLS
00004604 DisplayHelp
00004610 HelpMsg
000046AC GetCmdLine
00004750 FillMem
00004772 fmemL
0000477C fmem1
00004782 fmemW
0000478C fmemB
00004796 ignBlanks
000047A8 EditMem
000047AE edtmem1
000047E2 ExecuteCode
000047EE DumpMem
0000480A DumpMem1
0000481E GetHexNumber
00004848 AsciiToHexNybble
0000485A gthx5
00004870 gthx6
00004886 gthx3
0000488A DisplayNybble
0000489C dispnyb1
000048A4 DisplayByte
000048AC DisplayTetra
000048BC AudioInputTest
000048BE BouncingBalls
000048C0 GraphicsDemo
000048C2 LoadS19
000048C4 ClearScreen
000048CA brdisp_trap
000048D4 msg_start

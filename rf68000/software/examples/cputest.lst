Sections:
00: "CODE" (0-3C14)


Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
00:00000000 610000F6        	    84: 	bsr	op_ORI_TO_CCR
00:00000004 61000116        	    85: 	bsr	op_ORI_TO_SR
00:00000008 6100013C        	    86: 	bsr	op_EORI_TO_CCR
00:0000000C 61000160        	    87: 	bsr	op_EORI_TO_SR
00:00000010 6100018C        	    88: 	bsr	op_ANDI_TO_CCR
00:00000014 610001AE        	    89: 	bsr	op_ANDI_TO_SR
00:00000018 610001DA        	    90: 	bsr	op_BTST
00:0000001C 61000580        	    91: 	bsr	op_BCHG
00:00000020 610008E4        	    92: 	bsr	op_BCLR
00:00000024 61000C30        	    93: 	bsr	op_BSET
00:00000028 61000FD2        	    94: 	bsr op_MOVEP
00:0000002C 61001062        	    95: 	bsr op_BOOL_I
00:00000030 6100125A        	    96: 	bsr op_CMP_I
00:00000034 61001442        	    97: 	bsr op_ADD_I
00:00000038 610015C4        	    98: 	bsr op_SUB_I
00:0000003C 61001746        	    99: 	bsr op_MOVE
00:00000040 6100194E        	   100: 	bsr op_MOVE_xxx_FLAGS
00:00000044 61001B62        	   101: 	bsr op_EXT
00:00000048 61001B8A        	   102: 	bsr op_SWAP
00:0000004C 61001B9C        	   103: 	bsr op_LEAPEA
00:00000050 61001C46        	   104: 	bsr op_TAS
00:00000054 61001C6A        	   105: 	bsr op_TST
00:00000058 61001CAC        	   106: 	bsr op_LINKS
00:0000005C 61001CC6        	   107: 	bsr op_MOVE_USP
                            	   108: *	bsr op_CHK
00:00000060 61001D0C        	   109: 	bsr op_NEGS
00:00000064 61002096        	   110: 	bsr op_MOVEM
                            	   111: ** fails
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
                            	   115: *	bsr op_TRAPV
00:00000068 6100265A        	   116: 	bsr op_RTR
00:0000006C 610011E8        	   117: 	bsr op_BSR
00:00000070 61002676        	   118: 	bsr op_BCC
00:00000074 610026F2        	   119: 	bsr op_DBCC
00:00000078 61002714        	   120: 	bsr op_SCC
00:0000007C 61002738        	   121: 	bsr op_ADDQ
00:00000080 610027EE        	   122: 	bsr op_SUBQ
00:00000084 610028A4        	   123: 	bsr op_MOVEQ
                            	   124: *** fails
                            	   125: *	bsr op_DIVU
                            	   126: *	bsr op_DIVS
00:00000088 61002960        	   127: 	bsr op_OR
00:0000008C 61002A46        	   128: 	bsr op_AND
00:00000090 61002B2C        	   129: 	bsr op_EOR
00:00000094 61002B9E        	   130: 	bsr op_CMP
00:00000098 61002C10        	   131: 	bsr op_CMPA
00:0000009C 61002C72        	   132: 	bsr op_CMPM
00:000000A0 61002D14        	   133: 	bsr op_ADD
00:000000A4 61002DFA        	   134: 	bsr op_SUB
00:000000A8 61002EE0        	   135: 	bsr op_ADDA
00:000000AC 61002F28        	   136: 	bsr op_SUBA
00:000000B0 61002F70        	   137: 	bsr op_ADDX
00:000000B4 6100307C        	   138: 	bsr op_SUBX
00:000000B8 61003188        	   139: 	bsr op_MULU
00:000000BC 610031D0        	   140: 	bsr op_MULS
00:000000C0 61003218        	   141: 	bsr op_EXG
00:000000C4 61003282        	   142: 	bsr op_ROx
00:000000C8 610034B4        	   143: 	bsr op_ROXx
00:000000CC 610036E6        	   144: 	bsr op_SHIFTS
00:000000D0 61003924        	   145: 	bsr op_SHIFTS2
                            	   146: 
00:000000D4 4E75            	   147: 	rts
                            	   148: 	bra ALL_DONE
                            	   149: 
                            	   150: * Loop here when all tests pass
                            	   151: *
                            	   152: 
00:000000D6 60FE            	   153: ALL_DONE: bra.s ALL_DONE
                            	   154: 
00:000000D8 263C33333333    	   155: BSR_FAR1:       move.l #$33333333,d3
00:000000DE 4E75            	   156:                 rts
                            	   157: 
                            	   158: ;	moveq		#-1,d0
                            	   159: ;	move.l	d0,$FD0FFF00
                            	   160: ;do_nothing:
                            	   161: ;	bra			*		
                            	   162: 
                            	   163: 
                            	   164: * Exception Vector = 6   CHK Instruction
                            	   165: *
                            	   166: 	align	4
                            	   167: EXCEPTION_6:
00:000000E0 2C3CEEEE0006    	   168: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:000000E6 4E73            	   169: 	rte
                            	   170: 
                            	   171: * Exception Vector = 7   TRAPV Instruction
                            	   172: *
                            	   173: 	align	4
                            	   174: EXCEPTION_7:
00:000000F0 203C12345678    	   175: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:000000F6 4E73            	   176: 	rte
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_CCR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: op_ORI_TO_CCR:
                            	   184: 
00:000000F8 003C00FF        	   185:     ori.b #$FF,CCR
00:000000FC 6AFE            	   186:     bpl.s *                   ; branch if Z clear
00:000000FE 66FE            	   187:     bne.s *                   ; branch if N clear
00:00000100 68FE            	   188:     bvc.s *                   ; branch if V clear
00:00000102 64FE            	   189:     bcc.s *                   ; branch if C clear
                            	   190: 
00:00000104 44FC0000        	   191:     move #$00,CCR
00:00000108 003C0000        	   192:     ori.b #$00,CCR
00:0000010C 67FE            	   193:     beq.s *                   ; branch if Z set
00:0000010E 6BFE            	   194:     bmi.s *                   ; branch if N set
00:00000110 69FE            	   195:     bvs.s *                   ; branch if V set
00:00000112 65FE            	   196:     bcs.s *                   ; branch if C set
                            	   197: 
00:00000114 47FCFF002700    	   198:     move.l #$FF002700,SR          ; Put flags back to initial value
                            	   199: 
00:0000011A 4E75            	   200:     rts
                            	   201: 
                            	   202: ;-----------------------------------------------------------
                            	   203: ;-----------------------------------------------------------
                            	   204: ; OPCODE : ORI_TO_SR
                            	   205: ;-----------------------------------------------------------
                            	   206: ;-----------------------------------------------------------
                            	   207: 
                            	   208: op_ORI_TO_SR:
                            	   209: 
00:0000011C 00BCFF002FFF    	   210:     ori.l #$FF002FFF,SR
00:00000122 6AFE            	   211:     bpl.s *                   * branch if Z clear
00:00000124 66FE            	   212:     bne.s *                   * branch if N clear
00:00000126 68FE            	   213:     bvc.s *                   * branch if V clear
00:00000128 64FE            	   214:     bcc.s *                   * branch if C clear
                            	   215: 
00:0000012A 47FCFF002000    	   216:     move.l #$FF002000,SR
00:00000130 00BC00000000    	   217:     ori.l #$0000,SR
00:00000136 67FE            	   218:     beq.s *                   * branch if Z set
00:00000138 6BFE            	   219:     bmi.s *                   * branch if N set
00:0000013A 69FE            	   220:     bvs.s *                   * branch if V set
00:0000013C 65FE            	   221:     bcs.s *                   * branch if C set
                            	   222: 
00:0000013E 47FCFF002700    	   223:     move.l #$FF002700,SR         * Put flags back to initial value
                            	   224: 
00:00000144 4E75            	   225:     rts
                            	   226: ; 
                            	   227: ;-----------------------------------------------------------
                            	   228: ;-----------------------------------------------------------
                            	   229: ; OPCODE : EORI_TO_CCR
                            	   230: ;-----------------------------------------------------------
                            	   231: ;-----------------------------------------------------------
                            	   232: op_EORI_TO_CCR:
                            	   233: 
00:00000146 44FC0000        	   234:     move #$00,CCR
00:0000014A 0A3C00FF        	   235:     eori.b #$FF,CCR
00:0000014E 6AFE            	   236:     bpl.s *                   ; branch if Z clear
00:00000150 66FE            	   237:     bne.s *                   ; branch if N clear
00:00000152 68FE            	   238:     bvc.s *                   ; branch if V clear
00:00000154 64FE            	   239:     bcc.s *                   ; branch if C clear
                            	   240: 
00:00000156 44FC0000        	   241:     move #$00,CCR
00:0000015A 0A3C0000        	   242:     eori.b #$00,CCR
00:0000015E 67FE            	   243:     beq.s *                   ; branch if Z set
00:00000160 6BFE            	   244:     bmi.s *                   ; branch if N set
00:00000162 69FE            	   245:     bvs.s *                   ; branch if V set
00:00000164 65FE            	   246:     bcs.s *                   ; branch if C set
                            	   247: 
00:00000166 47FCFF002700    	   248:     move.l #$FF002700,SR           ; Put flags back to initial value
                            	   249: 
00:0000016C 4E75            	   250:     rts
                            	   251: 
                            	   252: 
                            	   253: 
                            	   254: *-----------------------------------------------------------
                            	   255: *-----------------------------------------------------------
                            	   256: * OPCODE : EORI_TO_SR
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: op_EORI_TO_SR:
                            	   260: 
00:0000016E 47FCFF002000    	   261:     move.l #$FF002000,SR
00:00000174 0ABC00000FFF    	   262:     eori.l #$0FFF,SR
00:0000017A 6AFE            	   263:     bpl.s *                   * branch if Z clear
00:0000017C 66FE            	   264:     bne.s *                   * branch if N clear
00:0000017E 68FE            	   265:     bvc.s *                   * branch if V clear
00:00000180 64FE            	   266:     bcc.s *                   * branch if C clear
                            	   267: 
00:00000182 47FCFF002000    	   268:     move.l #$FF002000,SR
00:00000188 0ABC00000000    	   269:     eori.l #$0000,SR
00:0000018E 67FE            	   270:     beq.s *                   * branch if Z set
00:00000190 6BFE            	   271:     bmi.s *                   * branch if N set
00:00000192 69FE            	   272:     bvs.s *                   * branch if V set
00:00000194 65FE            	   273:     bcs.s *                   * branch if C set
                            	   274: 
00:00000196 47FCFF002700    	   275:     move.l #$FF002700,SR          * Put flags back to initial value
                            	   276: 
00:0000019C 4E75            	   277:     rts
                            	   278: 
                            	   279: 
                            	   280: 
                            	   281: *-----------------------------------------------------------
                            	   282: *-----------------------------------------------------------
                            	   283: * OPCODE : ANDI_TO_CCR
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: op_ANDI_TO_CCR:
                            	   287: 
00:0000019E 44FC00FF        	   288:     move #$FF,CCR
00:000001A2 023C00FF        	   289:     andi.b #$FF,CCR
00:000001A6 6AFE            	   290:     bpl.s *                   * branch if Z clear
00:000001A8 66FE            	   291:     bne.s *                   * branch if N clear
00:000001AA 68FE            	   292:     bvc.s *                   * branch if V clear
00:000001AC 64FE            	   293:     bcc.s *                   * branch if C clear
                            	   294: 
00:000001AE 44FC00FF        	   295:     move #$FF,CCR
00:000001B2 023C0000        	   296:     andi.b #$00,CCR
00:000001B6 67FE            	   297:     beq.s *                   * branch if Z set
00:000001B8 6BFE            	   298:     bmi.s *                   * branch if N set
00:000001BA 69FE            	   299:     bvs.s *                   * branch if V set
00:000001BC 65FE            	   300:     bcs.s *                   * branch if C set
                            	   301: 
00:000001BE 46FC2700        	   302:     move #$2700,SR           * Put flags back to initial value
                            	   303: 
00:000001C2 4E75            	   304:     rts
                            	   305: 
                            	   306: 
                            	   307: 
                            	   308: *-----------------------------------------------------------
                            	   309: *-----------------------------------------------------------
                            	   310: * OPCODE : ANDI_TO_SR
                            	   311: *-----------------------------------------------------------
                            	   312: *-----------------------------------------------------------
                            	   313: op_ANDI_TO_SR:
00:000001C4 47FCFF0020FF    	   314:     move.l #$FF0020FF,SR
00:000001CA 02BCFFFFFFFF    	   315:     andi.l #$FFFFFFFF,SR
00:000001D0 6AFE            	   316:     bpl.s *                   * branch if Z clear
00:000001D2 66FE            	   317:     bne.s *                   * branch if N clear
00:000001D4 68FE            	   318:     bvc.s *                   * branch if V clear
00:000001D6 64FE            	   319:     bcc.s *                   * branch if C clear
                            	   320: 
00:000001D8 47FCFF0020FF    	   321:     move.l #$FF0020FF,SR
00:000001DE 02BCFFFFFF00    	   322:     andi.l #$FFFFFF00,SR
00:000001E4 67FE            	   323:     beq.s *                   * branch if Z set
00:000001E6 6BFE            	   324:     bmi.s *                   * branch if N set
00:000001E8 69FE            	   325:     bvs.s *                   * branch if V set
00:000001EA 65FE            	   326:     bcs.s *                   * branch if C set
                            	   327: 
00:000001EC 47FCFF002700    	   328:     move.l #$FF002700,SR           * Put flags back to initial value
                            	   329: 
00:000001F2 4E75            	   330:     rts
                            	   331: 
                            	   332: 
                            	   333: *-----------------------------------------------------------
                            	   334: *-----------------------------------------------------------
                            	   335: * OPCODE : BTST
                            	   336: *-----------------------------------------------------------
                            	   337: *-----------------------------------------------------------
                            	   338: op_BTST:
                            	   339: 
                            	   340: *  Bit Number.s Static
                            	   341: 
                            	   342: *             EA = Dn  - LONG only
00:000001F4 203C80000001    	   343:             move.l #$80000001,d0      * populate test data
00:000001FA 08000000        	   344:             btst.l #0,d0
00:000001FE 67FE            	   345:             beq.s *               * branch if Z set
00:00000200 08000001        	   346:             btst.l #1,d0              *
00:00000204 66FE            	   347:             bne.s *               * branch if Z clear
00:00000206 0800001F        	   348:             btst.l #31,d0             *
00:0000020A 67FE            	   349:             beq.s *               * branch if Z set
                            	   350: 
                            	   351: 
                            	   352: *             EA = (An)  - BYTE only
00:0000020C 307C0100        	   353:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000210 10BC0081        	   354:             move.b #$81,(a0)          * populate test data
00:00000214 1210            	   355:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00000216 08100000        	   356:             btst.b #0,(a0)
00:0000021A 67FE            	   357:             beq.s *               * branch if Z set
00:0000021C 08100001        	   358:             btst.b #1,(a0)            *
00:00000220 66FE            	   359:             bne.s *               * branch if Z clear
00:00000222 08100007        	   360:             btst.b #7,(a0)            *
00:00000226 67FE            	   361:             beq.s *               * branch if Z set
                            	   362: 
                            	   363: 
                            	   364: *             EA = (An)+  - BYTE only
00:00000228 307C0100        	   365:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000022C 10FC0001        	   366:             move.b #$01,(a0)+         * populate test data
00:00000230 10FC00FC        	   367:             move.b #$FC,(a0)+         * populate test data
00:00000234 10FC0080        	   368:             move.b #$80,(a0)+         * populate test data
00:00000238 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000023C 08180000        	   370:             btst.b #0,(a0)+
00:00000240 67FE            	   371:             beq.s *               * branch if Z set
00:00000242 08180001        	   372:             btst.b #1,(a0)+           *
00:00000246 66FE            	   373:             bne.s *               * branch if Z clear
00:00000248 08180007        	   374:             btst.b #7,(a0)+           *
00:0000024C 67FE            	   375:             beq.s *               * branch if Z set
                            	   376: 
                            	   377: 
                            	   378: *             EA = -(An)  - BYTE only
00:0000024E 307C0100        	   379:             move.l #$00000100,a0      * point to memory to address
00:00000252 10FC0080        	   380:             move.b #$80,(a0)+         * populate test data
00:00000256 10FC00FC        	   381:             move.b #$FC,(a0)+         * populate test data
00:0000025A 10FC0001        	   382:             move.b #$01,(a0)+         * populate test data
00:0000025E 307C0103        	   383:             move.l #$00000103,a0      * point to memory to address
00:00000262 08200000        	   384:             btst.b #0,-(a0)
00:00000266 67FE            	   385:             beq.s *               * branch if Z set
00:00000268 08200001        	   386:             btst.b #1,-(a0)           *
00:0000026C 66FE            	   387:             bne.s *               * branch if Z clear
00:0000026E 08200007        	   388:             btst.b #7,-(a0)           *
00:00000272 67FE            	   389:             beq.s *               * branch if Z set
                            	   390: 
                            	   391: 
                            	   392: *             EA = n(An)  - BYTE only
00:00000274 307C0100        	   393:             move.l #$00000100,a0      * point to memory to address
00:00000278 10FC0001        	   394:             move.b #$01,(a0)+         * populate test data
00:0000027C 10FC00FC        	   395:             move.b #$FC,(a0)+         * populate test data
00:00000280 10FC0080        	   396:             move.b #$80,(a0)+         * populate test data
00:00000284 307C0100        	   397:             move.l #$00000100,a0      * point to memory to address
00:00000288 08100000        	   398:             btst.b #0,0(a0)
00:0000028C 67FE            	   399:             beq.s *               * branch if Z set
00:0000028E 082800010001    	   400:             btst.b #1,1(a0)           *
00:00000294 66FE            	   401:             bne.s *               * branch if Z clear
00:00000296 082800070002    	   402:             btst.b #7,2(a0)           *
00:0000029C 67FE            	   403:             beq.s *               * branch if Z set
                            	   404: 
                            	   405: 
                            	   406: *             EA = n(An,R.W)  - BYTE only
00:0000029E 307C0100        	   407:             move.l #$00000100,a0      * point to memory to address
00:000002A2 93C9            	   408:             move.l #$00000000,a1      * point to memory to address
00:000002A4 347C0001        	   409:             move.l #$00000001,a2      * point to memory to address
00:000002A8 7000            	   410:             moveq  #$00000000,d0      * point to memory to address
00:000002AA 7201            	   411:             moveq  #$00000001,d1      * point to memory to address
00:000002AC 083000000000    	   412:             btst.b #0,0(a0,d0.w)
00:000002B2 67FE            	   413:             beq.s *               * branch if Z set
00:000002B4 083000011000    	   414:             btst.b #1,0(a0,d1.w)      *
00:000002BA 66FE            	   415:             bne.s *               * branch if Z clear
00:000002BC 083000071001    	   416:             btst.b #7,1(a0,d1.w)      *
00:000002C2 67FE            	   417:             beq.s *               * branch if Z set
                            	   418: *             EA = n(An,R.L)  - BYTE only
00:000002C4 083000000800    	   419:             btst.b #0,0(a0,d0.l)
00:000002CA 67FE            	   420:             beq.s *               * branch if Z set
00:000002CC 083000011800    	   421:             btst.b #1,0(a0,d1.l)      *
00:000002D2 66FE            	   422:             bne.s *               * branch if Z clear
00:000002D4 083000071801    	   423:             btst.b #7,1(a0,d1.l)      *
00:000002DA 67FE            	   424:             beq.s *               * branch if Z set
                            	   425: *             EA = n(An,A.W)  - BYTE only
00:000002DC 083000009000    	   426:             btst.b #0,0(a0,a1.w)
00:000002E2 67FE            	   427:             beq.s *               * branch if Z set
00:000002E4 08300001A000    	   428:             btst.b #1,0(a0,a2.w)      *
00:000002EA 66FE            	   429:             bne.s *               * branch if Z clear
00:000002EC 08300007A001    	   430:             btst.b #7,1(a0,a2.w)      *
00:000002F2 67FE            	   431:             beq.s *               * branch if Z set
                            	   432: *             EA = n(An,A.L)  - BYTE only
00:000002F4 083000009800    	   433:             btst.b #0,0(a0,a1.l)
00:000002FA 67FE            	   434:             beq.s *               * branch if Z set
00:000002FC 08300001A800    	   435:             btst.b #1,0(a0,a2.l)      *
00:00000302 66FE            	   436:             bne.s *               * branch if Z clear
00:00000304 08300007A801    	   437:             btst.b #7,1(a0,a2.l)      *
00:0000030A 67FE            	   438:             beq.s *               * branch if Z set
                            	   439: 
                            	   440: 
                            	   441: *             EA = x.W  - BYTE only
00:0000030C 083800000100    	   442:             btst.b #0,$0100
00:00000312 67FE            	   443:             beq.s *               * branch if Z set
00:00000314 083800010101    	   444:             btst.b #1,$0101           *
00:0000031A 66FE            	   445:             bne.s *               * branch if Z clear
00:0000031C 083800070102    	   446:             btst.b #7,$0102           *
00:00000322 67FE            	   447:             beq.s *               * branch if Z set
                            	   448: 
                            	   449: 
                            	   450: *             EA = x.L  - BYTE only
00:00000324 207C0000F100    	   451:             move.l #$F100,a0      * point to memory to address 0x100
00:0000032A 10FC0001        	   452:             move.b #$01,(a0)+         * populate test data
00:0000032E 10FC00FC        	   453:             move.b #$FC,(a0)+         * populate test data
00:00000332 10FC0080        	   454:             move.b #$80,(a0)+         * populate test data
00:00000336 083900000000F100	   455:             btst.b #0,$F100
00:0000033E 67FE            	   456:             beq.s *               * branch if Z set
00:00000340 083900010000F101	   457:             btst.b #1,$F101       *
00:00000348 66FE            	   458:             bne.s *               * branch if Z clear
00:0000034A 083900070000F102	   459:             btst.b #7,$F102       *
00:00000352 67FE            	   460:             beq.s *               * branch if Z set
                            	   461: 
                            	   462: 
                            	   463: *             EA = x(PC)  - BYTE only
00:00000354 4BFAFE9E        	   464:             lea op_BTST(pc),a5
00:00000358 083A0000FE98    	   465:             btst.b #0,op_BTST(pc)
00:0000035E 66FE            	   466:             bne.s *               * branch if Z clear
00:00000360 083A0003001A    	   467:             btst.b #3,op_BTST0(pc)     *
00:00000366 67FE            	   468:             beq.s *               * branch if Z set
00:00000368 083A00060074    	   469:             btst.b #6,op_BTST12(pc)    *
00:0000036E 67FE            	   470:             beq.s *               * branch if Z set
                            	   471: 
                            	   472: 
                            	   473: *             EA = n(PC,R.W)  - BYTE only
00:00000370 307C0100        	   474:             move.l #$00000100,a0      * point to memory to address
00:00000374 93C9            	   475:             move.l #$00000000,a1      * point to memory to address
00:00000376 347C0001        	   476:             move.l #$00000001,a2      * point to memory to address
00:0000037A 7000            	   477:             moveq  #$00000000,d0      * point to memory to address
00:0000037C 7201            	   478:             moveq  #$00000001,d1      * point to memory to address
                            	   479: 
00:0000037E 083B000000FC    	   480: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:00000384 66FE            	   481:             bne.s *               * branch if Z clear
                            	   482: 
00:00000386 4BFB1002        	   483:             lea op_BTST1(pc,d1.w),a5
00:0000038A 083B000110FC    	   484: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:00000390 67FE            	   485:             beq.s *               * branch if Z set
00:00000392 083B000710FC    	   486: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:00000398 66FE            	   487:             bne.s *               * branch if Z clear
                            	   488: *             EA = n(PC,R.L)  - BYTE only
00:0000039A 083B000008FC    	   489: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:000003A0 66FE            	   490:             bne.s *               * branch if Z clear
00:000003A2 083B000118FC    	   491: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:000003A8 67FE            	   492:             beq.s *               * branch if Z set
00:000003AA 083B000718FC    	   493: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:000003B0 66FE            	   494:             bne.s *               * branch if Z clear
                            	   495: *             EA = n(PC,A.W)  - BYTE only
00:000003B2 083B000090FC    	   496: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:000003B8 66FE            	   497:             bne.s *               * branch if Z clear
00:000003BA 083B0001A0FC    	   498: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:000003C0 67FE            	   499:             beq.s *               * branch if Z set
00:000003C2 083B0007A0FC    	   500: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:000003C8 66FE            	   501:             bne.s *               * branch if Z clear
                            	   502: *             EA = n(PC,A.L)  - BYTE only
00:000003CA 083B000098FC    	   503: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:000003D0 66FE            	   504:             bne.s *               * branch if Z clear
00:000003D2 083B0001A8FC    	   505: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:000003D8 67FE            	   506:             beq.s *               * branch if Z set
00:000003DA 083B0007A8FC    	   507: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:000003E0 66FE            	   508: op_BTST12:  bne.s *               * branch if Z clear
                            	   509: 
                            	   510: 
                            	   511: 
                            	   512: * Bit Number.s Dynamic
                            	   513: 
                            	   514: *             EA = Dn  - LONG only
00:000003E2 203C80000001    	   515:             move.l #$80000001,d0      * populate test data
00:000003E8 7A00            	   516:             move.l #0,d5              * populate bit.s number to test
00:000003EA 7C01            	   517:             move.l #1,d6              * populate bit.s number to test
00:000003EC 7E1F            	   518:             move.l #31,d7              * populate bit.s number to test
                            	   519: 
00:000003EE 0B00            	   520:             btst.l d5,d0
00:000003F0 67FE            	   521:             beq.s *               * branch if Z set
00:000003F2 0D00            	   522:             btst.l d6,d0              *
00:000003F4 66FE            	   523:             bne.s *               * branch if Z clear
00:000003F6 0F00            	   524:             btst.l d7,d0             *
00:000003F8 67FE            	   525:             beq.s *               * branch if Z set
                            	   526: 
                            	   527: 
                            	   528: *             EA = (An)  - BYTE only
00:000003FA 7A00            	   529:             move.l #0,d5              * populate bit.s number to test
00:000003FC 7C01            	   530:             move.l #1,d6              * populate bit.s number to test
00:000003FE 7E07            	   531:             move.l #7,d7              * populate bit.s number to test
00:00000400 307C0100        	   532:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000404 10BC0081        	   533:             move.b #$81,(a0)          * populate test data
00:00000408 1210            	   534:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:0000040A 0B10            	   535:             btst.b d5,(a0)
00:0000040C 67FE            	   536:             beq.s *               * branch if Z set
00:0000040E 0D10            	   537:             btst.b d6,(a0)            *
00:00000410 66FE            	   538:             bne.s *               * branch if Z clear
00:00000412 0F10            	   539:             btst.b d7,(a0)            *
00:00000414 67FE            	   540:             beq.s *               * branch if Z set
                            	   541: 
                            	   542: * ---
                            	   543: 
                            	   544: 
                            	   545: *             EA = (An)+  - BYTE only
00:00000416 307C0100        	   546:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000041A 10FC0001        	   547:             move.b #$01,(a0)+         * populate test data
00:0000041E 10FC00FC        	   548:             move.b #$FC,(a0)+         * populate test data
00:00000422 10FC0080        	   549:             move.b #$80,(a0)+         * populate test data
00:00000426 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000042A 0B18            	   551:             btst.b d5,(a0)+
00:0000042C 67FE            	   552:             beq.s *               * branch if Z set
00:0000042E 0D18            	   553:             btst.b d6,(a0)+           *
00:00000430 66FE            	   554:             bne.s *               * branch if Z clear
00:00000432 0F18            	   555:             btst.b d7,(a0)+           *
00:00000434 67FE            	   556:             beq.s *               * branch if Z set
                            	   557: 
                            	   558: 
                            	   559: *             EA = -(An)  - BYTE only
00:00000436 307C0100        	   560:             move.l #$00000100,a0      * point to memory to address
00:0000043A 10FC0080        	   561:             move.b #$80,(a0)+         * populate test data
00:0000043E 10FC00FC        	   562:             move.b #$FC,(a0)+         * populate test data
00:00000442 10FC0001        	   563:             move.b #$01,(a0)+         * populate test data
00:00000446 307C0103        	   564:             move.l #$00000103,a0      * point to memory to address
00:0000044A 0B20            	   565:             btst.b d5,-(a0)
00:0000044C 67FE            	   566:             beq.s *               * branch if Z set
00:0000044E 0D20            	   567:             btst.b d6,-(a0)           *
00:00000450 66FE            	   568:             bne.s *               * branch if Z clear
00:00000452 0F20            	   569:             btst.b d7,-(a0)           *
00:00000454 67FE            	   570:             beq.s *               * branch if Z set
                            	   571: 
                            	   572: 
                            	   573: *             EA = n(An)  - BYTE only
00:00000456 307C0100        	   574:             move.l #$00000100,a0      * point to memory to address
00:0000045A 10FC0001        	   575:             move.b #$01,(a0)+         * populate test data
00:0000045E 10FC00FC        	   576:             move.b #$FC,(a0)+         * populate test data
00:00000462 10FC0080        	   577:             move.b #$80,(a0)+         * populate test data
00:00000466 307C0100        	   578:             move.l #$00000100,a0      * point to memory to address
00:0000046A 0B10            	   579:             btst.b d5,0(a0)
00:0000046C 67FE            	   580:             beq.s *               * branch if Z set
00:0000046E 0D280001        	   581:             btst.b d6,1(a0)           *
00:00000472 66FE            	   582:             bne.s *               * branch if Z clear
00:00000474 0F280002        	   583:             btst.b d7,2(a0)           *
00:00000478 67FE            	   584:             beq.s *               * branch if Z set
                            	   585: 
                            	   586: 
                            	   587: *             EA = n(An,R.W)  - BYTE only
00:0000047A 307C0100        	   588:             move.l #$00000100,a0      * point to memory to address
00:0000047E 93C9            	   589:             move.l #$00000000,a1      * point to memory to address
00:00000480 347C0001        	   590:             move.l #$00000001,a2      * point to memory to address
00:00000484 7000            	   591:             moveq  #$00000000,d0      * point to memory to address
00:00000486 7201            	   592:             moveq  #$00000001,d1      * point to memory to address
00:00000488 0B300000        	   593:             btst.b d5,0(a0,d0.w)
00:0000048C 67FE            	   594:             beq.s *               * branch if Z set
00:0000048E 0D301000        	   595:             btst.b d6,0(a0,d1.w)      *
00:00000492 66FE            	   596:             bne.s *               * branch if Z clear
00:00000494 0F301001        	   597:             btst.b d7,1(a0,d1.w)      *
00:00000498 67FE            	   598:             beq.s *               * branch if Z set
                            	   599: *             EA = n(An,R.L)  - BYTE only
00:0000049A 0B300800        	   600:             btst.b d5,0(a0,d0.l)
00:0000049E 67FE            	   601:             beq.s *               * branch if Z set
00:000004A0 0D301800        	   602:             btst.b d6,0(a0,d1.l)      *
00:000004A4 66FE            	   603:             bne.s *               * branch if Z clear
00:000004A6 0F301801        	   604:             btst.b d7,1(a0,d1.l)      *
00:000004AA 67FE            	   605:             beq.s *               * branch if Z set
                            	   606: *             EA = n(An,A.W)  - BYTE only
00:000004AC 0B309000        	   607:             btst.b d5,0(a0,a1.w)
00:000004B0 67FE            	   608:             beq.s *               * branch if Z set
00:000004B2 0D30A000        	   609:             btst.b d6,0(a0,a2.w)      *
00:000004B6 66FE            	   610:             bne.s *               * branch if Z clear
00:000004B8 0F30A001        	   611:             btst.b d7,1(a0,a2.w)      *
00:000004BC 67FE            	   612:             beq.s *               * branch if Z set
                            	   613: *             EA = n(An,A.L)  - BYTE only
00:000004BE 0B309800        	   614:             btst.b d5,0(a0,a1.l)
00:000004C2 67FE            	   615:             beq.s *               * branch if Z set
00:000004C4 0D30A800        	   616:             btst.b d6,0(a0,a2.l)      *
00:000004C8 66FE            	   617:             bne.s *               * branch if Z clear
00:000004CA 0F30A801        	   618:             btst.b d7,1(a0,a2.l)      *
00:000004CE 67FE            	   619:             beq.s *               * branch if Z set
                            	   620: 
                            	   621: 
                            	   622: *             EA = x.W  - BYTE only
00:000004D0 0B380100        	   623:             btst.b d5,$0100
00:000004D4 67FE            	   624:             beq.s *               * branch if Z set
00:000004D6 0D380101        	   625:             btst.b d6,$0101           *
00:000004DA 66FE            	   626:             bne.s *               * branch if Z clear
00:000004DC 0F380102        	   627:             btst.b d7,$0102           *
00:000004E0 67FE            	   628:             beq.s *               * branch if Z set
                            	   629: 
                            	   630: 
                            	   631: *             EA = x.L  - BYTE only
00:000004E2 207C0000F100    	   632:             move.l #$F100,a0      * point to memory to address 0x100
00:000004E8 10FC0001        	   633:             move.b #$01,(a0)+         * populate test data
00:000004EC 10FC00FC        	   634:             move.b #$FC,(a0)+         * populate test data
00:000004F0 10FC0080        	   635:             move.b #$80,(a0)+         * populate test data
00:000004F4 0B390000F100    	   636:             btst.b d5,$F100
00:000004FA 67FE            	   637:             beq.s *               * branch if Z set
00:000004FC 0D390000F101    	   638:             btst.b d6,$F101       *
00:00000502 66FE            	   639:             bne.s *               * branch if Z clear
00:00000504 0F390000F102    	   640:             btst.b d7,$F102       *
00:0000050A 67FE            	   641:             beq.s *               * branch if Z set
                            	   642: 
                            	   643: 
                            	   644: *             EA = x(PC)  - BYTE only
00:0000050C 7C03            	   645:             move.l #3,d6              * populate bit.s number to test
00:0000050E 7E06            	   646:             move.l #6,d7              * populate bit.s number to test
00:00000510 4BFAFCE2        	   647:             lea op_BTST(pc),a5
00:00000514 0B3AFCDE        	   648:             btst.b d5,op_BTST(pc)
00:00000518 66FE            	   649:             bne.s *               * branch if Z clear
00:0000051A 0D3AFE62        	   650:             btst.b d6,op_BTST0(pc)     *
00:0000051E 67FE            	   651:             beq.s *               * branch if Z set
00:00000520 0F3AFEBE        	   652:             btst.b d7,op_BTST12(pc)    *
00:00000524 67FE            	   653:             beq.s *               * branch if Z set
                            	   654: 
                            	   655: 
                            	   656: *             EA = n(PC,R.W)  - BYTE only
00:00000526 307C0100        	   657:             move.l #$00000100,a0      * point to memory to address
00:0000052A 93C9            	   658:             move.l #$00000000,a1      * point to memory to address
00:0000052C 347C0001        	   659:             move.l #$00000001,a2      * point to memory to address
00:00000530 7000            	   660:             moveq  #$00000000,d0      * point to memory to address
00:00000532 7201            	   661:             moveq  #$00000001,d1      * point to memory to address
00:00000534 7C01            	   662:             move.l #1,d6              * populate bit.s number to test
00:00000536 7E07            	   663:             move.l #7,d7              * populate bit.s number to test
                            	   664: 
00:00000538 0B3B00FE        	   665: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:0000053C 67FE            	   666:             beq.s *               * branch if Z set
00:0000053E 4BFB1002        	   667:             lea op_BTST21(pc,d1.w),a5
00:00000542 0D3B10FE        	   668: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:00000546 67FE            	   669:             beq.s *               * branch if Z set
00:00000548 0F3B10FE        	   670: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:0000054C 66FE            	   671:             bne.s *               * branch if Z clear
                            	   672: *             EA = n(PC,R.L)  - BYTE only
00:0000054E 0B3B08FE        	   673: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:00000552 67FE            	   674:             beq.s *               * branch if Z set
00:00000554 0D3B18FE        	   675: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:00000558 67FE            	   676:             beq.s *               * branch if Z set
00:0000055A 0F3B18FE        	   677: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:0000055E 66FE            	   678:             bne.s *               * branch if Z clear
                            	   679: *             EA = n(PC,A.W)  - BYTE only
00:00000560 0B3B90FE        	   680: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:00000564 67FE            	   681:             beq.s *               * branch if Z set
00:00000566 0D3BA0FE        	   682: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:0000056A 67FE            	   683:             beq.s *               * branch if Z set
00:0000056C 0F3BA0FE        	   684: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:00000570 66FE            	   685:             bne.s *               * branch if Z clear
                            	   686: *             EA = n(PC,A.L)  - BYTE only
00:00000572 0B3B98FE        	   687: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:00000576 67FE            	   688:             beq.s *               * branch if Z set
00:00000578 0D3BA8FE        	   689: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:0000057C 67FE            	   690:             beq.s *               * branch if Z set
00:0000057E 0F3BA8FE        	   691: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:00000582 66FE            	   692: op_BTST32:  bne.s *               * branch if Z clear
                            	   693: 
                            	   694: *             EA = #x  - BYTE only
                            	   695: 
00:00000584 7A00            	   696:             move.l #0,d5              * populate bit.s number to test
00:00000586 7C03            	   697:             move.l #3,d6              * populate bit.s number to test
00:00000588 7E07            	   698:             move.l #7,d7              * populate bit.s number to test
                            	   699: 
00:0000058A 0B3C0088        	   700:             btst.b d5,#$88
00:0000058E 66FE            	   701:             bne.s *               * branch if Z clear
00:00000590 0D3C0088        	   702:             btst.b d6,#$88
00:00000594 67FE            	   703:             beq.s *               * branch if Z set
00:00000596 0F3C0088        	   704:             btst.b d7,#$88
00:0000059A 67FE            	   705:             beq.s *               * branch if Z set
                            	   706: 
                            	   707: 
00:0000059C 4E75            	   708:     rts
                            	   709: 
                            	   710: *-----------------------------------------------------------
                            	   711: *-----------------------------------------------------------
                            	   712: * OPCODE : BCHG
                            	   713: *-----------------------------------------------------------
                            	   714: *-----------------------------------------------------------
                            	   715: op_BCHG:
                            	   716: 
                            	   717: 
                            	   718: *  Bit Number.s Static
                            	   719: 
                            	   720: *             EA = Dn  - LONG only
00:0000059E 203C80000001    	   721:             move.l #$80000001,d0      * populate test data
00:000005A4 08400000        	   722:             bchg.l #0,d0
00:000005A8 67FE            	   723:             beq.s *               * branch if Z set
00:000005AA 08400001        	   724:             bchg.l #1,d0              *
00:000005AE 66FE            	   725:             bne.s *               * branch if Z clear
00:000005B0 0840001F        	   726:             bchg.l #31,d0             *
00:000005B4 67FE            	   727:             beq.s *               * branch if Z set
00:000005B6 0C8000000002    	   728:             cmpi.l #$00000002,d0
00:000005BC 66FE            	   729:             bne.s *               * branch if Z clear
                            	   730: 
                            	   731: 
                            	   732: *             EA = (An)  - BYTE only
00:000005BE 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005C2 10BC0081        	   734:             move.b #$81,(a0)          * populate test data
00:000005C6 1210            	   735:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000005C8 08500000        	   736:             bchg.b #0,(a0)
00:000005CC 67FE            	   737:             beq.s *               * branch if Z set
00:000005CE 08500001        	   738:             bchg.b #1,(a0)            *
00:000005D2 66FE            	   739:             bne.s *               * branch if Z clear
00:000005D4 08500007        	   740:             bchg.b #7,(a0)            *
00:000005D8 67FE            	   741:             beq.s *               * branch if Z set
00:000005DA 0C100002        	   742:             cmpi.b #$02,(a0)
00:000005DE 66FE            	   743:             bne.s *               * branch if Z clear
                            	   744: 
                            	   745: *             EA = (An)+  - BYTE only
00:000005E0 307C0100        	   746:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005E4 10FC0001        	   747:             move.b #$01,(a0)+         * populate test data
00:000005E8 10FC00FC        	   748:             move.b #$FC,(a0)+         * populate test data
00:000005EC 10FC0080        	   749:             move.b #$80,(a0)+         * populate test data
00:000005F0 307C0100        	   750:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005F4 08580000        	   751:             bchg.b #0,(a0)+
00:000005F8 67FE            	   752:             beq.s *               * branch if Z set
00:000005FA 08580001        	   753:             bchg.b #1,(a0)+           *
00:000005FE 66FE            	   754:             bne.s *               * branch if Z clear
00:00000600 08580007        	   755:             bchg.b #7,(a0)+           *
00:00000604 67FE            	   756:             beq.s *               * branch if Z set
00:00000606 307C0100        	   757:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000060A 4A18            	   758:             cmpi.b #$00,(a0)+
00:0000060C 66FE            	   759:             bne.s *               * branch if Z clear
00:0000060E 0C1800FE        	   760:             cmpi.b #$FE,(a0)+
00:00000612 66FE            	   761:             bne.s *               * branch if Z clear
00:00000614 4A18            	   762:             cmpi.b #$00,(a0)+
00:00000616 66FE            	   763:             bne.s *               * branch if Z clear
                            	   764: 
                            	   765: *             EA = -(An)  - BYTE only
00:00000618 307C0100        	   766:             move.l #$00000100,a0      * point to memory to address
00:0000061C 10FC0080        	   767:             move.b #$80,(a0)+         * populate test data
00:00000620 10FC00FC        	   768:             move.b #$FC,(a0)+         * populate test data
00:00000624 10FC0001        	   769:             move.b #$01,(a0)+         * populate test data
00:00000628 307C0103        	   770:             move.l #$00000103,a0      * point to memory to address
00:0000062C 08600000        	   771:             bchg.b #0,-(a0)
00:00000630 67FE            	   772:             beq.s *               * branch if Z set
00:00000632 08600001        	   773:             bchg.b #1,-(a0)           *
00:00000636 66FE            	   774:             bne.s *               * branch if Z clear
00:00000638 08600007        	   775:             bchg.b #7,-(a0)           *
00:0000063C 67FE            	   776:             beq.s *               * branch if Z set
00:0000063E 307C0103        	   777:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000642 4A20            	   778:             cmpi.b #$00,-(a0)
00:00000644 66FE            	   779:             bne.s *               * branch if Z clear
00:00000646 0C2000FE        	   780:             cmpi.b #$FE,-(a0)
00:0000064A 66FE            	   781:             bne.s *               * branch if Z clear
00:0000064C 4A20            	   782:             cmpi.b #$00,-(a0)
00:0000064E 66FE            	   783:             bne.s *               * branch if Z clear
                            	   784: 
                            	   785: 
                            	   786: *             EA = n(An)  - BYTE only
00:00000650 307C0100        	   787:             move.l #$00000100,a0      * point to memory to address
00:00000654 10FC0001        	   788:             move.b #$01,(a0)+         * populate test data
00:00000658 10FC00FC        	   789:             move.b #$FC,(a0)+         * populate test data
00:0000065C 10FC0080        	   790:             move.b #$80,(a0)+         * populate test data
00:00000660 307C0100        	   791:             move.l #$00000100,a0      * point to memory to address
00:00000664 08500000        	   792:             bchg.b #0,0(a0)
00:00000668 67FE            	   793:             beq.s *               * branch if Z set
00:0000066A 086800010001    	   794:             bchg.b #1,1(a0)           *
00:00000670 66FE            	   795:             bne.s *               * branch if Z clear
00:00000672 086800070002    	   796:             bchg.b #7,2(a0)           *
00:00000678 67FE            	   797:             beq.s *               * branch if Z set
00:0000067A 307C0100        	   798:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000067E 4A18            	   799:             cmpi.b #$00,(a0)+
00:00000680 66FE            	   800:             bne.s *               * branch if Z clear
00:00000682 0C1800FE        	   801:             cmpi.b #$FE,(a0)+
00:00000686 66FE            	   802:             bne.s *               * branch if Z clear
00:00000688 4A18            	   803:             cmpi.b #$00,(a0)+
00:0000068A 66FE            	   804:             bne.s *               * branch if Z clear
                            	   805: 
                            	   806: 
                            	   807: *             EA = n(An,D.W)  - BYTE only
00:0000068C 307C0100        	   808:             move.l #$00000100,a0      * point to memory to address
00:00000690 93C9            	   809:             move.l #$00000000,a1      * point to memory to address
00:00000692 347C0001        	   810:             move.l #$00000001,a2      * point to memory to address
00:00000696 7000            	   811:             moveq  #$00000000,d0      * point to memory to address
00:00000698 7201            	   812:             moveq  #$00000001,d1      * point to memory to address
00:0000069A 087000000000    	   813:             bchg.b #0,0(a0,d0.w)
00:000006A0 66FE            	   814:             bne.s *               * branch if Z clear
00:000006A2 087000011000    	   815:             bchg.b #1,0(a0,d1.w)      *
00:000006A8 67FE            	   816:             beq.s *               * branch if Z set
00:000006AA 087000071001    	   817:             bchg.b #7,1(a0,d1.w)      *
00:000006B0 66FE            	   818:             bne.s *               * branch if Z clear
                            	   819: *             EA = n(An,D.L)  - BYTE only
00:000006B2 087000000800    	   820:             bchg.b #0,0(a0,d0.l)
00:000006B8 67FE            	   821:             beq.s *               * branch if Z set
00:000006BA 087000011800    	   822:             bchg.b #1,0(a0,d1.l)      *
00:000006C0 66FE            	   823:             bne.s *               * branch if Z clear
00:000006C2 087000071801    	   824:             bchg.b #7,1(a0,d1.l)      *
00:000006C8 67FE            	   825:             beq.s *               * branch if Z set
                            	   826: *             EA = n(An,A.W)  - BYTE only
00:000006CA 087000009000    	   827:             bchg.b #0,0(a0,a1.w)
00:000006D0 66FE            	   828:             bne.s *               * branch if Z clear
00:000006D2 08700001A000    	   829:             bchg.b #1,0(a0,a2.w)      *
00:000006D8 67FE            	   830:             beq.s *               * branch if Z set
00:000006DA 08700007A001    	   831:             bchg.b #7,1(a0,a2.w)      *
00:000006E0 66FE            	   832:             bne.s *               * branch if Z clear
                            	   833: *             EA = n(An,A.L)  - BYTE only
00:000006E2 087000009800    	   834:             bchg.b #0,0(a0,a1.l)
00:000006E8 67FE            	   835:             beq.s *               * branch if Z set
00:000006EA 08700001A800    	   836:             bchg.b #1,0(a0,a2.l)      *
00:000006F0 66FE            	   837:             bne.s *               * branch if Z clear
00:000006F2 08700007A801    	   838:             bchg.b #7,1(a0,a2.l)      *
00:000006F8 67FE            	   839:             beq.s *               * branch if Z set
00:000006FA 307C0100        	   840:             move.l #$00000100,a0      * point to memory to address 0x100
00:000006FE 4A18            	   841:             cmpi.b #$00,(a0)+
00:00000700 66FE            	   842:             bne.s *               * branch if Z clear
00:00000702 0C1800FE        	   843:             cmpi.b #$FE,(a0)+
00:00000706 66FE            	   844:             bne.s *               * branch if Z clear
00:00000708 4A18            	   845:             cmpi.b #$00,(a0)+
00:0000070A 66FE            	   846:             bne.s *               * branch if Z clear
                            	   847: 
                            	   848: 
                            	   849: *             EA = x.W  - BYTE only
00:0000070C 087800000100    	   850:             bchg.b #0,$0100
00:00000712 66FE            	   851:             bne.s *               * branch if Z clear
00:00000714 087800010101    	   852:             bchg.b #1,$0101           *
00:0000071A 67FE            	   853:             beq.s *               * branch if Z set
00:0000071C 087800070102    	   854:             bchg.b #7,$0102           *
00:00000722 66FE            	   855:             bne.s *               * branch if Z clear
00:00000724 307C0100        	   856:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000728 0C180001        	   857:             cmpi.b #$01,(a0)+
00:0000072C 66FE            	   858:             bne.s *               * branch if Z clear
00:0000072E 0C1800FC        	   859:             cmpi.b #$FC,(a0)+
00:00000732 66FE            	   860:             bne.s *               * branch if Z clear
00:00000734 0C180080        	   861:             cmpi.b #$80,(a0)+
00:00000738 66FE            	   862:             bne.s *               * branch if Z clear
                            	   863: 
                            	   864: *             EA = x.L  - BYTE only
00:0000073A 207C0000F100    	   865:             move.l #$F100,a0      * point to memory to address 0x100
00:00000740 10FC0001        	   866:             move.b #$01,(a0)+         * populate test data
00:00000744 10FC00FC        	   867:             move.b #$FC,(a0)+         * populate test data
00:00000748 10FC0080        	   868:             move.b #$80,(a0)+         * populate test data
00:0000074C 087900000000F100	   869:             bchg.b #0,$F100
00:00000754 67FE            	   870:             beq.s *               * branch if Z set
00:00000756 087900010000F101	   871:             bchg.b #1,$F101       *
00:0000075E 66FE            	   872:             bne.s *               * branch if Z clear
00:00000760 087900070000F102	   873:             bchg.b #7,$F102       *
00:00000768 67FE            	   874:             beq.s *               * branch if Z set
00:0000076A 307C0100        	   875:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000076E 0C180001        	   876:             cmpi.b #$01,(a0)+
00:00000772 66FE            	   877:             bne.s *               * branch if Z clear
00:00000774 0C1800FC        	   878:             cmpi.b #$FC,(a0)+
00:00000778 66FE            	   879:             bne.s *               * branch if Z clear
00:0000077A 0C180080        	   880:             cmpi.b #$80,(a0)+
00:0000077E 66FE            	   881:             bne.s *               * branch if Z clear
                            	   882: 
                            	   883: 
                            	   884: * Bit Number.s Dynamic
                            	   885: 
                            	   886: *             EA = Dn  - LONG only
00:00000780 203C80000001    	   887:             move.l #$80000001,d0      * populate test data
00:00000786 7A00            	   888:             move.l #0,d5              * populate bit.s number to test
00:00000788 7C01            	   889:             move.l #1,d6              * populate bit.s number to test
00:0000078A 7E1F            	   890:             move.l #31,d7              * populate bit.s number to test
                            	   891: 
00:0000078C 0B40            	   892:             bchg.l d5,d0
00:0000078E 67FE            	   893:             beq.s *               * branch if Z set
00:00000790 0D40            	   894:             bchg.l d6,d0              *
00:00000792 66FE            	   895:             bne.s *               * branch if Z clear
00:00000794 0F40            	   896:             bchg.l d7,d0             *
00:00000796 67FE            	   897:             beq.s *               * branch if Z set
00:00000798 0C8000000002    	   898:             cmpi.l #$00000002,d0
00:0000079E 66FE            	   899:             bne.s *               * branch if Z clear
                            	   900: 
                            	   901: 
                            	   902: *             EA = (An)  - BYTE only
00:000007A0 7A00            	   903:             move.l #0,d5              * populate bit.s number to test
00:000007A2 7C01            	   904:             move.l #1,d6              * populate bit.s number to test
00:000007A4 7E07            	   905:             move.l #7,d7              * populate bit.s number to test
00:000007A6 307C0100        	   906:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007AA 10BC0081        	   907:             move.b #$81,(a0)          * populate test data
00:000007AE 1210            	   908:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000007B0 0B50            	   909:             bchg.b d5,(a0)
00:000007B2 67FE            	   910:             beq.s *               * branch if Z set
00:000007B4 0D50            	   911:             bchg.b d6,(a0)            *
00:000007B6 66FE            	   912:             bne.s *               * branch if Z clear
00:000007B8 0F50            	   913:             bchg.b d7,(a0)            *
00:000007BA 67FE            	   914:             beq.s *               * branch if Z set
00:000007BC 0C100002        	   915:             cmpi.b #$02,(a0)
00:000007C0 66FE            	   916:             bne.s *               * branch if Z clear
                            	   917: 
                            	   918: 
                            	   919: *             EA = (An)+  - BYTE only
00:000007C2 307C0100        	   920:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007C6 10FC0001        	   921:             move.b #$01,(a0)+         * populate test data
00:000007CA 10FC00FC        	   922:             move.b #$FC,(a0)+         * populate test data
00:000007CE 10FC0080        	   923:             move.b #$80,(a0)+         * populate test data
00:000007D2 307C0100        	   924:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007D6 0B58            	   925:             bchg.b d5,(a0)+
00:000007D8 67FE            	   926:             beq.s *               * branch if Z set
00:000007DA 0D58            	   927:             bchg.b d6,(a0)+           *
00:000007DC 66FE            	   928:             bne.s *               * branch if Z clear
00:000007DE 0F58            	   929:             bchg.b d7,(a0)+           *
00:000007E0 67FE            	   930:             beq.s *               * branch if Z set
00:000007E2 307C0100        	   931:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007E6 4A18            	   932:             cmpi.b #$00,(a0)+
00:000007E8 66FE            	   933:             bne.s *               * branch if Z clear
00:000007EA 0C1800FE        	   934:             cmpi.b #$FE,(a0)+
00:000007EE 66FE            	   935:             bne.s *               * branch if Z clear
00:000007F0 4A18            	   936:             cmpi.b #$00,(a0)+
00:000007F2 66FE            	   937:             bne.s *               * branch if Z clear
                            	   938: 
                            	   939: *             EA = -(An)  - BYTE only
00:000007F4 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
00:000007F8 10FC0080        	   941:             move.b #$80,(a0)+         * populate test data
00:000007FC 10FC00FC        	   942:             move.b #$FC,(a0)+         * populate test data
00:00000800 10FC0001        	   943:             move.b #$01,(a0)+         * populate test data
00:00000804 307C0103        	   944:             move.l #$00000103,a0      * point to memory to address
00:00000808 0B60            	   945:             bchg.b d5,-(a0)
00:0000080A 67FE            	   946:             beq.s *               * branch if Z set
00:0000080C 0D60            	   947:             bchg.b d6,-(a0)           *
00:0000080E 66FE            	   948:             bne.s *               * branch if Z clear
00:00000810 0F60            	   949:             bchg.b d7,-(a0)           *
00:00000812 67FE            	   950:             beq.s *               * branch if Z set
00:00000814 307C0103        	   951:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000818 4A20            	   952:             cmpi.b #$00,-(a0)
00:0000081A 66FE            	   953:             bne.s *               * branch if Z clear
00:0000081C 0C2000FE        	   954:             cmpi.b #$FE,-(a0)
00:00000820 66FE            	   955:             bne.s *               * branch if Z clear
00:00000822 4A20            	   956:             cmpi.b #$00,-(a0)
00:00000824 66FE            	   957:             bne.s *               * branch if Z clear
                            	   958: 
                            	   959: *             EA = n(An)  - BYTE only
00:00000826 307C0100        	   960:             move.l #$00000100,a0      * point to memory to address
00:0000082A 10FC0001        	   961:             move.b #$01,(a0)+         * populate test data
00:0000082E 10FC00FC        	   962:             move.b #$FC,(a0)+         * populate test data
00:00000832 10FC0080        	   963:             move.b #$80,(a0)+         * populate test data
00:00000836 307C0100        	   964:             move.l #$00000100,a0      * point to memory to address
00:0000083A 0B50            	   965:             bchg.b d5,0(a0)
00:0000083C 67FE            	   966:             beq.s *               * branch if Z set
00:0000083E 0D680001        	   967:             bchg.b d6,1(a0)           *
00:00000842 66FE            	   968:             bne.s *               * branch if Z clear
00:00000844 0F680002        	   969:             bchg.b d7,2(a0)           *
00:00000848 67FE            	   970:             beq.s *               * branch if Z set
00:0000084A 307C0100        	   971:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000084E 4A18            	   972:             cmpi.b #$00,(a0)+
00:00000850 66FE            	   973:             bne.s *               * branch if Z clear
00:00000852 0C1800FE        	   974:             cmpi.b #$FE,(a0)+
00:00000856 66FE            	   975:             bne.s *               * branch if Z clear
00:00000858 4A18            	   976:             cmpi.b #$00,(a0)+
00:0000085A 66FE            	   977:             bne.s *               * branch if Z clear
                            	   978: 
                            	   979: *             EA = n(An,R.W)  - BYTE only
00:0000085C 307C0100        	   980:             move.l #$00000100,a0      * point to memory to address
00:00000860 93C9            	   981:             move.l #$00000000,a1      * point to memory to address
00:00000862 347C0001        	   982:             move.l #$00000001,a2      * point to memory to address
00:00000866 7000            	   983:             moveq  #$00000000,d0      * point to memory to address
00:00000868 7201            	   984:             moveq  #$00000001,d1      * point to memory to address
00:0000086A 0B700000        	   985:             bchg.b d5,0(a0,d0.w)
00:0000086E 66FE            	   986:             bne.s *               * branch if Z clear
00:00000870 0D701000        	   987:             bchg.b d6,0(a0,d1.w)      *
00:00000874 67FE            	   988:             beq.s *               * branch if Z set
00:00000876 0F701001        	   989:             bchg.b d7,1(a0,d1.w)      *
00:0000087A 66FE            	   990:             bne.s *               * branch if Z clear
                            	   991: *             EA = n(An,R.L)  - BYTE only
00:0000087C 0B700800        	   992:             bchg.b d5,0(a0,d0.l)
00:00000880 67FE            	   993:             beq.s *               * branch if Z set
00:00000882 0D701800        	   994:             bchg.b d6,0(a0,d1.l)      *
00:00000886 66FE            	   995:             bne.s *               * branch if Z clear
00:00000888 0F701801        	   996:             bchg.b d7,1(a0,d1.l)      *
00:0000088C 67FE            	   997:             beq.s *               * branch if Z set
                            	   998: *             EA = n(An,A.W)  - BYTE only
00:0000088E 0B709000        	   999:             bchg.b d5,0(a0,a1.w)
00:00000892 66FE            	  1000:             bne.s *               * branch if Z clear
00:00000894 0D70A000        	  1001:             bchg.b d6,0(a0,a2.w)      *
00:00000898 67FE            	  1002:             beq.s *               * branch if Z set
00:0000089A 0F70A001        	  1003:             bchg.b d7,1(a0,a2.w)      *
00:0000089E 66FE            	  1004:             bne.s *               * branch if Z clear
                            	  1005: *             EA = n(An,A.L)  - BYTE only
00:000008A0 0B709800        	  1006:             bchg.b d5,0(a0,a1.l)
00:000008A4 67FE            	  1007:             beq.s *               * branch if Z set
00:000008A6 0D70A800        	  1008:             bchg.b d6,0(a0,a2.l)      *
00:000008AA 66FE            	  1009:             bne.s *               * branch if Z clear
00:000008AC 0F70A801        	  1010:             bchg.b d7,1(a0,a2.l)      *
00:000008B0 67FE            	  1011:             beq.s *               * branch if Z set
00:000008B2 4A18            	  1012:             cmpi.b #$00,(a0)+
00:000008B4 66FE            	  1013:             bne.s *               * branch if Z clear
                            	  1014: 
                            	  1015: *             EA = x.W  - BYTE only
00:000008B6 0B780100        	  1016:             bchg.b d5,$0100
00:000008BA 66FE            	  1017:             bne.s *               * branch if Z clear
00:000008BC 0D780101        	  1018:             bchg.b d6,$0101           *
00:000008C0 67FE            	  1019:             beq.s *               * branch if Z set
00:000008C2 0F780102        	  1020:             bchg.b d7,$0102           *
00:000008C6 66FE            	  1021:             bne.s *               * branch if Z clear
00:000008C8 0C1800FC        	  1022:             cmpi.b #$FC,(a0)+
00:000008CC 66FE            	  1023:             bne.s *               * branch if Z clear
                            	  1024: 
                            	  1025: *             EA = x.L  - BYTE only
00:000008CE 207C0000F100    	  1026:             move.l #$F100,a0      * point to memory to address 0x100
00:000008D4 10FC0001        	  1027:             move.b #$01,(a0)+         * populate test data
00:000008D8 10FC00FC        	  1028:             move.b #$FC,(a0)+         * populate test data
00:000008DC 10FC0080        	  1029:             move.b #$80,(a0)+         * populate test data
00:000008E0 0B790000F100    	  1030:             bchg.b d5,$F100
00:000008E6 67FE            	  1031:             beq.s *               * branch if Z set
00:000008E8 0D790000F101    	  1032:             bchg.b d6,$F101       *
00:000008EE 66FE            	  1033:             bne.s *               * branch if Z clear
00:000008F0 0F790000F102    	  1034:             bchg.b d7,$F102       *
00:000008F6 67FE            	  1035:             beq.s *               * branch if Z set
00:000008F8 207C0000F101    	  1036:             move.l #$F101,a0      * point to memory to address 0x100
00:000008FE 0C1000FE        	  1037:             cmpi.b #$FE,(a0)
00:00000902 66FE            	  1038:             bne.s *               * branch if Z clear
                            	  1039: 
                            	  1040: 
00:00000904 4E75            	  1041:     rts
                            	  1042: 
                            	  1043: *-----------------------------------------------------------
                            	  1044: *-----------------------------------------------------------
                            	  1045: * OPCODE : BCLR
                            	  1046: *-----------------------------------------------------------
                            	  1047: *-----------------------------------------------------------
                            	  1048: op_BCLR:
                            	  1049: 
                            	  1050: 
                            	  1051: *  Bit Number.s Static
                            	  1052: 
                            	  1053: *             EA = Dn  - LONG only
00:00000906 203CFF0000FF    	  1054:             move.l #$FF0000FF,d0      * populate test data
00:0000090C 08800000        	  1055:             bclr.l #0,d0
00:00000910 67FE            	  1056:             beq.s *               * branch if Z set
00:00000912 08800001        	  1057:             bclr.l #1,d0              *
00:00000916 67FE            	  1058:             beq.s *               * branch if Z set
00:00000918 0880000F        	  1059:             bclr.l #15,d0             *
00:0000091C 66FE            	  1060:             bne.s *               * branch if Z clear
00:0000091E 0880001F        	  1061:             bclr.l #31,d0             *
00:00000922 67FE            	  1062:             beq.s *               * branch if Z set
00:00000924 0C807F0000FC    	  1063:             cmpi.l #$7F0000FC,d0
00:0000092A 66FE            	  1064:             bne.s *               * branch if Z clear
                            	  1065: 
                            	  1066: 
                            	  1067: *             EA = (An)  - BYTE only
00:0000092C 307C0100        	  1068:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000930 10BC000F        	  1069:             move.b #$0F,(a0)          * populate test data
00:00000934 08900000        	  1070:             bclr.b #0,(a0)
00:00000938 67FE            	  1071:             beq.s *               * branch if Z set
00:0000093A 08900007        	  1072:             bclr.b #7,(a0)            *
00:0000093E 66FE            	  1073:             bne.s *               * branch if Z clear
00:00000940 0C10000E        	  1074:             cmpi.b #$0E,(a0)
00:00000944 66FE            	  1075:             bne.s *               * branch if Z clear
                            	  1076: 
                            	  1077: *             EA = (An)+  - BYTE only
00:00000946 307C0100        	  1078:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000094A 10FC0001        	  1079:             move.b #$01,(a0)+         * populate test data
00:0000094E 10FC0000        	  1080:             move.b #$00,(a0)+         * populate test data
00:00000952 307C0100        	  1081:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000956 08980000        	  1082:             bclr.b #0,(a0)+
00:0000095A 67FE            	  1083:             beq.s *               * branch if Z set
00:0000095C 08980001        	  1084:             bclr.b #1,(a0)+           *
00:00000960 66FE            	  1085:             bne.s *               * branch if Z clear
00:00000962 307C0100        	  1086:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000966 4A18            	  1087:             cmpi.b #$00,(a0)+
00:00000968 66FE            	  1088:             bne.s *               * branch if Z clear
00:0000096A 4A18            	  1089:             cmpi.b #$00,(a0)+
00:0000096C 66FE            	  1090:             bne.s *               * branch if Z clear
                            	  1091: 
                            	  1092: 
                            	  1093: *             EA = -(An)  - BYTE only
00:0000096E 307C0100        	  1094:             move.l #$00000100,a0      * point to memory to address
00:00000972 10FC0001        	  1095:             move.b #$01,(a0)+         * populate test data
00:00000976 10FC0080        	  1096:             move.b #$80,(a0)+         * populate test data
00:0000097A 08A00007        	  1097:             bclr.b #7,-(a0)
00:0000097E 67FE            	  1098:             beq.s *               * branch if Z set
00:00000980 08A00000        	  1099:             bclr.b #0,-(a0)           *
00:00000984 67FE            	  1100:             beq.s *               * branch if Z set
00:00000986 307C0102        	  1101:             move.l #$00000102,a0      * point to memory to address 0x100
00:0000098A 4A20            	  1102:             cmpi.b #$00,-(a0)
00:0000098C 66FE            	  1103:             bne.s *               * branch if Z clear
00:0000098E 4A20            	  1104:             cmpi.b #$00,-(a0)
00:00000990 66FE            	  1105:             bne.s *               * branch if Z clear
                            	  1106: 
                            	  1107: 
                            	  1108: *             EA = n(An)  - BYTE only
00:00000992 307C0100        	  1109:             move.l #$00000100,a0      * point to memory to address
00:00000996 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
00:0000099A 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
00:0000099E 307C0100        	  1112:             move.l #$00000100,a0      * point to memory to address
00:000009A2 08900000        	  1113:             bclr.b #0,0(a0)
00:000009A6 67FE            	  1114:             beq.s *               * branch if Z set
00:000009A8 08A800040001    	  1115:             bclr.b #4,1(a0)           *
00:000009AE 67FE            	  1116:             beq.s *               * branch if Z set
00:000009B0 307C0100        	  1117:             move.l #$00000100,a0      * point to memory to address 0x100
00:000009B4 0C1800FE        	  1118:             cmpi.b #$FE,(a0)+
00:000009B8 66FE            	  1119:             bne.s *               * branch if Z clear
00:000009BA 0C1800EF        	  1120:             cmpi.b #$EF,(a0)+
00:000009BE 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: 
                            	  1123: 
                            	  1124: *             EA = n(An,D.W)  - BYTE only
00:000009C0 307C0100        	  1125:             move.l #$00000100,a0      * point to memory to address
00:000009C4 93C9            	  1126:             move.l #$00000000,a1      * point to memory to address
00:000009C6 347C0001        	  1127:             move.l #$00000001,a2      * point to memory to address
00:000009CA 7000            	  1128:             moveq  #$00000000,d0      * point to memory to address
00:000009CC 7201            	  1129:             moveq  #$00000001,d1      * point to memory to address
00:000009CE 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
00:000009D2 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
00:000009D6 307C0100        	  1132:             move.l #$00000100,a0      * point to memory to address
00:000009DA 08B000000000    	  1133:             bclr.b #0,0(a0,d0.w)
00:000009E0 67FE            	  1134:             beq.s *               * branch if Z set
00:000009E2 08B000011000    	  1135:             bclr.b #1,0(a0,d1.w)      *
00:000009E8 67FE            	  1136:             beq.s *               * branch if Z set
00:000009EA 08B000021001    	  1137:             bclr.b #2,1(a0,d1.w)      *
00:000009F0 66FE            	  1138:             bne.s *               * branch if Z clear
                            	  1139: *             EA = n(An,D.L)  - BYTE only
00:000009F2 08B000030800    	  1140:             bclr.b #3,0(a0,d0.l)
00:000009F8 67FE            	  1141:             beq.s *               * branch if Z set
00:000009FA 08B000041800    	  1142:             bclr.b #4,0(a0,d1.l)      *
00:00000A00 67FE            	  1143:             beq.s *               * branch if Z set
00:00000A02 08B000051801    	  1144:             bclr.b #5,1(a0,d1.l)      *
00:00000A08 66FE            	  1145:             bne.s *               * branch if Z clear
                            	  1146: *             EA = n(An,A.W)  - BYTE only
00:00000A0A 08B000069000    	  1147:             bclr.b #6,0(a0,a1.w)
00:00000A10 67FE            	  1148:             beq.s *               * branch if Z set
00:00000A12 08B00001A000    	  1149:             bclr.b #1,0(a0,a2.w)      *
00:00000A18 66FE            	  1150:             bne.s *               * branch if Z clear
00:00000A1A 08B00007A001    	  1151:             bclr.b #7,1(a0,a2.w)      *
00:00000A20 67FE            	  1152:             beq.s *               * branch if Z set
                            	  1153: *             EA = n(An,A.L)  - BYTE only
00:00000A22 08B000009800    	  1154:             bclr.b #0,0(a0,a1.l)
00:00000A28 66FE            	  1155:             bne.s *               * branch if Z clear
00:00000A2A 08B00000A800    	  1156:             bclr.b #0,0(a0,a2.l)      *
00:00000A30 67FE            	  1157:             beq.s *               * branch if Z set
00:00000A32 08B00001A801    	  1158:             bclr.b #1,1(a0,a2.l)      *
00:00000A38 66FE            	  1159:             bne.s *               * branch if Z clear
00:00000A3A 307C0100        	  1160:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A3E 0C1800B6        	  1161:             cmpi.b #$B6,(a0)+
00:00000A42 66FE            	  1162:             bne.s *               * branch if Z clear
00:00000A44 0C1800EC        	  1163:             cmpi.b #$EC,(a0)+
00:00000A48 66FE            	  1164:             bne.s *               * branch if Z clear
00:00000A4A 0C180059        	  1165:             cmpi.b #$59,(a0)+
00:00000A4E 67FE            	  1166:             beq.s *               * branch if Z set
                            	  1167: 
                            	  1168: 
                            	  1169: *             EA = x.W  - BYTE only
00:00000A50 307C0100        	  1170:             move.l #$00000100,a0      * point to memory to address
00:00000A54 10FC00FF        	  1171:             move.b #$FF,(a0)+         * populate test data
00:00000A58 08B800000100    	  1172:             bclr.b #0,$0100
00:00000A5E 67FE            	  1173:             beq.s *               * branch if Z set
00:00000A60 08B800010100    	  1174:             bclr.b #1,$0100           *
00:00000A66 67FE            	  1175:             beq.s *               * branch if Z set
00:00000A68 307C0100        	  1176:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A6C 0C1800FC        	  1177:             cmpi.b #$FC,(a0)+
00:00000A70 66FE            	  1178:             bne.s *               * branch if Z clear
                            	  1179: 
                            	  1180: 
                            	  1181: *             EA = x.L  - BYTE only
00:00000A72 207C0000F100    	  1182:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A78 10BC00FF        	  1183:             move.b #$FF,(a0)          * populate test data
00:00000A7C 08B900000000F100	  1184:             bclr.b #0,$F100
00:00000A84 67FE            	  1185:             beq.s *               * branch if Z set
00:00000A86 08B900010000F100	  1186:             bclr.b #1,$F100       *
00:00000A8E 67FE            	  1187:             beq.s *               * branch if Z set
00:00000A90 08B900020000F100	  1188:             bclr.b #2,$F100       *
00:00000A98 67FE            	  1189:             beq.s *               * branch if Z set
00:00000A9A 207C0000F100    	  1190:             move.l #$F100,a0      * point to memory to address 0x100
00:00000AA0 0C1800F8        	  1191:             cmpi.b #$F8,(a0)+
00:00000AA4 66FE            	  1192:             bne.s *               * branch if Z clear
                            	  1193: 
                            	  1194: 
                            	  1195: * Bit Number.s Dynamic
                            	  1196: 
                            	  1197: *             EA = Dn  - LONG only
00:00000AA6 203CFF00FF00    	  1198:             move.l #$FF00FF00,d0      * populate test data
00:00000AAC 7A00            	  1199:             move.l #0,d5              * populate bit.s number to test
00:00000AAE 7C01            	  1200:             move.l #1,d6              * populate bit.s number to test
00:00000AB0 7E1F            	  1201:             move.l #31,d7              * populate bit.s number to test
                            	  1202: 
00:00000AB2 0B80            	  1203:             bclr.l d5,d0
00:00000AB4 66FE            	  1204:             bne.s *               * branch if Z clear
00:00000AB6 0D80            	  1205:             bclr.l d6,d0              *
00:00000AB8 66FE            	  1206:             bne.s *               * branch if Z clear
00:00000ABA 0F80            	  1207:             bclr.l d7,d0             *
00:00000ABC 67FE            	  1208:             beq.s *               * branch if Z set
00:00000ABE 0C807F00FF00    	  1209:             cmpi.l #$7F00FF00,d0
00:00000AC4 66FE            	  1210:             bne.s *               * branch if Z clear
                            	  1211: 
                            	  1212: 
                            	  1213: *             EA = (An)  - BYTE only
00:00000AC6 7A00            	  1214:             move.l #0,d5              * populate bit.s number to test
00:00000AC8 7C01            	  1215:             move.l #1,d6              * populate bit.s number to test
00:00000ACA 7E07            	  1216:             move.l #7,d7              * populate bit.s number to test
00:00000ACC 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AD0 10BC0081        	  1218:             move.b #$81,(a0)          * populate test data
00:00000AD4 0B90            	  1219:             bclr.b d5,(a0)
00:00000AD6 67FE            	  1220:             beq.s *               * branch if Z set
00:00000AD8 0D90            	  1221:             bclr.b d6,(a0)            *
00:00000ADA 66FE            	  1222:             bne.s *               * branch if Z clear
00:00000ADC 0F90            	  1223:             bclr.b d7,(a0)            *
00:00000ADE 67FE            	  1224:             beq.s *               * branch if Z set
00:00000AE0 4A10            	  1225:             cmpi.b #$00,(a0)
00:00000AE2 66FE            	  1226:             bne.s *               * branch if Z clear
                            	  1227: 
                            	  1228: 
                            	  1229: *             EA = (An)+  - BYTE only
00:00000AE4 307C0100        	  1230:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AE8 10FC0001        	  1231:             move.b #$01,(a0)+         * populate test data
00:00000AEC 10FC00FC        	  1232:             move.b #$FC,(a0)+         * populate test data
00:00000AF0 10FC0080        	  1233:             move.b #$80,(a0)+         * populate test data
00:00000AF4 307C0100        	  1234:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AF8 0B98            	  1235:             bclr.b d5,(a0)+
00:00000AFA 67FE            	  1236:             beq.s *               * branch if Z set
00:00000AFC 0D98            	  1237:             bclr.b d6,(a0)+           *
00:00000AFE 66FE            	  1238:             bne.s *               * branch if Z clear
00:00000B00 0F98            	  1239:             bclr.b d7,(a0)+           *
00:00000B02 67FE            	  1240:             beq.s *               * branch if Z set
00:00000B04 307C0100        	  1241:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000B08 4A18            	  1242:             cmpi.b #$00,(a0)+
00:00000B0A 66FE            	  1243:             bne.s *               * branch if Z clear
00:00000B0C 0C1800FC        	  1244:             cmpi.b #$FC,(a0)+
00:00000B10 66FE            	  1245:             bne.s *               * branch if Z clear
00:00000B12 4A18            	  1246:             cmpi.b #$00,(a0)+
00:00000B14 66FE            	  1247:             bne.s *               * branch if Z clear
                            	  1248: 
                            	  1249: *             EA = -(An)  - BYTE only
00:00000B16 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
00:00000B1A 10FC0080        	  1251:             move.b #$80,(a0)+         * populate test data
00:00000B1E 10FC00FC        	  1252:             move.b #$FC,(a0)+         * populate test data
00:00000B22 10FC0001        	  1253:             move.b #$01,(a0)+         * populate test data
00:00000B26 307C0103        	  1254:             move.l #$00000103,a0      * point to memory to address
00:00000B2A 0BA0            	  1255:             bclr.b d5,-(a0)
00:00000B2C 67FE            	  1256:             beq.s *               * branch if Z set
00:00000B2E 0DA0            	  1257:             bclr.b d6,-(a0)           *
00:00000B30 66FE            	  1258:             bne.s *               * branch if Z clear
00:00000B32 0FA0            	  1259:             bclr.b d7,-(a0)           *
00:00000B34 67FE            	  1260:             beq.s *               * branch if Z set
00:00000B36 307C0103        	  1261:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000B3A 4A20            	  1262:             cmpi.b #$00,-(a0)
00:00000B3C 66FE            	  1263:             bne.s *               * branch if Z clear
00:00000B3E 0C2000FC        	  1264:             cmpi.b #$FC,-(a0)
00:00000B42 66FE            	  1265:             bne.s *               * branch if Z clear
00:00000B44 4A20            	  1266:             cmpi.b #$00,-(a0)
00:00000B46 66FE            	  1267:             bne.s *               * branch if Z clear
                            	  1268: 
                            	  1269: *             EA = n(An)  - BYTE only
00:00000B48 307C0100        	  1270:             move.l #$00000100,a0      * point to memory to address
00:00000B4C 10FC0001        	  1271:             move.b #$01,(a0)+         * populate test data
00:00000B50 10FC00FC        	  1272:             move.b #$FC,(a0)+         * populate test data
00:00000B54 10FC0080        	  1273:             move.b #$80,(a0)+         * populate test data
00:00000B58 307C0100        	  1274:             move.l #$00000100,a0      * point to memory to address
00:00000B5C 0B90            	  1275:             bclr.b d5,0(a0)
00:00000B5E 67FE            	  1276:             beq.s *               * branch if Z set
00:00000B60 0DA80001        	  1277:             bclr.b d6,1(a0)           *
00:00000B64 66FE            	  1278:             bne.s *               * branch if Z clear
00:00000B66 0FA80002        	  1279:             bclr.b d7,2(a0)           *
00:00000B6A 67FE            	  1280:             beq.s *               * branch if Z set
00:00000B6C 307C0100        	  1281:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000B70 4A18            	  1282:             cmpi.b #$00,(a0)+
00:00000B72 66FE            	  1283:             bne.s *               * branch if Z clear
00:00000B74 0C1800FC        	  1284:             cmpi.b #$FC,(a0)+
00:00000B78 66FE            	  1285:             bne.s *               * branch if Z clear
00:00000B7A 4A18            	  1286:             cmpi.b #$00,(a0)+
00:00000B7C 66FE            	  1287:             bne.s *               * branch if Z clear
                            	  1288: 
                            	  1289: *             EA = n(An,R.W)  - BYTE only
00:00000B7E 307C0100        	  1290:             move.l #$00000100,a0      * point to memory to address
00:00000B82 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
00:00000B86 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:00000B8A 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
00:00000B8E 307C0103        	  1294:             move.l #$00000103,a0      * point to memory to address
00:00000B92 307C0100        	  1295:             move.l #$00000100,a0      * point to memory to address
00:00000B96 93C9            	  1296:             move.l #$00000000,a1      * point to memory to address
00:00000B98 347C0001        	  1297:             move.l #$00000001,a2      * point to memory to address
00:00000B9C 7000            	  1298:             moveq  #$00000000,d0      * point to memory to address
00:00000B9E 7201            	  1299:             moveq  #$00000001,d1      * point to memory to address
00:00000BA0 0BB00000        	  1300:             bclr.b d5,0(a0,d0.w)
00:00000BA4 67FE            	  1301:             beq.s *               * branch if Z set
00:00000BA6 0DB01000        	  1302:             bclr.b d6,0(a0,d1.w)      *
00:00000BAA 67FE            	  1303:             beq.s *               * branch if Z set
00:00000BAC 0FB01001        	  1304:             bclr.b d7,1(a0,d1.w)      *
00:00000BB0 67FE            	  1305:             beq.s *               * branch if Z set
                            	  1306: *             EA = n(An,R.L)  - BYTE only
00:00000BB2 0BB00800        	  1307:             bclr.b d5,0(a0,d0.l)
00:00000BB6 66FE            	  1308:             bne.s *               * branch if Z clear
00:00000BB8 0DB01800        	  1309:             bclr.b d6,0(a0,d1.l)      *
00:00000BBC 66FE            	  1310:             bne.s *               * branch if Z clear
00:00000BBE 0FB01801        	  1311:             bclr.b d7,1(a0,d1.l)      *
00:00000BC2 66FE            	  1312:             bne.s *               * branch if Z clear
                            	  1313: *             EA = n(An,A.W)  - BYTE only
00:00000BC4 0BB09000        	  1314:             bclr.b d5,0(a0,a1.w)
00:00000BC8 66FE            	  1315:             bne.s *               * branch if Z clear
00:00000BCA 0DB0A000        	  1316:             bclr.b d6,0(a0,a2.w)      *
00:00000BCE 66FE            	  1317:             bne.s *               * branch if Z clear
00:00000BD0 0FB0A001        	  1318:             bclr.b d7,1(a0,a2.w)      *
00:00000BD4 66FE            	  1319:             bne.s *               * branch if Z clear
                            	  1320: *             EA = n(An,A.L)  - BYTE only
00:00000BD6 0BB09800        	  1321:             bclr.b d5,0(a0,a1.l)
00:00000BDA 66FE            	  1322:             bne.s *               * branch if Z clear
00:00000BDC 0DB0A800        	  1323:             bclr.b d6,0(a0,a2.l)      *
00:00000BE0 66FE            	  1324:             bne.s *               * branch if Z clear
00:00000BE2 0FB0A801        	  1325:             bclr.b d7,1(a0,a2.l)      *
00:00000BE6 66FE            	  1326:             bne.s *               * branch if Z clear
00:00000BE8 307C0100        	  1327:             move.l #$00000100,a0      * point to memory to address
00:00000BEC 0C1000FE        	  1328:             cmpi.b #$FE,(a0)
00:00000BF0 66FE            	  1329:             bne.s *               * branch if Z clear
                            	  1330: 
                            	  1331: *             EA = x.W  - BYTE only
00:00000BF2 307C0100        	  1332:             move.l #$00000100,a0      * point to memory to address
00:00000BF6 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
00:00000BFA 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:00000BFE 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
00:00000C02 0BB80100        	  1336:             bclr.b d5,$0100
00:00000C06 67FE            	  1337:             beq.s *               * branch if Z set
00:00000C08 0DB80101        	  1338:             bclr.b d6,$0101           *
00:00000C0C 67FE            	  1339:             beq.s *               * branch if Z set
00:00000C0E 0FB80102        	  1340:             bclr.b d7,$0102           *
00:00000C12 67FE            	  1341:             beq.s *               * branch if Z set
00:00000C14 307C0100        	  1342:             move.l #$00000100,a0      * point to memory to address
00:00000C18 0C1800FE        	  1343:             cmpi.b #$FE,(a0)+
00:00000C1C 66FE            	  1344:             bne.s *               * branch if Z clear
                            	  1345: 
                            	  1346: *             EA = x.L  - BYTE only
00:00000C1E 207C0000F100    	  1347:             move.l #$F100,a0      * point to memory to address 0x100
00:00000C24 10FC0001        	  1348:             move.b #$01,(a0)+         * populate test data
00:00000C28 10FC00FC        	  1349:             move.b #$FC,(a0)+         * populate test data
00:00000C2C 10FC0080        	  1350:             move.b #$80,(a0)+         * populate test data
00:00000C30 0BB90000F100    	  1351:             bclr.b d5,$F100
00:00000C36 67FE            	  1352:             beq.s *               * branch if Z set
00:00000C38 0DB90000F101    	  1353:             bclr.b d6,$F101       *
00:00000C3E 66FE            	  1354:             bne.s *               * branch if Z clear
00:00000C40 0FB90000F102    	  1355:             bclr.b d7,$F102       *
00:00000C46 67FE            	  1356:             beq.s *               * branch if Z set
00:00000C48 207C0000F101    	  1357:             move.l #$F101,a0      * point to memory to address 0x100
00:00000C4E 0C1000FC        	  1358:             cmpi.b #$FC,(a0)
00:00000C52 66FE            	  1359:             bne.s *               * branch if Z clear
                            	  1360: 
                            	  1361: 
                            	  1362: 
00:00000C54 4E75            	  1363:     rts
                            	  1364: 
                            	  1365: *-----------------------------------------------------------
                            	  1366: *-----------------------------------------------------------
                            	  1367: * OPCODE : BSET
                            	  1368: *-----------------------------------------------------------
                            	  1369: *-----------------------------------------------------------
                            	  1370: op_BSET:
                            	  1371: 
                            	  1372: 
                            	  1373: *  Bit Number.s Static
                            	  1374: 
                            	  1375: *             EA = Dn  - LONG only
00:00000C56 7000            	  1376:             moveq  #$00000000,d0      * populate test data
00:00000C58 08C00000        	  1377:             bset.l #0,d0
00:00000C5C 66FE            	  1378:             bne.s *               * branch if Z clear
00:00000C5E 08C00001        	  1379:             bset.l #1,d0              *
00:00000C62 66FE            	  1380:             bne.s *               * branch if Z clear
00:00000C64 08C0000F        	  1381:             bset.l #15,d0             *
00:00000C68 66FE            	  1382:             bne.s *               * branch if Z clear
00:00000C6A 08C0001F        	  1383:             bset.l #31,d0             *
00:00000C6E 66FE            	  1384:             bne.s *               * branch if Z clear
00:00000C70 0C8080008003    	  1385:             cmpi.l #$80008003,d0
00:00000C76 66FE            	  1386:             bne.s *               * branch if Z clear
                            	  1387: 
                            	  1388: 
                            	  1389: *             EA = (An)  - BYTE only
00:00000C78 307C0100        	  1390:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C7C 10BC0000        	  1391:             move.b #$00,(a0)          * populate test data
00:00000C80 08D00000        	  1392:             bset.b #0,(a0)
00:00000C84 66FE            	  1393:             bne.s *               * branch if Z clear
00:00000C86 08D00007        	  1394:             bset.b #7,(a0)            *
00:00000C8A 66FE            	  1395:             bne.s *               * branch if Z clear
00:00000C8C 0C100081        	  1396:             cmpi.b #$81,(a0)
00:00000C90 66FE            	  1397:             bne.s *               * branch if Z clear
                            	  1398: 
                            	  1399: *             EA = (An)+  - BYTE only
00:00000C92 307C0100        	  1400:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C96 10FC0000        	  1401:             move.b #$00,(a0)+         * populate test data
00:00000C9A 10FC0000        	  1402:             move.b #$00,(a0)+         * populate test data
00:00000C9E 307C0100        	  1403:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000CA2 08D80000        	  1404:             bset.b #0,(a0)+
00:00000CA6 66FE            	  1405:             bne.s *               * branch if Z clear
00:00000CA8 08D80001        	  1406:             bset.b #1,(a0)+           *
00:00000CAC 66FE            	  1407:             bne.s *               * branch if Z clear
00:00000CAE 307C0100        	  1408:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000CB2 0C180001        	  1409:             cmpi.b #$01,(a0)+
00:00000CB6 66FE            	  1410:             bne.s *               * branch if Z clear
00:00000CB8 0C180002        	  1411:             cmpi.b #$02,(a0)+
00:00000CBC 66FE            	  1412:             bne.s *               * branch if Z clear
                            	  1413: 
                            	  1414: 
                            	  1415: *             EA = -(An)  - BYTE only
00:00000CBE 307C0100        	  1416:             move.l #$00000100,a0      * point to memory to address
00:00000CC2 10FC0000        	  1417:             move.b #$00,(a0)+         * populate test data
00:00000CC6 10FC0000        	  1418:             move.b #$00,(a0)+         * populate test data
00:00000CCA 08E00007        	  1419:             bset.b #7,-(a0)
00:00000CCE 66FE            	  1420:             bne.s *               * branch if Z clear
00:00000CD0 08E00000        	  1421:             bset.b #0,-(a0)           *
00:00000CD4 66FE            	  1422:             bne.s *               * branch if Z clear
00:00000CD6 307C0102        	  1423:             move.l #$00000102,a0      * point to memory to address 0x100
00:00000CDA 0C200080        	  1424:             cmpi.b #$80,-(a0)
00:00000CDE 66FE            	  1425:             bne.s *               * branch if Z clear
00:00000CE0 0C200001        	  1426:             cmpi.b #$01,-(a0)
00:00000CE4 66FE            	  1427:             bne.s *               * branch if Z clear
                            	  1428: 
                            	  1429: 
                            	  1430: *             EA = n(An)  - BYTE only
00:00000CE6 307C0100        	  1431:             move.l #$00000100,a0      * point to memory to address
00:00000CEA 10FC0000        	  1432:             move.b #$00,(a0)+         * populate test data
00:00000CEE 10FC0000        	  1433:             move.b #$00,(a0)+         * populate test data
00:00000CF2 307C0100        	  1434:             move.l #$00000100,a0      * point to memory to address
00:00000CF6 08D00000        	  1435:             bset.b #0,0(a0)
00:00000CFA 66FE            	  1436:             bne.s *               * branch if Z clear
00:00000CFC 08E800040001    	  1437:             bset.b #4,1(a0)           *
00:00000D02 66FE            	  1438:             bne.s *               * branch if Z clear
00:00000D04 307C0100        	  1439:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000D08 0C180001        	  1440:             cmpi.b #$01,(a0)+
00:00000D0C 66FE            	  1441:             bne.s *               * branch if Z clear
00:00000D0E 0C180010        	  1442:             cmpi.b #$10,(a0)+
00:00000D12 66FE            	  1443:             bne.s *               * branch if Z clear
                            	  1444: 
                            	  1445: 
                            	  1446: *             EA = n(An,D.W)  - BYTE only
00:00000D14 307C0100        	  1447:             move.l #$00000100,a0      * point to memory to address
00:00000D18 93C9            	  1448:             move.l #$00000000,a1      * point to memory to address
00:00000D1A 347C0004        	  1449:             move.l #$00000004,a2      * point to memory to address
00:00000D1E 7000            	  1450:             moveq  #$00000000,d0      * point to memory to address
00:00000D20 7201            	  1451:             moveq  #$00000001,d1      * point to memory to address
00:00000D22 10FC0000        	  1452:             move.b #$00,(a0)+         * populate test data
00:00000D26 10FC0000        	  1453:             move.b #$00,(a0)+         * populate test data
00:00000D2A 10FC0000        	  1454:             move.b #$00,(a0)+         * populate test data
00:00000D2E 10FC0000        	  1455:             move.b #$00,(a0)+         * populate test data
00:00000D32 10FC0000        	  1456:             move.b #$00,(a0)+         * populate test data
00:00000D36 10FC0000        	  1457:             move.b #$00,(a0)+         * populate test data
00:00000D3A 10FC0000        	  1458:             move.b #$00,(a0)+         * populate test data
00:00000D3E 10FC0000        	  1459:             move.b #$00,(a0)+         * populate test data
00:00000D42 10FC0000        	  1460:             move.b #$00,(a0)+         * populate test data
00:00000D46 10FC0000        	  1461:             move.b #$00,(a0)+         * populate test data
00:00000D4A 307C0100        	  1462:             move.l #$00000100,a0      * point to memory to address
00:00000D4E 08F000000000    	  1463:             bset.b #0,0(a0,d0.w)
00:00000D54 66FE            	  1464:             bne.s *               * branch if Z clear
00:00000D56 08F000011000    	  1465:             bset.b #1,0(a0,d1.w)      *
00:00000D5C 66FE            	  1466:             bne.s *               * branch if Z clear
00:00000D5E 08F000021001    	  1467:             bset.b #2,1(a0,d1.w)      *
00:00000D64 66FE            	  1468:             bne.s *               * branch if Z clear
                            	  1469: *             EA = n(An,D.L)  - BYTE only
00:00000D66 08F000030802    	  1470:             bset.b #3,2(a0,d0.l)
00:00000D6C 66FE            	  1471:             bne.s *               * branch if Z clear
00:00000D6E 08F000041800    	  1472:             bset.b #4,0(a0,d1.l)      *
00:00000D74 66FE            	  1473:             bne.s *               * branch if Z clear
00:00000D76 08F000051801    	  1474:             bset.b #5,1(a0,d1.l)      *
00:00000D7C 66FE            	  1475:             bne.s *               * branch if Z clear
                            	  1476: *             EA = n(An,A.W)  - BYTE only
00:00000D7E 08F000069000    	  1477:             bset.b #6,0(a0,a1.w)
00:00000D84 66FE            	  1478:             bne.s *               * branch if Z clear
00:00000D86 08F00001A000    	  1479:             bset.b #1,0(a0,a2.w)      *
00:00000D8C 66FE            	  1480:             bne.s *               * branch if Z clear
00:00000D8E 08F00007A001    	  1481:             bset.b #7,1(a0,a2.w)      *
00:00000D94 66FE            	  1482:             bne.s *               * branch if Z clear
                            	  1483: *             EA = n(An,A.L)  - BYTE only
00:00000D96 08F00000A802    	  1484:             bset.b #0,2(a0,a2.l)
00:00000D9C 66FE            	  1485:             bne.s *               * branch if Z clear
00:00000D9E 08F00000A803    	  1486:             bset.b #0,3(a0,a2.l)      *
00:00000DA4 66FE            	  1487:             bne.s *               * branch if Z clear
00:00000DA6 08F00001A804    	  1488:             bset.b #1,4(a0,a2.l)      *
00:00000DAC 66FE            	  1489:             bne.s *               * branch if Z clear
00:00000DAE 307C0100        	  1490:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000DB2 0C9841122C00    	  1491:             cmpi.l #$41122C00,(a0)+
00:00000DB8 66FE            	  1492:             bne.s *               * branch if Z clear
00:00000DBA 0C9802800101    	  1493:             cmpi.l #$02800101,(a0)+
00:00000DC0 66FE            	  1494:             bne.s *
                            	  1495: 
                            	  1496: 
                            	  1497: 
                            	  1498: *             EA = x.W  - BYTE only
00:00000DC2 307C0100        	  1499:             move.l #$00000100,a0      * point to memory to address
00:00000DC6 10FC0000        	  1500:             move.b #$00,(a0)+         * populate test data
00:00000DCA 08F800000100    	  1501:             bset.b #0,$0100
00:00000DD0 66FE            	  1502:             bne.s *               * branch if Z clear
00:00000DD2 08F800010100    	  1503:             bset.b #1,$0100           *
00:00000DD8 66FE            	  1504:             bne.s *               * branch if Z clear
00:00000DDA 307C0100        	  1505:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000DDE 0C180003        	  1506:             cmpi.b #$03,(a0)+
00:00000DE2 66FE            	  1507:             bne.s *
                            	  1508: 
                            	  1509: 
                            	  1510: *             EA = x.L  - BYTE only
00:00000DE4 207C0000F100    	  1511:             move.l #$F100,a0      * point to memory to address 0x100
00:00000DEA 10BC0000        	  1512:             move.b #$00,(a0)          * populate test data
00:00000DEE 08F900000000F100	  1513:             bset.b #0,$F100
00:00000DF6 66FE            	  1514:             bne.s *               * branch if Z clear
00:00000DF8 08F900010000F100	  1515:             bset.b #1,$F100       *
00:00000E00 66FE            	  1516:             bne.s *               * branch if Z clear
00:00000E02 08F900020000F100	  1517:             bset.b #2,$F100       *
00:00000E0A 66FE            	  1518:             bne.s *               * branch if Z clear
00:00000E0C 207C0000F100    	  1519:             move.l #$F100,a0      * point to memory to address 0x100
00:00000E12 0C180007        	  1520:             cmpi.b #$07,(a0)+
00:00000E16 66FE            	  1521:             bne.s *
                            	  1522: 
                            	  1523: 
                            	  1524: * Bit Number.s Dynamic
                            	  1525: 
                            	  1526: *             EA = Dn  - LONG only
00:00000E18 7000            	  1527:             moveq  #$00000000,d0      * populate test data
00:00000E1A 7A00            	  1528:             move.l #0,d5              * populate bit.s number to test
00:00000E1C 7C01            	  1529:             move.l #1,d6              * populate bit.s number to test
00:00000E1E 7E1F            	  1530:             move.l #31,d7              * populate bit.s number to test
                            	  1531: 
00:00000E20 0BC0            	  1532:             bset.l d5,d0
00:00000E22 66FE            	  1533:             bne.s *               * branch if Z clear
00:00000E24 0DC0            	  1534:             bset.l d6,d0              *
00:00000E26 66FE            	  1535:             bne.s *               * branch if Z clear
00:00000E28 0FC0            	  1536:             bset.l d7,d0             *
00:00000E2A 66FE            	  1537:             bne.s *               * branch if Z clear
00:00000E2C 0C8080000003    	  1538:             cmpi.l #$80000003,d0
00:00000E32 66FE            	  1539:             bne.s *               * branch if Z clear
                            	  1540: 
                            	  1541: 
                            	  1542: *             EA = (An)  - BYTE only
00:00000E34 7A00            	  1543:             move.l #0,d5              * populate bit.s number to test
00:00000E36 7C01            	  1544:             move.l #1,d6              * populate bit.s number to test
00:00000E38 7E07            	  1545:             move.l #7,d7              * populate bit.s number to test
00:00000E3A 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E3E 10BC0000        	  1547:             move.b #$00,(a0)          * populate test data
00:00000E42 0BD0            	  1548:             bset.b d5,(a0)
00:00000E44 66FE            	  1549:             bne.s *               * branch if Z clear
00:00000E46 0DD0            	  1550:             bset.b d6,(a0)            *
00:00000E48 66FE            	  1551:             bne.s *               * branch if Z clear
00:00000E4A 0FD0            	  1552:             bset.b d7,(a0)            *
00:00000E4C 66FE            	  1553:             bne.s *               * branch if Z clear
00:00000E4E 0C100083        	  1554:             cmpi.b #$83,(a0)
00:00000E52 66FE            	  1555:             bne.s *               * branch if Z clear
                            	  1556: 
                            	  1557: 
                            	  1558: *             EA = (An)+  - BYTE only
00:00000E54 307C0100        	  1559:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E58 10FC0000        	  1560:             move.b #$00,(a0)+         * populate test data
00:00000E5C 10FC0000        	  1561:             move.b #$00,(a0)+         * populate test data
00:00000E60 10FC0000        	  1562:             move.b #$00,(a0)+         * populate test data
00:00000E64 307C0100        	  1563:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E68 0BD8            	  1564:             bset.b d5,(a0)+
00:00000E6A 66FE            	  1565:             bne.s *               * branch if Z clear
00:00000E6C 0DD8            	  1566:             bset.b d6,(a0)+           *
00:00000E6E 66FE            	  1567:             bne.s *               * branch if Z clear
00:00000E70 0FD8            	  1568:             bset.b d7,(a0)+           *
00:00000E72 66FE            	  1569:             bne.s *               * branch if Z clear
00:00000E74 307C0100        	  1570:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E78 0C180001        	  1571:             cmpi.b #$01,(a0)+
00:00000E7C 66FE            	  1572:             bne.s *               * branch if Z clear
00:00000E7E 0C180002        	  1573:             cmpi.b #$02,(a0)+
00:00000E82 66FE            	  1574:             bne.s *               * branch if Z clear
00:00000E84 0C180080        	  1575:             cmpi.b #$80,(a0)+
00:00000E88 66FE            	  1576:             bne.s *               * branch if Z clear
                            	  1577: 
                            	  1578: *             EA = -(An)  - BYTE only
00:00000E8A 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
00:00000E8E 10FC0000        	  1580:             move.b #$00,(a0)+         * populate test data
00:00000E92 10FC0000        	  1581:             move.b #$00,(a0)+         * populate test data
00:00000E96 10FC0000        	  1582:             move.b #$00,(a0)+         * populate test data
00:00000E9A 307C0103        	  1583:             move.l #$00000103,a0      * point to memory to address
00:00000E9E 0BE0            	  1584:             bset.b d5,-(a0)
00:00000EA0 66FE            	  1585:             bne.s *               * branch if Z clear
00:00000EA2 0DE0            	  1586:             bset.b d6,-(a0)           *
00:00000EA4 66FE            	  1587:             bne.s *               * branch if Z clear
00:00000EA6 0FE0            	  1588:             bset.b d7,-(a0)           *
00:00000EA8 66FE            	  1589:             bne.s *               * branch if Z clear
00:00000EAA 307C0103        	  1590:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000EAE 0C200001        	  1591:             cmpi.b #$01,-(a0)
00:00000EB2 66FE            	  1592:             bne.s *               * branch if Z clear
00:00000EB4 0C200002        	  1593:             cmpi.b #$02,-(a0)
00:00000EB8 66FE            	  1594:             bne.s *               * branch if Z clear
00:00000EBA 0C200080        	  1595:             cmpi.b #$80,-(a0)
00:00000EBE 66FE            	  1596:             bne.s *               * branch if Z clear
                            	  1597: 
                            	  1598: *             EA = n(An)  - BYTE only
00:00000EC0 307C0100        	  1599:             move.l #$00000100,a0      * point to memory to address
00:00000EC4 10FC0000        	  1600:             move.b #$00,(a0)+         * populate test data
00:00000EC8 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
00:00000ECC 10FC0000        	  1602:             move.b #$00,(a0)+         * populate test data
00:00000ED0 307C0100        	  1603:             move.l #$00000100,a0      * point to memory to address
00:00000ED4 0BD0            	  1604:             bset.b d5,0(a0)
00:00000ED6 66FE            	  1605:             bne.s *               * branch if Z clear
00:00000ED8 0DE80001        	  1606:             bset.b d6,1(a0)           *
00:00000EDC 66FE            	  1607:             bne.s *               * branch if Z clear
00:00000EDE 0FE80002        	  1608:             bset.b d7,2(a0)           *
00:00000EE2 66FE            	  1609:             bne.s *               * branch if Z clear
00:00000EE4 307C0100        	  1610:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000EE8 0C180001        	  1611:             cmpi.b #$01,(a0)+
00:00000EEC 66FE            	  1612:             bne.s *               * branch if Z clear
00:00000EEE 0C180002        	  1613:             cmpi.b #$02,(a0)+
00:00000EF2 66FE            	  1614:             bne.s *               * branch if Z clear
00:00000EF4 0C180080        	  1615:             cmpi.b #$80,(a0)+
00:00000EF8 66FE            	  1616:             bne.s *               * branch if Z clear
                            	  1617: 
                            	  1618: *             EA = n(An,R.W)  - BYTE only
00:00000EFA 307C0100        	  1619:             move.l #$00000100,a0      * point to memory to address
00:00000EFE 10FC0000        	  1620:             move.b #$00,(a0)+         * populate test data
00:00000F02 10FC0000        	  1621:             move.b #$00,(a0)+         * populate test data
00:00000F06 10FC0000        	  1622:             move.b #$00,(a0)+         * populate test data
00:00000F0A 10FC0000        	  1623:             move.b #$00,(a0)+         * populate test data
00:00000F0E 10FC0000        	  1624:             move.b #$00,(a0)+         * populate test data
00:00000F12 10FC0000        	  1625:             move.b #$00,(a0)+         * populate test data
00:00000F16 10FC0000        	  1626:             move.b #$00,(a0)+         * populate test data
00:00000F1A 10FC0000        	  1627:             move.b #$00,(a0)+         * populate test data
00:00000F1E 10FC0000        	  1628:             move.b #$00,(a0)+         * populate test data
00:00000F22 10FC0000        	  1629:             move.b #$00,(a0)+         * populate test data
00:00000F26 10FC0000        	  1630:             move.b #$00,(a0)+         * populate test data
00:00000F2A 10FC0000        	  1631:             move.b #$00,(a0)+         * populate test data
00:00000F2E 307C0100        	  1632:             move.l #$00000100,a0      * point to memory to address
00:00000F32 93C9            	  1633:             move.l #$00000000,a1      * point to memory to address
00:00000F34 347C0001        	  1634:             move.l #$00000001,a2      * point to memory to address
00:00000F38 7000            	  1635:             moveq  #$00000000,d0      * point to memory to address
00:00000F3A 7201            	  1636:             moveq  #$00000001,d1      * point to memory to address
00:00000F3C 0BF00000        	  1637:             bset.b d5,0(a0,d0.w)
00:00000F40 66FE            	  1638:             bne.s *               * branch if Z clear
00:00000F42 0DF01000        	  1639:             bset.b d6,0(a0,d1.w)      *
00:00000F46 66FE            	  1640:             bne.s *               * branch if Z clear
00:00000F48 0FF01001        	  1641:             bset.b d7,1(a0,d1.w)      *
00:00000F4C 66FE            	  1642:             bne.s *               * branch if Z clear
                            	  1643: *             EA = n(An,R.L)  - BYTE only
00:00000F4E 0BF00802        	  1644:             bset.b d5,2(a0,d0.l)
00:00000F52 66FE            	  1645:             bne.s *               * branch if Z clear
00:00000F54 0DF01803        	  1646:             bset.b d6,3(a0,d1.l)      *
00:00000F58 66FE            	  1647:             bne.s *               * branch if Z clear
00:00000F5A 0FF01804        	  1648:             bset.b d7,4(a0,d1.l)      *
00:00000F5E 66FE            	  1649:             bne.s *               * branch if Z clear
                            	  1650: *             EA = n(An,A.W)  - BYTE only
00:00000F60 0BF09005        	  1651:             bset.b d5,5(a0,a1.w)
00:00000F64 66FE            	  1652:             bne.s *               * branch if Z clear
00:00000F66 0DF0A006        	  1653:             bset.b d6,6(a0,a2.w)      *
00:00000F6A 66FE            	  1654:             bne.s *               * branch if Z clear
00:00000F6C 0FF0A007        	  1655:             bset.b d7,7(a0,a2.w)      *
00:00000F70 66FE            	  1656:             bne.s *               * branch if Z clear
                            	  1657: *             EA = n(An,A.L)  - BYTE only
00:00000F72 0BF09808        	  1658:             bset.b d5,8(a0,a1.l)
00:00000F76 66FE            	  1659:             bne.s *               * branch if Z clear
00:00000F78 0DF0A809        	  1660:             bset.b d6,9(a0,a2.l)      *
00:00000F7C 66FE            	  1661:             bne.s *               * branch if Z clear
00:00000F7E 0FF0A80A        	  1662:             bset.b d7,10(a0,a2.l)      *
00:00000F82 66FE            	  1663:             bne.s *               * branch if Z clear
00:00000F84 307C0100        	  1664:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000F88 0C9801028100    	  1665:             cmpi.l #$01028100,(a0)+
00:00000F8E 66FE            	  1666:             bne.s *               * branch if Z clear
00:00000F90 0C9802810002    	  1667:             cmpi.l #$02810002,(a0)+
00:00000F96 66FE            	  1668:             bne.s *
                            	  1669: 
                            	  1670: 
                            	  1671: *             EA = x.W  - BYTE only
00:00000F98 307C0100        	  1672:             move.l #$00000100,a0      * point to memory to address
00:00000F9C 10FC0000        	  1673:             move.b #$00,(a0)+         * populate test data
00:00000FA0 10FC0000        	  1674:             move.b #$00,(a0)+         * populate test data
00:00000FA4 10FC0000        	  1675:             move.b #$00,(a0)+         * populate test data
00:00000FA8 0BF80100        	  1676:             bset.b d5,$0100
00:00000FAC 66FE            	  1677:             bne.s *               * branch if Z clear
00:00000FAE 0DF80100        	  1678:             bset.b d6,$0100           *
00:00000FB2 66FE            	  1679:             bne.s *               * branch if Z clear
00:00000FB4 0FF80100        	  1680:             bset.b d7,$0100           *
00:00000FB8 66FE            	  1681:             bne.s *               * branch if Z clear
00:00000FBA 307C0100        	  1682:             move.l #$00000100,a0      * point to memory to address
00:00000FBE 0C180083        	  1683:             cmpi.b #$83,(a0)+
00:00000FC2 66FE            	  1684:             bne.s *               * branch if Z clear
                            	  1685: 
                            	  1686: *             EA = x.L  - BYTE only
00:00000FC4 207C0000F100    	  1687:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FCA 10FC0000        	  1688:             move.b #$00,(a0)+         * populate test data
00:00000FCE 10FC0000        	  1689:             move.b #$00,(a0)+         * populate test data
00:00000FD2 10FC0000        	  1690:             move.b #$00,(a0)+         * populate test data
00:00000FD6 0BF90000F100    	  1691:             bset.b d5,$F100
00:00000FDC 66FE            	  1692:             bne.s *               * branch if Z clear
00:00000FDE 0DF90000F100    	  1693:             bset.b d6,$F100       *
00:00000FE4 66FE            	  1694:             bne.s *               * branch if Z clear
00:00000FE6 0FF90000F100    	  1695:             bset.b d7,$F100       *
00:00000FEC 66FE            	  1696:             bne.s *               * branch if Z clear
00:00000FEE 207C0000F100    	  1697:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FF4 0C100083        	  1698:             cmpi.b #$83,(a0)
00:00000FF8 66FE            	  1699:             bne.s *               * branch if Z clear
                            	  1700: 
                            	  1701: 
00:00000FFA 4E75            	  1702:     rts
                            	  1703: 
                            	  1704: *-----------------------------------------------------------
                            	  1705: *-----------------------------------------------------------
                            	  1706: * OPCODE : MOVEP
                            	  1707: *-----------------------------------------------------------
                            	  1708: *-----------------------------------------------------------
                            	  1709: op_MOVEP:
                            	  1710: 
                            	  1711: * Dn --> x(An)
00:00000FFC 307C0100        	  1712:             move.l #$00000100,a0
00:00001000 203C12345678    	  1713:             move.l #$12345678,d0
00:00001006 223CAABBCCDD    	  1714:             move.l #$AABBCCDD,d1
00:0000100C 20BC00000000    	  1715:             move.l #0,(a0)
00:00001012 217C000000000004	  1716:             move.l #0,4(a0)
                            	  1717: 
00:0000101A 01880000        	  1718:             movep.w d0,0(a0)      * even offset
00:0000101E 03880001        	  1719:             movep.w d1,1(a0)      * odd offset
                            	  1720: 
00:00001022 01C80004        	  1721:             movep.l d0,4(a0)      * even offset
00:00001026 03C80005        	  1722:             movep.l d1,5(a0)      * odd offset
                            	  1723: 
00:0000102A 0C9056CC78DD    	  1724:             cmpi.l #$56CC78DD,(a0)
00:00001030 66FE            	  1725:             bne.s *
00:00001032 0CA812AA34BB0004	  1726:             cmpi.l #$12AA34BB,4(a0)
00:0000103A 66FE            	  1727:             bne.s *
00:0000103C 0CA856CC78DD0008	  1728:             cmpi.l #$56CC78DD,8(a0)
00:00001044 66FE            	  1729:             bne.s *
                            	  1730: 
                            	  1731: 
                            	  1732: * x(An)--> Dn
00:00001046 203C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d0
00:0000104C 223C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d1
00:00001052 243C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d2
00:00001058 263C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d3
                            	  1737: 
00:0000105E 01080000        	  1738:             movep.w 0(a0),d0      * even offset
00:00001062 03080001        	  1739:             movep.w 1(a0),d1      * odd offset
                            	  1740: 
00:00001066 05480004        	  1741:             movep.l 4(a0),d2      * even offset
00:0000106A 07480005        	  1742:             movep.l 5(a0),d3      * odd offset
                            	  1743: 
00:0000106E 0C805A5A5678    	  1744:             cmpi.l #$5a5a5678,d0
00:00001074 66FE            	  1745:             bne.s *
00:00001076 0C815A5ACCDD    	  1746:             cmpi.l #$5a5aCCDD,d1
00:0000107C 66FE            	  1747:             bne.s *
00:0000107E 0C8212345678    	  1748:             cmpi.l #$12345678,d2
00:00001084 66FE            	  1749:             bne.s *
00:00001086 0C83AABBCCDD    	  1750:             cmpi.l #$AABBCCDD,d3
00:0000108C 66FE            	  1751:             bne.s *
                            	  1752: 
00:0000108E 4E75            	  1753:             rts
                            	  1754: 
                            	  1755: 
                            	  1756: 
                            	  1757: *-----------------------------------------------------------
                            	  1758: *-----------------------------------------------------------
                            	  1759: * OPCODE : BOOL_I
                            	  1760: *-----------------------------------------------------------
                            	  1761: *-----------------------------------------------------------
                            	  1762: op_BOOL_I:
                            	  1763: 
                            	  1764: *     Dn -- BYTE
00:00001090 203C12345678    	  1765:             move.l #$12345678,d0
00:00001096 44FC000F        	  1766:             move.w #$000F,CCR          * pre-set Flags
00:0000109A 000000FF        	  1767:             ori.b  #$FF,d0
00:0000109E 0A00005A        	  1768:             eori.b #$5A,d0
00:000010A2 020000F0        	  1769:             andi.b #$F0,d0
00:000010A6 69FE            	  1770:             bvs.s *                       * Check V,C are cleared
00:000010A8 65FE            	  1771:             bcs.s *
00:000010AA 6AFE            	  1772:             bpl.s *                       * Verify if N flag is set
00:000010AC 02000000        	  1773:             andi.b #$00,d0
00:000010B0 6BFE            	  1774:             bmi.s *                       * Verify if N flag is cleared
00:000010B2 66FE            	  1775:             bne.s *                       * Verify if Z flag is set
                            	  1776: 
                            	  1777: *     Dn -- WORD
00:000010B4 223C12345678    	  1778:             move.l #$12345678,d1
00:000010BA 44FC000F        	  1779:             move.w #$000F,CCR          * pre-set Flags
00:000010BE 0041FFFF        	  1780:             ori.w  #$FFFF,d1
00:000010C2 0A415A5A        	  1781:             eori.w #$5A5A,d1
00:000010C6 0241F0F0        	  1782:             andi.w #$F0F0,d1
00:000010CA 69FE            	  1783:             bvs.s *                       * Check V,C are cleared
00:000010CC 65FE            	  1784:             bcs.s *
00:000010CE 6AFE            	  1785:             bpl.s *                       * Verify if N flag is set
00:000010D0 02410000        	  1786:             andi.w #$0000,d1
00:000010D4 6BFE            	  1787:             bmi.s *                       * Verify if N flag is cleared
00:000010D6 66FE            	  1788:             bne.s *                       * Verify if Z flag is set
                            	  1789: 
                            	  1790: *     Dn -- LONG
00:000010D8 243C12345678    	  1791:             move.l #$12345678,d2
00:000010DE 44FC000F        	  1792:             move.w #$000F,CCR          * pre-set Flags
00:000010E2 0082FFFFFFFF    	  1793:             ori.l  #$FFFFFFFF,d2
00:000010E8 0A825A5A5A5A    	  1794:             eori.l #$5A5A5A5A,d2
00:000010EE 0282F0F0F0F0    	  1795:             andi.l #$F0F0F0F0,d2
00:000010F4 69FE            	  1796:             bvs.s *                       * Check V,C are cleared
00:000010F6 65FE            	  1797:             bcs.s *
00:000010F8 6AFE            	  1798:             bpl.s *                       * Verify if N flag is set
00:000010FA 028200000000    	  1799:             andi.l #$00000000,d2
00:00001100 6BFE            	  1800:             bmi.s *                       * Verify if N flag is cleared
00:00001102 66FE            	  1801:             bne.s *                       * Verify if Z flag is set
                            	  1802: 
                            	  1803: 
                            	  1804: *     (An) -- BYTE
00:00001104 307C0100        	  1805:             move.l #$00000100,a0
00:00001108 20BC12345678    	  1806:             move.l #$12345678,(a0)
00:0000110E 44FC000F        	  1807:             move.w #$000F,CCR          * pre-set Flags
00:00001112 001000FF        	  1808:             ori.b  #$FF,(a0)
00:00001116 0A10005A        	  1809:             eori.b #$5A,(a0)
00:0000111A 021000F0        	  1810:             andi.b #$F0,(a0)
00:0000111E 69FE            	  1811:             bvs.s *                       * Check V,C are cleared
00:00001120 65FE            	  1812:             bcs.s *
00:00001122 6AFE            	  1813:             bpl.s *                       * Verify if N flag is set
00:00001124 02100000        	  1814:             andi.b #$00,(a0)
00:00001128 6BFE            	  1815:             bmi.s *                       * Verify if N flag is cleared
00:0000112A 66FE            	  1816:             bne.s *                       * Verify if Z flag is set
00:0000112C 4A10            	  1817:             cmpi.b #$00,(a0)
00:0000112E 66FE            	  1818:             bne.s *                       * Verify if Z flag is set
                            	  1819: 
                            	  1820: *     (An) -- WORD
00:00001130 20BC12345678    	  1821:             move.l #$12345678,(a0)
00:00001136 44FC000F        	  1822:             move.w #$000F,CCR          * pre-set Flags
00:0000113A 0050FFFF        	  1823:             ori.w  #$FFFF,(a0)
00:0000113E 0A505A5A        	  1824:             eori.w #$5A5A,(a0)
00:00001142 0250F0F0        	  1825:             andi.w #$F0F0,(a0)
00:00001146 69FE            	  1826:             bvs.s *                       * Check V,C are cleared
00:00001148 65FE            	  1827:             bcs.s *
00:0000114A 6AFE            	  1828:             bpl.s *                       * Verify if N flag is set
00:0000114C 02500000        	  1829:             andi.w #$0000,(a0)
00:00001150 6BFE            	  1830:             bmi.s *                       * Verify if N flag is cleared
00:00001152 66FE            	  1831:             bne.s *                       * Verify if Z flag is set
00:00001154 4A50            	  1832:             cmpi.w #$00,(a0)
00:00001156 66FE            	  1833:             bne.s *                       * Verify if Z flag is set
                            	  1834: 
                            	  1835: *     (An) -- LONG
00:00001158 20BC12345678    	  1836:             move.l #$12345678,(a0)
00:0000115E 44FC000F        	  1837:             move.w #$000F,CCR          * pre-set Flags
00:00001162 0090FFFFFFFF    	  1838:             ori.l  #$FFFFFFFF,(a0)
00:00001168 0A905A5A5A5A    	  1839:             eori.l #$5A5A5A5A,(a0)
00:0000116E 0290F0F0F0F0    	  1840:             andi.l #$F0F0F0F0,(a0)
00:00001174 69FE            	  1841:             bvs.s *                       * Check V,C are cleared
00:00001176 65FE            	  1842:             bcs.s *
00:00001178 6AFE            	  1843:             bpl.s *                       * Verify if N flag is set
00:0000117A 029000000000    	  1844:             andi.l #$00000000,(a0)
00:00001180 6BFE            	  1845:             bmi.s *                       * Verify if N flag is cleared
00:00001182 66FE            	  1846:             bne.s *                       * Verify if Z flag is set
00:00001184 4A90            	  1847:             cmpi.l #$00,(a0)
00:00001186 66FE            	  1848:             bne.s *                       * Verify if Z flag is set
                            	  1849: 
                            	  1850: 
                            	  1851: 
                            	  1852: *     (An)+ -- BYTE
00:00001188 307C0100        	  1853:             move.l #$00000100,a0
00:0000118C 20BC00A5FF88    	  1854:             move.l #$00A5FF88,(a0)
00:00001192 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
00:00001196 001800F5        	  1857:             ori.b  #$F5,(a0)+
00:0000119A 6AFE            	  1858:             bpl.s *                       * Verify if N flag is set
00:0000119C 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
00:0000119E 4618            	  1861:             eori.b #$FF,(a0)+
00:000011A0 6BFE            	  1862:             bmi.s *                       * Verify if N flag is cleared
00:000011A2 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
00:000011A4 021800AA        	  1865:             andi.b #$AA,(a0)+
00:000011A8 6AFE            	  1866:             bpl.s *                       * Verify if N flag is set
00:000011AA 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
00:000011AC 307C0100        	  1869:             move.l #$00000100,a0
00:000011B0 0C90F55AAA88    	  1870:             cmpi.l #$F55AAA88,(a0)
00:000011B6 66FE            	  1871:             bne.s *                       * Verify if Z flag is set
                            	  1872: 
                            	  1873: 
                            	  1874: *     (An)+ -- WORD
00:000011B8 307C0100        	  1875:             move.l #$00000100,a0
00:000011BC 327C0104        	  1876:             move.l #$00000104,a1
00:000011C0 20BC00005A5A    	  1877:             move.l #$00005a5a,(a0)
00:000011C6 22BC12345678    	  1878:             move.l #$12345678,(a1)
00:000011CC 44FC000F        	  1879:             move.w #$000F,CCR          * pre-set Flags
                            	  1880: 
00:000011D0 00585678        	  1881:             ori.w  #$5678,(a0)+
00:000011D4 6BFE            	  1882:             bmi.s *                       * Verify if N flag is cleared
00:000011D6 67FE            	  1883:             beq.s *                       * Verify if Z flag is cleared
                            	  1884: 
00:000011D8 4658            	  1885:             eori.w #$FFFF,(a0)+
00:000011DA 6AFE            	  1886:             bpl.s *                       * Verify if N flag is set
00:000011DC 67FE            	  1887:             beq.s *                       * Verify if Z flag is cleared
                            	  1888: 
00:000011DE 0258A55A        	  1889:             andi.w #$A55A,(a0)+
00:000011E2 6BFE            	  1890:             bmi.s *                       * Verify if N flag is cleared
00:000011E4 67FE            	  1891:             beq.s *                       * Verify if Z flag is cleared
                            	  1892: 
00:000011E6 307C0100        	  1893:             move.l #$00000100,a0
00:000011EA 0C905678A5A5    	  1894:             cmpi.l #$5678a5a5,(a0)
00:000011F0 307C0104        	  1895:             move.l #$00000104,a0
00:000011F4 0C9000105678    	  1896:             cmpi.l #$00105678,(a0)
00:000011FA 66FE            	  1897:             bne.s *                       * Verify if Z flag is set
                            	  1898: 
                            	  1899: *     (An)+ -- LONG
00:000011FC 307C0100        	  1900:             move.l #$00000100,a0
00:00001200 20FC00000000    	  1901:             move.l #$00000000,(a0)+
00:00001206 20FC5A5A5A5A    	  1902:             move.l #$5a5a5a5a,(a0)+
00:0000120C 20FCFFFFFFFF    	  1903:             move.l #$FFFFFFFF,(a0)+
00:00001212 307C0100        	  1904:             move.l #$00000100,a0
00:00001216 44FC000F        	  1905:             move.w #$000F,CCR          * pre-set Flags
                            	  1906: 
00:0000121A 009812345678    	  1907:             ori.l  #$12345678,(a0)+
00:00001220 6BFE            	  1908:             bmi.s *                       * Verify if N flag is cleared
00:00001222 67FE            	  1909:             beq.s *                       * Verify if Z flag is cleared
                            	  1910: 
00:00001224 4698            	  1911:             eori.l #$FFFFFFFF,(a0)+
00:00001226 6AFE            	  1912:             bpl.s *                       * Verify if N flag is set
00:00001228 67FE            	  1913:             beq.s *                       * Verify if Z flag is cleared
                            	  1914: 
00:0000122A 0298A5A5A55A    	  1915:             andi.l #$A5A5A55A,(a0)+
00:00001230 6AFE            	  1916:             bpl.s *                       * Verify if N flag is set
00:00001232 67FE            	  1917:             beq.s *                       * Verify if Z flag is cleared
                            	  1918: 
00:00001234 307C0100        	  1919:             move.l #$00000100,a0
00:00001238 0C9812345678    	  1920:             cmpi.l #$12345678,(a0)+
00:0000123E 0C98A5A5A5A5    	  1921:             cmpi.l #$a5a5a5a5,(a0)+
00:00001244 0C98A5A5A55A    	  1922:             cmpi.l #$a5a5a55a,(a0)+
00:0000124A 66FE            	  1923:             bne.s *                       * Verify if Z flag is set
                            	  1924: 
00:0000124C 4E75            	  1925:             rts
                            	  1926: 
                            	  1927: 
                            	  1928: *-----------------------------------------------------------
                            	  1929: *-----------------------------------------------------------
                            	  1930: * OPCODE : BSR
                            	  1931: *-----------------------------------------------------------
                            	  1932: *-----------------------------------------------------------
                            	  1933: 
                            	  1934: 
00:0000124E 223C11111111    	  1935: BSR_CLOSE1:     move.l #$11111111,d1
00:00001254 4E75            	  1936:                 rts
                            	  1937: 
                            	  1938: 
                            	  1939: 
00:00001256 61F6            	  1940: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:00001258 612A            	  1941:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:0000125A 6100EE7C        	  1942:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:0000125E 61001480        	  1943:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1944: 
00:00001262 0C8111111111    	  1945:                 cmpi.l #$11111111,d1
00:00001268 66FE            	  1946:                 bne.s *
00:0000126A 0C8222222222    	  1947:                 cmpi.l #$22222222,d2
00:00001270 66FE            	  1948:                 bne.s *
00:00001272 0C8333333333    	  1949:                 cmpi.l #$33333333,d3
00:00001278 66FE            	  1950:                 bne.s *
00:0000127A 0C8444444444    	  1951:                 cmpi.l #$44444444,d4
00:00001280 66FE            	  1952:                 bne.s *
                            	  1953: 
00:00001282 4E75            	  1954:                 rts
                            	  1955: 
                            	  1956: 
00:00001284 243C22222222    	  1957: BSR_CLOSE2:     move.l #$22222222,d2
00:0000128A 4E75            	  1958:                 rts
                            	  1959: 
                            	  1960: *-----------------------------------------------------------
                            	  1961: *-----------------------------------------------------------
                            	  1962: * OPCODE : op_CMP_I
                            	  1963: *-----------------------------------------------------------
                            	  1964: *-----------------------------------------------------------
                            	  1965: op_CMP_I:
                            	  1966: 
00:0000128C 307C0100        	  1967:             move.l #$00000100,a0
00:00001290 20BC00000100    	  1968:             move.l #$00000100,(a0)
                            	  1969: 
                            	  1970: *     REGISTER - BYTE
00:00001296 7080            	  1971:             move.l #$FFFFFF80,d0
00:00001298 0C000080        	  1972:             cmpi.b #$80,d0
00:0000129C 66FE            	  1973:             bne.s *                       * Check Z Flag  beq/bne
00:0000129E 6BFE            	  1974:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012A0 65FE            	  1975:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012A2 69FE            	  1976:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1977: 
00:000012A4 223CFFFFF000    	  1978:             move.l #$FFFFF000,d1
00:000012AA 4A01            	  1979:             cmpi.b #$00,d1
00:000012AC 66FE            	  1980:             bne.s *                       * Check Z Flag  beq/bne
00:000012AE 6BFE            	  1981:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012B0 65FE            	  1982:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012B2 69FE            	  1983:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1984: 
00:000012B4 7481D442        	  1985:             move.l #$FFFFFF02,d2
00:000012B8 0C0200FF        	  1986:             cmpi.b #$FF,d2
00:000012BC 67FE            	  1987:             beq.s *                       * Check Z Flag  beq/bne
00:000012BE 6BFE            	  1988:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012C0 64FE            	  1989:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012C2 69FE            	  1990:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1991: 
00:000012C4 263CFFFFFF7F    	  1992:             move.l #$FFFFFF7F,d3
00:000012CA 0C0300FF        	  1993:             cmpi.b #$FF,d3
00:000012CE 67FE            	  1994:             beq.s *                       * Check Z Flag  beq/bne
00:000012D0 6AFE            	  1995:             bpl.s *                       * Check N Flag  bmi/bpl
00:000012D2 64FE            	  1996:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012D4 68FE            	  1997:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1998: 
                            	  1999: 
                            	  2000: *     REGISTER - WORD
00:000012D6 203CFFFF8000    	  2001:             move.l #$FFFF8000,d0
00:000012DC 0C408000        	  2002:             cmpi.w #$8000,d0
00:000012E0 66FE            	  2003:             bne.s *                       * Check Z Flag  beq/bne
00:000012E2 6BFE            	  2004:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012E4 65FE            	  2005:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012E6 69FE            	  2006:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2007: 
00:000012E8 223CFFF00000    	  2008:             move.l #$FFF00000,d1
00:000012EE 4A41            	  2009:             cmpi.w #$0000,d1
00:000012F0 66FE            	  2010:             bne.s *                       * Check Z Flag  beq/bne
00:000012F2 6BFE            	  2011:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012F4 65FE            	  2012:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012F6 69FE            	  2013:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2014: 
00:000012F8 243CFFFF0002    	  2015:             move.l #$FFFF0002,d2
00:000012FE 0C42FFFF        	  2016:             cmpi.w #$FFFF,d2
00:00001302 67FE            	  2017:             beq.s *                       * Check Z Flag  beq/bne
00:00001304 6BFE            	  2018:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001306 64FE            	  2019:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001308 69FE            	  2020:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2021: 
00:0000130A 263CFFFF7FFF    	  2022:             move.l #$FFFF7FFF,d3
00:00001310 0C43FFFF        	  2023:             cmpi.w #$FFFF,d3
00:00001314 67FE            	  2024:             beq.s *                       * Check Z Flag  beq/bne
00:00001316 6AFE            	  2025:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001318 64FE            	  2026:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000131A 68FE            	  2027:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2028: 
                            	  2029: *     REGISTER - LONG
00:0000131C 203C80000000    	  2030:             move.l #$80000000,d0
00:00001322 0C8080000000    	  2031:             cmpi.l #$80000000,d0
00:00001328 66FE            	  2032:             bne.s *                       * Check Z Flag  beq/bne
00:0000132A 6BFE            	  2033:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000132C 65FE            	  2034:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000132E 69FE            	  2035:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2036: 
00:00001330 7200            	  2037:             moveq  #$00000000,d1
00:00001332 4A81            	  2038:             cmpi.l #$00000000,d1
00:00001334 66FE            	  2039:             bne.s *                       * Check Z Flag  beq/bne
00:00001336 6BFE            	  2040:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001338 65FE            	  2041:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000133A 69FE            	  2042:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2043: 
00:0000133C 7402            	  2044:             moveq  #$00000002,d2
00:0000133E 0C82FFFFFFFF    	  2045:             cmpi.l #$FFFFFFFF,d2
00:00001344 67FE            	  2046:             beq.s *                       * Check Z Flag  beq/bne
00:00001346 6BFE            	  2047:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001348 64FE            	  2048:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000134A 69FE            	  2049:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2050: 
00:0000134C 263C7FFFFFFF    	  2051:             move.l #$7FFFFFFF,d3
00:00001352 0C83FFFFFFFF    	  2052:             cmpi.l #$FFFFFFFF,d3
00:00001358 67FE            	  2053:             beq.s *                       * Check Z Flag  beq/bne
00:0000135A 6AFE            	  2054:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000135C 64FE            	  2055:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000135E 68FE            	  2056:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: *     EA=x(An,Dn) - BYTE
00:00001360 307C0100        	  2062:             move.l #$00000100,a0
00:00001364 7E04            	  2063:             moveq  #$00000004,d7
                            	  2064: 
00:00001366 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
00:0000136E 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
00:00001376 0C300080700F    	  2067:             cmpi.b #$80,15(a0,d7)
00:0000137C 66FE            	  2068:             bne.s *                       * Check Z Flag  beq/bne
00:0000137E 6BFE            	  2069:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001380 65FE            	  2070:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001382 69FE            	  2071:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2072: 
00:00001384 21BCFFFFF000700C	  2073:             move.l #$FFFFF000,12(a0,d7)
00:0000138C 4A30700F        	  2074:             cmpi.b #$00,15(a0,d7)
00:00001390 66FE            	  2075:             bne.s *                       * Check Z Flag  beq/bne
00:00001392 6BFE            	  2076:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001394 65FE            	  2077:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001396 69FE            	  2078:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2079: 
00:00001398 21BCFFFFFF02700C	  2080:             move.l #$FFFFFF02,12(a0,d7)
00:000013A0 0C3000FF700F    	  2081:             cmpi.b #$FF,15(a0,d7)
00:000013A6 67FE            	  2082:             beq.s *                       * Check Z Flag  beq/bne
00:000013A8 6BFE            	  2083:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013AA 64FE            	  2084:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013AC 69FE            	  2085:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2086: 
00:000013AE 21BCFFFFFF7F700C	  2087:             move.l #$FFFFFF7F,12(a0,d7)
00:000013B6 0C3000FF700F    	  2088:             cmpi.b #$FF,15(a0,d7)
00:000013BC 67FE            	  2089:             beq.s *                       * Check Z Flag  beq/bne
00:000013BE 6AFE            	  2090:             bpl.s *                       * Check N Flag  bmi/bpl
00:000013C0 64FE            	  2091:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013C2 68FE            	  2092:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2093: 
                            	  2094: 
                            	  2095: *     EA=x(An,Dn) - WORD
00:000013C4 21BCFFFF8000700C	  2096:             move.l #$FFFF8000,12(a0,d7)
00:000013CC 0C708000700E    	  2097:             cmpi.w #$8000,14(a0,d7)
00:000013D2 66FE            	  2098:             bne.s *                       * Check Z Flag  beq/bne
00:000013D4 6BFE            	  2099:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013D6 65FE            	  2100:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013D8 69FE            	  2101:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2102: 
00:000013DA 21BCFFF00000700C	  2103:             move.l #$FFF00000,12(a0,d7)
00:000013E2 4A70700E        	  2104:             cmpi.w #$0000,14(a0,d7)
00:000013E6 66FE            	  2105:             bne.s *                       * Check Z Flag  beq/bne
00:000013E8 6BFE            	  2106:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013EA 65FE            	  2107:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013EC 69FE            	  2108:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2109: 
00:000013EE 21BCFFFF0002700C	  2110:             move.l #$FFFF0002,12(a0,d7)
00:000013F6 0C70FFFF700E    	  2111:             cmpi.w #$FFFF,14(a0,d7)
00:000013FC 67FE            	  2112:             beq.s *                       * Check Z Flag  beq/bne
00:000013FE 6BFE            	  2113:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001400 64FE            	  2114:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001402 69FE            	  2115:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2116: 
00:00001404 21BCFFFF7FFF700C	  2117:             move.l #$FFFF7FFF,12(a0,d7)
00:0000140C 0C70FFFF700E    	  2118:             cmpi.w #$FFFF,14(a0,d7)
00:00001412 67FE            	  2119:             beq.s *                       * Check Z Flag  beq/bne
00:00001414 6AFE            	  2120:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001416 64FE            	  2121:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001418 68FE            	  2122:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2123: 
                            	  2124: *     EA=x(An,Dn) - LONG
00:0000141A 21BC80000000700C	  2125:             move.l #$80000000,12(a0,d7)
00:00001422 0CB080000000700C	  2126:             cmpi.l #$80000000,12(a0,d7)
00:0000142A 66FE            	  2127:             bne.s *                       * Check Z Flag  beq/bne
00:0000142C 6BFE            	  2128:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000142E 65FE            	  2129:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001430 69FE            	  2130:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2131: 
00:00001432 21BC00000000700C	  2132:             move.l #$00000000,12(a0,d7)
00:0000143A 4AB0700C        	  2133:             cmpi.l #$00000000,12(a0,d7)
00:0000143E 66FE            	  2134:             bne.s *                       * Check Z Flag  beq/bne
00:00001440 6BFE            	  2135:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001442 65FE            	  2136:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001444 69FE            	  2137:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2138: 
00:00001446 21BC00000002700C	  2139:             move.l #$00000002,12(a0,d7)
00:0000144E 0CB0FFFFFFFF700C	  2140:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00001456 67FE            	  2141:             beq.s *                       * Check Z Flag  beq/bne
00:00001458 6BFE            	  2142:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000145A 64FE            	  2143:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000145C 69FE            	  2144:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2145: 
00:0000145E 21BC7FFFFFFF700C	  2146:             move.l #$7FFFFFFF,12(a0,d7)
00:00001466 0CB0FFFFFFFF700C	  2147:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:0000146E 67FE            	  2148:             beq.s *                       * Check Z Flag  beq/bne
00:00001470 6AFE            	  2149:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001472 64FE            	  2150:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001474 68FE            	  2151:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2152: 
                            	  2153: 
                            	  2154: 
                            	  2155: 
00:00001476 4E75            	  2156:             rts
                            	  2157: 
                            	  2158: 
                            	  2159: 
                            	  2160: *-----------------------------------------------------------
                            	  2161: *-----------------------------------------------------------
                            	  2162: * OPCODE : ADD_I
                            	  2163: *-----------------------------------------------------------
                            	  2164: *-----------------------------------------------------------
                            	  2165: op_ADD_I:
                            	  2166: 
                            	  2167: *     EA = Dn  - Byte
00:00001478 203C12345678    	  2168:             move.l #$12345678,d0      * populate test data
00:0000147E 06000000        	  2169:             addi.b #0,d0
00:00001482 67FE            	  2170:             beq.s *                       * Check Z Flag  beq/bne
00:00001484 6BFE            	  2171:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001486 65FE            	  2172:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001488 69FE            	  2173:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000148A 06000010        	  2174:             addi.b #$10,d0
00:0000148E 67FE            	  2175:             beq.s *                       * Check Z Flag  beq/bne
00:00001490 6AFE            	  2176:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001492 65FE            	  2177:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001494 68FE            	  2178:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001496 060000A5        	  2179:             addi.b #$A5,d0
00:0000149A 67FE            	  2180:             beq.s *                       * Check Z Flag  beq/bne
00:0000149C 6BFE            	  2181:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000149E 64FE            	  2182:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014A0 68FE            	  2183:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014A2 0C00002D        	  2184:             cmpi.b #$2D,d0
00:000014A6 66FE            	  2185:             bne.s *                       * Check Z Flag  beq/bne
                            	  2186: 
                            	  2187: *     EA = Dn  - WORD
00:000014A8 203C12345678    	  2188:             move.l #$12345678,d0      * populate test data
00:000014AE 06400000        	  2189:             addi.w #0,d0
00:000014B2 67FE            	  2190:             beq.s *                       * Check Z Flag  beq/bne
00:000014B4 6BFE            	  2191:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014B6 65FE            	  2192:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014B8 69FE            	  2193:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014BA 06407000        	  2194:             addi.w #$7000,d0
00:000014BE 67FE            	  2195:             beq.s *                       * Check Z Flag  beq/bne
00:000014C0 6AFE            	  2196:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014C2 65FE            	  2197:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014C4 68FE            	  2198:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014C6 0640A55A        	  2199:             addi.w #$A55A,d0
00:000014CA 67FE            	  2200:             beq.s *                       * Check Z Flag  beq/bne
00:000014CC 6BFE            	  2201:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014CE 64FE            	  2202:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014D0 68FE            	  2203:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014D2 0C406BD2        	  2204:             cmpi.w #$6BD2,d0
00:000014D6 66FE            	  2205:             bne.s *                       * Check Z Flag  beq/bne
                            	  2206: 
                            	  2207: *     EA = Dn  - LONG
00:000014D8 203C12345678    	  2208:             move.l #$12345678,d0      * populate test data
00:000014DE 068000000000    	  2209:             addi.l #0,d0
00:000014E4 67FE            	  2210:             beq.s *                       * Check Z Flag  beq/bne
00:000014E6 6BFE            	  2211:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014E8 65FE            	  2212:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014EA 69FE            	  2213:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014EC 0680F0000000    	  2214:             addi.l #$F0000000,d0
00:000014F2 67FE            	  2215:             beq.s *                       * Check Z Flag  beq/bne
00:000014F4 6BFE            	  2216:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014F6 64FE            	  2217:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014F8 69FE            	  2218:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014FA 0680855AA55A    	  2219:             addi.l #$855AA55A,d0
00:00001500 67FE            	  2220:             beq.s *                       * Check Z Flag  beq/bne
00:00001502 6AFE            	  2221:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001504 65FE            	  2222:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001506 69FE            	  2223:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001508 0680A0000000    	  2224:             addi.l #$A0000000,d0
00:0000150E 68FE            	  2225:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001510 0C80278EFBD2    	  2226:             cmpi.l #$278EFBD2,d0
00:00001516 66FE            	  2227:             bne.s *                       * Check Z Flag  beq/bne
                            	  2228: 
                            	  2229: 
                            	  2230: 
                            	  2231: *     EA = x.L  - Byte
00:00001518 207C0000F100    	  2232:             move.l #$F100,a0      * populate test data
00:0000151E 20BC12345678    	  2233:             move.l #$12345678,(a0)     * populate test data
00:00001524 063900000000F103	  2234:             addi.b #0,$F103
00:0000152C 67FE            	  2235:             beq.s *                       * Check Z Flag  beq/bne
00:0000152E 6BFE            	  2236:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001530 65FE            	  2237:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001532 69FE            	  2238:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001534 063900100000F103	  2239:             addi.b #$10,$F103
00:0000153C 67FE            	  2240:             beq.s *                       * Check Z Flag  beq/bne
00:0000153E 6AFE            	  2241:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001540 65FE            	  2242:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001542 68FE            	  2243:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001544 063900A50000F103	  2244:             addi.b #$A5,$F103
00:0000154C 67FE            	  2245:             beq.s *                       * Check Z Flag  beq/bne
00:0000154E 6BFE            	  2246:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001550 64FE            	  2247:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001552 68FE            	  2248:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001554 0C39002D0000F103	  2249:             cmpi.b #$2D,$F103
00:0000155C 66FE            	  2250:             bne.s *                       * Check Z Flag  beq/bne
                            	  2251: 
                            	  2252: *     EA = x.L- WORD
00:0000155E 207C0000F100    	  2253:             move.l #$F100,a0      * populate test data
00:00001564 20BC12345678    	  2254:             move.l #$12345678,(a0)     * populate test data
00:0000156A 067900000000F100	  2255:             addi.w #0,$F100
00:00001572 67FE            	  2256:             beq.s *                       * Check Z Flag  beq/bne
00:00001574 6BFE            	  2257:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001576 65FE            	  2258:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001578 69FE            	  2259:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000157A 067970000000F100	  2260:             addi.w #$7000,$F100
00:00001582 67FE            	  2261:             beq.s *                       * Check Z Flag  beq/bne
00:00001584 6AFE            	  2262:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001586 65FE            	  2263:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001588 68FE            	  2264:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000158A 0679A55A0000F100	  2265:             addi.w #$A55A,$F100
00:00001592 67FE            	  2266:             beq.s *                       * Check Z Flag  beq/bne
00:00001594 6BFE            	  2267:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001596 64FE            	  2268:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001598 68FE            	  2269:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000159A 0C79278E0000F100	  2270:             cmpi.w #$278E,$F100
00:000015A2 66FE            	  2271:             bne.s *                       * Check Z Flag  beq/bne
                            	  2272: 
                            	  2273: *     EA = x.L- LONG
00:000015A4 23FC123456780000	  2274:             move.l #$12345678,$F100  * populate test data
00:000015AC F100
00:000015AE 06B9000000000000	  2275:             addi.l #0,$F100
00:000015B6 F100
00:000015B8 67FE            	  2276:             beq.s *                       * Check Z Flag  beq/bne
00:000015BA 6BFE            	  2277:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015BC 65FE            	  2278:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015BE 69FE            	  2279:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015C0 06B9F00000000000	  2280:             addi.l #$F0000000,$F100
00:000015C8 F100
00:000015CA 67FE            	  2281:             beq.s *                       * Check Z Flag  beq/bne
00:000015CC 6BFE            	  2282:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015CE 64FE            	  2283:             bcc.s *                       * Check C Flag  bcc/bcs
00:000015D0 69FE            	  2284:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015D2 06B9855AA55A0000	  2285:             addi.l #$855AA55A,$F100
00:000015DA F100
00:000015DC 67FE            	  2286:             beq.s *                       * Check Z Flag  beq/bne
00:000015DE 6AFE            	  2287:             bpl.s *                       * Check N Flag  bmi/bpl
00:000015E0 65FE            	  2288:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015E2 69FE            	  2289:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015E4 06B9A00000000000	  2290:             addi.l #$A0000000,$F100
00:000015EC F100
00:000015EE 68FE            	  2291:             bvc.s *                       * Check V Flag  bvc/bvs
00:000015F0 0CB9278EFBD20000	  2292:             cmpi.l #$278EFBD2,$F100
00:000015F8 F100
00:000015FA 66FE            	  2293:             bne.s *                       * Check Z Flag  beq/bne
                            	  2294: 
00:000015FC 4E75            	  2295:             rts
                            	  2296: 
                            	  2297: 
                            	  2298: *-----------------------------------------------------------
                            	  2299: *-----------------------------------------------------------
                            	  2300: * OPCODE : SUB_I
                            	  2301: *-----------------------------------------------------------
                            	  2302: *-----------------------------------------------------------
                            	  2303: op_SUB_I:
                            	  2304: 
                            	  2305: *     EA = Dn  - Byte
00:000015FE 203C12345678    	  2306:             move.l #$12345678,d0      * populate test data
00:00001604 04000000        	  2307:             subi.b #0,d0
00:00001608 67FE            	  2308:             beq.s *                       * Check Z Flag  beq/bne
00:0000160A 6BFE            	  2309:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000160C 65FE            	  2310:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000160E 69FE            	  2311:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001610 04000010        	  2312:             subi.b #$10,d0
00:00001614 67FE            	  2313:             beq.s *                       * Check Z Flag  beq/bne
00:00001616 6BFE            	  2314:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001618 65FE            	  2315:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000161A 69FE            	  2316:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000161C 040000A5        	  2317:             subi.b #$A5,d0
00:00001620 67FE            	  2318:             beq.s *                       * Check Z Flag  beq/bne
00:00001622 6AFE            	  2319:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001624 64FE            	  2320:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001626 68FE            	  2321:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001628 0C0000C3        	  2322:             cmpi.b #$C3,d0
00:0000162C 66FE            	  2323:             bne.s *                       * Check Z Flag  beq/bne
                            	  2324: 
                            	  2325: *     EA = Dn  - WORD
00:0000162E 203C12345678    	  2326:             move.l #$12345678,d0      * populate test data
00:00001634 04400000        	  2327:             subi.w #0,d0
00:00001638 67FE            	  2328:             beq.s *                       * Check Z Flag  beq/bne
00:0000163A 6BFE            	  2329:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000163C 65FE            	  2330:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000163E 69FE            	  2331:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001640 04407000        	  2332:             subi.w #$7000,d0
00:00001644 67FE            	  2333:             beq.s *                       * Check Z Flag  beq/bne
00:00001646 6AFE            	  2334:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001648 64FE            	  2335:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000164A 69FE            	  2336:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000164C 0440A55A        	  2337:             subi.w #$A55A,d0
00:00001650 67FE            	  2338:             beq.s *                       * Check Z Flag  beq/bne
00:00001652 6BFE            	  2339:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001654 65FE            	  2340:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001656 69FE            	  2341:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001658 0C40411E        	  2342:             cmpi.w #$411E,d0
00:0000165C 66FE            	  2343:             bne.s *                       * Check Z Flag  beq/bne
                            	  2344: 
                            	  2345: *     EA = Dn  - LONG
00:0000165E 203C12345678    	  2346:             move.l #$12345678,d0      * populate test data
00:00001664 048000000000    	  2347:             subi.l #0,d0
00:0000166A 67FE            	  2348:             beq.s *                       * Check Z Flag  beq/bne
00:0000166C 6BFE            	  2349:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000166E 65FE            	  2350:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001670 69FE            	  2351:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001672 0480F0000000    	  2352:             subi.l #$F0000000,d0
00:00001678 67FE            	  2353:             beq.s *                       * Check Z Flag  beq/bne
00:0000167A 6BFE            	  2354:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000167C 64FE            	  2355:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000167E 69FE            	  2356:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001680 0480855AA55A    	  2357:             subi.l #$855AA55A,d0
00:00001686 67FE            	  2358:             beq.s *                       * Check Z Flag  beq/bne
00:00001688 6AFE            	  2359:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000168A 64FE            	  2360:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000168C 68FE            	  2361:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000168E 0480A0000000    	  2362:             subi.l #$A0000000,d0
00:00001694 69FE            	  2363:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001696 0C80FCD9B11E    	  2364:             cmpi.l #$FCD9B11E,d0
00:0000169C 66FE            	  2365:             bne.s *                       * Check Z Flag  beq/bne
                            	  2366: 
                            	  2367: 
                            	  2368: 
                            	  2369: *     EA = x.L  - Byte
00:0000169E 207C0000F100    	  2370:             move.l #$F100,a0      * populate test data
00:000016A4 20BC12345678    	  2371:             move.l #$12345678,(a0)     * populate test data
00:000016AA 043900000000F103	  2372:             subi.b #0,$F103
00:000016B2 67FE            	  2373:             beq.s *                       * Check Z Flag  beq/bne
00:000016B4 6BFE            	  2374:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016B6 65FE            	  2375:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016B8 69FE            	  2376:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016BA 043900100000F103	  2377:             subi.b #$10,$F103
00:000016C2 67FE            	  2378:             beq.s *                       * Check Z Flag  beq/bne
00:000016C4 6BFE            	  2379:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016C6 65FE            	  2380:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016C8 69FE            	  2381:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016CA 043900A50000F103	  2382:             subi.b #$A5,$F103
00:000016D2 67FE            	  2383:             beq.s *                       * Check Z Flag  beq/bne
00:000016D4 6AFE            	  2384:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016D6 64FE            	  2385:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016D8 68FE            	  2386:             bvc.s *                       * Check V Flag  bvc/bvs
00:000016DA 0C3900C30000F103	  2387:             cmpi.b #$C3,$F103
00:000016E2 66FE            	  2388:             bne.s *                       * Check Z Flag  beq/bne
                            	  2389: 
                            	  2390: *     EA = x.L- WORD
00:000016E4 207C0000F100    	  2391:             move.l #$F100,a0      * populate test data
00:000016EA 20BC12345678    	  2392:             move.l #$12345678,(a0)     * populate test data
00:000016F0 047900000000F100	  2393:             subi.w #0,$F100
00:000016F8 67FE            	  2394:             beq.s *                       * Check Z Flag  beq/bne
00:000016FA 6BFE            	  2395:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016FC 65FE            	  2396:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016FE 69FE            	  2397:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001700 047970000000F100	  2398:             subi.w #$7000,$F100
00:00001708 67FE            	  2399:             beq.s *                       * Check Z Flag  beq/bne
00:0000170A 6AFE            	  2400:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000170C 64FE            	  2401:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000170E 69FE            	  2402:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001710 0479A55A0000F100	  2403:             subi.w #$A55A,$F100
00:00001718 67FE            	  2404:             beq.s *                       * Check Z Flag  beq/bne
00:0000171A 6AFE            	  2405:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000171C 64FE            	  2406:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000171E 69FE            	  2407:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001720 0C79FCDA0000F100	  2408:             cmpi.w #$FCDA,$F100
00:00001728 66FE            	  2409:             bne.s *                       * Check Z Flag  beq/bne
                            	  2410: 
                            	  2411: *     EA = x.L- LONG
00:0000172A 23FC123456780000	  2412:             move.l #$12345678,$F100  * populate test data
00:00001732 F100
00:00001734 04B9000000000000	  2413:             subi.l #0,$F100
00:0000173C F100
00:0000173E 67FE            	  2414:             beq.s *                       * Check Z Flag  beq/bne
00:00001740 6BFE            	  2415:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001742 65FE            	  2416:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001744 69FE            	  2417:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001746 04B9F00000000000	  2418:             subi.l #$F0000000,$F100
00:0000174E F100
00:00001750 67FE            	  2419:             beq.s *                       * Check Z Flag  beq/bne
00:00001752 6BFE            	  2420:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001754 64FE            	  2421:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001756 69FE            	  2422:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001758 04B9855AA55A0000	  2423:             subi.l #$855AA55A,$F100
00:00001760 F100
00:00001762 67FE            	  2424:             beq.s *                       * Check Z Flag  beq/bne
00:00001764 6AFE            	  2425:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001766 64FE            	  2426:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001768 68FE            	  2427:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000176A 04B9A00000000000	  2428:             subi.l #$A0000000,$F100
00:00001772 F100
00:00001774 69FE            	  2429:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001776 0CB9FCD9B11E0000	  2430:             cmpi.l #$FCD9B11E,$F100
00:0000177E F100
00:00001780 66FE            	  2431:             bne.s *                       * Check Z Flag  beq/bne
                            	  2432: 
00:00001782 4E75            	  2433:             rts
                            	  2434: 
                            	  2435: 
                            	  2436: 
                            	  2437: *-----------------------------------------------------------
                            	  2438: *-----------------------------------------------------------
                            	  2439: * OPCODE : MOVE
                            	  2440: *-----------------------------------------------------------
                            	  2441: *-----------------------------------------------------------
                            	  2442: op_MOVE:
00:00001784 203C11223344    	  2443:             move.l #$11223344,d0
00:0000178A 223C55667788    	  2444:             move.l #$55667788,d1
00:00001790 243C8899AABB    	  2445:             move.l #$8899aabb,d2
00:00001796 263CCCDDEEFF    	  2446:             move.l #$ccddeeff,d3
00:0000179C 7800            	  2447:             moveq  #$00000000,d4
00:0000179E 7A00            	  2448:             moveq  #$00000000,d5
00:000017A0 7C00            	  2449:             moveq  #$00000000,d6
00:000017A2 7E00            	  2450:             moveq  #$00000000,d7
00:000017A4 207C44332211    	  2451:             move.l #$44332211,a0
00:000017AA 227C88776655    	  2452:             move.l #$88776655,a1
00:000017B0 247CBBAA9988    	  2453:             move.l #$bbaa9988,a2
00:000017B6 267CFFEEDDCC    	  2454:             move.l #$ffeeddcc,a3
                            	  2455: 
00:000017BC 1800            	  2456:             move.b d0,d4              * BYTE - DATA REGISTER
00:000017BE 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
00:000017C0 6BFE            	  2458:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017C2 0C8400000044    	  2459:             cmpi.l #$00000044,d4
00:000017C8 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
00:000017CA 3A01            	  2462:             move.w d1,d5              * WORD - DATA REGISTER
00:000017CC 67FE            	  2463:             beq.s *                       * Check Z Flag  beq/bne
00:000017CE 6BFE            	  2464:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017D0 0C8500007788    	  2465:             cmpi.l #$00007788,d5
00:000017D6 66FE            	  2466:             bne.s *                       * Check Z Flag  beq/bne
                            	  2467: 
00:000017D8 2C02            	  2468:             move.l d2,d6              * LONG - DATA REGISTER
00:000017DA 67FE            	  2469:             beq.s *                       * Check Z Flag  beq/bne
00:000017DC 6AFE            	  2470:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017DE 0C868899AABB    	  2471:             cmpi.l #$8899aabb,d6
00:000017E4 66FE            	  2472:             bne.s *                       * Check Z Flag  beq/bne
                            	  2473: 
00:000017E6 3A09            	  2474:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:000017E8 67FE            	  2475:             beq.s *                       * Check Z Flag  beq/bne
00:000017EA 6BFE            	  2476:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017EC 0C8500006655    	  2477:             cmpi.l #$00006655,d5
00:000017F2 66FE            	  2478:             bne.s *                       * Check Z Flag  beq/bne
                            	  2479: 
00:000017F4 2C0A            	  2480:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:000017F6 67FE            	  2481:             beq.s *                       * Check Z Flag  beq/bne
00:000017F8 6AFE            	  2482:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017FA 0C86BBAA9988    	  2483:             cmpi.l #$bbaa9988,d6
00:00001800 66FE            	  2484:             bne.s *                       * Check Z Flag  beq/bne
                            	  2485: 
                            	  2486: 
00:00001802 3842            	  2487:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:00001804 B9C2            	  2488:             cmpa.l d2,a4
00:00001806 67FE            	  2489:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2490: 
00:00001808 2A41            	  2491:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:0000180A BBC1            	  2492:             cmpa.l d1,a5
00:0000180C 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: 
                            	  2496: 
                            	  2497: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2498: 
00:0000180E 203C11223344    	  2499:             move.l #$11223344,d0
00:00001814 223C00010100    	  2500:             move.l #$00010100,d1
00:0000181A 243C8899AABB    	  2501:             move.l #$8899aabb,d2
00:00001820 7601            	  2502:             moveq  #$00000001,d3
00:00001822 7800            	  2503:             moveq  #$00000000,d4
00:00001824 7A00            	  2504:             moveq  #$00000000,d5
00:00001826 7C00            	  2505:             moveq  #$00000000,d6
00:00001828 7E00            	  2506:             moveq  #$00000000,d7
00:0000182A 91C8            	  2507:             move.l #$00000000,a0
00:0000182C 227C00010100    	  2508:             move.l #$00010100,a1
                            	  2509: 
                            	  2510: *     x(An,AL) --> x.L
00:00001832 11BC005A9804    	  2511:             move.b #$5A,4(a0,a1.l)    * BYTE
00:00001838 47F09804        	  2512:             lea 4(a0,a1.l),a3
00:0000183C 13F0980400010105	  2513:             move.b 4(a0,a1.l),$00010105
00:00001844 67FE            	  2514:             beq.s *                       * Check Z Flag  beq/bne
00:00001846 6BFE            	  2515:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001848 0C30005A9805    	  2516:             cmpi.b #$5A,5(a0,a1.l)
00:0000184E 66FE            	  2517:             bne.s *                       * Check Z Flag  beq/bne
                            	  2518: 
                            	  2519: *     x.L --> n(An,Dw)
00:00001850 11B9000101051007	  2520: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:00001858 67FE            	  2521:             beq.s *                       * Check Z Flag  beq/bne
00:0000185A 6BFE            	  2522:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000185C 0C30005A1007    	  2523:             cmpi.b #$5A,7(a0,d1.w)
00:00001862 66FE            	  2524:             bne.s *                       * Check Z Flag  beq/bne
                            	  2525: 
                            	  2526: *     x(PC,Ds) --> x.w
00:00001864 11FB30660100    	  2527:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:0000186A 67FE            	  2528:             beq.s *                       * Check Z Flag  beq/bne
00:0000186C 6AFE            	  2529:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000186E 0C3900B900001851	  2530:             cmpi.b #$B9,1+MOVE2
00:00001876 66FE            	  2531:             bne.s *                       * Check Z Flag  beq/bne
                            	  2532: 
                            	  2533: *     #x -->    n(An,AL)
00:00001878 11BC00781007    	  2534:             move.b  #$78,7(a0,d1.w)    * BYTE
00:0000187E 67FE            	  2535:             beq.s *                       * Check Z Flag  beq/bne
00:00001880 6BFE            	  2536:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001882 0C3000781007    	  2537:             cmpi.b #$78,7(a0,d1.w)
00:00001888 66FE            	  2538:             bne.s *                       * Check Z Flag  beq/bne
                            	  2539: 
00:0000188A 203C11223344    	  2540:             move.l #$11223344,d0
00:00001890 223C00010100    	  2541:             move.l #$00010100,d1
00:00001896 243C8899AABB    	  2542:             move.l #$8899aabb,d2
00:0000189C 7602            	  2543:             moveq  #$00000002,d3
00:0000189E 7800            	  2544:             moveq  #$00000000,d4
00:000018A0 7A00            	  2545:             moveq  #$00000000,d5
00:000018A2 7C00            	  2546:             moveq  #$00000000,d6
00:000018A4 7E00            	  2547:             moveq  #$00000000,d7
00:000018A6 91C8            	  2548:             move.l #$00000000,a0
00:000018A8 227C00010100    	  2549:             move.l #$00010100,a1
                            	  2550: 
                            	  2551: *     x(An,AL) --> x.L
00:000018AE 31BC5A5A9804    	  2552:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:000018B4 49F09804        	  2553:             lea 4(a0,a1.l),a4
00:000018B8 33F0980400010104	  2554:             move.w 4(a0,a1.l),$00010104
00:000018C0 67FE            	  2555:             beq.s *                       * Check Z Flag  beq/bne
00:000018C2 6BFE            	  2556:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018C4 0C705A5A9804    	  2557:             cmpi.w #$5A5A,4(a0,a1.l)
00:000018CA 66FE            	  2558:             bne.s *                       * Check Z Flag  beq/bne
                            	  2559: 
                            	  2560: *     x.L --> n(An,Dw)
00:000018CC 31B9000101041006	  2561: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:000018D4 67FE            	  2562:             beq.s *                       * Check Z Flag  beq/bne
00:000018D6 6BFE            	  2563:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018D8 0C705A5A1006    	  2564:             cmpi.w #$5A5A,6(a0,d1.w)
00:000018DE 66FE            	  2565:             bne.s *                       * Check Z Flag  beq/bne
                            	  2566: 
                            	  2567: *     x(PC,Ds) --> x.w
00:000018E0 31FB30EA0100    	  2568:             move.w  MOVE1(pc,d3),$0100 * WORD
00:000018E6 67FE            	  2569:             beq.s *                       * Check Z Flag  beq/bne
00:000018E8 6BFE            	  2570:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018EA 0C7967FE000018D4	  2571:             cmpi.w #$67FE,8+MOVE1
00:000018F2 66FE            	  2572:             bne.s *                       * Check Z Flag  beq/bne
                            	  2573: 
                            	  2574: *     #x -->    n(An,AL)
00:000018F4 31BC78781006    	  2575:             move.w  #$7878,6(a0,d1.w)    * WORD
00:000018FA 67FE            	  2576:             beq.s *                       * Check Z Flag  beq/bne
00:000018FC 6BFE            	  2577:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018FE 0C7078781006    	  2578:             cmpi.w #$7878,6(a0,d1.w)
00:00001904 66FE            	  2579:             bne.s *                       * Check Z Flag  beq/bne
                            	  2580: 
                            	  2581: * ---
                            	  2582: 
00:00001906 203C11223344    	  2583:             move.l #$11223344,d0
00:0000190C 223C00010100    	  2584:             move.l #$00010100,d1
00:00001912 243C8899AABB    	  2585:             move.l #$8899aabb,d2
00:00001918 7602            	  2586:             moveq  #$00000002,d3
00:0000191A 7800            	  2587:             moveq  #$00000000,d4
00:0000191C 7A00            	  2588:             moveq  #$00000000,d5
00:0000191E 7C00            	  2589:             moveq  #$00000000,d6
00:00001920 7E00            	  2590:             moveq  #$00000000,d7
00:00001922 91C8            	  2591:             move.l #$00000000,a0
00:00001924 227C00010100    	  2592:             move.l #$00010100,a1
                            	  2593: 
                            	  2594: *     x(An,AL) --> x.L
00:0000192A 21BC5A5A12349804	  2595:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:00001932 49F09804        	  2596:             lea 4(a0,a1.l),a4
00:00001936 23F0980400010104	  2597:             move.l 4(a0,a1.l),$00010104
00:0000193E 67FE            	  2598:             beq.s *                       * Check Z Flag  beq/bne
00:00001940 6BFE            	  2599:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001942 0CB05A5A12349804	  2600:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:0000194A 66FE            	  2601:             bne.s *                       * Check Z Flag  beq/bne
                            	  2602: 
                            	  2603: *     x.L --> n(An,Dw)
00:0000194C 21B9000101041006	  2604: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00001954 67FE            	  2605:             beq.s *                       * Check Z Flag  beq/bne
00:00001956 6BFE            	  2606:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001958 0CB05A5A12341006	  2607:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:00001960 66FE            	  2608:             bne.s *                       * Check Z Flag  beq/bne
                            	  2609: 
                            	  2610: *     x(PC,Ds) --> x.w
00:00001962 21FB30E80100    	  2611:             move.l  MOVE3(pc,d3),$0100 * LONG
00:00001968 67FE            	  2612:             beq.s *                       * Check Z Flag  beq/bne
00:0000196A 6BFE            	  2613:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000196C 0CB967FE6BFE0000	  2614:             cmpi.l #$67FE6BFE,8+MOVE3
00:00001974 1954
00:00001976 66FE            	  2615:             bne.s *                       * Check Z Flag  beq/bne
                            	  2616: 
                            	  2617: *     #x -->    n(An,AL)
00:00001978 21BC787823231006	  2618:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:00001980 67FE            	  2619:             beq.s *                       * Check Z Flag  beq/bne
00:00001982 6BFE            	  2620:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001984 0CB0787823231006	  2621:             cmpi.l #$78782323,6(a0,d1.w)
00:0000198C 66FE            	  2622:             bne.s *                       * Check Z Flag  beq/bne
                            	  2623: 
                            	  2624: 
00:0000198E 4E75            	  2625:          rts
                            	  2626: 
                            	  2627: 
                            	  2628: *-----------------------------------------------------------
                            	  2629: *-----------------------------------------------------------
                            	  2630: * OPCODE : MOVE_xxx_FLAGS
                            	  2631: *-----------------------------------------------------------
                            	  2632: *-----------------------------------------------------------
                            	  2633: op_MOVE_xxx_FLAGS:
                            	  2634: 
                            	  2635: *     Move_To_SR
                            	  2636: 
                            	  2637: *     Dn
                            	  2638: 
00:00001990 303C2FFF        	  2639:             move.w #$2FFF,d0
00:00001994 47C0            	  2640:             move.l d0,SR
00:00001996 6AFE            	  2641:             bpl.s *           * branch if Z clear
00:00001998 66FE            	  2642:             bne.s *           * branch if N clear
00:0000199A 68FE            	  2643:             bvc.s *           * branch if V clear
00:0000199C 64FE            	  2644:             bcc.s *           * branch if C clear
00:0000199E 303C2F00        	  2645:             move.w #$2F00,d0
00:000019A2 44C0            	  2646:             move d0,CCR
00:000019A4 67FE            	  2647:             beq.s *           * branch if Z set
00:000019A6 6BFE            	  2648:             bmi.s *           * branch if N set
00:000019A8 69FE            	  2649:             bvs.s *           * branch if V set
00:000019AA 65FE            	  2650:             bcs.s *           * branch if C set
                            	  2651: 
00:000019AC 303C2000        	  2652:             move.w #$2000,d0
00:000019B0 47C0            	  2653:             move.l d0,SR
00:000019B2 67FE            	  2654:             beq.s *           * branch if Z set
00:000019B4 6BFE            	  2655:             bmi.s *           * branch if N set
00:000019B6 69FE            	  2656:             bvs.s *           * branch if V set
00:000019B8 65FE            	  2657:             bcs.s *           * branch if C set
                            	  2658: 
                            	  2659: *     (An)
00:000019BA 307C0100        	  2660:             move.l #$00000100,a0
00:000019BE 30BC2FFF        	  2661:             move.w #$2FFF,(a0)
00:000019C2 47D0            	  2662:             move.l (a0),SR
00:000019C4 6AFE            	  2663:             bpl.s *           * branch if Z clear
00:000019C6 66FE            	  2664:             bne.s *           * branch if N clear
00:000019C8 68FE            	  2665:             bvc.s *           * branch if V clear
00:000019CA 64FE            	  2666:             bcc.s *           * branch if C clear
                            	  2667: 
00:000019CC 30BC2000        	  2668:             move.w #$2000,(a0)
00:000019D0 47D0            	  2669:             move.l (a0),SR
00:000019D2 67FE            	  2670:             beq.s *           * branch if Z set
00:000019D4 6BFE            	  2671:             bmi.s *           * branch if N set
00:000019D6 69FE            	  2672:             bvs.s *           * branch if V set
00:000019D8 65FE            	  2673:             bcs.s *           * branch if C set
                            	  2674: 
                            	  2675: *     (An)+
00:000019DA 307C0100        	  2676:             move.l #$00000100,a0
00:000019DE 30BC2FFF        	  2677:             move.w #$2FFF,(a0)
00:000019E2 47D8            	  2678:             move.l (a0)+,SR
00:000019E4 6AFE            	  2679:             bpl.s *           * branch if Z clear
00:000019E6 66FE            	  2680:             bne.s *           * branch if N clear
00:000019E8 68FE            	  2681:             bvc.s *           * branch if V clear
00:000019EA 64FE            	  2682:             bcc.s *           * branch if C clear
                            	  2683: 
00:000019EC 30BC2000        	  2684:             move.w #$2000,(a0)
00:000019F0 47D8            	  2685:             move.l (a0)+,SR
00:000019F2 67FE            	  2686:             beq.s *           * branch if Z set
00:000019F4 6BFE            	  2687:             bmi.s *           * branch if N set
00:000019F6 69FE            	  2688:             bvs.s *           * branch if V set
00:000019F8 65FE            	  2689:             bcs.s *           * branch if C set
                            	  2690: 
                            	  2691: *     -(An)
00:000019FA 307C0102        	  2692:             move.l #$00000102,a0
00:000019FE 30BC2FFF        	  2693:             move.w #$2FFF,(a0)
00:00001A02 47D8            	  2694:             move.l (a0)+,SR
00:00001A04 6AFE            	  2695:             bpl.s *           * branch if Z clear
00:00001A06 66FE            	  2696:             bne.s *           * branch if N clear
00:00001A08 68FE            	  2697:             bvc.s *           * branch if V clear
00:00001A0A 64FE            	  2698:             bcc.s *           * branch if C clear
                            	  2699: 
00:00001A0C 30BC2000        	  2700:             move.w #$2000,(a0)
00:00001A10 47D8            	  2701:             move.l (a0)+,SR
00:00001A12 67FE            	  2702:             beq.s *           * branch if Z set
00:00001A14 6BFE            	  2703:             bmi.s *           * branch if N set
00:00001A16 69FE            	  2704:             bvs.s *           * branch if V set
00:00001A18 65FE            	  2705:             bcs.s *           * branch if C set
                            	  2706: 
                            	  2707: *     n(An)
00:00001A1A 307C0102        	  2708:             move.l #$00000102,a0
00:00001A1E 317C2FFF0002    	  2709:             move.w #$2FFF,2(a0)
00:00001A24 47E80002        	  2710:             move.l 2(a0),SR
00:00001A28 6AFE            	  2711:             bpl.s *           * branch if Z clear
00:00001A2A 66FE            	  2712:             bne.s *           * branch if N clear
00:00001A2C 68FE            	  2713:             bvc.s *           * branch if V clear
00:00001A2E 64FE            	  2714:             bcc.s *           * branch if C clear
                            	  2715: 
00:00001A30 317C20000002    	  2716:             move.w #$2000,2(a0)
00:00001A36 47E80002        	  2717:             move.l 2(a0),SR
00:00001A3A 67FE            	  2718:             beq.s *           * branch if Z set
00:00001A3C 6BFE            	  2719:             bmi.s *           * branch if N set
00:00001A3E 69FE            	  2720:             bvs.s *           * branch if V set
00:00001A40 65FE            	  2721:             bcs.s *           * branch if C set
                            	  2722: 
                            	  2723: *     n(An,Rn.l)
00:00001A42 307C0100        	  2724:             move.l #$00000100,a0
00:00001A46 7002            	  2725:             moveq  #$00000002,d0
00:00001A48 31BC2FFF0802    	  2726:             move.w #$2FFF,2(a0,d0.l)
00:00001A4E 47F00802        	  2727:             move.l 2(a0,d0.l),SR
00:00001A52 6AFE            	  2728:             bpl.s *           * branch if Z clear
00:00001A54 66FE            	  2729:             bne.s *           * branch if N clear
00:00001A56 68FE            	  2730:             bvc.s *           * branch if V clear
00:00001A58 64FE            	  2731:             bcc.s *           * branch if C clear
                            	  2732: 
00:00001A5A 31BC20000802    	  2733:             move.w #$2000,2(a0,d0.l)
00:00001A60 47F00802        	  2734:             move.l 2(a0,d0.l),SR
00:00001A64 67FE            	  2735:             beq.s *           * branch if Z set
00:00001A66 6BFE            	  2736:             bmi.s *           * branch if N set
00:00001A68 69FE            	  2737:             bvs.s *           * branch if V set
00:00001A6A 65FE            	  2738:             bcs.s *           * branch if C set
                            	  2739: 
                            	  2740: *     x.W
00:00001A6C 31FC2FFF0100    	  2741:             move.w #$2FFF,$0100
00:00001A72 47F80100        	  2742:             move.l $0100,SR
00:00001A76 6AFE            	  2743:             bpl.s *           * branch if Z clear
00:00001A78 66FE            	  2744:             bne.s *           * branch if N clear
00:00001A7A 68FE            	  2745:             bvc.s *           * branch if V clear
00:00001A7C 64FE            	  2746:             bcc.s *           * branch if C clear
                            	  2747: 
00:00001A7E 31FC20000100    	  2748:             move.w #$2000,$0100
00:00001A84 47F80100        	  2749:             move.l $0100,SR
00:00001A88 67FE            	  2750:             beq.s *           * branch if Z set
00:00001A8A 6BFE            	  2751:             bmi.s *           * branch if N set
00:00001A8C 69FE            	  2752:             bvs.s *           * branch if V set
00:00001A8E 65FE            	  2753:             bcs.s *           * branch if C set
                            	  2754: 
                            	  2755: *     x.L
00:00001A90 33FC2FFF00010100	  2756:             move.w #$2FFF,$00010100
00:00001A98 47F900010100    	  2757:             move.l $00010100,SR
00:00001A9E 6AFE            	  2758:             bpl.s *           * branch if Z clear
00:00001AA0 66FE            	  2759:             bne.s *           * branch if N clear
00:00001AA2 68FE            	  2760:             bvc.s *           * branch if V clear
00:00001AA4 64FE            	  2761:             bcc.s *           * branch if C clear
                            	  2762: 
00:00001AA6 33FC200000010100	  2763: MOVE4:      move.w #$2000,$00010100
00:00001AAE 47F900010100    	  2764:             move.l $00010100,SR
00:00001AB4 67FE            	  2765:             beq.s *           * branch if Z set
00:00001AB6 6BFE            	  2766:             bmi.s *           * branch if N set
00:00001AB8 69FE            	  2767:             bvs.s *           * branch if V set
00:00001ABA 65FE            	  2768:             bcs.s *           * branch if C set
                            	  2769: 
                            	  2770: *     x(PC)
00:00001ABC 47FAFFEA        	  2771:             move.l MOVE4+2(pc),SR
00:00001AC0 67FE            	  2772:             beq.s *           * branch if Z set
00:00001AC2 6BFE            	  2773:             bmi.s *           * branch if N set
00:00001AC4 69FE            	  2774:             bvs.s *           * branch if V set
00:00001AC6 65FE            	  2775:             bcs.s *           * branch if C set
                            	  2776: 
                            	  2777: *     x(PC,d0.l)
00:00001AC8 7000            	  2778:             moveq  #$00000000,d0
00:00001ACA 47FB08DC        	  2779:             move.l MOVE4+2(pc,d0.l),SR
00:00001ACE 67FE            	  2780:             beq.s *           * branch if Z set
00:00001AD0 6BFE            	  2781:             bmi.s *           * branch if N set
00:00001AD2 69FE            	  2782:             bvs.s *           * branch if V set
00:00001AD4 65FE            	  2783:             bcs.s *           * branch if C set
00:00001AD6 44FB08D0        	  2784:             move MOVE4+2(pc,d0.l),CCR
00:00001ADA 67FE            	  2785:             beq.s *           * branch if Z set
00:00001ADC 6BFE            	  2786:             bmi.s *           * branch if N set
00:00001ADE 69FE            	  2787:             bvs.s *           * branch if V set
00:00001AE0 65FE            	  2788:             bcs.s *           * branch if C set
                            	  2789: 
                            	  2790: *     #x
00:00001AE2 47FCFF002FFF    	  2791:             move.l #$FF002FFF,SR
00:00001AE8 66FE            	  2792:             bne.s *           * branch if Z clear
00:00001AEA 6AFE            	  2793:             bpl.s *           * branch if N clear
00:00001AEC 68FE            	  2794:             bvc.s *           * branch if V clear
00:00001AEE 64FE            	  2795:             bcc.s *           * branch if C clear
                            	  2796: 
                            	  2797: 
                            	  2798: 
                            	  2799: *  MOVE_From_SR
                            	  2800: 
                            	  2801: 
                            	  2802: 
                            	  2803: *     Dn
00:00001AF0 47FCFF00275A    	  2804:             move.l #$FF00275A,SR          * Initial value
00:00001AF6 4180            	  2805:             move.l SR,d0
00:00001AF8 0C80FF00271A    	  2806:             cmpi.l #$FF00271A,d0
                            	  2807: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2808: *            bne.s *                   * branch if Z set
                            	  2809: 
                            	  2810: *     (An)
00:00001AFE 307C0100        	  2811:             move.l #$00000100,a0
00:00001B02 47FCFF00275A    	  2812:             move.l #$FF00275A,SR          * Initial value
00:00001B08 4190            	  2813:             move.l SR,(a0)
00:00001B0A 0C90FF00275A    	  2814:             cmpi.l #$FF00275A,(a0)
00:00001B10 66FE            	  2815:             bne.s *                   * branch if Z set
                            	  2816: 
                            	  2817: *     (An)+
00:00001B12 307C0100        	  2818:             move.l #$00000100,a0
00:00001B16 47FC0000257A    	  2819:             move.l #$257A,SR          * Initial value
00:00001B1C 4198            	  2820:             move.l SR,(a0)+
00:00001B1E 307C0100        	  2821:             move.l #$00000100,a0
00:00001B22 0C980000257A    	  2822:             cmpi.l #$257A,(a0)+
00:00001B28 66FE            	  2823:             bne.s *                   * branch if Z set
                            	  2824: 
                            	  2825: *     -(An)
00:00001B2A 307C0102        	  2826:             move.l #$00000102,a0
00:00001B2E 47FC00002766    	  2827:             move.l #$2766,SR          * Initial value
00:00001B34 41A0            	  2828:             move.l SR,-(a0)
00:00001B36 307C0100        	  2829:             move.l #$00000100,a0
00:00001B3A 0C9000002766    	  2830:             cmpi.l #$2766,(a0)
00:00001B40 66FE            	  2831:             bne.s *                   * branch if Z set
                            	  2832: 
                            	  2833: *     x(An)
00:00001B42 307C0102        	  2834:             move.l #$00000102,a0
00:00001B46 47FC00002733    	  2835:             move.l #$2733,SR          * Initial value
00:00001B4C 41A80004        	  2836:             move.l SR,4(a0)
00:00001B50 0CA8000027330004	  2837:             cmpi.l #$2733,4(a0)
00:00001B58 66FE            	  2838:             bne.s *                   * branch if Z set
                            	  2839: 
                            	  2840: *     x(An,rn)
00:00001B5A 307C0102        	  2841:             move.l #$00000102,a0
00:00001B5E 7004            	  2842:             moveq  #$00000004,d0
00:00001B60 47FC0000275A    	  2843:             move.l #$275a,SR          * Initial value
00:00001B66 41B00804        	  2844:             move.l SR,4(a0,d0.l)
00:00001B6A 0CB00000275A0804	  2845:             cmpi.l #$275a,4(a0,d0.l)
00:00001B72 66FE            	  2846:             bne.s *                   * branch if Z set
                            	  2847: 
                            	  2848: *     x.W
00:00001B74 47FC00002777    	  2849:             move.l #$2777,SR          * Initial value
00:00001B7A 41B80102        	  2850:             move.l SR,$0102
00:00001B7E 0CB8000027770102	  2851:             cmpi.l #$2777,$0102
00:00001B86 66FE            	  2852:             bne.s *                   * branch if Z set
                            	  2853: 
                            	  2854: *     x.L
00:00001B88 47FC00002777    	  2855:             move.l #$2777,SR          * Initial value
00:00001B8E 41B900010102    	  2856:             move.l SR,$10102
00:00001B94 0CB9000027770001	  2857:             cmpi.l #$2777,$10102
00:00001B9C 0102
00:00001B9E 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
                            	  2860: 
                            	  2861: 
00:00001BA0 47FC00002700    	  2862:             move.l #$2700,SR          * Put flags back to initial value
                            	  2863: 
00:00001BA6 4E75            	  2864:             rts
                            	  2865: 
                            	  2866: 
                            	  2867: *-----------------------------------------------------------
                            	  2868: *-----------------------------------------------------------
                            	  2869: * OPCODE : EXT
                            	  2870: *-----------------------------------------------------------
                            	  2871: *-----------------------------------------------------------
                            	  2872: op_EXT:
                            	  2873: 
00:00001BA8 707F            	  2874:             move.l #$0000007F,d0
00:00001BAA 223C00008FFF    	  2875:             move.l #$00008FFF,d1
00:00001BB0 7400            	  2876:             moveq  #$00000000,d2
                            	  2877: 
00:00001BB2 4880            	  2878:             ext.w d0
00:00001BB4 6BFE            	  2879:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001BB6 67FE            	  2880:             beq.s *                   * Check Z Flag  beq/bne
00:00001BB8 0C800000007F    	  2881:             cmpi.l #$0000007F,d0
00:00001BBE 66FE            	  2882:             bne.s *                   * branch if Z set
                            	  2883: 
00:00001BC0 48C1            	  2884:             ext.l d1
00:00001BC2 6AFE            	  2885:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001BC4 67FE            	  2886:             beq.s *                   * Check Z Flag  beq/bne
00:00001BC6 0C81FFFF8FFF    	  2887:             cmpi.l #$FFFF8FFF,d1
00:00001BCC 66FE            	  2888:             bne.s *                   * branch if Z set
                            	  2889: 
00:00001BCE 48C2            	  2890:             ext.l d2
00:00001BD0 66FE            	  2891:             bne.s *                   * Check Z Flag  beq/bne
                            	  2892: 
                            	  2893: 
                            	  2894: 
00:00001BD2 4E75            	  2895:             rts
                            	  2896: 
                            	  2897: 
                            	  2898: *-----------------------------------------------------------
                            	  2899: *-----------------------------------------------------------
                            	  2900: * OPCODE : SWAP
                            	  2901: *-----------------------------------------------------------
                            	  2902: *-----------------------------------------------------------
                            	  2903: op_SWAP:
                            	  2904: 
00:00001BD4 203C12345678    	  2905:             move.l #$12345678,d0
                            	  2906: 
00:00001BDA 4840            	  2907:             swap d0
00:00001BDC 6BFE            	  2908:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001BDE 67FE            	  2909:             beq.s *                   * Check Z Flag  beq/bne
00:00001BE0 0C8056781234    	  2910:             cmpi.l #$56781234,d0
00:00001BE6 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912: 
                            	  2913: 
                            	  2914: 
00:00001BE8 4E75            	  2915:             rts
                            	  2916: 
                            	  2917: 
                            	  2918: *-----------------------------------------------------------
                            	  2919: *-----------------------------------------------------------
                            	  2920: * OPCODE : LEA_PEA
                            	  2921: *-----------------------------------------------------------
                            	  2922: *-----------------------------------------------------------
                            	  2923: op_LEAPEA:
                            	  2924: 
00:00001BEA 207C00345678    	  2925:             move.l #$00345678,a0
00:00001BF0 7800            	  2926:             moveq  #$00000000,d4
                            	  2927: 
                            	  2928: *     (An)
00:00001BF2 4DD0            	  2929:             lea (a0),a6
00:00001BF4 200E            	  2930:             move.l a6,d0
00:00001BF6 0C8000345678    	  2931:             cmpi.l #$00345678,d0
00:00001BFC 66FE            	  2932:             bne.s *                   * branch if Z set
00:00001BFE 4850            	  2933:             pea (a0)
00:00001C00 0C9700345678    	  2934:             cmpi.l #$00345678,(a7)
00:00001C06 66FE            	  2935:             bne.s *                   * branch if Z set
                            	  2936:             * This was without a specifier which the assembler defaulted to .w
00:00001C08 588F            	  2937:             addq.l #4,a7            * Restore Stack Pointer
                            	  2938: 
                            	  2939: *     x(An)
00:00001C0A 4DE80004        	  2940:             lea 4(a0),a6
00:00001C0E 200E            	  2941:             move.l a6,d0
00:00001C10 0C800034567C    	  2942:             cmpi.l #$0034567C,d0
00:00001C16 66FE            	  2943:             bne.s *                   * branch if Z set
00:00001C18 48680004        	  2944:             pea 4(a0)
00:00001C1C 0C970034567C    	  2945:             cmpi.l #$0034567C,(a7)
00:00001C22 66FE            	  2946:             bne.s *                   * branch if Z set
                            	  2947:             * This was without a specifier which the assembler defaulted to .w
00:00001C24 588F            	  2948:             addq.l #4,a7            * Restore Stack Pointer
                            	  2949: 
                            	  2950: *     x(An,Dn.l)
00:00001C26 4DF04004        	  2951:             lea 4(a0,d4),a6
00:00001C2A 200E            	  2952:             move.l a6,d0
00:00001C2C 0C800034567C    	  2953:             cmpi.l #$0034567C,d0
00:00001C32 66FE            	  2954:             bne.s *                   * branch if Z set
00:00001C34 48704804        	  2955:             pea 4(a0,d4.l)
00:00001C38 0C970034567C    	  2956:             cmpi.l #$0034567C,(a7)
00:00001C3E 66FE            	  2957:             bne.s *                   * branch if Z set
                            	  2958:             * This was without a specifier which the assembler defaulted to .w
00:00001C40 588F            	  2959:             addq.l #4,a7            * Restore Stack Pointer
                            	  2960: 
                            	  2961: *     x.W
00:00001C42 4DF81234        	  2962:             lea $1234,a6
00:00001C46 200E            	  2963:             move.l a6,d0
00:00001C48 0C401234        	  2964:             cmpi.w #$1234,d0
00:00001C4C 66FE            	  2965:             bne.s *                   * branch if Z set
00:00001C4E 48781234        	  2966:             pea $1234
00:00001C52 0C9700001234    	  2967:             cmpi.l #$00001234,(a7)
00:00001C58 66FE            	  2968:             bne.s *                   * branch if Z set
                            	  2969:             * This was without a specifier which the assembler defaulted to .w
00:00001C5A 588F            	  2970:             addq.l #4,a7            * Restore Stack Pointer
                            	  2971: 
                            	  2972: *     x.L
00:00001C5C 4DF900345678    	  2973:             lea $00345678,a6
00:00001C62 200E            	  2974:             move.l a6,d0
00:00001C64 B08E            	  2975:             cmp.l a6,d0
00:00001C66 66FE            	  2976:             bne.s *                   * branch if Z set
00:00001C68 487900345678    	  2977:             pea $00345678
00:00001C6E 0C9700345678    	  2978:             cmpi.l #$00345678,(a7)
00:00001C74 66FE            	  2979:             bne.s *                   * branch if Z set
                            	  2980:             * This was without a specifier which the assembler defaulted to .w
00:00001C76 588F            	  2981:             addq.l #4,a7            * Restore Stack Pointer
                            	  2982: 
                            	  2983: *     x(PC)
00:00001C78 4DFA0008        	  2984:             lea LEA1(pc),a6
00:00001C7C 200E            	  2985:             move.l a6,d0
00:00001C7E B08E            	  2986:             cmp.l a6,d0
00:00001C80 66FE            	  2987:             bne.s *                   * branch if Z set
00:00001C82 487AFFFE        	  2988: LEA1:       pea LEA1(pc)
00:00001C86 0C970000241E    	  2989:             cmpi.l #$0000241E,(a7)
00:00001C8C 67FE            	  2990:             beq.s *                   * branch if Z clear
                            	  2991:             * This was without a specifier which the assembler defaulted to .w
00:00001C8E 588F            	  2992:             addq.l #4,a7              * Restore Stack Pointer
                            	  2993: 
                            	  2994: 
                            	  2995: 
                            	  2996: 
00:00001C90 47FCFF002700    	  2997:             move.l #$FF002700,SR          * Put flags back to initial value
                            	  2998: 
00:00001C96 4E75            	  2999:             rts
                            	  3000:  	
                            	  3001: 
                            	  3002: 
                            	  3003: *-----------------------------------------------------------
                            	  3004: *-----------------------------------------------------------
                            	  3005: * OPCODE : LEA_TAS
                            	  3006: *-----------------------------------------------------------
                            	  3007: *-----------------------------------------------------------
                            	  3008: op_TAS:
                            	  3009: 
                            	  3010: *     Test just one addressing mode
                            	  3011: 
00:00001C98 307C0100        	  3012:             move.l #$00000100,a0
                            	  3013: 
                            	  3014: *     (An)
00:00001C9C 10BC0000        	  3015:             move.b #$00,(a0)
00:00001CA0 6BFE            	  3016:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CA2 66FE            	  3017:             bne.s *                   * Check Z Flag  beq/bne
00:00001CA4 4AD0            	  3018:             tas (a0)
00:00001CA6 0C100080        	  3019:             cmpi.b #$80,(a0)
00:00001CAA 66FE            	  3020:             bne.s *                   * branch if Z set
00:00001CAC 10BC00F5        	  3021:             move.b #$F5,(a0)
00:00001CB0 4AD0            	  3022:             tas (a0)
00:00001CB2 6AFE            	  3023:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CB4 67FE            	  3024:             beq.s *                   * Check Z Flag  beq/bne
00:00001CB6 4AD0            	  3025:             tas (a0)
00:00001CB8 0C1000F5        	  3026:             cmpi.b #$F5,(a0)
00:00001CBC 66FE            	  3027:             bne.s *                   * branch if Z set
                            	  3028: 
00:00001CBE 4E75            	  3029:             rts
                            	  3030: 
                            	  3031: 
                            	  3032: *-----------------------------------------------------------
                            	  3033: *-----------------------------------------------------------
                            	  3034: * OPCODE : LEA_TST
                            	  3035: *-----------------------------------------------------------
                            	  3036: *-----------------------------------------------------------
                            	  3037: op_TST:
                            	  3038: 
                            	  3039: *     Test just one addressing mode
                            	  3040: 
00:00001CC0 307C0100        	  3041:             move.l #$00000100,a0
                            	  3042: 
                            	  3043: *     (An) - BYTE
00:00001CC4 10BC0000        	  3044:             move.b #$00,(a0)
00:00001CC8 4A10            	  3045:             tst.b (a0)
00:00001CCA 6BFE            	  3046:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CCC 66FE            	  3047:             bne.s *                   * Check Z Flag  beq/bne
00:00001CCE 10BC00F5        	  3048:             move.b #$F5,(a0)
00:00001CD2 4A10            	  3049:             tst.b (a0)
00:00001CD4 6AFE            	  3050:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CD6 67FE            	  3051:             beq.s *                   * Check Z Flag  beq/bne
                            	  3052: 
                            	  3053: *     (An) - WORD
00:00001CD8 30BC0000        	  3054:             move.w #$0000,(a0)
00:00001CDC 4A50            	  3055:             tst.w (a0)
00:00001CDE 6BFE            	  3056:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CE0 66FE            	  3057:             bne.s *                   * Check Z Flag  beq/bne
00:00001CE2 30BCF567        	  3058:             move.w #$F567,(a0)
00:00001CE6 4A50            	  3059:             tst.w (a0)
00:00001CE8 6AFE            	  3060:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CEA 67FE            	  3061:             beq.s *                   * Check Z Flag  beq/bne
                            	  3062: 
                            	  3063: *     (An) - LONG
00:00001CEC 20BC00000000    	  3064:             move.l #$00000000,(a0)
00:00001CF2 4A90            	  3065:             tst.l (a0)
00:00001CF4 6BFE            	  3066:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CF6 66FE            	  3067:             bne.s *                   * Check Z Flag  beq/bne
00:00001CF8 20BCF56789AB    	  3068:             move.l #$F56789ab,(a0)
00:00001CFE 4A90            	  3069:             tst.l (a0)
00:00001D00 6AFE            	  3070:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D02 67FE            	  3071:             beq.s *                   * Check Z Flag  beq/bne
                            	  3072: 
                            	  3073: 
00:00001D04 4E75            	  3074:             rts
                            	  3075: 
                            	  3076: 
                            	  3077: *-----------------------------------------------------------
                            	  3078: *-----------------------------------------------------------
                            	  3079: * OPCODE : LINKS
                            	  3080: *-----------------------------------------------------------
                            	  3081: *-----------------------------------------------------------
                            	  3082: op_LINKS:
                            	  3083: 
00:00001D06 207C11223344    	  3084:             move.l #$11223344,a0
00:00001D0C 203C11223344    	  3085:             move.l #$11223344,d0
00:00001D12 4E500000        	  3086:             link a0,#$0
00:00001D16 0C9711223344    	  3087:             cmpi.l #$11223344,(a7)
                            	  3088: 
00:00001D1C 4E58            	  3089:             unlk a0
00:00001D1E B1C0            	  3090:             cmp.l d0,a0
00:00001D20 66FE            	  3091:             bne.s *                   * branch if Z set
                            	  3092: 
00:00001D22 4E75            	  3093:             rts
                            	  3094: 
                            	  3095: *-----------------------------------------------------------
                            	  3096: *-----------------------------------------------------------
                            	  3097: * OPCODE : MOVE_USP
                            	  3098: *-----------------------------------------------------------
                            	  3099: *-----------------------------------------------------------
                            	  3100: op_MOVE_USP:
                            	  3101: 
00:00001D24 207C11223344    	  3102:             move.l #$11223344,a0
00:00001D2A 4E60            	  3103:             move a0,USP
00:00001D2C 4E69            	  3104:             move USP,a1
00:00001D2E B3C8            	  3105:             cmp.l a0,a1
00:00001D30 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
00:00001D32 4E75            	  3108:             rts
                            	  3109: 
                            	  3110: 
                            	  3111: *-----------------------------------------------------------
                            	  3112: *-----------------------------------------------------------
                            	  3113: * OPCODE : CHK
                            	  3114: *-----------------------------------------------------------
                            	  3115: *-----------------------------------------------------------
                            	  3116: op_CHK:
00:00001D34 303C1122        	  3117:             move.w #$1122,d0
00:00001D38 323C1122        	  3118:             move.w #$1122,d1
00:00001D3C 4380            	  3119:             chk d0,d1
                            	  3120: 
00:00001D3E 4E71            	  3121:             nop
00:00001D40 4E71            	  3122:             nop
                            	  3123: 
00:00001D42 323C1122        	  3124:             move.w #$1122,d1
00:00001D46 43BC1122        	  3125:             chk #$1122,d1
                            	  3126: 
00:00001D4A 323C1122        	  3127:             move.w #$1122,d1
00:00001D4E 43BC007A        	  3128:             chk #00122,d1
00:00001D52 BCBCEEEE0006    	  3129:             cmp.l #$EEEE0006,d6
00:00001D58 66FE            	  3130:             bne.s *                   * branch if Z set
                            	  3131: 
00:00001D5A 303C1122        	  3132:             move.w #$1122,d0
00:00001D5E 323C8000        	  3133:             move.w #$8000,d1
00:00001D62 4380            	  3134:             chk d0,d1
00:00001D64 BCBCEEEE0006    	  3135:             cmp.l #$EEEE0006,d6
00:00001D6A 66FE            	  3136:             bne.s *                   * branch if Z set
                            	  3137: 
00:00001D6C 4E75            	  3138:             rts
                            	  3139: 
                            	  3140: 
                            	  3141: *-----------------------------------------------------------
                            	  3142: *-----------------------------------------------------------
                            	  3143: * OPCODE : NEGS
                            	  3144: *-----------------------------------------------------------
                            	  3145: *-----------------------------------------------------------
                            	  3146: op_NEGS:
                            	  3147: 
                            	  3148: *     NOT - BYTE
00:00001D6E 307C0100        	  3149:             move.l #$00000100,a0
00:00001D72 7000            	  3150:             moveq  #$00000000,d0
00:00001D74 4600            	  3151:             not.b d0
00:00001D76 6AFE            	  3152:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D78 67FE            	  3153:             beq.s *                   * Check Z Flag  beq/bne
00:00001D7A 4600            	  3154:             not.b d0
00:00001D7C 6BFE            	  3155:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D7E 66FE            	  3156:             bne.s *                   * Check Z Flag  beq/bne
00:00001D80 4A00            	  3157:             cmpi.b #$00,d0
00:00001D82 66FE            	  3158:             bne.s *                   * Check Z Flag  beq/bne
00:00001D84 10BC0080        	  3159:             move.b #$80,(a0)
00:00001D88 4610            	  3160:             not.b (a0)
00:00001D8A 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D8C 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
00:00001D8E 4610            	  3163:             not.b (a0)
00:00001D90 6AFE            	  3164:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D92 67FE            	  3165:             beq.s *                   * Check Z Flag  beq/bne
00:00001D94 0C100080        	  3166:             cmpi.b #$80,(a0)
00:00001D98 66FE            	  3167:             bne.s *                   * Check Z Flag  beq/bne
                            	  3168: 
                            	  3169: *     NOT - WORD
00:00001D9A 307C0100        	  3170:             move.l #$00000100,a0
00:00001D9E 7000            	  3171:             moveq  #$00000000,d0
00:00001DA0 4640            	  3172:             not.w d0
00:00001DA2 6AFE            	  3173:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DA4 67FE            	  3174:             beq.s *                   * Check Z Flag  beq/bne
00:00001DA6 4640            	  3175:             not.w d0
00:00001DA8 6BFE            	  3176:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DAA 66FE            	  3177:             bne.s *                   * Check Z Flag  beq/bne
00:00001DAC 4A40            	  3178:             cmpi.w #$0000,d0
00:00001DAE 66FE            	  3179:             bne.s *                   * Check Z Flag  beq/bne
00:00001DB0 30BC5A5A        	  3180:             move.w #$5a5a,(a0)
00:00001DB4 4650            	  3181:             not.w (a0)
00:00001DB6 6AFE            	  3182:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DB8 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
00:00001DBA 4650            	  3184:             not.w (a0)
00:00001DBC 6BFE            	  3185:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DBE 67FE            	  3186:             beq.s *                   * Check Z Flag  beq/bne
00:00001DC0 0C505A5A        	  3187:             cmpi.w #$5a5a,(a0)
00:00001DC4 66FE            	  3188:             bne.s *                   * Check Z Flag  beq/bne
                            	  3189: 
                            	  3190: *     NOT - LONG
00:00001DC6 307C0100        	  3191:             move.l #$00000100,a0
00:00001DCA 7000            	  3192:             moveq  #$00000000,d0
00:00001DCC 4680            	  3193:             not.l d0
00:00001DCE 6AFE            	  3194:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DD0 67FE            	  3195:             beq.s *                   * Check Z Flag  beq/bne
00:00001DD2 4680            	  3196:             not.l d0
00:00001DD4 6BFE            	  3197:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DD6 66FE            	  3198:             bne.s *                   * Check Z Flag  beq/bne
00:00001DD8 4A80            	  3199:             cmpi.l #$00000000,d0
00:00001DDA 66FE            	  3200:             bne.s *                   * Check Z Flag  beq/bne
00:00001DDC 20BC5A5A1234    	  3201:             move.l #$5a5a1234,(a0)
00:00001DE2 4690            	  3202:             not.l (a0)
00:00001DE4 6AFE            	  3203:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DE6 67FE            	  3204:             beq.s *                   * Check Z Flag  beq/bne
00:00001DE8 4690            	  3205:             not.l (a0)
00:00001DEA 6BFE            	  3206:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DEC 67FE            	  3207:             beq.s *                   * Check Z Flag  beq/bne
00:00001DEE 0C905A5A1234    	  3208:             cmpi.l #$5a5a1234,(a0)
00:00001DF4 66FE            	  3209:             bne.s *                   * Check Z Flag  beq/bne
                            	  3210: 
                            	  3211: * -----
                            	  3212: 
                            	  3213: *     NEG - BYTE
00:00001DF6 307C0100        	  3214:             move.l #$00000100,a0
00:00001DFA 7000            	  3215:             moveq  #$00000000,d0
00:00001DFC 7240D241        	  3216:             move.l #$00000080,d1
00:00001E00 4400            	  3217:             neg.b d0
00:00001E02 6BFE            	  3218:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E04 66FE            	  3219:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E06 65FE            	  3220:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E08 69FE            	  3221:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E0A 4401            	  3222:             neg.b d1
00:00001E0C 6AFE            	  3223:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E0E 67FE            	  3224:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E10 64FE            	  3225:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E12 68FE            	  3226:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E14 0C010080        	  3227:             cmpi.b #$80,d1
00:00001E18 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne
00:00001E1A 10BC007F        	  3229:             move.b #$7F,(a0)
00:00001E1E 4410            	  3230:             neg.b (a0)
00:00001E20 6AFE            	  3231:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E22 67FE            	  3232:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E24 64FE            	  3233:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E26 69FE            	  3234:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E28 10BC00F5        	  3235:             move.b #$F5,(a0)
00:00001E2C 4410            	  3236:             neg.b (a0)
00:00001E2E 6BFE            	  3237:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E30 67FE            	  3238:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E32 64FE            	  3239:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E34 69FE            	  3240:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E36 0C10000B        	  3241:             cmpi.b #$0B,(a0)
00:00001E3A 66FE            	  3242:             bne.s *                   * Check Z Flag  beq/bne
                            	  3243: 
                            	  3244: * -----
                            	  3245: 
                            	  3246: *     NEG - WORD
00:00001E3C 307C0100        	  3247:             move.l #$00000100,a0
00:00001E40 7000            	  3248:             moveq  #$00000000,d0
00:00001E42 223C00008000    	  3249:             move.l #$00008000,d1
00:00001E48 4440            	  3250:             neg.w d0
00:00001E4A 6BFE            	  3251:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E4C 66FE            	  3252:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E4E 65FE            	  3253:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E50 69FE            	  3254:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E52 4441            	  3255:             neg.w d1
00:00001E54 6AFE            	  3256:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E56 67FE            	  3257:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E58 64FE            	  3258:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E5A 68FE            	  3259:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E5C 0C418000        	  3260:             cmpi.w #$8000,d1
00:00001E60 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne
00:00001E62 30BC7FFF        	  3262:             move.w #$7FFF,(a0)
00:00001E66 4450            	  3263:             neg.w (a0)
00:00001E68 6AFE            	  3264:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E6A 67FE            	  3265:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E6C 64FE            	  3266:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E6E 69FE            	  3267:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E70 30BCF578        	  3268:             move.w #$F578,(a0)
00:00001E74 4450            	  3269:             neg.w (a0)
00:00001E76 6BFE            	  3270:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E78 67FE            	  3271:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E7A 64FE            	  3272:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E7C 69FE            	  3273:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E7E 0C500A88        	  3274:             cmpi.w #$0A88,(a0)
00:00001E82 66FE            	  3275:             bne.s *                   * Check Z Flag  beq/bne
                            	  3276: 
                            	  3277: * -----
                            	  3278: 
                            	  3279: *     NEG - LONG
00:00001E84 307C0100        	  3280:             move.l #$00000100,a0
00:00001E88 7000            	  3281:             moveq  #$00000000,d0
00:00001E8A 223C80000000    	  3282:             move.l #$80000000,d1
00:00001E90 4480            	  3283:             neg.l d0
00:00001E92 6BFE            	  3284:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E94 66FE            	  3285:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E96 65FE            	  3286:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E98 69FE            	  3287:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E9A 4481            	  3288:             neg.l d1
00:00001E9C 6AFE            	  3289:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E9E 67FE            	  3290:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EA0 64FE            	  3291:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001EA2 68FE            	  3292:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001EA4 0C8180000000    	  3293:             cmpi.l #$80000000,d1
00:00001EAA 66FE            	  3294:             bne.s *                   * Check Z Flag  beq/bne
00:00001EAC 20BC7FFFFFFF    	  3295:             move.l #$7FFFFFFF,(a0)
00:00001EB2 4490            	  3296:             neg.l (a0)
00:00001EB4 6AFE            	  3297:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EB6 67FE            	  3298:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EB8 64FE            	  3299:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001EBA 69FE            	  3300:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EBC 20BCF5781234    	  3301:             move.l #$F5781234,(a0)
00:00001EC2 4490            	  3302:             neg.l (a0)
00:00001EC4 6BFE            	  3303:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001EC6 67FE            	  3304:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EC8 64FE            	  3305:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001ECA 69FE            	  3306:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001ECC 0C900A87EDCC    	  3307:             cmpi.l #$0A87EDCC,(a0)
00:00001ED2 66FE            	  3308:             bne.s *                   * Check Z Flag  beq/bne
                            	  3309: 
                            	  3310: 
                            	  3311: * -----
                            	  3312: 
                            	  3313: *     NEGX - BYTE
00:00001ED4 307C0100        	  3314:             move.l #$00000100,a0
00:00001ED8 7000            	  3315:             moveq  #$00000000,d0
00:00001EDA 7240D241        	  3316:             move.l #$00000080,d1
00:00001EDE 003C0010        	  3317:             ori.b #$10,CCR        * Set X Flag
00:00001EE2 4000            	  3318:             negx.b d0
00:00001EE4 6AFE            	  3319:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001EE6 67FE            	  3320:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EE8 64FE            	  3321:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EEA 69FE            	  3322:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EEC 023C00EF        	  3323:             andi.b #$EF,CCR       * Clear X Flag
00:00001EF0 4000            	  3324:             negx.b d0
00:00001EF2 6BFE            	  3325:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001EF4 67FE            	  3326:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EF6 64FE            	  3327:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EF8 69FE            	  3328:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EFA 003C0010        	  3329:             ori.b #$10,CCR        * Set X Flag
00:00001EFE 4001            	  3330:             negx.b d1
00:00001F00 6BFE            	  3331:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001F02 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F04 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F06 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F08 0C01007F        	  3335:             cmpi.b #$7F,d1
00:00001F0C 66FE            	  3336:             bne.s *                   * Check Z Flag  beq/bne
00:00001F0E 023C00EF        	  3337:             andi.b #$EF,CCR       * Clear X Flag
00:00001F12 4001            	  3338:             negx.b d1
00:00001F14 6AFE            	  3339:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F16 67FE            	  3340:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F18 64FE            	  3341:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F1A 69FE            	  3342:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F1C 0C010081        	  3343:             cmpi.b #$81,d1
00:00001F20 66FE            	  3344:             bne.s *                   * Check Z Flag  beq/bne
00:00001F22 10BC007F        	  3345:             move.b #$7F,(a0)
00:00001F26 003C0010        	  3346:             ori.b #$10,CCR        * Set X Flag
00:00001F2A 4010            	  3347:             negx.b (a0)
00:00001F2C 6AFE            	  3348:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F2E 67FE            	  3349:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F30 64FE            	  3350:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3351:             * I think overflow should happen here.
                            	  3352: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F32 10BC007F        	  3353:             move.b #$7F,(a0)
00:00001F36 023C00EF        	  3354:             andi.b #$EF,CCR       * Clear X Flag
00:00001F3A 4010            	  3355:             negx.b (a0)
00:00001F3C 6AFE            	  3356:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F3E 67FE            	  3357:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F40 64FE            	  3358:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F42 69FE            	  3359:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F44 10BC00F5        	  3360:             move.b #$F5,(a0)
00:00001F48 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
00:00001F4C 4010            	  3362:             negx.b (a0)
00:00001F4E 6BFE            	  3363:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F50 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F52 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F54 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F56 0C10000A        	  3367:             cmpi.b #$0A,(a0)
00:00001F5A 66FE            	  3368:             bne.s *                   * Check Z Flag  beq/bne
00:00001F5C 023C00EF        	  3369:             andi.b #$EF,CCR       * Clear X Flag
00:00001F60 4010            	  3370:             negx.b (a0)
00:00001F62 6AFE            	  3371:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F64 67FE            	  3372:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F66 64FE            	  3373:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F68 69FE            	  3374:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F6A 0C1000F6        	  3375:             cmpi.b #$F6,(a0)
00:00001F6E 66FE            	  3376:             bne.s *                   * Check Z Flag  beq/bne
                            	  3377: 
                            	  3378: 
                            	  3379: 
                            	  3380: * -----
                            	  3381: 
                            	  3382: *     NEGX - WORD
00:00001F70 307C0100        	  3383:             move.l #$00000100,a0
00:00001F74 7000            	  3384:             moveq  #$00000000,d0
00:00001F76 223C00008000    	  3385:             move.l #$00008000,d1
00:00001F7C 003C0010        	  3386:             ori.b #$10,CCR        * Set X Flag
00:00001F80 4040            	  3387:             negx.w d0
00:00001F82 6AFE            	  3388:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F84 67FE            	  3389:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F86 64FE            	  3390:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F88 69FE            	  3391:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F8A 023C00EF        	  3392:             andi.b #$EF,CCR       * Clear X Flag
00:00001F8E 4040            	  3393:             negx.w d0
00:00001F90 6BFE            	  3394:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F92 67FE            	  3395:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F94 64FE            	  3396:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F96 69FE            	  3397:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F98 003C0010        	  3398:             ori.b #$10,CCR        * Set X Flag
00:00001F9C 4041            	  3399:             negx.w d1
00:00001F9E 6BFE            	  3400:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001FA0 67FE            	  3401:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FA2 64FE            	  3402:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FA4 69FE            	  3403:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001FA6 0C417FFF        	  3404:             cmpi.w #$7FFF,d1
00:00001FAA 66FE            	  3405:             bne.s *                   * Check Z Flag  beq/bne
00:00001FAC 023C00EF        	  3406:             andi.b #$EF,CCR       * Clear X Flag
00:00001FB0 4041            	  3407:             negx.w d1
00:00001FB2 6AFE            	  3408:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001FB4 67FE            	  3409:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FB6 64FE            	  3410:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FB8 69FE            	  3411:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001FBA 0C418001        	  3412:             cmpi.w #$8001,d1
00:00001FBE 66FE            	  3413:             bne.s *                   * Check Z Flag  beq/bne
00:00001FC0 30BC7FFF        	  3414:             move.w #$7FFF,(a0)
00:00001FC4 003C0010        	  3415:             ori.b #$10,CCR        * Set X Flag
00:00001FC8 4050            	  3416:             negx.w (a0)
00:00001FCA 6AFE            	  3417:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001FCC 67FE            	  3418:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FCE 64FE            	  3419:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3420: ***            
                            	  3421: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FD0 30BCF567        	  3422:             move.w #$F567,(a0)
00:00001FD4 023C00EF        	  3423:             andi.b #$EF,CCR       * Clear X Flag
00:00001FD8 4050            	  3424:             negx.w (a0)
00:00001FDA 6BFE            	  3425:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001FDC 67FE            	  3426:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FDE 64FE            	  3427:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FE0 69FE            	  3428:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FE2 30BCF567        	  3429:             move.w #$F567,(a0)
00:00001FE6 003C0010        	  3430:             ori.b #$10,CCR        * Set X Flag
00:00001FEA 4050            	  3431:             negx.w (a0)
00:00001FEC 6BFE            	  3432:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FEE 67FE            	  3433:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FF0 64FE            	  3434:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FF2 69FE            	  3435:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FF4 0C500A98        	  3436:             cmpi.w #$0A98,(a0)
00:00001FF8 66FE            	  3437:             bne.s *                   * Check Z Flag  beq/bne
00:00001FFA 023C00EF        	  3438:             andi.b #$EF,CCR       * Clear X Flag
00:00001FFE 4050            	  3439:             negx.w (a0)
00:00002000 6AFE            	  3440:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00002002 67FE            	  3441:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002004 64FE            	  3442:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002006 69FE            	  3443:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002008 0C50F568        	  3444:             cmpi.w #$F568,(a0)
00:0000200C 66FE            	  3445:             bne.s *                   * Check Z Flag  beq/bne
                            	  3446: 
                            	  3447: 
                            	  3448: * -----
                            	  3449: 
                            	  3450: *     NEGX - LONG
00:0000200E 307C0100        	  3451:             move.l #$00000100,a0
00:00002012 7000            	  3452:             moveq  #$00000000,d0
00:00002014 223C80000000    	  3453:             move.l #$80000000,d1
00:0000201A 003C0010        	  3454:             ori.b #$10,CCR        * Set X Flag
00:0000201E 4080            	  3455:             negx.l d0
00:00002020 6AFE            	  3456:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00002022 67FE            	  3457:             beq.s *                   * Check Z Flag  beq/bne 1
00:00002024 64FE            	  3458:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00002026 69FE            	  3459:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002028 023C00EF        	  3460:             andi.b #$EF,CCR       * Clear X Flag
00:0000202C 4080            	  3461:             negx.l d0
00:0000202E 6BFE            	  3462:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00002030 67FE            	  3463:             beq.s *                   * Check Z Flag  beq/bne 1
00:00002032 64FE            	  3464:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00002034 69FE            	  3465:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002036 003C0010        	  3466:             ori.b #$10,CCR        * Set X Flag
00:0000203A 4081            	  3467:             negx.l d1
00:0000203C 6BFE            	  3468:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000203E 67FE            	  3469:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002040 64FE            	  3470:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002042 69FE            	  3471:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00002044 0C817FFFFFFF    	  3472:             cmpi.l #$7FFFFFFF,d1
00:0000204A 66FE            	  3473:             bne.s *                   * Check Z Flag  beq/bne
00:0000204C 023C00EF        	  3474:             andi.b #$EF,CCR       * Clear X Flag
00:00002050 4081            	  3475:             negx.l d1
00:00002052 6AFE            	  3476:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00002054 67FE            	  3477:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002056 64FE            	  3478:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3479: ****            
                            	  3480: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:00002058 0C8180000001    	  3481:             cmpi.l #$80000001,d1
00:0000205E 66FE            	  3482:             bne.s *                   * Check Z Flag  beq/bne
00:00002060 20BC00007FFF    	  3483:             move.l #$7FFF,(a0)
00:00002066 003C0010        	  3484:             ori.b #$10,CCR        * Set X Flag
00:0000206A 4090            	  3485:             negx.l (a0)
00:0000206C 6AFE            	  3486:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000206E 67FE            	  3487:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002070 64FE            	  3488:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3489: ****            
                            	  3490: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002072 20BCF5671234    	  3491:             move.l #$F5671234,(a0)
00:00002078 023C00EF        	  3492:             andi.b #$EF,CCR       * Clear X Flag
00:0000207C 4090            	  3493:             negx.l (a0)
00:0000207E 6BFE            	  3494:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00002080 67FE            	  3495:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002082 64FE            	  3496:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002084 69FE            	  3497:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002086 20BCF5675678    	  3498:             move.l #$F5675678,(a0)
00:0000208C 003C0010        	  3499:             ori.b #$10,CCR        * Set X Flag
00:00002090 4090            	  3500:             negx.l (a0)
00:00002092 6BFE            	  3501:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00002094 67FE            	  3502:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002096 64FE            	  3503:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002098 69FE            	  3504:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000209A 0C900A98A987    	  3505:             cmpi.l #$0A98A987,(a0)
00:000020A0 66FE            	  3506:             bne.s *                   * Check Z Flag  beq/bne
00:000020A2 023C00EF        	  3507:             andi.b #$EF,CCR       * Clear X Flag
00:000020A6 4090            	  3508:             negx.l (a0)
00:000020A8 6AFE            	  3509:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:000020AA 67FE            	  3510:             beq.s *                   * Check Z Flag  beq/bne 0
00:000020AC 64FE            	  3511:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000020AE 69FE            	  3512:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000020B0 0C90F5675679    	  3513:             cmpi.l #$F5675679,(a0)
00:000020B6 66FE            	  3514:             bne.s *                   * Check Z Flag  beq/bne
                            	  3515: 
                            	  3516: 
                            	  3517: * -----
                            	  3518: 
                            	  3519: *     CLR - BYTE
00:000020B8 307C0100        	  3520:             move.l #$00000100,a0
00:000020BC 203C12345678    	  3521:             move.l #$12345678,d0
00:000020C2 223C12345678    	  3522:             move.l #$12345678,d1
00:000020C8 243C12345678    	  3523:             move.l #$12345678,d2
00:000020CE 283C12345600    	  3524:             move.l #$12345600,d4
00:000020D4 2A3C12340000    	  3525:             move.l #$12340000,d5
00:000020DA 7C00            	  3526:             moveq  #$00000000,d6
                            	  3527: 
00:000020DC 4200            	  3528:             clr.b d0
00:000020DE 66FE            	  3529:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020E0 6BFE            	  3530:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020E2 B880            	  3531:             cmp.l d0,d4
00:000020E4 66FE            	  3532:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3533: 
00:000020E6 4241            	  3534:             clr.w d1
00:000020E8 66FE            	  3535:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020EA 6BFE            	  3536:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020EC BA81            	  3537:             cmp.l d1,d5
00:000020EE 66FE            	  3538:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3539: 
00:000020F0 7400            	  3540:             clr.l d2
00:000020F2 66FE            	  3541:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020F4 6BFE            	  3542:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020F6 BC82            	  3543:             cmp.l d2,d6
00:000020F8 66FE            	  3544:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3545: 
00:000020FA 4E75            	  3546:             rts
                            	  3547: 
                            	  3548: 
                            	  3549: 
                            	  3550: *-----------------------------------------------------------
                            	  3551: *-----------------------------------------------------------
                            	  3552: * OPCODE : MOVEM
                            	  3553: *-----------------------------------------------------------
                            	  3554: *-----------------------------------------------------------
                            	  3555: op_MOVEM:
                            	  3556: 
                            	  3557: *     WORD  Registers --> Memory
00:000020FC 203C0000D0D0    	  3558:             move.l #$0000d0d0,d0
00:00002102 223C0000D1D1    	  3559:             move.l #$0000d1d1,d1
00:00002108 243C0000D2D2    	  3560:             move.l #$0000d2d2,d2
00:0000210E 263C0000D3D3    	  3561:             move.l #$0000d3d3,d3
00:00002114 283C0000D4D4    	  3562:             move.l #$0000d4d4,d4
00:0000211A 2A3C0000D5D5    	  3563:             move.l #$0000d5d5,d5
00:00002120 2C3C0000D6D6    	  3564:             move.l #$0000d6d6,d6
00:00002126 2E3C0000D7D7    	  3565:             move.l #$0000d7d7,d7
00:0000212C 307C0A0A        	  3566:             move.l #$00000a0a,a0
00:00002130 327C1A1A        	  3567:             move.l #$00001a1a,a1
00:00002134 347C2A2A        	  3568:             move.l #$00002a2a,a2
00:00002138 367C3A3A        	  3569:             move.l #$00003a3a,a3
00:0000213C 387C4A4A        	  3570:             move.l #$00004a4a,a4
00:00002140 3A7C5A5A        	  3571:             move.l #$00005a5a,a5
00:00002144 3C7C6A6A        	  3572:             move.l #$00006a6a,a6
                            	  3573: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3574: 
00:00002148 48B8FFFF0100    	  3575:             movem.w D0-D7/A0-A7,$00000100
                            	  3576: 
00:0000214E 307C0100        	  3577:             move.l #$00000100,a0
                            	  3578: 
00:00002152 B058            	  3579:             cmp.w (a0)+,d0
00:00002154 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002156 B258            	  3581:             cmp.w (a0)+,d1
00:00002158 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000215A B458            	  3583:             cmp.w (a0)+,d2
00:0000215C 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000215E B658            	  3585:             cmp.w (a0)+,d3
00:00002160 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002162 B858            	  3587:             cmp.w (a0)+,d4
00:00002164 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002166 BA58            	  3589:             cmp.w (a0)+,d5
00:00002168 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000216A BC58            	  3591:             cmp.w (a0)+,d6
00:0000216C 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000216E BE58            	  3593:             cmp.w (a0)+,d7
00:00002170 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3595: 
00:00002172 0C580A0A        	  3596:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:00002176 66FE            	  3597:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3598: 
00:00002178 B2D8            	  3599:             cmp.w (a0)+,a1
00:0000217A 66FE            	  3600:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000217C B4D8            	  3601:             cmp.w (a0)+,a2
00:0000217E 66FE            	  3602:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002180 B6D8            	  3603:             cmp.w (a0)+,a3
00:00002182 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002184 B8D8            	  3605:             cmp.w (a0)+,a4
00:00002186 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002188 BAD8            	  3607:             cmp.w (a0)+,a5
00:0000218A 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000218C BCD8            	  3609:             cmp.w (a0)+,a6
00:0000218E 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: *     LONG  Registers --> Memory
00:00002190 203CD0D0D0D0    	  3616:             move.l #$d0d0d0d0,d0
00:00002196 223CD1D1D1D1    	  3617:             move.l #$d1d1d1d1,d1
00:0000219C 243CD2D2D2D2    	  3618:             move.l #$d2d2d2d2,d2
00:000021A2 263CD3D3D3D3    	  3619:             move.l #$d3d3d3d3,d3
00:000021A8 283CD4D4D4D4    	  3620:             move.l #$d4d4d4d4,d4
00:000021AE 2A3CD5D5D5D5    	  3621:             move.l #$d5d5d5d5,d5
00:000021B4 2C3CD6D6D6D6    	  3622:             move.l #$d6d6d6d6,d6
00:000021BA 2E3CD7D7D7D7    	  3623:             move.l #$d7d7d7d7,d7
00:000021C0 207C0A0A0A0A    	  3624:             move.l #$0a0a0a0a,a0
00:000021C6 227C1A1A1A1A    	  3625:             move.l #$1a1a1a1a,a1
00:000021CC 247C2A2A2A2A    	  3626:             move.l #$2a2a2a2a,a2
00:000021D2 267C3A3A3A3A    	  3627:             move.l #$3a3a3a3a,a3
00:000021D8 287C4A4A4A4A    	  3628:             move.l #$4a4a4a4a,a4
00:000021DE 2A7C5A5A5A5A    	  3629:             move.l #$5a5a5a5a,a5
00:000021E4 2C7C6A6A6A6A    	  3630:             move.l #$6a6a6a6a,a6
                            	  3631: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3632: 
                            	  3633: 
00:000021EA 48F8FFFF0120    	  3634:             movem.l D0-D7/A0-A7,$00000120
                            	  3635: 
00:000021F0 307C0120        	  3636:             move.l #$00000120,a0
                            	  3637: 
00:000021F4 B098            	  3638:             cmp.l (a0)+,d0
00:000021F6 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021F8 B298            	  3640:             cmp.l (a0)+,d1
00:000021FA 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021FC B498            	  3642:             cmp.l (a0)+,d2
00:000021FE 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002200 B698            	  3644:             cmp.l (a0)+,d3
00:00002202 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002204 B898            	  3646:             cmp.l (a0)+,d4
00:00002206 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002208 BA98            	  3648:             cmp.l (a0)+,d5
00:0000220A 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000220C BC98            	  3650:             cmp.l (a0)+,d6
00:0000220E 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002210 BE98            	  3652:             cmp.l (a0)+,d7
00:00002212 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3654: 
00:00002214 0C980A0A0A0A    	  3655:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:0000221A 66FE            	  3656:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3657: 
00:0000221C B3D8            	  3658:             cmp.l (a0)+,a1
00:0000221E 66FE            	  3659:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002220 B5D8            	  3660:             cmp.l (a0)+,a2
00:00002222 66FE            	  3661:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002224 B7D8            	  3662:             cmp.l (a0)+,a3
00:00002226 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002228 B9D8            	  3664:             cmp.l (a0)+,a4
00:0000222A 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000222C BBD8            	  3666:             cmp.l (a0)+,a5
00:0000222E 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002230 BDD8            	  3668:             cmp.l (a0)+,a6
00:00002232 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3670: *      ----
                            	  3671: 
                            	  3672: 
                            	  3673: *     WORD  Registers --> Memory  -(An) EA Mode
00:00002234 203C0000D0D0    	  3674:             move.l #$0000d0d0,d0
00:0000223A 223C0000D1D1    	  3675:             move.l #$0000d1d1,d1
00:00002240 243C0000D2D2    	  3676:             move.l #$0000d2d2,d2
00:00002246 263C0000D3D3    	  3677:             move.l #$0000d3d3,d3
00:0000224C 283C0000D4D4    	  3678:             move.l #$0000d4d4,d4
00:00002252 2A3C0000D5D5    	  3679:             move.l #$0000d5d5,d5
00:00002258 2C3C0000D6D6    	  3680:             move.l #$0000d6d6,d6
00:0000225E 2E3C0000D7D7    	  3681:             move.l #$0000d7d7,d7
00:00002264 307C0A0A        	  3682:             move.l #$00000a0a,a0
00:00002268 327C1A1A        	  3683:             move.l #$00001a1a,a1
00:0000226C 347C2A2A        	  3684:             move.l #$00002a2a,a2
00:00002270 367C3A3A        	  3685:             move.l #$00003a3a,a3
00:00002274 387C4A4A        	  3686:             move.l #$00004a4a,a4
00:00002278 3A7C5A5A        	  3687:             move.l #$00005a5a,a5
00:0000227C 3C7C6A6A        	  3688:             move.l #$00006a6a,a6
                            	  3689: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3690: 
00:00002280 307C01A0        	  3691:             move.l #$000001A0,a0
00:00002284 48A0FFFF        	  3692:             movem.w D0-D7/A0-A7,-(a0)
                            	  3693: 
00:00002288 307C019E        	  3694:             move.l #$0000019E,a0
                            	  3695: 
00:0000228C BCE0            	  3696:             cmp.w -(a0),a6
00:0000228E 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002290 BAE0            	  3698:             cmp.w -(a0),a5
00:00002292 66FE            	  3699:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002294 B8E0            	  3700:             cmp.w -(a0),a4
00:00002296 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002298 B6E0            	  3702:             cmp.w -(a0),a3
00:0000229A 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000229C B4E0            	  3704:             cmp.w -(a0),a2
00:0000229E 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022A0 B2E0            	  3706:             cmp.w -(a0),a1
00:000022A2 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022A4 B0E0            	  3708:             cmp.w -(a0),a0
                            	  3709: *            bne.s *                   * Check Z Flag  beq/bne 0
00:000022A6 BE60            	  3710:             cmp.w -(a0),d7
00:000022A8 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022AA BC60            	  3712:             cmp.w -(a0),d6
00:000022AC 66FE            	  3713:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022AE BA60            	  3714:             cmp.w -(a0),d5
00:000022B0 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022B2 B860            	  3716:             cmp.w -(a0),d4
00:000022B4 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022B6 B660            	  3718:             cmp.w -(a0),d3
00:000022B8 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022BA B460            	  3720:             cmp.w -(a0),d2
00:000022BC 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022BE B260            	  3722:             cmp.w -(a0),d1
00:000022C0 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022C2 B060            	  3724:             cmp.w -(a0),d0
00:000022C4 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: *     LONG  Registers --> Memory   -(An) EA Mode
00:000022C6 203CD0D0D0D0    	  3731:             move.l #$d0d0d0d0,d0
00:000022CC 223CD1D1D1D1    	  3732:             move.l #$d1d1d1d1,d1
00:000022D2 243CD2D2D2D2    	  3733:             move.l #$d2d2d2d2,d2
00:000022D8 263CD3D3D3D3    	  3734:             move.l #$d3d3d3d3,d3
00:000022DE 283CD4D4D4D4    	  3735:             move.l #$d4d4d4d4,d4
00:000022E4 2A3CD5D5D5D5    	  3736:             move.l #$d5d5d5d5,d5
00:000022EA 2C3CD6D6D6D6    	  3737:             move.l #$d6d6d6d6,d6
00:000022F0 2E3CD7D7D7D7    	  3738:             move.l #$d7d7d7d7,d7
00:000022F6 207C0A0A0A0A    	  3739:             move.l #$0a0a0a0a,a0
00:000022FC 227C1A1A1A1A    	  3740:             move.l #$1a1a1a1a,a1
00:00002302 247C2A2A2A2A    	  3741:             move.l #$2a2a2a2a,a2
00:00002308 267C3A3A3A3A    	  3742:             move.l #$3a3a3a3a,a3
00:0000230E 287C4A4A4A4A    	  3743:             move.l #$4a4a4a4a,a4
00:00002314 2A7C5A5A5A5A    	  3744:             move.l #$5a5a5a5a,a5
00:0000231A 2C7C6A6A6A6A    	  3745:             move.l #$6a6a6a6a,a6
                            	  3746: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3747: 
                            	  3748: 
00:00002320 307C01A0        	  3749:             move.l #$000001A0,a0
00:00002324 48E0FFFF        	  3750:             movem.l D0-D7/A0-A7,-(a0)
                            	  3751: 
00:00002328 307C019C        	  3752:             move.l #$0000019C,a0
                            	  3753: 
00:0000232C BDE0            	  3754:             cmp.l -(a0),a6
00:0000232E 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002330 BBE0            	  3756:             cmp.l -(a0),a5
00:00002332 66FE            	  3757:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002334 B9E0            	  3758:             cmp.l -(a0),a4
00:00002336 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002338 B7E0            	  3760:             cmp.l -(a0),a3
00:0000233A 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000233C B5E0            	  3762:             cmp.l -(a0),a2
00:0000233E 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002340 B3E0            	  3764:             cmp.l -(a0),a1
00:00002342 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002344 B1E0            	  3766:             cmp.l -(a0),a0
                            	  3767: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00002346 BEA0            	  3768:             cmp.l -(a0),d7
00:00002348 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000234A BCA0            	  3770:             cmp.l -(a0),d6
00:0000234C 66FE            	  3771:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000234E BAA0            	  3772:             cmp.l -(a0),d5
00:00002350 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002352 B8A0            	  3774:             cmp.l -(a0),d4
00:00002354 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002356 B6A0            	  3776:             cmp.l -(a0),d3
00:00002358 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000235A B4A0            	  3778:             cmp.l -(a0),d2
00:0000235C 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000235E B2A0            	  3780:             cmp.l -(a0),d1
00:00002360 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002362 B0A0            	  3782:             cmp.l -(a0),d0
00:00002364 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3784: 
                            	  3785: 
                            	  3786: 
                            	  3787: *     ----
                            	  3788: 
                            	  3789: *     WORD - Memory --> Registers
00:00002366 7000            	  3790:             moveq  #$00000000,d0
00:00002368 7200            	  3791:             moveq  #$00000000,d1
00:0000236A 7400            	  3792:             moveq  #$00000000,d2
00:0000236C 7600            	  3793:             moveq  #$00000000,d3
00:0000236E 7800            	  3794:             moveq  #$00000000,d4
00:00002370 7A00            	  3795:             moveq  #$00000000,d5
00:00002372 7C00            	  3796:             moveq  #$00000000,d6
00:00002374 7E00            	  3797:             moveq  #$00000000,d7
00:00002376 91C8            	  3798:             move.l #$00000000,a0
00:00002378 93C9            	  3799:             move.l #$00000000,a1
00:0000237A 95CA            	  3800:             move.l #$00000000,a2
00:0000237C 97CB            	  3801:             move.l #$00000000,a3
00:0000237E 99CC            	  3802:             move.l #$00000000,a4
00:00002380 9BCD            	  3803:             move.l #$00000000,a5
00:00002382 9DCE            	  3804:             move.l #$00000000,a6
                            	  3805: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3806: 
00:00002384 4CB82A550100    	  3807:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3808: 
00:0000238A B0BCFFFFD0D0    	  3809:             cmp.l #$FFFFD0D0,d0
00:00002390 66FE            	  3810:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002392 B4BCFFFFD1D1    	  3811:             cmp.l #$FFFFD1D1,d2
00:00002398 66FE            	  3812:             bne.s *                  * Check Z Flag  beq/bne 0
00:0000239A B8BCFFFFD2D2    	  3813:             cmp.l #$FFFFD2D2,d4
00:000023A0 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023A2 BCBCFFFFD3D3    	  3815:             cmp.l #$FFFFD3D3,d6
00:000023A8 66FE            	  3816:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023AA B2FCD4D4        	  3817:             cmp.l #$FFFFD4D4,a1
00:000023AE 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023B0 B6FCD5D5        	  3819:             cmp.l #$FFFFD5D5,a3
00:000023B4 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023B6 BAFCD6D6        	  3821:             cmp.l #$FFFFD6D6,a5
00:000023BA 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3823: 
                            	  3824: 
                            	  3825: *     LONG - Memory --> Registers
00:000023BC 7000            	  3826:             moveq  #$00000000,d0
00:000023BE 7200            	  3827:             moveq  #$00000000,d1
00:000023C0 7400            	  3828:             moveq  #$00000000,d2
00:000023C2 7600            	  3829:             moveq  #$00000000,d3
00:000023C4 7800            	  3830:             moveq  #$00000000,d4
00:000023C6 7A00            	  3831:             moveq  #$00000000,d5
00:000023C8 7C00            	  3832:             moveq  #$00000000,d6
00:000023CA 7E00            	  3833:             moveq  #$00000000,d7
00:000023CC 91C8            	  3834:             move.l #$00000000,a0
00:000023CE 93C9            	  3835:             move.l #$00000000,a1
00:000023D0 95CA            	  3836:             move.l #$00000000,a2
00:000023D2 97CB            	  3837:             move.l #$00000000,a3
00:000023D4 99CC            	  3838:             move.l #$00000000,a4
00:000023D6 9BCD            	  3839:             move.l #$00000000,a5
00:000023D8 9DCE            	  3840:             move.l #$00000000,a6
                            	  3841: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3842: 
00:000023DA 4CF82A550120    	  3843:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3844: 
00:000023E0 B0BCD0D0D0D0    	  3845:             cmp.l #$D0D0D0D0,d0
00:000023E6 66FE            	  3846:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023E8 B4BCD1D1D1D1    	  3847:             cmp.l #$D1D1D1D1,d2
00:000023EE 66FE            	  3848:             bne.s *                  * Check Z Flag  beq/bne 0
00:000023F0 B8BCD2D2D2D2    	  3849:             cmp.l #$D2D2D2D2,d4
00:000023F6 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023F8 BCBCD3D3D3D3    	  3851:             cmp.l #$D3D3D3D3,d6
00:000023FE 66FE            	  3852:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002400 B3FCD4D4D4D4    	  3853:             cmp.l #$D4D4D4D4,a1
00:00002406 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002408 B7FCD5D5D5D5    	  3855:             cmp.l #$D5D5D5D5,a3
00:0000240E 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002410 BBFCD6D6D6D6    	  3857:             cmp.l #$D6D6D6D6,a5
00:00002416 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3859: 
00:00002418 4E75            	  3860:             rts
                            	  3861: 
                            	  3862: 
                            	  3863: *-----------------------------------------------------------
                            	  3864: *-----------------------------------------------------------
                            	  3865: * OPCODE : ABCD
                            	  3866: *-----------------------------------------------------------
                            	  3867: *-----------------------------------------------------------
                            	  3868: op_ABCD:
                            	  3869: 
                            	  3870: *     Test with X Flag CLEARED
00:0000241A 307C0110        	  3871:                 move.l #$00000110,a0 * Address pointer-X
00:0000241E 327C0120        	  3872:                 move.l #$00000120,a1 * Address pointer-Y
00:00002422 7000            	  3873:                 moveq  #$00000000,d0 * BCD byte-X
00:00002424 7200            	  3874:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002426 7400            	  3875:                 moveq  #$00000000,d2
00:00002428 7600            	  3876:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:0000242A 7800            	  3877:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000242C 7A00            	  3878:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000242E 2C3C00000099    	  3879:                 move.l #$00000099,d6 * Inner loop counter
00:00002434 2E3C00000099    	  3880:                 move.l #$00000099,d7 * Outer loop counter
                            	  3881: 
00:0000243A 2007            	  3882: ABCD_OUTER1:    move.l d7,d0
00:0000243C 2206            	  3883: ABCD_INNER1:    move.l d6,d1
00:0000243E 023C00EF        	  3884:                 andi.b #$EF,CCR     * Clear X Flag
00:00002442 307C0110        	  3885:                 move.l #$00000110,a0 * Address pointer-X
00:00002446 327C0120        	  3886:                 move.l #$00000120,a1 * Address pointer-Y
00:0000244A 1140FFFF        	  3887:                 move.b d0,-1(a0)
00:0000244E 1341FFFF        	  3888:                 move.b d1,-1(a1)
                            	  3889: 
00:00002452 C300            	  3890:                 abcd d0,d1
00:00002454 6402            	  3891:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00002456 5284            	  3892:                 add.l #1,d4
00:00002458 DA81            	  3893: ABCD_NO_C1:     add.l d1,d5
                            	  3894: 
00:0000245A C308            	  3895:                 abcd -(a0),-(a1)
00:0000245C 6402            	  3896:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:0000245E 5284            	  3897:                 add.l #1,d4
00:00002460 D611            	  3898: ABCD_NO_C2:     add.b (a1),d3
                            	  3899: 
                            	  3900: 
00:00002462 51CEFFD8        	  3901:                 dbf d6,ABCD_INNER1
00:00002466 2C3C00000099    	  3902:                 move.l #$00000099,d6
00:0000246C 51CFFFCC        	  3903:                 dbf d7,ABCD_OUTER1
00:00002470 0C8400005AFC    	  3904:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:00002476 66FE            	  3905:                 bne.s *
00:00002478 0C85001C9A34    	  3906:                 cmpi.l #$001C9A34,d5
00:0000247E 66FE            	  3907:                 bne.s *
00:00002480 0C8300000034    	  3908:                 cmpi.l #$00000034,d3
00:00002486 66FE            	  3909:                 bne.s *
                            	  3910: 
                            	  3911: *     Test with X Flag SET
00:00002488 307C0110        	  3912:                 move.l #$00000110,a0 * Address pointer-X
00:0000248C 327C0120        	  3913:                 move.l #$00000120,a1 * Address pointer-Y
00:00002490 7000            	  3914:                 moveq  #$00000000,d0 * BCD byte-X
00:00002492 7200            	  3915:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002494 7400            	  3916:                 moveq  #$00000000,d2
00:00002496 7600            	  3917:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002498 7800            	  3918:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000249A 7A00            	  3919:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000249C 2C3C00000099    	  3920:                 move.l #$00000099,d6 * Inner loop counter
00:000024A2 2E3C00000099    	  3921:                 move.l #$00000099,d7 * Outer loop counter
                            	  3922: 
00:000024A8 2007            	  3923: ABCD_OUTER2:    move.l d7,d0
00:000024AA 2206            	  3924: ABCD_INNER2:    move.l d6,d1
00:000024AC 003C0010        	  3925:                 ori.b #$10,CCR      * Set X Flag
00:000024B0 307C0110        	  3926:                 move.l #$00000110,a0 * Address pointer-X
00:000024B4 327C0120        	  3927:                 move.l #$00000120,a1 * Address pointer-Y
00:000024B8 1140FFFF        	  3928:                 move.b d0,-1(a0)
00:000024BC 1341FFFF        	  3929:                 move.b d1,-1(a1)
                            	  3930: 
00:000024C0 C300            	  3931:                 abcd d0,d1
00:000024C2 6402            	  3932:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:000024C4 5284            	  3933:                 add.l #1,d4
00:000024C6 DA81            	  3934: ABCD_NO_C3:     add.l d1,d5
                            	  3935: 
00:000024C8 C308            	  3936:                 abcd -(a0),-(a1)
00:000024CA 6402            	  3937:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:000024CC 5284            	  3938:                 add.l #1,d4
00:000024CE D611            	  3939: ABCD_NO_C4:     add.b (a1),d3
                            	  3940: 
                            	  3941: 
00:000024D0 51CEFFD8        	  3942:                 dbf d6,ABCD_INNER2
00:000024D4 2C3C00000099    	  3943:                 move.l #$00000099,d6
00:000024DA 51CFFFCC        	  3944:                 dbf d7,ABCD_OUTER2
00:000024DE 0C8400005B60    	  3945:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:000024E4 66FE            	  3946:                 bne.s *
00:000024E6 0C85001CCFC8    	  3947:                 cmpi.l #$001CCFC8,d5
00:000024EC 66FE            	  3948:                 bne.s *
00:000024EE 0C8300000034    	  3949:                 cmpi.l #$00000034,d3
00:000024F4 66FE            	  3950:                 bne.s *
                            	  3951: 
                            	  3952: *             Quick check of Z Flag
00:000024F6 103C0000        	  3953:                 move.b #$00,d0
00:000024FA 123C0000        	  3954:                 move.b #$00,d1
00:000024FE 44FC0000        	  3955:                 move #$00,CCR              * Set Z flag to 0
00:00002502 C101            	  3956:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:00002504 67FE            	  3957:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3958: 
00:00002506 103C0001        	  3959:                 move.b #$01,d0
00:0000250A 123C0000        	  3960:                 move.b #$00,d1
00:0000250E 44FC0004        	  3961:                 move #$04,CCR              * Set Z flag to 0
00:00002512 C101            	  3962:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:00002514 67FE            	  3963:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3964: 
00:00002516 4E75            	  3965:                 rts
                            	  3966: 
                            	  3967: *-----------------------------------------------------------
                            	  3968: *-----------------------------------------------------------
                            	  3969: * OPCODE : SBCD
                            	  3970: *-----------------------------------------------------------
                            	  3971: *-----------------------------------------------------------
                            	  3972: op_SBCD:
                            	  3973: 
                            	  3974: *     Test with X Flag CLEARED
00:00002518 307C0110        	  3975:                 move.l #$00000110,a0 * Address pointer-X
00:0000251C 327C0120        	  3976:                 move.l #$00000120,a1 * Address pointer-Y
00:00002520 7000            	  3977:                 moveq  #$00000000,d0 * BCD byte-X
00:00002522 7200            	  3978:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002524 7400            	  3979:                 moveq  #$00000000,d2
00:00002526 7600            	  3980:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002528 7800            	  3981:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000252A 7A00            	  3982:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000252C 2C3C00000099    	  3983:                 move.l #$00000099,d6 * Inner loop counter
00:00002532 2E3C00000099    	  3984:                 move.l #$00000099,d7 * Outer loop counter
                            	  3985: 
00:00002538 2007            	  3986: SBCD_OUTER1:    move.l d7,d0
00:0000253A 2206            	  3987: SBCD_INNER1:    move.l d6,d1
00:0000253C 023C00EF        	  3988:                 andi.b #$EF,CCR     * Clear X Flag
00:00002540 307C0110        	  3989:                 move.l #$00000110,a0 * Address pointer-X
00:00002544 327C0120        	  3990:                 move.l #$00000120,a1 * Address pointer-Y
00:00002548 1140FFFF        	  3991:                 move.b d0,-1(a0)
00:0000254C 1341FFFF        	  3992:                 move.b d1,-1(a1)
                            	  3993: 
00:00002550 8300            	  3994:                 sbcd d0,d1
00:00002552 6402            	  3995:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00002554 5284            	  3996:                 add.l #1,d4
00:00002556 DA81            	  3997: SBCD_NO_C1:     add.l d1,d5
                            	  3998: 
00:00002558 8308            	  3999:                 sbcd -(a0),-(a1)
00:0000255A 6402            	  4000:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:0000255C 5284            	  4001:                 add.l #1,d4
00:0000255E D611            	  4002: SBCD_NO_C2:     add.b (a1),d3
                            	  4003: 
                            	  4004: 
00:00002560 51CEFFD8        	  4005:                 dbf d6,SBCD_INNER1
00:00002564 2C3C00000099    	  4006:                 move.l #$00000099,d6
00:0000256A 51CFFFCC        	  4007:                 dbf d7,SBCD_OUTER1
00:0000256E 0C8400005C0A    	  4008:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:00002574 66FE            	  4009:                 bne.s *
00:00002576 0C85001C459E    	  4010:                 cmpi.l #$001C459E,d5
00:0000257C 66FE            	  4011:                 bne.s *
00:0000257E 0C830000009E    	  4012:                 cmpi.l #$0000009E,d3
00:00002584 66FE            	  4013:                 bne.s *
                            	  4014: 
                            	  4015: *     Test with X Flag SET
00:00002586 307C0110        	  4016:                 move.l #$00000110,a0 * Address pointer-X
00:0000258A 327C0120        	  4017:                 move.l #$00000120,a1 * Address pointer-Y
00:0000258E 7000            	  4018:                 moveq  #$00000000,d0 * BCD byte-X
00:00002590 7200            	  4019:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002592 7400            	  4020:                 moveq  #$00000000,d2
00:00002594 7600            	  4021:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002596 7800            	  4022:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002598 7A00            	  4023:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000259A 2C3C00000099    	  4024:                 move.l #$00000099,d6 * Inner loop counter
00:000025A0 2E3C00000099    	  4025:                 move.l #$00000099,d7 * Outer loop counter
                            	  4026: 
00:000025A6 2007            	  4027: SBCD_OUTER2:    move.l d7,d0
00:000025A8 2206            	  4028: SBCD_INNER2:    move.l d6,d1
00:000025AA 003C0010        	  4029:                 ori.b #$10,CCR      * Set X Flag
00:000025AE 307C0110        	  4030:                 move.l #$00000110,a0 * Address pointer-X
00:000025B2 327C0120        	  4031:                 move.l #$00000120,a1 * Address pointer-Y
00:000025B6 1140FFFF        	  4032:                 move.b d0,-1(a0)
00:000025BA 1341FFFF        	  4033:                 move.b d1,-1(a1)
                            	  4034: 
00:000025BE 8300            	  4035:                 sbcd d0,d1
00:000025C0 6402            	  4036:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:000025C2 5284            	  4037:                 add.l #1,d4
00:000025C4 DA81            	  4038: SBCD_NO_C3:     add.l d1,d5
                            	  4039: 
00:000025C6 8308            	  4040:                 sbcd -(a0),-(a1)
00:000025C8 6402            	  4041:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:000025CA 5284            	  4042:                 add.l #1,d4
00:000025CC D611            	  4043: SBCD_NO_C4:     add.b (a1),d3
                            	  4044: 
00:000025CE 51CEFFD8        	  4045:                 dbf d6,SBCD_INNER2
00:000025D2 2C3C00000099    	  4046:                 move.l #$00000099,d6
00:000025D8 51CFFFCC        	  4047:                 dbf d7,SBCD_OUTER2
00:000025DC 0C8400005CA4    	  4048:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:000025E2 66FE            	  4049:                 bne.s *
00:000025E4 0C85001C5C66    	  4050:                 cmpi.l #$001C5C66,d5
00:000025EA 66FE            	  4051:                 bne.s *
00:000025EC 0C830000009E    	  4052:                 cmpi.l #$0000009E,d3
00:000025F2 66FE            	  4053:                 bne.s *
                            	  4054: 
                            	  4055: 
                            	  4056: *             Quick check of Z Flag
00:000025F4 103C0000        	  4057:                 move.b #$00,d0
00:000025F8 123C0000        	  4058:                 move.b #$00,d1
00:000025FC 44FC0000        	  4059:                 move #$00,CCR              * Set Z flag to 0
00:00002600 8101            	  4060:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:00002602 67FE            	  4061:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4062: 
00:00002604 103C0001        	  4063:                 move.b #$01,d0
00:00002608 123C0000        	  4064:                 move.b #$00,d1
00:0000260C 44FC0004        	  4065:                 move #$04,CCR              * Set Z flag to 0
00:00002610 8101            	  4066:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:00002612 67FE            	  4067:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4068: 
00:00002614 4E75            	  4069:                 rts
                            	  4070: 
                            	  4071: *-----------------------------------------------------------
                            	  4072: *-----------------------------------------------------------
                            	  4073: * OPCODE : NBCD
                            	  4074: *-----------------------------------------------------------
                            	  4075: *-----------------------------------------------------------
                            	  4076: op_NBCD:
                            	  4077: 
                            	  4078: *        NBCD to a  Register
                            	  4079: 
00:00002616 7000            	  4080:                 moveq  #$00000000,d0 * BCD byte
00:00002618 7200            	  4081:                 moveq  #$00000000,d1
00:0000261A 7400            	  4082:                 moveq  #$00000000,d2
00:0000261C 7600            	  4083:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:0000261E 7800            	  4084:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002620 7A00            	  4085:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00002622 2C3C00000099    	  4086:                 move.l #$00000099,d6
00:00002628 2E3C00000099    	  4087:                 move.l #$00000099,d7 * Loop counter
                            	  4088: 
00:0000262E 2007            	  4089: NBCD_LOOP:      move.l d7,d0
00:00002630 44FC0004        	  4090:                 move #$04,CCR        * Set Z flag to 0
                            	  4091: 
00:00002634 4800            	  4092:                 nbcd d0
                            	  4093: 
00:00002636 6402            	  4094:                 bcc.s NBCD_NO_C         * Check C Flag
00:00002638 5284            	  4095:                 add.l #1,d4
00:0000263A 6602            	  4096: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:0000263C 5283            	  4097:                 add.l #1,d3
00:0000263E DA80            	  4098: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4099: 
00:00002640 51CFFFEC        	  4100:                 dbf d7,NBCD_LOOP
                            	  4101: 
00:00002644 0C8300000001    	  4102:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:0000264A 66FE            	  4103:                 bne.s *
00:0000264C 0C8400000099    	  4104:                 cmpi.l #$00000099,d4
00:00002652 66FE            	  4105:                 bne.s *
00:00002654 0C8500002E3B    	  4106:                 cmpi.l #$00002E3B,d5
00:0000265A 66FE            	  4107:                 bne.s *
                            	  4108: 
                            	  4109: 
                            	  4110: *        NBCD to a memory location
                            	  4111: 
00:0000265C 7000            	  4112:                 moveq  #$00000000,d0 * BCD byte
00:0000265E 7200            	  4113:                 moveq  #$00000000,d1
00:00002660 7400            	  4114:                 moveq  #$00000000,d2
00:00002662 7600            	  4115:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00002664 7800            	  4116:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002666 7A00            	  4117:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00002668 2C3C00000099    	  4118:                 move.l #$00000099,d6
00:0000266E 2E3C00000099    	  4119:                 move.l #$00000099,d7 * Loop counter
                            	  4120: 
00:00002674 11C70100        	  4121: NBCD_LOOP1:     move.b d7,$00000100
00:00002678 44FC0004        	  4122:                 move #$04,CCR        * Set Z flag to 0
                            	  4123: 
00:0000267C 48380100        	  4124:                 nbcd $00000100
00:00002680 10380100        	  4125:                 move.b $00000100,d0
                            	  4126: 
00:00002684 6402            	  4127:                 bcc.s NBCD_NO_C1        * Check C Flag
00:00002686 5284            	  4128:                 add.l #1,d4
00:00002688 6602            	  4129: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:0000268A 5283            	  4130:                 add.l #1,d3
00:0000268C DA80            	  4131: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4132: 
00:0000268E 51CFFFE4        	  4133:                 dbf d7,NBCD_LOOP1
                            	  4134: 
00:00002692 0C8300000001    	  4135:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00002698 66FE            	  4136:                 bne.s *
00:0000269A 4A84            	  4137:                 cmpi.l #$00000000,d4
00:0000269C 66FE            	  4138:                 bne.s *
00:0000269E 0C8500002E3B    	  4139:                 cmpi.l #$00002E3B,d5
00:000026A4 66FE            	  4140:                 bne.s *
                            	  4141: 
                            	  4142: 
00:000026A6 4E75            	  4143:                 rts
                            	  4144: 
                            	  4145: 
                            	  4146: 
                            	  4147: *-----------------------------------------------------------
                            	  4148: *-----------------------------------------------------------
                            	  4149: * OPCODE : TRAPV
                            	  4150: *-----------------------------------------------------------
                            	  4151: *-----------------------------------------------------------
                            	  4152: op_TRAPV:
                            	  4153: 
                            	  4154: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4155: 
00:000026A8 7000            	  4156:                 moveq  #$00000000,d0 * Clear d0
                            	  4157: 
00:000026AA 44FC0000        	  4158:                 move #$00,CCR        * Clear V flag
00:000026AE 4E76            	  4159:                 trapv
00:000026B0 4A80            	  4160:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:000026B2 66FE            	  4161:                 bne.s *
                            	  4162: 
00:000026B4 44FC0002        	  4163:                 move #$02,CCR        * Set V flag
00:000026B8 4E76            	  4164:                 trapv
00:000026BA 0C8012345678    	  4165:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:000026C0 66FE            	  4166:                 bne.s *
                            	  4167: 
                            	  4168: 
00:000026C2 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: 
                            	  4173: *-----------------------------------------------------------
                            	  4174: *-----------------------------------------------------------
                            	  4175: * OPCODE : RTR
                            	  4176: *-----------------------------------------------------------
                            	  4177: *-----------------------------------------------------------
                            	  4178: 
                            	  4179: op_RTR:
                            	  4180: 
                            	  4181: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4182: 
00:000026C4 41FA000C        	  4183:                 lea RTR_DONE,a0
00:000026C8 2F08            	  4184:                 move.l a0,-(a7)     * push destination PC to the stack
00:000026CA 2F3C0000FF15    	  4185:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
00:000026D0 4E77            	  4186:                 rtr
                            	  4187: 
00:000026D2 4180            	  4188: RTR_DONE:       move.l SR,d0
00:000026D4 0240001F        	  4189:                 andi #$1F,d0
00:000026D8 0C400015        	  4190:                 cmpi #$15,d0
00:000026DC 66FE            	  4191:                 bne.s *
                            	  4192: 
00:000026DE 4E75            	  4193:                 rts
                            	  4194: 
                            	  4195: 
00:000026E0 283C44444444    	  4196: BSR_FAR2:       move.l #$44444444,d4
00:000026E6 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
                            	  4200: *-----------------------------------------------------------
                            	  4201: *-----------------------------------------------------------
                            	  4202: * OPCODE : BCC
                            	  4203: *-----------------------------------------------------------
                            	  4204: *-----------------------------------------------------------
                            	  4205: 
00:000026E8 44FC0000        	  4206: op_BCC:         move #$00,CCR
00:000026EC 6202            	  4207:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:000026EE 60FE            	  4208:                 bra.s *
                            	  4209: 
00:000026F0 44FC0001        	  4210: BCC1:           move #$01,CCR
00:000026F4 63000004        	  4211:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:000026F8 60FE            	  4212:                 bra.s *
                            	  4213: 
00:000026FA 44FC0000        	  4214: BCC2:           move #$00,CCR
00:000026FE 6402            	  4215:                 bcc.s BCC3            * Carry Clear         C=0
00:00002700 60FE            	  4216:                 bra.s *
                            	  4217: 
00:00002702 44FC0001        	  4218: BCC3:           move #$01,CCR
00:00002706 65000004        	  4219:                 bcs.w BCC4            * Carry Set           C=1
00:0000270A 60FE            	  4220:                 bra.s *
                            	  4221: 
00:0000270C 44FC0000        	  4222: BCC4:           move #$00,CCR
00:00002710 6602            	  4223:                 bne.s BCC5            * Not Equal           Z=0
00:00002712 60FE            	  4224:                 bra.s *
                            	  4225: 
00:00002714 44FC0004        	  4226: BCC5:           move #$04,CCR
00:00002718 67000004        	  4227:                 beq.w BCC6            * Equal               Z=1
00:0000271C 60FE            	  4228:                 bra.s *
                            	  4229: 
00:0000271E 44FC0000        	  4230: BCC6:           move #$00,CCR
00:00002722 6802            	  4231:                 bvc.s BCC7            * V Clear             V=0
00:00002724 60FE            	  4232:                 bra.s *
                            	  4233: 
00:00002726 44FC0002        	  4234: BCC7:           move #$02,CCR
00:0000272A 69000004        	  4235:                 bvs.w BCC8            * V Set               V=1
00:0000272E 60FE            	  4236:                 bra.s *
                            	  4237: 
00:00002730 44FC0000        	  4238: BCC8:           move #$00,CCR
00:00002734 6A02            	  4239:                 bpl.s BCC9            * Plus                N=0
00:00002736 60FE            	  4240:                 bra.s *
                            	  4241: 
00:00002738 44FC0008        	  4242: BCC9:           move #$08,CCR
00:0000273C 6B000004        	  4243:                 bmi.w BCC10           * Minus               N=1
00:00002740 60FE            	  4244:                 bra.s *
                            	  4245: 
00:00002742 44FC0000        	  4246: BCC10:          move #$00,CCR
00:00002746 6C02            	  4247:                 bge.s BCC11           * Greater or Equal    N=V
00:00002748 60FE            	  4248:                 bra.s *
                            	  4249: 
00:0000274A 44FC0002        	  4250: BCC11:          move #$02,CCR
00:0000274E 6D000004        	  4251:                 blt.w BCC12           * Less Than           N!=V
00:00002752 60FE            	  4252:                 bra.s *
                            	  4253: 
00:00002754 44FC000A        	  4254: BCC12:          move #$0A,CCR
00:00002758 6E02            	  4255:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:0000275A 60FE            	  4256:                 bra.s *
                            	  4257: 
00:0000275C 44FC0006        	  4258: BCC13:          move #$06,CCR
00:00002760 6F000004        	  4259:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:00002764 60FE            	  4260:                 bra.s *
                            	  4261: 
                            	  4262: 
00:00002766 4E75            	  4263: BCC14:          rts
                            	  4264: 
                            	  4265: 
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: * OPCODE : DBCC
                            	  4269: *-----------------------------------------------------------
                            	  4270: *-----------------------------------------------------------
                            	  4271: 
00:00002768 7003            	  4272: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:0000276A 7200            	  4273:                 moveq  #$00000000,d1    * Accumulator
00:0000276C 44FC0000        	  4274:                 move #$00,CCR
                            	  4275: 
00:00002770 5201            	  4276: DBCC_LOOP1:     addi.b #$1,d1
00:00002772 51C8FFFC        	  4277:                 dbf d0,DBCC_LOOP1
                            	  4278: 
00:00002776 0C8100000004    	  4279:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:0000277C 66FE            	  4280:                 bne.s *
                            	  4281: 
00:0000277E 5201            	  4282: DBCC_LOOP2:     addi.b #$1,d1
00:00002780 54C8FFFC        	  4283:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4284: 
00:00002784 0C8100000005    	  4285:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:0000278A 66FE            	  4286:                 bne.s *
                            	  4287: 
00:0000278C 4E75            	  4288:                 rts
                            	  4289: 
                            	  4290: 
                            	  4291: *-----------------------------------------------------------
                            	  4292: *-----------------------------------------------------------
                            	  4293: * OPCODE : SCC
                            	  4294: *-----------------------------------------------------------
                            	  4295: *-----------------------------------------------------------
                            	  4296: 
00:0000278E 44FC0001        	  4297: op_SCC:         move #$01,CCR
00:00002792 54F900010000    	  4298:                 scc $00010000                   * Clear the EA byte
00:00002798 4A3900010000    	  4299:                 cmpi.b #$00,$00010000
00:0000279E 66FE            	  4300:                 bne.s *
                            	  4301: 
00:000027A0 44FC0000        	  4302:                 move #$00,CCR
00:000027A4 54F900010000    	  4303:                 scc $00010000                   * Set the EA byte to 0xFF
00:000027AA 0C3900FF00010000	  4304:                 cmpi.b #$FF,$00010000
00:000027B2 66FE            	  4305:                 bne.s *
                            	  4306: 
00:000027B4 4E75            	  4307:                 rts
                            	  4308: 
                            	  4309: 
                            	  4310: 
                            	  4311: *-----------------------------------------------------------
                            	  4312: *-----------------------------------------------------------
                            	  4313: * OPCODE : ADDQ
                            	  4314: *-----------------------------------------------------------
                            	  4315: *-----------------------------------------------------------
                            	  4316: 
                            	  4317: op_ADDQ:
                            	  4318: 
                            	  4319: *     BYTE
00:000027B6 203C000000FF    	  4320:                 move.l #$000000FF,d0    * Loop counter
00:000027BC 7200            	  4321:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027BE 7400            	  4322:                 moveq  #$00000000,d2    * Data results accumulator
00:000027C0 7600            	  4323:                 moveq  #$00000000,d3
00:000027C2 7800            	  4324:                 moveq  #$00000000,d4
00:000027C4 7A00            	  4325:                 moveq  #$00000000,d5
00:000027C6 7C00            	  4326:                 moveq  #$00000000,d6
00:000027C8 7E00            	  4327:                 moveq  #$00000000,d7
                            	  4328: 
00:000027CA 5605            	  4329: ADDQ_LOOP1:     addq.b #3,d5
00:000027CC 4186            	  4330:                 move.l SR,d6
00:000027CE 02860000001F    	  4331:                 andi.l #$1F,d6        * Isolate flags
00:000027D4 D286            	  4332:                 add.l d6,d1           * Copy flag results into accumulator
00:000027D6 D485            	  4333:                 add.l d5,d2           * Copy data results into data accumulator
00:000027D8 51C8FFF0        	  4334:                 dbf d0,ADDQ_LOOP1
                            	  4335: 
00:000027DC 0C810000043D    	  4336:                 cmpi.l #$0000043D,d1
00:000027E2 66FE            	  4337:                 bne.s *
00:000027E4 0C8200007F80    	  4338:                 cmpi.l #$00007F80,d2
00:000027EA 66FE            	  4339:                 bne.s *
                            	  4340: 
                            	  4341: 
                            	  4342: *     WORD
00:000027EC 203C000000FF    	  4343:                 move.l #$000000FF,d0    * Loop counter
00:000027F2 7200            	  4344:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027F4 7400            	  4345:                 moveq  #$00000000,d2    * Data results accumulator
00:000027F6 7600            	  4346:                 moveq  #$00000000,d3
00:000027F8 7800            	  4347:                 moveq  #$00000000,d4
00:000027FA 2A3C0000FFF0    	  4348:                 move.l #$0000FFF0,d5
00:00002800 7C00            	  4349:                 moveq  #$00000000,d6
00:00002802 7E00            	  4350:                 moveq  #$00000000,d7
00:00002804 307C0100        	  4351:                 move.l #$00000100,a0
                            	  4352: 
00:00002808 5A45            	  4353: ADDQ_LOOP2:     addq.w #5,d5
00:0000280A 4186            	  4354:                 move.l SR,d6
00:0000280C 02860000001F    	  4355:                 andi.l #$1F,d6        * Isolate flags
00:00002812 D286            	  4356:                 add.l d6,d1           * Copy flag results into accumulator
00:00002814 D485            	  4357:                 add.l d5,d2           * Copy data results into data accumulator
00:00002816 51C8FFF0        	  4358:                 dbf d0,ADDQ_LOOP2
                            	  4359: 
00:0000281A 0C8100000029    	  4360:                 cmpi.l #$00000029,d1
00:00002820 66FE            	  4361:                 bne.s *
00:00002822 0C8200057280    	  4362:                 cmpi.l #$00057280,d2
00:00002828 66FE            	  4363:                 bne.s *
                            	  4364: 
                            	  4365: 
                            	  4366: *     LONG
00:0000282A 203C000000FF    	  4367:                 move.l #$000000FF,d0    * Loop counter
00:00002830 7200            	  4368:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002832 7400            	  4369:                 moveq  #$00000000,d2    * Data results accumulator
00:00002834 7600            	  4370:                 moveq  #$00000000,d3
00:00002836 7800            	  4371:                 moveq  #$00000000,d4
00:00002838 7AF0            	  4372:                 move.l #$FFFFFFF0,d5
00:0000283A 7C00            	  4373:                 moveq  #$00000000,d6
00:0000283C 7E00            	  4374:                 moveq  #$00000000,d7
                            	  4375: 
00:0000283E 5285            	  4376: ADDQ_LOOP3:     addq.l #1,d5
00:00002840 4186            	  4377:                 move.l SR,d6
00:00002842 02860000001F    	  4378:                 andi.l #$1F,d6        * Isolate flags
00:00002848 D286            	  4379:                 add.l d6,d1           * Copy flag results into accumulator
00:0000284A D485            	  4380:                 add.l d5,d2           * Copy data results into data accumulator
00:0000284C 51C8FFF0        	  4381:                 dbf d0,ADDQ_LOOP3
                            	  4382: 
00:00002850 0C810000008D    	  4383:                 cmpi.l #$0000008D,d1
00:00002856 66FE            	  4384:                 bne.s *
00:00002858 0C8200007080    	  4385:                 cmpi.l #$00007080,d2
00:0000285E 66FE            	  4386:                 bne.s *
                            	  4387: 
                            	  4388: *     Check that Flags are not updated for Address registers
00:00002860 207C0000FFFF    	  4389:                 move.l #$0000FFFF,a0
00:00002866 44FC0000        	  4390:                 move #$00,CCR         * Clear flags
00:0000286A 5E48            	  4391:                 addq.w #$7,a0
00:0000286C 65FE            	  4392:                 bcs.s *
                            	  4393: 
00:0000286E 4E75            	  4394:                 rts
                            	  4395: 
                            	  4396: 
                            	  4397: 
                            	  4398: *-----------------------------------------------------------
                            	  4399: *-----------------------------------------------------------
                            	  4400: * OPCODE : SUBQ
                            	  4401: *-----------------------------------------------------------
                            	  4402: *-----------------------------------------------------------
                            	  4403: 
                            	  4404: op_SUBQ:
                            	  4405: 
                            	  4406: *     BYTE
00:00002870 203C000000FF    	  4407:                 move.l #$000000FF,d0    * Loop counter
00:00002876 7200            	  4408:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002878 243C00001234    	  4409:                 move.l #$00001234,d2    * Data results accumulator
00:0000287E 7600            	  4410:                 moveq  #$00000000,d3
00:00002880 7800            	  4411:                 moveq  #$00000000,d4
00:00002882 7A12            	  4412:                 moveq  #$00000012,d5
00:00002884 7C00            	  4413:                 moveq  #$00000000,d6
00:00002886 7E00            	  4414:                 moveq  #$00000000,d7
                            	  4415: 
00:00002888 5305            	  4416: SUBQ_LOOP1:     subq.b #1,d5
00:0000288A 4186            	  4417:                 move.l SR,d6
00:0000288C 02860000001F    	  4418:                 andi.l #$1F,d6        * Isolate flags
00:00002892 D286            	  4419:                 add.l d6,d1           * Copy flag results into accumulator
00:00002894 D485            	  4420:                 add.l d5,d2           * Copy data results into data accumulator
00:00002896 51C8FFF0        	  4421:                 dbf d0,SUBQ_LOOP1
                            	  4422: 
00:0000289A 0C8100000417    	  4423:                 cmpi.l #$00000417,d1
00:000028A0 66FE            	  4424:                 bne.s *
00:000028A2 0C82000091B4    	  4425:                 cmpi.l #$000091B4,d2
00:000028A8 66FE            	  4426:                 bne.s *
                            	  4427: 
                            	  4428: 
                            	  4429: *     WORD
00:000028AA 203C000000FF    	  4430:                 move.l #$000000FF,d0    * Loop counter
00:000028B0 7200            	  4431:                 moveq  #$00000000,d1    * Flag results accumulator
00:000028B2 7400            	  4432:                 moveq  #$00000000,d2    * Data results accumulator
00:000028B4 7600            	  4433:                 moveq  #$00000000,d3
00:000028B6 7800            	  4434:                 moveq  #$00000000,d4
00:000028B8 7A02            	  4435:                 moveq  #$00000002,d5
00:000028BA 7C00            	  4436:                 moveq  #$00000000,d6
00:000028BC 7E00            	  4437:                 moveq  #$00000000,d7
00:000028BE 307C0100        	  4438:                 move.l #$00000100,a0
                            	  4439: 
00:000028C2 5B45            	  4440: SUBQ_LOOP2:     subq.w #5,d5
00:000028C4 4186            	  4441:                 move.l SR,d6
00:000028C6 02860000001F    	  4442:                 andi.l #$1F,d6        * Isolate flags
00:000028CC D286            	  4443:                 add.l d6,d1           * Copy flag results into accumulator
00:000028CE D485            	  4444:                 add.l d5,d2           * Copy data results into data accumulator
00:000028D0 51C8FFF0        	  4445:                 dbf d0,SUBQ_LOOP2
                            	  4446: 
00:000028D4 0C8100000811    	  4447:                 cmpi.l #$00000811,d1
00:000028DA 66FE            	  4448:                 bne.s *
00:000028DC 0C8200FD7F80    	  4449:                 cmpi.l #$00FD7F80,d2
00:000028E2 66FE            	  4450:                 bne.s *
                            	  4451: 
                            	  4452: 
                            	  4453: *     LONG
00:000028E4 203C000000FF    	  4454:                 move.l #$000000FF,d0    * Loop counter
00:000028EA 7200            	  4455:                 moveq  #$00000000,d1    * Flag results accumulator
00:000028EC 7400            	  4456:                 moveq  #$00000000,d2    * Data results accumulator
00:000028EE 7600            	  4457:                 moveq  #$00000000,d3
00:000028F0 7800            	  4458:                 moveq  #$00000000,d4
00:000028F2 7A07            	  4459:                 moveq  #$00000007,d5
00:000028F4 7C00            	  4460:                 moveq  #$00000000,d6
00:000028F6 7E00            	  4461:                 moveq  #$00000000,d7
                            	  4462: 
00:000028F8 5385            	  4463: SUBQ_LOOP3:     subq.l #1,d5
00:000028FA 4186            	  4464:                 move.l SR,d6
00:000028FC 02860000001F    	  4465:                 andi.l #$1F,d6        * Isolate flags
00:00002902 D286            	  4466:                 add.l d6,d1           * Copy flag results into accumulator
00:00002904 D485            	  4467:                 add.l d5,d2           * Copy data results into data accumulator
00:00002906 51C8FFF0        	  4468:                 dbf d0,SUBQ_LOOP3
                            	  4469: 
00:0000290A 0C81000007DD    	  4470:                 cmpi.l #$000007DD,d1
00:00002910 66FE            	  4471:                 bne.s *
00:00002912 0C82FFFF8680    	  4472:                 cmpi.l #$FFFF8680,d2
00:00002918 66FE            	  4473:                 bne.s *
                            	  4474: 
                            	  4475: *     Check that Flags are not updated for Address registers
00:0000291A 207C0001FFFF    	  4476:                 move.l #$0001FFFF,a0
00:00002920 44FC0000        	  4477:                 move #$00,CCR         * Clear flags
00:00002924 5F48            	  4478:                 subq.w #$7,a0
00:00002926 65FE            	  4479:                 bcs.s *
                            	  4480: 
00:00002928 4E75            	  4481:                 rts
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: *-----------------------------------------------------------
                            	  4487: *-----------------------------------------------------------
                            	  4488: * OPCODE : MOVEQ
                            	  4489: *-----------------------------------------------------------
                            	  4490: *-----------------------------------------------------------
                            	  4491: 
                            	  4492: op_MOVEQ:
00:0000292A 7000            	  4493:                 moveq  #$00000000,d0
00:0000292C 7000            	  4494:                 moveq #$0,d0
00:0000292E 66FE            	  4495:                 bne.s *
00:00002930 4A80            	  4496:                 cmpi.l #$00000000,d0
00:00002932 66FE            	  4497:                 bne.s *
                            	  4498: 
00:00002934 7000            	  4499:                 moveq  #$00000000,d0
00:00002936 7080            	  4500:                 moveq #-128,d0
00:00002938 67FE            	  4501:                 beq.s *
00:0000293A 6AFE            	  4502:                 bpl.s *
00:0000293C 0C80FFFFFF80    	  4503:                 cmpi.l #$FFFFFF80,d0
00:00002942 66FE            	  4504:                 bne.s *
                            	  4505: 
                            	  4506: 
00:00002944 4E75            	  4507:                 rts
                            	  4508: 
                            	  4509: 
                            	  4510: *-----------------------------------------------------------
                            	  4511: *-----------------------------------------------------------
                            	  4512: * OPCODE : DIVU
                            	  4513: *-----------------------------------------------------------
                            	  4514: *-----------------------------------------------------------
                            	  4515: 
                            	  4516: op_DIVU:
                            	  4517: 
00:00002946 203CA5A5A5A5    	  4518:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:0000294C 223C00005A5A    	  4519:                 move.l #$00005a5a,d1        * Initial Divisor
00:00002952 243CA5A5A5A5    	  4520:                 move.l #$a5a5a5a5,d2
00:00002958 7600            	  4521:                 moveq  #$00000000,d3
00:0000295A 7800            	  4522:                 moveq  #$00000000,d4        * Cumulative data results
00:0000295C 7A00            	  4523:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000295E 7C0E            	  4524:                 move.l #$0000000E,d6       * Inner loop counter
00:00002960 7E1E            	  4525:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4526: 
                            	  4527: 
00:00002962 80C1            	  4528: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:00002964 4183            	  4529:                 move.l SR,d3
00:00002966 02830000000C    	  4530:                 andi.l #$0C,d3            * Isolate flags
00:0000296C DA83            	  4531:                 add.l d3,d5               * Copy flag results into accumulator
00:0000296E D880            	  4532:                 add.l d0,d4               * Copy data results into data accumulator
00:00002970 E289            	  4533:                 lsr.l #$1,d1
                            	  4534: 
00:00002972 51CEFFEE        	  4535:                 dbf d6,DIVU_OUTER1
00:00002976 E28A            	  4536:                 lsr.l #$1,d2
00:00002978 2002            	  4537:                 move.l d2,d0
00:0000297A 223C00005A5A    	  4538:                 move.l #$00005a5a,d1       * Initial Divisor
00:00002980 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
00:00002982 51CFFFDE        	  4540:                 dbf d7,DIVU_OUTER1
                            	  4541: 
00:00002986 0C8492FEDB89    	  4542:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:0000298C 66FE            	  4543:                 bne.s *
                            	  4544: 
00:0000298E 0C8500000110    	  4545:                 cmpi.l #$00000110,d5      * Check the Flag results
00:00002994 66FE            	  4546:                 bne.s *
                            	  4547: 
                            	  4548: 
00:00002996 4E75            	  4549:                 rts
                            	  4550: 
                            	  4551: 
                            	  4552: 
                            	  4553: *-----------------------------------------------------------
                            	  4554: *-----------------------------------------------------------
                            	  4555: * OPCODE : DIVS
                            	  4556: *-----------------------------------------------------------
                            	  4557: *-----------------------------------------------------------
                            	  4558: 
                            	  4559: op_DIVS:
                            	  4560: 
00:00002998 203CA5A5A5A5    	  4561:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:0000299E 223C00005A5A    	  4562:                 move.l #$00005a5a,d1        * Initial Divisor
00:000029A4 243CA5A5A5A5    	  4563:                 move.l #$a5a5a5a5,d2
00:000029AA 7600            	  4564:                 moveq  #$00000000,d3
00:000029AC 7800            	  4565:                 moveq  #$00000000,d4        * Cumulative data results
00:000029AE 7A00            	  4566:                 moveq  #$00000000,d5       * Cumulative flag results
00:000029B0 7C0E            	  4567:                 move.l #$0000000E,d6       * Inner loop counter
00:000029B2 7E1E            	  4568:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4569: 
                            	  4570: 
00:000029B4 81C1            	  4571: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
00:000029B6 4183            	  4572:                 move.l SR,d3
00:000029B8 02830000000C    	  4573:                 andi.l #$0C,d3            * Isolate flags
00:000029BE DA83            	  4574:                 add.l d3,d5               * Copy flag results into accumulator
00:000029C0 D880            	  4575:                 add.l d0,d4               * Copy data results into data accumulator
00:000029C2 E289            	  4576:                 lsr.l #$1,d1
                            	  4577: 
00:000029C4 51CEFFEE        	  4578:                 dbf d6,DIVS_OUTER1
00:000029C8 E28A            	  4579:                 lsr.l #$1,d2
00:000029CA 2002            	  4580:                 move.l d2,d0
00:000029CC 223C00005A5A    	  4581:                 move.l #$00005a5a,d1       * Initial Divisor
00:000029D2 7C0E            	  4582:                 move.l #$0000000E,d6       * Inner loop counter
00:000029D4 51CFFFDE        	  4583:                 dbf d7,DIVS_OUTER1
                            	  4584: 
00:000029D8 0C844EC5D057    	  4585:                 cmpi.l #$4EC5D057,d4      * Check the data results
00:000029DE 66FE            	  4586:                 bne.s *
                            	  4587: 
00:000029E0 0C8500000038    	  4588:                 cmpi.l #$00000038,d5      * Check the Flag results
00:000029E6 66FE            	  4589:                 bne.s *
                            	  4590: 
                            	  4591: 
00:000029E8 4E75            	  4592:                 rts
                            	  4593: 
                            	  4594: 
                            	  4595: 
                            	  4596: *-----------------------------------------------------------
                            	  4597: *-----------------------------------------------------------
                            	  4598: * OPCODE : OR
                            	  4599: *-----------------------------------------------------------
                            	  4600: *-----------------------------------------------------------
                            	  4601: 
                            	  4602: op_OR:
                            	  4603: 
                            	  4604: *  * <EA> to Register
                            	  4605: 
00:000029EA 203CA5A5A5A5    	  4606:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000029F0 223C8167E123    	  4607:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000029F6 243CA5A5A5A5    	  4608:                 move.l #$a5a5a5a5,d2
00:000029FC 7600            	  4609:                 moveq  #$00000000,d3
00:000029FE 7800            	  4610:                 moveq  #$00000000,d4       * Cumulative data results
00:00002A00 7A00            	  4611:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002A02 7C1E            	  4612:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A04 7E1E            	  4613:                 move.l #$0000001E,d7       * Outer loop counter
00:00002A06 307C0100        	  4614:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4615: 
                            	  4616: 
                            	  4617: OR_OUTER1:
                            	  4618: 
                            	  4619: *     BYTE
00:00002A0A 2081            	  4620:                 move.l d1,(a0)
00:00002A0C 8010            	  4621:                 or.b (a0),d0
00:00002A0E 4183            	  4622:                 move.l SR,d3
00:00002A10 02830000000C    	  4623:                 andi.l #$0C,d3            * Isolate flags
00:00002A16 DA83            	  4624:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A18 D880            	  4625:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4626: 
                            	  4627: *     WORD
00:00002A1A 2081            	  4628:                 move.l d1,(a0)
00:00002A1C 8050            	  4629:                 or.w (a0),d0
00:00002A1E 4183            	  4630:                 move.l SR,d3
00:00002A20 02830000000C    	  4631:                 andi.l #$0C,d3            * Isolate flags
00:00002A26 DA83            	  4632:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A28 D880            	  4633:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4634: 
                            	  4635: *     LONG
00:00002A2A 2081            	  4636:                 move.l d1,(a0)
00:00002A2C 8090            	  4637:                 or.l (a0),d0
00:00002A2E 4183            	  4638:                 move.l SR,d3
00:00002A30 02830000000F    	  4639:                 andi.l #$0F,d3            * Isolate flags
00:00002A36 DA83            	  4640:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A38 D880            	  4641:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4642: 
                            	  4643: 
00:00002A3A E289            	  4644:                 lsr.l #$1,d1
00:00002A3C 51CEFFCC        	  4645:                 dbf d6,OR_OUTER1
00:00002A40 E28A            	  4646:                 lsr.l #$1,d2
00:00002A42 223C8167E123    	  4647:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A48 7C1E            	  4648:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A4A 51CFFFBE        	  4649:                 dbf d7,OR_OUTER1
                            	  4650: 
00:00002A4E 0C8476EAC803    	  4651:                 cmpi.l #$76EAC803,d4      * Check the data results
00:00002A54 66FE            	  4652:                 bne.s *
00:00002A56 0C8500005A18    	  4653:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00002A5C 66FE            	  4654:                 bne.s *
                            	  4655: 
                            	  4656: 
                            	  4657: *  * Register to <EA>
                            	  4658: 
00:00002A5E 203C86738374    	  4659:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002A64 223CFC55F2FE    	  4660:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002A6A 243C86738374    	  4661:                 move.l #$86738374,d2
00:00002A70 7600            	  4662:                 moveq  #$00000000,d3
00:00002A72 7800            	  4663:                 moveq  #$00000000,d4       * Cumulative data results
00:00002A74 7A00            	  4664:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002A76 7C1E            	  4665:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A78 7E1D            	  4666:                 move.l #$0000001D,d7       * Outer loop counter
00:00002A7A 307C0100        	  4667:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4668: 
                            	  4669: 
                            	  4670: OR_OUTER2:
                            	  4671: 
                            	  4672: *     BYTE
00:00002A7E 2080            	  4673:                 move.l d0,(a0)
00:00002A80 8310            	  4674:                 or.b d1,(a0)
00:00002A82 4183            	  4675:                 move.l SR,d3
00:00002A84 02830000000C    	  4676:                 andi.l #$0C,d3            * Isolate flags
00:00002A8A DA83            	  4677:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A8C D890            	  4678:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4679: 
                            	  4680: *     WORD
00:00002A8E 2080            	  4681:                 move.l d0,(a0)
00:00002A90 8350            	  4682:                 or.w d1,(a0)
00:00002A92 4183            	  4683:                 move.l SR,d3
00:00002A94 02830000000C    	  4684:                 andi.l #$0C,d3            * Isolate flags
00:00002A9A DA83            	  4685:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A9C D890            	  4686:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4687: 
                            	  4688: *     LONG
00:00002A9E 2080            	  4689:                 move.l d0,(a0)
00:00002AA0 8390            	  4690:                 or.l d1,(a0)
00:00002AA2 4183            	  4691:                 move.l SR,d3
00:00002AA4 02830000000F    	  4692:                 andi.l #$0F,d3            * Isolate flags
00:00002AAA DA83            	  4693:                 add.l d3,d5               * Copy flag results into accumulator
00:00002AAC D890            	  4694:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4695: 
                            	  4696: 
00:00002AAE E289            	  4697:                 lsr.l #$1,d1
00:00002AB0 51CEFFCC        	  4698:                 dbf d6,OR_OUTER2
00:00002AB4 E28A            	  4699:                 lsr.l #$1,d2
00:00002AB6 223C8167E123    	  4700:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002ABC 7C1E            	  4701:                 move.l #$0000001E,d6       * Inner loop counter
00:00002ABE 51CFFFBE        	  4702:                 dbf d7,OR_OUTER2
                            	  4703: 
00:00002AC2 0C84FA82B9E4    	  4704:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00002AC8 66FE            	  4705:                 bne.s *
00:00002ACA 0C8500005730    	  4706:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00002AD0 66FE            	  4707:                 bne.s *
                            	  4708: 
                            	  4709: 
00:00002AD2 4E75            	  4710:                 rts
                            	  4711: 
                            	  4712: 
                            	  4713: 
                            	  4714: *-----------------------------------------------------------
                            	  4715: *-----------------------------------------------------------
                            	  4716: * OPCODE : AND
                            	  4717: *-----------------------------------------------------------
                            	  4718: *-----------------------------------------------------------
                            	  4719: 
                            	  4720: op_AND:
                            	  4721: 
                            	  4722: *  * <EA> to Register
                            	  4723: 
00:00002AD4 203CA5A5A5A5    	  4724:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002ADA 223C8167E123    	  4725:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002AE0 243CA5A5A5A5    	  4726:                 move.l #$a5a5a5a5,d2
00:00002AE6 7600            	  4727:                 moveq  #$00000000,d3
00:00002AE8 7800            	  4728:                 moveq  #$00000000,d4       * Cumulative data results
00:00002AEA 7A00            	  4729:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002AEC 7C1E            	  4730:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AEE 7E1E            	  4731:                 move.l #$0000001E,d7       * Outer loop counter
00:00002AF0 307C0100        	  4732:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4733: 
                            	  4734: 
                            	  4735: AND_OUTER1:
                            	  4736: 
                            	  4737: *     BYTE
00:00002AF4 2081            	  4738:                 move.l d1,(a0)
00:00002AF6 C010            	  4739:                 and.b (a0),d0
00:00002AF8 4183            	  4740:                 move.l SR,d3
00:00002AFA 02830000000C    	  4741:                 andi.l #$0C,d3            * Isolate flags
00:00002B00 DA83            	  4742:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B02 D880            	  4743:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4744: 
                            	  4745: *     WORD
00:00002B04 2081            	  4746:                 move.l d1,(a0)
00:00002B06 C050            	  4747:                 and.w (a0),d0
00:00002B08 4183            	  4748:                 move.l SR,d3
00:00002B0A 02830000000C    	  4749:                 andi.l #$0C,d3            * Isolate flags
00:00002B10 DA83            	  4750:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B12 D880            	  4751:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4752: 
                            	  4753: *     LONG
00:00002B14 2081            	  4754:                 move.l d1,(a0)
00:00002B16 C090            	  4755:                 and.l (a0),d0
00:00002B18 4183            	  4756:                 move.l SR,d3
00:00002B1A 02830000000F    	  4757:                 andi.l #$0F,d3            * Isolate flags
00:00002B20 DA83            	  4758:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B22 D880            	  4759:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4760: 
                            	  4761: 
00:00002B24 E289            	  4762:                 lsr.l #$1,d1
00:00002B26 51CEFFCC        	  4763:                 dbf d6,AND_OUTER1
00:00002B2A E28A            	  4764:                 lsr.l #$1,d2
00:00002B2C 223C8167E123    	  4765:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002B32 7C1E            	  4766:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B34 51CFFFBE        	  4767:                 dbf d7,AND_OUTER1
                            	  4768: 
00:00002B38 0C84CF212883    	  4769:                 cmpi.l #$CF212883,d4      * Check the data results
00:00002B3E 66FE            	  4770:                 bne.s *
00:00002B40 0C8500002D10    	  4771:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:00002B46 66FE            	  4772:                 bne.s *
                            	  4773: 
                            	  4774: 
                            	  4775: *  * Register to <EA>
                            	  4776: 
00:00002B48 203C86738374    	  4777:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B4E 223CFC55F2FE    	  4778:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B54 243C86738374    	  4779:                 move.l #$86738374,d2
00:00002B5A 7600            	  4780:                 moveq  #$00000000,d3
00:00002B5C 7800            	  4781:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B5E 7A00            	  4782:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002B60 7C1E            	  4783:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B62 7E1D            	  4784:                 move.l #$0000001D,d7       * Outer loop counter
00:00002B64 307C0100        	  4785:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4786: 
                            	  4787: 
                            	  4788: AND_OUTER2:
                            	  4789: 
                            	  4790: *     BYTE
00:00002B68 2080            	  4791:                 move.l d0,(a0)
00:00002B6A C310            	  4792:                 and.b d1,(a0)
00:00002B6C 4183            	  4793:                 move.l SR,d3
00:00002B6E 02830000000C    	  4794:                 andi.l #$0C,d3            * Isolate flags
00:00002B74 DA83            	  4795:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B76 D890            	  4796:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4797: 
                            	  4798: *     WORD
00:00002B78 2080            	  4799:                 move.l d0,(a0)
00:00002B7A C350            	  4800:                 and.w d1,(a0)
00:00002B7C 4183            	  4801:                 move.l SR,d3
00:00002B7E 02830000000C    	  4802:                 andi.l #$0C,d3            * Isolate flags
00:00002B84 DA83            	  4803:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B86 D890            	  4804:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4805: 
                            	  4806: *     LONG
00:00002B88 2080            	  4807:                 move.l d0,(a0)
00:00002B8A C390            	  4808:                 and.l d1,(a0)
00:00002B8C 4183            	  4809:                 move.l SR,d3
00:00002B8E 02830000000F    	  4810:                 andi.l #$0F,d3            * Isolate flags
00:00002B94 DA83            	  4811:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B96 D890            	  4812:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4813: 
                            	  4814: 
00:00002B98 E289            	  4815:                 lsr.l #$1,d1
00:00002B9A 51CEFFCC        	  4816:                 dbf d6,AND_OUTER2
00:00002B9E E28A            	  4817:                 lsr.l #$1,d2
00:00002BA0 223C8167E123    	  4818:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002BA6 7C1E            	  4819:                 move.l #$0000001E,d6       * Inner loop counter
00:00002BA8 51CFFFBE        	  4820:                 dbf d7,AND_OUTER2
                            	  4821: 
00:00002BAC 0C844A3DE544    	  4822:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:00002BB2 66FE            	  4823:                 bne.s *
00:00002BB4 0C85000018E8    	  4824:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00002BBA 66FE            	  4825:                 bne.s *
                            	  4826: 
                            	  4827: 
00:00002BBC 4E75            	  4828:                 rts
                            	  4829: 
                            	  4830: 
                            	  4831: 
                            	  4832: *-----------------------------------------------------------
                            	  4833: *-----------------------------------------------------------
                            	  4834: * OPCODE : EOR
                            	  4835: *-----------------------------------------------------------
                            	  4836: *-----------------------------------------------------------
                            	  4837: 
                            	  4838: op_EOR:
                            	  4839: 
                            	  4840: *  * Register to <EA>
                            	  4841: 
00:00002BBE 203C86738374    	  4842:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002BC4 223CFC55F2FE    	  4843:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002BCA 243C86738374    	  4844:                 move.l #$86738374,d2
00:00002BD0 7600            	  4845:                 moveq  #$00000000,d3
00:00002BD2 7800            	  4846:                 moveq  #$00000000,d4       * Cumulative data results
00:00002BD4 7A00            	  4847:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002BD6 7C1E            	  4848:                 move.l #$0000001E,d6       * Inner loop counter
00:00002BD8 7E1D            	  4849:                 move.l #$0000001D,d7       * Outer loop counter
00:00002BDA 307C0100        	  4850:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4851: 
                            	  4852: 
                            	  4853: EOR_OUTER2:
                            	  4854: 
                            	  4855: *     BYTE
00:00002BDE 2080            	  4856:                 move.l d0,(a0)
00:00002BE0 B310            	  4857:                 eor.b d1,(a0)
00:00002BE2 4183            	  4858:                 move.l SR,d3
00:00002BE4 02830000000C    	  4859:                 andi.l #$0C,d3            * Isolate flags
00:00002BEA DA83            	  4860:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BEC D890            	  4861:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4862: 
                            	  4863: *     WORD
00:00002BEE 2080            	  4864:                 move.l d0,(a0)
00:00002BF0 B350            	  4865:                 eor.w d1,(a0)
00:00002BF2 4183            	  4866:                 move.l SR,d3
00:00002BF4 02830000000C    	  4867:                 andi.l #$0C,d3            * Isolate flags
00:00002BFA DA83            	  4868:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BFC D890            	  4869:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4870: 
                            	  4871: *     LONG
00:00002BFE 2080            	  4872:                 move.l d0,(a0)
00:00002C00 B390            	  4873:                 eor.l d1,(a0)
00:00002C02 4183            	  4874:                 move.l SR,d3
00:00002C04 02830000000F    	  4875:                 andi.l #$0F,d3            * Isolate flags
00:00002C0A DA83            	  4876:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C0C D890            	  4877:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4878: 
                            	  4879: 
00:00002C0E E289            	  4880:                 lsr.l #$1,d1
00:00002C10 51CEFFCC        	  4881:                 dbf d6,EOR_OUTER2
00:00002C14 E28A            	  4882:                 lsr.l #$1,d2
00:00002C16 223C8167E123    	  4883:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002C1C 7C1E            	  4884:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C1E 51CFFFBE        	  4885:                 dbf d7,EOR_OUTER2
                            	  4886: 
00:00002C22 0C8455C5EB70    	  4887:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:00002C28 66FE            	  4888:                 bne.s *
00:00002C2A 0C8500004430    	  4889:                 cmpi.l #$00004430,d5      * Check the Flag results
00:00002C30 66FE            	  4890:                 bne.s *
                            	  4891: 
                            	  4892: 
00:00002C32 4E75            	  4893:                 rts
                            	  4894: 
                            	  4895: 
                            	  4896: *-----------------------------------------------------------
                            	  4897: *-----------------------------------------------------------
                            	  4898: * OPCODE : CMP
                            	  4899: *-----------------------------------------------------------
                            	  4900: *-----------------------------------------------------------
                            	  4901: 
                            	  4902: op_CMP:
                            	  4903: 
                            	  4904: 
                            	  4905: *  * <EA> to Register
                            	  4906: 
00:00002C34 203CA5A5A5A5    	  4907:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002C3A 223C8167E123    	  4908:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002C40 243CA5A5A5A5    	  4909:                 move.l #$a5a5a5a5,d2
00:00002C46 7600            	  4910:                 moveq  #$00000000,d3
00:00002C48 7800            	  4911:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C4A 7A00            	  4912:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C4C 7C1E            	  4913:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C4E 7E1E            	  4914:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C50 307C0100        	  4915:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4916: 
                            	  4917: 
                            	  4918: CMP_OUTER1:
                            	  4919: 
                            	  4920: *     BYTE
00:00002C54 2081            	  4921:                 move.l d1,(a0)
00:00002C56 B010            	  4922:                 cmp.b (a0),d0
00:00002C58 4183            	  4923:                 move.l SR,d3
00:00002C5A 02830000000F    	  4924:                 andi.l #$0F,d3            * Isolate flags
00:00002C60 DA83            	  4925:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C62 D880            	  4926:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4927: 
                            	  4928: *     WORD
00:00002C64 2081            	  4929:                 move.l d1,(a0)
00:00002C66 B050            	  4930:                 cmp.w (a0),d0
00:00002C68 4183            	  4931:                 move.l SR,d3
00:00002C6A 02830000000F    	  4932:                 andi.l #$0F,d3            * Isolate flags
00:00002C70 DA83            	  4933:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C72 D880            	  4934:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4935: 
                            	  4936: *     LONG
00:00002C74 2081            	  4937:                 move.l d1,(a0)
00:00002C76 B090            	  4938:                 cmp.l (a0),d0
00:00002C78 4183            	  4939:                 move.l SR,d3
00:00002C7A 02830000000F    	  4940:                 andi.l #$0F,d3            * Isolate flags
00:00002C80 DA83            	  4941:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C82 D880            	  4942:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4943: 
                            	  4944: 
00:00002C84 E289            	  4945:                 lsr.l #$1,d1
00:00002C86 51CEFFCC        	  4946:                 dbf d6,CMP_OUTER1
00:00002C8A E28A            	  4947:                 lsr.l #$1,d2
00:00002C8C 223C8167E123    	  4948:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002C92 7C1E            	  4949:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C94 51CFFFBE        	  4950:                 dbf d7,CMP_OUTER1
                            	  4951: 
00:00002C98 0C847878712F    	  4952:                 cmpi.l #$7878712F,d4      * Check the data results
00:00002C9E 66FE            	  4953:                 bne.s *
00:00002CA0 0C8500005502    	  4954:                 cmpi.l #$00005502,d5      * Check the Flag results
00:00002CA6 66FE            	  4955:                 bne.s *
                            	  4956: 
                            	  4957: 
                            	  4958: 
00:00002CA8 4E75            	  4959:                 rts
                            	  4960: 
                            	  4961: 
                            	  4962: *-----------------------------------------------------------
                            	  4963: *-----------------------------------------------------------
                            	  4964: * OPCODE : CMPA
                            	  4965: *-----------------------------------------------------------
                            	  4966: *-----------------------------------------------------------
                            	  4967: 
                            	  4968: op_CMPA:
                            	  4969: 
                            	  4970: 
                            	  4971: *  * <EA> to Register
                            	  4972: 
00:00002CAA 207CA5A5A5A5    	  4973:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00002CB0 223C8167E123    	  4974:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002CB6 243CA5A5A5A5    	  4975:                 move.l #$a5a5a5a5,d2
00:00002CBC 7600            	  4976:                 moveq  #$00000000,d3
00:00002CBE 7800            	  4977:                 moveq  #$00000000,d4       * Cumulative data results
00:00002CC0 7A00            	  4978:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002CC2 7C1E            	  4979:                 move.l #$0000001E,d6       * Inner loop counter
00:00002CC4 7E1E            	  4980:                 move.l #$0000001E,d7       * Outer loop counter
00:00002CC6 327C0100        	  4981:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4982: 
                            	  4983: 
                            	  4984: CMPA_OUTER1:
                            	  4985: 
                            	  4986: 
                            	  4987: *     WORD
00:00002CCA 2281            	  4988:                 move.l d1,(a1)
00:00002CCC B0D1            	  4989:                 cmpa.w (a1),a0
00:00002CCE 4183            	  4990:                 move.l SR,d3
00:00002CD0 02830000000F    	  4991:                 andi.l #$0F,d3            * Isolate flags
00:00002CD6 DA83            	  4992:                 add.l d3,d5               * Copy flag results into accumulator
00:00002CD8 D888            	  4993:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4994: 
                            	  4995: *     LONG
00:00002CDA 2281            	  4996:                 move.l d1,(a1)
00:00002CDC B1D1            	  4997:                 cmpa.l (a1),a0
00:00002CDE 4183            	  4998:                 move.l SR,d3
00:00002CE0 02830000000F    	  4999:                 andi.l #$0F,d3            * Isolate flags
00:00002CE6 DA83            	  5000:                 add.l d3,d5               * Copy flag results into accumulator
00:00002CE8 D888            	  5001:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5002: 
                            	  5003: 
00:00002CEA E289            	  5004:                 lsr.l #$1,d1
00:00002CEC 51CEFFDC        	  5005:                 dbf d6,CMPA_OUTER1
00:00002CF0 E28A            	  5006:                 lsr.l #$1,d2
00:00002CF2 223C8167E123    	  5007:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002CF8 7C1E            	  5008:                 move.l #$0000001E,d6       * Inner loop counter
00:00002CFA 51CFFFCE        	  5009:                 dbf d7,CMPA_OUTER1
                            	  5010: 
00:00002CFE 0C84A5A5A0CA    	  5011:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:00002D04 66FE            	  5012:                 bne.s *
00:00002D06 0C8500003A7D    	  5013:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:00002D0C 66FE            	  5014:                 bne.s *
                            	  5015: 
                            	  5016: 
00:00002D0E 4E75            	  5017:                 rts
                            	  5018: 
                            	  5019: 
                            	  5020: 
                            	  5021: *-----------------------------------------------------------
                            	  5022: *-----------------------------------------------------------
                            	  5023: * OPCODE : CMPM
                            	  5024: *-----------------------------------------------------------
                            	  5025: *-----------------------------------------------------------
                            	  5026: 
                            	  5027: op_CMPM:
                            	  5028: 
00:00002D10 307C0100        	  5029:                 move.l #$00000100,a0       * Address for Data-X
00:00002D14 327C0200        	  5030:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D18 7000            	  5031:                 moveq  #$00000000,d0
00:00002D1A 7200            	  5032:                 moveq  #$00000000,d1
00:00002D1C 7400            	  5033:                 moveq  #$00000000,d2
                            	  5034: 
00:00002D1E 20FC11FF5580    	  5035:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00002D24 20FC1111FFFF    	  5036:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00002D2A 20FC33333333    	  5037:                 move.l #$33333333,(a0)+   * Populate test data
00:00002D30 20FC44444444    	  5038:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5039: 
00:00002D36 22FC80FF337F    	  5040:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00002D3C 22FCFFFF1111    	  5041:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00002D42 22FC33333333    	  5042:                 move.l #$33333333,(a1)+   * Populate test data
00:00002D48 22FC44444444    	  5043:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5044: 
00:00002D4E 307C0100        	  5045:                 move.l #$00000100,a0       * Address for Data-X
00:00002D52 327C0200        	  5046:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D56 7C0F            	  5047:                 move.l #$0000000F,d6       * Loop counter
                            	  5048: 
00:00002D58 B308            	  5049: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00002D5A 4183            	  5050:                 move.l SR,d3
00:00002D5C 02830000000F    	  5051:                 andi.l #$0F,d3            * Isolate flags
00:00002D62 D083            	  5052:                 add.l d3,d0               * Copy flag results into accumulator
00:00002D64 51CEFFF2        	  5053:                 dbf d6,CMPM_LOOP1
                            	  5054: 
                            	  5055: 
00:00002D68 307C0100        	  5056:                 move.l #$00000100,a0       * Address for Data-X
00:00002D6C 327C0200        	  5057:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D70 7C07            	  5058:                 moveq  #$00000007,d6       * Loop counter
                            	  5059: 
00:00002D72 B348            	  5060: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:00002D74 4183            	  5061:                 move.l SR,d3
00:00002D76 02830000000F    	  5062:                 andi.l #$0F,d3            * Isolate flags
00:00002D7C D283            	  5063:                 add.l d3,d1               * Copy flag results into accumulator
00:00002D7E 51CEFFF2        	  5064:                 dbf d6,CMPM_LOOP2
                            	  5065: 
                            	  5066: 
00:00002D82 307C0100        	  5067:                 move.l #$00000100,a0       * Address for Data-X
00:00002D86 327C0200        	  5068:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D8A 7C03            	  5069:                 moveq  #$00000003,d6       * Loop counter
                            	  5070: 
00:00002D8C B388            	  5071: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00002D8E 4183            	  5072:                 move.l SR,d3
00:00002D90 02830000000F    	  5073:                 andi.l #$0F,d3            * Isolate flags
00:00002D96 D483            	  5074:                 add.l d3,d2               * Copy flag results into accumulator
00:00002D98 51CEFFF2        	  5075:                 dbf d6,CMPM_LOOP3
                            	  5076: 
                            	  5077: 
00:00002D9C 0C800000004C    	  5078:                 cmpi.l #$0000004C,d0      * Check the data results
00:00002DA2 66FE            	  5079:                 bne.s *
00:00002DA4 0C8100000024    	  5080:                 cmpi.l #$00000024,d1
00:00002DAA 66FE            	  5081:                 bne.s *
00:00002DAC 0C8200000012    	  5082:                 cmpi.l #$00000012,d2
00:00002DB2 66FE            	  5083:                 bne.s *
                            	  5084: 
00:00002DB4 4E75            	  5085:                 rts
                            	  5086: 
                            	  5087: 
                            	  5088: *-----------------------------------------------------------
                            	  5089: *-----------------------------------------------------------
                            	  5090: * OPCODE : ADD
                            	  5091: *-----------------------------------------------------------
                            	  5092: *-----------------------------------------------------------
                            	  5093: 
                            	  5094: op_ADD:
                            	  5095: 
                            	  5096: 
                            	  5097: *  * <EA> to Register
00:00002DB6 203CA5A5A5A5    	  5098:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002DBC 223C8167E123    	  5099:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002DC2 243CA5A5A5A5    	  5100:                 move.l #$a5a5a5a5,d2
00:00002DC8 7600            	  5101:                 moveq  #$00000000,d3
00:00002DCA 7800            	  5102:                 moveq  #$00000000,d4       * Cumulative data results
00:00002DCC 7A00            	  5103:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002DCE 7C1E            	  5104:                 move.l #$0000001E,d6       * Inner loop counter
00:00002DD0 7E1E            	  5105:                 move.l #$0000001E,d7       * Outer loop counter
00:00002DD2 307C0100        	  5106:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5107: 
                            	  5108: 
                            	  5109: ADD_OUTER1:
                            	  5110: 
                            	  5111: *     BYTE
00:00002DD6 2081            	  5112:                 move.l d1,(a0)
00:00002DD8 D010            	  5113:                 add.b (a0),d0
00:00002DDA 4183            	  5114:                 move.l SR,d3
00:00002DDC 02830000001F    	  5115:                 andi.l #$1F,d3            * Isolate flags
00:00002DE2 DA83            	  5116:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DE4 D880            	  5117:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5118: 
                            	  5119: *     WORD
00:00002DE6 2081            	  5120:                 move.l d1,(a0)
00:00002DE8 D050            	  5121:                 add.w (a0),d0
00:00002DEA 4183            	  5122:                 move.l SR,d3
00:00002DEC 02830000000C    	  5123:                 andi.l #$0C,d3            * Isolate flags
00:00002DF2 DA83            	  5124:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DF4 D880            	  5125:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5126: 
                            	  5127: *     LONG
00:00002DF6 2081            	  5128:                 move.l d1,(a0)
00:00002DF8 D090            	  5129:                 add.l (a0),d0
00:00002DFA 4183            	  5130:                 move.l SR,d3
00:00002DFC 02830000000F    	  5131:                 andi.l #$0F,d3            * Isolate flags
00:00002E02 DA83            	  5132:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E04 D880            	  5133:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5134: 
                            	  5135: 
00:00002E06 E299            	  5136:                 ror.l #$1,d1
00:00002E08 51CEFFCC        	  5137:                 dbf d6,ADD_OUTER1
00:00002E0C E29A            	  5138:                 ror.l #$1,d2
00:00002E0E 223C8167E123    	  5139:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002E14 7C1E            	  5140:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E16 51CFFFBE        	  5141:                 dbf d7,ADD_OUTER1
                            	  5142: 
00:00002E1A 0C8423ED428F    	  5143:                 cmpi.l #$23ED428F,d4      * Check the data results
00:00002E20 66FE            	  5144:                 bne.s *
00:00002E22 0C8500004C96    	  5145:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:00002E28 66FE            	  5146:                 bne.s *
                            	  5147: 
                            	  5148: 
                            	  5149: *  * Register to <EA>
00:00002E2A 203C86738374    	  5150:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002E30 223CFC55F2FE    	  5151:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002E36 243C86738374    	  5152:                 move.l #$86738374,d2
00:00002E3C 7600            	  5153:                 moveq  #$00000000,d3
00:00002E3E 7800            	  5154:                 moveq  #$00000000,d4       * Cumulative data results
00:00002E40 7A00            	  5155:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002E42 7C1E            	  5156:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E44 7E1D            	  5157:                 move.l #$0000001D,d7       * Outer loop counter
00:00002E46 307C0100        	  5158:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5159: 
                            	  5160: 
                            	  5161: ADD_OUTER2:
                            	  5162: 
                            	  5163: *     BYTE
00:00002E4A 2080            	  5164:                 move.l d0,(a0)
00:00002E4C D310            	  5165:                 add.b d1,(a0)
00:00002E4E 4183            	  5166:                 move.l SR,d3
00:00002E50 02830000000C    	  5167:                 andi.l #$0C,d3            * Isolate flags
00:00002E56 DA83            	  5168:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E58 D890            	  5169:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5170: 
                            	  5171: *     WORD
00:00002E5A 2080            	  5172:                 move.l d0,(a0)
00:00002E5C D350            	  5173:                 add.w d1,(a0)
00:00002E5E 4183            	  5174:                 move.l SR,d3
00:00002E60 02830000001F    	  5175:                 andi.l #$1F,d3            * Isolate flags
00:00002E66 DA83            	  5176:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E68 D890            	  5177:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5178: 
                            	  5179: *     LONG
00:00002E6A 2080            	  5180:                 move.l d0,(a0)
00:00002E6C D390            	  5181:                 add.l d1,(a0)
00:00002E6E 4183            	  5182:                 move.l SR,d3
00:00002E70 02830000000F    	  5183:                 andi.l #$0F,d3            * Isolate flags
00:00002E76 DA83            	  5184:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E78 D890            	  5185:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5186: 
                            	  5187: 
00:00002E7A E299            	  5188:                 ror.l #$1,d1
00:00002E7C 51CEFFCC        	  5189:                 dbf d6,ADD_OUTER2
00:00002E80 E29A            	  5190:                 ror.l #$1,d2
00:00002E82 223C8167E123    	  5191:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002E88 7C1E            	  5192:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E8A 51CFFFBE        	  5193:                 dbf d7,ADD_OUTER2
                            	  5194: 
00:00002E8E 0C846701B884    	  5195:                 cmpi.l #$6701B884,d4      * Check the data results
00:00002E94 66FE            	  5196:                 bne.s *
00:00002E96 0C8500005467    	  5197:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00002E9C 66FE            	  5198:                 bne.s *
                            	  5199: 
00:00002E9E 4E75            	  5200:                 rts
                            	  5201: 
                            	  5202: *-----------------------------------------------------------
                            	  5203: *-----------------------------------------------------------
                            	  5204: * OPCODE : SUB
                            	  5205: *-----------------------------------------------------------
                            	  5206: *-----------------------------------------------------------
                            	  5207: 
                            	  5208: op_SUB:
                            	  5209: 
                            	  5210: *  * <EA> to Register
00:00002EA0 203CA5A5A5A5    	  5211:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002EA6 223C8167E123    	  5212:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002EAC 243CA5A5A5A5    	  5213:                 move.l #$a5a5a5a5,d2
00:00002EB2 7600            	  5214:                 moveq  #$00000000,d3
00:00002EB4 7800            	  5215:                 moveq  #$00000000,d4       * Cumulative data results
00:00002EB6 7A00            	  5216:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002EB8 7C1E            	  5217:                 move.l #$0000001E,d6       * Inner loop counter
00:00002EBA 7E1E            	  5218:                 move.l #$0000001E,d7       * Outer loop counter
00:00002EBC 307C0100        	  5219:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5220: 
                            	  5221: 
                            	  5222: SUB_OUTER1:
                            	  5223: 
                            	  5224: *     BYTE
00:00002EC0 2081            	  5225:                 move.l d1,(a0)
00:00002EC2 9010            	  5226:                 sub.b (a0),d0
00:00002EC4 4183            	  5227:                 move.l SR,d3
00:00002EC6 02830000001F    	  5228:                 andi.l #$1F,d3            * Isolate flags
00:00002ECC DA83            	  5229:                 add.l d3,d5               * Copy flag results into accumulator
00:00002ECE D880            	  5230:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5231: 
                            	  5232: *     WORD
00:00002ED0 2081            	  5233:                 move.l d1,(a0)
00:00002ED2 9050            	  5234:                 sub.w (a0),d0
00:00002ED4 4183            	  5235:                 move.l SR,d3
00:00002ED6 02830000000C    	  5236:                 andi.l #$0C,d3            * Isolate flags
00:00002EDC DA83            	  5237:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EDE D880            	  5238:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5239: 
                            	  5240: *     LONG
00:00002EE0 2081            	  5241:                 move.l d1,(a0)
00:00002EE2 9090            	  5242:                 sub.l (a0),d0
00:00002EE4 4183            	  5243:                 move.l SR,d3
00:00002EE6 02830000000F    	  5244:                 andi.l #$0F,d3            * Isolate flags
00:00002EEC DA83            	  5245:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EEE D880            	  5246:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5247: 
                            	  5248: 
00:00002EF0 E299            	  5249:                 ror.l #$1,d1
00:00002EF2 51CEFFCC        	  5250:                 dbf d6,SUB_OUTER1
00:00002EF6 E29A            	  5251:                 ror.l #$1,d2
00:00002EF8 223C8167E123    	  5252:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002EFE 7C1E            	  5253:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F00 51CFFFBE        	  5254:                 dbf d7,SUB_OUTER1
                            	  5255: 
00:00002F04 0C841A8D14CF    	  5256:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:00002F0A 66FE            	  5257:                 bne.s *
00:00002F0C 0C8500004FC4    	  5258:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:00002F12 66FE            	  5259:                 bne.s *
                            	  5260: 
                            	  5261: 
                            	  5262: *  * Register to <EA>
00:00002F14 203C86738374    	  5263:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002F1A 223CFC55F2FE    	  5264:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002F20 243C86738374    	  5265:                 move.l #$86738374,d2
00:00002F26 7600            	  5266:                 moveq  #$00000000,d3
00:00002F28 7800            	  5267:                 moveq  #$00000000,d4       * Cumulative data results
00:00002F2A 7A00            	  5268:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002F2C 7C1E            	  5269:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F2E 7E1D            	  5270:                 move.l #$0000001D,d7       * Outer loop counter
00:00002F30 307C0100        	  5271:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5272: 
                            	  5273: 
                            	  5274: SUB_OUTER2:
                            	  5275: 
                            	  5276: *     BYTE
00:00002F34 2080            	  5277:                 move.l d0,(a0)
00:00002F36 9310            	  5278:                 sub.b d1,(a0)
00:00002F38 4183            	  5279:                 move.l SR,d3
00:00002F3A 02830000000C    	  5280:                 andi.l #$0C,d3            * Isolate flags
00:00002F40 DA83            	  5281:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F42 D890            	  5282:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5283: 
                            	  5284: *     WORD
00:00002F44 2080            	  5285:                 move.l d0,(a0)
00:00002F46 9350            	  5286:                 sub.w d1,(a0)
00:00002F48 4183            	  5287:                 move.l SR,d3
00:00002F4A 02830000001F    	  5288:                 andi.l #$1F,d3            * Isolate flags
00:00002F50 DA83            	  5289:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F52 D890            	  5290:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5291: 
                            	  5292: *     LONG
00:00002F54 2080            	  5293:                 move.l d0,(a0)
00:00002F56 9390            	  5294:                 sub.l d1,(a0)
00:00002F58 4183            	  5295:                 move.l SR,d3
00:00002F5A 02830000000F    	  5296:                 andi.l #$0F,d3            * Isolate flags
00:00002F60 DA83            	  5297:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F62 D890            	  5298:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5299: 
                            	  5300: 
00:00002F64 E299            	  5301:                 ror.l #$1,d1
00:00002F66 51CEFFCC        	  5302:                 dbf d6,SUB_OUTER2
00:00002F6A E29A            	  5303:                 ror.l #$1,d2
00:00002F6C 223C8167E123    	  5304:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F72 7C1E            	  5305:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F74 51CFFFBE        	  5306:                 dbf d7,SUB_OUTER2
                            	  5307: 
00:00002F78 0C8436D38BEC    	  5308:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00002F7E 66FE            	  5309:                 bne.s *
00:00002F80 0C85000045A5    	  5310:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:00002F86 66FE            	  5311:                 bne.s *
                            	  5312: 
                            	  5313: 
                            	  5314: 
                            	  5315: 
00:00002F88 4E75            	  5316:                 rts
                            	  5317: 
                            	  5318: 
                            	  5319: 
                            	  5320: *-----------------------------------------------------------
                            	  5321: *-----------------------------------------------------------
                            	  5322: * OPCODE : ADDA
                            	  5323: *-----------------------------------------------------------
                            	  5324: *-----------------------------------------------------------
                            	  5325: 
                            	  5326: op_ADDA:
                            	  5327: 
                            	  5328: *  * <EA> to Register
00:00002F8A 203CA5A5A5A5    	  5329:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002F90 223C8167E123    	  5330:                 move.l #$8167E123,d1
00:00002F96 243CA5A5A5A5    	  5331:                 move.l #$a5a5a5a5,d2
00:00002F9C 7600            	  5332:                 moveq  #$00000000,d3
00:00002F9E 7800            	  5333:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FA0 7A00            	  5334:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002FA2 7C1E            	  5335:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FA4 7E1E            	  5336:                 move.l #$0000001E,d7       * Outer loop counter
00:00002FA6 307C0100        	  5337:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002FAA 227C8167E123    	  5338:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5339: 
                            	  5340: ADDA_OUTER1:
                            	  5341: 
                            	  5342: *     WORD
                            	  5343: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5344: *                adda.w (a0),a1
                            	  5345: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5346: 
                            	  5347: *     LONG
00:00002FB0 2081            	  5348:                 move.l d1,(a0)
00:00002FB2 D3D0            	  5349:                 adda.l (a0),a1
00:00002FB4 D889            	  5350:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5351: 
00:00002FB6 E299            	  5352:                 ror.l #$1,d1
00:00002FB8 51CEFFF6        	  5353:                 dbf d6,ADDA_OUTER1
00:00002FBC E299            	  5354:                 ror.l #$1,d1
00:00002FBE 2241            	  5355:                 move.l d1,a1
00:00002FC0 223C8167E123    	  5356:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002FC6 7C1E            	  5357:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FC8 51CFFFE6        	  5358:                 dbf d7,ADDA_OUTER1
                            	  5359: 
00:00002FCC 0C84AC04DB4C    	  5360:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:00002FD2 66FE            	  5361:                 bne.s *
                            	  5362: 
                            	  5363: 
00:00002FD4 4E75            	  5364:                 rts
                            	  5365: 
                            	  5366: 
                            	  5367: *-----------------------------------------------------------
                            	  5368: *-----------------------------------------------------------
                            	  5369: * OPCODE : SUBA
                            	  5370: *-----------------------------------------------------------
                            	  5371: *-----------------------------------------------------------
                            	  5372: 
                            	  5373: op_SUBA:
                            	  5374: 
                            	  5375: *  * <EA> to Register
00:00002FD6 203CA5A5A5A5    	  5376:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002FDC 223C8167E123    	  5377:                 move.l #$8167E123,d1
00:00002FE2 243CA5A5A5A5    	  5378:                 move.l #$a5a5a5a5,d2
00:00002FE8 7600            	  5379:                 moveq  #$00000000,d3
00:00002FEA 7800            	  5380:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FEC 7A00            	  5381:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002FEE 7C1E            	  5382:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FF0 7E1E            	  5383:                 move.l #$0000001E,d7       * Outer loop counter
00:00002FF2 307C0100        	  5384:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002FF6 227C8167E123    	  5385:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5386: 
                            	  5387: SUBA_OUTER1:
                            	  5388: 
                            	  5389: *     WORD
                            	  5390: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5391: *                suba.w (a0),a1
                            	  5392: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5393: 
                            	  5394: *     LONG
00:00002FFC 2081            	  5395:                 move.l d1,(a0)
00:00002FFE 93D0            	  5396:                 suba.l (a0),a1
00:00003000 D889            	  5397:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5398: 
00:00003002 E299            	  5399:                 ror.l #$1,d1
00:00003004 51CEFFF6        	  5400:                 dbf d6,SUBA_OUTER1
00:00003008 E299            	  5401:                 ror.l #$1,d1
00:0000300A 2241            	  5402:                 move.l d1,a1
00:0000300C 223C8167E123    	  5403:                 move.l #$8167E123,d1       * Initial Data-Y
00:00003012 7C1E            	  5404:                 move.l #$0000001E,d6       * Inner loop counter
00:00003014 51CFFFE6        	  5405:                 dbf d7,SUBA_OUTER1
                            	  5406: 
00:00003018 0C84E1E36D7A    	  5407:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:0000301E 66FE            	  5408:                 bne.s *
                            	  5409: 
                            	  5410: 
00:00003020 4E75            	  5411:                 rts
                            	  5412: 
                            	  5413: 
                            	  5414: 
                            	  5415: *-----------------------------------------------------------
                            	  5416: *-----------------------------------------------------------
                            	  5417: * OPCODE : ADDX
                            	  5418: *-----------------------------------------------------------
                            	  5419: *-----------------------------------------------------------
                            	  5420: 
                            	  5421: op_ADDX:
                            	  5422: 
                            	  5423: 
                            	  5424: *  * Register to Register
00:00003022 203CA5A5A5A5    	  5425:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00003028 223C8167E123    	  5426:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:0000302E 243CA5A5A5A5    	  5427:                 move.l #$a5a5a5a5,d2
00:00003034 7600            	  5428:                 moveq  #$00000000,d3
00:00003036 7800            	  5429:                 moveq  #$00000000,d4       * Cumulative data results
00:00003038 7A00            	  5430:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000303A 7C1E            	  5431:                 move.l #$0000001E,d6       * Inner loop counter
00:0000303C 7E1E            	  5432:                 move.l #$0000001E,d7       * Outer loop counter
00:0000303E 307C0100        	  5433:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5434: 
                            	  5435: 
                            	  5436: ADDX_OUTER1:
                            	  5437: 
                            	  5438: *     BYTE
00:00003042 2002            	  5439:                 move.l d2,d0
00:00003044 D101            	  5440:                 addx.b d1,d0
00:00003046 4183            	  5441:                 move.l SR,d3
00:00003048 02830000001F    	  5442:                 andi.l #$1F,d3            * Isolate flags
00:0000304E DA83            	  5443:                 add.l d3,d5               * Copy flag results into accumulator
00:00003050 D880            	  5444:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5445: 
                            	  5446: *     WORD
00:00003052 2002            	  5447:                 move.l d2,d0
00:00003054 D141            	  5448:                 addx.w d1,d0
00:00003056 4183            	  5449:                 move.l SR,d3
00:00003058 02830000001F    	  5450:                 andi.l #$1F,d3            * Isolate flags
00:0000305E DA83            	  5451:                 add.l d3,d5               * Copy flag results into accumulator
00:00003060 D880            	  5452:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5453: 
                            	  5454: *     LONG
00:00003062 2002            	  5455:                 move.l d2,d0
00:00003064 D181            	  5456:                 addx.l d1,d0
00:00003066 4183            	  5457:                 move.l SR,d3
00:00003068 02830000001F    	  5458:                 andi.l #$1F,d3            * Isolate flags
00:0000306E DA83            	  5459:                 add.l d3,d5               * Copy flag results into accumulator
00:00003070 D880            	  5460:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5461: 
00:00003072 E299            	  5462:                 ror.l #$1,d1
00:00003074 51CEFFCC        	  5463:                 dbf d6,ADDX_OUTER1
00:00003078 E29A            	  5464:                 ror.l #$1,d2
00:0000307A 223C8167E123    	  5465:                 move.l #$8167E123,d1       * Initial Data-Y
00:00003080 7C1E            	  5466:                 move.l #$0000001E,d6       * Inner loop counter
00:00003082 51CFFFBE        	  5467:                 dbf d7,ADDX_OUTER1
                            	  5468: 
00:00003086 0C844E96A4D9    	  5469:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:0000308C 66FE            	  5470:                 bne.s *
00:0000308E 0C85000085CD    	  5471:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:00003094 66FE            	  5472:                 bne.s *
                            	  5473: 
                            	  5474: 
                            	  5475: 
                            	  5476: *     -(An),-(An)
                            	  5477: 
00:00003096 7000            	  5478:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00003098 7200            	  5479:                 moveq  #$00000000,d1
00:0000309A 7400            	  5480:                 moveq  #$00000000,d2
00:0000309C 307C0100        	  5481:                 move.l #$00000100,a0       * Address for Data-X
00:000030A0 327C0200        	  5482:                 move.l #$00000200,a1       * Address for Data-Y
00:000030A4 20FC11FF5580    	  5483:                 move.l #$11FF5580,(a0)+   * Populate test data
00:000030AA 20FC1111FFFF    	  5484:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:000030B0 20FC33333333    	  5485:                 move.l #$33333333,(a0)+   * Populate test data
00:000030B6 20FC44444444    	  5486:                 move.l #$44444444,(a0)+   * Populate test data
00:000030BC 22FC80FF337F    	  5487:                 move.l #$80FF337F,(a1)+   * Populate test data
00:000030C2 22FCFFFF1111    	  5488:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:000030C8 22FC33333333    	  5489:                 move.l #$33333333,(a1)+   * Populate test data
00:000030CE 22FC44444444    	  5490:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5491: 
                            	  5492: 
00:000030D4 7C0F            	  5493:                 move.l #$0000000F,d6       * Loop counter
                            	  5494: 
00:000030D6 D308            	  5495: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:000030D8 4183            	  5496:                 move.l SR,d3
00:000030DA 02830000000F    	  5497:                 andi.l #$0F,d3            * Isolate flags
00:000030E0 D083            	  5498:                 add.l d3,d0               * Copy flag results into accumulator
00:000030E2 D211            	  5499:                 add.b (a1),d1
00:000030E4 51CEFFF0        	  5500:                 dbf d6,ADDX_LOOP3
                            	  5501: 
                            	  5502: 
00:000030E8 307C0110        	  5503:                 move.l #$00000110,a0       * Address for Data-X
00:000030EC 327C0210        	  5504:                 move.l #$00000210,a1       * Address for Data-Y
00:000030F0 7C07            	  5505:                 moveq  #$00000007,d6       * Loop counter
                            	  5506: 
00:000030F2 D348            	  5507: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:000030F4 4183            	  5508:                 move.l SR,d3
00:000030F6 02830000000F    	  5509:                 andi.l #$0F,d3            * Isolate flags
00:000030FC D083            	  5510:                 add.l d3,d0               * Copy flag results into accumulator
00:000030FE D251            	  5511:                 add.w (a1),d1
00:00003100 51CEFFF0        	  5512:                 dbf d6,ADDX_LOOP4
                            	  5513: 
                            	  5514: 
00:00003104 307C0110        	  5515:                 move.l #$00000110,a0       * Address for Data-X
00:00003108 327C0210        	  5516:                 move.l #$00000210,a1       * Address for Data-Y
00:0000310C 7C03            	  5517:                 moveq  #$00000003,d6       * Loop counter
                            	  5518: 
00:0000310E D388            	  5519: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:00003110 4183            	  5520:                 move.l SR,d3
00:00003112 02830000000F    	  5521:                 andi.l #$0F,d3            * Isolate flags
00:00003118 D083            	  5522:                 add.l d3,d0               * Copy flag results into accumulator
00:0000311A D291            	  5523:                 add.l (a1),d1
00:0000311C 51CEFFF0        	  5524:                 dbf d6,ADDX_LOOP5
                            	  5525: 
                            	  5526: 
00:00003120 0C8000000095    	  5527:                 cmpi.l #$00000095,d0      * Check the flag results
00:00003126 66FE            	  5528:                 bne.s *
00:00003128 0C81C812A682    	  5529:                 cmpi.l #$C812A682,d1      * Check the data results
00:0000312E 66FE            	  5530:                 bne.s *
                            	  5531: 
00:00003130 4E75            	  5532:                 rts
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: *-----------------------------------------------------------
                            	  5538: *-----------------------------------------------------------
                            	  5539: * OPCODE : SUBX
                            	  5540: *-----------------------------------------------------------
                            	  5541: *-----------------------------------------------------------
                            	  5542: 
                            	  5543: op_SUBX:
                            	  5544: 
                            	  5545: 
                            	  5546: *  * Register to Register
00:00003132 203CA5A5A5A5    	  5547:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00003138 223C8167E123    	  5548:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:0000313E 243CA5A5A5A5    	  5549:                 move.l #$a5a5a5a5,d2
00:00003144 7600            	  5550:                 moveq  #$00000000,d3
00:00003146 7800            	  5551:                 moveq  #$00000000,d4       * Cumulative data results
00:00003148 7A00            	  5552:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000314A 7C1E            	  5553:                 move.l #$0000001E,d6       * Inner loop counter
00:0000314C 7E1E            	  5554:                 move.l #$0000001E,d7       * Outer loop counter
00:0000314E 307C0100        	  5555:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5556: 
                            	  5557: 
                            	  5558: SUBX_OUTER1:
                            	  5559: 
                            	  5560: *     BYTE
00:00003152 2002            	  5561:                 move.l d2,d0
00:00003154 9101            	  5562:                 subx.b d1,d0
00:00003156 4183            	  5563:                 move.l SR,d3
00:00003158 02830000001F    	  5564:                 andi.l #$1F,d3            * Isolate flags
00:0000315E DA83            	  5565:                 add.l d3,d5               * Copy flag results into accumulator
00:00003160 D880            	  5566:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5567: 
                            	  5568: *     WORD
00:00003162 2002            	  5569:                 move.l d2,d0
00:00003164 9141            	  5570:                 subx.w d1,d0
00:00003166 4183            	  5571:                 move.l SR,d3
00:00003168 02830000001F    	  5572:                 andi.l #$1F,d3            * Isolate flags
00:0000316E DA83            	  5573:                 add.l d3,d5               * Copy flag results into accumulator
00:00003170 D880            	  5574:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5575: 
                            	  5576: *     LONG
00:00003172 2002            	  5577:                 move.l d2,d0
00:00003174 9181            	  5578:                 subx.l d1,d0
00:00003176 4183            	  5579:                 move.l SR,d3
00:00003178 02830000001F    	  5580:                 andi.l #$1F,d3            * Isolate flags
00:0000317E DA83            	  5581:                 add.l d3,d5               * Copy flag results into accumulator
00:00003180 D880            	  5582:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5583: 
00:00003182 E299            	  5584:                 ror.l #$1,d1
00:00003184 51CEFFCC        	  5585:                 dbf d6,SUBX_OUTER1
00:00003188 E29A            	  5586:                 ror.l #$1,d2
00:0000318A 223C8167E123    	  5587:                 move.l #$8167E123,d1       * Initial Data-Y
00:00003190 7C1E            	  5588:                 move.l #$0000001E,d6       * Inner loop counter
00:00003192 51CFFFBE        	  5589:                 dbf d7,SUBX_OUTER1
                            	  5590: 
00:00003196 0C84FCAA913E    	  5591:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:0000319C 66FE            	  5592:                 bne.s *
00:0000319E 0C8500007E89    	  5593:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:000031A4 66FE            	  5594:                 bne.s *
                            	  5595: 
                            	  5596: 
                            	  5597: 
                            	  5598: *     -(An),-(An)
                            	  5599: 
00:000031A6 7000            	  5600:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:000031A8 7200            	  5601:                 moveq  #$00000000,d1
00:000031AA 7400            	  5602:                 moveq  #$00000000,d2
00:000031AC 307C0100        	  5603:                 move.l #$00000100,a0       * Address for Data-X
00:000031B0 327C0200        	  5604:                 move.l #$00000200,a1       * Address for Data-Y
00:000031B4 20FC11FF5580    	  5605:                 move.l #$11FF5580,(a0)+   * Populate test data
00:000031BA 20FC1111FFFF    	  5606:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:000031C0 20FC80FF337F    	  5607:                 move.l #$80FF337F,(a0)+   * Populate test data
00:000031C6 20FC44444444    	  5608:                 move.l #$44444444,(a0)+   * Populate test data
00:000031CC 22FC80FF337F    	  5609:                 move.l #$80FF337F,(a1)+   * Populate test data
00:000031D2 22FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:000031D8 22FC33333333    	  5611:                 move.l #$33333333,(a1)+   * Populate test data
00:000031DE 22FC5580EECC    	  5612:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5613: 
                            	  5614: 
00:000031E4 7C0F            	  5615:                 move.l #$0000000F,d6       * Loop counter
                            	  5616: 
00:000031E6 9308            	  5617: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:000031E8 4183            	  5618:                 move.l SR,d3
00:000031EA 02830000000F    	  5619:                 andi.l #$0F,d3            * Isolate flags
00:000031F0 D083            	  5620:                 add.l d3,d0               * Copy flag results into accumulator
00:000031F2 D211            	  5621:                 add.b (a1),d1
00:000031F4 51CEFFF0        	  5622:                 dbf d6,SUBX_LOOP3
                            	  5623: 
                            	  5624: 
00:000031F8 307C0110        	  5625:                 move.l #$00000110,a0       * Address for Data-X
00:000031FC 327C0210        	  5626:                 move.l #$00000210,a1       * Address for Data-Y
00:00003200 7C07            	  5627:                 moveq  #$00000007,d6       * Loop counter
                            	  5628: 
00:00003202 9348            	  5629: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:00003204 4183            	  5630:                 move.l SR,d3
00:00003206 02830000000F    	  5631:                 andi.l #$0F,d3            * Isolate flags
00:0000320C D083            	  5632:                 add.l d3,d0               * Copy flag results into accumulator
00:0000320E D251            	  5633:                 add.w (a1),d1
00:00003210 51CEFFF0        	  5634:                 dbf d6,SUBX_LOOP4
                            	  5635: 
                            	  5636: 
00:00003214 307C0110        	  5637:                 move.l #$00000110,a0       * Address for Data-X
00:00003218 327C0210        	  5638:                 move.l #$00000210,a1       * Address for Data-Y
00:0000321C 7C03            	  5639:                 moveq  #$00000003,d6       * Loop counter
                            	  5640: 
00:0000321E 9388            	  5641: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:00003220 4183            	  5642:                 move.l SR,d3
00:00003222 02830000000F    	  5643:                 andi.l #$0F,d3            * Isolate flags
00:00003228 D083            	  5644:                 add.l d3,d0               * Copy flag results into accumulator
00:0000322A D291            	  5645:                 add.l (a1),d1
00:0000322C 51CEFFF0        	  5646:                 dbf d6,SUBX_LOOP5
                            	  5647: 
                            	  5648: 
00:00003230 0C80000000B1    	  5649:                 cmpi.l #$000000B1,d0      * Check the flag results
00:00003236 66FE            	  5650:                 bne.s *
00:00003238 0C8162C6F417    	  5651:                 cmpi.l #$62C6F417,d1      * Check the data results
00:0000323E 66FE            	  5652:                 bne.s *
                            	  5653: 
00:00003240 4E75            	  5654:                 rts
                            	  5655: 
                            	  5656: 
                            	  5657: *-----------------------------------------------------------
                            	  5658: *-----------------------------------------------------------
                            	  5659: * OPCODE : MULU
                            	  5660: *-----------------------------------------------------------
                            	  5661: *-----------------------------------------------------------
                            	  5662: 
                            	  5663: op_MULU:
                            	  5664: 
00:00003242 203CFE805501    	  5665:                 move.l #$FE805501,d0        * Initial
00:00003248 223C5697EDB6    	  5666:                 move.l #$5697EDB6,d1        * Initial Y
00:0000324E 243CFE805501    	  5667:                 move.l #$FE805501,d2
00:00003254 7600            	  5668:                 moveq  #$00000000,d3
00:00003256 7800            	  5669:                 moveq  #$00000000,d4        * Cumulative data results
00:00003258 7A00            	  5670:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000325A 7C0E            	  5671:                 move.l #$0000000E,d6       * Inner loop counter
00:0000325C 7E0E            	  5672:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5673: 
                            	  5674: 
00:0000325E C0C1            	  5675: MULU_OUTER1:    mulu d1,d0
00:00003260 4183            	  5676:                 move.l SR,d3
00:00003262 02830000000C    	  5677:                 andi.l #$0C,d3            * Isolate flags
00:00003268 DA83            	  5678:                 add.l d3,d5               * Copy flag results into accumulator
00:0000326A D880            	  5679:                 add.l d0,d4               * Copy data results into data accumulator
00:0000326C E299            	  5680:                 ror.l #$1,d1
                            	  5681: 
00:0000326E 51CEFFEE        	  5682:                 dbf d6,MULU_OUTER1
00:00003272 E29A            	  5683:                 ror.l #$1,d2
00:00003274 2002            	  5684:                 move.l d2,d0
00:00003276 7C0E            	  5685:                 move.l #$0000000E,d6       * Inner loop counter
00:00003278 51CFFFE4        	  5686:                 dbf d7,MULU_OUTER1
                            	  5687: 
00:0000327C 0C8476FB988C    	  5688:                 cmpi.l #$76FB988C,d4      * Check the data results
00:00003282 66FE            	  5689:                 bne.s *
                            	  5690: 
00:00003284 0C8500000170    	  5691:                 cmpi.l #$00000170,d5      * Check the Flag results
00:0000328A 66FE            	  5692:                 bne.s *
                            	  5693: 
                            	  5694: 
00:0000328C 4E75            	  5695:                 rts
                            	  5696: 
                            	  5697: 
                            	  5698: *-----------------------------------------------------------
                            	  5699: *-----------------------------------------------------------
                            	  5700: * OPCODE : MULS
                            	  5701: *-----------------------------------------------------------
                            	  5702: *-----------------------------------------------------------
                            	  5703: 
                            	  5704: op_MULS:
                            	  5705: 
00:0000328E 203CFE805501    	  5706:                 move.l #$FE805501,d0        * Initial
00:00003294 223C5697EDB6    	  5707:                 move.l #$5697EDB6,d1        * Initial Y
00:0000329A 243CFE805501    	  5708:                 move.l #$FE805501,d2
00:000032A0 7600            	  5709:                 moveq  #$00000000,d3
00:000032A2 7800            	  5710:                 moveq  #$00000000,d4        * Cumulative data results
00:000032A4 7A00            	  5711:                 moveq  #$00000000,d5       * Cumulative flag results
00:000032A6 7C0E            	  5712:                 move.l #$0000000E,d6       * Inner loop counter
00:000032A8 7E0E            	  5713:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5714: 
                            	  5715: 
00:000032AA C1C1            	  5716: MULS_OUTER1:    muls d1,d0
00:000032AC 4183            	  5717:                 move.l SR,d3
00:000032AE 02830000000C    	  5718:                 andi.l #$0C,d3            * Isolate flags
00:000032B4 DA83            	  5719:                 add.l d3,d5               * Copy flag results into accumulator
00:000032B6 D880            	  5720:                 add.l d0,d4               * Copy data results into data accumulator
00:000032B8 E299            	  5721:                 ror.l #$1,d1
                            	  5722: 
00:000032BA 51CEFFEE        	  5723:                 dbf d6,MULS_OUTER1
00:000032BE E29A            	  5724:                 ror.l #$1,d2
00:000032C0 2002            	  5725:                 move.l d2,d0
00:000032C2 7C0E            	  5726:                 move.l #$0000000E,d6       * Inner loop counter
00:000032C4 51CFFFE4        	  5727:                 dbf d7,MULS_OUTER1
                            	  5728: 
00:000032C8 0C84D4E2988C    	  5729:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:000032CE 66FE            	  5730:                 bne.s *
                            	  5731: 
00:000032D0 0C85000003E0    	  5732:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:000032D6 66FE            	  5733:                 bne.s *
                            	  5734: 
                            	  5735: 
00:000032D8 4E75            	  5736:                 rts
                            	  5737: 
                            	  5738: 
                            	  5739: 
                            	  5740: *-----------------------------------------------------------
                            	  5741: *-----------------------------------------------------------
                            	  5742: * OPCODE : EXG
                            	  5743: *-----------------------------------------------------------
                            	  5744: *-----------------------------------------------------------
                            	  5745: 
                            	  5746: op_EXG:
00:000032DA 223CD1D1D1D1    	  5747:                 move.l #$d1d1d1d1,d1
00:000032E0 243CD2D2D2D2    	  5748:                 move.l #$d2d2d2d2,d2
00:000032E6 263CD3D3D3D3    	  5749:                 move.l #$d3d3d3d3,d3
00:000032EC 227CA1A1A1A1    	  5750:                 move.l #$a1a1a1a1,a1
00:000032F2 247CA2A2A2A2    	  5751:                 move.l #$a2a2a2a2,a2
00:000032F8 267CA3A3A3A3    	  5752:                 move.l #$a3a3a3a3,a3
                            	  5753: 
00:000032FE C342            	  5754:                 exg d1,d2
00:00003300 C34A            	  5755:                 exg a1,a2
00:00003302 C78B            	  5756:                 exg d3,a3
                            	  5757: 
00:00003304 0C81D2D2D2D2    	  5758:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:0000330A 66FE            	  5759:                 bne.s *
00:0000330C 0C82D1D1D1D1    	  5760:                 cmpi.l #$d1d1d1d1,d2
00:00003312 66FE            	  5761:                 bne.s *
00:00003314 0C83A3A3A3A3    	  5762:                 cmpi.l #$a3a3a3a3,d3
00:0000331A 66FE            	  5763:                 bne.s *
                            	  5764: 
00:0000331C 2209            	  5765:                 move.l a1,d1
00:0000331E 240A            	  5766:                 move.l a2,d2
00:00003320 260B            	  5767:                 move.l a3,d3
                            	  5768: 
00:00003322 0C81A2A2A2A2    	  5769:                 cmpi.l #$a2a2a2a2,d1
00:00003328 66FE            	  5770:                 bne.s *
00:0000332A 0C82A1A1A1A1    	  5771:                 cmpi.l #$a1a1a1a1,d2
00:00003330 66FE            	  5772:                 bne.s *
00:00003332 0C83D3D3D3D3    	  5773:                 cmpi.l #$d3d3d3d3,d3
00:00003338 66FE            	  5774:                 bne.s *
                            	  5775: 
00:0000333A 4E75            	  5776:                 rts
                            	  5777: 
                            	  5778: 
                            	  5779: *-----------------------------------------------------------
                            	  5780: *-----------------------------------------------------------
                            	  5781: * OPCODE : ROx
                            	  5782: *-----------------------------------------------------------
                            	  5783: *-----------------------------------------------------------
                            	  5784: 
                            	  5785: *     Subroutine to check and accumulate the flags
00:0000333C 4183            	  5786: ROx_FLAGS:      move.l SR,d3
00:0000333E 02830000000F    	  5787:                 andi.l #$0F,d3            * Isolate flags
00:00003344 DA83            	  5788:                 add.l d3,d5               * Copy flag results into accumulator
00:00003346 4E75            	  5789:                 rts
                            	  5790: 
                            	  5791: op_ROx:
                            	  5792: 
                            	  5793: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5794: 
                            	  5795: *        BYTE LEFT
00:00003348 203C80018FF1    	  5796:                 move.l #$80018FF1,d0
00:0000334E 7A00            	  5797:                 moveq  #$00000000,d5
00:00003350 7C11            	  5798:                 moveq  #$00000011,d6
                            	  5799: ROx_LOOP1:
00:00003352 ED38            	  5800:                 rol.b d6,d0
00:00003354 61E6            	  5801:                 bsr ROx_FLAGS
00:00003356 51CEFFFA        	  5802:                 dbf d6,ROx_LOOP1
00:0000335A 0C8080018FE3    	  5803:                 cmpi.l #$80018FE3,d0
00:00003360 66FE            	  5804:                 bne.s *
00:00003362 0C850000006B    	  5805:                 cmpi.l #$0000006B,d5
00:00003368 66FE            	  5806:                 bne.s *
                            	  5807: 
                            	  5808: *        BYTE RIGHT
00:0000336A 203C80018FF1    	  5809:                 move.l #$80018FF1,d0
00:00003370 7C12            	  5810:                 moveq  #$00000012,d6
                            	  5811: ROx_LOOP2:
00:00003372 EC38            	  5812:                 ror.b d6,d0
00:00003374 61C6            	  5813:                 bsr ROx_FLAGS
00:00003376 51CEFFFA        	  5814:                 dbf d6,ROx_LOOP2
00:0000337A 0C8080018F3E    	  5815:                 cmpi.l #$80018F3E,d0
00:00003380 66FE            	  5816:                 bne.s *
00:00003382 0C85000000C5    	  5817:                 cmpi.l #$000000C5,d5
00:00003388 66FE            	  5818:                 bne.s *
                            	  5819: 
                            	  5820: 
                            	  5821: *        WORD LEFT
00:0000338A 203C80018FF1    	  5822:                 move.l #$80018FF1,d0
00:00003390 7C13            	  5823:                 moveq  #$00000013,d6
                            	  5824: ROx_LOOP3:
00:00003392 ED78            	  5825:                 rol.w d6,d0
00:00003394 61A6            	  5826:                 bsr ROx_FLAGS
00:00003396 51CEFFFA        	  5827:                 dbf d6,ROx_LOOP3
00:0000339A 0C80800163FC    	  5828:                 cmpi.l #$800163FC,d0
00:000033A0 66FE            	  5829:                 bne.s *
00:000033A2 0C8500000131    	  5830:                 cmpi.l #$00000131,d5
00:000033A8 66FE            	  5831:                 bne.s *
                            	  5832: 
                            	  5833: *        WORD RIGHT
00:000033AA 203C80018FF1    	  5834:                 move.l #$80018FF1,d0
00:000033B0 7C1E            	  5835:                 move.l #$0000001E,d6
                            	  5836: ROx_LOOP4:
00:000033B2 EC78            	  5837:                 ror.w d6,d0
00:000033B4 6186            	  5838:                 bsr ROx_FLAGS
00:000033B6 51CEFFFA        	  5839:                 dbf d6,ROx_LOOP4
00:000033BA 0C808001C7F8    	  5840:                 cmpi.l #$8001C7F8,d0
00:000033C0 66FE            	  5841:                 bne.s *
00:000033C2 0C85000001DB    	  5842:                 cmpi.l #$000001DB,d5
00:000033C8 66FE            	  5843:                 bne.s *
                            	  5844: 
                            	  5845: 
                            	  5846: *        LONG LEFT
00:000033CA 203C80018FF1    	  5847:                 move.l #$80018FF1,d0
00:000033D0 7C15            	  5848:                 moveq  #$00000015,d6
                            	  5849: ROx_LOOP5:
00:000033D2 EDB8            	  5850:                 rol.l d6,d0
00:000033D4 6100FF66        	  5851:                 bsr ROx_FLAGS
00:000033D8 51CEFFF8        	  5852:                 dbf d6,ROx_LOOP5
00:000033DC 0C8000C7F8C0    	  5853:                 cmpi.l #$00C7F8C0,d0
00:000033E2 66FE            	  5854:                 bne.s *
00:000033E4 0C850000021A    	  5855:                 cmpi.l #$0000021A,d5
00:000033EA 66FE            	  5856:                 bne.s *
                            	  5857: 
                            	  5858: *        LONG RIGHT
00:000033EC 203C80018FF1    	  5859:                 move.l #$80018FF1,d0
00:000033F2 7C16            	  5860:                 moveq  #$00000016,d6
                            	  5861: ROx_LOOP6:
00:000033F4 ECB8            	  5862:                 ror.l d6,d0
00:000033F6 6100FF44        	  5863:                 bsr ROx_FLAGS
00:000033FA 51CEFFF8        	  5864:                 dbf d6,ROx_LOOP6
00:000033FE 0C80000C7F8C    	  5865:                 cmpi.l #$000C7F8C,d0
00:00003404 66FE            	  5866:                 bne.s *
00:00003406 0C8500000250    	  5867:                 cmpi.l #$00000250,d5
00:0000340C 66FE            	  5868:                 bne.s *
                            	  5869: 
                            	  5870: 
                            	  5871: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5872: 
00:0000340E 203C80018FF1    	  5873:                 move.l #$80018FF1,d0
00:00003414 7A00            	  5874:                 moveq  #$00000000,d5
                            	  5875: 
                            	  5876: *        BYTE LEFT
00:00003416 E318            	  5877:                 rol.b #1,d0
00:00003418 6100FF22        	  5878:                 bsr ROx_FLAGS
00:0000341C EB18            	  5879:                 rol.b #5,d0
00:0000341E 6100FF1C        	  5880:                 bsr ROx_FLAGS
00:00003422 EF18            	  5881:                 rol.b #7,d0
00:00003424 6100FF16        	  5882:                 bsr ROx_FLAGS
00:00003428 E118            	  5883:                 rol.b #8,d0
00:0000342A 6100FF10        	  5884:                 bsr ROx_FLAGS
00:0000342E 0C8080018F3E    	  5885:                 cmpi.l #$80018F3E,d0
00:00003434 66FE            	  5886:                 bne.s *
00:00003436 0C8500000009    	  5887:                 cmpi.l #$00000009,d5
00:0000343C 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        BYTE RIGHT
00:0000343E E218            	  5891:                 ror.b #1,d0
00:00003440 6100FEFA        	  5892:                 bsr ROx_FLAGS
00:00003444 EA18            	  5893:                 ror.b #5,d0
00:00003446 6100FEF4        	  5894:                 bsr ROx_FLAGS
00:0000344A EE18            	  5895:                 ror.b #7,d0
00:0000344C 6100FEEE        	  5896:                 bsr ROx_FLAGS
00:00003450 E018            	  5897:                 ror.b #8,d0
00:00003452 6100FEE8        	  5898:                 bsr ROx_FLAGS
00:00003456 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
00:0000345C 66FE            	  5900:                 bne.s *
00:0000345E 0C8500000024    	  5901:                 cmpi.l #$00000024,d5
00:00003464 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        WORD LEFT
00:00003466 E358            	  5905:                 rol.w #1,d0
00:00003468 6100FED2        	  5906:                 bsr ROx_FLAGS
00:0000346C EB58            	  5907:                 rol.w #5,d0
00:0000346E 6100FECC        	  5908:                 bsr ROx_FLAGS
00:00003472 EF58            	  5909:                 rol.w #7,d0
00:00003474 6100FEC6        	  5910:                 bsr ROx_FLAGS
00:00003478 E158            	  5911:                 rol.w #8,d0
00:0000347A 6100FEC0        	  5912:                 bsr ROx_FLAGS
00:0000347E 0C808001FE31    	  5913:                 cmpi.l #$8001FE31,d0
00:00003484 66FE            	  5914:                 bne.s *
00:00003486 0C8500000037    	  5915:                 cmpi.l #$00000037,d5
00:0000348C 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        WORD RIGHT
00:0000348E E258            	  5919:                 ror.w #1,d0
00:00003490 6100FEAA        	  5920:                 bsr ROx_FLAGS
00:00003494 EA58            	  5921:                 ror.w #5,d0
00:00003496 6100FEA4        	  5922:                 bsr ROx_FLAGS
00:0000349A EE58            	  5923:                 ror.w #7,d0
00:0000349C 6100FE9E        	  5924:                 bsr ROx_FLAGS
00:000034A0 E058            	  5925:                 ror.w #8,d0
00:000034A2 6100FE98        	  5926:                 bsr ROx_FLAGS
00:000034A6 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
00:000034AC 66FE            	  5928:                 bne.s *
00:000034AE 0C850000005B    	  5929:                 cmpi.l #$0000005B,d5
00:000034B4 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: *        LONG LEFT
00:000034B6 E398            	  5933:                 rol.l #1,d0
00:000034B8 6100FE82        	  5934:                 bsr ROx_FLAGS
00:000034BC EB98            	  5935:                 rol.l #5,d0
00:000034BE 6100FE7C        	  5936:                 bsr ROx_FLAGS
00:000034C2 EF98            	  5937:                 rol.l #7,d0
00:000034C4 6100FE76        	  5938:                 bsr ROx_FLAGS
00:000034C8 E198            	  5939:                 rol.l #8,d0
00:000034CA 6100FE70        	  5940:                 bsr ROx_FLAGS
00:000034CE 0C80FE300031    	  5941:                 cmpi.l #$FE300031,d0
00:000034D4 66FE            	  5942:                 bne.s *
00:000034D6 0C8500000065    	  5943:                 cmpi.l #$00000065,d5
00:000034DC 66FE            	  5944:                 bne.s *
                            	  5945: 
                            	  5946: *        LONG RIGHT
00:000034DE E298            	  5947:                 ror.l #1,d0
00:000034E0 6100FE5A        	  5948:                 bsr ROx_FLAGS
00:000034E4 EA98            	  5949:                 ror.l #5,d0
00:000034E6 6100FE54        	  5950:                 bsr ROx_FLAGS
00:000034EA EE98            	  5951:                 ror.l #7,d0
00:000034EC 6100FE4E        	  5952:                 bsr ROx_FLAGS
00:000034F0 E098            	  5953:                 ror.l #8,d0
00:000034F2 6100FE48        	  5954:                 bsr ROx_FLAGS
00:000034F6 0C8080018FF1    	  5955:                 cmpi.l #$80018FF1,d0
00:000034FC 66FE            	  5956:                 bne.s *
00:000034FE 0C8500000080    	  5957:                 cmpi.l #$00000080,d5
00:00003504 66FE            	  5958:                 bne.s *
                            	  5959: 
                            	  5960: 
                            	  5961: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5962: 
00:00003506 7A00            	  5963:                 moveq  #$00000000,d5
00:00003508 307C0100        	  5964:                 move.l #$00000100,a0
00:0000350C 30BC8FF1        	  5965:                 move.w #$8FF1,(a0)
                            	  5966: 
                            	  5967: *        WORD LEFT
00:00003510 E7D0            	  5968:                 rol (a0)
00:00003512 6100FE28        	  5969:                 bsr ROx_FLAGS
00:00003516 E7D0            	  5970:                 rol (a0)
00:00003518 6100FE22        	  5971:                 bsr ROx_FLAGS
00:0000351C E7D0            	  5972:                 rol (a0)
00:0000351E 6100FE1C        	  5973:                 bsr ROx_FLAGS
00:00003522 E7D0            	  5974:                 rol (a0)
00:00003524 6100FE16        	  5975:                 bsr ROx_FLAGS
00:00003528 3010            	  5976:                 move.w (a0),d0
00:0000352A 0C808001FF18    	  5977:                 cmpi.l #$8001FF18,d0
00:00003530 66FE            	  5978:                 bne.s *
00:00003532 0C8500000009    	  5979:                 cmpi.l #$00000009,d5
00:00003538 66FE            	  5980:                 bne.s *
                            	  5981: 
                            	  5982: *        WORD RIGHT
00:0000353A E6D0            	  5983:                 ror (a0)
00:0000353C 6100FDFE        	  5984:                 bsr ROx_FLAGS
00:00003540 E6D0            	  5985:                 ror (a0)
00:00003542 6100FDF8        	  5986:                 bsr ROx_FLAGS
00:00003546 E6D0            	  5987:                 ror (a0)
00:00003548 6100FDF2        	  5988:                 bsr ROx_FLAGS
00:0000354C E6D0            	  5989:                 ror (a0)
00:0000354E 6100FDEC        	  5990:                 bsr ROx_FLAGS
00:00003552 E6D0            	  5991:                 ror (a0)
00:00003554 6100FDE6        	  5992:                 bsr ROx_FLAGS
00:00003558 E6D0            	  5993:                 ror (a0)
00:0000355A 6100FDE0        	  5994:                 bsr ROx_FLAGS
00:0000355E 3010            	  5995:                 move.w (a0),d0
00:00003560 0C80800163FC    	  5996:                 cmpi.l #$800163FC,d0
00:00003566 66FE            	  5997:                 bne.s *
00:00003568 0C850000001B    	  5998:                 cmpi.l #$0000001B,d5
00:0000356E 66FE            	  5999:                 bne.s *
                            	  6000: 
00:00003570 4E75            	  6001:                 rts
                            	  6002: 
                            	  6003: 
                            	  6004: 
                            	  6005: *-----------------------------------------------------------
                            	  6006: *-----------------------------------------------------------
                            	  6007: * OPCODE : ROXx
                            	  6008: *-----------------------------------------------------------
                            	  6009: *-----------------------------------------------------------
                            	  6010: 
                            	  6011: *     Subroutine to check and accumulate the flags
00:00003572 4183            	  6012: ROXx_FLAGS:     move.l SR,d3
00:00003574 02830000000F    	  6013:                 andi.l #$0F,d3            * Isolate flags
00:0000357A DA83            	  6014:                 add.l d3,d5               * Copy flag results into accumulator
00:0000357C 4E75            	  6015:                 rts
                            	  6016: 
                            	  6017: op_ROXx:
                            	  6018: 
                            	  6019: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6020: 
                            	  6021: *        BYTE LEFT
00:0000357E 203C80018FF1    	  6022:                 move.l #$80018FF1,d0
00:00003584 7A00            	  6023:                 moveq  #$00000000,d5
00:00003586 7C11            	  6024:                 moveq  #$00000011,d6
                            	  6025: ROXx_LOOP1:
00:00003588 ED30            	  6026:                 roxl.b d6,d0
00:0000358A 61E6            	  6027:                 bsr ROXx_FLAGS
00:0000358C 51CEFFFA        	  6028:                 dbf d6,ROXx_LOOP1
00:00003590 0C8080018FD0    	  6029:                 cmpi.l #$80018FD0,d0
00:00003596 66FE            	  6030:                 bne.s *
00:00003598 0C8500000042    	  6031:                 cmpi.l #$00000042,d5
00:0000359E 66FE            	  6032:                 bne.s *
                            	  6033: 
                            	  6034: *        BYTE RIGHT
00:000035A0 203C80018FF1    	  6035:                 move.l #$80018FF1,d0
00:000035A6 7C12            	  6036:                 moveq  #$00000012,d6
                            	  6037: ROXx_LOOP2:
00:000035A8 EC30            	  6038:                 roxr.b d6,d0
00:000035AA 61C6            	  6039:                 bsr ROXx_FLAGS
00:000035AC 51CEFFFA        	  6040:                 dbf d6,ROXx_LOOP2
00:000035B0 0C8080018F51    	  6041:                 cmpi.l #$80018F51,d0
00:000035B6 66FE            	  6042:                 bne.s *
00:000035B8 0C850000009C    	  6043:                 cmpi.l #$0000009C,d5
00:000035BE 66FE            	  6044:                 bne.s *
                            	  6045: 
                            	  6046: 
                            	  6047: *        WORD LEFT
00:000035C0 203C80018FF1    	  6048:                 move.l #$80018FF1,d0
00:000035C6 7C13            	  6049:                 moveq  #$00000013,d6
                            	  6050: ROXx_LOOP3:
00:000035C8 ED70            	  6051:                 roxl.w d6,d0
00:000035CA 61A6            	  6052:                 bsr ROXx_FLAGS
00:000035CC 51CEFFFA        	  6053:                 dbf d6,ROXx_LOOP3
00:000035D0 0C8080013980    	  6054:                 cmpi.l #$80013980,d0
00:000035D6 66FE            	  6055:                 bne.s *
00:000035D8 0C85000000C9    	  6056:                 cmpi.l #$000000C9,d5
00:000035DE 66FE            	  6057:                 bne.s *
                            	  6058: 
                            	  6059: *        WORD RIGHT
00:000035E0 203C80018FF1    	  6060:                 move.l #$80018FF1,d0
00:000035E6 7C1E            	  6061:                 move.l #$0000001E,d6
                            	  6062: ROXx_LOOP4:
00:000035E8 EC70            	  6063:                 roxr.w d6,d0
00:000035EA 6186            	  6064:                 bsr ROXx_FLAGS
00:000035EC 51CEFFFA        	  6065:                 dbf d6,ROXx_LOOP4
00:000035F0 0C8080010A1D    	  6066:                 cmpi.l #$80010A1D,d0
00:000035F6 66FE            	  6067:                 bne.s *
00:000035F8 0C850000014D    	  6068:                 cmpi.l #$0000014D,d5
00:000035FE 66FE            	  6069:                 bne.s *
                            	  6070: 
                            	  6071: 
                            	  6072: *        LONG LEFT
00:00003600 203C80018FF1    	  6073:                 move.l #$80018FF1,d0
00:00003606 7C15            	  6074:                 moveq  #$00000015,d6
                            	  6075: ROXx_LOOP5:
00:00003608 EDB0            	  6076:                 roxl.l d6,d0
00:0000360A 6100FF66        	  6077:                 bsr ROXx_FLAGS
00:0000360E 51CEFFF8        	  6078:                 dbf d6,ROXx_LOOP5
00:00003612 0C80800185D0    	  6079:                 cmpi.l #$800185D0,d0
00:00003618 66FE            	  6080:                 bne.s *
00:0000361A 0C85000001A1    	  6081:                 cmpi.l #$000001A1,d5
00:00003620 66FE            	  6082:                 bne.s *
                            	  6083: 
                            	  6084: *        LONG RIGHT
00:00003622 203C80018FF1    	  6085:                 move.l #$80018FF1,d0
00:00003628 7C16            	  6086:                 moveq  #$00000016,d6
                            	  6087: ROXx_LOOP6:
00:0000362A ECB0            	  6088:                 roxr.l d6,d0
00:0000362C 6100FF44        	  6089:                 bsr ROXx_FLAGS
00:00003630 51CEFFF8        	  6090:                 dbf d6,ROXx_LOOP6
00:00003634 0C80082D8200    	  6091:                 cmpi.l #$082D8200,d0
00:0000363A 66FE            	  6092:                 bne.s *
00:0000363C 0C85000001DE    	  6093:                 cmpi.l #$000001DE,d5
00:00003642 66FE            	  6094:                 bne.s *
                            	  6095: 
                            	  6096: 
                            	  6097: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6098: 
00:00003644 203C80018FF1    	  6099:                 move.l #$80018FF1,d0
00:0000364A 7A00            	  6100:                 moveq  #$00000000,d5
                            	  6101: 
                            	  6102: *        BYTE LEFT
00:0000364C E310            	  6103:                 roxl.b #1,d0
00:0000364E 6100FF22        	  6104:                 bsr ROXx_FLAGS
00:00003652 EB10            	  6105:                 roxl.b #5,d0
00:00003654 6100FF1C        	  6106:                 bsr ROXx_FLAGS
00:00003658 EF10            	  6107:                 roxl.b #7,d0
00:0000365A 6100FF16        	  6108:                 bsr ROXx_FLAGS
00:0000365E E110            	  6109:                 roxl.b #8,d0
00:00003660 6100FF10        	  6110:                 bsr ROXx_FLAGS
00:00003664 0C8080018F09    	  6111:                 cmpi.l #$80018F09,d0
00:0000366A 66FE            	  6112:                 bne.s *
00:0000366C 0C850000000B    	  6113:                 cmpi.l #$0000000B,d5
00:00003672 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        BYTE RIGHT
00:00003674 E210            	  6117:                 roxr.b #1,d0
00:00003676 6100FEFA        	  6118:                 bsr ROXx_FLAGS
00:0000367A EA10            	  6119:                 roxr.b #5,d0
00:0000367C 6100FEF4        	  6120:                 bsr ROXx_FLAGS
00:00003680 EE10            	  6121:                 roxr.b #7,d0
00:00003682 6100FEEE        	  6122:                 bsr ROXx_FLAGS
00:00003686 E010            	  6123:                 roxr.b #8,d0
00:00003688 6100FEE8        	  6124:                 bsr ROXx_FLAGS
00:0000368C 0C8080018F00    	  6125:                 cmpi.l #$80018F00,d0
00:00003692 66FE            	  6126:                 bne.s *
00:00003694 0C8500000015    	  6127:                 cmpi.l #$00000015,d5
00:0000369A 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        WORD LEFT
00:0000369C E350            	  6131:                 roxl.w #1,d0
00:0000369E 6100FED2        	  6132:                 bsr ROXx_FLAGS
00:000036A2 EB50            	  6133:                 roxl.w #5,d0
00:000036A4 6100FECC        	  6134:                 bsr ROXx_FLAGS
00:000036A8 EF50            	  6135:                 roxl.w #7,d0
00:000036AA 6100FEC6        	  6136:                 bsr ROXx_FLAGS
00:000036AE E150            	  6137:                 roxl.w #8,d0
00:000036B0 6100FEC0        	  6138:                 bsr ROXx_FLAGS
00:000036B4 0C808001B000    	  6139:                 cmpi.l #$8001B000,d0
00:000036BA 66FE            	  6140:                 bne.s *
00:000036BC 0C8500000027    	  6141:                 cmpi.l #$00000027,d5
00:000036C2 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        WORD RIGHT
00:000036C4 E250            	  6145:                 roxr.w #1,d0
00:000036C6 6100FEAA        	  6146:                 bsr ROXx_FLAGS
00:000036CA EA50            	  6147:                 roxr.w #5,d0
00:000036CC 6100FEA4        	  6148:                 bsr ROXx_FLAGS
00:000036D0 EE50            	  6149:                 roxr.w #7,d0
00:000036D2 6100FE9E        	  6150:                 bsr ROXx_FLAGS
00:000036D6 E050            	  6151:                 roxr.w #8,d0
00:000036D8 6100FE98        	  6152:                 bsr ROXx_FLAGS
00:000036DC 0C8080010A00    	  6153:                 cmpi.l #$80010A00,d0
00:000036E2 66FE            	  6154:                 bne.s *
00:000036E4 0C8500000028    	  6155:                 cmpi.l #$00000028,d5
00:000036EA 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: *        LONG LEFT
00:000036EC E390            	  6159:                 roxl.l #1,d0
00:000036EE 6100FE82        	  6160:                 bsr ROXx_FLAGS
00:000036F2 EB90            	  6161:                 roxl.l #5,d0
00:000036F4 6100FE7C        	  6162:                 bsr ROXx_FLAGS
00:000036F8 EF90            	  6163:                 roxl.l #7,d0
00:000036FA 6100FE76        	  6164:                 bsr ROXx_FLAGS
00:000036FE E190            	  6165:                 roxl.l #8,d0
00:00003700 6100FE70        	  6166:                 bsr ROXx_FLAGS
00:00003704 0C8040000010    	  6167:                 cmpi.l #$40000010,d0
00:0000370A 66FE            	  6168:                 bne.s *
00:0000370C 0C850000002A    	  6169:                 cmpi.l #$0000002A,d5
00:00003712 66FE            	  6170:                 bne.s *
                            	  6171: 
                            	  6172: *        LONG RIGHT
00:00003714 E290            	  6173:                 roxr.l #1,d0
00:00003716 6100FE5A        	  6174:                 bsr ROXx_FLAGS
00:0000371A EA90            	  6175:                 roxr.l #5,d0
00:0000371C 6100FE54        	  6176:                 bsr ROXx_FLAGS
00:00003720 EE90            	  6177:                 roxr.l #7,d0
00:00003722 6100FE4E        	  6178:                 bsr ROXx_FLAGS
00:00003726 E090            	  6179:                 roxr.l #8,d0
00:00003728 6100FE48        	  6180:                 bsr ROXx_FLAGS
00:0000372C 0C8000010200    	  6181:                 cmpi.l #$00010200,d0
00:00003732 66FE            	  6182:                 bne.s *
00:00003734 0C8500000032    	  6183:                 cmpi.l #$00000032,d5
00:0000373A 66FE            	  6184:                 bne.s *
                            	  6185: 
                            	  6186: 
                            	  6187: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6188: 
00:0000373C 7A00            	  6189:                 moveq  #$00000000,d5
00:0000373E 307C0100        	  6190:                 move.l #$00000100,a0
00:00003742 30BC8FF1        	  6191:                 move.w #$8FF1,(a0)
                            	  6192: 
                            	  6193: *        WORD LEFT
00:00003746 E5D0            	  6194:                 roxl (a0)
00:00003748 6100FE28        	  6195:                 bsr ROXx_FLAGS
00:0000374C E5D0            	  6196:                 roxl (a0)
00:0000374E 6100FE22        	  6197:                 bsr ROXx_FLAGS
00:00003752 E5D0            	  6198:                 roxl (a0)
00:00003754 6100FE1C        	  6199:                 bsr ROXx_FLAGS
00:00003758 E5D0            	  6200:                 roxl (a0)
00:0000375A 6100FE16        	  6201:                 bsr ROXx_FLAGS
00:0000375E 3010            	  6202:                 move.w (a0),d0
00:00003760 0C800001FF10    	  6203:                 cmpi.l #$0001FF10,d0
00:00003766 66FE            	  6204:                 bne.s *
00:00003768 0C8500000009    	  6205:                 cmpi.l #$00000009,d5
00:0000376E 66FE            	  6206:                 bne.s *
                            	  6207: 
                            	  6208: *        WORD RIGHT
00:00003770 E4D0            	  6209:                 roxr (a0)
00:00003772 6100FDFE        	  6210:                 bsr ROXx_FLAGS
00:00003776 E4D0            	  6211:                 roxr (a0)
00:00003778 6100FDF8        	  6212:                 bsr ROXx_FLAGS
00:0000377C E4D0            	  6213:                 roxr (a0)
00:0000377E 6100FDF2        	  6214:                 bsr ROXx_FLAGS
00:00003782 E4D0            	  6215:                 roxr (a0)
00:00003784 6100FDEC        	  6216:                 bsr ROXx_FLAGS
00:00003788 E4D0            	  6217:                 roxr (a0)
00:0000378A 6100FDE6        	  6218:                 bsr ROXx_FLAGS
00:0000378E E4D0            	  6219:                 roxr (a0)
00:00003790 6100FDE0        	  6220:                 bsr ROXx_FLAGS
00:00003794 3010            	  6221:                 move.w (a0),d0
00:00003796 0C80000103FC    	  6222:                 cmpi.l #$000103FC,d0
00:0000379C 66FE            	  6223:                 bne.s *
00:0000379E 0C850000000A    	  6224:                 cmpi.l #$0000000A,d5
00:000037A4 66FE            	  6225:                 bne.s *
                            	  6226: 
00:000037A6 4E75            	  6227:                 rts
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: *-----------------------------------------------------------
                            	  6233: *-----------------------------------------------------------
                            	  6234: * OPCODE : SHIFTS
                            	  6235: *-----------------------------------------------------------
                            	  6236: *-----------------------------------------------------------
                            	  6237: 
                            	  6238: *     Subroutine to check and accumulate the flags
00:000037A8 4183            	  6239: SHIFTS_FLAGS:   move.l SR,d3
00:000037AA 02830000000F    	  6240:                 andi.l #$0F,d3            * Isolate flags
00:000037B0 DA83            	  6241:                 add.l d3,d5               * Copy flag results into accumulator
00:000037B2 4E75            	  6242:                 rts
                            	  6243: 
                            	  6244: op_SHIFTS:
                            	  6245: 
                            	  6246: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6247: 
                            	  6248: *        BYTE LEFT
00:000037B4 203C80018F81    	  6249:                 move.l #$80018F81,d0
00:000037BA 7A00            	  6250:                 moveq  #$00000000,d5
00:000037BC 7C02            	  6251:                 moveq  #$00000002,d6
                            	  6252: SHIFTS_LOOP1:
00:000037BE ED20            	  6253:                 asl.b d6,d0
00:000037C0 61E6            	  6254:                 bsr SHIFTS_FLAGS
00:000037C2 51CEFFFA        	  6255:                 dbf d6,SHIFTS_LOOP1
00:000037C6 0C8080018F08    	  6256:                 cmpi.l #$80018F08,d0
00:000037CC 66FE            	  6257:                 bne.s *
00:000037CE 0C8500000002    	  6258:                 cmpi.l #$00000002,d5
00:000037D4 66FE            	  6259:                 bne.s *
                            	  6260: 
                            	  6261: *        BYTE RIGHT
00:000037D6 203C80018F81    	  6262:                 move.l #$80018F81,d0
00:000037DC 7C02            	  6263:                 moveq  #$00000002,d6
                            	  6264: SHIFTS_LOOP2:
00:000037DE EC20            	  6265:                 asr.b d6,d0
00:000037E0 61C6            	  6266:                 bsr SHIFTS_FLAGS
00:000037E2 51CEFFFA        	  6267:                 dbf d6,SHIFTS_LOOP2
00:000037E6 0C8080018FF0    	  6268:                 cmpi.l #$80018FF0,d0
00:000037EC 66FE            	  6269:                 bne.s *
00:000037EE 0C850000001A    	  6270:                 cmpi.l #$0000001A,d5
00:000037F4 66FE            	  6271:                 bne.s *
                            	  6272: 
                            	  6273: 
                            	  6274: *        WORD LEFT
00:000037F6 203C80018FF1    	  6275:                 move.l #$80018FF1,d0
00:000037FC 7C02            	  6276:                 moveq  #$00000002,d6
                            	  6277: SHIFTS_LOOP3:
00:000037FE ED60            	  6278:                 asl.w d6,d0
00:00003800 61A6            	  6279:                 bsr SHIFTS_FLAGS
00:00003802 51CEFFFA        	  6280:                 dbf d6,SHIFTS_LOOP3
00:00003806 0C8080017F88    	  6281:                 cmpi.l #$80017F88,d0
00:0000380C 66FE            	  6282:                 bne.s *
00:0000380E 0C850000001C    	  6283:                 cmpi.l #$0000001C,d5
00:00003814 66FE            	  6284:                 bne.s *
                            	  6285: 
                            	  6286: *        WORD RIGHT
00:00003816 203C80018FF1    	  6287:                 move.l #$80018FF1,d0
00:0000381C 7C02            	  6288:                 moveq  #$00000002,d6
                            	  6289: SHIFTS_LOOP4:
00:0000381E EC60            	  6290:                 asr.w d6,d0
00:00003820 6186            	  6291:                 bsr SHIFTS_FLAGS
00:00003822 51CEFFFA        	  6292:                 dbf d6,SHIFTS_LOOP4
00:00003826 0C808001F1FE    	  6293:                 cmpi.l #$8001F1FE,d0
00:0000382C 66FE            	  6294:                 bne.s *
00:0000382E 0C8500000034    	  6295:                 cmpi.l #$00000034,d5
00:00003834 66FE            	  6296:                 bne.s *
                            	  6297: 
                            	  6298: 
                            	  6299: *        LONG LEFT
00:00003836 203C80018FF1    	  6300:                 move.l #$80018FF1,d0
00:0000383C 7C02            	  6301:                 moveq  #$00000002,d6
                            	  6302: SHIFTS_LOOP5:
00:0000383E EDA0            	  6303:                 asl.l d6,d0
00:00003840 6100FF66        	  6304:                 bsr SHIFTS_FLAGS
00:00003844 51CEFFF8        	  6305:                 dbf d6,SHIFTS_LOOP5
00:00003848 0C80000C7F88    	  6306:                 cmpi.l #$000C7F88,d0
00:0000384E 66FE            	  6307:                 bne.s *
00:00003850 0C8500000036    	  6308:                 cmpi.l #$00000036,d5
00:00003856 66FE            	  6309:                 bne.s *
                            	  6310: 
                            	  6311: *        LONG RIGHT
00:00003858 203C80018FF1    	  6312:                 move.l #$80018FF1,d0
00:0000385E 7C02            	  6313:                 moveq  #$00000002,d6
                            	  6314: SHIFTS_LOOP6:
00:00003860 ECA0            	  6315:                 asr.l d6,d0
00:00003862 6100FF44        	  6316:                 bsr SHIFTS_FLAGS
00:00003866 51CEFFF8        	  6317:                 dbf d6,SHIFTS_LOOP6
00:0000386A 0C80F00031FE    	  6318:                 cmpi.l #$F00031FE,d0
00:00003870 66FE            	  6319:                 bne.s *
00:00003872 0C850000004E    	  6320:                 cmpi.l #$0000004E,d5
00:00003878 66FE            	  6321:                 bne.s *
                            	  6322: 
                            	  6323: 
                            	  6324: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6325: 
00:0000387A 203C80018FF1    	  6326:                 move.l #$80018FF1,d0
00:00003880 7A00            	  6327:                 moveq  #$00000000,d5
                            	  6328: 
                            	  6329: *        BYTE LEFT
00:00003882 D000            	  6330:                 asl.b #1,d0
00:00003884 6100FF22        	  6331:                 bsr SHIFTS_FLAGS
00:00003888 E500            	  6332:                 asl.b #2,d0
00:0000388A 6100FF1C        	  6333:                 bsr SHIFTS_FLAGS
00:0000388E D000            	  6334:                 asl.b #1,d0
00:00003890 6100FF16        	  6335:                 bsr SHIFTS_FLAGS
00:00003894 E700            	  6336:                 asl.b #3,d0
00:00003896 6100FF10        	  6337:                 bsr SHIFTS_FLAGS
00:0000389A 0C8080018F80    	  6338:                 cmpi.l #$80018F80,d0
00:000038A0 66FE            	  6339:                 bne.s *
00:000038A2 0C850000001F    	  6340:                 cmpi.l #$0000001F,d5
00:000038A8 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        BYTE RIGHT
00:000038AA E200            	  6344:                 asr.b #1,d0
00:000038AC 6100FEFA        	  6345:                 bsr SHIFTS_FLAGS
00:000038B0 E400            	  6346:                 asr.b #2,d0
00:000038B2 6100FEF4        	  6347:                 bsr SHIFTS_FLAGS
00:000038B6 E600            	  6348:                 asr.b #3,d0
00:000038B8 6100FEEE        	  6349:                 bsr SHIFTS_FLAGS
00:000038BC E200            	  6350:                 asr.b #1,d0
00:000038BE 6100FEE8        	  6351:                 bsr SHIFTS_FLAGS
00:000038C2 0C8080018FFF    	  6352:                 cmpi.l #$80018FFF,d0
00:000038C8 66FE            	  6353:                 bne.s *
00:000038CA 0C850000003F    	  6354:                 cmpi.l #$0000003F,d5
00:000038D0 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        WORD LEFT
00:000038D2 D040            	  6358:                 asl.w #1,d0
00:000038D4 6100FED2        	  6359:                 bsr SHIFTS_FLAGS
00:000038D8 E540            	  6360:                 asl.w #2,d0
00:000038DA 6100FECC        	  6361:                 bsr SHIFTS_FLAGS
00:000038DE E740            	  6362:                 asl.w #3,d0
00:000038E0 6100FEC6        	  6363:                 bsr SHIFTS_FLAGS
00:000038E4 EB40            	  6364:                 asl.w #5,d0
00:000038E6 6100FEC0        	  6365:                 bsr SHIFTS_FLAGS
00:000038EA 0C808001F800    	  6366:                 cmpi.l #$8001F800,d0
00:000038F0 66FE            	  6367:                 bne.s *
00:000038F2 0C8500000056    	  6368:                 cmpi.l #$00000056,d5
00:000038F8 66FE            	  6369:                 bne.s *
                            	  6370: 
                            	  6371: *        WORD RIGHT
00:000038FA EA40            	  6372:                 asr.w #5,d0
00:000038FC 6100FEAA        	  6373:                 bsr SHIFTS_FLAGS
00:00003900 E240            	  6374:                 asr.w #1,d0
00:00003902 6100FEA4        	  6375:                 bsr SHIFTS_FLAGS
00:00003906 E440            	  6376:                 asr.w #2,d0
00:00003908 6100FE9E        	  6377:                 bsr SHIFTS_FLAGS
00:0000390C E840            	  6378:                 asr.w #4,d0
00:0000390E 6100FE98        	  6379:                 bsr SHIFTS_FLAGS
00:00003912 0C808001FFFF    	  6380:                 cmpi.l #$8001FFFF,d0
00:00003918 66FE            	  6381:                 bne.s *
00:0000391A 0C8500000077    	  6382:                 cmpi.l #$00000077,d5
00:00003920 66FE            	  6383:                 bne.s *
                            	  6384: 
                            	  6385: *        LONG LEFT
00:00003922 203C80018FF1    	  6386:                 move.l #$80018FF1,d0
00:00003928 D080            	  6387:                 asl.l #1,d0
00:0000392A 6100FE7C        	  6388:                 bsr SHIFTS_FLAGS
00:0000392E E580            	  6389:                 asl.l #2,d0
00:00003930 6100FE76        	  6390:                 bsr SHIFTS_FLAGS
00:00003934 EF80            	  6391:                 asl.l #7,d0
00:00003936 6100FE70        	  6392:                 bsr SHIFTS_FLAGS
00:0000393A E980            	  6393:                 asl.l #4,d0
00:0000393C 6100FE6A        	  6394:                 bsr SHIFTS_FLAGS
00:00003940 0C8063FC4000    	  6395:                 cmpi.l #$63FC4000,d0
00:00003946 66FE            	  6396:                 bne.s *
00:00003948 0C850000007A    	  6397:                 cmpi.l #$0000007A,d5
00:0000394E 66FE            	  6398:                 bne.s *
                            	  6399: 
                            	  6400: *        LONG RIGHT
00:00003950 203C80018FF1    	  6401:                 move.l #$80018FF1,d0
00:00003956 E280            	  6402:                 asr.l #1,d0
00:00003958 6100FE4E        	  6403:                 bsr SHIFTS_FLAGS
00:0000395C EA80            	  6404:                 asr.l #5,d0
00:0000395E 6100FE48        	  6405:                 bsr SHIFTS_FLAGS
00:00003962 EE80            	  6406:                 asr.l #7,d0
00:00003964 6100FE42        	  6407:                 bsr SHIFTS_FLAGS
00:00003968 E080            	  6408:                 asr.l #8,d0
00:0000396A 6100FE3C        	  6409:                 bsr SHIFTS_FLAGS
00:0000396E 0C80FFFFFC00    	  6410:                 cmpi.l #$FFFFFC00,d0
00:00003974 66FE            	  6411:                 bne.s *
00:00003976 0C850000009C    	  6412:                 cmpi.l #$0000009C,d5
00:0000397C 66FE            	  6413:                 bne.s *
                            	  6414: 
                            	  6415: 
                            	  6416: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6417: 
00:0000397E 7A00            	  6418:                 moveq  #$00000000,d5
00:00003980 307C0100        	  6419:                 move.l #$00000100,a0
00:00003984 30BC8FF1        	  6420:                 move.w #$8FF1,(a0)
                            	  6421: 
                            	  6422: *        WORD LEFT
00:00003988 E1D0            	  6423:                 asl  (a0)
00:0000398A 6100FE1C        	  6424:                 bsr SHIFTS_FLAGS
00:0000398E E1D0            	  6425:                 asl  (a0)
00:00003990 6100FE16        	  6426:                 bsr SHIFTS_FLAGS
00:00003994 E1D0            	  6427:                 asl  (a0)
00:00003996 6100FE10        	  6428:                 bsr SHIFTS_FLAGS
00:0000399A E1D0            	  6429:                 asl  (a0)
00:0000399C 6100FE0A        	  6430:                 bsr SHIFTS_FLAGS
00:000039A0 3010            	  6431:                 move.w (a0),d0
00:000039A2 0C80FFFFFF10    	  6432:                 cmpi.l #$FFFFFF10,d0
00:000039A8 66FE            	  6433:                 bne.s *
00:000039AA 0C850000000D    	  6434:                 cmpi.l #$0000000D,d5
00:000039B0 66FE            	  6435:                 bne.s *
                            	  6436: 
                            	  6437: *        WORD RIGHT
00:000039B2 E0D0            	  6438:                 asr (a0)
00:000039B4 6100FDF2        	  6439:                 bsr SHIFTS_FLAGS
00:000039B8 E0D0            	  6440:                 asr (a0)
00:000039BA 6100FDEC        	  6441:                 bsr SHIFTS_FLAGS
00:000039BE E0D0            	  6442:                 asr (a0)
00:000039C0 6100FDE6        	  6443:                 bsr SHIFTS_FLAGS
00:000039C4 E0D0            	  6444:                 asr (a0)
00:000039C6 6100FDE0        	  6445:                 bsr SHIFTS_FLAGS
00:000039CA E0D0            	  6446:                 asr (a0)
00:000039CC 6100FDDA        	  6447:                 bsr SHIFTS_FLAGS
00:000039D0 E0D0            	  6448:                 asr (a0)
00:000039D2 6100FDD4        	  6449:                 bsr SHIFTS_FLAGS
00:000039D6 3010            	  6450:                 move.w (a0),d0
00:000039D8 0C80FFFFFFFC    	  6451:                 cmpi.l #$FFFFFFFC,d0
00:000039DE 66FE            	  6452:                 bne.s *
00:000039E0 0C850000003E    	  6453:                 cmpi.l #$0000003E,d5
00:000039E6 66FE            	  6454:                 bne.s *
                            	  6455: 
00:000039E8 4E75            	  6456:                 rts
                            	  6457: 
                            	  6458: 
                            	  6459: 
                            	  6460: *-----------------------------------------------------------
                            	  6461: *-----------------------------------------------------------
                            	  6462: * OPCODE : SHIFTS2
                            	  6463: *-----------------------------------------------------------
                            	  6464: *-----------------------------------------------------------
                            	  6465: 
                            	  6466: *     Subroutine to check and accumulate the flags
00:000039EA 4183            	  6467: SHIFTS2_FLAGS:  move.l SR,d3
00:000039EC 02830000000F    	  6468:                 andi.l #$0F,d3            * Isolate flags
00:000039F2 DA83            	  6469:                 add.l d3,d5               * Copy flag results into accumulator
00:000039F4 4E75            	  6470:                 rts
                            	  6471: 
                            	  6472: op_SHIFTS2:
                            	  6473: 
                            	  6474: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6475: 
                            	  6476: *        BYTE LEFT
00:000039F6 203C80018F81    	  6477:                 move.l #$80018F81,d0
00:000039FC 7A00            	  6478:                 moveq  #$00000000,d5
00:000039FE 7C02            	  6479:                 moveq  #$00000002,d6
                            	  6480: SHIFTS2_LOOP1:
00:00003A00 ED28            	  6481:                 lsl.b d6,d0
00:00003A02 61E6            	  6482:                 bsr SHIFTS2_FLAGS
00:00003A04 51CEFFFA        	  6483:                 dbf d6,SHIFTS2_LOOP1
00:00003A08 0C8080018F08    	  6484:                 cmpi.l #$80018F08,d0
00:00003A0E 66FE            	  6485:                 bne.s *
00:00003A10 4A85            	  6486:                 cmpi.l #$00000000,d5
00:00003A12 66FE            	  6487:                 bne.s *
                            	  6488: 
                            	  6489: *        BYTE RIGHT
00:00003A14 203C80018F81    	  6490:                 move.l #$80018F81,d0
00:00003A1A 7C02            	  6491:                 moveq  #$00000002,d6
                            	  6492: SHIFTS2_LOOP2:
00:00003A1C EC28            	  6493:                 lsr.b d6,d0
00:00003A1E 61CA            	  6494:                 bsr SHIFTS2_FLAGS
00:00003A20 51CEFFFA        	  6495:                 dbf d6,SHIFTS2_LOOP2
00:00003A24 0C8080018F10    	  6496:                 cmpi.l #$80018F10,d0
00:00003A2A 66FE            	  6497:                 bne.s *
00:00003A2C 4A85            	  6498:                 cmpi.l #$00000000,d5
00:00003A2E 66FE            	  6499:                 bne.s *
                            	  6500: 
                            	  6501: 
                            	  6502: *        WORD LEFT
00:00003A30 203C80018FF1    	  6503:                 move.l #$80018FF1,d0
00:00003A36 7C02            	  6504:                 moveq  #$00000002,d6
                            	  6505: SHIFTS2_LOOP3:
00:00003A38 ED68            	  6506:                 lsl.w d6,d0
00:00003A3A 61AE            	  6507:                 bsr SHIFTS2_FLAGS
00:00003A3C 51CEFFFA        	  6508:                 dbf d6,SHIFTS2_LOOP3
00:00003A40 0C8080017F88    	  6509:                 cmpi.l #$80017F88,d0
00:00003A46 66FE            	  6510:                 bne.s *
00:00003A48 4A85            	  6511:                 cmpi.l #$00000000,d5
00:00003A4A 66FE            	  6512:                 bne.s *
                            	  6513: 
                            	  6514: *        WORD RIGHT
00:00003A4C 203C80018FF1    	  6515:                 move.l #$80018FF1,d0
00:00003A52 7C02            	  6516:                 moveq  #$00000002,d6
                            	  6517: SHIFTS2_LOOP4:
00:00003A54 EC68            	  6518:                 lsr.w d6,d0
00:00003A56 6192            	  6519:                 bsr SHIFTS2_FLAGS
00:00003A58 51CEFFFA        	  6520:                 dbf d6,SHIFTS2_LOOP4
00:00003A5C 0C80800111FE    	  6521:                 cmpi.l #$800111FE,d0
00:00003A62 66FE            	  6522:                 bne.s *
00:00003A64 4A85            	  6523:                 cmpi.l #$00000000,d5
00:00003A66 66FE            	  6524:                 bne.s *
                            	  6525: 
                            	  6526: 
                            	  6527: *        LONG LEFT
00:00003A68 203C80018FF1    	  6528:                 move.l #$80018FF1,d0
00:00003A6E 7C02            	  6529:                 moveq  #$00000002,d6
                            	  6530: SHIFTS2_LOOP5:
00:00003A70 EDA8            	  6531:                 lsl.l d6,d0
00:00003A72 6100FF76        	  6532:                 bsr SHIFTS2_FLAGS
00:00003A76 51CEFFF8        	  6533:                 dbf d6,SHIFTS2_LOOP5
00:00003A7A 0C80000C7F88    	  6534:                 cmpi.l #$000C7F88,d0
00:00003A80 66FE            	  6535:                 bne.s *
00:00003A82 4A85            	  6536:                 cmpi.l #$00000000,d5
00:00003A84 66FE            	  6537:                 bne.s *
                            	  6538: 
                            	  6539: *        LONG RIGHT
00:00003A86 203C80018FF1    	  6540:                 move.l #$80018FF1,d0
00:00003A8C 7C02            	  6541:                 moveq  #$00000002,d6
                            	  6542: SHIFTS2_LOOP6:
00:00003A8E ECA8            	  6543:                 lsr.l d6,d0
00:00003A90 6100FF58        	  6544:                 bsr SHIFTS2_FLAGS
00:00003A94 51CEFFF8        	  6545:                 dbf d6,SHIFTS2_LOOP6
00:00003A98 0C80100031FE    	  6546:                 cmpi.l #$100031FE,d0
00:00003A9E 66FE            	  6547:                 bne.s *
00:00003AA0 4A85            	  6548:                 cmpi.l #$00000000,d5
00:00003AA2 66FE            	  6549:                 bne.s *
                            	  6550: 
                            	  6551: 
                            	  6552: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6553: 
00:00003AA4 203C80018FF1    	  6554:                 move.l #$80018FF1,d0
00:00003AAA 7A00            	  6555:                 moveq  #$00000000,d5
                            	  6556: 
                            	  6557: *        BYTE LEFT
00:00003AAC E308            	  6558:                 lsl.b #1,d0
00:00003AAE 6100FF3A        	  6559:                 bsr SHIFTS2_FLAGS
00:00003AB2 E508            	  6560:                 lsl.b #2,d0
00:00003AB4 6100FF34        	  6561:                 bsr SHIFTS2_FLAGS
00:00003AB8 E308            	  6562:                 lsl.b #1,d0
00:00003ABA 6100FF2E        	  6563:                 bsr SHIFTS2_FLAGS
00:00003ABE E708            	  6564:                 lsl.b #3,d0
00:00003AC0 6100FF28        	  6565:                 bsr SHIFTS2_FLAGS
00:00003AC4 0C8080018F80    	  6566:                 cmpi.l #$80018F80,d0
00:00003ACA 66FE            	  6567:                 bne.s *
00:00003ACC 0C850000001B    	  6568:                 cmpi.l #$0000001B,d5
00:00003AD2 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        BYTE RIGHT
00:00003AD4 E208            	  6572:                 lsr.b #1,d0
00:00003AD6 6100FF12        	  6573:                 bsr SHIFTS2_FLAGS
00:00003ADA E408            	  6574:                 lsr.b #2,d0
00:00003ADC 6100FF0C        	  6575:                 bsr SHIFTS2_FLAGS
00:00003AE0 E608            	  6576:                 lsr.b #3,d0
00:00003AE2 6100FF06        	  6577:                 bsr SHIFTS2_FLAGS
00:00003AE6 E208            	  6578:                 lsr.b #1,d0
00:00003AE8 6100FF00        	  6579:                 bsr SHIFTS2_FLAGS
00:00003AEC 0C8080018F01    	  6580:                 cmpi.l #$80018F01,d0
00:00003AF2 66FE            	  6581:                 bne.s *
00:00003AF4 0C850000001B    	  6582:                 cmpi.l #$0000001B,d5
00:00003AFA 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        WORD LEFT
00:00003AFC E348            	  6586:                 lsl.w #1,d0
00:00003AFE 6100FEEA        	  6587:                 bsr SHIFTS2_FLAGS
00:00003B02 E548            	  6588:                 lsl.w #2,d0
00:00003B04 6100FEE4        	  6589:                 bsr SHIFTS2_FLAGS
00:00003B08 E748            	  6590:                 lsl.w #3,d0
00:00003B0A 6100FEDE        	  6591:                 bsr SHIFTS2_FLAGS
00:00003B0E EB48            	  6592:                 lsl.w #5,d0
00:00003B10 6100FED8        	  6593:                 bsr SHIFTS2_FLAGS
00:00003B14 0C8080010800    	  6594:                 cmpi.l #$80010800,d0
00:00003B1A 66FE            	  6595:                 bne.s *
00:00003B1C 0C8500000025    	  6596:                 cmpi.l #$00000025,d5
00:00003B22 66FE            	  6597:                 bne.s *
                            	  6598: 
                            	  6599: *        WORD RIGHT
00:00003B24 EA48            	  6600:                 lsr.w #5,d0
00:00003B26 6100FEC2        	  6601:                 bsr SHIFTS2_FLAGS
00:00003B2A E248            	  6602:                 lsr.w #1,d0
00:00003B2C 6100FEBC        	  6603:                 bsr SHIFTS2_FLAGS
00:00003B30 E448            	  6604:                 lsr.w #2,d0
00:00003B32 6100FEB6        	  6605:                 bsr SHIFTS2_FLAGS
00:00003B36 E848            	  6606:                 lsr.w #4,d0
00:00003B38 6100FEB0        	  6607:                 bsr SHIFTS2_FLAGS
00:00003B3C 0C8080010000    	  6608:                 cmpi.l #$80010000,d0
00:00003B42 66FE            	  6609:                 bne.s *
00:00003B44 0C850000002A    	  6610:                 cmpi.l #$0000002A,d5
00:00003B4A 66FE            	  6611:                 bne.s *
                            	  6612: 
                            	  6613: *        LONG LEFT
00:00003B4C 203C80018FF1    	  6614:                 move.l #$80018FF1,d0
00:00003B52 E388            	  6615:                 lsl.l #1,d0
00:00003B54 6100FE94        	  6616:                 bsr SHIFTS2_FLAGS
00:00003B58 E588            	  6617:                 lsl.l #2,d0
00:00003B5A 6100FE8E        	  6618:                 bsr SHIFTS2_FLAGS
00:00003B5E EF88            	  6619:                 lsl.l #7,d0
00:00003B60 6100FE88        	  6620:                 bsr SHIFTS2_FLAGS
00:00003B64 E988            	  6621:                 lsl.l #4,d0
00:00003B66 6100FE82        	  6622:                 bsr SHIFTS2_FLAGS
00:00003B6A 0C8063FC4000    	  6623:                 cmpi.l #$63FC4000,d0
00:00003B70 66FE            	  6624:                 bne.s *
00:00003B72 0C850000002B    	  6625:                 cmpi.l #$0000002B,d5
00:00003B78 66FE            	  6626:                 bne.s *
                            	  6627: 
                            	  6628: *        LONG RIGHT
00:00003B7A 203C80018FF1    	  6629:                 move.l #$80018FF1,d0
00:00003B80 E288            	  6630:                 lsr.l #1,d0
00:00003B82 6100FE66        	  6631:                 bsr SHIFTS2_FLAGS
00:00003B86 EA88            	  6632:                 lsr.l #5,d0
00:00003B88 6100FE60        	  6633:                 bsr SHIFTS2_FLAGS
00:00003B8C EE88            	  6634:                 lsr.l #7,d0
00:00003B8E 6100FE5A        	  6635:                 bsr SHIFTS2_FLAGS
00:00003B92 E088            	  6636:                 lsr.l #8,d0
00:00003B94 6100FE54        	  6637:                 bsr SHIFTS2_FLAGS
00:00003B98 0C8000000400    	  6638:                 cmpi.l #$00000400,d0
00:00003B9E 66FE            	  6639:                 bne.s *
00:00003BA0 0C850000002D    	  6640:                 cmpi.l #$0000002D,d5
00:00003BA6 66FE            	  6641:                 bne.s *
                            	  6642: 
                            	  6643: 
                            	  6644: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6645: 
00:00003BA8 7A00            	  6646:                 moveq  #$00000000,d5
00:00003BAA 307C0100        	  6647:                 move.l #$00000100,a0
00:00003BAE 30BC8FF1        	  6648:                 move.w #$8FF1,(a0)
                            	  6649: 
                            	  6650: *        WORD LEFT
00:00003BB2 E3D0            	  6651:                 lsl  (a0)
00:00003BB4 6100FE34        	  6652:                 bsr SHIFTS2_FLAGS
00:00003BB8 E3D0            	  6653:                 lsl  (a0)
00:00003BBA 6100FE2E        	  6654:                 bsr SHIFTS2_FLAGS
00:00003BBE E3D0            	  6655:                 lsl  (a0)
00:00003BC0 6100FE28        	  6656:                 bsr SHIFTS2_FLAGS
00:00003BC4 E3D0            	  6657:                 lsl  (a0)
00:00003BC6 6100FE22        	  6658:                 bsr SHIFTS2_FLAGS
00:00003BCA 3010            	  6659:                 move.w (a0),d0
00:00003BCC 0C800000FF10    	  6660:                 cmpi.l #$0000FF10,d0
00:00003BD2 66FE            	  6661:                 bne.s *
00:00003BD4 0C8500000009    	  6662:                 cmpi.l #$00000009,d5
00:00003BDA 66FE            	  6663:                 bne.s *
                            	  6664: 
                            	  6665: *        WORD RIGHT
00:00003BDC E2D0            	  6666:                 lsr (a0)
00:00003BDE 6100FE0A        	  6667:                 bsr SHIFTS2_FLAGS
00:00003BE2 E2D0            	  6668:                 lsr (a0)
00:00003BE4 6100FE04        	  6669:                 bsr SHIFTS2_FLAGS
00:00003BE8 E2D0            	  6670:                 lsr (a0)
00:00003BEA 6100FDFE        	  6671:                 bsr SHIFTS2_FLAGS
00:00003BEE E2D0            	  6672:                 lsr (a0)
00:00003BF0 6100FDF8        	  6673:                 bsr SHIFTS2_FLAGS
00:00003BF4 E2D0            	  6674:                 lsr (a0)
00:00003BF6 6100FDF2        	  6675:                 bsr SHIFTS2_FLAGS
00:00003BFA E2D0            	  6676:                 lsr (a0)
00:00003BFC 6100FDEC        	  6677:                 bsr SHIFTS2_FLAGS
00:00003C00 3010            	  6678:                 move.w (a0),d0
00:00003C02 0C80000003FC    	  6679:                 cmpi.l #$000003FC,d0
00:00003C08 66FE            	  6680:                 bne.s *
00:00003C0A 0C850000000A    	  6681:                 cmpi.l #$0000000A,d5
00:00003C10 66FE            	  6682:                 bne.s *
                            	  6683: 
00:00003C12 4E75            	  6684:                 rts
                            	  6685: 
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ; OPCODE : BSR / RTS
                            	  6689: ;-----------------------------------------------------------
                            	  6690: ;-----------------------------------------------------------
                            	  6691: 
                            	  6692: ;t3_bsr:
                            	  6693: ;	moveq	#3,d3
                            	  6694: ;	rts
                            	  6695: 
                            	  6696: ;t1_bsr:
                            	  6697: ;	moveq	#1,d1
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;op_bsr:
                            	  6701: ;	bsr			t1_bsr
                            	  6702: ;	bsr			t2_bsr
                            	  6703: ;	bsr.w		t3_bsr
                            	  6704: ;	bsr.w		t4_bsr
                            	  6705: ;	cmpi.l	#1,d1
                            	  6706: ;	bne			*
                            	  6707: ;	cmpi.l	#2,d2
                            	  6708: ;	bne			*
                            	  6709: ;	cmpi.l	#3,d3
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#4,d4
                            	  6712: ;	bne			*
                            	  6713: ;	rts
                            	  6714: 
                            	  6715: ;t2_bsr:
                            	  6716: ;	moveq	#2,d2
                            	  6717: ;	rts
                            	  6718: 	
                            	  6719: ;t4_bsr:
                            	  6720: ;	moveq	#4,d4
                            	  6721: ;	rts
                            	  6722: 


Symbols by name:
ABCD_INNER1                     00:0000243C
ABCD_INNER2                     00:000024AA
ABCD_NO_C1                      00:00002458
ABCD_NO_C2                      00:00002460
ABCD_NO_C3                      00:000024C6
ABCD_NO_C4                      00:000024CE
ABCD_OUTER1                     00:0000243A
ABCD_OUTER2                     00:000024A8
ADDA_OUTER1                     00:00002FB0
ADDQ_LOOP1                      00:000027CA
ADDQ_LOOP2                      00:00002808
ADDQ_LOOP3                      00:0000283E
ADDX_LOOP3                      00:000030D6
ADDX_LOOP4                      00:000030F2
ADDX_LOOP5                      00:0000310E
ADDX_OUTER1                     00:00003042
ADD_OUTER1                      00:00002DD6
ADD_OUTER2                      00:00002E4A
ALL_DONE                        00:000000D6
AND_OUTER1                      00:00002AF4
AND_OUTER2                      00:00002B68
BCC1                            00:000026F0
BCC10                           00:00002742
BCC11                           00:0000274A
BCC12                           00:00002754
BCC13                           00:0000275C
BCC14                           00:00002766
BCC2                            00:000026FA
BCC3                            00:00002702
BCC4                            00:0000270C
BCC5                            00:00002714
BCC6                            00:0000271E
BCC7                            00:00002726
BCC8                            00:00002730
BCC9                            00:00002738
BSR_CLOSE1                      00:0000124E
BSR_CLOSE2                      00:00001284
BSR_FAR1                        00:000000D8
BSR_FAR2                        00:000026E0
CMPA_OUTER1                     00:00002CCA
CMPM_LOOP1                      00:00002D58
CMPM_LOOP2                      00:00002D72
CMPM_LOOP3                      00:00002D8C
CMP_OUTER1                      00:00002C54
DBCC_LOOP1                      00:00002770
DBCC_LOOP2                      00:0000277E
DIVS_OUTER1                     00:000029B4
DIVU_OUTER1                     00:00002962
EOR_OUTER2                      00:00002BDE
EXCEPTION_6                     00:000000E0
EXCEPTION_7                     00:000000F0
LEA1                            00:00001C82
MOVE1                           00:000018CC
MOVE2                           00:00001850
MOVE3                           00:0000194C
MOVE4                           00:00001AA6
MULS_OUTER1                     00:000032AA
MULU_OUTER1                     00:0000325E
NBCD_LOOP                       00:0000262E
NBCD_LOOP1                      00:00002674
NBCD_NO_C                       00:0000263A
NBCD_NO_C1                      00:00002688
NBCD_NO_Z                       00:0000263E
NBCD_NO_Z1                      00:0000268C
OR_OUTER1                       00:00002A0A
OR_OUTER2                       00:00002A7E
ROXx_FLAGS                      00:00003572
ROXx_LOOP1                      00:00003588
ROXx_LOOP2                      00:000035A8
ROXx_LOOP3                      00:000035C8
ROXx_LOOP4                      00:000035E8
ROXx_LOOP5                      00:00003608
ROXx_LOOP6                      00:0000362A
ROx_FLAGS                       00:0000333C
ROx_LOOP1                       00:00003352
ROx_LOOP2                       00:00003372
ROx_LOOP3                       00:00003392
ROx_LOOP4                       00:000033B2
ROx_LOOP5                       00:000033D2
ROx_LOOP6                       00:000033F4
RTR_DONE                        00:000026D2
SBCD_INNER1                     00:0000253A
SBCD_INNER2                     00:000025A8
SBCD_NO_C1                      00:00002556
SBCD_NO_C2                      00:0000255E
SBCD_NO_C3                      00:000025C4
SBCD_NO_C4                      00:000025CC
SBCD_OUTER1                     00:00002538
SBCD_OUTER2                     00:000025A6
SHIFTS2_FLAGS                   00:000039EA
SHIFTS2_LOOP1                   00:00003A00
SHIFTS2_LOOP2                   00:00003A1C
SHIFTS2_LOOP3                   00:00003A38
SHIFTS2_LOOP4                   00:00003A54
SHIFTS2_LOOP5                   00:00003A70
SHIFTS2_LOOP6                   00:00003A8E
SHIFTS_FLAGS                    00:000037A8
SHIFTS_LOOP1                    00:000037BE
SHIFTS_LOOP2                    00:000037DE
SHIFTS_LOOP3                    00:000037FE
SHIFTS_LOOP4                    00:0000381E
SHIFTS_LOOP5                    00:0000383E
SHIFTS_LOOP6                    00:00003860
SUBA_OUTER1                     00:00002FFC
SUBQ_LOOP1                      00:00002888
SUBQ_LOOP2                      00:000028C2
SUBQ_LOOP3                      00:000028F8
SUBX_LOOP3                      00:000031E6
SUBX_LOOP4                      00:00003202
SUBX_LOOP5                      00:0000321E
SUBX_OUTER1                     00:00003152
SUB_OUTER1                      00:00002EC0
SUB_OUTER2                      00:00002F34
cpu_test                        00:00000000
op_ABCD                         00:0000241A
op_ADD                          00:00002DB6
op_ADDA                         00:00002F8A
op_ADDQ                         00:000027B6
op_ADDX                         00:00003022
op_ADD_I                        00:00001478
op_AND                          00:00002AD4
op_ANDI_TO_CCR                  00:0000019E
op_ANDI_TO_SR                   00:000001C4
op_BCC                          00:000026E8
op_BCHG                         00:0000059E
op_BCLR                         00:00000906
op_BOOL_I                       00:00001090
op_BSET                         00:00000C56
op_BSR                          00:00001256
op_BTST                         00:000001F4
op_BTST0                        00:0000037E
op_BTST1                        00:0000038A
op_BTST10                       00:000003D2
op_BTST11                       00:000003DA
op_BTST12                       00:000003E0
op_BTST2                        00:00000392
op_BTST20                       00:00000538
op_BTST21                       00:00000542
op_BTST22                       00:00000548
op_BTST23                       00:0000054E
op_BTST24                       00:00000554
op_BTST25                       00:0000055A
op_BTST26                       00:00000560
op_BTST27                       00:00000566
op_BTST28                       00:0000056C
op_BTST29                       00:00000572
op_BTST3                        00:0000039A
op_BTST30                       00:00000578
op_BTST31                       00:0000057E
op_BTST32                       00:00000582
op_BTST4                        00:000003A2
op_BTST5                        00:000003AA
op_BTST6                        00:000003B2
op_BTST7                        00:000003BA
op_BTST8                        00:000003C2
op_BTST9                        00:000003CA
op_CHK                          00:00001D34
op_CMP                          00:00002C34
op_CMPA                         00:00002CAA
op_CMPM                         00:00002D10
op_CMP_I                        00:0000128C
op_DBCC                         00:00002768
op_DIVS                         00:00002998
op_DIVU                         00:00002946
op_EOR                          00:00002BBE
op_EORI_TO_CCR                  00:00000146
op_EORI_TO_SR                   00:0000016E
op_EXG                          00:000032DA
op_EXT                          00:00001BA8
op_LEAPEA                       00:00001BEA
op_LINKS                        00:00001D06
op_MOVE                         00:00001784
op_MOVEM                        00:000020FC
op_MOVEP                        00:00000FFC
op_MOVEQ                        00:0000292A
op_MOVE_USP                     00:00001D24
op_MOVE_xxx_FLAGS               00:00001990
op_MULS                         00:0000328E
op_MULU                         00:00003242
op_NBCD                         00:00002616
op_NEGS                         00:00001D6E
op_OR                           00:000029EA
op_ORI_TO_CCR                   00:000000F8
op_ORI_TO_SR                    00:0000011C
op_ROXx                         00:0000357E
op_ROx                          00:00003348
op_RTR                          00:000026C4
op_SBCD                         00:00002518
op_SCC                          00:0000278E
op_SHIFTS                       00:000037B4
op_SHIFTS2                      00:000039F6
op_SUB                          00:00002EA0
op_SUBA                         00:00002FD6
op_SUBQ                         00:00002870
op_SUBX                         00:00003132
op_SUB_I                        00:000015FE
op_SWAP                         00:00001BD4
op_TAS                          00:00001C98
op_TRAPV                        00:000026A8
op_TST                          00:00001CC0

Symbols by value:
00000000 cpu_test
000000D6 ALL_DONE
000000D8 BSR_FAR1
000000E0 EXCEPTION_6
000000F0 EXCEPTION_7
000000F8 op_ORI_TO_CCR
0000011C op_ORI_TO_SR
00000146 op_EORI_TO_CCR
0000016E op_EORI_TO_SR
0000019E op_ANDI_TO_CCR
000001C4 op_ANDI_TO_SR
000001F4 op_BTST
0000037E op_BTST0
0000038A op_BTST1
00000392 op_BTST2
0000039A op_BTST3
000003A2 op_BTST4
000003AA op_BTST5
000003B2 op_BTST6
000003BA op_BTST7
000003C2 op_BTST8
000003CA op_BTST9
000003D2 op_BTST10
000003DA op_BTST11
000003E0 op_BTST12
00000538 op_BTST20
00000542 op_BTST21
00000548 op_BTST22
0000054E op_BTST23
00000554 op_BTST24
0000055A op_BTST25
00000560 op_BTST26
00000566 op_BTST27
0000056C op_BTST28
00000572 op_BTST29
00000578 op_BTST30
0000057E op_BTST31
00000582 op_BTST32
0000059E op_BCHG
00000906 op_BCLR
00000C56 op_BSET
00000FFC op_MOVEP
00001090 op_BOOL_I
0000124E BSR_CLOSE1
00001256 op_BSR
00001284 BSR_CLOSE2
0000128C op_CMP_I
00001478 op_ADD_I
000015FE op_SUB_I
00001784 op_MOVE
00001850 MOVE2
000018CC MOVE1
0000194C MOVE3
00001990 op_MOVE_xxx_FLAGS
00001AA6 MOVE4
00001BA8 op_EXT
00001BD4 op_SWAP
00001BEA op_LEAPEA
00001C82 LEA1
00001C98 op_TAS
00001CC0 op_TST
00001D06 op_LINKS
00001D24 op_MOVE_USP
00001D34 op_CHK
00001D6E op_NEGS
000020FC op_MOVEM
0000241A op_ABCD
0000243A ABCD_OUTER1
0000243C ABCD_INNER1
00002458 ABCD_NO_C1
00002460 ABCD_NO_C2
000024A8 ABCD_OUTER2
000024AA ABCD_INNER2
000024C6 ABCD_NO_C3
000024CE ABCD_NO_C4
00002518 op_SBCD
00002538 SBCD_OUTER1
0000253A SBCD_INNER1
00002556 SBCD_NO_C1
0000255E SBCD_NO_C2
000025A6 SBCD_OUTER2
000025A8 SBCD_INNER2
000025C4 SBCD_NO_C3
000025CC SBCD_NO_C4
00002616 op_NBCD
0000262E NBCD_LOOP
0000263A NBCD_NO_C
0000263E NBCD_NO_Z
00002674 NBCD_LOOP1
00002688 NBCD_NO_C1
0000268C NBCD_NO_Z1
000026A8 op_TRAPV
000026C4 op_RTR
000026D2 RTR_DONE
000026E0 BSR_FAR2
000026E8 op_BCC
000026F0 BCC1
000026FA BCC2
00002702 BCC3
0000270C BCC4
00002714 BCC5
0000271E BCC6
00002726 BCC7
00002730 BCC8
00002738 BCC9
00002742 BCC10
0000274A BCC11
00002754 BCC12
0000275C BCC13
00002766 BCC14
00002768 op_DBCC
00002770 DBCC_LOOP1
0000277E DBCC_LOOP2
0000278E op_SCC
000027B6 op_ADDQ
000027CA ADDQ_LOOP1
00002808 ADDQ_LOOP2
0000283E ADDQ_LOOP3
00002870 op_SUBQ
00002888 SUBQ_LOOP1
000028C2 SUBQ_LOOP2
000028F8 SUBQ_LOOP3
0000292A op_MOVEQ
00002946 op_DIVU
00002962 DIVU_OUTER1
00002998 op_DIVS
000029B4 DIVS_OUTER1
000029EA op_OR
00002A0A OR_OUTER1
00002A7E OR_OUTER2
00002AD4 op_AND
00002AF4 AND_OUTER1
00002B68 AND_OUTER2
00002BBE op_EOR
00002BDE EOR_OUTER2
00002C34 op_CMP
00002C54 CMP_OUTER1
00002CAA op_CMPA
00002CCA CMPA_OUTER1
00002D10 op_CMPM
00002D58 CMPM_LOOP1
00002D72 CMPM_LOOP2
00002D8C CMPM_LOOP3
00002DB6 op_ADD
00002DD6 ADD_OUTER1
00002E4A ADD_OUTER2
00002EA0 op_SUB
00002EC0 SUB_OUTER1
00002F34 SUB_OUTER2
00002F8A op_ADDA
00002FB0 ADDA_OUTER1
00002FD6 op_SUBA
00002FFC SUBA_OUTER1
00003022 op_ADDX
00003042 ADDX_OUTER1
000030D6 ADDX_LOOP3
000030F2 ADDX_LOOP4
0000310E ADDX_LOOP5
00003132 op_SUBX
00003152 SUBX_OUTER1
000031E6 SUBX_LOOP3
00003202 SUBX_LOOP4
0000321E SUBX_LOOP5
00003242 op_MULU
0000325E MULU_OUTER1
0000328E op_MULS
000032AA MULS_OUTER1
000032DA op_EXG
0000333C ROx_FLAGS
00003348 op_ROx
00003352 ROx_LOOP1
00003372 ROx_LOOP2
00003392 ROx_LOOP3
000033B2 ROx_LOOP4
000033D2 ROx_LOOP5
000033F4 ROx_LOOP6
00003572 ROXx_FLAGS
0000357E op_ROXx
00003588 ROXx_LOOP1
000035A8 ROXx_LOOP2
000035C8 ROXx_LOOP3
000035E8 ROXx_LOOP4
00003608 ROXx_LOOP5
0000362A ROXx_LOOP6
000037A8 SHIFTS_FLAGS
000037B4 op_SHIFTS
000037BE SHIFTS_LOOP1
000037DE SHIFTS_LOOP2
000037FE SHIFTS_LOOP3
0000381E SHIFTS_LOOP4
0000383E SHIFTS_LOOP5
00003860 SHIFTS_LOOP6
000039EA SHIFTS2_FLAGS
000039F6 op_SHIFTS2
00003A00 SHIFTS2_LOOP1
00003A1C SHIFTS2_LOOP2
00003A38 SHIFTS2_LOOP3
00003A54 SHIFTS2_LOOP4
00003A70 SHIFTS2_LOOP5
00003A8E SHIFTS2_LOOP6

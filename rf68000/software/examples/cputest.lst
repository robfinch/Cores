Sections:
00: "DATA" (0-8)
01: "CODE" (0-3BEC)


Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: 	data
00:00000000 0001FFFC        	    70: 	dc.l		$0001FFFC						; top of local ram area
00:00000004 00000000        	    71: 	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: start:
01:00000000 2038FFE0        	    75: 	move.l	$FFFFFFE0,d0		; get core number
01:00000004 0C000002        	    76: 	cmpi.b	#2,d0
01:00000008 66000104        	    77: 	bne	do_nothing
01:0000000C 61000102        	    78: 	bsr	op_ORI_TO_CCR
01:00000010 61000120        	    79: 	bsr	op_ORI_TO_SR
01:00000014 6100013E        	    80: 	bsr	op_EORI_TO_CCR
01:00000018 61000160        	    81: 	bsr	op_EORI_TO_SR
01:0000001C 61000182        	    82: 	bsr	op_ANDI_TO_CCR
01:00000020 610001A4        	    83: 	bsr	op_ANDI_TO_SR
01:00000024 610001C6        	    84: 	bsr	op_BTST
01:00000028 6100056C        	    85: 	bsr	op_BCHG
01:0000002C 610008D0        	    86: 	bsr	op_BCLR
01:00000030 61000C1C        	    87: 	bsr	op_BSET
01:00000034 61000FBE        	    88: 	bsr op_MOVEP
01:00000038 6100104E        	    89: 	bsr op_BOOL_I
01:0000003C 61001246        	    90: 	bsr op_CMP_I
01:00000040 6100142E        	    91: 	bsr op_ADD_I
01:00000044 610015B0        	    92: 	bsr op_SUB_I
01:00000048 61001732        	    93: 	bsr op_MOVE
01:0000004C 6100193A        	    94: 	bsr op_MOVE_xxx_FLAGS
01:00000050 61001B2A        	    95: 	bsr op_EXT
01:00000054 61001B52        	    96: 	bsr op_SWAP
01:00000058 61001B64        	    97: 	bsr op_LEAPEA
01:0000005C 61001C0C        	    98: 	bsr op_TAS
01:00000060 61001C30        	    99: 	bsr op_TST
01:00000064 61001C72        	   100: 	bsr op_LINKS
01:00000068 61001C8C        	   101: 	bsr op_MOVE_USP
01:0000006C 61001C98        	   102: 	bsr op_CHK
01:00000070 61001CCE        	   103: 	bsr op_NEGS
01:00000074 61002060        	   104: 	bsr op_MOVEM
01:00000078 6100237A        	   105: 	bsr op_ABCD
01:0000007C 61002474        	   106: 	bsr op_SBCD
01:00000080 6100256E        	   107: 	bsr op_NBCD
01:00000084 610025FC        	   108: 	bsr op_TRAPV
01:00000088 61002614        	   109: 	bsr op_RTR
01:0000008C 610011C0        	   110: 	bsr op_BSR
01:00000090 6100262E        	   111: 	bsr op_BCC
01:00000094 610026AA        	   112: 	bsr op_DBCC
01:00000098 610026CC        	   113: 	bsr op_SCC
01:0000009C 610026F0        	   114: 	bsr op_ADDQ
01:000000A0 610027A6        	   115: 	bsr op_SUBQ
01:000000A4 6100285C        	   116: 	bsr op_MOVEQ
01:000000A8 61002874        	   117: 	bsr op_DIVU
01:000000AC 610028C2        	   118: 	bsr op_DIVS
01:000000B0 61002910        	   119: 	bsr op_OR
01:000000B4 610029F6        	   120: 	bsr op_AND
01:000000B8 61002ADC        	   121: 	bsr op_EOR
01:000000BC 61002B4E        	   122: 	bsr op_CMP
01:000000C0 61002BC0        	   123: 	bsr op_CMPA
01:000000C4 61002C22        	   124: 	bsr op_CMPM
01:000000C8 61002CC4        	   125: 	bsr op_ADD
01:000000CC 61002DAA        	   126: 	bsr op_SUB
01:000000D0 61002E90        	   127: 	bsr op_ADDA
01:000000D4 61002ED8        	   128: 	bsr op_SUBA
01:000000D8 61002F20        	   129: 	bsr op_ADDX
01:000000DC 6100302C        	   130: 	bsr op_SUBX
01:000000E0 61003138        	   131: 	bsr op_MULU
01:000000E4 61003180        	   132: 	bsr op_MULS
01:000000E8 610031C8        	   133: 	bsr op_EXG
01:000000EC 61003232        	   134: 	bsr op_ROx
01:000000F0 61003464        	   135: 	bsr op_ROXx
01:000000F4 61003696        	   136: 	bsr op_SHIFTS
01:000000F8 610038D4        	   137: 	bsr op_SHIFTS2
                            	   138: 
                            	   139: 	bra ALL_DONE
                            	   140: 
                            	   141: * Loop here when all tests pass
                            	   142: *
                            	   143: 
01:000000FC 60FE            	   144: ALL_DONE: bra.s ALL_DONE
                            	   145: 
01:000000FE 263C33333333    	   146: BSR_FAR1:       move.l #$33333333,d3
01:00000104 4E75            	   147:                 rts
                            	   148: 
01:00000106 70FF            	   149: 	moveq		#-1,d0
01:00000108 23C0FD0FFF00    	   150: 	move.l	d0,$FD0FFF00
                            	   151: do_nothing:
01:0000010E 60FE            	   152: 	bra			*		
                            	   153: 
                            	   154: ;-----------------------------------------------------------
                            	   155: ;-----------------------------------------------------------
                            	   156: ; OPCODE : ORI_TO_CCR
                            	   157: ;-----------------------------------------------------------
                            	   158: ;-----------------------------------------------------------
                            	   159: op_ORI_TO_CCR:
                            	   160: 
01:00000110 003C00FF        	   161:     ori.b #$FF,CCR
01:00000114 6AFE            	   162:     bpl.s *                   ; branch if Z clear
01:00000116 66FE            	   163:     bne.s *                   ; branch if N clear
01:00000118 68FE            	   164:     bvc.s *                   ; branch if V clear
01:0000011A 64FE            	   165:     bcc.s *                   ; branch if C clear
                            	   166: 
01:0000011C 44FC0000        	   167:     move #$00,CCR
01:00000120 003C0000        	   168:     ori.b #$00,CCR
01:00000124 67FE            	   169:     beq.s *                   ; branch if Z set
01:00000126 6BFE            	   170:     bmi.s *                   ; branch if N set
01:00000128 69FE            	   171:     bvs.s *                   ; branch if V set
01:0000012A 65FE            	   172:     bcs.s *                   ; branch if C set
                            	   173: 
01:0000012C 46FC2700        	   174:     move #$2700,SR          ; Put flags back to initial value
                            	   175: 
01:00000130 4E75            	   176:     rts
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_SR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: 
                            	   184: op_ORI_TO_SR:
                            	   185: 
01:00000132 007C2FFF        	   186:     ori.w #$2FFF,SR
01:00000136 6AFE            	   187:     bpl.s *                   * branch if Z clear
01:00000138 66FE            	   188:     bne.s *                   * branch if N clear
01:0000013A 68FE            	   189:     bvc.s *                   * branch if V clear
01:0000013C 64FE            	   190:     bcc.s *                   * branch if C clear
                            	   191: 
01:0000013E 46FC2000        	   192:     move #$2000,SR
01:00000142 007C0000        	   193:     ori.w #$0000,SR
01:00000146 67FE            	   194:     beq.s *                   * branch if Z set
01:00000148 6BFE            	   195:     bmi.s *                   * branch if N set
01:0000014A 69FE            	   196:     bvs.s *                   * branch if V set
01:0000014C 65FE            	   197:     bcs.s *                   * branch if C set
                            	   198: 
01:0000014E 46FC2700        	   199:     move #$2700,SR         * Put flags back to initial value
                            	   200: 
01:00000152 4E75            	   201:     rts
                            	   202: ; 
                            	   203: ;-----------------------------------------------------------
                            	   204: ;-----------------------------------------------------------
                            	   205: ; OPCODE : EORI_TO_CCR
                            	   206: ;-----------------------------------------------------------
                            	   207: ;-----------------------------------------------------------
                            	   208: op_EORI_TO_CCR:
                            	   209: 
01:00000154 44FC0000        	   210:     move #$00,CCR
01:00000158 0A3C00FF        	   211:     eori.b #$FF,CCR
01:0000015C 6AFE            	   212:     bpl.s *                   ; branch if Z clear
01:0000015E 66FE            	   213:     bne.s *                   ; branch if N clear
01:00000160 68FE            	   214:     bvc.s *                   ; branch if V clear
01:00000162 64FE            	   215:     bcc.s *                   ; branch if C clear
                            	   216: 
01:00000164 44FC0000        	   217:     move #$00,CCR
01:00000168 0A3C0000        	   218:     eori.b #$00,CCR
01:0000016C 67FE            	   219:     beq.s *                   ; branch if Z set
01:0000016E 6BFE            	   220:     bmi.s *                   ; branch if N set
01:00000170 69FE            	   221:     bvs.s *                   ; branch if V set
01:00000172 65FE            	   222:     bcs.s *                   ; branch if C set
                            	   223: 
01:00000174 46FC2700        	   224:     move #$2700,SR           ; Put flags back to initial value
                            	   225: 
01:00000178 4E75            	   226:     rts
                            	   227: 
                            	   228: 
                            	   229: 
                            	   230: *-----------------------------------------------------------
                            	   231: *-----------------------------------------------------------
                            	   232: * OPCODE : EORI_TO_SR
                            	   233: *-----------------------------------------------------------
                            	   234: *-----------------------------------------------------------
                            	   235: op_EORI_TO_SR:
                            	   236: 
01:0000017A 46FC2000        	   237:     move #$2000,SR
01:0000017E 0A7C0FFF        	   238:     eori.w #$0FFF,SR
01:00000182 6AFE            	   239:     bpl.s *                   * branch if Z clear
01:00000184 66FE            	   240:     bne.s *                   * branch if N clear
01:00000186 68FE            	   241:     bvc.s *                   * branch if V clear
01:00000188 64FE            	   242:     bcc.s *                   * branch if C clear
                            	   243: 
01:0000018A 46FC2000        	   244:     move #$2000,SR
01:0000018E 0A7C0000        	   245:     eori.w #$0000,SR
01:00000192 67FE            	   246:     beq.s *                   * branch if Z set
01:00000194 6BFE            	   247:     bmi.s *                   * branch if N set
01:00000196 69FE            	   248:     bvs.s *                   * branch if V set
01:00000198 65FE            	   249:     bcs.s *                   * branch if C set
                            	   250: 
01:0000019A 46FC2700        	   251:     move #$2700,SR          * Put flags back to initial value
                            	   252: 
01:0000019E 4E75            	   253:     rts
                            	   254: 
                            	   255: 
                            	   256: 
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: * OPCODE : ANDI_TO_CCR
                            	   260: *-----------------------------------------------------------
                            	   261: *-----------------------------------------------------------
                            	   262: op_ANDI_TO_CCR:
                            	   263: 
01:000001A0 44FC00FF        	   264:     move #$FF,CCR
01:000001A4 023C00FF        	   265:     andi.b #$FF,CCR
01:000001A8 6AFE            	   266:     bpl.s *                   * branch if Z clear
01:000001AA 66FE            	   267:     bne.s *                   * branch if N clear
01:000001AC 68FE            	   268:     bvc.s *                   * branch if V clear
01:000001AE 64FE            	   269:     bcc.s *                   * branch if C clear
                            	   270: 
01:000001B0 44FC00FF        	   271:     move #$FF,CCR
01:000001B4 023C0000        	   272:     andi.b #$00,CCR
01:000001B8 67FE            	   273:     beq.s *                   * branch if Z set
01:000001BA 6BFE            	   274:     bmi.s *                   * branch if N set
01:000001BC 69FE            	   275:     bvs.s *                   * branch if V set
01:000001BE 65FE            	   276:     bcs.s *                   * branch if C set
                            	   277: 
01:000001C0 46FC2700        	   278:     move #$2700,SR           * Put flags back to initial value
                            	   279: 
01:000001C4 4E75            	   280:     rts
                            	   281: 
                            	   282: 
                            	   283: 
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: * OPCODE : ANDI_TO_SR
                            	   287: *-----------------------------------------------------------
                            	   288: *-----------------------------------------------------------
                            	   289: op_ANDI_TO_SR:
01:000001C6 46FC20FF        	   290:     move #$20FF,SR
01:000001CA 027CFFFF        	   291:     andi.w #$FFFF,SR
01:000001CE 6AFE            	   292:     bpl.s *                   * branch if Z clear
01:000001D0 66FE            	   293:     bne.s *                   * branch if N clear
01:000001D2 68FE            	   294:     bvc.s *                   * branch if V clear
01:000001D4 64FE            	   295:     bcc.s *                   * branch if C clear
                            	   296: 
01:000001D6 46FC20FF        	   297:     move #$20FF,SR
01:000001DA 027CFF00        	   298:     andi.w #$FF00,SR
01:000001DE 67FE            	   299:     beq.s *                   * branch if Z set
01:000001E0 6BFE            	   300:     bmi.s *                   * branch if N set
01:000001E2 69FE            	   301:     bvs.s *                   * branch if V set
01:000001E4 65FE            	   302:     bcs.s *                   * branch if C set
                            	   303: 
01:000001E6 46FC2700        	   304:     move #$2700,SR           * Put flags back to initial value
                            	   305: 
01:000001EA 4E75            	   306:     rts
                            	   307: 
                            	   308: 
                            	   309: *-----------------------------------------------------------
                            	   310: *-----------------------------------------------------------
                            	   311: * OPCODE : BTST
                            	   312: *-----------------------------------------------------------
                            	   313: *-----------------------------------------------------------
                            	   314: op_BTST:
                            	   315: 
                            	   316: *  Bit Number.s Static
                            	   317: 
                            	   318: *             EA = Dn  - LONG only
01:000001EC 203C80000001    	   319:             move.l #$80000001,d0      * populate test data
01:000001F2 08000000        	   320:             btst.l #0,d0
01:000001F6 67FE            	   321:             beq.s *               * branch if Z set
01:000001F8 08000001        	   322:             btst.l #1,d0              *
01:000001FC 66FE            	   323:             bne.s *               * branch if Z clear
01:000001FE 0800001F        	   324:             btst.l #31,d0             *
01:00000202 67FE            	   325:             beq.s *               * branch if Z set
                            	   326: 
                            	   327: 
                            	   328: *             EA = (An)  - BYTE only
01:00000204 307C0100        	   329:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000208 10BC0081        	   330:             move.b #$81,(a0)          * populate test data
01:0000020C 1210            	   331:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000020E 08100000        	   332:             btst.b #0,(a0)
01:00000212 67FE            	   333:             beq.s *               * branch if Z set
01:00000214 08100001        	   334:             btst.b #1,(a0)            *
01:00000218 66FE            	   335:             bne.s *               * branch if Z clear
01:0000021A 08100007        	   336:             btst.b #7,(a0)            *
01:0000021E 67FE            	   337:             beq.s *               * branch if Z set
                            	   338: 
                            	   339: 
                            	   340: *             EA = (An)+  - BYTE only
01:00000220 307C0100        	   341:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000224 10FC0001        	   342:             move.b #$01,(a0)+         * populate test data
01:00000228 10FC00FC        	   343:             move.b #$FC,(a0)+         * populate test data
01:0000022C 10FC0080        	   344:             move.b #$80,(a0)+         * populate test data
01:00000230 307C0100        	   345:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000234 08180000        	   346:             btst.b #0,(a0)+
01:00000238 67FE            	   347:             beq.s *               * branch if Z set
01:0000023A 08180001        	   348:             btst.b #1,(a0)+           *
01:0000023E 66FE            	   349:             bne.s *               * branch if Z clear
01:00000240 08180007        	   350:             btst.b #7,(a0)+           *
01:00000244 67FE            	   351:             beq.s *               * branch if Z set
                            	   352: 
                            	   353: 
                            	   354: *             EA = -(An)  - BYTE only
01:00000246 307C0100        	   355:             move.l #$00000100,a0      * point to memory to address
01:0000024A 10FC0080        	   356:             move.b #$80,(a0)+         * populate test data
01:0000024E 10FC00FC        	   357:             move.b #$FC,(a0)+         * populate test data
01:00000252 10FC0001        	   358:             move.b #$01,(a0)+         * populate test data
01:00000256 307C0103        	   359:             move.l #$00000103,a0      * point to memory to address
01:0000025A 08200000        	   360:             btst.b #0,-(a0)
01:0000025E 67FE            	   361:             beq.s *               * branch if Z set
01:00000260 08200001        	   362:             btst.b #1,-(a0)           *
01:00000264 66FE            	   363:             bne.s *               * branch if Z clear
01:00000266 08200007        	   364:             btst.b #7,-(a0)           *
01:0000026A 67FE            	   365:             beq.s *               * branch if Z set
                            	   366: 
                            	   367: 
                            	   368: *             EA = n(An)  - BYTE only
01:0000026C 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address
01:00000270 10FC0001        	   370:             move.b #$01,(a0)+         * populate test data
01:00000274 10FC00FC        	   371:             move.b #$FC,(a0)+         * populate test data
01:00000278 10FC0080        	   372:             move.b #$80,(a0)+         * populate test data
01:0000027C 307C0100        	   373:             move.l #$00000100,a0      * point to memory to address
01:00000280 08100000        	   374:             btst.b #0,0(a0)
01:00000284 67FE            	   375:             beq.s *               * branch if Z set
01:00000286 082800010001    	   376:             btst.b #1,1(a0)           *
01:0000028C 66FE            	   377:             bne.s *               * branch if Z clear
01:0000028E 082800070002    	   378:             btst.b #7,2(a0)           *
01:00000294 67FE            	   379:             beq.s *               * branch if Z set
                            	   380: 
                            	   381: 
                            	   382: *             EA = n(An,R.W)  - BYTE only
01:00000296 307C0100        	   383:             move.l #$00000100,a0      * point to memory to address
01:0000029A 93C9            	   384:             move.l #$00000000,a1      * point to memory to address
01:0000029C 347C0001        	   385:             move.l #$00000001,a2      * point to memory to address
01:000002A0 7000            	   386:             moveq  #$00000000,d0      * point to memory to address
01:000002A2 7201            	   387:             moveq  #$00000001,d1      * point to memory to address
01:000002A4 083000000000    	   388:             btst.b #0,0(a0,d0.w)
01:000002AA 67FE            	   389:             beq.s *               * branch if Z set
01:000002AC 083000011000    	   390:             btst.b #1,0(a0,d1.w)      *
01:000002B2 66FE            	   391:             bne.s *               * branch if Z clear
01:000002B4 083000071001    	   392:             btst.b #7,1(a0,d1.w)      *
01:000002BA 67FE            	   393:             beq.s *               * branch if Z set
                            	   394: *             EA = n(An,R.L)  - BYTE only
01:000002BC 083000000800    	   395:             btst.b #0,0(a0,d0.l)
01:000002C2 67FE            	   396:             beq.s *               * branch if Z set
01:000002C4 083000011800    	   397:             btst.b #1,0(a0,d1.l)      *
01:000002CA 66FE            	   398:             bne.s *               * branch if Z clear
01:000002CC 083000071801    	   399:             btst.b #7,1(a0,d1.l)      *
01:000002D2 67FE            	   400:             beq.s *               * branch if Z set
                            	   401: *             EA = n(An,A.W)  - BYTE only
01:000002D4 083000009000    	   402:             btst.b #0,0(a0,a1.w)
01:000002DA 67FE            	   403:             beq.s *               * branch if Z set
01:000002DC 08300001A000    	   404:             btst.b #1,0(a0,a2.w)      *
01:000002E2 66FE            	   405:             bne.s *               * branch if Z clear
01:000002E4 08300007A001    	   406:             btst.b #7,1(a0,a2.w)      *
01:000002EA 67FE            	   407:             beq.s *               * branch if Z set
                            	   408: *             EA = n(An,A.L)  - BYTE only
01:000002EC 083000009800    	   409:             btst.b #0,0(a0,a1.l)
01:000002F2 67FE            	   410:             beq.s *               * branch if Z set
01:000002F4 08300001A800    	   411:             btst.b #1,0(a0,a2.l)      *
01:000002FA 66FE            	   412:             bne.s *               * branch if Z clear
01:000002FC 08300007A801    	   413:             btst.b #7,1(a0,a2.l)      *
01:00000302 67FE            	   414:             beq.s *               * branch if Z set
                            	   415: 
                            	   416: 
                            	   417: *             EA = x.W  - BYTE only
01:00000304 083800000100    	   418:             btst.b #0,$0100
01:0000030A 67FE            	   419:             beq.s *               * branch if Z set
01:0000030C 083800010101    	   420:             btst.b #1,$0101           *
01:00000312 66FE            	   421:             bne.s *               * branch if Z clear
01:00000314 083800070102    	   422:             btst.b #7,$0102           *
01:0000031A 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: 
                            	   425: 
                            	   426: *             EA = x.L  - BYTE only
01:0000031C 207C0000F100    	   427:             move.l #$F100,a0      * point to memory to address 0x100
01:00000322 10FC0001        	   428:             move.b #$01,(a0)+         * populate test data
01:00000326 10FC00FC        	   429:             move.b #$FC,(a0)+         * populate test data
01:0000032A 10FC0080        	   430:             move.b #$80,(a0)+         * populate test data
01:0000032E 083900000000F100	   431:             btst.b #0,$F100
01:00000336 67FE            	   432:             beq.s *               * branch if Z set
01:00000338 083900010000F101	   433:             btst.b #1,$F101       *
01:00000340 66FE            	   434:             bne.s *               * branch if Z clear
01:00000342 083900070000F102	   435:             btst.b #7,$F102       *
01:0000034A 67FE            	   436:             beq.s *               * branch if Z set
                            	   437: 
                            	   438: 
                            	   439: *             EA = x(PC)  - BYTE only
01:0000034C 4BFAFE9E        	   440:             lea op_BTST(pc),a5
01:00000350 083A0000FE98    	   441:             btst.b #0,op_BTST(pc)
01:00000356 66FE            	   442:             bne.s *               * branch if Z clear
01:00000358 083A0003001A    	   443:             btst.b #3,op_BTST0(pc)     *
01:0000035E 67FE            	   444:             beq.s *               * branch if Z set
01:00000360 083A00060074    	   445:             btst.b #6,op_BTST12(pc)    *
01:00000366 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = n(PC,R.W)  - BYTE only
01:00000368 307C0100        	   450:             move.l #$00000100,a0      * point to memory to address
01:0000036C 93C9            	   451:             move.l #$00000000,a1      * point to memory to address
01:0000036E 347C0001        	   452:             move.l #$00000001,a2      * point to memory to address
01:00000372 7000            	   453:             moveq  #$00000000,d0      * point to memory to address
01:00000374 7201            	   454:             moveq  #$00000001,d1      * point to memory to address
                            	   455: 
01:00000376 083B000000FC    	   456: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:0000037C 66FE            	   457:             bne.s *               * branch if Z clear
                            	   458: 
01:0000037E 4BFB1002        	   459:             lea op_BTST1(pc,d1.w),a5
01:00000382 083B000110FC    	   460: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:00000388 67FE            	   461:             beq.s *               * branch if Z set
01:0000038A 083B000710FC    	   462: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:00000390 66FE            	   463:             bne.s *               * branch if Z clear
                            	   464: *             EA = n(PC,R.L)  - BYTE only
01:00000392 083B000008FC    	   465: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:00000398 66FE            	   466:             bne.s *               * branch if Z clear
01:0000039A 083B000118FC    	   467: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:000003A0 67FE            	   468:             beq.s *               * branch if Z set
01:000003A2 083B000718FC    	   469: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:000003A8 66FE            	   470:             bne.s *               * branch if Z clear
                            	   471: *             EA = n(PC,A.W)  - BYTE only
01:000003AA 083B000090FC    	   472: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:000003B0 66FE            	   473:             bne.s *               * branch if Z clear
01:000003B2 083B0001A0FC    	   474: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:000003B8 67FE            	   475:             beq.s *               * branch if Z set
01:000003BA 083B0007A0FC    	   476: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:000003C0 66FE            	   477:             bne.s *               * branch if Z clear
                            	   478: *             EA = n(PC,A.L)  - BYTE only
01:000003C2 083B000098FC    	   479: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:000003C8 66FE            	   480:             bne.s *               * branch if Z clear
01:000003CA 083B0001A8FC    	   481: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:000003D0 67FE            	   482:             beq.s *               * branch if Z set
01:000003D2 083B0007A8FC    	   483: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:000003D8 66FE            	   484: op_BTST12:  bne.s *               * branch if Z clear
                            	   485: 
                            	   486: 
                            	   487: 
                            	   488: * Bit Number.s Dynamic
                            	   489: 
                            	   490: *             EA = Dn  - LONG only
01:000003DA 203C80000001    	   491:             move.l #$80000001,d0      * populate test data
01:000003E0 7A00            	   492:             move.l #0,d5              * populate bit.s number to test
01:000003E2 7C01            	   493:             move.l #1,d6              * populate bit.s number to test
01:000003E4 7E1F            	   494:             move.l #31,d7              * populate bit.s number to test
                            	   495: 
01:000003E6 0B00            	   496:             btst.l d5,d0
01:000003E8 67FE            	   497:             beq.s *               * branch if Z set
01:000003EA 0D00            	   498:             btst.l d6,d0              *
01:000003EC 66FE            	   499:             bne.s *               * branch if Z clear
01:000003EE 0F00            	   500:             btst.l d7,d0             *
01:000003F0 67FE            	   501:             beq.s *               * branch if Z set
                            	   502: 
                            	   503: 
                            	   504: *             EA = (An)  - BYTE only
01:000003F2 7A00            	   505:             move.l #0,d5              * populate bit.s number to test
01:000003F4 7C01            	   506:             move.l #1,d6              * populate bit.s number to test
01:000003F6 7E07            	   507:             move.l #7,d7              * populate bit.s number to test
01:000003F8 307C0100        	   508:             move.l #$00000100,a0      * point to memory to address 0x100
01:000003FC 10BC0081        	   509:             move.b #$81,(a0)          * populate test data
01:00000400 1210            	   510:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000402 0B10            	   511:             btst.b d5,(a0)
01:00000404 67FE            	   512:             beq.s *               * branch if Z set
01:00000406 0D10            	   513:             btst.b d6,(a0)            *
01:00000408 66FE            	   514:             bne.s *               * branch if Z clear
01:0000040A 0F10            	   515:             btst.b d7,(a0)            *
01:0000040C 67FE            	   516:             beq.s *               * branch if Z set
                            	   517: 
                            	   518: * ---
                            	   519: 
                            	   520: 
                            	   521: *             EA = (An)+  - BYTE only
01:0000040E 307C0100        	   522:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000412 10FC0001        	   523:             move.b #$01,(a0)+         * populate test data
01:00000416 10FC00FC        	   524:             move.b #$FC,(a0)+         * populate test data
01:0000041A 10FC0080        	   525:             move.b #$80,(a0)+         * populate test data
01:0000041E 307C0100        	   526:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000422 0B18            	   527:             btst.b d5,(a0)+
01:00000424 67FE            	   528:             beq.s *               * branch if Z set
01:00000426 0D18            	   529:             btst.b d6,(a0)+           *
01:00000428 66FE            	   530:             bne.s *               * branch if Z clear
01:0000042A 0F18            	   531:             btst.b d7,(a0)+           *
01:0000042C 67FE            	   532:             beq.s *               * branch if Z set
                            	   533: 
                            	   534: 
                            	   535: *             EA = -(An)  - BYTE only
01:0000042E 307C0100        	   536:             move.l #$00000100,a0      * point to memory to address
01:00000432 10FC0080        	   537:             move.b #$80,(a0)+         * populate test data
01:00000436 10FC00FC        	   538:             move.b #$FC,(a0)+         * populate test data
01:0000043A 10FC0001        	   539:             move.b #$01,(a0)+         * populate test data
01:0000043E 307C0103        	   540:             move.l #$00000103,a0      * point to memory to address
01:00000442 0B20            	   541:             btst.b d5,-(a0)
01:00000444 67FE            	   542:             beq.s *               * branch if Z set
01:00000446 0D20            	   543:             btst.b d6,-(a0)           *
01:00000448 66FE            	   544:             bne.s *               * branch if Z clear
01:0000044A 0F20            	   545:             btst.b d7,-(a0)           *
01:0000044C 67FE            	   546:             beq.s *               * branch if Z set
                            	   547: 
                            	   548: 
                            	   549: *             EA = n(An)  - BYTE only
01:0000044E 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address
01:00000452 10FC0001        	   551:             move.b #$01,(a0)+         * populate test data
01:00000456 10FC00FC        	   552:             move.b #$FC,(a0)+         * populate test data
01:0000045A 10FC0080        	   553:             move.b #$80,(a0)+         * populate test data
01:0000045E 307C0100        	   554:             move.l #$00000100,a0      * point to memory to address
01:00000462 0B10            	   555:             btst.b d5,0(a0)
01:00000464 67FE            	   556:             beq.s *               * branch if Z set
01:00000466 0D280001        	   557:             btst.b d6,1(a0)           *
01:0000046A 66FE            	   558:             bne.s *               * branch if Z clear
01:0000046C 0F280002        	   559:             btst.b d7,2(a0)           *
01:00000470 67FE            	   560:             beq.s *               * branch if Z set
                            	   561: 
                            	   562: 
                            	   563: *             EA = n(An,R.W)  - BYTE only
01:00000472 307C0100        	   564:             move.l #$00000100,a0      * point to memory to address
01:00000476 93C9            	   565:             move.l #$00000000,a1      * point to memory to address
01:00000478 347C0001        	   566:             move.l #$00000001,a2      * point to memory to address
01:0000047C 7000            	   567:             moveq  #$00000000,d0      * point to memory to address
01:0000047E 7201            	   568:             moveq  #$00000001,d1      * point to memory to address
01:00000480 0B300000        	   569:             btst.b d5,0(a0,d0.w)
01:00000484 67FE            	   570:             beq.s *               * branch if Z set
01:00000486 0D301000        	   571:             btst.b d6,0(a0,d1.w)      *
01:0000048A 66FE            	   572:             bne.s *               * branch if Z clear
01:0000048C 0F301001        	   573:             btst.b d7,1(a0,d1.w)      *
01:00000490 67FE            	   574:             beq.s *               * branch if Z set
                            	   575: *             EA = n(An,R.L)  - BYTE only
01:00000492 0B300800        	   576:             btst.b d5,0(a0,d0.l)
01:00000496 67FE            	   577:             beq.s *               * branch if Z set
01:00000498 0D301800        	   578:             btst.b d6,0(a0,d1.l)      *
01:0000049C 66FE            	   579:             bne.s *               * branch if Z clear
01:0000049E 0F301801        	   580:             btst.b d7,1(a0,d1.l)      *
01:000004A2 67FE            	   581:             beq.s *               * branch if Z set
                            	   582: *             EA = n(An,A.W)  - BYTE only
01:000004A4 0B309000        	   583:             btst.b d5,0(a0,a1.w)
01:000004A8 67FE            	   584:             beq.s *               * branch if Z set
01:000004AA 0D30A000        	   585:             btst.b d6,0(a0,a2.w)      *
01:000004AE 66FE            	   586:             bne.s *               * branch if Z clear
01:000004B0 0F30A001        	   587:             btst.b d7,1(a0,a2.w)      *
01:000004B4 67FE            	   588:             beq.s *               * branch if Z set
                            	   589: *             EA = n(An,A.L)  - BYTE only
01:000004B6 0B309800        	   590:             btst.b d5,0(a0,a1.l)
01:000004BA 67FE            	   591:             beq.s *               * branch if Z set
01:000004BC 0D30A800        	   592:             btst.b d6,0(a0,a2.l)      *
01:000004C0 66FE            	   593:             bne.s *               * branch if Z clear
01:000004C2 0F30A801        	   594:             btst.b d7,1(a0,a2.l)      *
01:000004C6 67FE            	   595:             beq.s *               * branch if Z set
                            	   596: 
                            	   597: 
                            	   598: *             EA = x.W  - BYTE only
01:000004C8 0B380100        	   599:             btst.b d5,$0100
01:000004CC 67FE            	   600:             beq.s *               * branch if Z set
01:000004CE 0D380101        	   601:             btst.b d6,$0101           *
01:000004D2 66FE            	   602:             bne.s *               * branch if Z clear
01:000004D4 0F380102        	   603:             btst.b d7,$0102           *
01:000004D8 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: 
                            	   606: 
                            	   607: *             EA = x.L  - BYTE only
01:000004DA 207C0000F100    	   608:             move.l #$F100,a0      * point to memory to address 0x100
01:000004E0 10FC0001        	   609:             move.b #$01,(a0)+         * populate test data
01:000004E4 10FC00FC        	   610:             move.b #$FC,(a0)+         * populate test data
01:000004E8 10FC0080        	   611:             move.b #$80,(a0)+         * populate test data
01:000004EC 0B390000F100    	   612:             btst.b d5,$F100
01:000004F2 67FE            	   613:             beq.s *               * branch if Z set
01:000004F4 0D390000F101    	   614:             btst.b d6,$F101       *
01:000004FA 66FE            	   615:             bne.s *               * branch if Z clear
01:000004FC 0F390000F102    	   616:             btst.b d7,$F102       *
01:00000502 67FE            	   617:             beq.s *               * branch if Z set
                            	   618: 
                            	   619: 
                            	   620: *             EA = x(PC)  - BYTE only
01:00000504 7C03            	   621:             move.l #3,d6              * populate bit.s number to test
01:00000506 7E06            	   622:             move.l #6,d7              * populate bit.s number to test
01:00000508 4BFAFCE2        	   623:             lea op_BTST(pc),a5
01:0000050C 0B3AFCDE        	   624:             btst.b d5,op_BTST(pc)
01:00000510 66FE            	   625:             bne.s *               * branch if Z clear
01:00000512 0D3AFE62        	   626:             btst.b d6,op_BTST0(pc)     *
01:00000516 67FE            	   627:             beq.s *               * branch if Z set
01:00000518 0F3AFEBE        	   628:             btst.b d7,op_BTST12(pc)    *
01:0000051C 67FE            	   629:             beq.s *               * branch if Z set
                            	   630: 
                            	   631: 
                            	   632: *             EA = n(PC,R.W)  - BYTE only
01:0000051E 307C0100        	   633:             move.l #$00000100,a0      * point to memory to address
01:00000522 93C9            	   634:             move.l #$00000000,a1      * point to memory to address
01:00000524 347C0001        	   635:             move.l #$00000001,a2      * point to memory to address
01:00000528 7000            	   636:             moveq  #$00000000,d0      * point to memory to address
01:0000052A 7201            	   637:             moveq  #$00000001,d1      * point to memory to address
01:0000052C 7C01            	   638:             move.l #1,d6              * populate bit.s number to test
01:0000052E 7E07            	   639:             move.l #7,d7              * populate bit.s number to test
                            	   640: 
01:00000530 0B3B00FE        	   641: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:00000534 67FE            	   642:             beq.s *               * branch if Z set
01:00000536 4BFB1002        	   643:             lea op_BTST21(pc,d1.w),a5
01:0000053A 0D3B10FE        	   644: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:0000053E 67FE            	   645:             beq.s *               * branch if Z set
01:00000540 0F3B10FE        	   646: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:00000544 66FE            	   647:             bne.s *               * branch if Z clear
                            	   648: *             EA = n(PC,R.L)  - BYTE only
01:00000546 0B3B08FE        	   649: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:0000054A 67FE            	   650:             beq.s *               * branch if Z set
01:0000054C 0D3B18FE        	   651: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:00000550 67FE            	   652:             beq.s *               * branch if Z set
01:00000552 0F3B18FE        	   653: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:00000556 66FE            	   654:             bne.s *               * branch if Z clear
                            	   655: *             EA = n(PC,A.W)  - BYTE only
01:00000558 0B3B90FE        	   656: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:0000055C 67FE            	   657:             beq.s *               * branch if Z set
01:0000055E 0D3BA0FE        	   658: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:00000562 67FE            	   659:             beq.s *               * branch if Z set
01:00000564 0F3BA0FE        	   660: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:00000568 66FE            	   661:             bne.s *               * branch if Z clear
                            	   662: *             EA = n(PC,A.L)  - BYTE only
01:0000056A 0B3B98FE        	   663: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:0000056E 67FE            	   664:             beq.s *               * branch if Z set
01:00000570 0D3BA8FE        	   665: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:00000574 67FE            	   666:             beq.s *               * branch if Z set
01:00000576 0F3BA8FE        	   667: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:0000057A 66FE            	   668: op_BTST32:  bne.s *               * branch if Z clear
                            	   669: 
                            	   670: *             EA = #x  - BYTE only
                            	   671: 
01:0000057C 7A00            	   672:             move.l #0,d5              * populate bit.s number to test
01:0000057E 7C03            	   673:             move.l #3,d6              * populate bit.s number to test
01:00000580 7E07            	   674:             move.l #7,d7              * populate bit.s number to test
                            	   675: 
01:00000582 0B3C0088        	   676:             btst.b d5,#$88
01:00000586 66FE            	   677:             bne.s *               * branch if Z clear
01:00000588 0D3C0088        	   678:             btst.b d6,#$88
01:0000058C 67FE            	   679:             beq.s *               * branch if Z set
01:0000058E 0F3C0088        	   680:             btst.b d7,#$88
01:00000592 67FE            	   681:             beq.s *               * branch if Z set
                            	   682: 
                            	   683: 
01:00000594 4E75            	   684:     rts
                            	   685: 
                            	   686: *-----------------------------------------------------------
                            	   687: *-----------------------------------------------------------
                            	   688: * OPCODE : BCHG
                            	   689: *-----------------------------------------------------------
                            	   690: *-----------------------------------------------------------
                            	   691: op_BCHG:
                            	   692: 
                            	   693: 
                            	   694: *  Bit Number.s Static
                            	   695: 
                            	   696: *             EA = Dn  - LONG only
01:00000596 203C80000001    	   697:             move.l #$80000001,d0      * populate test data
01:0000059C 08400000        	   698:             bchg.l #0,d0
01:000005A0 67FE            	   699:             beq.s *               * branch if Z set
01:000005A2 08400001        	   700:             bchg.l #1,d0              *
01:000005A6 66FE            	   701:             bne.s *               * branch if Z clear
01:000005A8 0840001F        	   702:             bchg.l #31,d0             *
01:000005AC 67FE            	   703:             beq.s *               * branch if Z set
01:000005AE 0C8000000002    	   704:             cmpi.l #$00000002,d0
01:000005B4 66FE            	   705:             bne.s *               * branch if Z clear
                            	   706: 
                            	   707: 
                            	   708: *             EA = (An)  - BYTE only
01:000005B6 307C0100        	   709:             move.l #$00000100,a0      * point to memory to address 0x100
01:000005BA 10BC0081        	   710:             move.b #$81,(a0)          * populate test data
01:000005BE 1210            	   711:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:000005C0 08500000        	   712:             bchg.b #0,(a0)
01:000005C4 67FE            	   713:             beq.s *               * branch if Z set
01:000005C6 08500001        	   714:             bchg.b #1,(a0)            *
01:000005CA 66FE            	   715:             bne.s *               * branch if Z clear
01:000005CC 08500007        	   716:             bchg.b #7,(a0)            *
01:000005D0 67FE            	   717:             beq.s *               * branch if Z set
01:000005D2 0C100002        	   718:             cmpi.b #$02,(a0)
01:000005D6 66FE            	   719:             bne.s *               * branch if Z clear
                            	   720: 
                            	   721: *             EA = (An)+  - BYTE only
01:000005D8 307C0100        	   722:             move.l #$00000100,a0      * point to memory to address 0x100
01:000005DC 10FC0001        	   723:             move.b #$01,(a0)+         * populate test data
01:000005E0 10FC00FC        	   724:             move.b #$FC,(a0)+         * populate test data
01:000005E4 10FC0080        	   725:             move.b #$80,(a0)+         * populate test data
01:000005E8 307C0100        	   726:             move.l #$00000100,a0      * point to memory to address 0x100
01:000005EC 08580000        	   727:             bchg.b #0,(a0)+
01:000005F0 67FE            	   728:             beq.s *               * branch if Z set
01:000005F2 08580001        	   729:             bchg.b #1,(a0)+           *
01:000005F6 66FE            	   730:             bne.s *               * branch if Z clear
01:000005F8 08580007        	   731:             bchg.b #7,(a0)+           *
01:000005FC 67FE            	   732:             beq.s *               * branch if Z set
01:000005FE 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000602 4A18            	   734:             cmpi.b #$00,(a0)+
01:00000604 66FE            	   735:             bne.s *               * branch if Z clear
01:00000606 0C1800FE        	   736:             cmpi.b #$FE,(a0)+
01:0000060A 66FE            	   737:             bne.s *               * branch if Z clear
01:0000060C 4A18            	   738:             cmpi.b #$00,(a0)+
01:0000060E 66FE            	   739:             bne.s *               * branch if Z clear
                            	   740: 
                            	   741: *             EA = -(An)  - BYTE only
01:00000610 307C0100        	   742:             move.l #$00000100,a0      * point to memory to address
01:00000614 10FC0080        	   743:             move.b #$80,(a0)+         * populate test data
01:00000618 10FC00FC        	   744:             move.b #$FC,(a0)+         * populate test data
01:0000061C 10FC0001        	   745:             move.b #$01,(a0)+         * populate test data
01:00000620 307C0103        	   746:             move.l #$00000103,a0      * point to memory to address
01:00000624 08600000        	   747:             bchg.b #0,-(a0)
01:00000628 67FE            	   748:             beq.s *               * branch if Z set
01:0000062A 08600001        	   749:             bchg.b #1,-(a0)           *
01:0000062E 66FE            	   750:             bne.s *               * branch if Z clear
01:00000630 08600007        	   751:             bchg.b #7,-(a0)           *
01:00000634 67FE            	   752:             beq.s *               * branch if Z set
01:00000636 307C0103        	   753:             move.l #$00000103,a0      * point to memory to address 0x100
01:0000063A 4A20            	   754:             cmpi.b #$00,-(a0)
01:0000063C 66FE            	   755:             bne.s *               * branch if Z clear
01:0000063E 0C2000FE        	   756:             cmpi.b #$FE,-(a0)
01:00000642 66FE            	   757:             bne.s *               * branch if Z clear
01:00000644 4A20            	   758:             cmpi.b #$00,-(a0)
01:00000646 66FE            	   759:             bne.s *               * branch if Z clear
                            	   760: 
                            	   761: 
                            	   762: *             EA = n(An)  - BYTE only
01:00000648 307C0100        	   763:             move.l #$00000100,a0      * point to memory to address
01:0000064C 10FC0001        	   764:             move.b #$01,(a0)+         * populate test data
01:00000650 10FC00FC        	   765:             move.b #$FC,(a0)+         * populate test data
01:00000654 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
01:00000658 307C0100        	   767:             move.l #$00000100,a0      * point to memory to address
01:0000065C 08500000        	   768:             bchg.b #0,0(a0)
01:00000660 67FE            	   769:             beq.s *               * branch if Z set
01:00000662 086800010001    	   770:             bchg.b #1,1(a0)           *
01:00000668 66FE            	   771:             bne.s *               * branch if Z clear
01:0000066A 086800070002    	   772:             bchg.b #7,2(a0)           *
01:00000670 67FE            	   773:             beq.s *               * branch if Z set
01:00000672 307C0100        	   774:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000676 4A18            	   775:             cmpi.b #$00,(a0)+
01:00000678 66FE            	   776:             bne.s *               * branch if Z clear
01:0000067A 0C1800FE        	   777:             cmpi.b #$FE,(a0)+
01:0000067E 66FE            	   778:             bne.s *               * branch if Z clear
01:00000680 4A18            	   779:             cmpi.b #$00,(a0)+
01:00000682 66FE            	   780:             bne.s *               * branch if Z clear
                            	   781: 
                            	   782: 
                            	   783: *             EA = n(An,D.W)  - BYTE only
01:00000684 307C0100        	   784:             move.l #$00000100,a0      * point to memory to address
01:00000688 93C9            	   785:             move.l #$00000000,a1      * point to memory to address
01:0000068A 347C0001        	   786:             move.l #$00000001,a2      * point to memory to address
01:0000068E 7000            	   787:             moveq  #$00000000,d0      * point to memory to address
01:00000690 7201            	   788:             moveq  #$00000001,d1      * point to memory to address
01:00000692 087000000000    	   789:             bchg.b #0,0(a0,d0.w)
01:00000698 66FE            	   790:             bne.s *               * branch if Z clear
01:0000069A 087000011000    	   791:             bchg.b #1,0(a0,d1.w)      *
01:000006A0 67FE            	   792:             beq.s *               * branch if Z set
01:000006A2 087000071001    	   793:             bchg.b #7,1(a0,d1.w)      *
01:000006A8 66FE            	   794:             bne.s *               * branch if Z clear
                            	   795: *             EA = n(An,D.L)  - BYTE only
01:000006AA 087000000800    	   796:             bchg.b #0,0(a0,d0.l)
01:000006B0 67FE            	   797:             beq.s *               * branch if Z set
01:000006B2 087000011800    	   798:             bchg.b #1,0(a0,d1.l)      *
01:000006B8 66FE            	   799:             bne.s *               * branch if Z clear
01:000006BA 087000071801    	   800:             bchg.b #7,1(a0,d1.l)      *
01:000006C0 67FE            	   801:             beq.s *               * branch if Z set
                            	   802: *             EA = n(An,A.W)  - BYTE only
01:000006C2 087000009000    	   803:             bchg.b #0,0(a0,a1.w)
01:000006C8 66FE            	   804:             bne.s *               * branch if Z clear
01:000006CA 08700001A000    	   805:             bchg.b #1,0(a0,a2.w)      *
01:000006D0 67FE            	   806:             beq.s *               * branch if Z set
01:000006D2 08700007A001    	   807:             bchg.b #7,1(a0,a2.w)      *
01:000006D8 66FE            	   808:             bne.s *               * branch if Z clear
                            	   809: *             EA = n(An,A.L)  - BYTE only
01:000006DA 087000009800    	   810:             bchg.b #0,0(a0,a1.l)
01:000006E0 67FE            	   811:             beq.s *               * branch if Z set
01:000006E2 08700001A800    	   812:             bchg.b #1,0(a0,a2.l)      *
01:000006E8 66FE            	   813:             bne.s *               * branch if Z clear
01:000006EA 08700007A801    	   814:             bchg.b #7,1(a0,a2.l)      *
01:000006F0 67FE            	   815:             beq.s *               * branch if Z set
01:000006F2 307C0100        	   816:             move.l #$00000100,a0      * point to memory to address 0x100
01:000006F6 4A18            	   817:             cmpi.b #$00,(a0)+
01:000006F8 66FE            	   818:             bne.s *               * branch if Z clear
01:000006FA 0C1800FE        	   819:             cmpi.b #$FE,(a0)+
01:000006FE 66FE            	   820:             bne.s *               * branch if Z clear
01:00000700 4A18            	   821:             cmpi.b #$00,(a0)+
01:00000702 66FE            	   822:             bne.s *               * branch if Z clear
                            	   823: 
                            	   824: 
                            	   825: *             EA = x.W  - BYTE only
01:00000704 087800000100    	   826:             bchg.b #0,$0100
01:0000070A 66FE            	   827:             bne.s *               * branch if Z clear
01:0000070C 087800010101    	   828:             bchg.b #1,$0101           *
01:00000712 67FE            	   829:             beq.s *               * branch if Z set
01:00000714 087800070102    	   830:             bchg.b #7,$0102           *
01:0000071A 66FE            	   831:             bne.s *               * branch if Z clear
01:0000071C 307C0100        	   832:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000720 0C180001        	   833:             cmpi.b #$01,(a0)+
01:00000724 66FE            	   834:             bne.s *               * branch if Z clear
01:00000726 0C1800FC        	   835:             cmpi.b #$FC,(a0)+
01:0000072A 66FE            	   836:             bne.s *               * branch if Z clear
01:0000072C 0C180080        	   837:             cmpi.b #$80,(a0)+
01:00000730 66FE            	   838:             bne.s *               * branch if Z clear
                            	   839: 
                            	   840: *             EA = x.L  - BYTE only
01:00000732 207C0000F100    	   841:             move.l #$F100,a0      * point to memory to address 0x100
01:00000738 10FC0001        	   842:             move.b #$01,(a0)+         * populate test data
01:0000073C 10FC00FC        	   843:             move.b #$FC,(a0)+         * populate test data
01:00000740 10FC0080        	   844:             move.b #$80,(a0)+         * populate test data
01:00000744 087900000000F100	   845:             bchg.b #0,$F100
01:0000074C 67FE            	   846:             beq.s *               * branch if Z set
01:0000074E 087900010000F101	   847:             bchg.b #1,$F101       *
01:00000756 66FE            	   848:             bne.s *               * branch if Z clear
01:00000758 087900070000F102	   849:             bchg.b #7,$F102       *
01:00000760 67FE            	   850:             beq.s *               * branch if Z set
01:00000762 307C0100        	   851:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000766 0C180001        	   852:             cmpi.b #$01,(a0)+
01:0000076A 66FE            	   853:             bne.s *               * branch if Z clear
01:0000076C 0C1800FC        	   854:             cmpi.b #$FC,(a0)+
01:00000770 66FE            	   855:             bne.s *               * branch if Z clear
01:00000772 0C180080        	   856:             cmpi.b #$80,(a0)+
01:00000776 66FE            	   857:             bne.s *               * branch if Z clear
                            	   858: 
                            	   859: 
                            	   860: * Bit Number.s Dynamic
                            	   861: 
                            	   862: *             EA = Dn  - LONG only
01:00000778 203C80000001    	   863:             move.l #$80000001,d0      * populate test data
01:0000077E 7A00            	   864:             move.l #0,d5              * populate bit.s number to test
01:00000780 7C01            	   865:             move.l #1,d6              * populate bit.s number to test
01:00000782 7E1F            	   866:             move.l #31,d7              * populate bit.s number to test
                            	   867: 
01:00000784 0B40            	   868:             bchg.l d5,d0
01:00000786 67FE            	   869:             beq.s *               * branch if Z set
01:00000788 0D40            	   870:             bchg.l d6,d0              *
01:0000078A 66FE            	   871:             bne.s *               * branch if Z clear
01:0000078C 0F40            	   872:             bchg.l d7,d0             *
01:0000078E 67FE            	   873:             beq.s *               * branch if Z set
01:00000790 0C8000000002    	   874:             cmpi.l #$00000002,d0
01:00000796 66FE            	   875:             bne.s *               * branch if Z clear
                            	   876: 
                            	   877: 
                            	   878: *             EA = (An)  - BYTE only
01:00000798 7A00            	   879:             move.l #0,d5              * populate bit.s number to test
01:0000079A 7C01            	   880:             move.l #1,d6              * populate bit.s number to test
01:0000079C 7E07            	   881:             move.l #7,d7              * populate bit.s number to test
01:0000079E 307C0100        	   882:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007A2 10BC0081        	   883:             move.b #$81,(a0)          * populate test data
01:000007A6 1210            	   884:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:000007A8 0B50            	   885:             bchg.b d5,(a0)
01:000007AA 67FE            	   886:             beq.s *               * branch if Z set
01:000007AC 0D50            	   887:             bchg.b d6,(a0)            *
01:000007AE 66FE            	   888:             bne.s *               * branch if Z clear
01:000007B0 0F50            	   889:             bchg.b d7,(a0)            *
01:000007B2 67FE            	   890:             beq.s *               * branch if Z set
01:000007B4 0C100002        	   891:             cmpi.b #$02,(a0)
01:000007B8 66FE            	   892:             bne.s *               * branch if Z clear
                            	   893: 
                            	   894: 
                            	   895: *             EA = (An)+  - BYTE only
01:000007BA 307C0100        	   896:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007BE 10FC0001        	   897:             move.b #$01,(a0)+         * populate test data
01:000007C2 10FC00FC        	   898:             move.b #$FC,(a0)+         * populate test data
01:000007C6 10FC0080        	   899:             move.b #$80,(a0)+         * populate test data
01:000007CA 307C0100        	   900:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007CE 0B58            	   901:             bchg.b d5,(a0)+
01:000007D0 67FE            	   902:             beq.s *               * branch if Z set
01:000007D2 0D58            	   903:             bchg.b d6,(a0)+           *
01:000007D4 66FE            	   904:             bne.s *               * branch if Z clear
01:000007D6 0F58            	   905:             bchg.b d7,(a0)+           *
01:000007D8 67FE            	   906:             beq.s *               * branch if Z set
01:000007DA 307C0100        	   907:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007DE 4A18            	   908:             cmpi.b #$00,(a0)+
01:000007E0 66FE            	   909:             bne.s *               * branch if Z clear
01:000007E2 0C1800FE        	   910:             cmpi.b #$FE,(a0)+
01:000007E6 66FE            	   911:             bne.s *               * branch if Z clear
01:000007E8 4A18            	   912:             cmpi.b #$00,(a0)+
01:000007EA 66FE            	   913:             bne.s *               * branch if Z clear
                            	   914: 
                            	   915: *             EA = -(An)  - BYTE only
01:000007EC 307C0100        	   916:             move.l #$00000100,a0      * point to memory to address
01:000007F0 10FC0080        	   917:             move.b #$80,(a0)+         * populate test data
01:000007F4 10FC00FC        	   918:             move.b #$FC,(a0)+         * populate test data
01:000007F8 10FC0001        	   919:             move.b #$01,(a0)+         * populate test data
01:000007FC 307C0103        	   920:             move.l #$00000103,a0      * point to memory to address
01:00000800 0B60            	   921:             bchg.b d5,-(a0)
01:00000802 67FE            	   922:             beq.s *               * branch if Z set
01:00000804 0D60            	   923:             bchg.b d6,-(a0)           *
01:00000806 66FE            	   924:             bne.s *               * branch if Z clear
01:00000808 0F60            	   925:             bchg.b d7,-(a0)           *
01:0000080A 67FE            	   926:             beq.s *               * branch if Z set
01:0000080C 307C0103        	   927:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000810 4A20            	   928:             cmpi.b #$00,-(a0)
01:00000812 66FE            	   929:             bne.s *               * branch if Z clear
01:00000814 0C2000FE        	   930:             cmpi.b #$FE,-(a0)
01:00000818 66FE            	   931:             bne.s *               * branch if Z clear
01:0000081A 4A20            	   932:             cmpi.b #$00,-(a0)
01:0000081C 66FE            	   933:             bne.s *               * branch if Z clear
                            	   934: 
                            	   935: *             EA = n(An)  - BYTE only
01:0000081E 307C0100        	   936:             move.l #$00000100,a0      * point to memory to address
01:00000822 10FC0001        	   937:             move.b #$01,(a0)+         * populate test data
01:00000826 10FC00FC        	   938:             move.b #$FC,(a0)+         * populate test data
01:0000082A 10FC0080        	   939:             move.b #$80,(a0)+         * populate test data
01:0000082E 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
01:00000832 0B50            	   941:             bchg.b d5,0(a0)
01:00000834 67FE            	   942:             beq.s *               * branch if Z set
01:00000836 0D680001        	   943:             bchg.b d6,1(a0)           *
01:0000083A 66FE            	   944:             bne.s *               * branch if Z clear
01:0000083C 0F680002        	   945:             bchg.b d7,2(a0)           *
01:00000840 67FE            	   946:             beq.s *               * branch if Z set
01:00000842 307C0100        	   947:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000846 4A18            	   948:             cmpi.b #$00,(a0)+
01:00000848 66FE            	   949:             bne.s *               * branch if Z clear
01:0000084A 0C1800FE        	   950:             cmpi.b #$FE,(a0)+
01:0000084E 66FE            	   951:             bne.s *               * branch if Z clear
01:00000850 4A18            	   952:             cmpi.b #$00,(a0)+
01:00000852 66FE            	   953:             bne.s *               * branch if Z clear
                            	   954: 
                            	   955: *             EA = n(An,R.W)  - BYTE only
01:00000854 307C0100        	   956:             move.l #$00000100,a0      * point to memory to address
01:00000858 93C9            	   957:             move.l #$00000000,a1      * point to memory to address
01:0000085A 347C0001        	   958:             move.l #$00000001,a2      * point to memory to address
01:0000085E 7000            	   959:             moveq  #$00000000,d0      * point to memory to address
01:00000860 7201            	   960:             moveq  #$00000001,d1      * point to memory to address
01:00000862 0B700000        	   961:             bchg.b d5,0(a0,d0.w)
01:00000866 66FE            	   962:             bne.s *               * branch if Z clear
01:00000868 0D701000        	   963:             bchg.b d6,0(a0,d1.w)      *
01:0000086C 67FE            	   964:             beq.s *               * branch if Z set
01:0000086E 0F701001        	   965:             bchg.b d7,1(a0,d1.w)      *
01:00000872 66FE            	   966:             bne.s *               * branch if Z clear
                            	   967: *             EA = n(An,R.L)  - BYTE only
01:00000874 0B700800        	   968:             bchg.b d5,0(a0,d0.l)
01:00000878 67FE            	   969:             beq.s *               * branch if Z set
01:0000087A 0D701800        	   970:             bchg.b d6,0(a0,d1.l)      *
01:0000087E 66FE            	   971:             bne.s *               * branch if Z clear
01:00000880 0F701801        	   972:             bchg.b d7,1(a0,d1.l)      *
01:00000884 67FE            	   973:             beq.s *               * branch if Z set
                            	   974: *             EA = n(An,A.W)  - BYTE only
01:00000886 0B709000        	   975:             bchg.b d5,0(a0,a1.w)
01:0000088A 66FE            	   976:             bne.s *               * branch if Z clear
01:0000088C 0D70A000        	   977:             bchg.b d6,0(a0,a2.w)      *
01:00000890 67FE            	   978:             beq.s *               * branch if Z set
01:00000892 0F70A001        	   979:             bchg.b d7,1(a0,a2.w)      *
01:00000896 66FE            	   980:             bne.s *               * branch if Z clear
                            	   981: *             EA = n(An,A.L)  - BYTE only
01:00000898 0B709800        	   982:             bchg.b d5,0(a0,a1.l)
01:0000089C 67FE            	   983:             beq.s *               * branch if Z set
01:0000089E 0D70A800        	   984:             bchg.b d6,0(a0,a2.l)      *
01:000008A2 66FE            	   985:             bne.s *               * branch if Z clear
01:000008A4 0F70A801        	   986:             bchg.b d7,1(a0,a2.l)      *
01:000008A8 67FE            	   987:             beq.s *               * branch if Z set
01:000008AA 4A18            	   988:             cmpi.b #$00,(a0)+
01:000008AC 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: 
                            	   991: *             EA = x.W  - BYTE only
01:000008AE 0B780100        	   992:             bchg.b d5,$0100
01:000008B2 66FE            	   993:             bne.s *               * branch if Z clear
01:000008B4 0D780101        	   994:             bchg.b d6,$0101           *
01:000008B8 67FE            	   995:             beq.s *               * branch if Z set
01:000008BA 0F780102        	   996:             bchg.b d7,$0102           *
01:000008BE 66FE            	   997:             bne.s *               * branch if Z clear
01:000008C0 0C1800FC        	   998:             cmpi.b #$FC,(a0)+
01:000008C4 66FE            	   999:             bne.s *               * branch if Z clear
                            	  1000: 
                            	  1001: *             EA = x.L  - BYTE only
01:000008C6 207C0000F100    	  1002:             move.l #$F100,a0      * point to memory to address 0x100
01:000008CC 10FC0001        	  1003:             move.b #$01,(a0)+         * populate test data
01:000008D0 10FC00FC        	  1004:             move.b #$FC,(a0)+         * populate test data
01:000008D4 10FC0080        	  1005:             move.b #$80,(a0)+         * populate test data
01:000008D8 0B790000F100    	  1006:             bchg.b d5,$F100
01:000008DE 67FE            	  1007:             beq.s *               * branch if Z set
01:000008E0 0D790000F101    	  1008:             bchg.b d6,$F101       *
01:000008E6 66FE            	  1009:             bne.s *               * branch if Z clear
01:000008E8 0F790000F102    	  1010:             bchg.b d7,$F102       *
01:000008EE 67FE            	  1011:             beq.s *               * branch if Z set
01:000008F0 207C0000F101    	  1012:             move.l #$F101,a0      * point to memory to address 0x100
01:000008F6 0C1000FE        	  1013:             cmpi.b #$FE,(a0)
01:000008FA 66FE            	  1014:             bne.s *               * branch if Z clear
                            	  1015: 
                            	  1016: 
01:000008FC 4E75            	  1017:     rts
                            	  1018: 
                            	  1019: *-----------------------------------------------------------
                            	  1020: *-----------------------------------------------------------
                            	  1021: * OPCODE : BCLR
                            	  1022: *-----------------------------------------------------------
                            	  1023: *-----------------------------------------------------------
                            	  1024: op_BCLR:
                            	  1025: 
                            	  1026: 
                            	  1027: *  Bit Number.s Static
                            	  1028: 
                            	  1029: *             EA = Dn  - LONG only
01:000008FE 203CFF0000FF    	  1030:             move.l #$FF0000FF,d0      * populate test data
01:00000904 08800000        	  1031:             bclr.l #0,d0
01:00000908 67FE            	  1032:             beq.s *               * branch if Z set
01:0000090A 08800001        	  1033:             bclr.l #1,d0              *
01:0000090E 67FE            	  1034:             beq.s *               * branch if Z set
01:00000910 0880000F        	  1035:             bclr.l #15,d0             *
01:00000914 66FE            	  1036:             bne.s *               * branch if Z clear
01:00000916 0880001F        	  1037:             bclr.l #31,d0             *
01:0000091A 67FE            	  1038:             beq.s *               * branch if Z set
01:0000091C 0C807F0000FC    	  1039:             cmpi.l #$7F0000FC,d0
01:00000922 66FE            	  1040:             bne.s *               * branch if Z clear
                            	  1041: 
                            	  1042: 
                            	  1043: *             EA = (An)  - BYTE only
01:00000924 307C0100        	  1044:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000928 10BC000F        	  1045:             move.b #$0F,(a0)          * populate test data
01:0000092C 08900000        	  1046:             bclr.b #0,(a0)
01:00000930 67FE            	  1047:             beq.s *               * branch if Z set
01:00000932 08900007        	  1048:             bclr.b #7,(a0)            *
01:00000936 66FE            	  1049:             bne.s *               * branch if Z clear
01:00000938 0C10000E        	  1050:             cmpi.b #$0E,(a0)
01:0000093C 66FE            	  1051:             bne.s *               * branch if Z clear
                            	  1052: 
                            	  1053: *             EA = (An)+  - BYTE only
01:0000093E 307C0100        	  1054:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000942 10FC0001        	  1055:             move.b #$01,(a0)+         * populate test data
01:00000946 10FC0000        	  1056:             move.b #$00,(a0)+         * populate test data
01:0000094A 307C0100        	  1057:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000094E 08980000        	  1058:             bclr.b #0,(a0)+
01:00000952 67FE            	  1059:             beq.s *               * branch if Z set
01:00000954 08980001        	  1060:             bclr.b #1,(a0)+           *
01:00000958 66FE            	  1061:             bne.s *               * branch if Z clear
01:0000095A 307C0100        	  1062:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000095E 4A18            	  1063:             cmpi.b #$00,(a0)+
01:00000960 66FE            	  1064:             bne.s *               * branch if Z clear
01:00000962 4A18            	  1065:             cmpi.b #$00,(a0)+
01:00000964 66FE            	  1066:             bne.s *               * branch if Z clear
                            	  1067: 
                            	  1068: 
                            	  1069: *             EA = -(An)  - BYTE only
01:00000966 307C0100        	  1070:             move.l #$00000100,a0      * point to memory to address
01:0000096A 10FC0001        	  1071:             move.b #$01,(a0)+         * populate test data
01:0000096E 10FC0080        	  1072:             move.b #$80,(a0)+         * populate test data
01:00000972 08A00007        	  1073:             bclr.b #7,-(a0)
01:00000976 67FE            	  1074:             beq.s *               * branch if Z set
01:00000978 08A00000        	  1075:             bclr.b #0,-(a0)           *
01:0000097C 67FE            	  1076:             beq.s *               * branch if Z set
01:0000097E 307C0102        	  1077:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000982 4A20            	  1078:             cmpi.b #$00,-(a0)
01:00000984 66FE            	  1079:             bne.s *               * branch if Z clear
01:00000986 4A20            	  1080:             cmpi.b #$00,-(a0)
01:00000988 66FE            	  1081:             bne.s *               * branch if Z clear
                            	  1082: 
                            	  1083: 
                            	  1084: *             EA = n(An)  - BYTE only
01:0000098A 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address
01:0000098E 10FC00FF        	  1086:             move.b #$FF,(a0)+         * populate test data
01:00000992 10FC00FF        	  1087:             move.b #$FF,(a0)+         * populate test data
01:00000996 307C0100        	  1088:             move.l #$00000100,a0      * point to memory to address
01:0000099A 08900000        	  1089:             bclr.b #0,0(a0)
01:0000099E 67FE            	  1090:             beq.s *               * branch if Z set
01:000009A0 08A800040001    	  1091:             bclr.b #4,1(a0)           *
01:000009A6 67FE            	  1092:             beq.s *               * branch if Z set
01:000009A8 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009AC 0C1800FE        	  1094:             cmpi.b #$FE,(a0)+
01:000009B0 66FE            	  1095:             bne.s *               * branch if Z clear
01:000009B2 0C1800EF        	  1096:             cmpi.b #$EF,(a0)+
01:000009B6 66FE            	  1097:             bne.s *               * branch if Z clear
                            	  1098: 
                            	  1099: 
                            	  1100: *             EA = n(An,D.W)  - BYTE only
01:000009B8 307C0100        	  1101:             move.l #$00000100,a0      * point to memory to address
01:000009BC 93C9            	  1102:             move.l #$00000000,a1      * point to memory to address
01:000009BE 347C0001        	  1103:             move.l #$00000001,a2      * point to memory to address
01:000009C2 7000            	  1104:             moveq  #$00000000,d0      * point to memory to address
01:000009C4 7201            	  1105:             moveq  #$00000001,d1      * point to memory to address
01:000009C6 10FC00FF        	  1106:             move.b #$FF,(a0)+         * populate test data
01:000009CA 10FC00FF        	  1107:             move.b #$FF,(a0)+         * populate test data
01:000009CE 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
01:000009D2 08B000000000    	  1109:             bclr.b #0,0(a0,d0.w)
01:000009D8 67FE            	  1110:             beq.s *               * branch if Z set
01:000009DA 08B000011000    	  1111:             bclr.b #1,0(a0,d1.w)      *
01:000009E0 67FE            	  1112:             beq.s *               * branch if Z set
01:000009E2 08B000021001    	  1113:             bclr.b #2,1(a0,d1.w)      *
01:000009E8 66FE            	  1114:             bne.s *               * branch if Z clear
                            	  1115: *             EA = n(An,D.L)  - BYTE only
01:000009EA 08B000030800    	  1116:             bclr.b #3,0(a0,d0.l)
01:000009F0 67FE            	  1117:             beq.s *               * branch if Z set
01:000009F2 08B000041800    	  1118:             bclr.b #4,0(a0,d1.l)      *
01:000009F8 67FE            	  1119:             beq.s *               * branch if Z set
01:000009FA 08B000051801    	  1120:             bclr.b #5,1(a0,d1.l)      *
01:00000A00 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: *             EA = n(An,A.W)  - BYTE only
01:00000A02 08B000069000    	  1123:             bclr.b #6,0(a0,a1.w)
01:00000A08 67FE            	  1124:             beq.s *               * branch if Z set
01:00000A0A 08B00001A000    	  1125:             bclr.b #1,0(a0,a2.w)      *
01:00000A10 66FE            	  1126:             bne.s *               * branch if Z clear
01:00000A12 08B00007A001    	  1127:             bclr.b #7,1(a0,a2.w)      *
01:00000A18 67FE            	  1128:             beq.s *               * branch if Z set
                            	  1129: *             EA = n(An,A.L)  - BYTE only
01:00000A1A 08B000009800    	  1130:             bclr.b #0,0(a0,a1.l)
01:00000A20 66FE            	  1131:             bne.s *               * branch if Z clear
01:00000A22 08B00000A800    	  1132:             bclr.b #0,0(a0,a2.l)      *
01:00000A28 67FE            	  1133:             beq.s *               * branch if Z set
01:00000A2A 08B00001A801    	  1134:             bclr.b #1,1(a0,a2.l)      *
01:00000A30 66FE            	  1135:             bne.s *               * branch if Z clear
01:00000A32 307C0100        	  1136:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A36 0C1800B6        	  1137:             cmpi.b #$B6,(a0)+
01:00000A3A 66FE            	  1138:             bne.s *               * branch if Z clear
01:00000A3C 0C1800EC        	  1139:             cmpi.b #$EC,(a0)+
01:00000A40 66FE            	  1140:             bne.s *               * branch if Z clear
01:00000A42 0C180059        	  1141:             cmpi.b #$59,(a0)+
01:00000A46 67FE            	  1142:             beq.s *               * branch if Z set
                            	  1143: 
                            	  1144: 
                            	  1145: *             EA = x.W  - BYTE only
01:00000A48 307C0100        	  1146:             move.l #$00000100,a0      * point to memory to address
01:00000A4C 10FC00FF        	  1147:             move.b #$FF,(a0)+         * populate test data
01:00000A50 08B800000100    	  1148:             bclr.b #0,$0100
01:00000A56 67FE            	  1149:             beq.s *               * branch if Z set
01:00000A58 08B800010100    	  1150:             bclr.b #1,$0100           *
01:00000A5E 67FE            	  1151:             beq.s *               * branch if Z set
01:00000A60 307C0100        	  1152:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A64 0C1800FC        	  1153:             cmpi.b #$FC,(a0)+
01:00000A68 66FE            	  1154:             bne.s *               * branch if Z clear
                            	  1155: 
                            	  1156: 
                            	  1157: *             EA = x.L  - BYTE only
01:00000A6A 207C0000F100    	  1158:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A70 10BC00FF        	  1159:             move.b #$FF,(a0)          * populate test data
01:00000A74 08B900000000F100	  1160:             bclr.b #0,$F100
01:00000A7C 67FE            	  1161:             beq.s *               * branch if Z set
01:00000A7E 08B900010000F100	  1162:             bclr.b #1,$F100       *
01:00000A86 67FE            	  1163:             beq.s *               * branch if Z set
01:00000A88 08B900020000F100	  1164:             bclr.b #2,$F100       *
01:00000A90 67FE            	  1165:             beq.s *               * branch if Z set
01:00000A92 207C0000F100    	  1166:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A98 0C1800F8        	  1167:             cmpi.b #$F8,(a0)+
01:00000A9C 66FE            	  1168:             bne.s *               * branch if Z clear
                            	  1169: 
                            	  1170: 
                            	  1171: * Bit Number.s Dynamic
                            	  1172: 
                            	  1173: *             EA = Dn  - LONG only
01:00000A9E 203CFF00FF00    	  1174:             move.l #$FF00FF00,d0      * populate test data
01:00000AA4 7A00            	  1175:             move.l #0,d5              * populate bit.s number to test
01:00000AA6 7C01            	  1176:             move.l #1,d6              * populate bit.s number to test
01:00000AA8 7E1F            	  1177:             move.l #31,d7              * populate bit.s number to test
                            	  1178: 
01:00000AAA 0B80            	  1179:             bclr.l d5,d0
01:00000AAC 66FE            	  1180:             bne.s *               * branch if Z clear
01:00000AAE 0D80            	  1181:             bclr.l d6,d0              *
01:00000AB0 66FE            	  1182:             bne.s *               * branch if Z clear
01:00000AB2 0F80            	  1183:             bclr.l d7,d0             *
01:00000AB4 67FE            	  1184:             beq.s *               * branch if Z set
01:00000AB6 0C807F00FF00    	  1185:             cmpi.l #$7F00FF00,d0
01:00000ABC 66FE            	  1186:             bne.s *               * branch if Z clear
                            	  1187: 
                            	  1188: 
                            	  1189: *             EA = (An)  - BYTE only
01:00000ABE 7A00            	  1190:             move.l #0,d5              * populate bit.s number to test
01:00000AC0 7C01            	  1191:             move.l #1,d6              * populate bit.s number to test
01:00000AC2 7E07            	  1192:             move.l #7,d7              * populate bit.s number to test
01:00000AC4 307C0100        	  1193:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AC8 10BC0081        	  1194:             move.b #$81,(a0)          * populate test data
01:00000ACC 0B90            	  1195:             bclr.b d5,(a0)
01:00000ACE 67FE            	  1196:             beq.s *               * branch if Z set
01:00000AD0 0D90            	  1197:             bclr.b d6,(a0)            *
01:00000AD2 66FE            	  1198:             bne.s *               * branch if Z clear
01:00000AD4 0F90            	  1199:             bclr.b d7,(a0)            *
01:00000AD6 67FE            	  1200:             beq.s *               * branch if Z set
01:00000AD8 4A10            	  1201:             cmpi.b #$00,(a0)
01:00000ADA 66FE            	  1202:             bne.s *               * branch if Z clear
                            	  1203: 
                            	  1204: 
                            	  1205: *             EA = (An)+  - BYTE only
01:00000ADC 307C0100        	  1206:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AE0 10FC0001        	  1207:             move.b #$01,(a0)+         * populate test data
01:00000AE4 10FC00FC        	  1208:             move.b #$FC,(a0)+         * populate test data
01:00000AE8 10FC0080        	  1209:             move.b #$80,(a0)+         * populate test data
01:00000AEC 307C0100        	  1210:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AF0 0B98            	  1211:             bclr.b d5,(a0)+
01:00000AF2 67FE            	  1212:             beq.s *               * branch if Z set
01:00000AF4 0D98            	  1213:             bclr.b d6,(a0)+           *
01:00000AF6 66FE            	  1214:             bne.s *               * branch if Z clear
01:00000AF8 0F98            	  1215:             bclr.b d7,(a0)+           *
01:00000AFA 67FE            	  1216:             beq.s *               * branch if Z set
01:00000AFC 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B00 4A18            	  1218:             cmpi.b #$00,(a0)+
01:00000B02 66FE            	  1219:             bne.s *               * branch if Z clear
01:00000B04 0C1800FC        	  1220:             cmpi.b #$FC,(a0)+
01:00000B08 66FE            	  1221:             bne.s *               * branch if Z clear
01:00000B0A 4A18            	  1222:             cmpi.b #$00,(a0)+
01:00000B0C 66FE            	  1223:             bne.s *               * branch if Z clear
                            	  1224: 
                            	  1225: *             EA = -(An)  - BYTE only
01:00000B0E 307C0100        	  1226:             move.l #$00000100,a0      * point to memory to address
01:00000B12 10FC0080        	  1227:             move.b #$80,(a0)+         * populate test data
01:00000B16 10FC00FC        	  1228:             move.b #$FC,(a0)+         * populate test data
01:00000B1A 10FC0001        	  1229:             move.b #$01,(a0)+         * populate test data
01:00000B1E 307C0103        	  1230:             move.l #$00000103,a0      * point to memory to address
01:00000B22 0BA0            	  1231:             bclr.b d5,-(a0)
01:00000B24 67FE            	  1232:             beq.s *               * branch if Z set
01:00000B26 0DA0            	  1233:             bclr.b d6,-(a0)           *
01:00000B28 66FE            	  1234:             bne.s *               * branch if Z clear
01:00000B2A 0FA0            	  1235:             bclr.b d7,-(a0)           *
01:00000B2C 67FE            	  1236:             beq.s *               * branch if Z set
01:00000B2E 307C0103        	  1237:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000B32 4A20            	  1238:             cmpi.b #$00,-(a0)
01:00000B34 66FE            	  1239:             bne.s *               * branch if Z clear
01:00000B36 0C2000FC        	  1240:             cmpi.b #$FC,-(a0)
01:00000B3A 66FE            	  1241:             bne.s *               * branch if Z clear
01:00000B3C 4A20            	  1242:             cmpi.b #$00,-(a0)
01:00000B3E 66FE            	  1243:             bne.s *               * branch if Z clear
                            	  1244: 
                            	  1245: *             EA = n(An)  - BYTE only
01:00000B40 307C0100        	  1246:             move.l #$00000100,a0      * point to memory to address
01:00000B44 10FC0001        	  1247:             move.b #$01,(a0)+         * populate test data
01:00000B48 10FC00FC        	  1248:             move.b #$FC,(a0)+         * populate test data
01:00000B4C 10FC0080        	  1249:             move.b #$80,(a0)+         * populate test data
01:00000B50 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
01:00000B54 0B90            	  1251:             bclr.b d5,0(a0)
01:00000B56 67FE            	  1252:             beq.s *               * branch if Z set
01:00000B58 0DA80001        	  1253:             bclr.b d6,1(a0)           *
01:00000B5C 66FE            	  1254:             bne.s *               * branch if Z clear
01:00000B5E 0FA80002        	  1255:             bclr.b d7,2(a0)           *
01:00000B62 67FE            	  1256:             beq.s *               * branch if Z set
01:00000B64 307C0100        	  1257:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B68 4A18            	  1258:             cmpi.b #$00,(a0)+
01:00000B6A 66FE            	  1259:             bne.s *               * branch if Z clear
01:00000B6C 0C1800FC        	  1260:             cmpi.b #$FC,(a0)+
01:00000B70 66FE            	  1261:             bne.s *               * branch if Z clear
01:00000B72 4A18            	  1262:             cmpi.b #$00,(a0)+
01:00000B74 66FE            	  1263:             bne.s *               * branch if Z clear
                            	  1264: 
                            	  1265: *             EA = n(An,R.W)  - BYTE only
01:00000B76 307C0100        	  1266:             move.l #$00000100,a0      * point to memory to address
01:00000B7A 10FC00FF        	  1267:             move.b #$FF,(a0)+         * populate test data
01:00000B7E 10FC00FF        	  1268:             move.b #$FF,(a0)+         * populate test data
01:00000B82 10FC00FF        	  1269:             move.b #$FF,(a0)+         * populate test data
01:00000B86 307C0103        	  1270:             move.l #$00000103,a0      * point to memory to address
01:00000B8A 307C0100        	  1271:             move.l #$00000100,a0      * point to memory to address
01:00000B8E 93C9            	  1272:             move.l #$00000000,a1      * point to memory to address
01:00000B90 347C0001        	  1273:             move.l #$00000001,a2      * point to memory to address
01:00000B94 7000            	  1274:             moveq  #$00000000,d0      * point to memory to address
01:00000B96 7201            	  1275:             moveq  #$00000001,d1      * point to memory to address
01:00000B98 0BB00000        	  1276:             bclr.b d5,0(a0,d0.w)
01:00000B9C 67FE            	  1277:             beq.s *               * branch if Z set
01:00000B9E 0DB01000        	  1278:             bclr.b d6,0(a0,d1.w)      *
01:00000BA2 67FE            	  1279:             beq.s *               * branch if Z set
01:00000BA4 0FB01001        	  1280:             bclr.b d7,1(a0,d1.w)      *
01:00000BA8 67FE            	  1281:             beq.s *               * branch if Z set
                            	  1282: *             EA = n(An,R.L)  - BYTE only
01:00000BAA 0BB00800        	  1283:             bclr.b d5,0(a0,d0.l)
01:00000BAE 66FE            	  1284:             bne.s *               * branch if Z clear
01:00000BB0 0DB01800        	  1285:             bclr.b d6,0(a0,d1.l)      *
01:00000BB4 66FE            	  1286:             bne.s *               * branch if Z clear
01:00000BB6 0FB01801        	  1287:             bclr.b d7,1(a0,d1.l)      *
01:00000BBA 66FE            	  1288:             bne.s *               * branch if Z clear
                            	  1289: *             EA = n(An,A.W)  - BYTE only
01:00000BBC 0BB09000        	  1290:             bclr.b d5,0(a0,a1.w)
01:00000BC0 66FE            	  1291:             bne.s *               * branch if Z clear
01:00000BC2 0DB0A000        	  1292:             bclr.b d6,0(a0,a2.w)      *
01:00000BC6 66FE            	  1293:             bne.s *               * branch if Z clear
01:00000BC8 0FB0A001        	  1294:             bclr.b d7,1(a0,a2.w)      *
01:00000BCC 66FE            	  1295:             bne.s *               * branch if Z clear
                            	  1296: *             EA = n(An,A.L)  - BYTE only
01:00000BCE 0BB09800        	  1297:             bclr.b d5,0(a0,a1.l)
01:00000BD2 66FE            	  1298:             bne.s *               * branch if Z clear
01:00000BD4 0DB0A800        	  1299:             bclr.b d6,0(a0,a2.l)      *
01:00000BD8 66FE            	  1300:             bne.s *               * branch if Z clear
01:00000BDA 0FB0A801        	  1301:             bclr.b d7,1(a0,a2.l)      *
01:00000BDE 66FE            	  1302:             bne.s *               * branch if Z clear
01:00000BE0 307C0100        	  1303:             move.l #$00000100,a0      * point to memory to address
01:00000BE4 0C1000FE        	  1304:             cmpi.b #$FE,(a0)
01:00000BE8 66FE            	  1305:             bne.s *               * branch if Z clear
                            	  1306: 
                            	  1307: *             EA = x.W  - BYTE only
01:00000BEA 307C0100        	  1308:             move.l #$00000100,a0      * point to memory to address
01:00000BEE 10FC00FF        	  1309:             move.b #$FF,(a0)+         * populate test data
01:00000BF2 10FC00FF        	  1310:             move.b #$FF,(a0)+         * populate test data
01:00000BF6 10FC00FF        	  1311:             move.b #$FF,(a0)+         * populate test data
01:00000BFA 0BB80100        	  1312:             bclr.b d5,$0100
01:00000BFE 67FE            	  1313:             beq.s *               * branch if Z set
01:00000C00 0DB80101        	  1314:             bclr.b d6,$0101           *
01:00000C04 67FE            	  1315:             beq.s *               * branch if Z set
01:00000C06 0FB80102        	  1316:             bclr.b d7,$0102           *
01:00000C0A 67FE            	  1317:             beq.s *               * branch if Z set
01:00000C0C 307C0100        	  1318:             move.l #$00000100,a0      * point to memory to address
01:00000C10 0C1800FE        	  1319:             cmpi.b #$FE,(a0)+
01:00000C14 66FE            	  1320:             bne.s *               * branch if Z clear
                            	  1321: 
                            	  1322: *             EA = x.L  - BYTE only
01:00000C16 207C0000F100    	  1323:             move.l #$F100,a0      * point to memory to address 0x100
01:00000C1C 10FC0001        	  1324:             move.b #$01,(a0)+         * populate test data
01:00000C20 10FC00FC        	  1325:             move.b #$FC,(a0)+         * populate test data
01:00000C24 10FC0080        	  1326:             move.b #$80,(a0)+         * populate test data
01:00000C28 0BB90000F100    	  1327:             bclr.b d5,$F100
01:00000C2E 67FE            	  1328:             beq.s *               * branch if Z set
01:00000C30 0DB90000F101    	  1329:             bclr.b d6,$F101       *
01:00000C36 66FE            	  1330:             bne.s *               * branch if Z clear
01:00000C38 0FB90000F102    	  1331:             bclr.b d7,$F102       *
01:00000C3E 67FE            	  1332:             beq.s *               * branch if Z set
01:00000C40 207C0000F101    	  1333:             move.l #$F101,a0      * point to memory to address 0x100
01:00000C46 0C1000FC        	  1334:             cmpi.b #$FC,(a0)
01:00000C4A 66FE            	  1335:             bne.s *               * branch if Z clear
                            	  1336: 
                            	  1337: 
                            	  1338: 
01:00000C4C 4E75            	  1339:     rts
                            	  1340: 
                            	  1341: *-----------------------------------------------------------
                            	  1342: *-----------------------------------------------------------
                            	  1343: * OPCODE : BSET
                            	  1344: *-----------------------------------------------------------
                            	  1345: *-----------------------------------------------------------
                            	  1346: op_BSET:
                            	  1347: 
                            	  1348: 
                            	  1349: *  Bit Number.s Static
                            	  1350: 
                            	  1351: *             EA = Dn  - LONG only
01:00000C4E 7000            	  1352:             moveq  #$00000000,d0      * populate test data
01:00000C50 08C00000        	  1353:             bset.l #0,d0
01:00000C54 66FE            	  1354:             bne.s *               * branch if Z clear
01:00000C56 08C00001        	  1355:             bset.l #1,d0              *
01:00000C5A 66FE            	  1356:             bne.s *               * branch if Z clear
01:00000C5C 08C0000F        	  1357:             bset.l #15,d0             *
01:00000C60 66FE            	  1358:             bne.s *               * branch if Z clear
01:00000C62 08C0001F        	  1359:             bset.l #31,d0             *
01:00000C66 66FE            	  1360:             bne.s *               * branch if Z clear
01:00000C68 0C8080008003    	  1361:             cmpi.l #$80008003,d0
01:00000C6E 66FE            	  1362:             bne.s *               * branch if Z clear
                            	  1363: 
                            	  1364: 
                            	  1365: *             EA = (An)  - BYTE only
01:00000C70 307C0100        	  1366:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C74 10BC0000        	  1367:             move.b #$00,(a0)          * populate test data
01:00000C78 08D00000        	  1368:             bset.b #0,(a0)
01:00000C7C 66FE            	  1369:             bne.s *               * branch if Z clear
01:00000C7E 08D00007        	  1370:             bset.b #7,(a0)            *
01:00000C82 66FE            	  1371:             bne.s *               * branch if Z clear
01:00000C84 0C100081        	  1372:             cmpi.b #$81,(a0)
01:00000C88 66FE            	  1373:             bne.s *               * branch if Z clear
                            	  1374: 
                            	  1375: *             EA = (An)+  - BYTE only
01:00000C8A 307C0100        	  1376:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C8E 10FC0000        	  1377:             move.b #$00,(a0)+         * populate test data
01:00000C92 10FC0000        	  1378:             move.b #$00,(a0)+         * populate test data
01:00000C96 307C0100        	  1379:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C9A 08D80000        	  1380:             bset.b #0,(a0)+
01:00000C9E 66FE            	  1381:             bne.s *               * branch if Z clear
01:00000CA0 08D80001        	  1382:             bset.b #1,(a0)+           *
01:00000CA4 66FE            	  1383:             bne.s *               * branch if Z clear
01:00000CA6 307C0100        	  1384:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CAA 0C180001        	  1385:             cmpi.b #$01,(a0)+
01:00000CAE 66FE            	  1386:             bne.s *               * branch if Z clear
01:00000CB0 0C180002        	  1387:             cmpi.b #$02,(a0)+
01:00000CB4 66FE            	  1388:             bne.s *               * branch if Z clear
                            	  1389: 
                            	  1390: 
                            	  1391: *             EA = -(An)  - BYTE only
01:00000CB6 307C0100        	  1392:             move.l #$00000100,a0      * point to memory to address
01:00000CBA 10FC0000        	  1393:             move.b #$00,(a0)+         * populate test data
01:00000CBE 10FC0000        	  1394:             move.b #$00,(a0)+         * populate test data
01:00000CC2 08E00007        	  1395:             bset.b #7,-(a0)
01:00000CC6 66FE            	  1396:             bne.s *               * branch if Z clear
01:00000CC8 08E00000        	  1397:             bset.b #0,-(a0)           *
01:00000CCC 66FE            	  1398:             bne.s *               * branch if Z clear
01:00000CCE 307C0102        	  1399:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000CD2 0C200080        	  1400:             cmpi.b #$80,-(a0)
01:00000CD6 66FE            	  1401:             bne.s *               * branch if Z clear
01:00000CD8 0C200001        	  1402:             cmpi.b #$01,-(a0)
01:00000CDC 66FE            	  1403:             bne.s *               * branch if Z clear
                            	  1404: 
                            	  1405: 
                            	  1406: *             EA = n(An)  - BYTE only
01:00000CDE 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address
01:00000CE2 10FC0000        	  1408:             move.b #$00,(a0)+         * populate test data
01:00000CE6 10FC0000        	  1409:             move.b #$00,(a0)+         * populate test data
01:00000CEA 307C0100        	  1410:             move.l #$00000100,a0      * point to memory to address
01:00000CEE 08D00000        	  1411:             bset.b #0,0(a0)
01:00000CF2 66FE            	  1412:             bne.s *               * branch if Z clear
01:00000CF4 08E800040001    	  1413:             bset.b #4,1(a0)           *
01:00000CFA 66FE            	  1414:             bne.s *               * branch if Z clear
01:00000CFC 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000D00 0C180001        	  1416:             cmpi.b #$01,(a0)+
01:00000D04 66FE            	  1417:             bne.s *               * branch if Z clear
01:00000D06 0C180010        	  1418:             cmpi.b #$10,(a0)+
01:00000D0A 66FE            	  1419:             bne.s *               * branch if Z clear
                            	  1420: 
                            	  1421: 
                            	  1422: *             EA = n(An,D.W)  - BYTE only
01:00000D0C 307C0100        	  1423:             move.l #$00000100,a0      * point to memory to address
01:00000D10 93C9            	  1424:             move.l #$00000000,a1      * point to memory to address
01:00000D12 347C0004        	  1425:             move.l #$00000004,a2      * point to memory to address
01:00000D16 7000            	  1426:             moveq  #$00000000,d0      * point to memory to address
01:00000D18 7201            	  1427:             moveq  #$00000001,d1      * point to memory to address
01:00000D1A 10FC0000        	  1428:             move.b #$00,(a0)+         * populate test data
01:00000D1E 10FC0000        	  1429:             move.b #$00,(a0)+         * populate test data
01:00000D22 10FC0000        	  1430:             move.b #$00,(a0)+         * populate test data
01:00000D26 10FC0000        	  1431:             move.b #$00,(a0)+         * populate test data
01:00000D2A 10FC0000        	  1432:             move.b #$00,(a0)+         * populate test data
01:00000D2E 10FC0000        	  1433:             move.b #$00,(a0)+         * populate test data
01:00000D32 10FC0000        	  1434:             move.b #$00,(a0)+         * populate test data
01:00000D36 10FC0000        	  1435:             move.b #$00,(a0)+         * populate test data
01:00000D3A 10FC0000        	  1436:             move.b #$00,(a0)+         * populate test data
01:00000D3E 10FC0000        	  1437:             move.b #$00,(a0)+         * populate test data
01:00000D42 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address
01:00000D46 08F000000000    	  1439:             bset.b #0,0(a0,d0.w)
01:00000D4C 66FE            	  1440:             bne.s *               * branch if Z clear
01:00000D4E 08F000011000    	  1441:             bset.b #1,0(a0,d1.w)      *
01:00000D54 66FE            	  1442:             bne.s *               * branch if Z clear
01:00000D56 08F000021001    	  1443:             bset.b #2,1(a0,d1.w)      *
01:00000D5C 66FE            	  1444:             bne.s *               * branch if Z clear
                            	  1445: *             EA = n(An,D.L)  - BYTE only
01:00000D5E 08F000030802    	  1446:             bset.b #3,2(a0,d0.l)
01:00000D64 66FE            	  1447:             bne.s *               * branch if Z clear
01:00000D66 08F000041800    	  1448:             bset.b #4,0(a0,d1.l)      *
01:00000D6C 66FE            	  1449:             bne.s *               * branch if Z clear
01:00000D6E 08F000051801    	  1450:             bset.b #5,1(a0,d1.l)      *
01:00000D74 66FE            	  1451:             bne.s *               * branch if Z clear
                            	  1452: *             EA = n(An,A.W)  - BYTE only
01:00000D76 08F000069000    	  1453:             bset.b #6,0(a0,a1.w)
01:00000D7C 66FE            	  1454:             bne.s *               * branch if Z clear
01:00000D7E 08F00001A000    	  1455:             bset.b #1,0(a0,a2.w)      *
01:00000D84 66FE            	  1456:             bne.s *               * branch if Z clear
01:00000D86 08F00007A001    	  1457:             bset.b #7,1(a0,a2.w)      *
01:00000D8C 66FE            	  1458:             bne.s *               * branch if Z clear
                            	  1459: *             EA = n(An,A.L)  - BYTE only
01:00000D8E 08F00000A802    	  1460:             bset.b #0,2(a0,a2.l)
01:00000D94 66FE            	  1461:             bne.s *               * branch if Z clear
01:00000D96 08F00000A803    	  1462:             bset.b #0,3(a0,a2.l)      *
01:00000D9C 66FE            	  1463:             bne.s *               * branch if Z clear
01:00000D9E 08F00001A804    	  1464:             bset.b #1,4(a0,a2.l)      *
01:00000DA4 66FE            	  1465:             bne.s *               * branch if Z clear
01:00000DA6 307C0100        	  1466:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DAA 0C9841122C00    	  1467:             cmpi.l #$41122C00,(a0)+
01:00000DB0 66FE            	  1468:             bne.s *               * branch if Z clear
01:00000DB2 0C9802800101    	  1469:             cmpi.l #$02800101,(a0)+
01:00000DB8 66FE            	  1470:             bne.s *
                            	  1471: 
                            	  1472: 
                            	  1473: 
                            	  1474: *             EA = x.W  - BYTE only
01:00000DBA 307C0100        	  1475:             move.l #$00000100,a0      * point to memory to address
01:00000DBE 10FC0000        	  1476:             move.b #$00,(a0)+         * populate test data
01:00000DC2 08F800000100    	  1477:             bset.b #0,$0100
01:00000DC8 66FE            	  1478:             bne.s *               * branch if Z clear
01:00000DCA 08F800010100    	  1479:             bset.b #1,$0100           *
01:00000DD0 66FE            	  1480:             bne.s *               * branch if Z clear
01:00000DD2 307C0100        	  1481:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DD6 0C180003        	  1482:             cmpi.b #$03,(a0)+
01:00000DDA 66FE            	  1483:             bne.s *
                            	  1484: 
                            	  1485: 
                            	  1486: *             EA = x.L  - BYTE only
01:00000DDC 207C0000F100    	  1487:             move.l #$F100,a0      * point to memory to address 0x100
01:00000DE2 10BC0000        	  1488:             move.b #$00,(a0)          * populate test data
01:00000DE6 08F900000000F100	  1489:             bset.b #0,$F100
01:00000DEE 66FE            	  1490:             bne.s *               * branch if Z clear
01:00000DF0 08F900010000F100	  1491:             bset.b #1,$F100       *
01:00000DF8 66FE            	  1492:             bne.s *               * branch if Z clear
01:00000DFA 08F900020000F100	  1493:             bset.b #2,$F100       *
01:00000E02 66FE            	  1494:             bne.s *               * branch if Z clear
01:00000E04 207C0000F100    	  1495:             move.l #$F100,a0      * point to memory to address 0x100
01:00000E0A 0C180007        	  1496:             cmpi.b #$07,(a0)+
01:00000E0E 66FE            	  1497:             bne.s *
                            	  1498: 
                            	  1499: 
                            	  1500: * Bit Number.s Dynamic
                            	  1501: 
                            	  1502: *             EA = Dn  - LONG only
01:00000E10 7000            	  1503:             moveq  #$00000000,d0      * populate test data
01:00000E12 7A00            	  1504:             move.l #0,d5              * populate bit.s number to test
01:00000E14 7C01            	  1505:             move.l #1,d6              * populate bit.s number to test
01:00000E16 7E1F            	  1506:             move.l #31,d7              * populate bit.s number to test
                            	  1507: 
01:00000E18 0BC0            	  1508:             bset.l d5,d0
01:00000E1A 66FE            	  1509:             bne.s *               * branch if Z clear
01:00000E1C 0DC0            	  1510:             bset.l d6,d0              *
01:00000E1E 66FE            	  1511:             bne.s *               * branch if Z clear
01:00000E20 0FC0            	  1512:             bset.l d7,d0             *
01:00000E22 66FE            	  1513:             bne.s *               * branch if Z clear
01:00000E24 0C8080000003    	  1514:             cmpi.l #$80000003,d0
01:00000E2A 66FE            	  1515:             bne.s *               * branch if Z clear
                            	  1516: 
                            	  1517: 
                            	  1518: *             EA = (An)  - BYTE only
01:00000E2C 7A00            	  1519:             move.l #0,d5              * populate bit.s number to test
01:00000E2E 7C01            	  1520:             move.l #1,d6              * populate bit.s number to test
01:00000E30 7E07            	  1521:             move.l #7,d7              * populate bit.s number to test
01:00000E32 307C0100        	  1522:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E36 10BC0000        	  1523:             move.b #$00,(a0)          * populate test data
01:00000E3A 0BD0            	  1524:             bset.b d5,(a0)
01:00000E3C 66FE            	  1525:             bne.s *               * branch if Z clear
01:00000E3E 0DD0            	  1526:             bset.b d6,(a0)            *
01:00000E40 66FE            	  1527:             bne.s *               * branch if Z clear
01:00000E42 0FD0            	  1528:             bset.b d7,(a0)            *
01:00000E44 66FE            	  1529:             bne.s *               * branch if Z clear
01:00000E46 0C100083        	  1530:             cmpi.b #$83,(a0)
01:00000E4A 66FE            	  1531:             bne.s *               * branch if Z clear
                            	  1532: 
                            	  1533: 
                            	  1534: *             EA = (An)+  - BYTE only
01:00000E4C 307C0100        	  1535:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E50 10FC0000        	  1536:             move.b #$00,(a0)+         * populate test data
01:00000E54 10FC0000        	  1537:             move.b #$00,(a0)+         * populate test data
01:00000E58 10FC0000        	  1538:             move.b #$00,(a0)+         * populate test data
01:00000E5C 307C0100        	  1539:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E60 0BD8            	  1540:             bset.b d5,(a0)+
01:00000E62 66FE            	  1541:             bne.s *               * branch if Z clear
01:00000E64 0DD8            	  1542:             bset.b d6,(a0)+           *
01:00000E66 66FE            	  1543:             bne.s *               * branch if Z clear
01:00000E68 0FD8            	  1544:             bset.b d7,(a0)+           *
01:00000E6A 66FE            	  1545:             bne.s *               * branch if Z clear
01:00000E6C 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E70 0C180001        	  1547:             cmpi.b #$01,(a0)+
01:00000E74 66FE            	  1548:             bne.s *               * branch if Z clear
01:00000E76 0C180002        	  1549:             cmpi.b #$02,(a0)+
01:00000E7A 66FE            	  1550:             bne.s *               * branch if Z clear
01:00000E7C 0C180080        	  1551:             cmpi.b #$80,(a0)+
01:00000E80 66FE            	  1552:             bne.s *               * branch if Z clear
                            	  1553: 
                            	  1554: *             EA = -(An)  - BYTE only
01:00000E82 307C0100        	  1555:             move.l #$00000100,a0      * point to memory to address
01:00000E86 10FC0000        	  1556:             move.b #$00,(a0)+         * populate test data
01:00000E8A 10FC0000        	  1557:             move.b #$00,(a0)+         * populate test data
01:00000E8E 10FC0000        	  1558:             move.b #$00,(a0)+         * populate test data
01:00000E92 307C0103        	  1559:             move.l #$00000103,a0      * point to memory to address
01:00000E96 0BE0            	  1560:             bset.b d5,-(a0)
01:00000E98 66FE            	  1561:             bne.s *               * branch if Z clear
01:00000E9A 0DE0            	  1562:             bset.b d6,-(a0)           *
01:00000E9C 66FE            	  1563:             bne.s *               * branch if Z clear
01:00000E9E 0FE0            	  1564:             bset.b d7,-(a0)           *
01:00000EA0 66FE            	  1565:             bne.s *               * branch if Z clear
01:00000EA2 307C0103        	  1566:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000EA6 0C200001        	  1567:             cmpi.b #$01,-(a0)
01:00000EAA 66FE            	  1568:             bne.s *               * branch if Z clear
01:00000EAC 0C200002        	  1569:             cmpi.b #$02,-(a0)
01:00000EB0 66FE            	  1570:             bne.s *               * branch if Z clear
01:00000EB2 0C200080        	  1571:             cmpi.b #$80,-(a0)
01:00000EB6 66FE            	  1572:             bne.s *               * branch if Z clear
                            	  1573: 
                            	  1574: *             EA = n(An)  - BYTE only
01:00000EB8 307C0100        	  1575:             move.l #$00000100,a0      * point to memory to address
01:00000EBC 10FC0000        	  1576:             move.b #$00,(a0)+         * populate test data
01:00000EC0 10FC0000        	  1577:             move.b #$00,(a0)+         * populate test data
01:00000EC4 10FC0000        	  1578:             move.b #$00,(a0)+         * populate test data
01:00000EC8 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
01:00000ECC 0BD0            	  1580:             bset.b d5,0(a0)
01:00000ECE 66FE            	  1581:             bne.s *               * branch if Z clear
01:00000ED0 0DE80001        	  1582:             bset.b d6,1(a0)           *
01:00000ED4 66FE            	  1583:             bne.s *               * branch if Z clear
01:00000ED6 0FE80002        	  1584:             bset.b d7,2(a0)           *
01:00000EDA 66FE            	  1585:             bne.s *               * branch if Z clear
01:00000EDC 307C0100        	  1586:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EE0 0C180001        	  1587:             cmpi.b #$01,(a0)+
01:00000EE4 66FE            	  1588:             bne.s *               * branch if Z clear
01:00000EE6 0C180002        	  1589:             cmpi.b #$02,(a0)+
01:00000EEA 66FE            	  1590:             bne.s *               * branch if Z clear
01:00000EEC 0C180080        	  1591:             cmpi.b #$80,(a0)+
01:00000EF0 66FE            	  1592:             bne.s *               * branch if Z clear
                            	  1593: 
                            	  1594: *             EA = n(An,R.W)  - BYTE only
01:00000EF2 307C0100        	  1595:             move.l #$00000100,a0      * point to memory to address
01:00000EF6 10FC0000        	  1596:             move.b #$00,(a0)+         * populate test data
01:00000EFA 10FC0000        	  1597:             move.b #$00,(a0)+         * populate test data
01:00000EFE 10FC0000        	  1598:             move.b #$00,(a0)+         * populate test data
01:00000F02 10FC0000        	  1599:             move.b #$00,(a0)+         * populate test data
01:00000F06 10FC0000        	  1600:             move.b #$00,(a0)+         * populate test data
01:00000F0A 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
01:00000F0E 10FC0000        	  1602:             move.b #$00,(a0)+         * populate test data
01:00000F12 10FC0000        	  1603:             move.b #$00,(a0)+         * populate test data
01:00000F16 10FC0000        	  1604:             move.b #$00,(a0)+         * populate test data
01:00000F1A 10FC0000        	  1605:             move.b #$00,(a0)+         * populate test data
01:00000F1E 10FC0000        	  1606:             move.b #$00,(a0)+         * populate test data
01:00000F22 10FC0000        	  1607:             move.b #$00,(a0)+         * populate test data
01:00000F26 307C0100        	  1608:             move.l #$00000100,a0      * point to memory to address
01:00000F2A 93C9            	  1609:             move.l #$00000000,a1      * point to memory to address
01:00000F2C 347C0001        	  1610:             move.l #$00000001,a2      * point to memory to address
01:00000F30 7000            	  1611:             moveq  #$00000000,d0      * point to memory to address
01:00000F32 7201            	  1612:             moveq  #$00000001,d1      * point to memory to address
01:00000F34 0BF00000        	  1613:             bset.b d5,0(a0,d0.w)
01:00000F38 66FE            	  1614:             bne.s *               * branch if Z clear
01:00000F3A 0DF01000        	  1615:             bset.b d6,0(a0,d1.w)      *
01:00000F3E 66FE            	  1616:             bne.s *               * branch if Z clear
01:00000F40 0FF01001        	  1617:             bset.b d7,1(a0,d1.w)      *
01:00000F44 66FE            	  1618:             bne.s *               * branch if Z clear
                            	  1619: *             EA = n(An,R.L)  - BYTE only
01:00000F46 0BF00802        	  1620:             bset.b d5,2(a0,d0.l)
01:00000F4A 66FE            	  1621:             bne.s *               * branch if Z clear
01:00000F4C 0DF01803        	  1622:             bset.b d6,3(a0,d1.l)      *
01:00000F50 66FE            	  1623:             bne.s *               * branch if Z clear
01:00000F52 0FF01804        	  1624:             bset.b d7,4(a0,d1.l)      *
01:00000F56 66FE            	  1625:             bne.s *               * branch if Z clear
                            	  1626: *             EA = n(An,A.W)  - BYTE only
01:00000F58 0BF09005        	  1627:             bset.b d5,5(a0,a1.w)
01:00000F5C 66FE            	  1628:             bne.s *               * branch if Z clear
01:00000F5E 0DF0A006        	  1629:             bset.b d6,6(a0,a2.w)      *
01:00000F62 66FE            	  1630:             bne.s *               * branch if Z clear
01:00000F64 0FF0A007        	  1631:             bset.b d7,7(a0,a2.w)      *
01:00000F68 66FE            	  1632:             bne.s *               * branch if Z clear
                            	  1633: *             EA = n(An,A.L)  - BYTE only
01:00000F6A 0BF09808        	  1634:             bset.b d5,8(a0,a1.l)
01:00000F6E 66FE            	  1635:             bne.s *               * branch if Z clear
01:00000F70 0DF0A809        	  1636:             bset.b d6,9(a0,a2.l)      *
01:00000F74 66FE            	  1637:             bne.s *               * branch if Z clear
01:00000F76 0FF0A80A        	  1638:             bset.b d7,10(a0,a2.l)      *
01:00000F7A 66FE            	  1639:             bne.s *               * branch if Z clear
01:00000F7C 307C0100        	  1640:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F80 0C9801028100    	  1641:             cmpi.l #$01028100,(a0)+
01:00000F86 66FE            	  1642:             bne.s *               * branch if Z clear
01:00000F88 0C9802810002    	  1643:             cmpi.l #$02810002,(a0)+
01:00000F8E 66FE            	  1644:             bne.s *
                            	  1645: 
                            	  1646: 
                            	  1647: *             EA = x.W  - BYTE only
01:00000F90 307C0100        	  1648:             move.l #$00000100,a0      * point to memory to address
01:00000F94 10FC0000        	  1649:             move.b #$00,(a0)+         * populate test data
01:00000F98 10FC0000        	  1650:             move.b #$00,(a0)+         * populate test data
01:00000F9C 10FC0000        	  1651:             move.b #$00,(a0)+         * populate test data
01:00000FA0 0BF80100        	  1652:             bset.b d5,$0100
01:00000FA4 66FE            	  1653:             bne.s *               * branch if Z clear
01:00000FA6 0DF80100        	  1654:             bset.b d6,$0100           *
01:00000FAA 66FE            	  1655:             bne.s *               * branch if Z clear
01:00000FAC 0FF80100        	  1656:             bset.b d7,$0100           *
01:00000FB0 66FE            	  1657:             bne.s *               * branch if Z clear
01:00000FB2 307C0100        	  1658:             move.l #$00000100,a0      * point to memory to address
01:00000FB6 0C180083        	  1659:             cmpi.b #$83,(a0)+
01:00000FBA 66FE            	  1660:             bne.s *               * branch if Z clear
                            	  1661: 
                            	  1662: *             EA = x.L  - BYTE only
01:00000FBC 207C0000F100    	  1663:             move.l #$F100,a0      * point to memory to address 0x100
01:00000FC2 10FC0000        	  1664:             move.b #$00,(a0)+         * populate test data
01:00000FC6 10FC0000        	  1665:             move.b #$00,(a0)+         * populate test data
01:00000FCA 10FC0000        	  1666:             move.b #$00,(a0)+         * populate test data
01:00000FCE 0BF90000F100    	  1667:             bset.b d5,$F100
01:00000FD4 66FE            	  1668:             bne.s *               * branch if Z clear
01:00000FD6 0DF90000F100    	  1669:             bset.b d6,$F100       *
01:00000FDC 66FE            	  1670:             bne.s *               * branch if Z clear
01:00000FDE 0FF90000F100    	  1671:             bset.b d7,$F100       *
01:00000FE4 66FE            	  1672:             bne.s *               * branch if Z clear
01:00000FE6 207C0000F100    	  1673:             move.l #$F100,a0      * point to memory to address 0x100
01:00000FEC 0C100083        	  1674:             cmpi.b #$83,(a0)
01:00000FF0 66FE            	  1675:             bne.s *               * branch if Z clear
                            	  1676: 
                            	  1677: 
01:00000FF2 4E75            	  1678:     rts
                            	  1679: 
                            	  1680: *-----------------------------------------------------------
                            	  1681: *-----------------------------------------------------------
                            	  1682: * OPCODE : MOVEP
                            	  1683: *-----------------------------------------------------------
                            	  1684: *-----------------------------------------------------------
                            	  1685: op_MOVEP:
                            	  1686: 
                            	  1687: * Dn --> x(An)
01:00000FF4 307C0100        	  1688:             move.l #$00000100,a0
01:00000FF8 203C12345678    	  1689:             move.l #$12345678,d0
01:00000FFE 223CAABBCCDD    	  1690:             move.l #$AABBCCDD,d1
01:00001004 20BC00000000    	  1691:             move.l #0,(a0)
01:0000100A 217C000000000004	  1692:             move.l #0,4(a0)
                            	  1693: 
01:00001012 01880000        	  1694:             movep.w d0,0(a0)      * even offset
01:00001016 03880001        	  1695:             movep.w d1,1(a0)      * odd offset
                            	  1696: 
01:0000101A 01C80004        	  1697:             movep.l d0,4(a0)      * even offset
01:0000101E 03C80005        	  1698:             movep.l d1,5(a0)      * odd offset
                            	  1699: 
01:00001022 0C9056CC78DD    	  1700:             cmpi.l #$56CC78DD,(a0)
01:00001028 66FE            	  1701:             bne.s *
01:0000102A 0CA812AA34BB0004	  1702:             cmpi.l #$12AA34BB,4(a0)
01:00001032 66FE            	  1703:             bne.s *
01:00001034 0CA856CC78DD0008	  1704:             cmpi.l #$56CC78DD,8(a0)
01:0000103C 66FE            	  1705:             bne.s *
                            	  1706: 
                            	  1707: 
                            	  1708: * x(An)--> Dn
01:0000103E 203C5A5A5A5A    	  1709:             move.l #$5a5a5a5a,d0
01:00001044 223C5A5A5A5A    	  1710:             move.l #$5a5a5a5a,d1
01:0000104A 243C5A5A5A5A    	  1711:             move.l #$5a5a5a5a,d2
01:00001050 263C5A5A5A5A    	  1712:             move.l #$5a5a5a5a,d3
                            	  1713: 
01:00001056 01080000        	  1714:             movep.w 0(a0),d0      * even offset
01:0000105A 03080001        	  1715:             movep.w 1(a0),d1      * odd offset
                            	  1716: 
01:0000105E 05480004        	  1717:             movep.l 4(a0),d2      * even offset
01:00001062 07480005        	  1718:             movep.l 5(a0),d3      * odd offset
                            	  1719: 
01:00001066 0C805A5A5678    	  1720:             cmpi.l #$5a5a5678,d0
01:0000106C 66FE            	  1721:             bne.s *
01:0000106E 0C815A5ACCDD    	  1722:             cmpi.l #$5a5aCCDD,d1
01:00001074 66FE            	  1723:             bne.s *
01:00001076 0C8212345678    	  1724:             cmpi.l #$12345678,d2
01:0000107C 66FE            	  1725:             bne.s *
01:0000107E 0C83AABBCCDD    	  1726:             cmpi.l #$AABBCCDD,d3
01:00001084 66FE            	  1727:             bne.s *
                            	  1728: 
01:00001086 4E75            	  1729:             rts
                            	  1730: 
                            	  1731: 
                            	  1732: 
                            	  1733: *-----------------------------------------------------------
                            	  1734: *-----------------------------------------------------------
                            	  1735: * OPCODE : BOOL_I
                            	  1736: *-----------------------------------------------------------
                            	  1737: *-----------------------------------------------------------
                            	  1738: op_BOOL_I:
                            	  1739: 
                            	  1740: *     Dn -- BYTE
01:00001088 203C12345678    	  1741:             move.l #$12345678,d0
01:0000108E 44FC000F        	  1742:             move.w #$000F,CCR          * pre-set Flags
01:00001092 000000FF        	  1743:             ori.b  #$FF,d0
01:00001096 0A00005A        	  1744:             eori.b #$5A,d0
01:0000109A 020000F0        	  1745:             andi.b #$F0,d0
01:0000109E 69FE            	  1746:             bvs.s *                       * Check V,C are cleared
01:000010A0 65FE            	  1747:             bcs.s *
01:000010A2 6AFE            	  1748:             bpl.s *                       * Verify if N flag is set
01:000010A4 02000000        	  1749:             andi.b #$00,d0
01:000010A8 6BFE            	  1750:             bmi.s *                       * Verify if N flag is cleared
01:000010AA 66FE            	  1751:             bne.s *                       * Verify if Z flag is set
                            	  1752: 
                            	  1753: *     Dn -- WORD
01:000010AC 223C12345678    	  1754:             move.l #$12345678,d1
01:000010B2 44FC000F        	  1755:             move.w #$000F,CCR          * pre-set Flags
01:000010B6 0041FFFF        	  1756:             ori.w  #$FFFF,d1
01:000010BA 0A415A5A        	  1757:             eori.w #$5A5A,d1
01:000010BE 0241F0F0        	  1758:             andi.w #$F0F0,d1
01:000010C2 69FE            	  1759:             bvs.s *                       * Check V,C are cleared
01:000010C4 65FE            	  1760:             bcs.s *
01:000010C6 6AFE            	  1761:             bpl.s *                       * Verify if N flag is set
01:000010C8 02410000        	  1762:             andi.w #$0000,d1
01:000010CC 6BFE            	  1763:             bmi.s *                       * Verify if N flag is cleared
01:000010CE 66FE            	  1764:             bne.s *                       * Verify if Z flag is set
                            	  1765: 
                            	  1766: *     Dn -- LONG
01:000010D0 243C12345678    	  1767:             move.l #$12345678,d2
01:000010D6 44FC000F        	  1768:             move.w #$000F,CCR          * pre-set Flags
01:000010DA 0082FFFFFFFF    	  1769:             ori.l  #$FFFFFFFF,d2
01:000010E0 0A825A5A5A5A    	  1770:             eori.l #$5A5A5A5A,d2
01:000010E6 0282F0F0F0F0    	  1771:             andi.l #$F0F0F0F0,d2
01:000010EC 69FE            	  1772:             bvs.s *                       * Check V,C are cleared
01:000010EE 65FE            	  1773:             bcs.s *
01:000010F0 6AFE            	  1774:             bpl.s *                       * Verify if N flag is set
01:000010F2 028200000000    	  1775:             andi.l #$00000000,d2
01:000010F8 6BFE            	  1776:             bmi.s *                       * Verify if N flag is cleared
01:000010FA 66FE            	  1777:             bne.s *                       * Verify if Z flag is set
                            	  1778: 
                            	  1779: 
                            	  1780: *     (An) -- BYTE
01:000010FC 307C0100        	  1781:             move.l #$00000100,a0
01:00001100 20BC12345678    	  1782:             move.l #$12345678,(a0)
01:00001106 44FC000F        	  1783:             move.w #$000F,CCR          * pre-set Flags
01:0000110A 001000FF        	  1784:             ori.b  #$FF,(a0)
01:0000110E 0A10005A        	  1785:             eori.b #$5A,(a0)
01:00001112 021000F0        	  1786:             andi.b #$F0,(a0)
01:00001116 69FE            	  1787:             bvs.s *                       * Check V,C are cleared
01:00001118 65FE            	  1788:             bcs.s *
01:0000111A 6AFE            	  1789:             bpl.s *                       * Verify if N flag is set
01:0000111C 02100000        	  1790:             andi.b #$00,(a0)
01:00001120 6BFE            	  1791:             bmi.s *                       * Verify if N flag is cleared
01:00001122 66FE            	  1792:             bne.s *                       * Verify if Z flag is set
01:00001124 4A10            	  1793:             cmpi.b #$00,(a0)
01:00001126 66FE            	  1794:             bne.s *                       * Verify if Z flag is set
                            	  1795: 
                            	  1796: *     (An) -- WORD
01:00001128 20BC12345678    	  1797:             move.l #$12345678,(a0)
01:0000112E 44FC000F        	  1798:             move.w #$000F,CCR          * pre-set Flags
01:00001132 0050FFFF        	  1799:             ori.w  #$FFFF,(a0)
01:00001136 0A505A5A        	  1800:             eori.w #$5A5A,(a0)
01:0000113A 0250F0F0        	  1801:             andi.w #$F0F0,(a0)
01:0000113E 69FE            	  1802:             bvs.s *                       * Check V,C are cleared
01:00001140 65FE            	  1803:             bcs.s *
01:00001142 6AFE            	  1804:             bpl.s *                       * Verify if N flag is set
01:00001144 02500000        	  1805:             andi.w #$0000,(a0)
01:00001148 6BFE            	  1806:             bmi.s *                       * Verify if N flag is cleared
01:0000114A 66FE            	  1807:             bne.s *                       * Verify if Z flag is set
01:0000114C 4A50            	  1808:             cmpi.w #$00,(a0)
01:0000114E 66FE            	  1809:             bne.s *                       * Verify if Z flag is set
                            	  1810: 
                            	  1811: *     (An) -- LONG
01:00001150 20BC12345678    	  1812:             move.l #$12345678,(a0)
01:00001156 44FC000F        	  1813:             move.w #$000F,CCR          * pre-set Flags
01:0000115A 0090FFFFFFFF    	  1814:             ori.l  #$FFFFFFFF,(a0)
01:00001160 0A905A5A5A5A    	  1815:             eori.l #$5A5A5A5A,(a0)
01:00001166 0290F0F0F0F0    	  1816:             andi.l #$F0F0F0F0,(a0)
01:0000116C 69FE            	  1817:             bvs.s *                       * Check V,C are cleared
01:0000116E 65FE            	  1818:             bcs.s *
01:00001170 6AFE            	  1819:             bpl.s *                       * Verify if N flag is set
01:00001172 029000000000    	  1820:             andi.l #$00000000,(a0)
01:00001178 6BFE            	  1821:             bmi.s *                       * Verify if N flag is cleared
01:0000117A 66FE            	  1822:             bne.s *                       * Verify if Z flag is set
01:0000117C 4A90            	  1823:             cmpi.l #$00,(a0)
01:0000117E 66FE            	  1824:             bne.s *                       * Verify if Z flag is set
                            	  1825: 
                            	  1826: 
                            	  1827: 
                            	  1828: *     (An)+ -- BYTE
01:00001180 307C0100        	  1829:             move.l #$00000100,a0
01:00001184 20BC00A5FF88    	  1830:             move.l #$00A5FF88,(a0)
01:0000118A 44FC000F        	  1831:             move.w #$000F,CCR          * pre-set Flags
                            	  1832: 
01:0000118E 001800F5        	  1833:             ori.b  #$F5,(a0)+
01:00001192 6AFE            	  1834:             bpl.s *                       * Verify if N flag is set
01:00001194 67FE            	  1835:             beq.s *                       * Verify if Z flag is cleared
                            	  1836: 
01:00001196 4618            	  1837:             eori.b #$FF,(a0)+
01:00001198 6BFE            	  1838:             bmi.s *                       * Verify if N flag is cleared
01:0000119A 67FE            	  1839:             beq.s *                       * Verify if Z flag is cleared
                            	  1840: 
01:0000119C 021800AA        	  1841:             andi.b #$AA,(a0)+
01:000011A0 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
01:000011A2 67FE            	  1843:             beq.s *                       * Verify if Z flag is cleared
                            	  1844: 
01:000011A4 307C0100        	  1845:             move.l #$00000100,a0
01:000011A8 0C90F55AAA88    	  1846:             cmpi.l #$F55AAA88,(a0)
01:000011AE 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: *     (An)+ -- WORD
01:000011B0 307C0100        	  1851:             move.l #$00000100,a0
01:000011B4 327C0104        	  1852:             move.l #$00000104,a1
01:000011B8 20BC00005A5A    	  1853:             move.l #$00005a5a,(a0)
01:000011BE 22BC12345678    	  1854:             move.l #$12345678,(a1)
01:000011C4 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
01:000011C8 00585678        	  1857:             ori.w  #$5678,(a0)+
01:000011CC 6BFE            	  1858:             bmi.s *                       * Verify if N flag is cleared
01:000011CE 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
01:000011D0 4658            	  1861:             eori.w #$FFFF,(a0)+
01:000011D2 6AFE            	  1862:             bpl.s *                       * Verify if N flag is set
01:000011D4 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
01:000011D6 0258A55A        	  1865:             andi.w #$A55A,(a0)+
01:000011DA 6BFE            	  1866:             bmi.s *                       * Verify if N flag is cleared
01:000011DC 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
01:000011DE 307C0100        	  1869:             move.l #$00000100,a0
01:000011E2 0C905678A5A5    	  1870:             cmpi.l #$5678a5a5,(a0)
01:000011E8 307C0104        	  1871:             move.l #$00000104,a0
01:000011EC 0C9000105678    	  1872:             cmpi.l #$00105678,(a0)
01:000011F2 66FE            	  1873:             bne.s *                       * Verify if Z flag is set
                            	  1874: 
                            	  1875: *     (An)+ -- LONG
01:000011F4 307C0100        	  1876:             move.l #$00000100,a0
01:000011F8 20FC00000000    	  1877:             move.l #$00000000,(a0)+
01:000011FE 20FC5A5A5A5A    	  1878:             move.l #$5a5a5a5a,(a0)+
01:00001204 20FCFFFFFFFF    	  1879:             move.l #$FFFFFFFF,(a0)+
01:0000120A 307C0100        	  1880:             move.l #$00000100,a0
01:0000120E 44FC000F        	  1881:             move.w #$000F,CCR          * pre-set Flags
                            	  1882: 
01:00001212 009812345678    	  1883:             ori.l  #$12345678,(a0)+
01:00001218 6BFE            	  1884:             bmi.s *                       * Verify if N flag is cleared
01:0000121A 67FE            	  1885:             beq.s *                       * Verify if Z flag is cleared
                            	  1886: 
01:0000121C 4698            	  1887:             eori.l #$FFFFFFFF,(a0)+
01:0000121E 6AFE            	  1888:             bpl.s *                       * Verify if N flag is set
01:00001220 67FE            	  1889:             beq.s *                       * Verify if Z flag is cleared
                            	  1890: 
01:00001222 0298A5A5A55A    	  1891:             andi.l #$A5A5A55A,(a0)+
01:00001228 6AFE            	  1892:             bpl.s *                       * Verify if N flag is set
01:0000122A 67FE            	  1893:             beq.s *                       * Verify if Z flag is cleared
                            	  1894: 
01:0000122C 307C0100        	  1895:             move.l #$00000100,a0
01:00001230 0C9812345678    	  1896:             cmpi.l #$12345678,(a0)+
01:00001236 0C98A5A5A5A5    	  1897:             cmpi.l #$a5a5a5a5,(a0)+
01:0000123C 0C98A5A5A55A    	  1898:             cmpi.l #$a5a5a55a,(a0)+
01:00001242 66FE            	  1899:             bne.s *                       * Verify if Z flag is set
                            	  1900: 
01:00001244 4E75            	  1901:             rts
                            	  1902: 
                            	  1903: 
                            	  1904: *-----------------------------------------------------------
                            	  1905: *-----------------------------------------------------------
                            	  1906: * OPCODE : BSR
                            	  1907: *-----------------------------------------------------------
                            	  1908: *-----------------------------------------------------------
                            	  1909: 
                            	  1910: 
01:00001246 223C11111111    	  1911: BSR_CLOSE1:     move.l #$11111111,d1
01:0000124C 4E75            	  1912:                 rts
                            	  1913: 
                            	  1914: 
                            	  1915: 
01:0000124E 61F6            	  1916: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:00001250 612A            	  1917:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:00001252 6100EEAA        	  1918:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:00001256 61001460        	  1919:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1920: 
01:0000125A 0C8111111111    	  1921:                 cmpi.l #$11111111,d1
01:00001260 66FE            	  1922:                 bne.s *
01:00001262 0C8222222222    	  1923:                 cmpi.l #$22222222,d2
01:00001268 66FE            	  1924:                 bne.s *
01:0000126A 0C8333333333    	  1925:                 cmpi.l #$33333333,d3
01:00001270 66FE            	  1926:                 bne.s *
01:00001272 0C8444444444    	  1927:                 cmpi.l #$44444444,d4
01:00001278 66FE            	  1928:                 bne.s *
                            	  1929: 
01:0000127A 4E75            	  1930:                 rts
                            	  1931: 
                            	  1932: 
01:0000127C 243C22222222    	  1933: BSR_CLOSE2:     move.l #$22222222,d2
01:00001282 4E75            	  1934:                 rts
                            	  1935: 
                            	  1936: *-----------------------------------------------------------
                            	  1937: *-----------------------------------------------------------
                            	  1938: * OPCODE : op_CMP_I
                            	  1939: *-----------------------------------------------------------
                            	  1940: *-----------------------------------------------------------
                            	  1941: op_CMP_I:
                            	  1942: 
01:00001284 307C0100        	  1943:             move.l #$00000100,a0
01:00001288 20BC00000100    	  1944:             move.l #$00000100,(a0)
                            	  1945: 
                            	  1946: *     REGISTER - BYTE
01:0000128E 7080            	  1947:             move.l #$FFFFFF80,d0
01:00001290 0C000080        	  1948:             cmpi.b #$80,d0
01:00001294 66FE            	  1949:             bne.s *                       * Check Z Flag  beq/bne
01:00001296 6BFE            	  1950:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001298 65FE            	  1951:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000129A 69FE            	  1952:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1953: 
01:0000129C 223CFFFFF000    	  1954:             move.l #$FFFFF000,d1
01:000012A2 4A01            	  1955:             cmpi.b #$00,d1
01:000012A4 66FE            	  1956:             bne.s *                       * Check Z Flag  beq/bne
01:000012A6 6BFE            	  1957:             bmi.s *                       * Check N Flag  bmi/bpl
01:000012A8 65FE            	  1958:             bcs.s *                       * Check C Flag  bcc/bcs
01:000012AA 69FE            	  1959:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1960: 
01:000012AC 7481D442        	  1961:             move.l #$FFFFFF02,d2
01:000012B0 0C0200FF        	  1962:             cmpi.b #$FF,d2
01:000012B4 67FE            	  1963:             beq.s *                       * Check Z Flag  beq/bne
01:000012B6 6BFE            	  1964:             bmi.s *                       * Check N Flag  bmi/bpl
01:000012B8 64FE            	  1965:             bcc.s *                       * Check C Flag  bcc/bcs
01:000012BA 69FE            	  1966:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1967: 
01:000012BC 263CFFFFFF7F    	  1968:             move.l #$FFFFFF7F,d3
01:000012C2 0C0300FF        	  1969:             cmpi.b #$FF,d3
01:000012C6 67FE            	  1970:             beq.s *                       * Check Z Flag  beq/bne
01:000012C8 6AFE            	  1971:             bpl.s *                       * Check N Flag  bmi/bpl
01:000012CA 64FE            	  1972:             bcc.s *                       * Check C Flag  bcc/bcs
01:000012CC 68FE            	  1973:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1974: 
                            	  1975: 
                            	  1976: *     REGISTER - WORD
01:000012CE 203CFFFF8000    	  1977:             move.l #$FFFF8000,d0
01:000012D4 0C408000        	  1978:             cmpi.w #$8000,d0
01:000012D8 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
01:000012DA 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
01:000012DC 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
01:000012DE 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
01:000012E0 223CFFF00000    	  1984:             move.l #$FFF00000,d1
01:000012E6 4A41            	  1985:             cmpi.w #$0000,d1
01:000012E8 66FE            	  1986:             bne.s *                       * Check Z Flag  beq/bne
01:000012EA 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
01:000012EC 65FE            	  1988:             bcs.s *                       * Check C Flag  bcc/bcs
01:000012EE 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
01:000012F0 243CFFFF0002    	  1991:             move.l #$FFFF0002,d2
01:000012F6 0C42FFFF        	  1992:             cmpi.w #$FFFF,d2
01:000012FA 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
01:000012FC 6BFE            	  1994:             bmi.s *                       * Check N Flag  bmi/bpl
01:000012FE 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001300 69FE            	  1996:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
01:00001302 263CFFFF7FFF    	  1998:             move.l #$FFFF7FFF,d3
01:00001308 0C43FFFF        	  1999:             cmpi.w #$FFFF,d3
01:0000130C 67FE            	  2000:             beq.s *                       * Check Z Flag  beq/bne
01:0000130E 6AFE            	  2001:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001310 64FE            	  2002:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001312 68FE            	  2003:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2004: 
                            	  2005: *     REGISTER - LONG
01:00001314 203C80000000    	  2006:             move.l #$80000000,d0
01:0000131A 0C8080000000    	  2007:             cmpi.l #$80000000,d0
01:00001320 66FE            	  2008:             bne.s *                       * Check Z Flag  beq/bne
01:00001322 6BFE            	  2009:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001324 65FE            	  2010:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001326 69FE            	  2011:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2012: 
01:00001328 7200            	  2013:             moveq  #$00000000,d1
01:0000132A 4A81            	  2014:             cmpi.l #$00000000,d1
01:0000132C 66FE            	  2015:             bne.s *                       * Check Z Flag  beq/bne
01:0000132E 6BFE            	  2016:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001330 65FE            	  2017:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001332 69FE            	  2018:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2019: 
01:00001334 7402            	  2020:             moveq  #$00000002,d2
01:00001336 0C82FFFFFFFF    	  2021:             cmpi.l #$FFFFFFFF,d2
01:0000133C 67FE            	  2022:             beq.s *                       * Check Z Flag  beq/bne
01:0000133E 6BFE            	  2023:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001340 64FE            	  2024:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001342 69FE            	  2025:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2026: 
01:00001344 263C7FFFFFFF    	  2027:             move.l #$7FFFFFFF,d3
01:0000134A 0C83FFFFFFFF    	  2028:             cmpi.l #$FFFFFFFF,d3
01:00001350 67FE            	  2029:             beq.s *                       * Check Z Flag  beq/bne
01:00001352 6AFE            	  2030:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001354 64FE            	  2031:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001356 68FE            	  2032:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2033: 
                            	  2034: 
                            	  2035: 
                            	  2036: 
                            	  2037: *     EA=x(An,Dn) - BYTE
01:00001358 307C0100        	  2038:             move.l #$00000100,a0
01:0000135C 7E04            	  2039:             moveq  #$00000004,d7
                            	  2040: 
01:0000135E 21BCFFFFFF80700C	  2041:             move.l #$FFFFFF80,12(a0,d7)
01:00001366 21BCFFFFFF80700C	  2042:             move.l #$FFFFFF80,12(a0,d7)
01:0000136E 0C300080700F    	  2043:             cmpi.b #$80,15(a0,d7)
01:00001374 66FE            	  2044:             bne.s *                       * Check Z Flag  beq/bne
01:00001376 6BFE            	  2045:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001378 65FE            	  2046:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000137A 69FE            	  2047:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2048: 
01:0000137C 21BCFFFFF000700C	  2049:             move.l #$FFFFF000,12(a0,d7)
01:00001384 4A30700F        	  2050:             cmpi.b #$00,15(a0,d7)
01:00001388 66FE            	  2051:             bne.s *                       * Check Z Flag  beq/bne
01:0000138A 6BFE            	  2052:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000138C 65FE            	  2053:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000138E 69FE            	  2054:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2055: 
01:00001390 21BCFFFFFF02700C	  2056:             move.l #$FFFFFF02,12(a0,d7)
01:00001398 0C3000FF700F    	  2057:             cmpi.b #$FF,15(a0,d7)
01:0000139E 67FE            	  2058:             beq.s *                       * Check Z Flag  beq/bne
01:000013A0 6BFE            	  2059:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013A2 64FE            	  2060:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013A4 69FE            	  2061:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2062: 
01:000013A6 21BCFFFFFF7F700C	  2063:             move.l #$FFFFFF7F,12(a0,d7)
01:000013AE 0C3000FF700F    	  2064:             cmpi.b #$FF,15(a0,d7)
01:000013B4 67FE            	  2065:             beq.s *                       * Check Z Flag  beq/bne
01:000013B6 6AFE            	  2066:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013B8 64FE            	  2067:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013BA 68FE            	  2068:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2069: 
                            	  2070: 
                            	  2071: *     EA=x(An,Dn) - WORD
01:000013BC 21BCFFFF8000700C	  2072:             move.l #$FFFF8000,12(a0,d7)
01:000013C4 0C708000700E    	  2073:             cmpi.w #$8000,14(a0,d7)
01:000013CA 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
01:000013CC 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013CE 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013D0 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
01:000013D2 21BCFFF00000700C	  2079:             move.l #$FFF00000,12(a0,d7)
01:000013DA 4A70700E        	  2080:             cmpi.w #$0000,14(a0,d7)
01:000013DE 66FE            	  2081:             bne.s *                       * Check Z Flag  beq/bne
01:000013E0 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013E2 65FE            	  2083:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013E4 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
01:000013E6 21BCFFFF0002700C	  2086:             move.l #$FFFF0002,12(a0,d7)
01:000013EE 0C70FFFF700E    	  2087:             cmpi.w #$FFFF,14(a0,d7)
01:000013F4 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
01:000013F6 6BFE            	  2089:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013F8 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013FA 69FE            	  2091:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
01:000013FC 21BCFFFF7FFF700C	  2093:             move.l #$FFFF7FFF,12(a0,d7)
01:00001404 0C70FFFF700E    	  2094:             cmpi.w #$FFFF,14(a0,d7)
01:0000140A 67FE            	  2095:             beq.s *                       * Check Z Flag  beq/bne
01:0000140C 6AFE            	  2096:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000140E 64FE            	  2097:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001410 68FE            	  2098:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2099: 
                            	  2100: *     EA=x(An,Dn) - LONG
01:00001412 21BC80000000700C	  2101:             move.l #$80000000,12(a0,d7)
01:0000141A 0CB080000000700C	  2102:             cmpi.l #$80000000,12(a0,d7)
01:00001422 66FE            	  2103:             bne.s *                       * Check Z Flag  beq/bne
01:00001424 6BFE            	  2104:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001426 65FE            	  2105:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001428 69FE            	  2106:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2107: 
01:0000142A 21BC00000000700C	  2108:             move.l #$00000000,12(a0,d7)
01:00001432 4AB0700C        	  2109:             cmpi.l #$00000000,12(a0,d7)
01:00001436 66FE            	  2110:             bne.s *                       * Check Z Flag  beq/bne
01:00001438 6BFE            	  2111:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000143A 65FE            	  2112:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000143C 69FE            	  2113:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2114: 
01:0000143E 21BC00000002700C	  2115:             move.l #$00000002,12(a0,d7)
01:00001446 0CB0FFFFFFFF700C	  2116:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:0000144E 67FE            	  2117:             beq.s *                       * Check Z Flag  beq/bne
01:00001450 6BFE            	  2118:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001452 64FE            	  2119:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001454 69FE            	  2120:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2121: 
01:00001456 21BC7FFFFFFF700C	  2122:             move.l #$7FFFFFFF,12(a0,d7)
01:0000145E 0CB0FFFFFFFF700C	  2123:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001466 67FE            	  2124:             beq.s *                       * Check Z Flag  beq/bne
01:00001468 6AFE            	  2125:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000146A 64FE            	  2126:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000146C 68FE            	  2127:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2128: 
                            	  2129: 
                            	  2130: 
                            	  2131: 
01:0000146E 4E75            	  2132:             rts
                            	  2133: 
                            	  2134: 
                            	  2135: 
                            	  2136: *-----------------------------------------------------------
                            	  2137: *-----------------------------------------------------------
                            	  2138: * OPCODE : ADD_I
                            	  2139: *-----------------------------------------------------------
                            	  2140: *-----------------------------------------------------------
                            	  2141: op_ADD_I:
                            	  2142: 
                            	  2143: *     EA = Dn  - Byte
01:00001470 203C12345678    	  2144:             move.l #$12345678,d0      * populate test data
01:00001476 06000000        	  2145:             addi.b #0,d0
01:0000147A 67FE            	  2146:             beq.s *                       * Check Z Flag  beq/bne
01:0000147C 6BFE            	  2147:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000147E 65FE            	  2148:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001480 69FE            	  2149:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001482 06000010        	  2150:             addi.b #$10,d0
01:00001486 67FE            	  2151:             beq.s *                       * Check Z Flag  beq/bne
01:00001488 6AFE            	  2152:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000148A 65FE            	  2153:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000148C 68FE            	  2154:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000148E 060000A5        	  2155:             addi.b #$A5,d0
01:00001492 67FE            	  2156:             beq.s *                       * Check Z Flag  beq/bne
01:00001494 6BFE            	  2157:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001496 64FE            	  2158:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001498 68FE            	  2159:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000149A 0C00002D        	  2160:             cmpi.b #$2D,d0
01:0000149E 66FE            	  2161:             bne.s *                       * Check Z Flag  beq/bne
                            	  2162: 
                            	  2163: *     EA = Dn  - WORD
01:000014A0 203C12345678    	  2164:             move.l #$12345678,d0      * populate test data
01:000014A6 06400000        	  2165:             addi.w #0,d0
01:000014AA 67FE            	  2166:             beq.s *                       * Check Z Flag  beq/bne
01:000014AC 6BFE            	  2167:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014AE 65FE            	  2168:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014B0 69FE            	  2169:             bvs.s *                       * Check V Flag  bvc/bvs
01:000014B2 06407000        	  2170:             addi.w #$7000,d0
01:000014B6 67FE            	  2171:             beq.s *                       * Check Z Flag  beq/bne
01:000014B8 6AFE            	  2172:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014BA 65FE            	  2173:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014BC 68FE            	  2174:             bvc.s *                       * Check V Flag  bvc/bvs
01:000014BE 0640A55A        	  2175:             addi.w #$A55A,d0
01:000014C2 67FE            	  2176:             beq.s *                       * Check Z Flag  beq/bne
01:000014C4 6BFE            	  2177:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014C6 64FE            	  2178:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014C8 68FE            	  2179:             bvc.s *                       * Check V Flag  bvc/bvs
01:000014CA 0C406BD2        	  2180:             cmpi.w #$6BD2,d0
01:000014CE 66FE            	  2181:             bne.s *                       * Check Z Flag  beq/bne
                            	  2182: 
                            	  2183: *     EA = Dn  - LONG
01:000014D0 203C12345678    	  2184:             move.l #$12345678,d0      * populate test data
01:000014D6 068000000000    	  2185:             addi.l #0,d0
01:000014DC 67FE            	  2186:             beq.s *                       * Check Z Flag  beq/bne
01:000014DE 6BFE            	  2187:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014E0 65FE            	  2188:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014E2 69FE            	  2189:             bvs.s *                       * Check V Flag  bvc/bvs
01:000014E4 0680F0000000    	  2190:             addi.l #$F0000000,d0
01:000014EA 67FE            	  2191:             beq.s *                       * Check Z Flag  beq/bne
01:000014EC 6BFE            	  2192:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014EE 64FE            	  2193:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014F0 69FE            	  2194:             bvs.s *                       * Check V Flag  bvc/bvs
01:000014F2 0680855AA55A    	  2195:             addi.l #$855AA55A,d0
01:000014F8 67FE            	  2196:             beq.s *                       * Check Z Flag  beq/bne
01:000014FA 6AFE            	  2197:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014FC 65FE            	  2198:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014FE 69FE            	  2199:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001500 0680A0000000    	  2200:             addi.l #$A0000000,d0
01:00001506 68FE            	  2201:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001508 0C80278EFBD2    	  2202:             cmpi.l #$278EFBD2,d0
01:0000150E 66FE            	  2203:             bne.s *                       * Check Z Flag  beq/bne
                            	  2204: 
                            	  2205: 
                            	  2206: 
                            	  2207: *     EA = x.L  - Byte
01:00001510 207C0000F100    	  2208:             move.l #$F100,a0      * populate test data
01:00001516 20BC12345678    	  2209:             move.l #$12345678,(a0)     * populate test data
01:0000151C 063900000000F103	  2210:             addi.b #0,$F103
01:00001524 67FE            	  2211:             beq.s *                       * Check Z Flag  beq/bne
01:00001526 6BFE            	  2212:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001528 65FE            	  2213:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000152A 69FE            	  2214:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000152C 063900100000F103	  2215:             addi.b #$10,$F103
01:00001534 67FE            	  2216:             beq.s *                       * Check Z Flag  beq/bne
01:00001536 6AFE            	  2217:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001538 65FE            	  2218:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000153A 68FE            	  2219:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000153C 063900A50000F103	  2220:             addi.b #$A5,$F103
01:00001544 67FE            	  2221:             beq.s *                       * Check Z Flag  beq/bne
01:00001546 6BFE            	  2222:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001548 64FE            	  2223:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000154A 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000154C 0C39002D0000F103	  2225:             cmpi.b #$2D,$F103
01:00001554 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: *     EA = x.L- WORD
01:00001556 207C0000F100    	  2229:             move.l #$F100,a0      * populate test data
01:0000155C 20BC12345678    	  2230:             move.l #$12345678,(a0)     * populate test data
01:00001562 067900000000F100	  2231:             addi.w #0,$F100
01:0000156A 67FE            	  2232:             beq.s *                       * Check Z Flag  beq/bne
01:0000156C 6BFE            	  2233:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000156E 65FE            	  2234:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001570 69FE            	  2235:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001572 067970000000F100	  2236:             addi.w #$7000,$F100
01:0000157A 67FE            	  2237:             beq.s *                       * Check Z Flag  beq/bne
01:0000157C 6AFE            	  2238:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000157E 65FE            	  2239:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001580 68FE            	  2240:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001582 0679A55A0000F100	  2241:             addi.w #$A55A,$F100
01:0000158A 67FE            	  2242:             beq.s *                       * Check Z Flag  beq/bne
01:0000158C 6BFE            	  2243:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000158E 64FE            	  2244:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001590 68FE            	  2245:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001592 0C79278E0000F100	  2246:             cmpi.w #$278E,$F100
01:0000159A 66FE            	  2247:             bne.s *                       * Check Z Flag  beq/bne
                            	  2248: 
                            	  2249: *     EA = x.L- LONG
01:0000159C 23FC123456780000	  2250:             move.l #$12345678,$F100  * populate test data
01:000015A4 F100
01:000015A6 06B9000000000000	  2251:             addi.l #0,$F100
01:000015AE F100
01:000015B0 67FE            	  2252:             beq.s *                       * Check Z Flag  beq/bne
01:000015B2 6BFE            	  2253:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015B4 65FE            	  2254:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015B6 69FE            	  2255:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015B8 06B9F00000000000	  2256:             addi.l #$F0000000,$F100
01:000015C0 F100
01:000015C2 67FE            	  2257:             beq.s *                       * Check Z Flag  beq/bne
01:000015C4 6BFE            	  2258:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015C6 64FE            	  2259:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015C8 69FE            	  2260:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015CA 06B9855AA55A0000	  2261:             addi.l #$855AA55A,$F100
01:000015D2 F100
01:000015D4 67FE            	  2262:             beq.s *                       * Check Z Flag  beq/bne
01:000015D6 6AFE            	  2263:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015D8 65FE            	  2264:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015DA 69FE            	  2265:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015DC 06B9A00000000000	  2266:             addi.l #$A0000000,$F100
01:000015E4 F100
01:000015E6 68FE            	  2267:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015E8 0CB9278EFBD20000	  2268:             cmpi.l #$278EFBD2,$F100
01:000015F0 F100
01:000015F2 66FE            	  2269:             bne.s *                       * Check Z Flag  beq/bne
                            	  2270: 
01:000015F4 4E75            	  2271:             rts
                            	  2272: 
                            	  2273: 
                            	  2274: *-----------------------------------------------------------
                            	  2275: *-----------------------------------------------------------
                            	  2276: * OPCODE : SUB_I
                            	  2277: *-----------------------------------------------------------
                            	  2278: *-----------------------------------------------------------
                            	  2279: op_SUB_I:
                            	  2280: 
                            	  2281: *     EA = Dn  - Byte
01:000015F6 203C12345678    	  2282:             move.l #$12345678,d0      * populate test data
01:000015FC 04000000        	  2283:             subi.b #0,d0
01:00001600 67FE            	  2284:             beq.s *                       * Check Z Flag  beq/bne
01:00001602 6BFE            	  2285:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001604 65FE            	  2286:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001606 69FE            	  2287:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001608 04000010        	  2288:             subi.b #$10,d0
01:0000160C 67FE            	  2289:             beq.s *                       * Check Z Flag  beq/bne
01:0000160E 6BFE            	  2290:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001610 65FE            	  2291:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001612 69FE            	  2292:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001614 040000A5        	  2293:             subi.b #$A5,d0
01:00001618 67FE            	  2294:             beq.s *                       * Check Z Flag  beq/bne
01:0000161A 6AFE            	  2295:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000161C 64FE            	  2296:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000161E 68FE            	  2297:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001620 0C0000C3        	  2298:             cmpi.b #$C3,d0
01:00001624 66FE            	  2299:             bne.s *                       * Check Z Flag  beq/bne
                            	  2300: 
                            	  2301: *     EA = Dn  - WORD
01:00001626 203C12345678    	  2302:             move.l #$12345678,d0      * populate test data
01:0000162C 04400000        	  2303:             subi.w #0,d0
01:00001630 67FE            	  2304:             beq.s *                       * Check Z Flag  beq/bne
01:00001632 6BFE            	  2305:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001634 65FE            	  2306:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001636 69FE            	  2307:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001638 04407000        	  2308:             subi.w #$7000,d0
01:0000163C 67FE            	  2309:             beq.s *                       * Check Z Flag  beq/bne
01:0000163E 6AFE            	  2310:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001640 64FE            	  2311:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001642 69FE            	  2312:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001644 0440A55A        	  2313:             subi.w #$A55A,d0
01:00001648 67FE            	  2314:             beq.s *                       * Check Z Flag  beq/bne
01:0000164A 6BFE            	  2315:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000164C 65FE            	  2316:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000164E 69FE            	  2317:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001650 0C40411E        	  2318:             cmpi.w #$411E,d0
01:00001654 66FE            	  2319:             bne.s *                       * Check Z Flag  beq/bne
                            	  2320: 
                            	  2321: *     EA = Dn  - LONG
01:00001656 203C12345678    	  2322:             move.l #$12345678,d0      * populate test data
01:0000165C 048000000000    	  2323:             subi.l #0,d0
01:00001662 67FE            	  2324:             beq.s *                       * Check Z Flag  beq/bne
01:00001664 6BFE            	  2325:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001666 65FE            	  2326:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001668 69FE            	  2327:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000166A 0480F0000000    	  2328:             subi.l #$F0000000,d0
01:00001670 67FE            	  2329:             beq.s *                       * Check Z Flag  beq/bne
01:00001672 6BFE            	  2330:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001674 64FE            	  2331:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001676 69FE            	  2332:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001678 0480855AA55A    	  2333:             subi.l #$855AA55A,d0
01:0000167E 67FE            	  2334:             beq.s *                       * Check Z Flag  beq/bne
01:00001680 6AFE            	  2335:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001682 64FE            	  2336:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001684 68FE            	  2337:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001686 0480A0000000    	  2338:             subi.l #$A0000000,d0
01:0000168C 69FE            	  2339:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000168E 0C80FCD9B11E    	  2340:             cmpi.l #$FCD9B11E,d0
01:00001694 66FE            	  2341:             bne.s *                       * Check Z Flag  beq/bne
                            	  2342: 
                            	  2343: 
                            	  2344: 
                            	  2345: *     EA = x.L  - Byte
01:00001696 207C0000F100    	  2346:             move.l #$F100,a0      * populate test data
01:0000169C 20BC12345678    	  2347:             move.l #$12345678,(a0)     * populate test data
01:000016A2 043900000000F103	  2348:             subi.b #0,$F103
01:000016AA 67FE            	  2349:             beq.s *                       * Check Z Flag  beq/bne
01:000016AC 6BFE            	  2350:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016AE 65FE            	  2351:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016B0 69FE            	  2352:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016B2 043900100000F103	  2353:             subi.b #$10,$F103
01:000016BA 67FE            	  2354:             beq.s *                       * Check Z Flag  beq/bne
01:000016BC 6BFE            	  2355:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016BE 65FE            	  2356:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016C0 69FE            	  2357:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016C2 043900A50000F103	  2358:             subi.b #$A5,$F103
01:000016CA 67FE            	  2359:             beq.s *                       * Check Z Flag  beq/bne
01:000016CC 6AFE            	  2360:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016CE 64FE            	  2361:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016D0 68FE            	  2362:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016D2 0C3900C30000F103	  2363:             cmpi.b #$C3,$F103
01:000016DA 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: *     EA = x.L- WORD
01:000016DC 207C0000F100    	  2367:             move.l #$F100,a0      * populate test data
01:000016E2 20BC12345678    	  2368:             move.l #$12345678,(a0)     * populate test data
01:000016E8 047900000000F100	  2369:             subi.w #0,$F100
01:000016F0 67FE            	  2370:             beq.s *                       * Check Z Flag  beq/bne
01:000016F2 6BFE            	  2371:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016F4 65FE            	  2372:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016F6 69FE            	  2373:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016F8 047970000000F100	  2374:             subi.w #$7000,$F100
01:00001700 67FE            	  2375:             beq.s *                       * Check Z Flag  beq/bne
01:00001702 6AFE            	  2376:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001704 64FE            	  2377:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001706 69FE            	  2378:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001708 0479A55A0000F100	  2379:             subi.w #$A55A,$F100
01:00001710 67FE            	  2380:             beq.s *                       * Check Z Flag  beq/bne
01:00001712 6AFE            	  2381:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001714 64FE            	  2382:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001716 69FE            	  2383:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001718 0C79FCDA0000F100	  2384:             cmpi.w #$FCDA,$F100
01:00001720 66FE            	  2385:             bne.s *                       * Check Z Flag  beq/bne
                            	  2386: 
                            	  2387: *     EA = x.L- LONG
01:00001722 23FC123456780000	  2388:             move.l #$12345678,$F100  * populate test data
01:0000172A F100
01:0000172C 04B9000000000000	  2389:             subi.l #0,$F100
01:00001734 F100
01:00001736 67FE            	  2390:             beq.s *                       * Check Z Flag  beq/bne
01:00001738 6BFE            	  2391:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000173A 65FE            	  2392:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000173C 69FE            	  2393:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000173E 04B9F00000000000	  2394:             subi.l #$F0000000,$F100
01:00001746 F100
01:00001748 67FE            	  2395:             beq.s *                       * Check Z Flag  beq/bne
01:0000174A 6BFE            	  2396:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000174C 64FE            	  2397:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000174E 69FE            	  2398:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001750 04B9855AA55A0000	  2399:             subi.l #$855AA55A,$F100
01:00001758 F100
01:0000175A 67FE            	  2400:             beq.s *                       * Check Z Flag  beq/bne
01:0000175C 6AFE            	  2401:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000175E 64FE            	  2402:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001760 68FE            	  2403:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001762 04B9A00000000000	  2404:             subi.l #$A0000000,$F100
01:0000176A F100
01:0000176C 69FE            	  2405:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000176E 0CB9FCD9B11E0000	  2406:             cmpi.l #$FCD9B11E,$F100
01:00001776 F100
01:00001778 66FE            	  2407:             bne.s *                       * Check Z Flag  beq/bne
                            	  2408: 
01:0000177A 4E75            	  2409:             rts
                            	  2410: 
                            	  2411: 
                            	  2412: 
                            	  2413: *-----------------------------------------------------------
                            	  2414: *-----------------------------------------------------------
                            	  2415: * OPCODE : MOVE
                            	  2416: *-----------------------------------------------------------
                            	  2417: *-----------------------------------------------------------
                            	  2418: op_MOVE:
01:0000177C 203C11223344    	  2419:             move.l #$11223344,d0
01:00001782 223C55667788    	  2420:             move.l #$55667788,d1
01:00001788 243C8899AABB    	  2421:             move.l #$8899aabb,d2
01:0000178E 263CCCDDEEFF    	  2422:             move.l #$ccddeeff,d3
01:00001794 7800            	  2423:             moveq  #$00000000,d4
01:00001796 7A00            	  2424:             moveq  #$00000000,d5
01:00001798 7C00            	  2425:             moveq  #$00000000,d6
01:0000179A 7E00            	  2426:             moveq  #$00000000,d7
01:0000179C 207C44332211    	  2427:             move.l #$44332211,a0
01:000017A2 227C88776655    	  2428:             move.l #$88776655,a1
01:000017A8 247CBBAA9988    	  2429:             move.l #$bbaa9988,a2
01:000017AE 267CFFEEDDCC    	  2430:             move.l #$ffeeddcc,a3
                            	  2431: 
01:000017B4 1800            	  2432:             move.b d0,d4              * BYTE - DATA REGISTER
01:000017B6 67FE            	  2433:             beq.s *                       * Check Z Flag  beq/bne
01:000017B8 6BFE            	  2434:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017BA 0C8400000044    	  2435:             cmpi.l #$00000044,d4
01:000017C0 66FE            	  2436:             bne.s *                       * Check Z Flag  beq/bne
                            	  2437: 
01:000017C2 3A01            	  2438:             move.w d1,d5              * WORD - DATA REGISTER
01:000017C4 67FE            	  2439:             beq.s *                       * Check Z Flag  beq/bne
01:000017C6 6BFE            	  2440:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017C8 0C8500007788    	  2441:             cmpi.l #$00007788,d5
01:000017CE 66FE            	  2442:             bne.s *                       * Check Z Flag  beq/bne
                            	  2443: 
01:000017D0 2C02            	  2444:             move.l d2,d6              * LONG - DATA REGISTER
01:000017D2 67FE            	  2445:             beq.s *                       * Check Z Flag  beq/bne
01:000017D4 6AFE            	  2446:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017D6 0C868899AABB    	  2447:             cmpi.l #$8899aabb,d6
01:000017DC 66FE            	  2448:             bne.s *                       * Check Z Flag  beq/bne
                            	  2449: 
01:000017DE 3A09            	  2450:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:000017E0 67FE            	  2451:             beq.s *                       * Check Z Flag  beq/bne
01:000017E2 6BFE            	  2452:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017E4 0C8500006655    	  2453:             cmpi.l #$00006655,d5
01:000017EA 66FE            	  2454:             bne.s *                       * Check Z Flag  beq/bne
                            	  2455: 
01:000017EC 2C0A            	  2456:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:000017EE 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
01:000017F0 6AFE            	  2458:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017F2 0C86BBAA9988    	  2459:             cmpi.l #$bbaa9988,d6
01:000017F8 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
                            	  2462: 
01:000017FA 3842            	  2463:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:000017FC B9C2            	  2464:             cmpa.l d2,a4
01:000017FE 67FE            	  2465:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2466: 
01:00001800 2A41            	  2467:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:00001802 BBC1            	  2468:             cmpa.l d1,a5
01:00001804 66FE            	  2469:             bne.s *                       * Check Z Flag  beq/bne
                            	  2470: 
                            	  2471: 
                            	  2472: 
                            	  2473: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2474: 
01:00001806 203C11223344    	  2475:             move.l #$11223344,d0
01:0000180C 223C00010100    	  2476:             move.l #$00010100,d1
01:00001812 243C8899AABB    	  2477:             move.l #$8899aabb,d2
01:00001818 7601            	  2478:             moveq  #$00000001,d3
01:0000181A 7800            	  2479:             moveq  #$00000000,d4
01:0000181C 7A00            	  2480:             moveq  #$00000000,d5
01:0000181E 7C00            	  2481:             moveq  #$00000000,d6
01:00001820 7E00            	  2482:             moveq  #$00000000,d7
01:00001822 91C8            	  2483:             move.l #$00000000,a0
01:00001824 227C00010100    	  2484:             move.l #$00010100,a1
                            	  2485: 
                            	  2486: *     x(An,AL) --> x.L
01:0000182A 11BC005A9804    	  2487:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001830 47F09804        	  2488:             lea 4(a0,a1.l),a3
01:00001834 13F0980400010105	  2489:             move.b 4(a0,a1.l),$00010105
01:0000183C 67FE            	  2490:             beq.s *                       * Check Z Flag  beq/bne
01:0000183E 6BFE            	  2491:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001840 0C30005A9805    	  2492:             cmpi.b #$5A,5(a0,a1.l)
01:00001846 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: *     x.L --> n(An,Dw)
01:00001848 11B9000101051007	  2496: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:00001850 67FE            	  2497:             beq.s *                       * Check Z Flag  beq/bne
01:00001852 6BFE            	  2498:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001854 0C30005A1007    	  2499:             cmpi.b #$5A,7(a0,d1.w)
01:0000185A 66FE            	  2500:             bne.s *                       * Check Z Flag  beq/bne
                            	  2501: 
                            	  2502: *     x(PC,Ds) --> x.w
01:0000185C 11FB30660100    	  2503:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:00001862 67FE            	  2504:             beq.s *                       * Check Z Flag  beq/bne
01:00001864 6AFE            	  2505:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001866 0C3900B900001849	  2506:             cmpi.b #$B9,1+MOVE2
01:0000186E 66FE            	  2507:             bne.s *                       * Check Z Flag  beq/bne
                            	  2508: 
                            	  2509: *     #x -->    n(An,AL)
01:00001870 11BC00781007    	  2510:             move.b  #$78,7(a0,d1.w)    * BYTE
01:00001876 67FE            	  2511:             beq.s *                       * Check Z Flag  beq/bne
01:00001878 6BFE            	  2512:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000187A 0C3000781007    	  2513:             cmpi.b #$78,7(a0,d1.w)
01:00001880 66FE            	  2514:             bne.s *                       * Check Z Flag  beq/bne
                            	  2515: 
01:00001882 203C11223344    	  2516:             move.l #$11223344,d0
01:00001888 223C00010100    	  2517:             move.l #$00010100,d1
01:0000188E 243C8899AABB    	  2518:             move.l #$8899aabb,d2
01:00001894 7602            	  2519:             moveq  #$00000002,d3
01:00001896 7800            	  2520:             moveq  #$00000000,d4
01:00001898 7A00            	  2521:             moveq  #$00000000,d5
01:0000189A 7C00            	  2522:             moveq  #$00000000,d6
01:0000189C 7E00            	  2523:             moveq  #$00000000,d7
01:0000189E 91C8            	  2524:             move.l #$00000000,a0
01:000018A0 227C00010100    	  2525:             move.l #$00010100,a1
                            	  2526: 
                            	  2527: *     x(An,AL) --> x.L
01:000018A6 31BC5A5A9804    	  2528:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:000018AC 49F09804        	  2529:             lea 4(a0,a1.l),a4
01:000018B0 33F0980400010104	  2530:             move.w 4(a0,a1.l),$00010104
01:000018B8 67FE            	  2531:             beq.s *                       * Check Z Flag  beq/bne
01:000018BA 6BFE            	  2532:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018BC 0C705A5A9804    	  2533:             cmpi.w #$5A5A,4(a0,a1.l)
01:000018C2 66FE            	  2534:             bne.s *                       * Check Z Flag  beq/bne
                            	  2535: 
                            	  2536: *     x.L --> n(An,Dw)
01:000018C4 31B9000101041006	  2537: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000018CC 67FE            	  2538:             beq.s *                       * Check Z Flag  beq/bne
01:000018CE 6BFE            	  2539:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018D0 0C705A5A1006    	  2540:             cmpi.w #$5A5A,6(a0,d1.w)
01:000018D6 66FE            	  2541:             bne.s *                       * Check Z Flag  beq/bne
                            	  2542: 
                            	  2543: *     x(PC,Ds) --> x.w
01:000018D8 31FB30EA0100    	  2544:             move.w  MOVE1(pc,d3),$0100 * WORD
01:000018DE 67FE            	  2545:             beq.s *                       * Check Z Flag  beq/bne
01:000018E0 6BFE            	  2546:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018E2 0C7967FE000018CC	  2547:             cmpi.w #$67FE,8+MOVE1
01:000018EA 66FE            	  2548:             bne.s *                       * Check Z Flag  beq/bne
                            	  2549: 
                            	  2550: *     #x -->    n(An,AL)
01:000018EC 31BC78781006    	  2551:             move.w  #$7878,6(a0,d1.w)    * WORD
01:000018F2 67FE            	  2552:             beq.s *                       * Check Z Flag  beq/bne
01:000018F4 6BFE            	  2553:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018F6 0C7078781006    	  2554:             cmpi.w #$7878,6(a0,d1.w)
01:000018FC 66FE            	  2555:             bne.s *                       * Check Z Flag  beq/bne
                            	  2556: 
                            	  2557: * ---
                            	  2558: 
01:000018FE 203C11223344    	  2559:             move.l #$11223344,d0
01:00001904 223C00010100    	  2560:             move.l #$00010100,d1
01:0000190A 243C8899AABB    	  2561:             move.l #$8899aabb,d2
01:00001910 7602            	  2562:             moveq  #$00000002,d3
01:00001912 7800            	  2563:             moveq  #$00000000,d4
01:00001914 7A00            	  2564:             moveq  #$00000000,d5
01:00001916 7C00            	  2565:             moveq  #$00000000,d6
01:00001918 7E00            	  2566:             moveq  #$00000000,d7
01:0000191A 91C8            	  2567:             move.l #$00000000,a0
01:0000191C 227C00010100    	  2568:             move.l #$00010100,a1
                            	  2569: 
                            	  2570: *     x(An,AL) --> x.L
01:00001922 21BC5A5A12349804	  2571:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:0000192A 49F09804        	  2572:             lea 4(a0,a1.l),a4
01:0000192E 23F0980400010104	  2573:             move.l 4(a0,a1.l),$00010104
01:00001936 67FE            	  2574:             beq.s *                       * Check Z Flag  beq/bne
01:00001938 6BFE            	  2575:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000193A 0CB05A5A12349804	  2576:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001942 66FE            	  2577:             bne.s *                       * Check Z Flag  beq/bne
                            	  2578: 
                            	  2579: *     x.L --> n(An,Dw)
01:00001944 21B9000101041006	  2580: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:0000194C 67FE            	  2581:             beq.s *                       * Check Z Flag  beq/bne
01:0000194E 6BFE            	  2582:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001950 0CB05A5A12341006	  2583:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001958 66FE            	  2584:             bne.s *                       * Check Z Flag  beq/bne
                            	  2585: 
                            	  2586: *     x(PC,Ds) --> x.w
01:0000195A 21FB30E80100    	  2587:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001960 67FE            	  2588:             beq.s *                       * Check Z Flag  beq/bne
01:00001962 6BFE            	  2589:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001964 0CB967FE6BFE0000	  2590:             cmpi.l #$67FE6BFE,8+MOVE3
01:0000196C 194C
01:0000196E 66FE            	  2591:             bne.s *                       * Check Z Flag  beq/bne
                            	  2592: 
                            	  2593: *     #x -->    n(An,AL)
01:00001970 21BC787823231006	  2594:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001978 67FE            	  2595:             beq.s *                       * Check Z Flag  beq/bne
01:0000197A 6BFE            	  2596:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000197C 0CB0787823231006	  2597:             cmpi.l #$78782323,6(a0,d1.w)
01:00001984 66FE            	  2598:             bne.s *                       * Check Z Flag  beq/bne
                            	  2599: 
                            	  2600: 
01:00001986 4E75            	  2601:          rts
                            	  2602: 
                            	  2603: 
                            	  2604: *-----------------------------------------------------------
                            	  2605: *-----------------------------------------------------------
                            	  2606: * OPCODE : MOVE_xxx_FLAGS
                            	  2607: *-----------------------------------------------------------
                            	  2608: *-----------------------------------------------------------
                            	  2609: op_MOVE_xxx_FLAGS:
                            	  2610: 
                            	  2611: *     Move_To_SR
                            	  2612: 
                            	  2613: *     Dn
                            	  2614: 
01:00001988 303C2FFF        	  2615:             move.w #$2FFF,d0
01:0000198C 46C0            	  2616:             move d0,SR
01:0000198E 6AFE            	  2617:             bpl.s *           * branch if Z clear
01:00001990 66FE            	  2618:             bne.s *           * branch if N clear
01:00001992 68FE            	  2619:             bvc.s *           * branch if V clear
01:00001994 64FE            	  2620:             bcc.s *           * branch if C clear
01:00001996 303C2F00        	  2621:             move.w #$2F00,d0
01:0000199A 44C0            	  2622:             move d0,CCR
01:0000199C 67FE            	  2623:             beq.s *           * branch if Z set
01:0000199E 6BFE            	  2624:             bmi.s *           * branch if N set
01:000019A0 69FE            	  2625:             bvs.s *           * branch if V set
01:000019A2 65FE            	  2626:             bcs.s *           * branch if C set
                            	  2627: 
01:000019A4 303C2000        	  2628:             move.w #$2000,d0
01:000019A8 46C0            	  2629:             move d0,SR
01:000019AA 67FE            	  2630:             beq.s *           * branch if Z set
01:000019AC 6BFE            	  2631:             bmi.s *           * branch if N set
01:000019AE 69FE            	  2632:             bvs.s *           * branch if V set
01:000019B0 65FE            	  2633:             bcs.s *           * branch if C set
                            	  2634: 
                            	  2635: *     (An)
01:000019B2 307C0100        	  2636:             move.l #$00000100,a0
01:000019B6 30BC2FFF        	  2637:             move.w #$2FFF,(a0)
01:000019BA 46D0            	  2638:             move (a0),SR
01:000019BC 6AFE            	  2639:             bpl.s *           * branch if Z clear
01:000019BE 66FE            	  2640:             bne.s *           * branch if N clear
01:000019C0 68FE            	  2641:             bvc.s *           * branch if V clear
01:000019C2 64FE            	  2642:             bcc.s *           * branch if C clear
                            	  2643: 
01:000019C4 30BC2000        	  2644:             move.w #$2000,(a0)
01:000019C8 46D0            	  2645:             move (a0),SR
01:000019CA 67FE            	  2646:             beq.s *           * branch if Z set
01:000019CC 6BFE            	  2647:             bmi.s *           * branch if N set
01:000019CE 69FE            	  2648:             bvs.s *           * branch if V set
01:000019D0 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
                            	  2651: *     (An)+
01:000019D2 307C0100        	  2652:             move.l #$00000100,a0
01:000019D6 30BC2FFF        	  2653:             move.w #$2FFF,(a0)
01:000019DA 46D8            	  2654:             move (a0)+,SR
01:000019DC 6AFE            	  2655:             bpl.s *           * branch if Z clear
01:000019DE 66FE            	  2656:             bne.s *           * branch if N clear
01:000019E0 68FE            	  2657:             bvc.s *           * branch if V clear
01:000019E2 64FE            	  2658:             bcc.s *           * branch if C clear
                            	  2659: 
01:000019E4 30BC2000        	  2660:             move.w #$2000,(a0)
01:000019E8 46D8            	  2661:             move (a0)+,SR
01:000019EA 67FE            	  2662:             beq.s *           * branch if Z set
01:000019EC 6BFE            	  2663:             bmi.s *           * branch if N set
01:000019EE 69FE            	  2664:             bvs.s *           * branch if V set
01:000019F0 65FE            	  2665:             bcs.s *           * branch if C set
                            	  2666: 
                            	  2667: *     -(An)
01:000019F2 307C0102        	  2668:             move.l #$00000102,a0
01:000019F6 30BC2FFF        	  2669:             move.w #$2FFF,(a0)
01:000019FA 46D8            	  2670:             move (a0)+,SR
01:000019FC 6AFE            	  2671:             bpl.s *           * branch if Z clear
01:000019FE 66FE            	  2672:             bne.s *           * branch if N clear
01:00001A00 68FE            	  2673:             bvc.s *           * branch if V clear
01:00001A02 64FE            	  2674:             bcc.s *           * branch if C clear
                            	  2675: 
01:00001A04 30BC2000        	  2676:             move.w #$2000,(a0)
01:00001A08 46D8            	  2677:             move (a0)+,SR
01:00001A0A 67FE            	  2678:             beq.s *           * branch if Z set
01:00001A0C 6BFE            	  2679:             bmi.s *           * branch if N set
01:00001A0E 69FE            	  2680:             bvs.s *           * branch if V set
01:00001A10 65FE            	  2681:             bcs.s *           * branch if C set
                            	  2682: 
                            	  2683: *     n(An)
01:00001A12 307C0102        	  2684:             move.l #$00000102,a0
01:00001A16 317C2FFF0002    	  2685:             move.w #$2FFF,2(a0)
01:00001A1C 46E80002        	  2686:             move 2(a0),SR
01:00001A20 6AFE            	  2687:             bpl.s *           * branch if Z clear
01:00001A22 66FE            	  2688:             bne.s *           * branch if N clear
01:00001A24 68FE            	  2689:             bvc.s *           * branch if V clear
01:00001A26 64FE            	  2690:             bcc.s *           * branch if C clear
                            	  2691: 
01:00001A28 317C20000002    	  2692:             move.w #$2000,2(a0)
01:00001A2E 46E80002        	  2693:             move 2(a0),SR
01:00001A32 67FE            	  2694:             beq.s *           * branch if Z set
01:00001A34 6BFE            	  2695:             bmi.s *           * branch if N set
01:00001A36 69FE            	  2696:             bvs.s *           * branch if V set
01:00001A38 65FE            	  2697:             bcs.s *           * branch if C set
                            	  2698: 
                            	  2699: *     n(An,Rn.l)
01:00001A3A 307C0100        	  2700:             move.l #$00000100,a0
01:00001A3E 7002            	  2701:             moveq  #$00000002,d0
01:00001A40 31BC2FFF0802    	  2702:             move.w #$2FFF,2(a0,d0.l)
01:00001A46 46F00802        	  2703:             move 2(a0,d0.l),SR
01:00001A4A 6AFE            	  2704:             bpl.s *           * branch if Z clear
01:00001A4C 66FE            	  2705:             bne.s *           * branch if N clear
01:00001A4E 68FE            	  2706:             bvc.s *           * branch if V clear
01:00001A50 64FE            	  2707:             bcc.s *           * branch if C clear
                            	  2708: 
01:00001A52 31BC20000802    	  2709:             move.w #$2000,2(a0,d0.l)
01:00001A58 46F00802        	  2710:             move 2(a0,d0.l),SR
01:00001A5C 67FE            	  2711:             beq.s *           * branch if Z set
01:00001A5E 6BFE            	  2712:             bmi.s *           * branch if N set
01:00001A60 69FE            	  2713:             bvs.s *           * branch if V set
01:00001A62 65FE            	  2714:             bcs.s *           * branch if C set
                            	  2715: 
                            	  2716: *     x.W
01:00001A64 31FC2FFF0100    	  2717:             move.w #$2FFF,$0100
01:00001A6A 46F80100        	  2718:             move $0100,SR
01:00001A6E 6AFE            	  2719:             bpl.s *           * branch if Z clear
01:00001A70 66FE            	  2720:             bne.s *           * branch if N clear
01:00001A72 68FE            	  2721:             bvc.s *           * branch if V clear
01:00001A74 64FE            	  2722:             bcc.s *           * branch if C clear
                            	  2723: 
01:00001A76 31FC20000100    	  2724:             move.w #$2000,$0100
01:00001A7C 46F80100        	  2725:             move $0100,SR
01:00001A80 67FE            	  2726:             beq.s *           * branch if Z set
01:00001A82 6BFE            	  2727:             bmi.s *           * branch if N set
01:00001A84 69FE            	  2728:             bvs.s *           * branch if V set
01:00001A86 65FE            	  2729:             bcs.s *           * branch if C set
                            	  2730: 
                            	  2731: *     x.L
01:00001A88 33FC2FFF00010100	  2732:             move.w #$2FFF,$00010100
01:00001A90 46F900010100    	  2733:             move $00010100,SR
01:00001A96 6AFE            	  2734:             bpl.s *           * branch if Z clear
01:00001A98 66FE            	  2735:             bne.s *           * branch if N clear
01:00001A9A 68FE            	  2736:             bvc.s *           * branch if V clear
01:00001A9C 64FE            	  2737:             bcc.s *           * branch if C clear
                            	  2738: 
01:00001A9E 33FC200000010100	  2739: MOVE4:      move.w #$2000,$00010100
01:00001AA6 46F900010100    	  2740:             move $00010100,SR
01:00001AAC 67FE            	  2741:             beq.s *           * branch if Z set
01:00001AAE 6BFE            	  2742:             bmi.s *           * branch if N set
01:00001AB0 69FE            	  2743:             bvs.s *           * branch if V set
01:00001AB2 65FE            	  2744:             bcs.s *           * branch if C set
                            	  2745: 
                            	  2746: *     x(PC)
01:00001AB4 46FAFFEA        	  2747:             move MOVE4+2(pc),SR
01:00001AB8 67FE            	  2748:             beq.s *           * branch if Z set
01:00001ABA 6BFE            	  2749:             bmi.s *           * branch if N set
01:00001ABC 69FE            	  2750:             bvs.s *           * branch if V set
01:00001ABE 65FE            	  2751:             bcs.s *           * branch if C set
                            	  2752: 
                            	  2753: *     x(PC,d0.l)
01:00001AC0 7000            	  2754:             moveq  #$00000000,d0
01:00001AC2 46FB08DC        	  2755:             move MOVE4+2(pc,d0.l),SR
01:00001AC6 67FE            	  2756:             beq.s *           * branch if Z set
01:00001AC8 6BFE            	  2757:             bmi.s *           * branch if N set
01:00001ACA 69FE            	  2758:             bvs.s *           * branch if V set
01:00001ACC 65FE            	  2759:             bcs.s *           * branch if C set
01:00001ACE 44FB08D0        	  2760:             move MOVE4+2(pc,d0.l),CCR
01:00001AD2 67FE            	  2761:             beq.s *           * branch if Z set
01:00001AD4 6BFE            	  2762:             bmi.s *           * branch if N set
01:00001AD6 69FE            	  2763:             bvs.s *           * branch if V set
01:00001AD8 65FE            	  2764:             bcs.s *           * branch if C set
                            	  2765: 
                            	  2766: *     #x
01:00001ADA 46FC2FFF        	  2767:             move #$2FFF,SR
01:00001ADE 66FE            	  2768:             bne.s *           * branch if Z clear
01:00001AE0 6AFE            	  2769:             bpl.s *           * branch if N clear
01:00001AE2 68FE            	  2770:             bvc.s *           * branch if V clear
01:00001AE4 64FE            	  2771:             bcc.s *           * branch if C clear
                            	  2772: 
                            	  2773: 
                            	  2774: 
                            	  2775: *  MOVE_From_SR
                            	  2776: 
                            	  2777: 
                            	  2778: 
                            	  2779: *     Dn
01:00001AE6 46FC275A        	  2780:             move #$275A,SR          * Initial value
01:00001AEA 40C0            	  2781:             move SR,d0
01:00001AEC 0C40271A        	  2782:             cmpi.w #$271A,d0
                            	  2783: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2784: *            bne.s *                   * branch if Z set
                            	  2785: 
                            	  2786: *     (An)
01:00001AF0 307C0100        	  2787:             move.l #$00000100,a0
01:00001AF4 46FC275A        	  2788:             move #$275A,SR          * Initial value
01:00001AF8 40D0            	  2789:             move SR,(a0)
01:00001AFA 0C50275A        	  2790:             cmpi.w #$275A,(a0)
01:00001AFE 66FE            	  2791:             bne.s *                   * branch if Z set
                            	  2792: 
                            	  2793: *     (An)+
01:00001B00 307C0100        	  2794:             move.l #$00000100,a0
01:00001B04 46FC257A        	  2795:             move #$257A,SR          * Initial value
01:00001B08 40D8            	  2796:             move SR,(a0)+
01:00001B0A 307C0100        	  2797:             move.l #$00000100,a0
01:00001B0E 0C58257A        	  2798:             cmpi.w #$257A,(a0)+
01:00001B12 66FE            	  2799:             bne.s *                   * branch if Z set
                            	  2800: 
                            	  2801: *     -(An)
01:00001B14 307C0102        	  2802:             move.l #$00000102,a0
01:00001B18 46FC2766        	  2803:             move #$2766,SR          * Initial value
01:00001B1C 40E0            	  2804:             move SR,-(a0)
01:00001B1E 307C0100        	  2805:             move.l #$00000100,a0
01:00001B22 0C502766        	  2806:             cmpi.w #$2766,(a0)
01:00001B26 66FE            	  2807:             bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     x(An)
01:00001B28 307C0102        	  2810:             move.l #$00000102,a0
01:00001B2C 46FC2733        	  2811:             move #$2733,SR          * Initial value
01:00001B30 40E80004        	  2812:             move SR,4(a0)
01:00001B34 0C6827330004    	  2813:             cmpi.w #$2733,4(a0)
01:00001B3A 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     x(An,rn)
01:00001B3C 307C0102        	  2817:             move.l #$00000102,a0
01:00001B40 7004            	  2818:             moveq  #$00000004,d0
01:00001B42 46FC275A        	  2819:             move #$275a,SR          * Initial value
01:00001B46 40F00804        	  2820:             move SR,4(a0,d0.l)
01:00001B4A 0C70275A0804    	  2821:             cmpi.w #$275a,4(a0,d0.l)
01:00001B50 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     x.W
01:00001B52 46FC2777        	  2825:             move #$2777,SR          * Initial value
01:00001B56 40F80102        	  2826:             move SR,$0102
01:00001B5A 0C7827770102    	  2827:             cmpi.w #$2777,$0102
01:00001B60 66FE            	  2828:             bne.s *                   * branch if Z set
                            	  2829: 
                            	  2830: *     x.L
01:00001B62 46FC2777        	  2831:             move #$2777,SR          * Initial value
01:00001B66 40F900010102    	  2832:             move SR,$10102
01:00001B6C 0C79277700010102	  2833:             cmpi.w #$2777,$10102
01:00001B74 66FE            	  2834:             bne.s *                   * branch if Z set
                            	  2835: 
                            	  2836: 
                            	  2837: 
01:00001B76 46FC2700        	  2838:             move #$2700,SR          * Put flags back to initial value
                            	  2839: 
01:00001B7A 4E75            	  2840:             rts
                            	  2841: 
                            	  2842: 
                            	  2843: *-----------------------------------------------------------
                            	  2844: *-----------------------------------------------------------
                            	  2845: * OPCODE : EXT
                            	  2846: *-----------------------------------------------------------
                            	  2847: *-----------------------------------------------------------
                            	  2848: op_EXT:
                            	  2849: 
01:00001B7C 707F            	  2850:             move.l #$0000007F,d0
01:00001B7E 223C00008FFF    	  2851:             move.l #$00008FFF,d1
01:00001B84 7400            	  2852:             moveq  #$00000000,d2
                            	  2853: 
01:00001B86 4880            	  2854:             ext.w d0
01:00001B88 6BFE            	  2855:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001B8A 67FE            	  2856:             beq.s *                   * Check Z Flag  beq/bne
01:00001B8C 0C800000007F    	  2857:             cmpi.l #$0000007F,d0
01:00001B92 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
01:00001B94 48C1            	  2860:             ext.l d1
01:00001B96 6AFE            	  2861:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001B98 67FE            	  2862:             beq.s *                   * Check Z Flag  beq/bne
01:00001B9A 0C81FFFF8FFF    	  2863:             cmpi.l #$FFFF8FFF,d1
01:00001BA0 66FE            	  2864:             bne.s *                   * branch if Z set
                            	  2865: 
01:00001BA2 48C2            	  2866:             ext.l d2
01:00001BA4 66FE            	  2867:             bne.s *                   * Check Z Flag  beq/bne
                            	  2868: 
                            	  2869: 
                            	  2870: 
01:00001BA6 4E75            	  2871:             rts
                            	  2872: 
                            	  2873: 
                            	  2874: *-----------------------------------------------------------
                            	  2875: *-----------------------------------------------------------
                            	  2876: * OPCODE : SWAP
                            	  2877: *-----------------------------------------------------------
                            	  2878: *-----------------------------------------------------------
                            	  2879: op_SWAP:
                            	  2880: 
01:00001BA8 203C12345678    	  2881:             move.l #$12345678,d0
                            	  2882: 
01:00001BAE 4840            	  2883:             swap d0
01:00001BB0 6BFE            	  2884:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001BB2 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
01:00001BB4 0C8056781234    	  2886:             cmpi.l #$56781234,d0
01:00001BBA 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
                            	  2889: 
                            	  2890: 
01:00001BBC 4E75            	  2891:             rts
                            	  2892: 
                            	  2893: 
                            	  2894: *-----------------------------------------------------------
                            	  2895: *-----------------------------------------------------------
                            	  2896: * OPCODE : LEA_PEA
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: op_LEAPEA:
                            	  2900: 
01:00001BBE 207C00345678    	  2901:             move.l #$00345678,a0
01:00001BC4 7800            	  2902:             moveq  #$00000000,d4
                            	  2903: 
                            	  2904: *     (An)
01:00001BC6 4DD0            	  2905:             lea (a0),a6
01:00001BC8 200E            	  2906:             move.l a6,d0
01:00001BCA 0C8000345678    	  2907:             cmpi.l #$00345678,d0
01:00001BD0 66FE            	  2908:             bne.s *                   * branch if Z set
01:00001BD2 4850            	  2909:             pea (a0)
01:00001BD4 0C9700345678    	  2910:             cmpi.l #$00345678,(a7)
01:00001BDA 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912:             * This was without a specifier which the assembler defaulted to .w
01:00001BDC 588F            	  2913:             addq.l #4,a7            * Restore Stack Pointer
                            	  2914: 
                            	  2915: *     x(An)
01:00001BDE 4DE80004        	  2916:             lea 4(a0),a6
01:00001BE2 200E            	  2917:             move.l a6,d0
01:00001BE4 0C800034567C    	  2918:             cmpi.l #$0034567C,d0
01:00001BEA 66FE            	  2919:             bne.s *                   * branch if Z set
01:00001BEC 48680004        	  2920:             pea 4(a0)
01:00001BF0 0C970034567C    	  2921:             cmpi.l #$0034567C,(a7)
01:00001BF6 66FE            	  2922:             bne.s *                   * branch if Z set
                            	  2923:             * This was without a specifier which the assembler defaulted to .w
01:00001BF8 588F            	  2924:             addq.l #4,a7            * Restore Stack Pointer
                            	  2925: 
                            	  2926: *     x(An,Dn.l)
01:00001BFA 4DF04004        	  2927:             lea 4(a0,d4),a6
01:00001BFE 200E            	  2928:             move.l a6,d0
01:00001C00 0C800034567C    	  2929:             cmpi.l #$0034567C,d0
01:00001C06 66FE            	  2930:             bne.s *                   * branch if Z set
01:00001C08 48704804        	  2931:             pea 4(a0,d4.l)
01:00001C0C 0C970034567C    	  2932:             cmpi.l #$0034567C,(a7)
01:00001C12 66FE            	  2933:             bne.s *                   * branch if Z set
                            	  2934:             * This was without a specifier which the assembler defaulted to .w
01:00001C14 588F            	  2935:             addq.l #4,a7            * Restore Stack Pointer
                            	  2936: 
                            	  2937: *     x.W
01:00001C16 4DF81234        	  2938:             lea $1234,a6
01:00001C1A 200E            	  2939:             move.l a6,d0
01:00001C1C 0C401234        	  2940:             cmpi.w #$1234,d0
01:00001C20 66FE            	  2941:             bne.s *                   * branch if Z set
01:00001C22 48781234        	  2942:             pea $1234
01:00001C26 0C9700001234    	  2943:             cmpi.l #$00001234,(a7)
01:00001C2C 66FE            	  2944:             bne.s *                   * branch if Z set
                            	  2945:             * This was without a specifier which the assembler defaulted to .w
01:00001C2E 588F            	  2946:             addq.l #4,a7            * Restore Stack Pointer
                            	  2947: 
                            	  2948: *     x.L
01:00001C30 4DF900345678    	  2949:             lea $00345678,a6
01:00001C36 200E            	  2950:             move.l a6,d0
01:00001C38 B08E            	  2951:             cmp.l a6,d0
01:00001C3A 66FE            	  2952:             bne.s *                   * branch if Z set
01:00001C3C 487900345678    	  2953:             pea $00345678
01:00001C42 0C9700345678    	  2954:             cmpi.l #$00345678,(a7)
01:00001C48 66FE            	  2955:             bne.s *                   * branch if Z set
                            	  2956:             * This was without a specifier which the assembler defaulted to .w
01:00001C4A 588F            	  2957:             addq.l #4,a7            * Restore Stack Pointer
                            	  2958: 
                            	  2959: *     x(PC)
01:00001C4C 4DFA0008        	  2960:             lea LEA1(pc),a6
01:00001C50 200E            	  2961:             move.l a6,d0
01:00001C52 B08E            	  2962:             cmp.l a6,d0
01:00001C54 66FE            	  2963:             bne.s *                   * branch if Z set
01:00001C56 487AFFFE        	  2964: LEA1:       pea LEA1(pc)
01:00001C5A 0C970000241E    	  2965:             cmpi.l #$0000241E,(a7)
01:00001C60 67FE            	  2966:             beq.s *                   * branch if Z clear
                            	  2967:             * This was without a specifier which the assembler defaulted to .w
01:00001C62 588F            	  2968:             addq.l #4,a7              * Restore Stack Pointer
                            	  2969: 
                            	  2970: 
                            	  2971: 
                            	  2972: 
01:00001C64 46FC2700        	  2973:             move #$2700,SR          * Put flags back to initial value
                            	  2974: 
01:00001C68 4E75            	  2975:             rts
                            	  2976: 
                            	  2977: 
                            	  2978: 
                            	  2979: *-----------------------------------------------------------
                            	  2980: *-----------------------------------------------------------
                            	  2981: * OPCODE : LEA_TAS
                            	  2982: *-----------------------------------------------------------
                            	  2983: *-----------------------------------------------------------
                            	  2984: op_TAS:
                            	  2985: 
                            	  2986: *     Test just one addressing mode
                            	  2987: 
01:00001C6A 307C0100        	  2988:             move.l #$00000100,a0
                            	  2989: 
                            	  2990: *     (An)
01:00001C6E 10BC0000        	  2991:             move.b #$00,(a0)
01:00001C72 6BFE            	  2992:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C74 66FE            	  2993:             bne.s *                   * Check Z Flag  beq/bne
01:00001C76 4AD0            	  2994:             tas (a0)
01:00001C78 0C100080        	  2995:             cmpi.b #$80,(a0)
01:00001C7C 66FE            	  2996:             bne.s *                   * branch if Z set
01:00001C7E 10BC00F5        	  2997:             move.b #$F5,(a0)
01:00001C82 4AD0            	  2998:             tas (a0)
01:00001C84 6AFE            	  2999:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C86 67FE            	  3000:             beq.s *                   * Check Z Flag  beq/bne
01:00001C88 4AD0            	  3001:             tas (a0)
01:00001C8A 0C1000F5        	  3002:             cmpi.b #$F5,(a0)
01:00001C8E 66FE            	  3003:             bne.s *                   * branch if Z set
                            	  3004: 
01:00001C90 4E75            	  3005:             rts
                            	  3006: 
                            	  3007: 
                            	  3008: *-----------------------------------------------------------
                            	  3009: *-----------------------------------------------------------
                            	  3010: * OPCODE : LEA_TST
                            	  3011: *-----------------------------------------------------------
                            	  3012: *-----------------------------------------------------------
                            	  3013: op_TST:
                            	  3014: 
                            	  3015: *     Test just one addressing mode
                            	  3016: 
01:00001C92 307C0100        	  3017:             move.l #$00000100,a0
                            	  3018: 
                            	  3019: *     (An) - BYTE
01:00001C96 10BC0000        	  3020:             move.b #$00,(a0)
01:00001C9A 4A10            	  3021:             tst.b (a0)
01:00001C9C 6BFE            	  3022:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C9E 66FE            	  3023:             bne.s *                   * Check Z Flag  beq/bne
01:00001CA0 10BC00F5        	  3024:             move.b #$F5,(a0)
01:00001CA4 4A10            	  3025:             tst.b (a0)
01:00001CA6 6AFE            	  3026:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001CA8 67FE            	  3027:             beq.s *                   * Check Z Flag  beq/bne
                            	  3028: 
                            	  3029: *     (An) - WORD
01:00001CAA 30BC0000        	  3030:             move.w #$0000,(a0)
01:00001CAE 4A50            	  3031:             tst.w (a0)
01:00001CB0 6BFE            	  3032:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CB2 66FE            	  3033:             bne.s *                   * Check Z Flag  beq/bne
01:00001CB4 30BCF567        	  3034:             move.w #$F567,(a0)
01:00001CB8 4A50            	  3035:             tst.w (a0)
01:00001CBA 6AFE            	  3036:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001CBC 67FE            	  3037:             beq.s *                   * Check Z Flag  beq/bne
                            	  3038: 
                            	  3039: *     (An) - LONG
01:00001CBE 20BC00000000    	  3040:             move.l #$00000000,(a0)
01:00001CC4 4A90            	  3041:             tst.l (a0)
01:00001CC6 6BFE            	  3042:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CC8 66FE            	  3043:             bne.s *                   * Check Z Flag  beq/bne
01:00001CCA 20BCF56789AB    	  3044:             move.l #$F56789ab,(a0)
01:00001CD0 4A90            	  3045:             tst.l (a0)
01:00001CD2 6AFE            	  3046:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001CD4 67FE            	  3047:             beq.s *                   * Check Z Flag  beq/bne
                            	  3048: 
                            	  3049: 
01:00001CD6 4E75            	  3050:             rts
                            	  3051: 
                            	  3052: 
                            	  3053: *-----------------------------------------------------------
                            	  3054: *-----------------------------------------------------------
                            	  3055: * OPCODE : LINKS
                            	  3056: *-----------------------------------------------------------
                            	  3057: *-----------------------------------------------------------
                            	  3058: op_LINKS:
                            	  3059: 
01:00001CD8 207C11223344    	  3060:             move.l #$11223344,a0
01:00001CDE 203C11223344    	  3061:             move.l #$11223344,d0
01:00001CE4 4E500000        	  3062:             link a0,#$0
01:00001CE8 0C9711223344    	  3063:             cmpi.l #$11223344,(a7)
                            	  3064: 
01:00001CEE 4E58            	  3065:             unlk a0
01:00001CF0 B1C0            	  3066:             cmp.l d0,a0
01:00001CF2 66FE            	  3067:             bne.s *                   * branch if Z set
                            	  3068: 
01:00001CF4 4E75            	  3069:             rts
                            	  3070: 
                            	  3071: *-----------------------------------------------------------
                            	  3072: *-----------------------------------------------------------
                            	  3073: * OPCODE : MOVE_USP
                            	  3074: *-----------------------------------------------------------
                            	  3075: *-----------------------------------------------------------
                            	  3076: op_MOVE_USP:
                            	  3077: 
01:00001CF6 207C11223344    	  3078:             move.l #$11223344,a0
01:00001CFC 4E60            	  3079:             move a0,USP
01:00001CFE 4E69            	  3080:             move USP,a1
01:00001D00 B3C8            	  3081:             cmp.l a0,a1
01:00001D02 66FE            	  3082:             bne.s *                   * branch if Z set
                            	  3083: 
01:00001D04 4E75            	  3084:             rts
                            	  3085: 
                            	  3086: 
                            	  3087: *-----------------------------------------------------------
                            	  3088: *-----------------------------------------------------------
                            	  3089: * OPCODE : CHK
                            	  3090: *-----------------------------------------------------------
                            	  3091: *-----------------------------------------------------------
                            	  3092: op_CHK:
01:00001D06 303C1122        	  3093:             move.w #$1122,d0
01:00001D0A 323C1122        	  3094:             move.w #$1122,d1
01:00001D0E 4380            	  3095:             chk d0,d1
                            	  3096: 
01:00001D10 4E71            	  3097:             nop
01:00001D12 4E71            	  3098:             nop
                            	  3099: 
01:00001D14 323C1122        	  3100:             move.w #$1122,d1
01:00001D18 43BC1122        	  3101:             chk #$1122,d1
                            	  3102: 
01:00001D1C 323C1122        	  3103:             move.w #$1122,d1
01:00001D20 43BC007A        	  3104:             chk #00122,d1
01:00001D24 BCBCEEEE0006    	  3105:             cmp.l #$EEEE0006,d6
01:00001D2A 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
01:00001D2C 303C1122        	  3108:             move.w #$1122,d0
01:00001D30 323C8000        	  3109:             move.w #$8000,d1
01:00001D34 4380            	  3110:             chk d0,d1
01:00001D36 BCBCEEEE0006    	  3111:             cmp.l #$EEEE0006,d6
01:00001D3C 66FE            	  3112:             bne.s *                   * branch if Z set
                            	  3113: 
01:00001D3E 4E75            	  3114:             rts
                            	  3115: 
                            	  3116: 
                            	  3117: *-----------------------------------------------------------
                            	  3118: *-----------------------------------------------------------
                            	  3119: * OPCODE : NEGS
                            	  3120: *-----------------------------------------------------------
                            	  3121: *-----------------------------------------------------------
                            	  3122: op_NEGS:
                            	  3123: 
                            	  3124: *     NOT - BYTE
01:00001D40 307C0100        	  3125:             move.l #$00000100,a0
01:00001D44 7000            	  3126:             moveq  #$00000000,d0
01:00001D46 4600            	  3127:             not.b d0
01:00001D48 6AFE            	  3128:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D4A 67FE            	  3129:             beq.s *                   * Check Z Flag  beq/bne
01:00001D4C 4600            	  3130:             not.b d0
01:00001D4E 6BFE            	  3131:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D50 66FE            	  3132:             bne.s *                   * Check Z Flag  beq/bne
01:00001D52 4A00            	  3133:             cmpi.b #$00,d0
01:00001D54 66FE            	  3134:             bne.s *                   * Check Z Flag  beq/bne
01:00001D56 10BC0080        	  3135:             move.b #$80,(a0)
01:00001D5A 4610            	  3136:             not.b (a0)
01:00001D5C 6BFE            	  3137:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D5E 67FE            	  3138:             beq.s *                   * Check Z Flag  beq/bne
01:00001D60 4610            	  3139:             not.b (a0)
01:00001D62 6AFE            	  3140:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D64 67FE            	  3141:             beq.s *                   * Check Z Flag  beq/bne
01:00001D66 0C100080        	  3142:             cmpi.b #$80,(a0)
01:00001D6A 66FE            	  3143:             bne.s *                   * Check Z Flag  beq/bne
                            	  3144: 
                            	  3145: *     NOT - WORD
01:00001D6C 307C0100        	  3146:             move.l #$00000100,a0
01:00001D70 7000            	  3147:             moveq  #$00000000,d0
01:00001D72 4640            	  3148:             not.w d0
01:00001D74 6AFE            	  3149:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D76 67FE            	  3150:             beq.s *                   * Check Z Flag  beq/bne
01:00001D78 4640            	  3151:             not.w d0
01:00001D7A 6BFE            	  3152:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D7C 66FE            	  3153:             bne.s *                   * Check Z Flag  beq/bne
01:00001D7E 4A40            	  3154:             cmpi.w #$0000,d0
01:00001D80 66FE            	  3155:             bne.s *                   * Check Z Flag  beq/bne
01:00001D82 30BC5A5A        	  3156:             move.w #$5a5a,(a0)
01:00001D86 4650            	  3157:             not.w (a0)
01:00001D88 6AFE            	  3158:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D8A 67FE            	  3159:             beq.s *                   * Check Z Flag  beq/bne
01:00001D8C 4650            	  3160:             not.w (a0)
01:00001D8E 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D90 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
01:00001D92 0C505A5A        	  3163:             cmpi.w #$5a5a,(a0)
01:00001D96 66FE            	  3164:             bne.s *                   * Check Z Flag  beq/bne
                            	  3165: 
                            	  3166: *     NOT - LONG
01:00001D98 307C0100        	  3167:             move.l #$00000100,a0
01:00001D9C 7000            	  3168:             moveq  #$00000000,d0
01:00001D9E 4680            	  3169:             not.l d0
01:00001DA0 6AFE            	  3170:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DA2 67FE            	  3171:             beq.s *                   * Check Z Flag  beq/bne
01:00001DA4 4680            	  3172:             not.l d0
01:00001DA6 6BFE            	  3173:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DA8 66FE            	  3174:             bne.s *                   * Check Z Flag  beq/bne
01:00001DAA 4A80            	  3175:             cmpi.l #$00000000,d0
01:00001DAC 66FE            	  3176:             bne.s *                   * Check Z Flag  beq/bne
01:00001DAE 20BC5A5A1234    	  3177:             move.l #$5a5a1234,(a0)
01:00001DB4 4690            	  3178:             not.l (a0)
01:00001DB6 6AFE            	  3179:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DB8 67FE            	  3180:             beq.s *                   * Check Z Flag  beq/bne
01:00001DBA 4690            	  3181:             not.l (a0)
01:00001DBC 6BFE            	  3182:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DBE 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
01:00001DC0 0C905A5A1234    	  3184:             cmpi.l #$5a5a1234,(a0)
01:00001DC6 66FE            	  3185:             bne.s *                   * Check Z Flag  beq/bne
                            	  3186: 
                            	  3187: * -----
                            	  3188: 
                            	  3189: *     NEG - BYTE
01:00001DC8 307C0100        	  3190:             move.l #$00000100,a0
01:00001DCC 7000            	  3191:             moveq  #$00000000,d0
01:00001DCE 7240D241        	  3192:             move.l #$00000080,d1
01:00001DD2 4400            	  3193:             neg.b d0
01:00001DD4 6BFE            	  3194:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001DD6 66FE            	  3195:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001DD8 65FE            	  3196:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001DDA 69FE            	  3197:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001DDC 4401            	  3198:             neg.b d1
01:00001DDE 6AFE            	  3199:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001DE0 67FE            	  3200:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001DE2 64FE            	  3201:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001DE4 68FE            	  3202:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001DE6 0C010080        	  3203:             cmpi.b #$80,d1
01:00001DEA 66FE            	  3204:             bne.s *                   * Check Z Flag  beq/bne
01:00001DEC 10BC007F        	  3205:             move.b #$7F,(a0)
01:00001DF0 4410            	  3206:             neg.b (a0)
01:00001DF2 6AFE            	  3207:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001DF4 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001DF6 64FE            	  3209:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001DF8 69FE            	  3210:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001DFA 10BC00F5        	  3211:             move.b #$F5,(a0)
01:00001DFE 4410            	  3212:             neg.b (a0)
01:00001E00 6BFE            	  3213:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E02 67FE            	  3214:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E04 64FE            	  3215:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E06 69FE            	  3216:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E08 0C10000B        	  3217:             cmpi.b #$0B,(a0)
01:00001E0C 66FE            	  3218:             bne.s *                   * Check Z Flag  beq/bne
                            	  3219: 
                            	  3220: * -----
                            	  3221: 
                            	  3222: *     NEG - WORD
01:00001E0E 307C0100        	  3223:             move.l #$00000100,a0
01:00001E12 7000            	  3224:             moveq  #$00000000,d0
01:00001E14 223C00008000    	  3225:             move.l #$00008000,d1
01:00001E1A 4440            	  3226:             neg.w d0
01:00001E1C 6BFE            	  3227:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E1E 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001E20 65FE            	  3229:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001E22 69FE            	  3230:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E24 4441            	  3231:             neg.w d1
01:00001E26 6AFE            	  3232:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E28 67FE            	  3233:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E2A 64FE            	  3234:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E2C 68FE            	  3235:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001E2E 0C418000        	  3236:             cmpi.w #$8000,d1
01:00001E32 66FE            	  3237:             bne.s *                   * Check Z Flag  beq/bne
01:00001E34 30BC7FFF        	  3238:             move.w #$7FFF,(a0)
01:00001E38 4450            	  3239:             neg.w (a0)
01:00001E3A 6AFE            	  3240:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E3C 67FE            	  3241:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E3E 64FE            	  3242:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E40 69FE            	  3243:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E42 30BCF578        	  3244:             move.w #$F578,(a0)
01:00001E46 4450            	  3245:             neg.w (a0)
01:00001E48 6BFE            	  3246:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E4A 67FE            	  3247:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E4C 64FE            	  3248:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E4E 69FE            	  3249:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E50 0C500A88        	  3250:             cmpi.w #$0A88,(a0)
01:00001E54 66FE            	  3251:             bne.s *                   * Check Z Flag  beq/bne
                            	  3252: 
                            	  3253: * -----
                            	  3254: 
                            	  3255: *     NEG - LONG
01:00001E56 307C0100        	  3256:             move.l #$00000100,a0
01:00001E5A 7000            	  3257:             moveq  #$00000000,d0
01:00001E5C 223C80000000    	  3258:             move.l #$80000000,d1
01:00001E62 4480            	  3259:             neg.l d0
01:00001E64 6BFE            	  3260:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E66 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001E68 65FE            	  3262:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001E6A 69FE            	  3263:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E6C 4481            	  3264:             neg.l d1
01:00001E6E 6AFE            	  3265:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E70 67FE            	  3266:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E72 64FE            	  3267:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E74 68FE            	  3268:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001E76 0C8180000000    	  3269:             cmpi.l #$80000000,d1
01:00001E7C 66FE            	  3270:             bne.s *                   * Check Z Flag  beq/bne
01:00001E7E 20BC7FFFFFFF    	  3271:             move.l #$7FFFFFFF,(a0)
01:00001E84 4490            	  3272:             neg.l (a0)
01:00001E86 6AFE            	  3273:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001E88 67FE            	  3274:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E8A 64FE            	  3275:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E8C 69FE            	  3276:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E8E 20BCF5781234    	  3277:             move.l #$F5781234,(a0)
01:00001E94 4490            	  3278:             neg.l (a0)
01:00001E96 6BFE            	  3279:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001E98 67FE            	  3280:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001E9A 64FE            	  3281:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001E9C 69FE            	  3282:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001E9E 0C900A87EDCC    	  3283:             cmpi.l #$0A87EDCC,(a0)
01:00001EA4 66FE            	  3284:             bne.s *                   * Check Z Flag  beq/bne
                            	  3285: 
                            	  3286: 
                            	  3287: * -----
                            	  3288: 
                            	  3289: *     NEGX - BYTE
01:00001EA6 307C0100        	  3290:             move.l #$00000100,a0
01:00001EAA 7000            	  3291:             moveq  #$00000000,d0
01:00001EAC 7240D241        	  3292:             move.l #$00000080,d1
01:00001EB0 003C0010        	  3293:             ori.b #$10,CCR        * Set X Flag
01:00001EB4 4000            	  3294:             negx.b d0
01:00001EB6 6AFE            	  3295:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001EB8 67FE            	  3296:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001EBA 64FE            	  3297:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001EBC 69FE            	  3298:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EBE 023C00EF        	  3299:             andi.b #$EF,CCR       * Clear X Flag
01:00001EC2 4000            	  3300:             negx.b d0
01:00001EC4 6BFE            	  3301:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EC6 67FE            	  3302:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001EC8 64FE            	  3303:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001ECA 69FE            	  3304:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001ECC 003C0010        	  3305:             ori.b #$10,CCR        * Set X Flag
01:00001ED0 4001            	  3306:             negx.b d1
01:00001ED2 6BFE            	  3307:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001ED4 67FE            	  3308:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001ED6 64FE            	  3309:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001ED8 69FE            	  3310:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001EDA 0C01007F        	  3311:             cmpi.b #$7F,d1
01:00001EDE 66FE            	  3312:             bne.s *                   * Check Z Flag  beq/bne
01:00001EE0 023C00EF        	  3313:             andi.b #$EF,CCR       * Clear X Flag
01:00001EE4 4001            	  3314:             negx.b d1
01:00001EE6 6AFE            	  3315:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EE8 67FE            	  3316:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EEA 64FE            	  3317:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EEC 69FE            	  3318:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001EEE 0C010081        	  3319:             cmpi.b #$81,d1
01:00001EF2 66FE            	  3320:             bne.s *                   * Check Z Flag  beq/bne
01:00001EF4 10BC007F        	  3321:             move.b #$7F,(a0)
01:00001EF8 003C0010        	  3322:             ori.b #$10,CCR        * Set X Flag
01:00001EFC 4010            	  3323:             negx.b (a0)
01:00001EFE 6AFE            	  3324:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F00 67FE            	  3325:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F02 64FE            	  3326:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F04 69FE            	  3327:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F06 10BC007F        	  3328:             move.b #$7F,(a0)
01:00001F0A 023C00EF        	  3329:             andi.b #$EF,CCR       * Clear X Flag
01:00001F0E 4010            	  3330:             negx.b (a0)
01:00001F10 6AFE            	  3331:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F12 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F14 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F16 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F18 10BC00F5        	  3335:             move.b #$F5,(a0)
01:00001F1C 003C0010        	  3336:             ori.b #$10,CCR        * Set X Flag
01:00001F20 4010            	  3337:             negx.b (a0)
01:00001F22 6BFE            	  3338:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F24 67FE            	  3339:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F26 64FE            	  3340:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F28 69FE            	  3341:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F2A 0C10000A        	  3342:             cmpi.b #$0A,(a0)
01:00001F2E 66FE            	  3343:             bne.s *                   * Check Z Flag  beq/bne
01:00001F30 023C00EF        	  3344:             andi.b #$EF,CCR       * Clear X Flag
01:00001F34 4010            	  3345:             negx.b (a0)
01:00001F36 6AFE            	  3346:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001F38 67FE            	  3347:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F3A 64FE            	  3348:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F3C 69FE            	  3349:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F3E 0C1000F6        	  3350:             cmpi.b #$F6,(a0)
01:00001F42 66FE            	  3351:             bne.s *                   * Check Z Flag  beq/bne
                            	  3352: 
                            	  3353: 
                            	  3354: 
                            	  3355: * -----
                            	  3356: 
                            	  3357: *     NEGX - WORD
01:00001F44 307C0100        	  3358:             move.l #$00000100,a0
01:00001F48 7000            	  3359:             moveq  #$00000000,d0
01:00001F4A 223C00008000    	  3360:             move.l #$00008000,d1
01:00001F50 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
01:00001F54 4040            	  3362:             negx.w d0
01:00001F56 6AFE            	  3363:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001F58 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F5A 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F5C 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F5E 023C00EF        	  3367:             andi.b #$EF,CCR       * Clear X Flag
01:00001F62 4040            	  3368:             negx.w d0
01:00001F64 6BFE            	  3369:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F66 67FE            	  3370:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F68 64FE            	  3371:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F6A 69FE            	  3372:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F6C 003C0010        	  3373:             ori.b #$10,CCR        * Set X Flag
01:00001F70 4041            	  3374:             negx.w d1
01:00001F72 6BFE            	  3375:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001F74 67FE            	  3376:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F76 64FE            	  3377:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F78 69FE            	  3378:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001F7A 0C417FFF        	  3379:             cmpi.w #$7FFF,d1
01:00001F7E 66FE            	  3380:             bne.s *                   * Check Z Flag  beq/bne
01:00001F80 023C00EF        	  3381:             andi.b #$EF,CCR       * Clear X Flag
01:00001F84 4041            	  3382:             negx.w d1
01:00001F86 6AFE            	  3383:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F88 67FE            	  3384:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F8A 64FE            	  3385:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F8C 69FE            	  3386:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001F8E 0C418001        	  3387:             cmpi.w #$8001,d1
01:00001F92 66FE            	  3388:             bne.s *                   * Check Z Flag  beq/bne
01:00001F94 30BC7FFF        	  3389:             move.w #$7FFF,(a0)
01:00001F98 003C0010        	  3390:             ori.b #$10,CCR        * Set X Flag
01:00001F9C 4050            	  3391:             negx.w (a0)
01:00001F9E 6AFE            	  3392:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FA0 67FE            	  3393:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FA2 64FE            	  3394:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FA4 69FE            	  3395:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FA6 30BCF567        	  3396:             move.w #$F567,(a0)
01:00001FAA 023C00EF        	  3397:             andi.b #$EF,CCR       * Clear X Flag
01:00001FAE 4050            	  3398:             negx.w (a0)
01:00001FB0 6BFE            	  3399:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FB2 67FE            	  3400:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FB4 64FE            	  3401:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FB6 69FE            	  3402:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FB8 30BCF567        	  3403:             move.w #$F567,(a0)
01:00001FBC 003C0010        	  3404:             ori.b #$10,CCR        * Set X Flag
01:00001FC0 4050            	  3405:             negx.w (a0)
01:00001FC2 6BFE            	  3406:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FC4 67FE            	  3407:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FC6 64FE            	  3408:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FC8 69FE            	  3409:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FCA 0C500A98        	  3410:             cmpi.w #$0A98,(a0)
01:00001FCE 66FE            	  3411:             bne.s *                   * Check Z Flag  beq/bne
01:00001FD0 023C00EF        	  3412:             andi.b #$EF,CCR       * Clear X Flag
01:00001FD4 4050            	  3413:             negx.w (a0)
01:00001FD6 6AFE            	  3414:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FD8 67FE            	  3415:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FDA 64FE            	  3416:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FDC 69FE            	  3417:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FDE 0C50F568        	  3418:             cmpi.w #$F568,(a0)
01:00001FE2 66FE            	  3419:             bne.s *                   * Check Z Flag  beq/bne
                            	  3420: 
                            	  3421: 
                            	  3422: * -----
                            	  3423: 
                            	  3424: *     NEGX - LONG
01:00001FE4 307C0100        	  3425:             move.l #$00000100,a0
01:00001FE8 7000            	  3426:             moveq  #$00000000,d0
01:00001FEA 223C80000000    	  3427:             move.l #$80000000,d1
01:00001FF0 003C0010        	  3428:             ori.b #$10,CCR        * Set X Flag
01:00001FF4 4080            	  3429:             negx.l d0
01:00001FF6 6AFE            	  3430:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FF8 67FE            	  3431:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FFA 64FE            	  3432:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FFC 69FE            	  3433:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FFE 023C00EF        	  3434:             andi.b #$EF,CCR       * Clear X Flag
01:00002002 4080            	  3435:             negx.l d0
01:00002004 6BFE            	  3436:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002006 67FE            	  3437:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002008 64FE            	  3438:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:0000200A 69FE            	  3439:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000200C 003C0010        	  3440:             ori.b #$10,CCR        * Set X Flag
01:00002010 4081            	  3441:             negx.l d1
01:00002012 6BFE            	  3442:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002014 67FE            	  3443:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002016 64FE            	  3444:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002018 69FE            	  3445:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000201A 0C817FFFFFFF    	  3446:             cmpi.l #$7FFFFFFF,d1
01:00002020 66FE            	  3447:             bne.s *                   * Check Z Flag  beq/bne
01:00002022 023C00EF        	  3448:             andi.b #$EF,CCR       * Clear X Flag
01:00002026 4081            	  3449:             negx.l d1
01:00002028 6AFE            	  3450:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000202A 67FE            	  3451:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000202C 64FE            	  3452:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000202E 69FE            	  3453:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002030 0C8180000001    	  3454:             cmpi.l #$80000001,d1
01:00002036 66FE            	  3455:             bne.s *                   * Check Z Flag  beq/bne
01:00002038 20BC00007FFF    	  3456:             move.l #$7FFF,(a0)
01:0000203E 003C0010        	  3457:             ori.b #$10,CCR        * Set X Flag
01:00002042 4090            	  3458:             negx.l (a0)
01:00002044 6AFE            	  3459:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002046 67FE            	  3460:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002048 64FE            	  3461:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000204A 69FE            	  3462:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000204C 20BCF5671234    	  3463:             move.l #$F5671234,(a0)
01:00002052 023C00EF        	  3464:             andi.b #$EF,CCR       * Clear X Flag
01:00002056 4090            	  3465:             negx.l (a0)
01:00002058 6BFE            	  3466:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000205A 67FE            	  3467:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000205C 64FE            	  3468:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000205E 69FE            	  3469:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002060 20BCF5675678    	  3470:             move.l #$F5675678,(a0)
01:00002066 003C0010        	  3471:             ori.b #$10,CCR        * Set X Flag
01:0000206A 4090            	  3472:             negx.l (a0)
01:0000206C 6BFE            	  3473:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000206E 67FE            	  3474:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002070 64FE            	  3475:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002072 69FE            	  3476:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002074 0C900A98A987    	  3477:             cmpi.l #$0A98A987,(a0)
01:0000207A 66FE            	  3478:             bne.s *                   * Check Z Flag  beq/bne
01:0000207C 023C00EF        	  3479:             andi.b #$EF,CCR       * Clear X Flag
01:00002080 4090            	  3480:             negx.l (a0)
01:00002082 6AFE            	  3481:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002084 67FE            	  3482:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002086 64FE            	  3483:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002088 69FE            	  3484:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000208A 0C90F5675679    	  3485:             cmpi.l #$F5675679,(a0)
01:00002090 66FE            	  3486:             bne.s *                   * Check Z Flag  beq/bne
                            	  3487: 
                            	  3488: 
                            	  3489: * -----
                            	  3490: 
                            	  3491: *     CLR - BYTE
01:00002092 307C0100        	  3492:             move.l #$00000100,a0
01:00002096 203C12345678    	  3493:             move.l #$12345678,d0
01:0000209C 223C12345678    	  3494:             move.l #$12345678,d1
01:000020A2 243C12345678    	  3495:             move.l #$12345678,d2
01:000020A8 283C12345600    	  3496:             move.l #$12345600,d4
01:000020AE 2A3C12340000    	  3497:             move.l #$12340000,d5
01:000020B4 7C00            	  3498:             moveq  #$00000000,d6
                            	  3499: 
01:000020B6 4200            	  3500:             clr.b d0
01:000020B8 66FE            	  3501:             bne.s *                   * Check Z Flag  beq/bne 0
01:000020BA 6BFE            	  3502:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020BC B880            	  3503:             cmp.l d0,d4
01:000020BE 66FE            	  3504:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3505: 
01:000020C0 4241            	  3506:             clr.w d1
01:000020C2 66FE            	  3507:             bne.s *                   * Check Z Flag  beq/bne 0
01:000020C4 6BFE            	  3508:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020C6 BA81            	  3509:             cmp.l d1,d5
01:000020C8 66FE            	  3510:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3511: 
01:000020CA 7400            	  3512:             clr.l d2
01:000020CC 66FE            	  3513:             bne.s *                   * Check Z Flag  beq/bne 0
01:000020CE 6BFE            	  3514:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020D0 BC82            	  3515:             cmp.l d2,d6
01:000020D2 66FE            	  3516:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3517: 
01:000020D4 4E75            	  3518:             rts
                            	  3519: 
                            	  3520: 
                            	  3521: 
                            	  3522: *-----------------------------------------------------------
                            	  3523: *-----------------------------------------------------------
                            	  3524: * OPCODE : MOVEM
                            	  3525: *-----------------------------------------------------------
                            	  3526: *-----------------------------------------------------------
                            	  3527: op_MOVEM:
                            	  3528: 
                            	  3529: *     WORD  Registers --> Memory
01:000020D6 203C0000D0D0    	  3530:             move.l #$0000d0d0,d0
01:000020DC 223C0000D1D1    	  3531:             move.l #$0000d1d1,d1
01:000020E2 243C0000D2D2    	  3532:             move.l #$0000d2d2,d2
01:000020E8 263C0000D3D3    	  3533:             move.l #$0000d3d3,d3
01:000020EE 283C0000D4D4    	  3534:             move.l #$0000d4d4,d4
01:000020F4 2A3C0000D5D5    	  3535:             move.l #$0000d5d5,d5
01:000020FA 2C3C0000D6D6    	  3536:             move.l #$0000d6d6,d6
01:00002100 2E3C0000D7D7    	  3537:             move.l #$0000d7d7,d7
01:00002106 307C0A0A        	  3538:             move.l #$00000a0a,a0
01:0000210A 327C1A1A        	  3539:             move.l #$00001a1a,a1
01:0000210E 347C2A2A        	  3540:             move.l #$00002a2a,a2
01:00002112 367C3A3A        	  3541:             move.l #$00003a3a,a3
01:00002116 387C4A4A        	  3542:             move.l #$00004a4a,a4
01:0000211A 3A7C5A5A        	  3543:             move.l #$00005a5a,a5
01:0000211E 3C7C6A6A        	  3544:             move.l #$00006a6a,a6
                            	  3545: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3546: 
01:00002122 48B8FFFF0100    	  3547:             movem.w D0-D7/A0-A7,$00000100
                            	  3548: 
01:00002128 307C0100        	  3549:             move.l #$00000100,a0
                            	  3550: 
01:0000212C B058            	  3551:             cmp.w (a0)+,d0
01:0000212E 66FE            	  3552:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002130 B258            	  3553:             cmp.w (a0)+,d1
01:00002132 66FE            	  3554:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002134 B458            	  3555:             cmp.w (a0)+,d2
01:00002136 66FE            	  3556:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002138 B658            	  3557:             cmp.w (a0)+,d3
01:0000213A 66FE            	  3558:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000213C B858            	  3559:             cmp.w (a0)+,d4
01:0000213E 66FE            	  3560:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002140 BA58            	  3561:             cmp.w (a0)+,d5
01:00002142 66FE            	  3562:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002144 BC58            	  3563:             cmp.w (a0)+,d6
01:00002146 66FE            	  3564:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002148 BE58            	  3565:             cmp.w (a0)+,d7
01:0000214A 66FE            	  3566:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3567: 
01:0000214C 0C580A0A        	  3568:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002150 66FE            	  3569:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3570: 
01:00002152 B2D8            	  3571:             cmp.w (a0)+,a1
01:00002154 66FE            	  3572:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002156 B4D8            	  3573:             cmp.w (a0)+,a2
01:00002158 66FE            	  3574:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000215A B6D8            	  3575:             cmp.w (a0)+,a3
01:0000215C 66FE            	  3576:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000215E B8D8            	  3577:             cmp.w (a0)+,a4
01:00002160 66FE            	  3578:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002162 BAD8            	  3579:             cmp.w (a0)+,a5
01:00002164 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002166 BCD8            	  3581:             cmp.w (a0)+,a6
01:00002168 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3583: 
                            	  3584: 
                            	  3585: 
                            	  3586: 
                            	  3587: *     LONG  Registers --> Memory
01:0000216A 203CD0D0D0D0    	  3588:             move.l #$d0d0d0d0,d0
01:00002170 223CD1D1D1D1    	  3589:             move.l #$d1d1d1d1,d1
01:00002176 243CD2D2D2D2    	  3590:             move.l #$d2d2d2d2,d2
01:0000217C 263CD3D3D3D3    	  3591:             move.l #$d3d3d3d3,d3
01:00002182 283CD4D4D4D4    	  3592:             move.l #$d4d4d4d4,d4
01:00002188 2A3CD5D5D5D5    	  3593:             move.l #$d5d5d5d5,d5
01:0000218E 2C3CD6D6D6D6    	  3594:             move.l #$d6d6d6d6,d6
01:00002194 2E3CD7D7D7D7    	  3595:             move.l #$d7d7d7d7,d7
01:0000219A 207C0A0A0A0A    	  3596:             move.l #$0a0a0a0a,a0
01:000021A0 227C1A1A1A1A    	  3597:             move.l #$1a1a1a1a,a1
01:000021A6 247C2A2A2A2A    	  3598:             move.l #$2a2a2a2a,a2
01:000021AC 267C3A3A3A3A    	  3599:             move.l #$3a3a3a3a,a3
01:000021B2 287C4A4A4A4A    	  3600:             move.l #$4a4a4a4a,a4
01:000021B8 2A7C5A5A5A5A    	  3601:             move.l #$5a5a5a5a,a5
01:000021BE 2C7C6A6A6A6A    	  3602:             move.l #$6a6a6a6a,a6
                            	  3603: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3604: 
                            	  3605: 
01:000021C4 48F8FFFF0120    	  3606:             movem.l D0-D7/A0-A7,$00000120
                            	  3607: 
01:000021CA 307C0120        	  3608:             move.l #$00000120,a0
                            	  3609: 
01:000021CE B098            	  3610:             cmp.l (a0)+,d0
01:000021D0 66FE            	  3611:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021D2 B298            	  3612:             cmp.l (a0)+,d1
01:000021D4 66FE            	  3613:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021D6 B498            	  3614:             cmp.l (a0)+,d2
01:000021D8 66FE            	  3615:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021DA B698            	  3616:             cmp.l (a0)+,d3
01:000021DC 66FE            	  3617:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021DE B898            	  3618:             cmp.l (a0)+,d4
01:000021E0 66FE            	  3619:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021E2 BA98            	  3620:             cmp.l (a0)+,d5
01:000021E4 66FE            	  3621:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021E6 BC98            	  3622:             cmp.l (a0)+,d6
01:000021E8 66FE            	  3623:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021EA BE98            	  3624:             cmp.l (a0)+,d7
01:000021EC 66FE            	  3625:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3626: 
01:000021EE 0C980A0A0A0A    	  3627:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:000021F4 66FE            	  3628:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3629: 
01:000021F6 B3D8            	  3630:             cmp.l (a0)+,a1
01:000021F8 66FE            	  3631:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021FA B5D8            	  3632:             cmp.l (a0)+,a2
01:000021FC 66FE            	  3633:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021FE B7D8            	  3634:             cmp.l (a0)+,a3
01:00002200 66FE            	  3635:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002202 B9D8            	  3636:             cmp.l (a0)+,a4
01:00002204 66FE            	  3637:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002206 BBD8            	  3638:             cmp.l (a0)+,a5
01:00002208 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000220A BDD8            	  3640:             cmp.l (a0)+,a6
01:0000220C 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3642: *      ----
                            	  3643: 
                            	  3644: 
                            	  3645: *     WORD  Registers --> Memory  -(An) EA Mode
01:0000220E 203C0000D0D0    	  3646:             move.l #$0000d0d0,d0
01:00002214 223C0000D1D1    	  3647:             move.l #$0000d1d1,d1
01:0000221A 243C0000D2D2    	  3648:             move.l #$0000d2d2,d2
01:00002220 263C0000D3D3    	  3649:             move.l #$0000d3d3,d3
01:00002226 283C0000D4D4    	  3650:             move.l #$0000d4d4,d4
01:0000222C 2A3C0000D5D5    	  3651:             move.l #$0000d5d5,d5
01:00002232 2C3C0000D6D6    	  3652:             move.l #$0000d6d6,d6
01:00002238 2E3C0000D7D7    	  3653:             move.l #$0000d7d7,d7
01:0000223E 307C0A0A        	  3654:             move.l #$00000a0a,a0
01:00002242 327C1A1A        	  3655:             move.l #$00001a1a,a1
01:00002246 347C2A2A        	  3656:             move.l #$00002a2a,a2
01:0000224A 367C3A3A        	  3657:             move.l #$00003a3a,a3
01:0000224E 387C4A4A        	  3658:             move.l #$00004a4a,a4
01:00002252 3A7C5A5A        	  3659:             move.l #$00005a5a,a5
01:00002256 3C7C6A6A        	  3660:             move.l #$00006a6a,a6
                            	  3661: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3662: 
01:0000225A 307C01A0        	  3663:             move.l #$000001A0,a0
01:0000225E 48A0FFFF        	  3664:             movem.w D0-D7/A0-A7,-(a0)
                            	  3665: 
01:00002262 307C019E        	  3666:             move.l #$0000019E,a0
                            	  3667: 
01:00002266 BCE0            	  3668:             cmp.w -(a0),a6
01:00002268 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000226A BAE0            	  3670:             cmp.w -(a0),a5
01:0000226C 66FE            	  3671:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000226E B8E0            	  3672:             cmp.w -(a0),a4
01:00002270 66FE            	  3673:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002272 B6E0            	  3674:             cmp.w -(a0),a3
01:00002274 66FE            	  3675:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002276 B4E0            	  3676:             cmp.w -(a0),a2
01:00002278 66FE            	  3677:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000227A B2E0            	  3678:             cmp.w -(a0),a1
01:0000227C 66FE            	  3679:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000227E B0E0            	  3680:             cmp.w -(a0),a0
                            	  3681: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002280 BE60            	  3682:             cmp.w -(a0),d7
01:00002282 66FE            	  3683:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002284 BC60            	  3684:             cmp.w -(a0),d6
01:00002286 66FE            	  3685:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002288 BA60            	  3686:             cmp.w -(a0),d5
01:0000228A 66FE            	  3687:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000228C B860            	  3688:             cmp.w -(a0),d4
01:0000228E 66FE            	  3689:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002290 B660            	  3690:             cmp.w -(a0),d3
01:00002292 66FE            	  3691:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002294 B460            	  3692:             cmp.w -(a0),d2
01:00002296 66FE            	  3693:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002298 B260            	  3694:             cmp.w -(a0),d1
01:0000229A 66FE            	  3695:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000229C B060            	  3696:             cmp.w -(a0),d0
01:0000229E 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3698: 
                            	  3699: 
                            	  3700: 
                            	  3701: 
                            	  3702: *     LONG  Registers --> Memory   -(An) EA Mode
01:000022A0 203CD0D0D0D0    	  3703:             move.l #$d0d0d0d0,d0
01:000022A6 223CD1D1D1D1    	  3704:             move.l #$d1d1d1d1,d1
01:000022AC 243CD2D2D2D2    	  3705:             move.l #$d2d2d2d2,d2
01:000022B2 263CD3D3D3D3    	  3706:             move.l #$d3d3d3d3,d3
01:000022B8 283CD4D4D4D4    	  3707:             move.l #$d4d4d4d4,d4
01:000022BE 2A3CD5D5D5D5    	  3708:             move.l #$d5d5d5d5,d5
01:000022C4 2C3CD6D6D6D6    	  3709:             move.l #$d6d6d6d6,d6
01:000022CA 2E3CD7D7D7D7    	  3710:             move.l #$d7d7d7d7,d7
01:000022D0 207C0A0A0A0A    	  3711:             move.l #$0a0a0a0a,a0
01:000022D6 227C1A1A1A1A    	  3712:             move.l #$1a1a1a1a,a1
01:000022DC 247C2A2A2A2A    	  3713:             move.l #$2a2a2a2a,a2
01:000022E2 267C3A3A3A3A    	  3714:             move.l #$3a3a3a3a,a3
01:000022E8 287C4A4A4A4A    	  3715:             move.l #$4a4a4a4a,a4
01:000022EE 2A7C5A5A5A5A    	  3716:             move.l #$5a5a5a5a,a5
01:000022F4 2C7C6A6A6A6A    	  3717:             move.l #$6a6a6a6a,a6
                            	  3718: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3719: 
                            	  3720: 
01:000022FA 307C01A0        	  3721:             move.l #$000001A0,a0
01:000022FE 48E0FFFF        	  3722:             movem.l D0-D7/A0-A7,-(a0)
                            	  3723: 
01:00002302 307C019C        	  3724:             move.l #$0000019C,a0
                            	  3725: 
01:00002306 BDE0            	  3726:             cmp.l -(a0),a6
01:00002308 66FE            	  3727:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000230A BBE0            	  3728:             cmp.l -(a0),a5
01:0000230C 66FE            	  3729:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000230E B9E0            	  3730:             cmp.l -(a0),a4
01:00002310 66FE            	  3731:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002312 B7E0            	  3732:             cmp.l -(a0),a3
01:00002314 66FE            	  3733:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002316 B5E0            	  3734:             cmp.l -(a0),a2
01:00002318 66FE            	  3735:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000231A B3E0            	  3736:             cmp.l -(a0),a1
01:0000231C 66FE            	  3737:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000231E B1E0            	  3738:             cmp.l -(a0),a0
                            	  3739: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002320 BEA0            	  3740:             cmp.l -(a0),d7
01:00002322 66FE            	  3741:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002324 BCA0            	  3742:             cmp.l -(a0),d6
01:00002326 66FE            	  3743:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002328 BAA0            	  3744:             cmp.l -(a0),d5
01:0000232A 66FE            	  3745:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000232C B8A0            	  3746:             cmp.l -(a0),d4
01:0000232E 66FE            	  3747:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002330 B6A0            	  3748:             cmp.l -(a0),d3
01:00002332 66FE            	  3749:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002334 B4A0            	  3750:             cmp.l -(a0),d2
01:00002336 66FE            	  3751:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002338 B2A0            	  3752:             cmp.l -(a0),d1
01:0000233A 66FE            	  3753:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000233C B0A0            	  3754:             cmp.l -(a0),d0
01:0000233E 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3756: 
                            	  3757: 
                            	  3758: 
                            	  3759: *     ----
                            	  3760: 
                            	  3761: *     WORD - Memory --> Registers
01:00002340 7000            	  3762:             moveq  #$00000000,d0
01:00002342 7200            	  3763:             moveq  #$00000000,d1
01:00002344 7400            	  3764:             moveq  #$00000000,d2
01:00002346 7600            	  3765:             moveq  #$00000000,d3
01:00002348 7800            	  3766:             moveq  #$00000000,d4
01:0000234A 7A00            	  3767:             moveq  #$00000000,d5
01:0000234C 7C00            	  3768:             moveq  #$00000000,d6
01:0000234E 7E00            	  3769:             moveq  #$00000000,d7
01:00002350 91C8            	  3770:             move.l #$00000000,a0
01:00002352 93C9            	  3771:             move.l #$00000000,a1
01:00002354 95CA            	  3772:             move.l #$00000000,a2
01:00002356 97CB            	  3773:             move.l #$00000000,a3
01:00002358 99CC            	  3774:             move.l #$00000000,a4
01:0000235A 9BCD            	  3775:             move.l #$00000000,a5
01:0000235C 9DCE            	  3776:             move.l #$00000000,a6
                            	  3777: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3778: 
01:0000235E 4CB82A550100    	  3779:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3780: 
01:00002364 B0BCFFFFD0D0    	  3781:             cmp.l #$FFFFD0D0,d0
01:0000236A 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236C B4BCFFFFD1D1    	  3783:             cmp.l #$FFFFD1D1,d2
01:00002372 66FE            	  3784:             bne.s *                  * Check Z Flag  beq/bne 0
01:00002374 B8BCFFFFD2D2    	  3785:             cmp.l #$FFFFD2D2,d4
01:0000237A 66FE            	  3786:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237C BCBCFFFFD3D3    	  3787:             cmp.l #$FFFFD3D3,d6
01:00002382 66FE            	  3788:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002384 B2FCD4D4        	  3789:             cmp.l #$FFFFD4D4,a1
01:00002388 66FE            	  3790:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000238A B6FCD5D5        	  3791:             cmp.l #$FFFFD5D5,a3
01:0000238E 66FE            	  3792:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002390 BAFCD6D6        	  3793:             cmp.l #$FFFFD6D6,a5
01:00002394 66FE            	  3794:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3795: 
                            	  3796: 
                            	  3797: *     LONG - Memory --> Registers
01:00002396 7000            	  3798:             moveq  #$00000000,d0
01:00002398 7200            	  3799:             moveq  #$00000000,d1
01:0000239A 7400            	  3800:             moveq  #$00000000,d2
01:0000239C 7600            	  3801:             moveq  #$00000000,d3
01:0000239E 7800            	  3802:             moveq  #$00000000,d4
01:000023A0 7A00            	  3803:             moveq  #$00000000,d5
01:000023A2 7C00            	  3804:             moveq  #$00000000,d6
01:000023A4 7E00            	  3805:             moveq  #$00000000,d7
01:000023A6 91C8            	  3806:             move.l #$00000000,a0
01:000023A8 93C9            	  3807:             move.l #$00000000,a1
01:000023AA 95CA            	  3808:             move.l #$00000000,a2
01:000023AC 97CB            	  3809:             move.l #$00000000,a3
01:000023AE 99CC            	  3810:             move.l #$00000000,a4
01:000023B0 9BCD            	  3811:             move.l #$00000000,a5
01:000023B2 9DCE            	  3812:             move.l #$00000000,a6
                            	  3813: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3814: 
01:000023B4 4CF82A550120    	  3815:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3816: 
01:000023BA B0BCD0D0D0D0    	  3817:             cmp.l #$D0D0D0D0,d0
01:000023C0 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023C2 B4BCD1D1D1D1    	  3819:             cmp.l #$D1D1D1D1,d2
01:000023C8 66FE            	  3820:             bne.s *                  * Check Z Flag  beq/bne 0
01:000023CA B8BCD2D2D2D2    	  3821:             cmp.l #$D2D2D2D2,d4
01:000023D0 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023D2 BCBCD3D3D3D3    	  3823:             cmp.l #$D3D3D3D3,d6
01:000023D8 66FE            	  3824:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023DA B3FCD4D4D4D4    	  3825:             cmp.l #$D4D4D4D4,a1
01:000023E0 66FE            	  3826:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023E2 B7FCD5D5D5D5    	  3827:             cmp.l #$D5D5D5D5,a3
01:000023E8 66FE            	  3828:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EA BBFCD6D6D6D6    	  3829:             cmp.l #$D6D6D6D6,a5
01:000023F0 66FE            	  3830:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3831: 
01:000023F2 4E75            	  3832:             rts
                            	  3833: 
                            	  3834: 
                            	  3835: *-----------------------------------------------------------
                            	  3836: *-----------------------------------------------------------
                            	  3837: * OPCODE : ABCD
                            	  3838: *-----------------------------------------------------------
                            	  3839: *-----------------------------------------------------------
                            	  3840: op_ABCD:
                            	  3841: 
                            	  3842: *     Test with X Flag CLEARED
01:000023F4 307C0110        	  3843:                 move.l #$00000110,a0 * Address pointer-X
01:000023F8 327C0120        	  3844:                 move.l #$00000120,a1 * Address pointer-Y
01:000023FC 7000            	  3845:                 moveq  #$00000000,d0 * BCD byte-X
01:000023FE 7200            	  3846:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002400 7400            	  3847:                 moveq  #$00000000,d2
01:00002402 7600            	  3848:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002404 7800            	  3849:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002406 7A00            	  3850:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002408 2C3C00000099    	  3851:                 move.l #$00000099,d6 * Inner loop counter
01:0000240E 2E3C00000099    	  3852:                 move.l #$00000099,d7 * Outer loop counter
                            	  3853: 
01:00002414 2007            	  3854: ABCD_OUTER1:    move.l d7,d0
01:00002416 2206            	  3855: ABCD_INNER1:    move.l d6,d1
01:00002418 023C00EF        	  3856:                 andi.b #$EF,CCR     * Clear X Flag
01:0000241C 307C0110        	  3857:                 move.l #$00000110,a0 * Address pointer-X
01:00002420 327C0120        	  3858:                 move.l #$00000120,a1 * Address pointer-Y
01:00002424 1140FFFF        	  3859:                 move.b d0,-1(a0)
01:00002428 1341FFFF        	  3860:                 move.b d1,-1(a1)
                            	  3861: 
01:0000242C C300            	  3862:                 abcd d0,d1
01:0000242E 6402            	  3863:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002430 5284            	  3864:                 add.l #1,d4
01:00002432 DA81            	  3865: ABCD_NO_C1:     add.l d1,d5
                            	  3866: 
01:00002434 C308            	  3867:                 abcd -(a0),-(a1)
01:00002436 6402            	  3868:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002438 5284            	  3869:                 add.l #1,d4
01:0000243A D611            	  3870: ABCD_NO_C2:     add.b (a1),d3
                            	  3871: 
                            	  3872: 
01:0000243C 51CEFFD8        	  3873:                 dbf d6,ABCD_INNER1
01:00002440 2C3C00000099    	  3874:                 move.l #$00000099,d6
01:00002446 51CFFFCC        	  3875:                 dbf d7,ABCD_OUTER1
01:0000244A 0C8400005AFC    	  3876:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:00002450 66FE            	  3877:                 bne.s *
01:00002452 0C85001C9A34    	  3878:                 cmpi.l #$001C9A34,d5
01:00002458 66FE            	  3879:                 bne.s *
01:0000245A 0C8300000034    	  3880:                 cmpi.l #$00000034,d3
01:00002460 66FE            	  3881:                 bne.s *
                            	  3882: 
                            	  3883: *     Test with X Flag SET
01:00002462 307C0110        	  3884:                 move.l #$00000110,a0 * Address pointer-X
01:00002466 327C0120        	  3885:                 move.l #$00000120,a1 * Address pointer-Y
01:0000246A 7000            	  3886:                 moveq  #$00000000,d0 * BCD byte-X
01:0000246C 7200            	  3887:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000246E 7400            	  3888:                 moveq  #$00000000,d2
01:00002470 7600            	  3889:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002472 7800            	  3890:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002474 7A00            	  3891:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002476 2C3C00000099    	  3892:                 move.l #$00000099,d6 * Inner loop counter
01:0000247C 2E3C00000099    	  3893:                 move.l #$00000099,d7 * Outer loop counter
                            	  3894: 
01:00002482 2007            	  3895: ABCD_OUTER2:    move.l d7,d0
01:00002484 2206            	  3896: ABCD_INNER2:    move.l d6,d1
01:00002486 003C0010        	  3897:                 ori.b #$10,CCR      * Set X Flag
01:0000248A 307C0110        	  3898:                 move.l #$00000110,a0 * Address pointer-X
01:0000248E 327C0120        	  3899:                 move.l #$00000120,a1 * Address pointer-Y
01:00002492 1140FFFF        	  3900:                 move.b d0,-1(a0)
01:00002496 1341FFFF        	  3901:                 move.b d1,-1(a1)
                            	  3902: 
01:0000249A C300            	  3903:                 abcd d0,d1
01:0000249C 6402            	  3904:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:0000249E 5284            	  3905:                 add.l #1,d4
01:000024A0 DA81            	  3906: ABCD_NO_C3:     add.l d1,d5
                            	  3907: 
01:000024A2 C308            	  3908:                 abcd -(a0),-(a1)
01:000024A4 6402            	  3909:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:000024A6 5284            	  3910:                 add.l #1,d4
01:000024A8 D611            	  3911: ABCD_NO_C4:     add.b (a1),d3
                            	  3912: 
                            	  3913: 
01:000024AA 51CEFFD8        	  3914:                 dbf d6,ABCD_INNER2
01:000024AE 2C3C00000099    	  3915:                 move.l #$00000099,d6
01:000024B4 51CFFFCC        	  3916:                 dbf d7,ABCD_OUTER2
01:000024B8 0C8400005B60    	  3917:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:000024BE 66FE            	  3918:                 bne.s *
01:000024C0 0C85001CCFC8    	  3919:                 cmpi.l #$001CCFC8,d5
01:000024C6 66FE            	  3920:                 bne.s *
01:000024C8 0C8300000034    	  3921:                 cmpi.l #$00000034,d3
01:000024CE 66FE            	  3922:                 bne.s *
                            	  3923: 
                            	  3924: *             Quick check of Z Flag
01:000024D0 103C0000        	  3925:                 move.b #$00,d0
01:000024D4 123C0000        	  3926:                 move.b #$00,d1
01:000024D8 44FC0000        	  3927:                 move #$00,CCR              * Set Z flag to 0
01:000024DC C101            	  3928:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000024DE 67FE            	  3929:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3930: 
01:000024E0 103C0001        	  3931:                 move.b #$01,d0
01:000024E4 123C0000        	  3932:                 move.b #$00,d1
01:000024E8 44FC0004        	  3933:                 move #$04,CCR              * Set Z flag to 0
01:000024EC C101            	  3934:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000024EE 67FE            	  3935:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3936: 
01:000024F0 4E75            	  3937:                 rts
                            	  3938: 
                            	  3939: *-----------------------------------------------------------
                            	  3940: *-----------------------------------------------------------
                            	  3941: * OPCODE : SBCD
                            	  3942: *-----------------------------------------------------------
                            	  3943: *-----------------------------------------------------------
                            	  3944: op_SBCD:
                            	  3945: 
                            	  3946: *     Test with X Flag CLEARED
01:000024F2 307C0110        	  3947:                 move.l #$00000110,a0 * Address pointer-X
01:000024F6 327C0120        	  3948:                 move.l #$00000120,a1 * Address pointer-Y
01:000024FA 7000            	  3949:                 moveq  #$00000000,d0 * BCD byte-X
01:000024FC 7200            	  3950:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024FE 7400            	  3951:                 moveq  #$00000000,d2
01:00002500 7600            	  3952:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002502 7800            	  3953:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002504 7A00            	  3954:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002506 2C3C00000099    	  3955:                 move.l #$00000099,d6 * Inner loop counter
01:0000250C 2E3C00000099    	  3956:                 move.l #$00000099,d7 * Outer loop counter
                            	  3957: 
01:00002512 2007            	  3958: SBCD_OUTER1:    move.l d7,d0
01:00002514 2206            	  3959: SBCD_INNER1:    move.l d6,d1
01:00002516 023C00EF        	  3960:                 andi.b #$EF,CCR     * Clear X Flag
01:0000251A 307C0110        	  3961:                 move.l #$00000110,a0 * Address pointer-X
01:0000251E 327C0120        	  3962:                 move.l #$00000120,a1 * Address pointer-Y
01:00002522 1140FFFF        	  3963:                 move.b d0,-1(a0)
01:00002526 1341FFFF        	  3964:                 move.b d1,-1(a1)
                            	  3965: 
01:0000252A 8300            	  3966:                 sbcd d0,d1
01:0000252C 6402            	  3967:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:0000252E 5284            	  3968:                 add.l #1,d4
01:00002530 DA81            	  3969: SBCD_NO_C1:     add.l d1,d5
                            	  3970: 
01:00002532 8308            	  3971:                 sbcd -(a0),-(a1)
01:00002534 6402            	  3972:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002536 5284            	  3973:                 add.l #1,d4
01:00002538 D611            	  3974: SBCD_NO_C2:     add.b (a1),d3
                            	  3975: 
                            	  3976: 
01:0000253A 51CEFFD8        	  3977:                 dbf d6,SBCD_INNER1
01:0000253E 2C3C00000099    	  3978:                 move.l #$00000099,d6
01:00002544 51CFFFCC        	  3979:                 dbf d7,SBCD_OUTER1
01:00002548 0C8400005C0A    	  3980:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:0000254E 66FE            	  3981:                 bne.s *
01:00002550 0C85001C459E    	  3982:                 cmpi.l #$001C459E,d5
01:00002556 66FE            	  3983:                 bne.s *
01:00002558 0C830000009E    	  3984:                 cmpi.l #$0000009E,d3
01:0000255E 66FE            	  3985:                 bne.s *
                            	  3986: 
                            	  3987: *     Test with X Flag SET
01:00002560 307C0110        	  3988:                 move.l #$00000110,a0 * Address pointer-X
01:00002564 327C0120        	  3989:                 move.l #$00000120,a1 * Address pointer-Y
01:00002568 7000            	  3990:                 moveq  #$00000000,d0 * BCD byte-X
01:0000256A 7200            	  3991:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000256C 7400            	  3992:                 moveq  #$00000000,d2
01:0000256E 7600            	  3993:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002570 7800            	  3994:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002572 7A00            	  3995:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002574 2C3C00000099    	  3996:                 move.l #$00000099,d6 * Inner loop counter
01:0000257A 2E3C00000099    	  3997:                 move.l #$00000099,d7 * Outer loop counter
                            	  3998: 
01:00002580 2007            	  3999: SBCD_OUTER2:    move.l d7,d0
01:00002582 2206            	  4000: SBCD_INNER2:    move.l d6,d1
01:00002584 003C0010        	  4001:                 ori.b #$10,CCR      * Set X Flag
01:00002588 307C0110        	  4002:                 move.l #$00000110,a0 * Address pointer-X
01:0000258C 327C0120        	  4003:                 move.l #$00000120,a1 * Address pointer-Y
01:00002590 1140FFFF        	  4004:                 move.b d0,-1(a0)
01:00002594 1341FFFF        	  4005:                 move.b d1,-1(a1)
                            	  4006: 
01:00002598 8300            	  4007:                 sbcd d0,d1
01:0000259A 6402            	  4008:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:0000259C 5284            	  4009:                 add.l #1,d4
01:0000259E DA81            	  4010: SBCD_NO_C3:     add.l d1,d5
                            	  4011: 
01:000025A0 8308            	  4012:                 sbcd -(a0),-(a1)
01:000025A2 6402            	  4013:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:000025A4 5284            	  4014:                 add.l #1,d4
01:000025A6 D611            	  4015: SBCD_NO_C4:     add.b (a1),d3
                            	  4016: 
01:000025A8 51CEFFD8        	  4017:                 dbf d6,SBCD_INNER2
01:000025AC 2C3C00000099    	  4018:                 move.l #$00000099,d6
01:000025B2 51CFFFCC        	  4019:                 dbf d7,SBCD_OUTER2
01:000025B6 0C8400005CA4    	  4020:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:000025BC 66FE            	  4021:                 bne.s *
01:000025BE 0C85001C5C66    	  4022:                 cmpi.l #$001C5C66,d5
01:000025C4 66FE            	  4023:                 bne.s *
01:000025C6 0C830000009E    	  4024:                 cmpi.l #$0000009E,d3
01:000025CC 66FE            	  4025:                 bne.s *
                            	  4026: 
                            	  4027: 
                            	  4028: *             Quick check of Z Flag
01:000025CE 103C0000        	  4029:                 move.b #$00,d0
01:000025D2 123C0000        	  4030:                 move.b #$00,d1
01:000025D6 44FC0000        	  4031:                 move #$00,CCR              * Set Z flag to 0
01:000025DA 8101            	  4032:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000025DC 67FE            	  4033:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4034: 
01:000025DE 103C0001        	  4035:                 move.b #$01,d0
01:000025E2 123C0000        	  4036:                 move.b #$00,d1
01:000025E6 44FC0004        	  4037:                 move #$04,CCR              * Set Z flag to 0
01:000025EA 8101            	  4038:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000025EC 67FE            	  4039:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4040: 
01:000025EE 4E75            	  4041:                 rts
                            	  4042: 
                            	  4043: *-----------------------------------------------------------
                            	  4044: *-----------------------------------------------------------
                            	  4045: * OPCODE : NBCD
                            	  4046: *-----------------------------------------------------------
                            	  4047: *-----------------------------------------------------------
                            	  4048: op_NBCD:
                            	  4049: 
                            	  4050: *        NBCD to a  Register
                            	  4051: 
01:000025F0 7000            	  4052:                 moveq  #$00000000,d0 * BCD byte
01:000025F2 7200            	  4053:                 moveq  #$00000000,d1
01:000025F4 7400            	  4054:                 moveq  #$00000000,d2
01:000025F6 7600            	  4055:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000025F8 7800            	  4056:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025FA 7A00            	  4057:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000025FC 2C3C00000099    	  4058:                 move.l #$00000099,d6
01:00002602 2E3C00000099    	  4059:                 move.l #$00000099,d7 * Loop counter
                            	  4060: 
01:00002608 2007            	  4061: NBCD_LOOP:      move.l d7,d0
01:0000260A 44FC0004        	  4062:                 move #$04,CCR        * Set Z flag to 0
                            	  4063: 
01:0000260E 4800            	  4064:                 nbcd d0
                            	  4065: 
01:00002610 6402            	  4066:                 bcc.s NBCD_NO_C         * Check C Flag
01:00002612 5284            	  4067:                 add.l #1,d4
01:00002614 6602            	  4068: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:00002616 5283            	  4069:                 add.l #1,d3
01:00002618 DA80            	  4070: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4071: 
01:0000261A 51CFFFEC        	  4072:                 dbf d7,NBCD_LOOP
                            	  4073: 
01:0000261E 0C8300000001    	  4074:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002624 66FE            	  4075:                 bne.s *
01:00002626 0C8400000099    	  4076:                 cmpi.l #$00000099,d4
01:0000262C 66FE            	  4077:                 bne.s *
01:0000262E 0C8500002E3B    	  4078:                 cmpi.l #$00002E3B,d5
01:00002634 66FE            	  4079:                 bne.s *
                            	  4080: 
                            	  4081: 
                            	  4082: *        NBCD to a memory location
                            	  4083: 
01:00002636 7000            	  4084:                 moveq  #$00000000,d0 * BCD byte
01:00002638 7200            	  4085:                 moveq  #$00000000,d1
01:0000263A 7400            	  4086:                 moveq  #$00000000,d2
01:0000263C 7600            	  4087:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:0000263E 7800            	  4088:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002640 7A00            	  4089:                 moveq  #$00000000,d5 * Cumulative BCD results
01:00002642 2C3C00000099    	  4090:                 move.l #$00000099,d6
01:00002648 2E3C00000099    	  4091:                 move.l #$00000099,d7 * Loop counter
                            	  4092: 
01:0000264E 11C70100        	  4093: NBCD_LOOP1:     move.b d7,$00000100
01:00002652 44FC0004        	  4094:                 move #$04,CCR        * Set Z flag to 0
                            	  4095: 
01:00002656 48380100        	  4096:                 nbcd $00000100
01:0000265A 10380100        	  4097:                 move.b $00000100,d0
                            	  4098: 
01:0000265E 6402            	  4099:                 bcc.s NBCD_NO_C1        * Check C Flag
01:00002660 5284            	  4100:                 add.l #1,d4
01:00002662 6602            	  4101: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:00002664 5283            	  4102:                 add.l #1,d3
01:00002666 DA80            	  4103: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4104: 
01:00002668 51CFFFE4        	  4105:                 dbf d7,NBCD_LOOP1
                            	  4106: 
01:0000266C 0C8300000001    	  4107:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002672 66FE            	  4108:                 bne.s *
01:00002674 4A84            	  4109:                 cmpi.l #$00000000,d4
01:00002676 66FE            	  4110:                 bne.s *
01:00002678 0C8500002E3B    	  4111:                 cmpi.l #$00002E3B,d5
01:0000267E 66FE            	  4112:                 bne.s *
                            	  4113: 
                            	  4114: 
01:00002680 4E75            	  4115:                 rts
                            	  4116: 
                            	  4117: 
                            	  4118: 
                            	  4119: *-----------------------------------------------------------
                            	  4120: *-----------------------------------------------------------
                            	  4121: * OPCODE : TRAPV
                            	  4122: *-----------------------------------------------------------
                            	  4123: *-----------------------------------------------------------
                            	  4124: op_TRAPV:
                            	  4125: 
                            	  4126: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4127: 
01:00002682 7000            	  4128:                 moveq  #$00000000,d0 * Clear d0
                            	  4129: 
01:00002684 44FC0000        	  4130:                 move #$00,CCR        * Clear V flag
01:00002688 4E76            	  4131:                 trapv
01:0000268A 4A80            	  4132:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:0000268C 66FE            	  4133:                 bne.s *
                            	  4134: 
01:0000268E 44FC0002        	  4135:                 move #$02,CCR        * Set V flag
01:00002692 4E76            	  4136:                 trapv
01:00002694 0C8012345678    	  4137:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:0000269A 66FE            	  4138:                 bne.s *
                            	  4139: 
                            	  4140: 
01:0000269C 4E75            	  4141:                 rts
                            	  4142: 
                            	  4143: 
                            	  4144: 
                            	  4145: *-----------------------------------------------------------
                            	  4146: *-----------------------------------------------------------
                            	  4147: * OPCODE : RTR
                            	  4148: *-----------------------------------------------------------
                            	  4149: *-----------------------------------------------------------
                            	  4150: 
                            	  4151: op_RTR:
                            	  4152: 
                            	  4153: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4154: 
01:0000269E 41FA000A        	  4155:                 lea RTR_DONE,a0
01:000026A2 2F08            	  4156:                 move.l a0,-(a7)     * push destination PC to the stack
01:000026A4 3F3CFF15        	  4157:                 move.w #$FF15,-(a7)       * push flags=0xFFFF to the stack
01:000026A8 4E77            	  4158:                 rtr
                            	  4159: 
01:000026AA 40C0            	  4160: RTR_DONE:       move SR,d0
01:000026AC 0240001F        	  4161:                 andi #$1F,d0
01:000026B0 0C400015        	  4162:                 cmpi #$15,d0
01:000026B4 66FE            	  4163:                 bne.s *
                            	  4164: 
01:000026B6 4E75            	  4165:                 rts
                            	  4166: 
                            	  4167: 
01:000026B8 283C44444444    	  4168: BSR_FAR2:       move.l #$44444444,d4
01:000026BE 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: *-----------------------------------------------------------
                            	  4173: *-----------------------------------------------------------
                            	  4174: * OPCODE : BCC
                            	  4175: *-----------------------------------------------------------
                            	  4176: *-----------------------------------------------------------
                            	  4177: 
01:000026C0 44FC0000        	  4178: op_BCC:         move #$00,CCR
01:000026C4 6202            	  4179:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:000026C6 60FE            	  4180:                 bra.s *
                            	  4181: 
01:000026C8 44FC0001        	  4182: BCC1:           move #$01,CCR
01:000026CC 63000004        	  4183:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:000026D0 60FE            	  4184:                 bra.s *
                            	  4185: 
01:000026D2 44FC0000        	  4186: BCC2:           move #$00,CCR
01:000026D6 6402            	  4187:                 bcc.s BCC3            * Carry Clear         C=0
01:000026D8 60FE            	  4188:                 bra.s *
                            	  4189: 
01:000026DA 44FC0001        	  4190: BCC3:           move #$01,CCR
01:000026DE 65000004        	  4191:                 bcs.w BCC4            * Carry Set           C=1
01:000026E2 60FE            	  4192:                 bra.s *
                            	  4193: 
01:000026E4 44FC0000        	  4194: BCC4:           move #$00,CCR
01:000026E8 6602            	  4195:                 bne.s BCC5            * Not Equal           Z=0
01:000026EA 60FE            	  4196:                 bra.s *
                            	  4197: 
01:000026EC 44FC0004        	  4198: BCC5:           move #$04,CCR
01:000026F0 67000004        	  4199:                 beq.w BCC6            * Equal               Z=1
01:000026F4 60FE            	  4200:                 bra.s *
                            	  4201: 
01:000026F6 44FC0000        	  4202: BCC6:           move #$00,CCR
01:000026FA 6802            	  4203:                 bvc.s BCC7            * V Clear             V=0
01:000026FC 60FE            	  4204:                 bra.s *
                            	  4205: 
01:000026FE 44FC0002        	  4206: BCC7:           move #$02,CCR
01:00002702 69000004        	  4207:                 bvs.w BCC8            * V Set               V=1
01:00002706 60FE            	  4208:                 bra.s *
                            	  4209: 
01:00002708 44FC0000        	  4210: BCC8:           move #$00,CCR
01:0000270C 6A02            	  4211:                 bpl.s BCC9            * Plus                N=0
01:0000270E 60FE            	  4212:                 bra.s *
                            	  4213: 
01:00002710 44FC0008        	  4214: BCC9:           move #$08,CCR
01:00002714 6B000004        	  4215:                 bmi.w BCC10           * Minus               N=1
01:00002718 60FE            	  4216:                 bra.s *
                            	  4217: 
01:0000271A 44FC0000        	  4218: BCC10:          move #$00,CCR
01:0000271E 6C02            	  4219:                 bge.s BCC11           * Greater or Equal    N=V
01:00002720 60FE            	  4220:                 bra.s *
                            	  4221: 
01:00002722 44FC0002        	  4222: BCC11:          move #$02,CCR
01:00002726 6D000004        	  4223:                 blt.w BCC12           * Less Than           N!=V
01:0000272A 60FE            	  4224:                 bra.s *
                            	  4225: 
01:0000272C 44FC000A        	  4226: BCC12:          move #$0A,CCR
01:00002730 6E02            	  4227:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:00002732 60FE            	  4228:                 bra.s *
                            	  4229: 
01:00002734 44FC0006        	  4230: BCC13:          move #$06,CCR
01:00002738 6F000004        	  4231:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:0000273C 60FE            	  4232:                 bra.s *
                            	  4233: 
                            	  4234: 
01:0000273E 4E75            	  4235: BCC14:          rts
                            	  4236: 
                            	  4237: 
                            	  4238: *-----------------------------------------------------------
                            	  4239: *-----------------------------------------------------------
                            	  4240: * OPCODE : DBCC
                            	  4241: *-----------------------------------------------------------
                            	  4242: *-----------------------------------------------------------
                            	  4243: 
01:00002740 7003            	  4244: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:00002742 7200            	  4245:                 moveq  #$00000000,d1    * Accumulator
01:00002744 44FC0000        	  4246:                 move #$00,CCR
                            	  4247: 
01:00002748 5201            	  4248: DBCC_LOOP1:     addi.b #$1,d1
01:0000274A 51C8FFFC        	  4249:                 dbf d0,DBCC_LOOP1
                            	  4250: 
01:0000274E 0C8100000004    	  4251:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:00002754 66FE            	  4252:                 bne.s *
                            	  4253: 
01:00002756 5201            	  4254: DBCC_LOOP2:     addi.b #$1,d1
01:00002758 54C8FFFC        	  4255:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4256: 
01:0000275C 0C8100000005    	  4257:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:00002762 66FE            	  4258:                 bne.s *
                            	  4259: 
01:00002764 4E75            	  4260:                 rts
                            	  4261: 
                            	  4262: 
                            	  4263: *-----------------------------------------------------------
                            	  4264: *-----------------------------------------------------------
                            	  4265: * OPCODE : SCC
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: 
01:00002766 44FC0001        	  4269: op_SCC:         move #$01,CCR
01:0000276A 54F900010000    	  4270:                 scc $00010000                   * Clear the EA byte
01:00002770 4A3900010000    	  4271:                 cmpi.b #$00,$00010000
01:00002776 66FE            	  4272:                 bne.s *
                            	  4273: 
01:00002778 44FC0000        	  4274:                 move #$00,CCR
01:0000277C 54F900010000    	  4275:                 scc $00010000                   * Set the EA byte to 0xFF
01:00002782 0C3900FF00010000	  4276:                 cmpi.b #$FF,$00010000
01:0000278A 66FE            	  4277:                 bne.s *
                            	  4278: 
01:0000278C 4E75            	  4279:                 rts
                            	  4280: 
                            	  4281: 
                            	  4282: 
                            	  4283: *-----------------------------------------------------------
                            	  4284: *-----------------------------------------------------------
                            	  4285: * OPCODE : ADDQ
                            	  4286: *-----------------------------------------------------------
                            	  4287: *-----------------------------------------------------------
                            	  4288: 
                            	  4289: op_ADDQ:
                            	  4290: 
                            	  4291: *     BYTE
01:0000278E 203C000000FF    	  4292:                 move.l #$000000FF,d0    * Loop counter
01:00002794 7200            	  4293:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002796 7400            	  4294:                 moveq  #$00000000,d2    * Data results accumulator
01:00002798 7600            	  4295:                 moveq  #$00000000,d3
01:0000279A 7800            	  4296:                 moveq  #$00000000,d4
01:0000279C 7A00            	  4297:                 moveq  #$00000000,d5
01:0000279E 7C00            	  4298:                 moveq  #$00000000,d6
01:000027A0 7E00            	  4299:                 moveq  #$00000000,d7
                            	  4300: 
01:000027A2 5605            	  4301: ADDQ_LOOP1:     addq.b #3,d5
01:000027A4 40C6            	  4302:                 move SR,d6
01:000027A6 02860000001F    	  4303:                 andi.l #$1F,d6        * Isolate flags
01:000027AC D286            	  4304:                 add.l d6,d1           * Copy flag results into accumulator
01:000027AE D485            	  4305:                 add.l d5,d2           * Copy data results into data accumulator
01:000027B0 51C8FFF0        	  4306:                 dbf d0,ADDQ_LOOP1
                            	  4307: 
01:000027B4 0C810000043D    	  4308:                 cmpi.l #$0000043D,d1
01:000027BA 66FE            	  4309:                 bne.s *
01:000027BC 0C8200007F80    	  4310:                 cmpi.l #$00007F80,d2
01:000027C2 66FE            	  4311:                 bne.s *
                            	  4312: 
                            	  4313: 
                            	  4314: *     WORD
01:000027C4 203C000000FF    	  4315:                 move.l #$000000FF,d0    * Loop counter
01:000027CA 7200            	  4316:                 moveq  #$00000000,d1    * Flag results accumulator
01:000027CC 7400            	  4317:                 moveq  #$00000000,d2    * Data results accumulator
01:000027CE 7600            	  4318:                 moveq  #$00000000,d3
01:000027D0 7800            	  4319:                 moveq  #$00000000,d4
01:000027D2 2A3C0000FFF0    	  4320:                 move.l #$0000FFF0,d5
01:000027D8 7C00            	  4321:                 moveq  #$00000000,d6
01:000027DA 7E00            	  4322:                 moveq  #$00000000,d7
01:000027DC 307C0100        	  4323:                 move.l #$00000100,a0
                            	  4324: 
01:000027E0 5A45            	  4325: ADDQ_LOOP2:     addq.w #5,d5
01:000027E2 40C6            	  4326:                 move SR,d6
01:000027E4 02860000001F    	  4327:                 andi.l #$1F,d6        * Isolate flags
01:000027EA D286            	  4328:                 add.l d6,d1           * Copy flag results into accumulator
01:000027EC D485            	  4329:                 add.l d5,d2           * Copy data results into data accumulator
01:000027EE 51C8FFF0        	  4330:                 dbf d0,ADDQ_LOOP2
                            	  4331: 
01:000027F2 0C8100000029    	  4332:                 cmpi.l #$00000029,d1
01:000027F8 66FE            	  4333:                 bne.s *
01:000027FA 0C8200057280    	  4334:                 cmpi.l #$00057280,d2
01:00002800 66FE            	  4335:                 bne.s *
                            	  4336: 
                            	  4337: 
                            	  4338: *     LONG
01:00002802 203C000000FF    	  4339:                 move.l #$000000FF,d0    * Loop counter
01:00002808 7200            	  4340:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000280A 7400            	  4341:                 moveq  #$00000000,d2    * Data results accumulator
01:0000280C 7600            	  4342:                 moveq  #$00000000,d3
01:0000280E 7800            	  4343:                 moveq  #$00000000,d4
01:00002810 7AF0            	  4344:                 move.l #$FFFFFFF0,d5
01:00002812 7C00            	  4345:                 moveq  #$00000000,d6
01:00002814 7E00            	  4346:                 moveq  #$00000000,d7
                            	  4347: 
01:00002816 5285            	  4348: ADDQ_LOOP3:     addq.l #1,d5
01:00002818 40C6            	  4349:                 move SR,d6
01:0000281A 02860000001F    	  4350:                 andi.l #$1F,d6        * Isolate flags
01:00002820 D286            	  4351:                 add.l d6,d1           * Copy flag results into accumulator
01:00002822 D485            	  4352:                 add.l d5,d2           * Copy data results into data accumulator
01:00002824 51C8FFF0        	  4353:                 dbf d0,ADDQ_LOOP3
                            	  4354: 
01:00002828 0C810000008D    	  4355:                 cmpi.l #$0000008D,d1
01:0000282E 66FE            	  4356:                 bne.s *
01:00002830 0C8200007080    	  4357:                 cmpi.l #$00007080,d2
01:00002836 66FE            	  4358:                 bne.s *
                            	  4359: 
                            	  4360: *     Check that Flags are not updated for Address registers
01:00002838 207C0000FFFF    	  4361:                 move.l #$0000FFFF,a0
01:0000283E 44FC0000        	  4362:                 move #$00,CCR         * Clear flags
01:00002842 5E48            	  4363:                 addq.w #$7,a0
01:00002844 65FE            	  4364:                 bcs.s *
                            	  4365: 
01:00002846 4E75            	  4366:                 rts
                            	  4367: 
                            	  4368: 
                            	  4369: 
                            	  4370: *-----------------------------------------------------------
                            	  4371: *-----------------------------------------------------------
                            	  4372: * OPCODE : SUBQ
                            	  4373: *-----------------------------------------------------------
                            	  4374: *-----------------------------------------------------------
                            	  4375: 
                            	  4376: op_SUBQ:
                            	  4377: 
                            	  4378: *     BYTE
01:00002848 203C000000FF    	  4379:                 move.l #$000000FF,d0    * Loop counter
01:0000284E 7200            	  4380:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002850 243C00001234    	  4381:                 move.l #$00001234,d2    * Data results accumulator
01:00002856 7600            	  4382:                 moveq  #$00000000,d3
01:00002858 7800            	  4383:                 moveq  #$00000000,d4
01:0000285A 7A12            	  4384:                 moveq  #$00000012,d5
01:0000285C 7C00            	  4385:                 moveq  #$00000000,d6
01:0000285E 7E00            	  4386:                 moveq  #$00000000,d7
                            	  4387: 
01:00002860 5305            	  4388: SUBQ_LOOP1:     subq.b #1,d5
01:00002862 40C6            	  4389:                 move SR,d6
01:00002864 02860000001F    	  4390:                 andi.l #$1F,d6        * Isolate flags
01:0000286A D286            	  4391:                 add.l d6,d1           * Copy flag results into accumulator
01:0000286C D485            	  4392:                 add.l d5,d2           * Copy data results into data accumulator
01:0000286E 51C8FFF0        	  4393:                 dbf d0,SUBQ_LOOP1
                            	  4394: 
01:00002872 0C8100000417    	  4395:                 cmpi.l #$00000417,d1
01:00002878 66FE            	  4396:                 bne.s *
01:0000287A 0C82000091B4    	  4397:                 cmpi.l #$000091B4,d2
01:00002880 66FE            	  4398:                 bne.s *
                            	  4399: 
                            	  4400: 
                            	  4401: *     WORD
01:00002882 203C000000FF    	  4402:                 move.l #$000000FF,d0    * Loop counter
01:00002888 7200            	  4403:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000288A 7400            	  4404:                 moveq  #$00000000,d2    * Data results accumulator
01:0000288C 7600            	  4405:                 moveq  #$00000000,d3
01:0000288E 7800            	  4406:                 moveq  #$00000000,d4
01:00002890 7A02            	  4407:                 moveq  #$00000002,d5
01:00002892 7C00            	  4408:                 moveq  #$00000000,d6
01:00002894 7E00            	  4409:                 moveq  #$00000000,d7
01:00002896 307C0100        	  4410:                 move.l #$00000100,a0
                            	  4411: 
01:0000289A 5B45            	  4412: SUBQ_LOOP2:     subq.w #5,d5
01:0000289C 40C6            	  4413:                 move SR,d6
01:0000289E 02860000001F    	  4414:                 andi.l #$1F,d6        * Isolate flags
01:000028A4 D286            	  4415:                 add.l d6,d1           * Copy flag results into accumulator
01:000028A6 D485            	  4416:                 add.l d5,d2           * Copy data results into data accumulator
01:000028A8 51C8FFF0        	  4417:                 dbf d0,SUBQ_LOOP2
                            	  4418: 
01:000028AC 0C8100000811    	  4419:                 cmpi.l #$00000811,d1
01:000028B2 66FE            	  4420:                 bne.s *
01:000028B4 0C8200FD7F80    	  4421:                 cmpi.l #$00FD7F80,d2
01:000028BA 66FE            	  4422:                 bne.s *
                            	  4423: 
                            	  4424: 
                            	  4425: *     LONG
01:000028BC 203C000000FF    	  4426:                 move.l #$000000FF,d0    * Loop counter
01:000028C2 7200            	  4427:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028C4 7400            	  4428:                 moveq  #$00000000,d2    * Data results accumulator
01:000028C6 7600            	  4429:                 moveq  #$00000000,d3
01:000028C8 7800            	  4430:                 moveq  #$00000000,d4
01:000028CA 7A07            	  4431:                 moveq  #$00000007,d5
01:000028CC 7C00            	  4432:                 moveq  #$00000000,d6
01:000028CE 7E00            	  4433:                 moveq  #$00000000,d7
                            	  4434: 
01:000028D0 5385            	  4435: SUBQ_LOOP3:     subq.l #1,d5
01:000028D2 40C6            	  4436:                 move SR,d6
01:000028D4 02860000001F    	  4437:                 andi.l #$1F,d6        * Isolate flags
01:000028DA D286            	  4438:                 add.l d6,d1           * Copy flag results into accumulator
01:000028DC D485            	  4439:                 add.l d5,d2           * Copy data results into data accumulator
01:000028DE 51C8FFF0        	  4440:                 dbf d0,SUBQ_LOOP3
                            	  4441: 
01:000028E2 0C81000007DD    	  4442:                 cmpi.l #$000007DD,d1
01:000028E8 66FE            	  4443:                 bne.s *
01:000028EA 0C82FFFF8680    	  4444:                 cmpi.l #$FFFF8680,d2
01:000028F0 66FE            	  4445:                 bne.s *
                            	  4446: 
                            	  4447: *     Check that Flags are not updated for Address registers
01:000028F2 207C0001FFFF    	  4448:                 move.l #$0001FFFF,a0
01:000028F8 44FC0000        	  4449:                 move #$00,CCR         * Clear flags
01:000028FC 5F48            	  4450:                 subq.w #$7,a0
01:000028FE 65FE            	  4451:                 bcs.s *
                            	  4452: 
01:00002900 4E75            	  4453:                 rts
                            	  4454: 
                            	  4455: 
                            	  4456: 
                            	  4457: 
                            	  4458: *-----------------------------------------------------------
                            	  4459: *-----------------------------------------------------------
                            	  4460: * OPCODE : MOVEQ
                            	  4461: *-----------------------------------------------------------
                            	  4462: *-----------------------------------------------------------
                            	  4463: 
                            	  4464: op_MOVEQ:
01:00002902 7000            	  4465:                 moveq  #$00000000,d0
01:00002904 7000            	  4466:                 moveq #$0,d0
01:00002906 66FE            	  4467:                 bne.s *
01:00002908 4A80            	  4468:                 cmpi.l #$00000000,d0
01:0000290A 66FE            	  4469:                 bne.s *
                            	  4470: 
01:0000290C 7000            	  4471:                 moveq  #$00000000,d0
01:0000290E 7080            	  4472:                 moveq #-128,d0
01:00002910 67FE            	  4473:                 beq.s *
01:00002912 6AFE            	  4474:                 bpl.s *
01:00002914 0C80FFFFFF80    	  4475:                 cmpi.l #$FFFFFF80,d0
01:0000291A 66FE            	  4476:                 bne.s *
                            	  4477: 
                            	  4478: 
01:0000291C 4E75            	  4479:                 rts
                            	  4480: 
                            	  4481: 
                            	  4482: *-----------------------------------------------------------
                            	  4483: *-----------------------------------------------------------
                            	  4484: * OPCODE : DIVU
                            	  4485: *-----------------------------------------------------------
                            	  4486: *-----------------------------------------------------------
                            	  4487: 
                            	  4488: op_DIVU:
                            	  4489: 
01:0000291E 203CA5A5A5A5    	  4490:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002924 223C00005A5A    	  4491:                 move.l #$00005a5a,d1        * Initial Divisor
01:0000292A 243CA5A5A5A5    	  4492:                 move.l #$a5a5a5a5,d2
01:00002930 7600            	  4493:                 moveq  #$00000000,d3
01:00002932 7800            	  4494:                 moveq  #$00000000,d4        * Cumulative data results
01:00002934 7A00            	  4495:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002936 7C0E            	  4496:                 move.l #$0000000E,d6       * Inner loop counter
01:00002938 7E1E            	  4497:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4498: 
                            	  4499: 
01:0000293A 80C1            	  4500: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:0000293C 40C3            	  4501:                 move SR,d3
01:0000293E 02830000000C    	  4502:                 andi.l #$0C,d3            * Isolate flags
01:00002944 DA83            	  4503:                 add.l d3,d5               * Copy flag results into accumulator
01:00002946 D880            	  4504:                 add.l d0,d4               * Copy data results into data accumulator
01:00002948 E289            	  4505:                 lsr.l #$1,d1
                            	  4506: 
01:0000294A 51CEFFEE        	  4507:                 dbf d6,DIVU_OUTER1
01:0000294E E28A            	  4508:                 lsr.l #$1,d2
01:00002950 2002            	  4509:                 move.l d2,d0
01:00002952 223C00005A5A    	  4510:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002958 7C0E            	  4511:                 move.l #$0000000E,d6       * Inner loop counter
01:0000295A 51CFFFDE        	  4512:                 dbf d7,DIVU_OUTER1
                            	  4513: 
01:0000295E 0C8492FEDB89    	  4514:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002964 66FE            	  4515:                 bne.s *
                            	  4516: 
01:00002966 0C8500000110    	  4517:                 cmpi.l #$00000110,d5      * Check the Flag results
01:0000296C 66FE            	  4518:                 bne.s *
                            	  4519: 
                            	  4520: 
01:0000296E 4E75            	  4521:                 rts
                            	  4522: 
                            	  4523: 
                            	  4524: 
                            	  4525: *-----------------------------------------------------------
                            	  4526: *-----------------------------------------------------------
                            	  4527: * OPCODE : DIVS
                            	  4528: *-----------------------------------------------------------
                            	  4529: *-----------------------------------------------------------
                            	  4530: 
                            	  4531: op_DIVS:
                            	  4532: 
01:00002970 203CA5A5A5A5    	  4533:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002976 223C00005A5A    	  4534:                 move.l #$00005a5a,d1        * Initial Divisor
01:0000297C 243CA5A5A5A5    	  4535:                 move.l #$a5a5a5a5,d2
01:00002982 7600            	  4536:                 moveq  #$00000000,d3
01:00002984 7800            	  4537:                 moveq  #$00000000,d4        * Cumulative data results
01:00002986 7A00            	  4538:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002988 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
01:0000298A 7E1E            	  4540:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4541: 
                            	  4542: 
01:0000298C 81C1            	  4543: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:0000298E 40C3            	  4544:                 move SR,d3
01:00002990 02830000000C    	  4545:                 andi.l #$0C,d3            * Isolate flags
01:00002996 DA83            	  4546:                 add.l d3,d5               * Copy flag results into accumulator
01:00002998 D880            	  4547:                 add.l d0,d4               * Copy data results into data accumulator
01:0000299A E289            	  4548:                 lsr.l #$1,d1
                            	  4549: 
01:0000299C 51CEFFEE        	  4550:                 dbf d6,DIVS_OUTER1
01:000029A0 E28A            	  4551:                 lsr.l #$1,d2
01:000029A2 2002            	  4552:                 move.l d2,d0
01:000029A4 223C00005A5A    	  4553:                 move.l #$00005a5a,d1       * Initial Divisor
01:000029AA 7C0E            	  4554:                 move.l #$0000000E,d6       * Inner loop counter
01:000029AC 51CFFFDE        	  4555:                 dbf d7,DIVS_OUTER1
                            	  4556: 
01:000029B0 0C844EC5D057    	  4557:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:000029B6 66FE            	  4558:                 bne.s *
                            	  4559: 
01:000029B8 0C8500000038    	  4560:                 cmpi.l #$00000038,d5      * Check the Flag results
01:000029BE 66FE            	  4561:                 bne.s *
                            	  4562: 
                            	  4563: 
01:000029C0 4E75            	  4564:                 rts
                            	  4565: 
                            	  4566: 
                            	  4567: 
                            	  4568: *-----------------------------------------------------------
                            	  4569: *-----------------------------------------------------------
                            	  4570: * OPCODE : OR
                            	  4571: *-----------------------------------------------------------
                            	  4572: *-----------------------------------------------------------
                            	  4573: 
                            	  4574: op_OR:
                            	  4575: 
                            	  4576: *  * <EA> to Register
                            	  4577: 
01:000029C2 203CA5A5A5A5    	  4578:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000029C8 223C8167E123    	  4579:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000029CE 243CA5A5A5A5    	  4580:                 move.l #$a5a5a5a5,d2
01:000029D4 7600            	  4581:                 moveq  #$00000000,d3
01:000029D6 7800            	  4582:                 moveq  #$00000000,d4       * Cumulative data results
01:000029D8 7A00            	  4583:                 moveq  #$00000000,d5       * Cumulative flag results
01:000029DA 7C1E            	  4584:                 move.l #$0000001E,d6       * Inner loop counter
01:000029DC 7E1E            	  4585:                 move.l #$0000001E,d7       * Outer loop counter
01:000029DE 307C0100        	  4586:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4587: 
                            	  4588: 
                            	  4589: OR_OUTER1:
                            	  4590: 
                            	  4591: *     BYTE
01:000029E2 2081            	  4592:                 move.l d1,(a0)
01:000029E4 8010            	  4593:                 or.b (a0),d0
01:000029E6 40C3            	  4594:                 move SR,d3
01:000029E8 02830000000C    	  4595:                 andi.l #$0C,d3            * Isolate flags
01:000029EE DA83            	  4596:                 add.l d3,d5               * Copy flag results into accumulator
01:000029F0 D880            	  4597:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4598: 
                            	  4599: *     WORD
01:000029F2 2081            	  4600:                 move.l d1,(a0)
01:000029F4 8050            	  4601:                 or.w (a0),d0
01:000029F6 40C3            	  4602:                 move SR,d3
01:000029F8 02830000000C    	  4603:                 andi.l #$0C,d3            * Isolate flags
01:000029FE DA83            	  4604:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A00 D880            	  4605:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4606: 
                            	  4607: *     LONG
01:00002A02 2081            	  4608:                 move.l d1,(a0)
01:00002A04 8090            	  4609:                 or.l (a0),d0
01:00002A06 40C3            	  4610:                 move SR,d3
01:00002A08 02830000000F    	  4611:                 andi.l #$0F,d3            * Isolate flags
01:00002A0E DA83            	  4612:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A10 D880            	  4613:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4614: 
                            	  4615: 
01:00002A12 E289            	  4616:                 lsr.l #$1,d1
01:00002A14 51CEFFCC        	  4617:                 dbf d6,OR_OUTER1
01:00002A18 E28A            	  4618:                 lsr.l #$1,d2
01:00002A1A 223C8167E123    	  4619:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002A20 7C1E            	  4620:                 move.l #$0000001E,d6       * Inner loop counter
01:00002A22 51CFFFBE        	  4621:                 dbf d7,OR_OUTER1
                            	  4622: 
01:00002A26 0C8476EAC803    	  4623:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002A2C 66FE            	  4624:                 bne.s *
01:00002A2E 0C8500005A18    	  4625:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002A34 66FE            	  4626:                 bne.s *
                            	  4627: 
                            	  4628: 
                            	  4629: *  * Register to <EA>
                            	  4630: 
01:00002A36 203C86738374    	  4631:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002A3C 223CFC55F2FE    	  4632:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002A42 243C86738374    	  4633:                 move.l #$86738374,d2
01:00002A48 7600            	  4634:                 moveq  #$00000000,d3
01:00002A4A 7800            	  4635:                 moveq  #$00000000,d4       * Cumulative data results
01:00002A4C 7A00            	  4636:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A4E 7C1E            	  4637:                 move.l #$0000001E,d6       * Inner loop counter
01:00002A50 7E1D            	  4638:                 move.l #$0000001D,d7       * Outer loop counter
01:00002A52 307C0100        	  4639:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4640: 
                            	  4641: 
                            	  4642: OR_OUTER2:
                            	  4643: 
                            	  4644: *     BYTE
01:00002A56 2080            	  4645:                 move.l d0,(a0)
01:00002A58 8310            	  4646:                 or.b d1,(a0)
01:00002A5A 40C3            	  4647:                 move SR,d3
01:00002A5C 02830000000C    	  4648:                 andi.l #$0C,d3            * Isolate flags
01:00002A62 DA83            	  4649:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A64 D890            	  4650:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4651: 
                            	  4652: *     WORD
01:00002A66 2080            	  4653:                 move.l d0,(a0)
01:00002A68 8350            	  4654:                 or.w d1,(a0)
01:00002A6A 40C3            	  4655:                 move SR,d3
01:00002A6C 02830000000C    	  4656:                 andi.l #$0C,d3            * Isolate flags
01:00002A72 DA83            	  4657:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A74 D890            	  4658:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4659: 
                            	  4660: *     LONG
01:00002A76 2080            	  4661:                 move.l d0,(a0)
01:00002A78 8390            	  4662:                 or.l d1,(a0)
01:00002A7A 40C3            	  4663:                 move SR,d3
01:00002A7C 02830000000F    	  4664:                 andi.l #$0F,d3            * Isolate flags
01:00002A82 DA83            	  4665:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A84 D890            	  4666:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4667: 
                            	  4668: 
01:00002A86 E289            	  4669:                 lsr.l #$1,d1
01:00002A88 51CEFFCC        	  4670:                 dbf d6,OR_OUTER2
01:00002A8C E28A            	  4671:                 lsr.l #$1,d2
01:00002A8E 223C8167E123    	  4672:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002A94 7C1E            	  4673:                 move.l #$0000001E,d6       * Inner loop counter
01:00002A96 51CFFFBE        	  4674:                 dbf d7,OR_OUTER2
                            	  4675: 
01:00002A9A 0C84FA82B9E4    	  4676:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002AA0 66FE            	  4677:                 bne.s *
01:00002AA2 0C8500005730    	  4678:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002AA8 66FE            	  4679:                 bne.s *
                            	  4680: 
                            	  4681: 
01:00002AAA 4E75            	  4682:                 rts
                            	  4683: 
                            	  4684: 
                            	  4685: 
                            	  4686: *-----------------------------------------------------------
                            	  4687: *-----------------------------------------------------------
                            	  4688: * OPCODE : AND
                            	  4689: *-----------------------------------------------------------
                            	  4690: *-----------------------------------------------------------
                            	  4691: 
                            	  4692: op_AND:
                            	  4693: 
                            	  4694: *  * <EA> to Register
                            	  4695: 
01:00002AAC 203CA5A5A5A5    	  4696:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002AB2 223C8167E123    	  4697:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002AB8 243CA5A5A5A5    	  4698:                 move.l #$a5a5a5a5,d2
01:00002ABE 7600            	  4699:                 moveq  #$00000000,d3
01:00002AC0 7800            	  4700:                 moveq  #$00000000,d4       * Cumulative data results
01:00002AC2 7A00            	  4701:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AC4 7C1E            	  4702:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AC6 7E1E            	  4703:                 move.l #$0000001E,d7       * Outer loop counter
01:00002AC8 307C0100        	  4704:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4705: 
                            	  4706: 
                            	  4707: AND_OUTER1:
                            	  4708: 
                            	  4709: *     BYTE
01:00002ACC 2081            	  4710:                 move.l d1,(a0)
01:00002ACE C010            	  4711:                 and.b (a0),d0
01:00002AD0 40C3            	  4712:                 move SR,d3
01:00002AD2 02830000000C    	  4713:                 andi.l #$0C,d3            * Isolate flags
01:00002AD8 DA83            	  4714:                 add.l d3,d5               * Copy flag results into accumulator
01:00002ADA D880            	  4715:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4716: 
                            	  4717: *     WORD
01:00002ADC 2081            	  4718:                 move.l d1,(a0)
01:00002ADE C050            	  4719:                 and.w (a0),d0
01:00002AE0 40C3            	  4720:                 move SR,d3
01:00002AE2 02830000000C    	  4721:                 andi.l #$0C,d3            * Isolate flags
01:00002AE8 DA83            	  4722:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AEA D880            	  4723:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4724: 
                            	  4725: *     LONG
01:00002AEC 2081            	  4726:                 move.l d1,(a0)
01:00002AEE C090            	  4727:                 and.l (a0),d0
01:00002AF0 40C3            	  4728:                 move SR,d3
01:00002AF2 02830000000F    	  4729:                 andi.l #$0F,d3            * Isolate flags
01:00002AF8 DA83            	  4730:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AFA D880            	  4731:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4732: 
                            	  4733: 
01:00002AFC E289            	  4734:                 lsr.l #$1,d1
01:00002AFE 51CEFFCC        	  4735:                 dbf d6,AND_OUTER1
01:00002B02 E28A            	  4736:                 lsr.l #$1,d2
01:00002B04 223C8167E123    	  4737:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B0A 7C1E            	  4738:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B0C 51CFFFBE        	  4739:                 dbf d7,AND_OUTER1
                            	  4740: 
01:00002B10 0C84CF212883    	  4741:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002B16 66FE            	  4742:                 bne.s *
01:00002B18 0C8500002D10    	  4743:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002B1E 66FE            	  4744:                 bne.s *
                            	  4745: 
                            	  4746: 
                            	  4747: *  * Register to <EA>
                            	  4748: 
01:00002B20 203C86738374    	  4749:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B26 223CFC55F2FE    	  4750:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B2C 243C86738374    	  4751:                 move.l #$86738374,d2
01:00002B32 7600            	  4752:                 moveq  #$00000000,d3
01:00002B34 7800            	  4753:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B36 7A00            	  4754:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B38 7C1E            	  4755:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B3A 7E1D            	  4756:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B3C 307C0100        	  4757:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4758: 
                            	  4759: 
                            	  4760: AND_OUTER2:
                            	  4761: 
                            	  4762: *     BYTE
01:00002B40 2080            	  4763:                 move.l d0,(a0)
01:00002B42 C310            	  4764:                 and.b d1,(a0)
01:00002B44 40C3            	  4765:                 move SR,d3
01:00002B46 02830000000C    	  4766:                 andi.l #$0C,d3            * Isolate flags
01:00002B4C DA83            	  4767:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B4E D890            	  4768:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4769: 
                            	  4770: *     WORD
01:00002B50 2080            	  4771:                 move.l d0,(a0)
01:00002B52 C350            	  4772:                 and.w d1,(a0)
01:00002B54 40C3            	  4773:                 move SR,d3
01:00002B56 02830000000C    	  4774:                 andi.l #$0C,d3            * Isolate flags
01:00002B5C DA83            	  4775:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B5E D890            	  4776:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4777: 
                            	  4778: *     LONG
01:00002B60 2080            	  4779:                 move.l d0,(a0)
01:00002B62 C390            	  4780:                 and.l d1,(a0)
01:00002B64 40C3            	  4781:                 move SR,d3
01:00002B66 02830000000F    	  4782:                 andi.l #$0F,d3            * Isolate flags
01:00002B6C DA83            	  4783:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B6E D890            	  4784:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4785: 
                            	  4786: 
01:00002B70 E289            	  4787:                 lsr.l #$1,d1
01:00002B72 51CEFFCC        	  4788:                 dbf d6,AND_OUTER2
01:00002B76 E28A            	  4789:                 lsr.l #$1,d2
01:00002B78 223C8167E123    	  4790:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B7E 7C1E            	  4791:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B80 51CFFFBE        	  4792:                 dbf d7,AND_OUTER2
                            	  4793: 
01:00002B84 0C844A3DE544    	  4794:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002B8A 66FE            	  4795:                 bne.s *
01:00002B8C 0C85000018E8    	  4796:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002B92 66FE            	  4797:                 bne.s *
                            	  4798: 
                            	  4799: 
01:00002B94 4E75            	  4800:                 rts
                            	  4801: 
                            	  4802: 
                            	  4803: 
                            	  4804: *-----------------------------------------------------------
                            	  4805: *-----------------------------------------------------------
                            	  4806: * OPCODE : EOR
                            	  4807: *-----------------------------------------------------------
                            	  4808: *-----------------------------------------------------------
                            	  4809: 
                            	  4810: op_EOR:
                            	  4811: 
                            	  4812: *  * Register to <EA>
                            	  4813: 
01:00002B96 203C86738374    	  4814:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B9C 223CFC55F2FE    	  4815:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002BA2 243C86738374    	  4816:                 move.l #$86738374,d2
01:00002BA8 7600            	  4817:                 moveq  #$00000000,d3
01:00002BAA 7800            	  4818:                 moveq  #$00000000,d4       * Cumulative data results
01:00002BAC 7A00            	  4819:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002BAE 7C1E            	  4820:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BB0 7E1D            	  4821:                 move.l #$0000001D,d7       * Outer loop counter
01:00002BB2 307C0100        	  4822:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4823: 
                            	  4824: 
                            	  4825: EOR_OUTER2:
                            	  4826: 
                            	  4827: *     BYTE
01:00002BB6 2080            	  4828:                 move.l d0,(a0)
01:00002BB8 B310            	  4829:                 eor.b d1,(a0)
01:00002BBA 40C3            	  4830:                 move SR,d3
01:00002BBC 02830000000C    	  4831:                 andi.l #$0C,d3            * Isolate flags
01:00002BC2 DA83            	  4832:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BC4 D890            	  4833:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4834: 
                            	  4835: *     WORD
01:00002BC6 2080            	  4836:                 move.l d0,(a0)
01:00002BC8 B350            	  4837:                 eor.w d1,(a0)
01:00002BCA 40C3            	  4838:                 move SR,d3
01:00002BCC 02830000000C    	  4839:                 andi.l #$0C,d3            * Isolate flags
01:00002BD2 DA83            	  4840:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BD4 D890            	  4841:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4842: 
                            	  4843: *     LONG
01:00002BD6 2080            	  4844:                 move.l d0,(a0)
01:00002BD8 B390            	  4845:                 eor.l d1,(a0)
01:00002BDA 40C3            	  4846:                 move SR,d3
01:00002BDC 02830000000F    	  4847:                 andi.l #$0F,d3            * Isolate flags
01:00002BE2 DA83            	  4848:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BE4 D890            	  4849:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4850: 
                            	  4851: 
01:00002BE6 E289            	  4852:                 lsr.l #$1,d1
01:00002BE8 51CEFFCC        	  4853:                 dbf d6,EOR_OUTER2
01:00002BEC E28A            	  4854:                 lsr.l #$1,d2
01:00002BEE 223C8167E123    	  4855:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BF4 7C1E            	  4856:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BF6 51CFFFBE        	  4857:                 dbf d7,EOR_OUTER2
                            	  4858: 
01:00002BFA 0C8455C5EB70    	  4859:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002C00 66FE            	  4860:                 bne.s *
01:00002C02 0C8500004430    	  4861:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002C08 66FE            	  4862:                 bne.s *
                            	  4863: 
                            	  4864: 
01:00002C0A 4E75            	  4865:                 rts
                            	  4866: 
                            	  4867: 
                            	  4868: *-----------------------------------------------------------
                            	  4869: *-----------------------------------------------------------
                            	  4870: * OPCODE : CMP
                            	  4871: *-----------------------------------------------------------
                            	  4872: *-----------------------------------------------------------
                            	  4873: 
                            	  4874: op_CMP:
                            	  4875: 
                            	  4876: 
                            	  4877: *  * <EA> to Register
                            	  4878: 
01:00002C0C 203CA5A5A5A5    	  4879:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002C12 223C8167E123    	  4880:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002C18 243CA5A5A5A5    	  4881:                 move.l #$a5a5a5a5,d2
01:00002C1E 7600            	  4882:                 moveq  #$00000000,d3
01:00002C20 7800            	  4883:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C22 7A00            	  4884:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C24 7C1E            	  4885:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C26 7E1E            	  4886:                 move.l #$0000001E,d7       * Outer loop counter
01:00002C28 307C0100        	  4887:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4888: 
                            	  4889: 
                            	  4890: CMP_OUTER1:
                            	  4891: 
                            	  4892: *     BYTE
01:00002C2C 2081            	  4893:                 move.l d1,(a0)
01:00002C2E B010            	  4894:                 cmp.b (a0),d0
01:00002C30 40C3            	  4895:                 move SR,d3
01:00002C32 02830000000F    	  4896:                 andi.l #$0F,d3            * Isolate flags
01:00002C38 DA83            	  4897:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C3A D880            	  4898:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4899: 
                            	  4900: *     WORD
01:00002C3C 2081            	  4901:                 move.l d1,(a0)
01:00002C3E B050            	  4902:                 cmp.w (a0),d0
01:00002C40 40C3            	  4903:                 move SR,d3
01:00002C42 02830000000F    	  4904:                 andi.l #$0F,d3            * Isolate flags
01:00002C48 DA83            	  4905:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C4A D880            	  4906:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4907: 
                            	  4908: *     LONG
01:00002C4C 2081            	  4909:                 move.l d1,(a0)
01:00002C4E B090            	  4910:                 cmp.l (a0),d0
01:00002C50 40C3            	  4911:                 move SR,d3
01:00002C52 02830000000F    	  4912:                 andi.l #$0F,d3            * Isolate flags
01:00002C58 DA83            	  4913:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C5A D880            	  4914:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4915: 
                            	  4916: 
01:00002C5C E289            	  4917:                 lsr.l #$1,d1
01:00002C5E 51CEFFCC        	  4918:                 dbf d6,CMP_OUTER1
01:00002C62 E28A            	  4919:                 lsr.l #$1,d2
01:00002C64 223C8167E123    	  4920:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C6A 7C1E            	  4921:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C6C 51CFFFBE        	  4922:                 dbf d7,CMP_OUTER1
                            	  4923: 
01:00002C70 0C847878712F    	  4924:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002C76 66FE            	  4925:                 bne.s *
01:00002C78 0C8500005502    	  4926:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002C7E 66FE            	  4927:                 bne.s *
                            	  4928: 
                            	  4929: 
                            	  4930: 
01:00002C80 4E75            	  4931:                 rts
                            	  4932: 
                            	  4933: 
                            	  4934: *-----------------------------------------------------------
                            	  4935: *-----------------------------------------------------------
                            	  4936: * OPCODE : CMPA
                            	  4937: *-----------------------------------------------------------
                            	  4938: *-----------------------------------------------------------
                            	  4939: 
                            	  4940: op_CMPA:
                            	  4941: 
                            	  4942: 
                            	  4943: *  * <EA> to Register
                            	  4944: 
01:00002C82 207CA5A5A5A5    	  4945:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002C88 223C8167E123    	  4946:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002C8E 243CA5A5A5A5    	  4947:                 move.l #$a5a5a5a5,d2
01:00002C94 7600            	  4948:                 moveq  #$00000000,d3
01:00002C96 7800            	  4949:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C98 7A00            	  4950:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C9A 7C1E            	  4951:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C9C 7E1E            	  4952:                 move.l #$0000001E,d7       * Outer loop counter
01:00002C9E 327C0100        	  4953:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4954: 
                            	  4955: 
                            	  4956: CMPA_OUTER1:
                            	  4957: 
                            	  4958: 
                            	  4959: *     WORD
01:00002CA2 2281            	  4960:                 move.l d1,(a1)
01:00002CA4 B0D1            	  4961:                 cmpa.w (a1),a0
01:00002CA6 40C3            	  4962:                 move SR,d3
01:00002CA8 02830000000F    	  4963:                 andi.l #$0F,d3            * Isolate flags
01:00002CAE DA83            	  4964:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CB0 D888            	  4965:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4966: 
                            	  4967: *     LONG
01:00002CB2 2281            	  4968:                 move.l d1,(a1)
01:00002CB4 B1D1            	  4969:                 cmpa.l (a1),a0
01:00002CB6 40C3            	  4970:                 move SR,d3
01:00002CB8 02830000000F    	  4971:                 andi.l #$0F,d3            * Isolate flags
01:00002CBE DA83            	  4972:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CC0 D888            	  4973:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4974: 
                            	  4975: 
01:00002CC2 E289            	  4976:                 lsr.l #$1,d1
01:00002CC4 51CEFFDC        	  4977:                 dbf d6,CMPA_OUTER1
01:00002CC8 E28A            	  4978:                 lsr.l #$1,d2
01:00002CCA 223C8167E123    	  4979:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CD0 7C1E            	  4980:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CD2 51CFFFCE        	  4981:                 dbf d7,CMPA_OUTER1
                            	  4982: 
01:00002CD6 0C84A5A5A0CA    	  4983:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002CDC 66FE            	  4984:                 bne.s *
01:00002CDE 0C8500003A7D    	  4985:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002CE4 66FE            	  4986:                 bne.s *
                            	  4987: 
                            	  4988: 
01:00002CE6 4E75            	  4989:                 rts
                            	  4990: 
                            	  4991: 
                            	  4992: 
                            	  4993: *-----------------------------------------------------------
                            	  4994: *-----------------------------------------------------------
                            	  4995: * OPCODE : CMPM
                            	  4996: *-----------------------------------------------------------
                            	  4997: *-----------------------------------------------------------
                            	  4998: 
                            	  4999: op_CMPM:
                            	  5000: 
01:00002CE8 307C0100        	  5001:                 move.l #$00000100,a0       * Address for Data-X
01:00002CEC 327C0200        	  5002:                 move.l #$00000200,a1       * Address for Data-Y
01:00002CF0 7000            	  5003:                 moveq  #$00000000,d0
01:00002CF2 7200            	  5004:                 moveq  #$00000000,d1
01:00002CF4 7400            	  5005:                 moveq  #$00000000,d2
                            	  5006: 
01:00002CF6 20FC11FF5580    	  5007:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002CFC 20FC1111FFFF    	  5008:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002D02 20FC33333333    	  5009:                 move.l #$33333333,(a0)+   * Populate test data
01:00002D08 20FC44444444    	  5010:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5011: 
01:00002D0E 22FC80FF337F    	  5012:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002D14 22FCFFFF1111    	  5013:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002D1A 22FC33333333    	  5014:                 move.l #$33333333,(a1)+   * Populate test data
01:00002D20 22FC44444444    	  5015:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5016: 
01:00002D26 307C0100        	  5017:                 move.l #$00000100,a0       * Address for Data-X
01:00002D2A 327C0200        	  5018:                 move.l #$00000200,a1       * Address for Data-Y
01:00002D2E 7C0F            	  5019:                 move.l #$0000000F,d6       * Loop counter
                            	  5020: 
01:00002D30 B308            	  5021: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002D32 40C3            	  5022:                 move SR,d3
01:00002D34 02830000000F    	  5023:                 andi.l #$0F,d3            * Isolate flags
01:00002D3A D083            	  5024:                 add.l d3,d0               * Copy flag results into accumulator
01:00002D3C 51CEFFF2        	  5025:                 dbf d6,CMPM_LOOP1
                            	  5026: 
                            	  5027: 
01:00002D40 307C0100        	  5028:                 move.l #$00000100,a0       * Address for Data-X
01:00002D44 327C0200        	  5029:                 move.l #$00000200,a1       * Address for Data-Y
01:00002D48 7C07            	  5030:                 moveq  #$00000007,d6       * Loop counter
                            	  5031: 
01:00002D4A B348            	  5032: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002D4C 40C3            	  5033:                 move SR,d3
01:00002D4E 02830000000F    	  5034:                 andi.l #$0F,d3            * Isolate flags
01:00002D54 D283            	  5035:                 add.l d3,d1               * Copy flag results into accumulator
01:00002D56 51CEFFF2        	  5036:                 dbf d6,CMPM_LOOP2
                            	  5037: 
                            	  5038: 
01:00002D5A 307C0100        	  5039:                 move.l #$00000100,a0       * Address for Data-X
01:00002D5E 327C0200        	  5040:                 move.l #$00000200,a1       * Address for Data-Y
01:00002D62 7C03            	  5041:                 moveq  #$00000003,d6       * Loop counter
                            	  5042: 
01:00002D64 B388            	  5043: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002D66 40C3            	  5044:                 move SR,d3
01:00002D68 02830000000F    	  5045:                 andi.l #$0F,d3            * Isolate flags
01:00002D6E D483            	  5046:                 add.l d3,d2               * Copy flag results into accumulator
01:00002D70 51CEFFF2        	  5047:                 dbf d6,CMPM_LOOP3
                            	  5048: 
                            	  5049: 
01:00002D74 0C800000004C    	  5050:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002D7A 66FE            	  5051:                 bne.s *
01:00002D7C 0C8100000024    	  5052:                 cmpi.l #$00000024,d1
01:00002D82 66FE            	  5053:                 bne.s *
01:00002D84 0C8200000012    	  5054:                 cmpi.l #$00000012,d2
01:00002D8A 66FE            	  5055:                 bne.s *
                            	  5056: 
01:00002D8C 4E75            	  5057:                 rts
                            	  5058: 
                            	  5059: 
                            	  5060: *-----------------------------------------------------------
                            	  5061: *-----------------------------------------------------------
                            	  5062: * OPCODE : ADD
                            	  5063: *-----------------------------------------------------------
                            	  5064: *-----------------------------------------------------------
                            	  5065: 
                            	  5066: op_ADD:
                            	  5067: 
                            	  5068: 
                            	  5069: *  * <EA> to Register
01:00002D8E 203CA5A5A5A5    	  5070:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002D94 223C8167E123    	  5071:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D9A 243CA5A5A5A5    	  5072:                 move.l #$a5a5a5a5,d2
01:00002DA0 7600            	  5073:                 moveq  #$00000000,d3
01:00002DA2 7800            	  5074:                 moveq  #$00000000,d4       * Cumulative data results
01:00002DA4 7A00            	  5075:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002DA6 7C1E            	  5076:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DA8 7E1E            	  5077:                 move.l #$0000001E,d7       * Outer loop counter
01:00002DAA 307C0100        	  5078:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5079: 
                            	  5080: 
                            	  5081: ADD_OUTER1:
                            	  5082: 
                            	  5083: *     BYTE
01:00002DAE 2081            	  5084:                 move.l d1,(a0)
01:00002DB0 D010            	  5085:                 add.b (a0),d0
01:00002DB2 40C3            	  5086:                 move SR,d3
01:00002DB4 02830000001F    	  5087:                 andi.l #$1F,d3            * Isolate flags
01:00002DBA DA83            	  5088:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DBC D880            	  5089:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5090: 
                            	  5091: *     WORD
01:00002DBE 2081            	  5092:                 move.l d1,(a0)
01:00002DC0 D050            	  5093:                 add.w (a0),d0
01:00002DC2 40C3            	  5094:                 move SR,d3
01:00002DC4 02830000000C    	  5095:                 andi.l #$0C,d3            * Isolate flags
01:00002DCA DA83            	  5096:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DCC D880            	  5097:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5098: 
                            	  5099: *     LONG
01:00002DCE 2081            	  5100:                 move.l d1,(a0)
01:00002DD0 D090            	  5101:                 add.l (a0),d0
01:00002DD2 40C3            	  5102:                 move SR,d3
01:00002DD4 02830000000F    	  5103:                 andi.l #$0F,d3            * Isolate flags
01:00002DDA DA83            	  5104:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DDC D880            	  5105:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5106: 
                            	  5107: 
01:00002DDE E299            	  5108:                 ror.l #$1,d1
01:00002DE0 51CEFFCC        	  5109:                 dbf d6,ADD_OUTER1
01:00002DE4 E29A            	  5110:                 ror.l #$1,d2
01:00002DE6 223C8167E123    	  5111:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002DEC 7C1E            	  5112:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DEE 51CFFFBE        	  5113:                 dbf d7,ADD_OUTER1
                            	  5114: 
01:00002DF2 0C8423ED428F    	  5115:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002DF8 66FE            	  5116:                 bne.s *
01:00002DFA 0C8500004C96    	  5117:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002E00 66FE            	  5118:                 bne.s *
                            	  5119: 
                            	  5120: 
                            	  5121: *  * Register to <EA>
01:00002E02 203C86738374    	  5122:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002E08 223CFC55F2FE    	  5123:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002E0E 243C86738374    	  5124:                 move.l #$86738374,d2
01:00002E14 7600            	  5125:                 moveq  #$00000000,d3
01:00002E16 7800            	  5126:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E18 7A00            	  5127:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E1A 7C1E            	  5128:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E1C 7E1D            	  5129:                 move.l #$0000001D,d7       * Outer loop counter
01:00002E1E 307C0100        	  5130:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5131: 
                            	  5132: 
                            	  5133: ADD_OUTER2:
                            	  5134: 
                            	  5135: *     BYTE
01:00002E22 2080            	  5136:                 move.l d0,(a0)
01:00002E24 D310            	  5137:                 add.b d1,(a0)
01:00002E26 40C3            	  5138:                 move SR,d3
01:00002E28 02830000000C    	  5139:                 andi.l #$0C,d3            * Isolate flags
01:00002E2E DA83            	  5140:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E30 D890            	  5141:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5142: 
                            	  5143: *     WORD
01:00002E32 2080            	  5144:                 move.l d0,(a0)
01:00002E34 D350            	  5145:                 add.w d1,(a0)
01:00002E36 40C3            	  5146:                 move SR,d3
01:00002E38 02830000001F    	  5147:                 andi.l #$1F,d3            * Isolate flags
01:00002E3E DA83            	  5148:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E40 D890            	  5149:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5150: 
                            	  5151: *     LONG
01:00002E42 2080            	  5152:                 move.l d0,(a0)
01:00002E44 D390            	  5153:                 add.l d1,(a0)
01:00002E46 40C3            	  5154:                 move SR,d3
01:00002E48 02830000000F    	  5155:                 andi.l #$0F,d3            * Isolate flags
01:00002E4E DA83            	  5156:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E50 D890            	  5157:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5158: 
                            	  5159: 
01:00002E52 E299            	  5160:                 ror.l #$1,d1
01:00002E54 51CEFFCC        	  5161:                 dbf d6,ADD_OUTER2
01:00002E58 E29A            	  5162:                 ror.l #$1,d2
01:00002E5A 223C8167E123    	  5163:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002E60 7C1E            	  5164:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E62 51CFFFBE        	  5165:                 dbf d7,ADD_OUTER2
                            	  5166: 
01:00002E66 0C846701B884    	  5167:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002E6C 66FE            	  5168:                 bne.s *
01:00002E6E 0C8500005467    	  5169:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002E74 66FE            	  5170:                 bne.s *
                            	  5171: 
01:00002E76 4E75            	  5172:                 rts
                            	  5173: 
                            	  5174: *-----------------------------------------------------------
                            	  5175: *-----------------------------------------------------------
                            	  5176: * OPCODE : SUB
                            	  5177: *-----------------------------------------------------------
                            	  5178: *-----------------------------------------------------------
                            	  5179: 
                            	  5180: op_SUB:
                            	  5181: 
                            	  5182: *  * <EA> to Register
01:00002E78 203CA5A5A5A5    	  5183:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002E7E 223C8167E123    	  5184:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002E84 243CA5A5A5A5    	  5185:                 move.l #$a5a5a5a5,d2
01:00002E8A 7600            	  5186:                 moveq  #$00000000,d3
01:00002E8C 7800            	  5187:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E8E 7A00            	  5188:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E90 7C1E            	  5189:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E92 7E1E            	  5190:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E94 307C0100        	  5191:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5192: 
                            	  5193: 
                            	  5194: SUB_OUTER1:
                            	  5195: 
                            	  5196: *     BYTE
01:00002E98 2081            	  5197:                 move.l d1,(a0)
01:00002E9A 9010            	  5198:                 sub.b (a0),d0
01:00002E9C 40C3            	  5199:                 move SR,d3
01:00002E9E 02830000001F    	  5200:                 andi.l #$1F,d3            * Isolate flags
01:00002EA4 DA83            	  5201:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EA6 D880            	  5202:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5203: 
                            	  5204: *     WORD
01:00002EA8 2081            	  5205:                 move.l d1,(a0)
01:00002EAA 9050            	  5206:                 sub.w (a0),d0
01:00002EAC 40C3            	  5207:                 move SR,d3
01:00002EAE 02830000000C    	  5208:                 andi.l #$0C,d3            * Isolate flags
01:00002EB4 DA83            	  5209:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EB6 D880            	  5210:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5211: 
                            	  5212: *     LONG
01:00002EB8 2081            	  5213:                 move.l d1,(a0)
01:00002EBA 9090            	  5214:                 sub.l (a0),d0
01:00002EBC 40C3            	  5215:                 move SR,d3
01:00002EBE 02830000000F    	  5216:                 andi.l #$0F,d3            * Isolate flags
01:00002EC4 DA83            	  5217:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EC6 D880            	  5218:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5219: 
                            	  5220: 
01:00002EC8 E299            	  5221:                 ror.l #$1,d1
01:00002ECA 51CEFFCC        	  5222:                 dbf d6,SUB_OUTER1
01:00002ECE E29A            	  5223:                 ror.l #$1,d2
01:00002ED0 223C8167E123    	  5224:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002ED6 7C1E            	  5225:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ED8 51CFFFBE        	  5226:                 dbf d7,SUB_OUTER1
                            	  5227: 
01:00002EDC 0C841A8D14CF    	  5228:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002EE2 66FE            	  5229:                 bne.s *
01:00002EE4 0C8500004FC4    	  5230:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002EEA 66FE            	  5231:                 bne.s *
                            	  5232: 
                            	  5233: 
                            	  5234: *  * Register to <EA>
01:00002EEC 203C86738374    	  5235:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002EF2 223CFC55F2FE    	  5236:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002EF8 243C86738374    	  5237:                 move.l #$86738374,d2
01:00002EFE 7600            	  5238:                 moveq  #$00000000,d3
01:00002F00 7800            	  5239:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F02 7A00            	  5240:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F04 7C1E            	  5241:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F06 7E1D            	  5242:                 move.l #$0000001D,d7       * Outer loop counter
01:00002F08 307C0100        	  5243:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5244: 
                            	  5245: 
                            	  5246: SUB_OUTER2:
                            	  5247: 
                            	  5248: *     BYTE
01:00002F0C 2080            	  5249:                 move.l d0,(a0)
01:00002F0E 9310            	  5250:                 sub.b d1,(a0)
01:00002F10 40C3            	  5251:                 move SR,d3
01:00002F12 02830000000C    	  5252:                 andi.l #$0C,d3            * Isolate flags
01:00002F18 DA83            	  5253:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F1A D890            	  5254:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5255: 
                            	  5256: *     WORD
01:00002F1C 2080            	  5257:                 move.l d0,(a0)
01:00002F1E 9350            	  5258:                 sub.w d1,(a0)
01:00002F20 40C3            	  5259:                 move SR,d3
01:00002F22 02830000001F    	  5260:                 andi.l #$1F,d3            * Isolate flags
01:00002F28 DA83            	  5261:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F2A D890            	  5262:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5263: 
                            	  5264: *     LONG
01:00002F2C 2080            	  5265:                 move.l d0,(a0)
01:00002F2E 9390            	  5266:                 sub.l d1,(a0)
01:00002F30 40C3            	  5267:                 move SR,d3
01:00002F32 02830000000F    	  5268:                 andi.l #$0F,d3            * Isolate flags
01:00002F38 DA83            	  5269:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F3A D890            	  5270:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5271: 
                            	  5272: 
01:00002F3C E299            	  5273:                 ror.l #$1,d1
01:00002F3E 51CEFFCC        	  5274:                 dbf d6,SUB_OUTER2
01:00002F42 E29A            	  5275:                 ror.l #$1,d2
01:00002F44 223C8167E123    	  5276:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F4A 7C1E            	  5277:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F4C 51CFFFBE        	  5278:                 dbf d7,SUB_OUTER2
                            	  5279: 
01:00002F50 0C8436D38BEC    	  5280:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:00002F56 66FE            	  5281:                 bne.s *
01:00002F58 0C85000045A5    	  5282:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00002F5E 66FE            	  5283:                 bne.s *
                            	  5284: 
                            	  5285: 
                            	  5286: 
                            	  5287: 
01:00002F60 4E75            	  5288:                 rts
                            	  5289: 
                            	  5290: 
                            	  5291: 
                            	  5292: *-----------------------------------------------------------
                            	  5293: *-----------------------------------------------------------
                            	  5294: * OPCODE : ADDA
                            	  5295: *-----------------------------------------------------------
                            	  5296: *-----------------------------------------------------------
                            	  5297: 
                            	  5298: op_ADDA:
                            	  5299: 
                            	  5300: *  * <EA> to Register
01:00002F62 203CA5A5A5A5    	  5301:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002F68 223C8167E123    	  5302:                 move.l #$8167E123,d1
01:00002F6E 243CA5A5A5A5    	  5303:                 move.l #$a5a5a5a5,d2
01:00002F74 7600            	  5304:                 moveq  #$00000000,d3
01:00002F76 7800            	  5305:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F78 7A00            	  5306:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F7A 7C1E            	  5307:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F7C 7E1E            	  5308:                 move.l #$0000001E,d7       * Outer loop counter
01:00002F7E 307C0100        	  5309:                 move.l #$00000100,a0       * Address for memory EA operations
01:00002F82 227C8167E123    	  5310:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5311: 
                            	  5312: ADDA_OUTER1:
                            	  5313: 
                            	  5314: *     WORD
                            	  5315: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5316: *                adda.w (a0),a1
                            	  5317: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5318: 
                            	  5319: *     LONG
01:00002F88 2081            	  5320:                 move.l d1,(a0)
01:00002F8A D3D0            	  5321:                 adda.l (a0),a1
01:00002F8C D889            	  5322:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5323: 
01:00002F8E E299            	  5324:                 ror.l #$1,d1
01:00002F90 51CEFFF6        	  5325:                 dbf d6,ADDA_OUTER1
01:00002F94 E299            	  5326:                 ror.l #$1,d1
01:00002F96 2241            	  5327:                 move.l d1,a1
01:00002F98 223C8167E123    	  5328:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F9E 7C1E            	  5329:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FA0 51CFFFE6        	  5330:                 dbf d7,ADDA_OUTER1
                            	  5331: 
01:00002FA4 0C84AC04DB4C    	  5332:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:00002FAA 66FE            	  5333:                 bne.s *
                            	  5334: 
                            	  5335: 
01:00002FAC 4E75            	  5336:                 rts
                            	  5337: 
                            	  5338: 
                            	  5339: *-----------------------------------------------------------
                            	  5340: *-----------------------------------------------------------
                            	  5341: * OPCODE : SUBA
                            	  5342: *-----------------------------------------------------------
                            	  5343: *-----------------------------------------------------------
                            	  5344: 
                            	  5345: op_SUBA:
                            	  5346: 
                            	  5347: *  * <EA> to Register
01:00002FAE 203CA5A5A5A5    	  5348:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002FB4 223C8167E123    	  5349:                 move.l #$8167E123,d1
01:00002FBA 243CA5A5A5A5    	  5350:                 move.l #$a5a5a5a5,d2
01:00002FC0 7600            	  5351:                 moveq  #$00000000,d3
01:00002FC2 7800            	  5352:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FC4 7A00            	  5353:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FC6 7C1E            	  5354:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FC8 7E1E            	  5355:                 move.l #$0000001E,d7       * Outer loop counter
01:00002FCA 307C0100        	  5356:                 move.l #$00000100,a0       * Address for memory EA operations
01:00002FCE 227C8167E123    	  5357:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5358: 
                            	  5359: SUBA_OUTER1:
                            	  5360: 
                            	  5361: *     WORD
                            	  5362: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5363: *                suba.w (a0),a1
                            	  5364: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5365: 
                            	  5366: *     LONG
01:00002FD4 2081            	  5367:                 move.l d1,(a0)
01:00002FD6 93D0            	  5368:                 suba.l (a0),a1
01:00002FD8 D889            	  5369:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5370: 
01:00002FDA E299            	  5371:                 ror.l #$1,d1
01:00002FDC 51CEFFF6        	  5372:                 dbf d6,SUBA_OUTER1
01:00002FE0 E299            	  5373:                 ror.l #$1,d1
01:00002FE2 2241            	  5374:                 move.l d1,a1
01:00002FE4 223C8167E123    	  5375:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FEA 7C1E            	  5376:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FEC 51CFFFE6        	  5377:                 dbf d7,SUBA_OUTER1
                            	  5378: 
01:00002FF0 0C84E1E36D7A    	  5379:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:00002FF6 66FE            	  5380:                 bne.s *
                            	  5381: 
                            	  5382: 
01:00002FF8 4E75            	  5383:                 rts
                            	  5384: 
                            	  5385: 
                            	  5386: 
                            	  5387: *-----------------------------------------------------------
                            	  5388: *-----------------------------------------------------------
                            	  5389: * OPCODE : ADDX
                            	  5390: *-----------------------------------------------------------
                            	  5391: *-----------------------------------------------------------
                            	  5392: 
                            	  5393: op_ADDX:
                            	  5394: 
                            	  5395: 
                            	  5396: *  * Register to Register
01:00002FFA 203CA5A5A5A5    	  5397:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003000 223C8167E123    	  5398:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00003006 243CA5A5A5A5    	  5399:                 move.l #$a5a5a5a5,d2
01:0000300C 7600            	  5400:                 moveq  #$00000000,d3
01:0000300E 7800            	  5401:                 moveq  #$00000000,d4       * Cumulative data results
01:00003010 7A00            	  5402:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003012 7C1E            	  5403:                 move.l #$0000001E,d6       * Inner loop counter
01:00003014 7E1E            	  5404:                 move.l #$0000001E,d7       * Outer loop counter
01:00003016 307C0100        	  5405:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5406: 
                            	  5407: 
                            	  5408: ADDX_OUTER1:
                            	  5409: 
                            	  5410: *     BYTE
01:0000301A 2002            	  5411:                 move.l d2,d0
01:0000301C D101            	  5412:                 addx.b d1,d0
01:0000301E 40C3            	  5413:                 move SR,d3
01:00003020 02830000001F    	  5414:                 andi.l #$1F,d3            * Isolate flags
01:00003026 DA83            	  5415:                 add.l d3,d5               * Copy flag results into accumulator
01:00003028 D880            	  5416:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5417: 
                            	  5418: *     WORD
01:0000302A 2002            	  5419:                 move.l d2,d0
01:0000302C D141            	  5420:                 addx.w d1,d0
01:0000302E 40C3            	  5421:                 move SR,d3
01:00003030 02830000001F    	  5422:                 andi.l #$1F,d3            * Isolate flags
01:00003036 DA83            	  5423:                 add.l d3,d5               * Copy flag results into accumulator
01:00003038 D880            	  5424:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5425: 
                            	  5426: *     LONG
01:0000303A 2002            	  5427:                 move.l d2,d0
01:0000303C D181            	  5428:                 addx.l d1,d0
01:0000303E 40C3            	  5429:                 move SR,d3
01:00003040 02830000001F    	  5430:                 andi.l #$1F,d3            * Isolate flags
01:00003046 DA83            	  5431:                 add.l d3,d5               * Copy flag results into accumulator
01:00003048 D880            	  5432:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5433: 
01:0000304A E299            	  5434:                 ror.l #$1,d1
01:0000304C 51CEFFCC        	  5435:                 dbf d6,ADDX_OUTER1
01:00003050 E29A            	  5436:                 ror.l #$1,d2
01:00003052 223C8167E123    	  5437:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003058 7C1E            	  5438:                 move.l #$0000001E,d6       * Inner loop counter
01:0000305A 51CFFFBE        	  5439:                 dbf d7,ADDX_OUTER1
                            	  5440: 
01:0000305E 0C844E96A4D9    	  5441:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:00003064 66FE            	  5442:                 bne.s *
01:00003066 0C85000085CD    	  5443:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:0000306C 66FE            	  5444:                 bne.s *
                            	  5445: 
                            	  5446: 
                            	  5447: 
                            	  5448: *     -(An),-(An)
                            	  5449: 
01:0000306E 7000            	  5450:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003070 7200            	  5451:                 moveq  #$00000000,d1
01:00003072 7400            	  5452:                 moveq  #$00000000,d2
01:00003074 307C0100        	  5453:                 move.l #$00000100,a0       * Address for Data-X
01:00003078 327C0200        	  5454:                 move.l #$00000200,a1       * Address for Data-Y
01:0000307C 20FC11FF5580    	  5455:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003082 20FC1111FFFF    	  5456:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00003088 20FC33333333    	  5457:                 move.l #$33333333,(a0)+   * Populate test data
01:0000308E 20FC44444444    	  5458:                 move.l #$44444444,(a0)+   * Populate test data
01:00003094 22FC80FF337F    	  5459:                 move.l #$80FF337F,(a1)+   * Populate test data
01:0000309A 22FCFFFF1111    	  5460:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:000030A0 22FC33333333    	  5461:                 move.l #$33333333,(a1)+   * Populate test data
01:000030A6 22FC44444444    	  5462:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5463: 
                            	  5464: 
01:000030AC 7C0F            	  5465:                 move.l #$0000000F,d6       * Loop counter
                            	  5466: 
01:000030AE D308            	  5467: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:000030B0 40C3            	  5468:                 move SR,d3
01:000030B2 02830000000F    	  5469:                 andi.l #$0F,d3            * Isolate flags
01:000030B8 D083            	  5470:                 add.l d3,d0               * Copy flag results into accumulator
01:000030BA D211            	  5471:                 add.b (a1),d1
01:000030BC 51CEFFF0        	  5472:                 dbf d6,ADDX_LOOP3
                            	  5473: 
                            	  5474: 
01:000030C0 307C0110        	  5475:                 move.l #$00000110,a0       * Address for Data-X
01:000030C4 327C0210        	  5476:                 move.l #$00000210,a1       * Address for Data-Y
01:000030C8 7C07            	  5477:                 moveq  #$00000007,d6       * Loop counter
                            	  5478: 
01:000030CA D348            	  5479: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:000030CC 40C3            	  5480:                 move SR,d3
01:000030CE 02830000000F    	  5481:                 andi.l #$0F,d3            * Isolate flags
01:000030D4 D083            	  5482:                 add.l d3,d0               * Copy flag results into accumulator
01:000030D6 D251            	  5483:                 add.w (a1),d1
01:000030D8 51CEFFF0        	  5484:                 dbf d6,ADDX_LOOP4
                            	  5485: 
                            	  5486: 
01:000030DC 307C0110        	  5487:                 move.l #$00000110,a0       * Address for Data-X
01:000030E0 327C0210        	  5488:                 move.l #$00000210,a1       * Address for Data-Y
01:000030E4 7C03            	  5489:                 moveq  #$00000003,d6       * Loop counter
                            	  5490: 
01:000030E6 D388            	  5491: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:000030E8 40C3            	  5492:                 move SR,d3
01:000030EA 02830000000F    	  5493:                 andi.l #$0F,d3            * Isolate flags
01:000030F0 D083            	  5494:                 add.l d3,d0               * Copy flag results into accumulator
01:000030F2 D291            	  5495:                 add.l (a1),d1
01:000030F4 51CEFFF0        	  5496:                 dbf d6,ADDX_LOOP5
                            	  5497: 
                            	  5498: 
01:000030F8 0C8000000095    	  5499:                 cmpi.l #$00000095,d0      * Check the flag results
01:000030FE 66FE            	  5500:                 bne.s *
01:00003100 0C81C812A682    	  5501:                 cmpi.l #$C812A682,d1      * Check the data results
01:00003106 66FE            	  5502:                 bne.s *
                            	  5503: 
01:00003108 4E75            	  5504:                 rts
                            	  5505: 
                            	  5506: 
                            	  5507: 
                            	  5508: 
                            	  5509: *-----------------------------------------------------------
                            	  5510: *-----------------------------------------------------------
                            	  5511: * OPCODE : SUBX
                            	  5512: *-----------------------------------------------------------
                            	  5513: *-----------------------------------------------------------
                            	  5514: 
                            	  5515: op_SUBX:
                            	  5516: 
                            	  5517: 
                            	  5518: *  * Register to Register
01:0000310A 203CA5A5A5A5    	  5519:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003110 223C8167E123    	  5520:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00003116 243CA5A5A5A5    	  5521:                 move.l #$a5a5a5a5,d2
01:0000311C 7600            	  5522:                 moveq  #$00000000,d3
01:0000311E 7800            	  5523:                 moveq  #$00000000,d4       * Cumulative data results
01:00003120 7A00            	  5524:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003122 7C1E            	  5525:                 move.l #$0000001E,d6       * Inner loop counter
01:00003124 7E1E            	  5526:                 move.l #$0000001E,d7       * Outer loop counter
01:00003126 307C0100        	  5527:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5528: 
                            	  5529: 
                            	  5530: SUBX_OUTER1:
                            	  5531: 
                            	  5532: *     BYTE
01:0000312A 2002            	  5533:                 move.l d2,d0
01:0000312C 9101            	  5534:                 subx.b d1,d0
01:0000312E 40C3            	  5535:                 move SR,d3
01:00003130 02830000001F    	  5536:                 andi.l #$1F,d3            * Isolate flags
01:00003136 DA83            	  5537:                 add.l d3,d5               * Copy flag results into accumulator
01:00003138 D880            	  5538:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5539: 
                            	  5540: *     WORD
01:0000313A 2002            	  5541:                 move.l d2,d0
01:0000313C 9141            	  5542:                 subx.w d1,d0
01:0000313E 40C3            	  5543:                 move SR,d3
01:00003140 02830000001F    	  5544:                 andi.l #$1F,d3            * Isolate flags
01:00003146 DA83            	  5545:                 add.l d3,d5               * Copy flag results into accumulator
01:00003148 D880            	  5546:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5547: 
                            	  5548: *     LONG
01:0000314A 2002            	  5549:                 move.l d2,d0
01:0000314C 9181            	  5550:                 subx.l d1,d0
01:0000314E 40C3            	  5551:                 move SR,d3
01:00003150 02830000001F    	  5552:                 andi.l #$1F,d3            * Isolate flags
01:00003156 DA83            	  5553:                 add.l d3,d5               * Copy flag results into accumulator
01:00003158 D880            	  5554:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5555: 
01:0000315A E299            	  5556:                 ror.l #$1,d1
01:0000315C 51CEFFCC        	  5557:                 dbf d6,SUBX_OUTER1
01:00003160 E29A            	  5558:                 ror.l #$1,d2
01:00003162 223C8167E123    	  5559:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003168 7C1E            	  5560:                 move.l #$0000001E,d6       * Inner loop counter
01:0000316A 51CFFFBE        	  5561:                 dbf d7,SUBX_OUTER1
                            	  5562: 
01:0000316E 0C84FCAA913E    	  5563:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:00003174 66FE            	  5564:                 bne.s *
01:00003176 0C8500007E89    	  5565:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:0000317C 66FE            	  5566:                 bne.s *
                            	  5567: 
                            	  5568: 
                            	  5569: 
                            	  5570: *     -(An),-(An)
                            	  5571: 
01:0000317E 7000            	  5572:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003180 7200            	  5573:                 moveq  #$00000000,d1
01:00003182 7400            	  5574:                 moveq  #$00000000,d2
01:00003184 307C0100        	  5575:                 move.l #$00000100,a0       * Address for Data-X
01:00003188 327C0200        	  5576:                 move.l #$00000200,a1       * Address for Data-Y
01:0000318C 20FC11FF5580    	  5577:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003192 20FC1111FFFF    	  5578:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00003198 20FC80FF337F    	  5579:                 move.l #$80FF337F,(a0)+   * Populate test data
01:0000319E 20FC44444444    	  5580:                 move.l #$44444444,(a0)+   * Populate test data
01:000031A4 22FC80FF337F    	  5581:                 move.l #$80FF337F,(a1)+   * Populate test data
01:000031AA 22FC1111FFFF    	  5582:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:000031B0 22FC33333333    	  5583:                 move.l #$33333333,(a1)+   * Populate test data
01:000031B6 22FC5580EECC    	  5584:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5585: 
                            	  5586: 
01:000031BC 7C0F            	  5587:                 move.l #$0000000F,d6       * Loop counter
                            	  5588: 
01:000031BE 9308            	  5589: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:000031C0 40C3            	  5590:                 move SR,d3
01:000031C2 02830000000F    	  5591:                 andi.l #$0F,d3            * Isolate flags
01:000031C8 D083            	  5592:                 add.l d3,d0               * Copy flag results into accumulator
01:000031CA D211            	  5593:                 add.b (a1),d1
01:000031CC 51CEFFF0        	  5594:                 dbf d6,SUBX_LOOP3
                            	  5595: 
                            	  5596: 
01:000031D0 307C0110        	  5597:                 move.l #$00000110,a0       * Address for Data-X
01:000031D4 327C0210        	  5598:                 move.l #$00000210,a1       * Address for Data-Y
01:000031D8 7C07            	  5599:                 moveq  #$00000007,d6       * Loop counter
                            	  5600: 
01:000031DA 9348            	  5601: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:000031DC 40C3            	  5602:                 move SR,d3
01:000031DE 02830000000F    	  5603:                 andi.l #$0F,d3            * Isolate flags
01:000031E4 D083            	  5604:                 add.l d3,d0               * Copy flag results into accumulator
01:000031E6 D251            	  5605:                 add.w (a1),d1
01:000031E8 51CEFFF0        	  5606:                 dbf d6,SUBX_LOOP4
                            	  5607: 
                            	  5608: 
01:000031EC 307C0110        	  5609:                 move.l #$00000110,a0       * Address for Data-X
01:000031F0 327C0210        	  5610:                 move.l #$00000210,a1       * Address for Data-Y
01:000031F4 7C03            	  5611:                 moveq  #$00000003,d6       * Loop counter
                            	  5612: 
01:000031F6 9388            	  5613: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:000031F8 40C3            	  5614:                 move SR,d3
01:000031FA 02830000000F    	  5615:                 andi.l #$0F,d3            * Isolate flags
01:00003200 D083            	  5616:                 add.l d3,d0               * Copy flag results into accumulator
01:00003202 D291            	  5617:                 add.l (a1),d1
01:00003204 51CEFFF0        	  5618:                 dbf d6,SUBX_LOOP5
                            	  5619: 
                            	  5620: 
01:00003208 0C80000000B1    	  5621:                 cmpi.l #$000000B1,d0      * Check the flag results
01:0000320E 66FE            	  5622:                 bne.s *
01:00003210 0C8162C6F417    	  5623:                 cmpi.l #$62C6F417,d1      * Check the data results
01:00003216 66FE            	  5624:                 bne.s *
                            	  5625: 
01:00003218 4E75            	  5626:                 rts
                            	  5627: 
                            	  5628: 
                            	  5629: *-----------------------------------------------------------
                            	  5630: *-----------------------------------------------------------
                            	  5631: * OPCODE : MULU
                            	  5632: *-----------------------------------------------------------
                            	  5633: *-----------------------------------------------------------
                            	  5634: 
                            	  5635: op_MULU:
                            	  5636: 
01:0000321A 203CFE805501    	  5637:                 move.l #$FE805501,d0        * Initial
01:00003220 223C5697EDB6    	  5638:                 move.l #$5697EDB6,d1        * Initial Y
01:00003226 243CFE805501    	  5639:                 move.l #$FE805501,d2
01:0000322C 7600            	  5640:                 moveq  #$00000000,d3
01:0000322E 7800            	  5641:                 moveq  #$00000000,d4        * Cumulative data results
01:00003230 7A00            	  5642:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003232 7C0E            	  5643:                 move.l #$0000000E,d6       * Inner loop counter
01:00003234 7E0E            	  5644:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5645: 
                            	  5646: 
01:00003236 C0C1            	  5647: MULU_OUTER1:    mulu d1,d0
01:00003238 40C3            	  5648:                 move SR,d3
01:0000323A 02830000000C    	  5649:                 andi.l #$0C,d3            * Isolate flags
01:00003240 DA83            	  5650:                 add.l d3,d5               * Copy flag results into accumulator
01:00003242 D880            	  5651:                 add.l d0,d4               * Copy data results into data accumulator
01:00003244 E299            	  5652:                 ror.l #$1,d1
                            	  5653: 
01:00003246 51CEFFEE        	  5654:                 dbf d6,MULU_OUTER1
01:0000324A E29A            	  5655:                 ror.l #$1,d2
01:0000324C 2002            	  5656:                 move.l d2,d0
01:0000324E 7C0E            	  5657:                 move.l #$0000000E,d6       * Inner loop counter
01:00003250 51CFFFE4        	  5658:                 dbf d7,MULU_OUTER1
                            	  5659: 
01:00003254 0C8476FB988C    	  5660:                 cmpi.l #$76FB988C,d4      * Check the data results
01:0000325A 66FE            	  5661:                 bne.s *
                            	  5662: 
01:0000325C 0C8500000170    	  5663:                 cmpi.l #$00000170,d5      * Check the Flag results
01:00003262 66FE            	  5664:                 bne.s *
                            	  5665: 
                            	  5666: 
01:00003264 4E75            	  5667:                 rts
                            	  5668: 
                            	  5669: 
                            	  5670: *-----------------------------------------------------------
                            	  5671: *-----------------------------------------------------------
                            	  5672: * OPCODE : MULS
                            	  5673: *-----------------------------------------------------------
                            	  5674: *-----------------------------------------------------------
                            	  5675: 
                            	  5676: op_MULS:
                            	  5677: 
01:00003266 203CFE805501    	  5678:                 move.l #$FE805501,d0        * Initial
01:0000326C 223C5697EDB6    	  5679:                 move.l #$5697EDB6,d1        * Initial Y
01:00003272 243CFE805501    	  5680:                 move.l #$FE805501,d2
01:00003278 7600            	  5681:                 moveq  #$00000000,d3
01:0000327A 7800            	  5682:                 moveq  #$00000000,d4        * Cumulative data results
01:0000327C 7A00            	  5683:                 moveq  #$00000000,d5       * Cumulative flag results
01:0000327E 7C0E            	  5684:                 move.l #$0000000E,d6       * Inner loop counter
01:00003280 7E0E            	  5685:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5686: 
                            	  5687: 
01:00003282 C1C1            	  5688: MULS_OUTER1:    muls d1,d0
01:00003284 40C3            	  5689:                 move SR,d3
01:00003286 02830000000C    	  5690:                 andi.l #$0C,d3            * Isolate flags
01:0000328C DA83            	  5691:                 add.l d3,d5               * Copy flag results into accumulator
01:0000328E D880            	  5692:                 add.l d0,d4               * Copy data results into data accumulator
01:00003290 E299            	  5693:                 ror.l #$1,d1
                            	  5694: 
01:00003292 51CEFFEE        	  5695:                 dbf d6,MULS_OUTER1
01:00003296 E29A            	  5696:                 ror.l #$1,d2
01:00003298 2002            	  5697:                 move.l d2,d0
01:0000329A 7C0E            	  5698:                 move.l #$0000000E,d6       * Inner loop counter
01:0000329C 51CFFFE4        	  5699:                 dbf d7,MULS_OUTER1
                            	  5700: 
01:000032A0 0C84D4E2988C    	  5701:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:000032A6 66FE            	  5702:                 bne.s *
                            	  5703: 
01:000032A8 0C85000003E0    	  5704:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:000032AE 66FE            	  5705:                 bne.s *
                            	  5706: 
                            	  5707: 
01:000032B0 4E75            	  5708:                 rts
                            	  5709: 
                            	  5710: 
                            	  5711: 
                            	  5712: *-----------------------------------------------------------
                            	  5713: *-----------------------------------------------------------
                            	  5714: * OPCODE : EXG
                            	  5715: *-----------------------------------------------------------
                            	  5716: *-----------------------------------------------------------
                            	  5717: 
                            	  5718: op_EXG:
01:000032B2 223CD1D1D1D1    	  5719:                 move.l #$d1d1d1d1,d1
01:000032B8 243CD2D2D2D2    	  5720:                 move.l #$d2d2d2d2,d2
01:000032BE 263CD3D3D3D3    	  5721:                 move.l #$d3d3d3d3,d3
01:000032C4 227CA1A1A1A1    	  5722:                 move.l #$a1a1a1a1,a1
01:000032CA 247CA2A2A2A2    	  5723:                 move.l #$a2a2a2a2,a2
01:000032D0 267CA3A3A3A3    	  5724:                 move.l #$a3a3a3a3,a3
                            	  5725: 
01:000032D6 C342            	  5726:                 exg d1,d2
01:000032D8 C34A            	  5727:                 exg a1,a2
01:000032DA C78B            	  5728:                 exg d3,a3
                            	  5729: 
01:000032DC 0C81D2D2D2D2    	  5730:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:000032E2 66FE            	  5731:                 bne.s *
01:000032E4 0C82D1D1D1D1    	  5732:                 cmpi.l #$d1d1d1d1,d2
01:000032EA 66FE            	  5733:                 bne.s *
01:000032EC 0C83A3A3A3A3    	  5734:                 cmpi.l #$a3a3a3a3,d3
01:000032F2 66FE            	  5735:                 bne.s *
                            	  5736: 
01:000032F4 2209            	  5737:                 move.l a1,d1
01:000032F6 240A            	  5738:                 move.l a2,d2
01:000032F8 260B            	  5739:                 move.l a3,d3
                            	  5740: 
01:000032FA 0C81A2A2A2A2    	  5741:                 cmpi.l #$a2a2a2a2,d1
01:00003300 66FE            	  5742:                 bne.s *
01:00003302 0C82A1A1A1A1    	  5743:                 cmpi.l #$a1a1a1a1,d2
01:00003308 66FE            	  5744:                 bne.s *
01:0000330A 0C83D3D3D3D3    	  5745:                 cmpi.l #$d3d3d3d3,d3
01:00003310 66FE            	  5746:                 bne.s *
                            	  5747: 
01:00003312 4E75            	  5748:                 rts
                            	  5749: 
                            	  5750: 
                            	  5751: *-----------------------------------------------------------
                            	  5752: *-----------------------------------------------------------
                            	  5753: * OPCODE : ROx
                            	  5754: *-----------------------------------------------------------
                            	  5755: *-----------------------------------------------------------
                            	  5756: 
                            	  5757: *     Subroutine to check and accumulate the flags
01:00003314 40C3            	  5758: ROx_FLAGS:      move SR,d3
01:00003316 02830000000F    	  5759:                 andi.l #$0F,d3            * Isolate flags
01:0000331C DA83            	  5760:                 add.l d3,d5               * Copy flag results into accumulator
01:0000331E 4E75            	  5761:                 rts
                            	  5762: 
                            	  5763: op_ROx:
                            	  5764: 
                            	  5765: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5766: 
                            	  5767: *        BYTE LEFT
01:00003320 203C80018FF1    	  5768:                 move.l #$80018FF1,d0
01:00003326 7A00            	  5769:                 moveq  #$00000000,d5
01:00003328 7C11            	  5770:                 moveq  #$00000011,d6
                            	  5771: ROx_LOOP1:
01:0000332A ED38            	  5772:                 rol.b d6,d0
01:0000332C 61E6            	  5773:                 bsr ROx_FLAGS
01:0000332E 51CEFFFA        	  5774:                 dbf d6,ROx_LOOP1
01:00003332 0C8080018FE3    	  5775:                 cmpi.l #$80018FE3,d0
01:00003338 66FE            	  5776:                 bne.s *
01:0000333A 0C850000006B    	  5777:                 cmpi.l #$0000006B,d5
01:00003340 66FE            	  5778:                 bne.s *
                            	  5779: 
                            	  5780: *        BYTE RIGHT
01:00003342 203C80018FF1    	  5781:                 move.l #$80018FF1,d0
01:00003348 7C12            	  5782:                 moveq  #$00000012,d6
                            	  5783: ROx_LOOP2:
01:0000334A EC38            	  5784:                 ror.b d6,d0
01:0000334C 61C6            	  5785:                 bsr ROx_FLAGS
01:0000334E 51CEFFFA        	  5786:                 dbf d6,ROx_LOOP2
01:00003352 0C8080018F3E    	  5787:                 cmpi.l #$80018F3E,d0
01:00003358 66FE            	  5788:                 bne.s *
01:0000335A 0C85000000C5    	  5789:                 cmpi.l #$000000C5,d5
01:00003360 66FE            	  5790:                 bne.s *
                            	  5791: 
                            	  5792: 
                            	  5793: *        WORD LEFT
01:00003362 203C80018FF1    	  5794:                 move.l #$80018FF1,d0
01:00003368 7C13            	  5795:                 moveq  #$00000013,d6
                            	  5796: ROx_LOOP3:
01:0000336A ED78            	  5797:                 rol.w d6,d0
01:0000336C 61A6            	  5798:                 bsr ROx_FLAGS
01:0000336E 51CEFFFA        	  5799:                 dbf d6,ROx_LOOP3
01:00003372 0C80800163FC    	  5800:                 cmpi.l #$800163FC,d0
01:00003378 66FE            	  5801:                 bne.s *
01:0000337A 0C8500000131    	  5802:                 cmpi.l #$00000131,d5
01:00003380 66FE            	  5803:                 bne.s *
                            	  5804: 
                            	  5805: *        WORD RIGHT
01:00003382 203C80018FF1    	  5806:                 move.l #$80018FF1,d0
01:00003388 7C1E            	  5807:                 move.l #$0000001E,d6
                            	  5808: ROx_LOOP4:
01:0000338A EC78            	  5809:                 ror.w d6,d0
01:0000338C 6186            	  5810:                 bsr ROx_FLAGS
01:0000338E 51CEFFFA        	  5811:                 dbf d6,ROx_LOOP4
01:00003392 0C808001C7F8    	  5812:                 cmpi.l #$8001C7F8,d0
01:00003398 66FE            	  5813:                 bne.s *
01:0000339A 0C85000001DB    	  5814:                 cmpi.l #$000001DB,d5
01:000033A0 66FE            	  5815:                 bne.s *
                            	  5816: 
                            	  5817: 
                            	  5818: *        LONG LEFT
01:000033A2 203C80018FF1    	  5819:                 move.l #$80018FF1,d0
01:000033A8 7C15            	  5820:                 moveq  #$00000015,d6
                            	  5821: ROx_LOOP5:
01:000033AA EDB8            	  5822:                 rol.l d6,d0
01:000033AC 6100FF66        	  5823:                 bsr ROx_FLAGS
01:000033B0 51CEFFF8        	  5824:                 dbf d6,ROx_LOOP5
01:000033B4 0C8000C7F8C0    	  5825:                 cmpi.l #$00C7F8C0,d0
01:000033BA 66FE            	  5826:                 bne.s *
01:000033BC 0C850000021A    	  5827:                 cmpi.l #$0000021A,d5
01:000033C2 66FE            	  5828:                 bne.s *
                            	  5829: 
                            	  5830: *        LONG RIGHT
01:000033C4 203C80018FF1    	  5831:                 move.l #$80018FF1,d0
01:000033CA 7C16            	  5832:                 moveq  #$00000016,d6
                            	  5833: ROx_LOOP6:
01:000033CC ECB8            	  5834:                 ror.l d6,d0
01:000033CE 6100FF44        	  5835:                 bsr ROx_FLAGS
01:000033D2 51CEFFF8        	  5836:                 dbf d6,ROx_LOOP6
01:000033D6 0C80000C7F8C    	  5837:                 cmpi.l #$000C7F8C,d0
01:000033DC 66FE            	  5838:                 bne.s *
01:000033DE 0C8500000250    	  5839:                 cmpi.l #$00000250,d5
01:000033E4 66FE            	  5840:                 bne.s *
                            	  5841: 
                            	  5842: 
                            	  5843: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5844: 
01:000033E6 203C80018FF1    	  5845:                 move.l #$80018FF1,d0
01:000033EC 7A00            	  5846:                 moveq  #$00000000,d5
                            	  5847: 
                            	  5848: *        BYTE LEFT
01:000033EE E318            	  5849:                 rol.b #1,d0
01:000033F0 6100FF22        	  5850:                 bsr ROx_FLAGS
01:000033F4 EB18            	  5851:                 rol.b #5,d0
01:000033F6 6100FF1C        	  5852:                 bsr ROx_FLAGS
01:000033FA EF18            	  5853:                 rol.b #7,d0
01:000033FC 6100FF16        	  5854:                 bsr ROx_FLAGS
01:00003400 E118            	  5855:                 rol.b #8,d0
01:00003402 6100FF10        	  5856:                 bsr ROx_FLAGS
01:00003406 0C8080018F3E    	  5857:                 cmpi.l #$80018F3E,d0
01:0000340C 66FE            	  5858:                 bne.s *
01:0000340E 0C8500000009    	  5859:                 cmpi.l #$00000009,d5
01:00003414 66FE            	  5860:                 bne.s *
                            	  5861: 
                            	  5862: *        BYTE RIGHT
01:00003416 E218            	  5863:                 ror.b #1,d0
01:00003418 6100FEFA        	  5864:                 bsr ROx_FLAGS
01:0000341C EA18            	  5865:                 ror.b #5,d0
01:0000341E 6100FEF4        	  5866:                 bsr ROx_FLAGS
01:00003422 EE18            	  5867:                 ror.b #7,d0
01:00003424 6100FEEE        	  5868:                 bsr ROx_FLAGS
01:00003428 E018            	  5869:                 ror.b #8,d0
01:0000342A 6100FEE8        	  5870:                 bsr ROx_FLAGS
01:0000342E 0C8080018FF1    	  5871:                 cmpi.l #$80018FF1,d0
01:00003434 66FE            	  5872:                 bne.s *
01:00003436 0C8500000024    	  5873:                 cmpi.l #$00000024,d5
01:0000343C 66FE            	  5874:                 bne.s *
                            	  5875: 
                            	  5876: *        WORD LEFT
01:0000343E E358            	  5877:                 rol.w #1,d0
01:00003440 6100FED2        	  5878:                 bsr ROx_FLAGS
01:00003444 EB58            	  5879:                 rol.w #5,d0
01:00003446 6100FECC        	  5880:                 bsr ROx_FLAGS
01:0000344A EF58            	  5881:                 rol.w #7,d0
01:0000344C 6100FEC6        	  5882:                 bsr ROx_FLAGS
01:00003450 E158            	  5883:                 rol.w #8,d0
01:00003452 6100FEC0        	  5884:                 bsr ROx_FLAGS
01:00003456 0C808001FE31    	  5885:                 cmpi.l #$8001FE31,d0
01:0000345C 66FE            	  5886:                 bne.s *
01:0000345E 0C8500000037    	  5887:                 cmpi.l #$00000037,d5
01:00003464 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        WORD RIGHT
01:00003466 E258            	  5891:                 ror.w #1,d0
01:00003468 6100FEAA        	  5892:                 bsr ROx_FLAGS
01:0000346C EA58            	  5893:                 ror.w #5,d0
01:0000346E 6100FEA4        	  5894:                 bsr ROx_FLAGS
01:00003472 EE58            	  5895:                 ror.w #7,d0
01:00003474 6100FE9E        	  5896:                 bsr ROx_FLAGS
01:00003478 E058            	  5897:                 ror.w #8,d0
01:0000347A 6100FE98        	  5898:                 bsr ROx_FLAGS
01:0000347E 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
01:00003484 66FE            	  5900:                 bne.s *
01:00003486 0C850000005B    	  5901:                 cmpi.l #$0000005B,d5
01:0000348C 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        LONG LEFT
01:0000348E E398            	  5905:                 rol.l #1,d0
01:00003490 6100FE82        	  5906:                 bsr ROx_FLAGS
01:00003494 EB98            	  5907:                 rol.l #5,d0
01:00003496 6100FE7C        	  5908:                 bsr ROx_FLAGS
01:0000349A EF98            	  5909:                 rol.l #7,d0
01:0000349C 6100FE76        	  5910:                 bsr ROx_FLAGS
01:000034A0 E198            	  5911:                 rol.l #8,d0
01:000034A2 6100FE70        	  5912:                 bsr ROx_FLAGS
01:000034A6 0C80FE300031    	  5913:                 cmpi.l #$FE300031,d0
01:000034AC 66FE            	  5914:                 bne.s *
01:000034AE 0C8500000065    	  5915:                 cmpi.l #$00000065,d5
01:000034B4 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        LONG RIGHT
01:000034B6 E298            	  5919:                 ror.l #1,d0
01:000034B8 6100FE5A        	  5920:                 bsr ROx_FLAGS
01:000034BC EA98            	  5921:                 ror.l #5,d0
01:000034BE 6100FE54        	  5922:                 bsr ROx_FLAGS
01:000034C2 EE98            	  5923:                 ror.l #7,d0
01:000034C4 6100FE4E        	  5924:                 bsr ROx_FLAGS
01:000034C8 E098            	  5925:                 ror.l #8,d0
01:000034CA 6100FE48        	  5926:                 bsr ROx_FLAGS
01:000034CE 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
01:000034D4 66FE            	  5928:                 bne.s *
01:000034D6 0C8500000080    	  5929:                 cmpi.l #$00000080,d5
01:000034DC 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: 
                            	  5933: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5934: 
01:000034DE 7A00            	  5935:                 moveq  #$00000000,d5
01:000034E0 307C0100        	  5936:                 move.l #$00000100,a0
01:000034E4 30BC8FF1        	  5937:                 move.w #$8FF1,(a0)
                            	  5938: 
                            	  5939: *        WORD LEFT
01:000034E8 E7D0            	  5940:                 rol (a0)
01:000034EA 6100FE28        	  5941:                 bsr ROx_FLAGS
01:000034EE E7D0            	  5942:                 rol (a0)
01:000034F0 6100FE22        	  5943:                 bsr ROx_FLAGS
01:000034F4 E7D0            	  5944:                 rol (a0)
01:000034F6 6100FE1C        	  5945:                 bsr ROx_FLAGS
01:000034FA E7D0            	  5946:                 rol (a0)
01:000034FC 6100FE16        	  5947:                 bsr ROx_FLAGS
01:00003500 3010            	  5948:                 move.w (a0),d0
01:00003502 0C808001FF18    	  5949:                 cmpi.l #$8001FF18,d0
01:00003508 66FE            	  5950:                 bne.s *
01:0000350A 0C8500000009    	  5951:                 cmpi.l #$00000009,d5
01:00003510 66FE            	  5952:                 bne.s *
                            	  5953: 
                            	  5954: *        WORD RIGHT
01:00003512 E6D0            	  5955:                 ror (a0)
01:00003514 6100FDFE        	  5956:                 bsr ROx_FLAGS
01:00003518 E6D0            	  5957:                 ror (a0)
01:0000351A 6100FDF8        	  5958:                 bsr ROx_FLAGS
01:0000351E E6D0            	  5959:                 ror (a0)
01:00003520 6100FDF2        	  5960:                 bsr ROx_FLAGS
01:00003524 E6D0            	  5961:                 ror (a0)
01:00003526 6100FDEC        	  5962:                 bsr ROx_FLAGS
01:0000352A E6D0            	  5963:                 ror (a0)
01:0000352C 6100FDE6        	  5964:                 bsr ROx_FLAGS
01:00003530 E6D0            	  5965:                 ror (a0)
01:00003532 6100FDE0        	  5966:                 bsr ROx_FLAGS
01:00003536 3010            	  5967:                 move.w (a0),d0
01:00003538 0C80800163FC    	  5968:                 cmpi.l #$800163FC,d0
01:0000353E 66FE            	  5969:                 bne.s *
01:00003540 0C850000001B    	  5970:                 cmpi.l #$0000001B,d5
01:00003546 66FE            	  5971:                 bne.s *
                            	  5972: 
01:00003548 4E75            	  5973:                 rts
                            	  5974: 
                            	  5975: 
                            	  5976: 
                            	  5977: *-----------------------------------------------------------
                            	  5978: *-----------------------------------------------------------
                            	  5979: * OPCODE : ROXx
                            	  5980: *-----------------------------------------------------------
                            	  5981: *-----------------------------------------------------------
                            	  5982: 
                            	  5983: *     Subroutine to check and accumulate the flags
01:0000354A 40C3            	  5984: ROXx_FLAGS:     move SR,d3
01:0000354C 02830000000F    	  5985:                 andi.l #$0F,d3            * Isolate flags
01:00003552 DA83            	  5986:                 add.l d3,d5               * Copy flag results into accumulator
01:00003554 4E75            	  5987:                 rts
                            	  5988: 
                            	  5989: op_ROXx:
                            	  5990: 
                            	  5991: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5992: 
                            	  5993: *        BYTE LEFT
01:00003556 203C80018FF1    	  5994:                 move.l #$80018FF1,d0
01:0000355C 7A00            	  5995:                 moveq  #$00000000,d5
01:0000355E 7C11            	  5996:                 moveq  #$00000011,d6
                            	  5997: ROXx_LOOP1:
01:00003560 ED30            	  5998:                 roxl.b d6,d0
01:00003562 61E6            	  5999:                 bsr ROXx_FLAGS
01:00003564 51CEFFFA        	  6000:                 dbf d6,ROXx_LOOP1
01:00003568 0C8080018FD0    	  6001:                 cmpi.l #$80018FD0,d0
01:0000356E 66FE            	  6002:                 bne.s *
01:00003570 0C8500000042    	  6003:                 cmpi.l #$00000042,d5
01:00003576 66FE            	  6004:                 bne.s *
                            	  6005: 
                            	  6006: *        BYTE RIGHT
01:00003578 203C80018FF1    	  6007:                 move.l #$80018FF1,d0
01:0000357E 7C12            	  6008:                 moveq  #$00000012,d6
                            	  6009: ROXx_LOOP2:
01:00003580 EC30            	  6010:                 roxr.b d6,d0
01:00003582 61C6            	  6011:                 bsr ROXx_FLAGS
01:00003584 51CEFFFA        	  6012:                 dbf d6,ROXx_LOOP2
01:00003588 0C8080018F51    	  6013:                 cmpi.l #$80018F51,d0
01:0000358E 66FE            	  6014:                 bne.s *
01:00003590 0C850000009C    	  6015:                 cmpi.l #$0000009C,d5
01:00003596 66FE            	  6016:                 bne.s *
                            	  6017: 
                            	  6018: 
                            	  6019: *        WORD LEFT
01:00003598 203C80018FF1    	  6020:                 move.l #$80018FF1,d0
01:0000359E 7C13            	  6021:                 moveq  #$00000013,d6
                            	  6022: ROXx_LOOP3:
01:000035A0 ED70            	  6023:                 roxl.w d6,d0
01:000035A2 61A6            	  6024:                 bsr ROXx_FLAGS
01:000035A4 51CEFFFA        	  6025:                 dbf d6,ROXx_LOOP3
01:000035A8 0C8080013980    	  6026:                 cmpi.l #$80013980,d0
01:000035AE 66FE            	  6027:                 bne.s *
01:000035B0 0C85000000C9    	  6028:                 cmpi.l #$000000C9,d5
01:000035B6 66FE            	  6029:                 bne.s *
                            	  6030: 
                            	  6031: *        WORD RIGHT
01:000035B8 203C80018FF1    	  6032:                 move.l #$80018FF1,d0
01:000035BE 7C1E            	  6033:                 move.l #$0000001E,d6
                            	  6034: ROXx_LOOP4:
01:000035C0 EC70            	  6035:                 roxr.w d6,d0
01:000035C2 6186            	  6036:                 bsr ROXx_FLAGS
01:000035C4 51CEFFFA        	  6037:                 dbf d6,ROXx_LOOP4
01:000035C8 0C8080010A1D    	  6038:                 cmpi.l #$80010A1D,d0
01:000035CE 66FE            	  6039:                 bne.s *
01:000035D0 0C850000014D    	  6040:                 cmpi.l #$0000014D,d5
01:000035D6 66FE            	  6041:                 bne.s *
                            	  6042: 
                            	  6043: 
                            	  6044: *        LONG LEFT
01:000035D8 203C80018FF1    	  6045:                 move.l #$80018FF1,d0
01:000035DE 7C15            	  6046:                 moveq  #$00000015,d6
                            	  6047: ROXx_LOOP5:
01:000035E0 EDB0            	  6048:                 roxl.l d6,d0
01:000035E2 6100FF66        	  6049:                 bsr ROXx_FLAGS
01:000035E6 51CEFFF8        	  6050:                 dbf d6,ROXx_LOOP5
01:000035EA 0C80800185D0    	  6051:                 cmpi.l #$800185D0,d0
01:000035F0 66FE            	  6052:                 bne.s *
01:000035F2 0C85000001A1    	  6053:                 cmpi.l #$000001A1,d5
01:000035F8 66FE            	  6054:                 bne.s *
                            	  6055: 
                            	  6056: *        LONG RIGHT
01:000035FA 203C80018FF1    	  6057:                 move.l #$80018FF1,d0
01:00003600 7C16            	  6058:                 moveq  #$00000016,d6
                            	  6059: ROXx_LOOP6:
01:00003602 ECB0            	  6060:                 roxr.l d6,d0
01:00003604 6100FF44        	  6061:                 bsr ROXx_FLAGS
01:00003608 51CEFFF8        	  6062:                 dbf d6,ROXx_LOOP6
01:0000360C 0C80082D8200    	  6063:                 cmpi.l #$082D8200,d0
01:00003612 66FE            	  6064:                 bne.s *
01:00003614 0C85000001DE    	  6065:                 cmpi.l #$000001DE,d5
01:0000361A 66FE            	  6066:                 bne.s *
                            	  6067: 
                            	  6068: 
                            	  6069: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6070: 
01:0000361C 203C80018FF1    	  6071:                 move.l #$80018FF1,d0
01:00003622 7A00            	  6072:                 moveq  #$00000000,d5
                            	  6073: 
                            	  6074: *        BYTE LEFT
01:00003624 E310            	  6075:                 roxl.b #1,d0
01:00003626 6100FF22        	  6076:                 bsr ROXx_FLAGS
01:0000362A EB10            	  6077:                 roxl.b #5,d0
01:0000362C 6100FF1C        	  6078:                 bsr ROXx_FLAGS
01:00003630 EF10            	  6079:                 roxl.b #7,d0
01:00003632 6100FF16        	  6080:                 bsr ROXx_FLAGS
01:00003636 E110            	  6081:                 roxl.b #8,d0
01:00003638 6100FF10        	  6082:                 bsr ROXx_FLAGS
01:0000363C 0C8080018F09    	  6083:                 cmpi.l #$80018F09,d0
01:00003642 66FE            	  6084:                 bne.s *
01:00003644 0C850000000B    	  6085:                 cmpi.l #$0000000B,d5
01:0000364A 66FE            	  6086:                 bne.s *
                            	  6087: 
                            	  6088: *        BYTE RIGHT
01:0000364C E210            	  6089:                 roxr.b #1,d0
01:0000364E 6100FEFA        	  6090:                 bsr ROXx_FLAGS
01:00003652 EA10            	  6091:                 roxr.b #5,d0
01:00003654 6100FEF4        	  6092:                 bsr ROXx_FLAGS
01:00003658 EE10            	  6093:                 roxr.b #7,d0
01:0000365A 6100FEEE        	  6094:                 bsr ROXx_FLAGS
01:0000365E E010            	  6095:                 roxr.b #8,d0
01:00003660 6100FEE8        	  6096:                 bsr ROXx_FLAGS
01:00003664 0C8080018F00    	  6097:                 cmpi.l #$80018F00,d0
01:0000366A 66FE            	  6098:                 bne.s *
01:0000366C 0C8500000015    	  6099:                 cmpi.l #$00000015,d5
01:00003672 66FE            	  6100:                 bne.s *
                            	  6101: 
                            	  6102: *        WORD LEFT
01:00003674 E350            	  6103:                 roxl.w #1,d0
01:00003676 6100FED2        	  6104:                 bsr ROXx_FLAGS
01:0000367A EB50            	  6105:                 roxl.w #5,d0
01:0000367C 6100FECC        	  6106:                 bsr ROXx_FLAGS
01:00003680 EF50            	  6107:                 roxl.w #7,d0
01:00003682 6100FEC6        	  6108:                 bsr ROXx_FLAGS
01:00003686 E150            	  6109:                 roxl.w #8,d0
01:00003688 6100FEC0        	  6110:                 bsr ROXx_FLAGS
01:0000368C 0C808001B000    	  6111:                 cmpi.l #$8001B000,d0
01:00003692 66FE            	  6112:                 bne.s *
01:00003694 0C8500000027    	  6113:                 cmpi.l #$00000027,d5
01:0000369A 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        WORD RIGHT
01:0000369C E250            	  6117:                 roxr.w #1,d0
01:0000369E 6100FEAA        	  6118:                 bsr ROXx_FLAGS
01:000036A2 EA50            	  6119:                 roxr.w #5,d0
01:000036A4 6100FEA4        	  6120:                 bsr ROXx_FLAGS
01:000036A8 EE50            	  6121:                 roxr.w #7,d0
01:000036AA 6100FE9E        	  6122:                 bsr ROXx_FLAGS
01:000036AE E050            	  6123:                 roxr.w #8,d0
01:000036B0 6100FE98        	  6124:                 bsr ROXx_FLAGS
01:000036B4 0C8080010A00    	  6125:                 cmpi.l #$80010A00,d0
01:000036BA 66FE            	  6126:                 bne.s *
01:000036BC 0C8500000028    	  6127:                 cmpi.l #$00000028,d5
01:000036C2 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        LONG LEFT
01:000036C4 E390            	  6131:                 roxl.l #1,d0
01:000036C6 6100FE82        	  6132:                 bsr ROXx_FLAGS
01:000036CA EB90            	  6133:                 roxl.l #5,d0
01:000036CC 6100FE7C        	  6134:                 bsr ROXx_FLAGS
01:000036D0 EF90            	  6135:                 roxl.l #7,d0
01:000036D2 6100FE76        	  6136:                 bsr ROXx_FLAGS
01:000036D6 E190            	  6137:                 roxl.l #8,d0
01:000036D8 6100FE70        	  6138:                 bsr ROXx_FLAGS
01:000036DC 0C8040000010    	  6139:                 cmpi.l #$40000010,d0
01:000036E2 66FE            	  6140:                 bne.s *
01:000036E4 0C850000002A    	  6141:                 cmpi.l #$0000002A,d5
01:000036EA 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        LONG RIGHT
01:000036EC E290            	  6145:                 roxr.l #1,d0
01:000036EE 6100FE5A        	  6146:                 bsr ROXx_FLAGS
01:000036F2 EA90            	  6147:                 roxr.l #5,d0
01:000036F4 6100FE54        	  6148:                 bsr ROXx_FLAGS
01:000036F8 EE90            	  6149:                 roxr.l #7,d0
01:000036FA 6100FE4E        	  6150:                 bsr ROXx_FLAGS
01:000036FE E090            	  6151:                 roxr.l #8,d0
01:00003700 6100FE48        	  6152:                 bsr ROXx_FLAGS
01:00003704 0C8000010200    	  6153:                 cmpi.l #$00010200,d0
01:0000370A 66FE            	  6154:                 bne.s *
01:0000370C 0C8500000032    	  6155:                 cmpi.l #$00000032,d5
01:00003712 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: 
                            	  6159: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6160: 
01:00003714 7A00            	  6161:                 moveq  #$00000000,d5
01:00003716 307C0100        	  6162:                 move.l #$00000100,a0
01:0000371A 30BC8FF1        	  6163:                 move.w #$8FF1,(a0)
                            	  6164: 
                            	  6165: *        WORD LEFT
01:0000371E E5D0            	  6166:                 roxl (a0)
01:00003720 6100FE28        	  6167:                 bsr ROXx_FLAGS
01:00003724 E5D0            	  6168:                 roxl (a0)
01:00003726 6100FE22        	  6169:                 bsr ROXx_FLAGS
01:0000372A E5D0            	  6170:                 roxl (a0)
01:0000372C 6100FE1C        	  6171:                 bsr ROXx_FLAGS
01:00003730 E5D0            	  6172:                 roxl (a0)
01:00003732 6100FE16        	  6173:                 bsr ROXx_FLAGS
01:00003736 3010            	  6174:                 move.w (a0),d0
01:00003738 0C800001FF10    	  6175:                 cmpi.l #$0001FF10,d0
01:0000373E 66FE            	  6176:                 bne.s *
01:00003740 0C8500000009    	  6177:                 cmpi.l #$00000009,d5
01:00003746 66FE            	  6178:                 bne.s *
                            	  6179: 
                            	  6180: *        WORD RIGHT
01:00003748 E4D0            	  6181:                 roxr (a0)
01:0000374A 6100FDFE        	  6182:                 bsr ROXx_FLAGS
01:0000374E E4D0            	  6183:                 roxr (a0)
01:00003750 6100FDF8        	  6184:                 bsr ROXx_FLAGS
01:00003754 E4D0            	  6185:                 roxr (a0)
01:00003756 6100FDF2        	  6186:                 bsr ROXx_FLAGS
01:0000375A E4D0            	  6187:                 roxr (a0)
01:0000375C 6100FDEC        	  6188:                 bsr ROXx_FLAGS
01:00003760 E4D0            	  6189:                 roxr (a0)
01:00003762 6100FDE6        	  6190:                 bsr ROXx_FLAGS
01:00003766 E4D0            	  6191:                 roxr (a0)
01:00003768 6100FDE0        	  6192:                 bsr ROXx_FLAGS
01:0000376C 3010            	  6193:                 move.w (a0),d0
01:0000376E 0C80000103FC    	  6194:                 cmpi.l #$000103FC,d0
01:00003774 66FE            	  6195:                 bne.s *
01:00003776 0C850000000A    	  6196:                 cmpi.l #$0000000A,d5
01:0000377C 66FE            	  6197:                 bne.s *
                            	  6198: 
01:0000377E 4E75            	  6199:                 rts
                            	  6200: 
                            	  6201: 
                            	  6202: 
                            	  6203: 
                            	  6204: *-----------------------------------------------------------
                            	  6205: *-----------------------------------------------------------
                            	  6206: * OPCODE : SHIFTS
                            	  6207: *-----------------------------------------------------------
                            	  6208: *-----------------------------------------------------------
                            	  6209: 
                            	  6210: *     Subroutine to check and accumulate the flags
01:00003780 40C3            	  6211: SHIFTS_FLAGS:   move SR,d3
01:00003782 02830000000F    	  6212:                 andi.l #$0F,d3            * Isolate flags
01:00003788 DA83            	  6213:                 add.l d3,d5               * Copy flag results into accumulator
01:0000378A 4E75            	  6214:                 rts
                            	  6215: 
                            	  6216: op_SHIFTS:
                            	  6217: 
                            	  6218: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6219: 
                            	  6220: *        BYTE LEFT
01:0000378C 203C80018F81    	  6221:                 move.l #$80018F81,d0
01:00003792 7A00            	  6222:                 moveq  #$00000000,d5
01:00003794 7C02            	  6223:                 moveq  #$00000002,d6
                            	  6224: SHIFTS_LOOP1:
01:00003796 ED20            	  6225:                 asl.b d6,d0
01:00003798 61E6            	  6226:                 bsr SHIFTS_FLAGS
01:0000379A 51CEFFFA        	  6227:                 dbf d6,SHIFTS_LOOP1
01:0000379E 0C8080018F08    	  6228:                 cmpi.l #$80018F08,d0
01:000037A4 66FE            	  6229:                 bne.s *
01:000037A6 0C8500000002    	  6230:                 cmpi.l #$00000002,d5
01:000037AC 66FE            	  6231:                 bne.s *
                            	  6232: 
                            	  6233: *        BYTE RIGHT
01:000037AE 203C80018F81    	  6234:                 move.l #$80018F81,d0
01:000037B4 7C02            	  6235:                 moveq  #$00000002,d6
                            	  6236: SHIFTS_LOOP2:
01:000037B6 EC20            	  6237:                 asr.b d6,d0
01:000037B8 61C6            	  6238:                 bsr SHIFTS_FLAGS
01:000037BA 51CEFFFA        	  6239:                 dbf d6,SHIFTS_LOOP2
01:000037BE 0C8080018FF0    	  6240:                 cmpi.l #$80018FF0,d0
01:000037C4 66FE            	  6241:                 bne.s *
01:000037C6 0C850000001A    	  6242:                 cmpi.l #$0000001A,d5
01:000037CC 66FE            	  6243:                 bne.s *
                            	  6244: 
                            	  6245: 
                            	  6246: *        WORD LEFT
01:000037CE 203C80018FF1    	  6247:                 move.l #$80018FF1,d0
01:000037D4 7C02            	  6248:                 moveq  #$00000002,d6
                            	  6249: SHIFTS_LOOP3:
01:000037D6 ED60            	  6250:                 asl.w d6,d0
01:000037D8 61A6            	  6251:                 bsr SHIFTS_FLAGS
01:000037DA 51CEFFFA        	  6252:                 dbf d6,SHIFTS_LOOP3
01:000037DE 0C8080017F88    	  6253:                 cmpi.l #$80017F88,d0
01:000037E4 66FE            	  6254:                 bne.s *
01:000037E6 0C850000001C    	  6255:                 cmpi.l #$0000001C,d5
01:000037EC 66FE            	  6256:                 bne.s *
                            	  6257: 
                            	  6258: *        WORD RIGHT
01:000037EE 203C80018FF1    	  6259:                 move.l #$80018FF1,d0
01:000037F4 7C02            	  6260:                 moveq  #$00000002,d6
                            	  6261: SHIFTS_LOOP4:
01:000037F6 EC60            	  6262:                 asr.w d6,d0
01:000037F8 6186            	  6263:                 bsr SHIFTS_FLAGS
01:000037FA 51CEFFFA        	  6264:                 dbf d6,SHIFTS_LOOP4
01:000037FE 0C808001F1FE    	  6265:                 cmpi.l #$8001F1FE,d0
01:00003804 66FE            	  6266:                 bne.s *
01:00003806 0C8500000034    	  6267:                 cmpi.l #$00000034,d5
01:0000380C 66FE            	  6268:                 bne.s *
                            	  6269: 
                            	  6270: 
                            	  6271: *        LONG LEFT
01:0000380E 203C80018FF1    	  6272:                 move.l #$80018FF1,d0
01:00003814 7C02            	  6273:                 moveq  #$00000002,d6
                            	  6274: SHIFTS_LOOP5:
01:00003816 EDA0            	  6275:                 asl.l d6,d0
01:00003818 6100FF66        	  6276:                 bsr SHIFTS_FLAGS
01:0000381C 51CEFFF8        	  6277:                 dbf d6,SHIFTS_LOOP5
01:00003820 0C80000C7F88    	  6278:                 cmpi.l #$000C7F88,d0
01:00003826 66FE            	  6279:                 bne.s *
01:00003828 0C8500000036    	  6280:                 cmpi.l #$00000036,d5
01:0000382E 66FE            	  6281:                 bne.s *
                            	  6282: 
                            	  6283: *        LONG RIGHT
01:00003830 203C80018FF1    	  6284:                 move.l #$80018FF1,d0
01:00003836 7C02            	  6285:                 moveq  #$00000002,d6
                            	  6286: SHIFTS_LOOP6:
01:00003838 ECA0            	  6287:                 asr.l d6,d0
01:0000383A 6100FF44        	  6288:                 bsr SHIFTS_FLAGS
01:0000383E 51CEFFF8        	  6289:                 dbf d6,SHIFTS_LOOP6
01:00003842 0C80F00031FE    	  6290:                 cmpi.l #$F00031FE,d0
01:00003848 66FE            	  6291:                 bne.s *
01:0000384A 0C850000004E    	  6292:                 cmpi.l #$0000004E,d5
01:00003850 66FE            	  6293:                 bne.s *
                            	  6294: 
                            	  6295: 
                            	  6296: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6297: 
01:00003852 203C80018FF1    	  6298:                 move.l #$80018FF1,d0
01:00003858 7A00            	  6299:                 moveq  #$00000000,d5
                            	  6300: 
                            	  6301: *        BYTE LEFT
01:0000385A D000            	  6302:                 asl.b #1,d0
01:0000385C 6100FF22        	  6303:                 bsr SHIFTS_FLAGS
01:00003860 E500            	  6304:                 asl.b #2,d0
01:00003862 6100FF1C        	  6305:                 bsr SHIFTS_FLAGS
01:00003866 D000            	  6306:                 asl.b #1,d0
01:00003868 6100FF16        	  6307:                 bsr SHIFTS_FLAGS
01:0000386C E700            	  6308:                 asl.b #3,d0
01:0000386E 6100FF10        	  6309:                 bsr SHIFTS_FLAGS
01:00003872 0C8080018F80    	  6310:                 cmpi.l #$80018F80,d0
01:00003878 66FE            	  6311:                 bne.s *
01:0000387A 0C850000001F    	  6312:                 cmpi.l #$0000001F,d5
01:00003880 66FE            	  6313:                 bne.s *
                            	  6314: 
                            	  6315: *        BYTE RIGHT
01:00003882 E200            	  6316:                 asr.b #1,d0
01:00003884 6100FEFA        	  6317:                 bsr SHIFTS_FLAGS
01:00003888 E400            	  6318:                 asr.b #2,d0
01:0000388A 6100FEF4        	  6319:                 bsr SHIFTS_FLAGS
01:0000388E E600            	  6320:                 asr.b #3,d0
01:00003890 6100FEEE        	  6321:                 bsr SHIFTS_FLAGS
01:00003894 E200            	  6322:                 asr.b #1,d0
01:00003896 6100FEE8        	  6323:                 bsr SHIFTS_FLAGS
01:0000389A 0C8080018FFF    	  6324:                 cmpi.l #$80018FFF,d0
01:000038A0 66FE            	  6325:                 bne.s *
01:000038A2 0C850000003F    	  6326:                 cmpi.l #$0000003F,d5
01:000038A8 66FE            	  6327:                 bne.s *
                            	  6328: 
                            	  6329: *        WORD LEFT
01:000038AA D040            	  6330:                 asl.w #1,d0
01:000038AC 6100FED2        	  6331:                 bsr SHIFTS_FLAGS
01:000038B0 E540            	  6332:                 asl.w #2,d0
01:000038B2 6100FECC        	  6333:                 bsr SHIFTS_FLAGS
01:000038B6 E740            	  6334:                 asl.w #3,d0
01:000038B8 6100FEC6        	  6335:                 bsr SHIFTS_FLAGS
01:000038BC EB40            	  6336:                 asl.w #5,d0
01:000038BE 6100FEC0        	  6337:                 bsr SHIFTS_FLAGS
01:000038C2 0C808001F800    	  6338:                 cmpi.l #$8001F800,d0
01:000038C8 66FE            	  6339:                 bne.s *
01:000038CA 0C8500000056    	  6340:                 cmpi.l #$00000056,d5
01:000038D0 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        WORD RIGHT
01:000038D2 EA40            	  6344:                 asr.w #5,d0
01:000038D4 6100FEAA        	  6345:                 bsr SHIFTS_FLAGS
01:000038D8 E240            	  6346:                 asr.w #1,d0
01:000038DA 6100FEA4        	  6347:                 bsr SHIFTS_FLAGS
01:000038DE E440            	  6348:                 asr.w #2,d0
01:000038E0 6100FE9E        	  6349:                 bsr SHIFTS_FLAGS
01:000038E4 E840            	  6350:                 asr.w #4,d0
01:000038E6 6100FE98        	  6351:                 bsr SHIFTS_FLAGS
01:000038EA 0C808001FFFF    	  6352:                 cmpi.l #$8001FFFF,d0
01:000038F0 66FE            	  6353:                 bne.s *
01:000038F2 0C8500000077    	  6354:                 cmpi.l #$00000077,d5
01:000038F8 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        LONG LEFT
01:000038FA 203C80018FF1    	  6358:                 move.l #$80018FF1,d0
01:00003900 D080            	  6359:                 asl.l #1,d0
01:00003902 6100FE7C        	  6360:                 bsr SHIFTS_FLAGS
01:00003906 E580            	  6361:                 asl.l #2,d0
01:00003908 6100FE76        	  6362:                 bsr SHIFTS_FLAGS
01:0000390C EF80            	  6363:                 asl.l #7,d0
01:0000390E 6100FE70        	  6364:                 bsr SHIFTS_FLAGS
01:00003912 E980            	  6365:                 asl.l #4,d0
01:00003914 6100FE6A        	  6366:                 bsr SHIFTS_FLAGS
01:00003918 0C8063FC4000    	  6367:                 cmpi.l #$63FC4000,d0
01:0000391E 66FE            	  6368:                 bne.s *
01:00003920 0C850000007A    	  6369:                 cmpi.l #$0000007A,d5
01:00003926 66FE            	  6370:                 bne.s *
                            	  6371: 
                            	  6372: *        LONG RIGHT
01:00003928 203C80018FF1    	  6373:                 move.l #$80018FF1,d0
01:0000392E E280            	  6374:                 asr.l #1,d0
01:00003930 6100FE4E        	  6375:                 bsr SHIFTS_FLAGS
01:00003934 EA80            	  6376:                 asr.l #5,d0
01:00003936 6100FE48        	  6377:                 bsr SHIFTS_FLAGS
01:0000393A EE80            	  6378:                 asr.l #7,d0
01:0000393C 6100FE42        	  6379:                 bsr SHIFTS_FLAGS
01:00003940 E080            	  6380:                 asr.l #8,d0
01:00003942 6100FE3C        	  6381:                 bsr SHIFTS_FLAGS
01:00003946 0C80FFFFFC00    	  6382:                 cmpi.l #$FFFFFC00,d0
01:0000394C 66FE            	  6383:                 bne.s *
01:0000394E 0C850000009C    	  6384:                 cmpi.l #$0000009C,d5
01:00003954 66FE            	  6385:                 bne.s *
                            	  6386: 
                            	  6387: 
                            	  6388: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6389: 
01:00003956 7A00            	  6390:                 moveq  #$00000000,d5
01:00003958 307C0100        	  6391:                 move.l #$00000100,a0
01:0000395C 30BC8FF1        	  6392:                 move.w #$8FF1,(a0)
                            	  6393: 
                            	  6394: *        WORD LEFT
01:00003960 E1D0            	  6395:                 asl  (a0)
01:00003962 6100FE1C        	  6396:                 bsr SHIFTS_FLAGS
01:00003966 E1D0            	  6397:                 asl  (a0)
01:00003968 6100FE16        	  6398:                 bsr SHIFTS_FLAGS
01:0000396C E1D0            	  6399:                 asl  (a0)
01:0000396E 6100FE10        	  6400:                 bsr SHIFTS_FLAGS
01:00003972 E1D0            	  6401:                 asl  (a0)
01:00003974 6100FE0A        	  6402:                 bsr SHIFTS_FLAGS
01:00003978 3010            	  6403:                 move.w (a0),d0
01:0000397A 0C80FFFFFF10    	  6404:                 cmpi.l #$FFFFFF10,d0
01:00003980 66FE            	  6405:                 bne.s *
01:00003982 0C850000000D    	  6406:                 cmpi.l #$0000000D,d5
01:00003988 66FE            	  6407:                 bne.s *
                            	  6408: 
                            	  6409: *        WORD RIGHT
01:0000398A E0D0            	  6410:                 asr (a0)
01:0000398C 6100FDF2        	  6411:                 bsr SHIFTS_FLAGS
01:00003990 E0D0            	  6412:                 asr (a0)
01:00003992 6100FDEC        	  6413:                 bsr SHIFTS_FLAGS
01:00003996 E0D0            	  6414:                 asr (a0)
01:00003998 6100FDE6        	  6415:                 bsr SHIFTS_FLAGS
01:0000399C E0D0            	  6416:                 asr (a0)
01:0000399E 6100FDE0        	  6417:                 bsr SHIFTS_FLAGS
01:000039A2 E0D0            	  6418:                 asr (a0)
01:000039A4 6100FDDA        	  6419:                 bsr SHIFTS_FLAGS
01:000039A8 E0D0            	  6420:                 asr (a0)
01:000039AA 6100FDD4        	  6421:                 bsr SHIFTS_FLAGS
01:000039AE 3010            	  6422:                 move.w (a0),d0
01:000039B0 0C80FFFFFFFC    	  6423:                 cmpi.l #$FFFFFFFC,d0
01:000039B6 66FE            	  6424:                 bne.s *
01:000039B8 0C850000003E    	  6425:                 cmpi.l #$0000003E,d5
01:000039BE 66FE            	  6426:                 bne.s *
                            	  6427: 
01:000039C0 4E75            	  6428:                 rts
                            	  6429: 
                            	  6430: 
                            	  6431: 
                            	  6432: *-----------------------------------------------------------
                            	  6433: *-----------------------------------------------------------
                            	  6434: * OPCODE : SHIFTS2
                            	  6435: *-----------------------------------------------------------
                            	  6436: *-----------------------------------------------------------
                            	  6437: 
                            	  6438: *     Subroutine to check and accumulate the flags
01:000039C2 40C3            	  6439: SHIFTS2_FLAGS:  move SR,d3
01:000039C4 02830000000F    	  6440:                 andi.l #$0F,d3            * Isolate flags
01:000039CA DA83            	  6441:                 add.l d3,d5               * Copy flag results into accumulator
01:000039CC 4E75            	  6442:                 rts
                            	  6443: 
                            	  6444: op_SHIFTS2:
                            	  6445: 
                            	  6446: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6447: 
                            	  6448: *        BYTE LEFT
01:000039CE 203C80018F81    	  6449:                 move.l #$80018F81,d0
01:000039D4 7A00            	  6450:                 moveq  #$00000000,d5
01:000039D6 7C02            	  6451:                 moveq  #$00000002,d6
                            	  6452: SHIFTS2_LOOP1:
01:000039D8 ED28            	  6453:                 lsl.b d6,d0
01:000039DA 61E6            	  6454:                 bsr SHIFTS2_FLAGS
01:000039DC 51CEFFFA        	  6455:                 dbf d6,SHIFTS2_LOOP1
01:000039E0 0C8080018F08    	  6456:                 cmpi.l #$80018F08,d0
01:000039E6 66FE            	  6457:                 bne.s *
01:000039E8 4A85            	  6458:                 cmpi.l #$00000000,d5
01:000039EA 66FE            	  6459:                 bne.s *
                            	  6460: 
                            	  6461: *        BYTE RIGHT
01:000039EC 203C80018F81    	  6462:                 move.l #$80018F81,d0
01:000039F2 7C02            	  6463:                 moveq  #$00000002,d6
                            	  6464: SHIFTS2_LOOP2:
01:000039F4 EC28            	  6465:                 lsr.b d6,d0
01:000039F6 61CA            	  6466:                 bsr SHIFTS2_FLAGS
01:000039F8 51CEFFFA        	  6467:                 dbf d6,SHIFTS2_LOOP2
01:000039FC 0C8080018F10    	  6468:                 cmpi.l #$80018F10,d0
01:00003A02 66FE            	  6469:                 bne.s *
01:00003A04 4A85            	  6470:                 cmpi.l #$00000000,d5
01:00003A06 66FE            	  6471:                 bne.s *
                            	  6472: 
                            	  6473: 
                            	  6474: *        WORD LEFT
01:00003A08 203C80018FF1    	  6475:                 move.l #$80018FF1,d0
01:00003A0E 7C02            	  6476:                 moveq  #$00000002,d6
                            	  6477: SHIFTS2_LOOP3:
01:00003A10 ED68            	  6478:                 lsl.w d6,d0
01:00003A12 61AE            	  6479:                 bsr SHIFTS2_FLAGS
01:00003A14 51CEFFFA        	  6480:                 dbf d6,SHIFTS2_LOOP3
01:00003A18 0C8080017F88    	  6481:                 cmpi.l #$80017F88,d0
01:00003A1E 66FE            	  6482:                 bne.s *
01:00003A20 4A85            	  6483:                 cmpi.l #$00000000,d5
01:00003A22 66FE            	  6484:                 bne.s *
                            	  6485: 
                            	  6486: *        WORD RIGHT
01:00003A24 203C80018FF1    	  6487:                 move.l #$80018FF1,d0
01:00003A2A 7C02            	  6488:                 moveq  #$00000002,d6
                            	  6489: SHIFTS2_LOOP4:
01:00003A2C EC68            	  6490:                 lsr.w d6,d0
01:00003A2E 6192            	  6491:                 bsr SHIFTS2_FLAGS
01:00003A30 51CEFFFA        	  6492:                 dbf d6,SHIFTS2_LOOP4
01:00003A34 0C80800111FE    	  6493:                 cmpi.l #$800111FE,d0
01:00003A3A 66FE            	  6494:                 bne.s *
01:00003A3C 4A85            	  6495:                 cmpi.l #$00000000,d5
01:00003A3E 66FE            	  6496:                 bne.s *
                            	  6497: 
                            	  6498: 
                            	  6499: *        LONG LEFT
01:00003A40 203C80018FF1    	  6500:                 move.l #$80018FF1,d0
01:00003A46 7C02            	  6501:                 moveq  #$00000002,d6
                            	  6502: SHIFTS2_LOOP5:
01:00003A48 EDA8            	  6503:                 lsl.l d6,d0
01:00003A4A 6100FF76        	  6504:                 bsr SHIFTS2_FLAGS
01:00003A4E 51CEFFF8        	  6505:                 dbf d6,SHIFTS2_LOOP5
01:00003A52 0C80000C7F88    	  6506:                 cmpi.l #$000C7F88,d0
01:00003A58 66FE            	  6507:                 bne.s *
01:00003A5A 4A85            	  6508:                 cmpi.l #$00000000,d5
01:00003A5C 66FE            	  6509:                 bne.s *
                            	  6510: 
                            	  6511: *        LONG RIGHT
01:00003A5E 203C80018FF1    	  6512:                 move.l #$80018FF1,d0
01:00003A64 7C02            	  6513:                 moveq  #$00000002,d6
                            	  6514: SHIFTS2_LOOP6:
01:00003A66 ECA8            	  6515:                 lsr.l d6,d0
01:00003A68 6100FF58        	  6516:                 bsr SHIFTS2_FLAGS
01:00003A6C 51CEFFF8        	  6517:                 dbf d6,SHIFTS2_LOOP6
01:00003A70 0C80100031FE    	  6518:                 cmpi.l #$100031FE,d0
01:00003A76 66FE            	  6519:                 bne.s *
01:00003A78 4A85            	  6520:                 cmpi.l #$00000000,d5
01:00003A7A 66FE            	  6521:                 bne.s *
                            	  6522: 
                            	  6523: 
                            	  6524: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6525: 
01:00003A7C 203C80018FF1    	  6526:                 move.l #$80018FF1,d0
01:00003A82 7A00            	  6527:                 moveq  #$00000000,d5
                            	  6528: 
                            	  6529: *        BYTE LEFT
01:00003A84 E308            	  6530:                 lsl.b #1,d0
01:00003A86 6100FF3A        	  6531:                 bsr SHIFTS2_FLAGS
01:00003A8A E508            	  6532:                 lsl.b #2,d0
01:00003A8C 6100FF34        	  6533:                 bsr SHIFTS2_FLAGS
01:00003A90 E308            	  6534:                 lsl.b #1,d0
01:00003A92 6100FF2E        	  6535:                 bsr SHIFTS2_FLAGS
01:00003A96 E708            	  6536:                 lsl.b #3,d0
01:00003A98 6100FF28        	  6537:                 bsr SHIFTS2_FLAGS
01:00003A9C 0C8080018F80    	  6538:                 cmpi.l #$80018F80,d0
01:00003AA2 66FE            	  6539:                 bne.s *
01:00003AA4 0C850000001B    	  6540:                 cmpi.l #$0000001B,d5
01:00003AAA 66FE            	  6541:                 bne.s *
                            	  6542: 
                            	  6543: *        BYTE RIGHT
01:00003AAC E208            	  6544:                 lsr.b #1,d0
01:00003AAE 6100FF12        	  6545:                 bsr SHIFTS2_FLAGS
01:00003AB2 E408            	  6546:                 lsr.b #2,d0
01:00003AB4 6100FF0C        	  6547:                 bsr SHIFTS2_FLAGS
01:00003AB8 E608            	  6548:                 lsr.b #3,d0
01:00003ABA 6100FF06        	  6549:                 bsr SHIFTS2_FLAGS
01:00003ABE E208            	  6550:                 lsr.b #1,d0
01:00003AC0 6100FF00        	  6551:                 bsr SHIFTS2_FLAGS
01:00003AC4 0C8080018F01    	  6552:                 cmpi.l #$80018F01,d0
01:00003ACA 66FE            	  6553:                 bne.s *
01:00003ACC 0C850000001B    	  6554:                 cmpi.l #$0000001B,d5
01:00003AD2 66FE            	  6555:                 bne.s *
                            	  6556: 
                            	  6557: *        WORD LEFT
01:00003AD4 E348            	  6558:                 lsl.w #1,d0
01:00003AD6 6100FEEA        	  6559:                 bsr SHIFTS2_FLAGS
01:00003ADA E548            	  6560:                 lsl.w #2,d0
01:00003ADC 6100FEE4        	  6561:                 bsr SHIFTS2_FLAGS
01:00003AE0 E748            	  6562:                 lsl.w #3,d0
01:00003AE2 6100FEDE        	  6563:                 bsr SHIFTS2_FLAGS
01:00003AE6 EB48            	  6564:                 lsl.w #5,d0
01:00003AE8 6100FED8        	  6565:                 bsr SHIFTS2_FLAGS
01:00003AEC 0C8080010800    	  6566:                 cmpi.l #$80010800,d0
01:00003AF2 66FE            	  6567:                 bne.s *
01:00003AF4 0C8500000025    	  6568:                 cmpi.l #$00000025,d5
01:00003AFA 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        WORD RIGHT
01:00003AFC EA48            	  6572:                 lsr.w #5,d0
01:00003AFE 6100FEC2        	  6573:                 bsr SHIFTS2_FLAGS
01:00003B02 E248            	  6574:                 lsr.w #1,d0
01:00003B04 6100FEBC        	  6575:                 bsr SHIFTS2_FLAGS
01:00003B08 E448            	  6576:                 lsr.w #2,d0
01:00003B0A 6100FEB6        	  6577:                 bsr SHIFTS2_FLAGS
01:00003B0E E848            	  6578:                 lsr.w #4,d0
01:00003B10 6100FEB0        	  6579:                 bsr SHIFTS2_FLAGS
01:00003B14 0C8080010000    	  6580:                 cmpi.l #$80010000,d0
01:00003B1A 66FE            	  6581:                 bne.s *
01:00003B1C 0C850000002A    	  6582:                 cmpi.l #$0000002A,d5
01:00003B22 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        LONG LEFT
01:00003B24 203C80018FF1    	  6586:                 move.l #$80018FF1,d0
01:00003B2A E388            	  6587:                 lsl.l #1,d0
01:00003B2C 6100FE94        	  6588:                 bsr SHIFTS2_FLAGS
01:00003B30 E588            	  6589:                 lsl.l #2,d0
01:00003B32 6100FE8E        	  6590:                 bsr SHIFTS2_FLAGS
01:00003B36 EF88            	  6591:                 lsl.l #7,d0
01:00003B38 6100FE88        	  6592:                 bsr SHIFTS2_FLAGS
01:00003B3C E988            	  6593:                 lsl.l #4,d0
01:00003B3E 6100FE82        	  6594:                 bsr SHIFTS2_FLAGS
01:00003B42 0C8063FC4000    	  6595:                 cmpi.l #$63FC4000,d0
01:00003B48 66FE            	  6596:                 bne.s *
01:00003B4A 0C850000002B    	  6597:                 cmpi.l #$0000002B,d5
01:00003B50 66FE            	  6598:                 bne.s *
                            	  6599: 
                            	  6600: *        LONG RIGHT
01:00003B52 203C80018FF1    	  6601:                 move.l #$80018FF1,d0
01:00003B58 E288            	  6602:                 lsr.l #1,d0
01:00003B5A 6100FE66        	  6603:                 bsr SHIFTS2_FLAGS
01:00003B5E EA88            	  6604:                 lsr.l #5,d0
01:00003B60 6100FE60        	  6605:                 bsr SHIFTS2_FLAGS
01:00003B64 EE88            	  6606:                 lsr.l #7,d0
01:00003B66 6100FE5A        	  6607:                 bsr SHIFTS2_FLAGS
01:00003B6A E088            	  6608:                 lsr.l #8,d0
01:00003B6C 6100FE54        	  6609:                 bsr SHIFTS2_FLAGS
01:00003B70 0C8000000400    	  6610:                 cmpi.l #$00000400,d0
01:00003B76 66FE            	  6611:                 bne.s *
01:00003B78 0C850000002D    	  6612:                 cmpi.l #$0000002D,d5
01:00003B7E 66FE            	  6613:                 bne.s *
                            	  6614: 
                            	  6615: 
                            	  6616: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6617: 
01:00003B80 7A00            	  6618:                 moveq  #$00000000,d5
01:00003B82 307C0100        	  6619:                 move.l #$00000100,a0
01:00003B86 30BC8FF1        	  6620:                 move.w #$8FF1,(a0)
                            	  6621: 
                            	  6622: *        WORD LEFT
01:00003B8A E3D0            	  6623:                 lsl  (a0)
01:00003B8C 6100FE34        	  6624:                 bsr SHIFTS2_FLAGS
01:00003B90 E3D0            	  6625:                 lsl  (a0)
01:00003B92 6100FE2E        	  6626:                 bsr SHIFTS2_FLAGS
01:00003B96 E3D0            	  6627:                 lsl  (a0)
01:00003B98 6100FE28        	  6628:                 bsr SHIFTS2_FLAGS
01:00003B9C E3D0            	  6629:                 lsl  (a0)
01:00003B9E 6100FE22        	  6630:                 bsr SHIFTS2_FLAGS
01:00003BA2 3010            	  6631:                 move.w (a0),d0
01:00003BA4 0C800000FF10    	  6632:                 cmpi.l #$0000FF10,d0
01:00003BAA 66FE            	  6633:                 bne.s *
01:00003BAC 0C8500000009    	  6634:                 cmpi.l #$00000009,d5
01:00003BB2 66FE            	  6635:                 bne.s *
                            	  6636: 
                            	  6637: *        WORD RIGHT
01:00003BB4 E2D0            	  6638:                 lsr (a0)
01:00003BB6 6100FE0A        	  6639:                 bsr SHIFTS2_FLAGS
01:00003BBA E2D0            	  6640:                 lsr (a0)
01:00003BBC 6100FE04        	  6641:                 bsr SHIFTS2_FLAGS
01:00003BC0 E2D0            	  6642:                 lsr (a0)
01:00003BC2 6100FDFE        	  6643:                 bsr SHIFTS2_FLAGS
01:00003BC6 E2D0            	  6644:                 lsr (a0)
01:00003BC8 6100FDF8        	  6645:                 bsr SHIFTS2_FLAGS
01:00003BCC E2D0            	  6646:                 lsr (a0)
01:00003BCE 6100FDF2        	  6647:                 bsr SHIFTS2_FLAGS
01:00003BD2 E2D0            	  6648:                 lsr (a0)
01:00003BD4 6100FDEC        	  6649:                 bsr SHIFTS2_FLAGS
01:00003BD8 3010            	  6650:                 move.w (a0),d0
01:00003BDA 0C80000003FC    	  6651:                 cmpi.l #$000003FC,d0
01:00003BE0 66FE            	  6652:                 bne.s *
01:00003BE2 0C850000000A    	  6653:                 cmpi.l #$0000000A,d5
01:00003BE8 66FE            	  6654:                 bne.s *
                            	  6655: 
01:00003BEA 4E75            	  6656:                 rts
                            	  6657: 
                            	  6658: ;-----------------------------------------------------------
                            	  6659: ;-----------------------------------------------------------
                            	  6660: ; OPCODE : BSR / RTS
                            	  6661: ;-----------------------------------------------------------
                            	  6662: ;-----------------------------------------------------------
                            	  6663: 
                            	  6664: ;t3_bsr:
                            	  6665: ;	moveq	#3,d3
                            	  6666: ;	rts
                            	  6667: 
                            	  6668: ;t1_bsr:
                            	  6669: ;	moveq	#1,d1
                            	  6670: ;	rts
                            	  6671: 
                            	  6672: ;op_bsr:
                            	  6673: ;	bsr			t1_bsr
                            	  6674: ;	bsr			t2_bsr
                            	  6675: ;	bsr.w		t3_bsr
                            	  6676: ;	bsr.w		t4_bsr
                            	  6677: ;	cmpi.l	#1,d1
                            	  6678: ;	bne			*
                            	  6679: ;	cmpi.l	#2,d2
                            	  6680: ;	bne			*
                            	  6681: ;	cmpi.l	#3,d3
                            	  6682: ;	bne			*
                            	  6683: ;	cmpi.l	#4,d4
                            	  6684: ;	bne			*
                            	  6685: ;	rts
                            	  6686: 
                            	  6687: ;t2_bsr:
                            	  6688: ;	moveq	#2,d2
                            	  6689: ;	rts
                            	  6690: 	
                            	  6691: ;t4_bsr:
                            	  6692: ;	moveq	#4,d4
                            	  6693: ;	rts
                            	  6694: 


Symbols by name:
ABCD_INNER1                     01:00002416
ABCD_INNER2                     01:00002484
ABCD_NO_C1                      01:00002432
ABCD_NO_C2                      01:0000243A
ABCD_NO_C3                      01:000024A0
ABCD_NO_C4                      01:000024A8
ABCD_OUTER1                     01:00002414
ABCD_OUTER2                     01:00002482
ADDA_OUTER1                     01:00002F88
ADDQ_LOOP1                      01:000027A2
ADDQ_LOOP2                      01:000027E0
ADDQ_LOOP3                      01:00002816
ADDX_LOOP3                      01:000030AE
ADDX_LOOP4                      01:000030CA
ADDX_LOOP5                      01:000030E6
ADDX_OUTER1                     01:0000301A
ADD_OUTER1                      01:00002DAE
ADD_OUTER2                      01:00002E22
ALL_DONE                        01:000000FC
AND_OUTER1                      01:00002ACC
AND_OUTER2                      01:00002B40
BCC1                            01:000026C8
BCC10                           01:0000271A
BCC11                           01:00002722
BCC12                           01:0000272C
BCC13                           01:00002734
BCC14                           01:0000273E
BCC2                            01:000026D2
BCC3                            01:000026DA
BCC4                            01:000026E4
BCC5                            01:000026EC
BCC6                            01:000026F6
BCC7                            01:000026FE
BCC8                            01:00002708
BCC9                            01:00002710
BSR_CLOSE1                      01:00001246
BSR_CLOSE2                      01:0000127C
BSR_FAR1                        01:000000FE
BSR_FAR2                        01:000026B8
CMPA_OUTER1                     01:00002CA2
CMPM_LOOP1                      01:00002D30
CMPM_LOOP2                      01:00002D4A
CMPM_LOOP3                      01:00002D64
CMP_OUTER1                      01:00002C2C
DBCC_LOOP1                      01:00002748
DBCC_LOOP2                      01:00002756
DIVS_OUTER1                     01:0000298C
DIVU_OUTER1                     01:0000293A
EOR_OUTER2                      01:00002BB6
LEA1                            01:00001C56
MOVE1                           01:000018C4
MOVE2                           01:00001848
MOVE3                           01:00001944
MOVE4                           01:00001A9E
MULS_OUTER1                     01:00003282
MULU_OUTER1                     01:00003236
NBCD_LOOP                       01:00002608
NBCD_LOOP1                      01:0000264E
NBCD_NO_C                       01:00002614
NBCD_NO_C1                      01:00002662
NBCD_NO_Z                       01:00002618
NBCD_NO_Z1                      01:00002666
OR_OUTER1                       01:000029E2
OR_OUTER2                       01:00002A56
ROXx_FLAGS                      01:0000354A
ROXx_LOOP1                      01:00003560
ROXx_LOOP2                      01:00003580
ROXx_LOOP3                      01:000035A0
ROXx_LOOP4                      01:000035C0
ROXx_LOOP5                      01:000035E0
ROXx_LOOP6                      01:00003602
ROx_FLAGS                       01:00003314
ROx_LOOP1                       01:0000332A
ROx_LOOP2                       01:0000334A
ROx_LOOP3                       01:0000336A
ROx_LOOP4                       01:0000338A
ROx_LOOP5                       01:000033AA
ROx_LOOP6                       01:000033CC
RTR_DONE                        01:000026AA
SBCD_INNER1                     01:00002514
SBCD_INNER2                     01:00002582
SBCD_NO_C1                      01:00002530
SBCD_NO_C2                      01:00002538
SBCD_NO_C3                      01:0000259E
SBCD_NO_C4                      01:000025A6
SBCD_OUTER1                     01:00002512
SBCD_OUTER2                     01:00002580
SHIFTS2_FLAGS                   01:000039C2
SHIFTS2_LOOP1                   01:000039D8
SHIFTS2_LOOP2                   01:000039F4
SHIFTS2_LOOP3                   01:00003A10
SHIFTS2_LOOP4                   01:00003A2C
SHIFTS2_LOOP5                   01:00003A48
SHIFTS2_LOOP6                   01:00003A66
SHIFTS_FLAGS                    01:00003780
SHIFTS_LOOP1                    01:00003796
SHIFTS_LOOP2                    01:000037B6
SHIFTS_LOOP3                    01:000037D6
SHIFTS_LOOP4                    01:000037F6
SHIFTS_LOOP5                    01:00003816
SHIFTS_LOOP6                    01:00003838
SUBA_OUTER1                     01:00002FD4
SUBQ_LOOP1                      01:00002860
SUBQ_LOOP2                      01:0000289A
SUBQ_LOOP3                      01:000028D0
SUBX_LOOP3                      01:000031BE
SUBX_LOOP4                      01:000031DA
SUBX_LOOP5                      01:000031F6
SUBX_OUTER1                     01:0000312A
SUB_OUTER1                      01:00002E98
SUB_OUTER2                      01:00002F0C
do_nothing                      01:0000010E
op_ABCD                         01:000023F4
op_ADD                          01:00002D8E
op_ADDA                         01:00002F62
op_ADDQ                         01:0000278E
op_ADDX                         01:00002FFA
op_ADD_I                        01:00001470
op_AND                          01:00002AAC
op_ANDI_TO_CCR                  01:000001A0
op_ANDI_TO_SR                   01:000001C6
op_BCC                          01:000026C0
op_BCHG                         01:00000596
op_BCLR                         01:000008FE
op_BOOL_I                       01:00001088
op_BSET                         01:00000C4E
op_BSR                          01:0000124E
op_BTST                         01:000001EC
op_BTST0                        01:00000376
op_BTST1                        01:00000382
op_BTST10                       01:000003CA
op_BTST11                       01:000003D2
op_BTST12                       01:000003D8
op_BTST2                        01:0000038A
op_BTST20                       01:00000530
op_BTST21                       01:0000053A
op_BTST22                       01:00000540
op_BTST23                       01:00000546
op_BTST24                       01:0000054C
op_BTST25                       01:00000552
op_BTST26                       01:00000558
op_BTST27                       01:0000055E
op_BTST28                       01:00000564
op_BTST29                       01:0000056A
op_BTST3                        01:00000392
op_BTST30                       01:00000570
op_BTST31                       01:00000576
op_BTST32                       01:0000057A
op_BTST4                        01:0000039A
op_BTST5                        01:000003A2
op_BTST6                        01:000003AA
op_BTST7                        01:000003B2
op_BTST8                        01:000003BA
op_BTST9                        01:000003C2
op_CHK                          01:00001D06
op_CMP                          01:00002C0C
op_CMPA                         01:00002C82
op_CMPM                         01:00002CE8
op_CMP_I                        01:00001284
op_DBCC                         01:00002740
op_DIVS                         01:00002970
op_DIVU                         01:0000291E
op_EOR                          01:00002B96
op_EORI_TO_CCR                  01:00000154
op_EORI_TO_SR                   01:0000017A
op_EXG                          01:000032B2
op_EXT                          01:00001B7C
op_LEAPEA                       01:00001BBE
op_LINKS                        01:00001CD8
op_MOVE                         01:0000177C
op_MOVEM                        01:000020D6
op_MOVEP                        01:00000FF4
op_MOVEQ                        01:00002902
op_MOVE_USP                     01:00001CF6
op_MOVE_xxx_FLAGS               01:00001988
op_MULS                         01:00003266
op_MULU                         01:0000321A
op_NBCD                         01:000025F0
op_NEGS                         01:00001D40
op_OR                           01:000029C2
op_ORI_TO_CCR                   01:00000110
op_ORI_TO_SR                    01:00000132
op_ROXx                         01:00003556
op_ROx                          01:00003320
op_RTR                          01:0000269E
op_SBCD                         01:000024F2
op_SCC                          01:00002766
op_SHIFTS                       01:0000378C
op_SHIFTS2                      01:000039CE
op_SUB                          01:00002E78
op_SUBA                         01:00002FAE
op_SUBQ                         01:00002848
op_SUBX                         01:0000310A
op_SUB_I                        01:000015F6
op_SWAP                         01:00001BA8
op_TAS                          01:00001C6A
op_TRAPV                        01:00002682
op_TST                          01:00001C92
start                           01:00000000

Symbols by value:
00000000 start
000000FC ALL_DONE
000000FE BSR_FAR1
0000010E do_nothing
00000110 op_ORI_TO_CCR
00000132 op_ORI_TO_SR
00000154 op_EORI_TO_CCR
0000017A op_EORI_TO_SR
000001A0 op_ANDI_TO_CCR
000001C6 op_ANDI_TO_SR
000001EC op_BTST
00000376 op_BTST0
00000382 op_BTST1
0000038A op_BTST2
00000392 op_BTST3
0000039A op_BTST4
000003A2 op_BTST5
000003AA op_BTST6
000003B2 op_BTST7
000003BA op_BTST8
000003C2 op_BTST9
000003CA op_BTST10
000003D2 op_BTST11
000003D8 op_BTST12
00000530 op_BTST20
0000053A op_BTST21
00000540 op_BTST22
00000546 op_BTST23
0000054C op_BTST24
00000552 op_BTST25
00000558 op_BTST26
0000055E op_BTST27
00000564 op_BTST28
0000056A op_BTST29
00000570 op_BTST30
00000576 op_BTST31
0000057A op_BTST32
00000596 op_BCHG
000008FE op_BCLR
00000C4E op_BSET
00000FF4 op_MOVEP
00001088 op_BOOL_I
00001246 BSR_CLOSE1
0000124E op_BSR
0000127C BSR_CLOSE2
00001284 op_CMP_I
00001470 op_ADD_I
000015F6 op_SUB_I
0000177C op_MOVE
00001848 MOVE2
000018C4 MOVE1
00001944 MOVE3
00001988 op_MOVE_xxx_FLAGS
00001A9E MOVE4
00001B7C op_EXT
00001BA8 op_SWAP
00001BBE op_LEAPEA
00001C56 LEA1
00001C6A op_TAS
00001C92 op_TST
00001CD8 op_LINKS
00001CF6 op_MOVE_USP
00001D06 op_CHK
00001D40 op_NEGS
000020D6 op_MOVEM
000023F4 op_ABCD
00002414 ABCD_OUTER1
00002416 ABCD_INNER1
00002432 ABCD_NO_C1
0000243A ABCD_NO_C2
00002482 ABCD_OUTER2
00002484 ABCD_INNER2
000024A0 ABCD_NO_C3
000024A8 ABCD_NO_C4
000024F2 op_SBCD
00002512 SBCD_OUTER1
00002514 SBCD_INNER1
00002530 SBCD_NO_C1
00002538 SBCD_NO_C2
00002580 SBCD_OUTER2
00002582 SBCD_INNER2
0000259E SBCD_NO_C3
000025A6 SBCD_NO_C4
000025F0 op_NBCD
00002608 NBCD_LOOP
00002614 NBCD_NO_C
00002618 NBCD_NO_Z
0000264E NBCD_LOOP1
00002662 NBCD_NO_C1
00002666 NBCD_NO_Z1
00002682 op_TRAPV
0000269E op_RTR
000026AA RTR_DONE
000026B8 BSR_FAR2
000026C0 op_BCC
000026C8 BCC1
000026D2 BCC2
000026DA BCC3
000026E4 BCC4
000026EC BCC5
000026F6 BCC6
000026FE BCC7
00002708 BCC8
00002710 BCC9
0000271A BCC10
00002722 BCC11
0000272C BCC12
00002734 BCC13
0000273E BCC14
00002740 op_DBCC
00002748 DBCC_LOOP1
00002756 DBCC_LOOP2
00002766 op_SCC
0000278E op_ADDQ
000027A2 ADDQ_LOOP1
000027E0 ADDQ_LOOP2
00002816 ADDQ_LOOP3
00002848 op_SUBQ
00002860 SUBQ_LOOP1
0000289A SUBQ_LOOP2
000028D0 SUBQ_LOOP3
00002902 op_MOVEQ
0000291E op_DIVU
0000293A DIVU_OUTER1
00002970 op_DIVS
0000298C DIVS_OUTER1
000029C2 op_OR
000029E2 OR_OUTER1
00002A56 OR_OUTER2
00002AAC op_AND
00002ACC AND_OUTER1
00002B40 AND_OUTER2
00002B96 op_EOR
00002BB6 EOR_OUTER2
00002C0C op_CMP
00002C2C CMP_OUTER1
00002C82 op_CMPA
00002CA2 CMPA_OUTER1
00002CE8 op_CMPM
00002D30 CMPM_LOOP1
00002D4A CMPM_LOOP2
00002D64 CMPM_LOOP3
00002D8E op_ADD
00002DAE ADD_OUTER1
00002E22 ADD_OUTER2
00002E78 op_SUB
00002E98 SUB_OUTER1
00002F0C SUB_OUTER2
00002F62 op_ADDA
00002F88 ADDA_OUTER1
00002FAE op_SUBA
00002FD4 SUBA_OUTER1
00002FFA op_ADDX
0000301A ADDX_OUTER1
000030AE ADDX_LOOP3
000030CA ADDX_LOOP4
000030E6 ADDX_LOOP5
0000310A op_SUBX
0000312A SUBX_OUTER1
000031BE SUBX_LOOP3
000031DA SUBX_LOOP4
000031F6 SUBX_LOOP5
0000321A op_MULU
00003236 MULU_OUTER1
00003266 op_MULS
00003282 MULS_OUTER1
000032B2 op_EXG
00003314 ROx_FLAGS
00003320 op_ROx
0000332A ROx_LOOP1
0000334A ROx_LOOP2
0000336A ROx_LOOP3
0000338A ROx_LOOP4
000033AA ROx_LOOP5
000033CC ROx_LOOP6
0000354A ROXx_FLAGS
00003556 op_ROXx
00003560 ROXx_LOOP1
00003580 ROXx_LOOP2
000035A0 ROXx_LOOP3
000035C0 ROXx_LOOP4
000035E0 ROXx_LOOP5
00003602 ROXx_LOOP6
00003780 SHIFTS_FLAGS
0000378C op_SHIFTS
00003796 SHIFTS_LOOP1
000037B6 SHIFTS_LOOP2
000037D6 SHIFTS_LOOP3
000037F6 SHIFTS_LOOP4
00003816 SHIFTS_LOOP5
00003838 SHIFTS_LOOP6
000039C2 SHIFTS2_FLAGS
000039CE op_SHIFTS2
000039D8 SHIFTS2_LOOP1
000039F4 SHIFTS2_LOOP2
00003A10 SHIFTS2_LOOP3
00003A2C SHIFTS2_LOOP4
00003A48 SHIFTS2_LOOP5
00003A66 SHIFTS2_LOOP6

Sections:
00: "CODE" (0-3BDE)


Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
00:00000000 61000FEA        	    84: 	bsr op_MOVEP
00:00000004 61000102        	    85: 	bsr	op_ORI_TO_CCR
00:00000008 61000120        	    86: 	bsr	op_ORI_TO_SR
00:0000000C 6100013E        	    87: 	bsr	op_EORI_TO_CCR
00:00000010 61000160        	    88: 	bsr	op_EORI_TO_SR
00:00000014 61000182        	    89: 	bsr	op_ANDI_TO_CCR
00:00000018 610001A4        	    90: 	bsr	op_ANDI_TO_SR
00:0000001C 610001C6        	    91: 	bsr	op_BTST
00:00000020 6100056C        	    92: 	bsr	op_BCHG
00:00000024 610008D0        	    93: 	bsr	op_BCLR
00:00000028 61000C1C        	    94: 	bsr	op_BSET
00:0000002C 61000FBE        	    95: 	bsr op_MOVEP
00:00000030 6100104E        	    96: 	bsr op_BOOL_I
00:00000034 61001246        	    97: 	bsr op_CMP_I
00:00000038 6100142E        	    98: 	bsr op_ADD_I
00:0000003C 610015B0        	    99: 	bsr op_SUB_I
00:00000040 61001732        	   100: 	bsr op_MOVE
00:00000044 6100193A        	   101: 	bsr op_MOVE_xxx_FLAGS
00:00000048 61001B2A        	   102: 	bsr op_EXT
00:0000004C 61001B52        	   103: 	bsr op_SWAP
00:00000050 61001B64        	   104: 	bsr op_LEAPEA
00:00000054 61001C0C        	   105: 	bsr op_TAS
00:00000058 61001C30        	   106: 	bsr op_TST
00:0000005C 61001C72        	   107: 	bsr op_LINKS
00:00000060 61001C8C        	   108: 	bsr op_MOVE_USP
                            	   109: *	bsr op_CHK
00:00000064 61001CD2        	   110: 	bsr op_NEGS
00:00000068 6100205C        	   111: 	bsr op_MOVEM
                            	   112: ** fails
                            	   113: *	bsr op_ABCD
                            	   114: *	bsr op_SBCD
                            	   115: *	bsr op_NBCD
                            	   116: *	bsr op_TRAPV
00:0000006C 61002620        	   117: 	bsr op_RTR
00:00000070 610011D4        	   118: 	bsr op_BSR
00:00000074 6100263C        	   119: 	bsr op_BCC
00:00000078 610026B8        	   120: 	bsr op_DBCC
00:0000007C 610026DA        	   121: 	bsr op_SCC
00:00000080 610026FE        	   122: 	bsr op_ADDQ
00:00000084 610027B4        	   123: 	bsr op_SUBQ
00:00000088 6100286A        	   124: 	bsr op_MOVEQ
                            	   125: *** fails
                            	   126: *	bsr op_DIVU
                            	   127: *	bsr op_DIVS
00:0000008C 61002926        	   128: 	bsr op_OR
00:00000090 61002A0C        	   129: 	bsr op_AND
00:00000094 61002AF2        	   130: 	bsr op_EOR
00:00000098 61002B64        	   131: 	bsr op_CMP
00:0000009C 61002BD6        	   132: 	bsr op_CMPA
00:000000A0 61002C38        	   133: 	bsr op_CMPM
00:000000A4 61002CDA        	   134: 	bsr op_ADD
00:000000A8 61002DC0        	   135: 	bsr op_SUB
00:000000AC 61002EA6        	   136: 	bsr op_ADDA
00:000000B0 61002EEE        	   137: 	bsr op_SUBA
00:000000B4 61002F36        	   138: 	bsr op_ADDX
00:000000B8 61003042        	   139: 	bsr op_SUBX
00:000000BC 6100314E        	   140: 	bsr op_MULU
00:000000C0 61003196        	   141: 	bsr op_MULS
00:000000C4 610031DE        	   142: 	bsr op_EXG
00:000000C8 61003248        	   143: 	bsr op_ROx
00:000000CC 6100347A        	   144: 	bsr op_ROXx
00:000000D0 610036AC        	   145: 	bsr op_SHIFTS
00:000000D4 610038EA        	   146: 	bsr op_SHIFTS2
                            	   147: 
00:000000D8 4E75            	   148: 	rts
                            	   149: 	bra ALL_DONE
                            	   150: 
                            	   151: * Loop here when all tests pass
                            	   152: *
                            	   153: 
00:000000DA 60FE            	   154: ALL_DONE: bra.s ALL_DONE
                            	   155: 
00:000000DC 263C33333333    	   156: BSR_FAR1:       move.l #$33333333,d3
00:000000E2 4E75            	   157:                 rts
                            	   158: 
                            	   159: ;	moveq		#-1,d0
                            	   160: ;	move.l	d0,$FD0FFF00
                            	   161: ;do_nothing:
                            	   162: ;	bra			*		
                            	   163: 
                            	   164: 
                            	   165: * Exception Vector = 6   CHK Instruction
                            	   166: *
                            	   167: 	align	4
                            	   168: EXCEPTION_6:
00:000000F0 2C3CEEEE0006    	   169: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:000000F6 4E73            	   170: 	rte
                            	   171: 
                            	   172: * Exception Vector = 7   TRAPV Instruction
                            	   173: *
                            	   174: 	align	4
                            	   175: EXCEPTION_7:
00:00000100 203C12345678    	   176: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:00000106 4E73            	   177: 	rte
                            	   178: 
                            	   179: ;-----------------------------------------------------------
                            	   180: ;-----------------------------------------------------------
                            	   181: ; OPCODE : ORI_TO_CCR
                            	   182: ;-----------------------------------------------------------
                            	   183: ;-----------------------------------------------------------
                            	   184: op_ORI_TO_CCR:
                            	   185: 
00:00000108 003C00FF        	   186:     ori.b #$FF,CCR
00:0000010C 6AFE            	   187:     bpl.s *                   ; branch if Z clear
00:0000010E 66FE            	   188:     bne.s *                   ; branch if N clear
00:00000110 68FE            	   189:     bvc.s *                   ; branch if V clear
00:00000112 64FE            	   190:     bcc.s *                   ; branch if C clear
                            	   191: 
00:00000114 44FC0000        	   192:     move #$00,CCR
00:00000118 003C0000        	   193:     ori.b #$00,CCR
00:0000011C 67FE            	   194:     beq.s *                   ; branch if Z set
00:0000011E 6BFE            	   195:     bmi.s *                   ; branch if N set
00:00000120 69FE            	   196:     bvs.s *                   ; branch if V set
00:00000122 65FE            	   197:     bcs.s *                   ; branch if C set
                            	   198: 
00:00000124 46FC2700        	   199:     move #$2700,SR          ; Put flags back to initial value
                            	   200: 
00:00000128 4E75            	   201:     rts
                            	   202: 
                            	   203: ;-----------------------------------------------------------
                            	   204: ;-----------------------------------------------------------
                            	   205: ; OPCODE : ORI_TO_SR
                            	   206: ;-----------------------------------------------------------
                            	   207: ;-----------------------------------------------------------
                            	   208: 
                            	   209: op_ORI_TO_SR:
                            	   210: 
00:0000012A 007C2FFF        	   211:     ori.w #$2FFF,SR
00:0000012E 6AFE            	   212:     bpl.s *                   * branch if Z clear
00:00000130 66FE            	   213:     bne.s *                   * branch if N clear
00:00000132 68FE            	   214:     bvc.s *                   * branch if V clear
00:00000134 64FE            	   215:     bcc.s *                   * branch if C clear
                            	   216: 
00:00000136 46FC2000        	   217:     move #$2000,SR
00:0000013A 007C0000        	   218:     ori.w #$0000,SR
00:0000013E 67FE            	   219:     beq.s *                   * branch if Z set
00:00000140 6BFE            	   220:     bmi.s *                   * branch if N set
00:00000142 69FE            	   221:     bvs.s *                   * branch if V set
00:00000144 65FE            	   222:     bcs.s *                   * branch if C set
                            	   223: 
00:00000146 46FC2700        	   224:     move #$2700,SR         * Put flags back to initial value
                            	   225: 
00:0000014A 4E75            	   226:     rts
                            	   227: ; 
                            	   228: ;-----------------------------------------------------------
                            	   229: ;-----------------------------------------------------------
                            	   230: ; OPCODE : EORI_TO_CCR
                            	   231: ;-----------------------------------------------------------
                            	   232: ;-----------------------------------------------------------
                            	   233: op_EORI_TO_CCR:
                            	   234: 
00:0000014C 44FC0000        	   235:     move #$00,CCR
00:00000150 0A3C00FF        	   236:     eori.b #$FF,CCR
00:00000154 6AFE            	   237:     bpl.s *                   ; branch if Z clear
00:00000156 66FE            	   238:     bne.s *                   ; branch if N clear
00:00000158 68FE            	   239:     bvc.s *                   ; branch if V clear
00:0000015A 64FE            	   240:     bcc.s *                   ; branch if C clear
                            	   241: 
00:0000015C 44FC0000        	   242:     move #$00,CCR
00:00000160 0A3C0000        	   243:     eori.b #$00,CCR
00:00000164 67FE            	   244:     beq.s *                   ; branch if Z set
00:00000166 6BFE            	   245:     bmi.s *                   ; branch if N set
00:00000168 69FE            	   246:     bvs.s *                   ; branch if V set
00:0000016A 65FE            	   247:     bcs.s *                   ; branch if C set
                            	   248: 
00:0000016C 46FC2700        	   249:     move #$2700,SR           ; Put flags back to initial value
                            	   250: 
00:00000170 4E75            	   251:     rts
                            	   252: 
                            	   253: 
                            	   254: 
                            	   255: *-----------------------------------------------------------
                            	   256: *-----------------------------------------------------------
                            	   257: * OPCODE : EORI_TO_SR
                            	   258: *-----------------------------------------------------------
                            	   259: *-----------------------------------------------------------
                            	   260: op_EORI_TO_SR:
                            	   261: 
00:00000172 46FC2000        	   262:     move #$2000,SR
00:00000176 0A7C0FFF        	   263:     eori.w #$0FFF,SR
00:0000017A 6AFE            	   264:     bpl.s *                   * branch if Z clear
00:0000017C 66FE            	   265:     bne.s *                   * branch if N clear
00:0000017E 68FE            	   266:     bvc.s *                   * branch if V clear
00:00000180 64FE            	   267:     bcc.s *                   * branch if C clear
                            	   268: 
00:00000182 46FC2000        	   269:     move #$2000,SR
00:00000186 0A7C0000        	   270:     eori.w #$0000,SR
00:0000018A 67FE            	   271:     beq.s *                   * branch if Z set
00:0000018C 6BFE            	   272:     bmi.s *                   * branch if N set
00:0000018E 69FE            	   273:     bvs.s *                   * branch if V set
00:00000190 65FE            	   274:     bcs.s *                   * branch if C set
                            	   275: 
00:00000192 46FC2700        	   276:     move #$2700,SR          * Put flags back to initial value
                            	   277: 
00:00000196 4E75            	   278:     rts
                            	   279: 
                            	   280: 
                            	   281: 
                            	   282: *-----------------------------------------------------------
                            	   283: *-----------------------------------------------------------
                            	   284: * OPCODE : ANDI_TO_CCR
                            	   285: *-----------------------------------------------------------
                            	   286: *-----------------------------------------------------------
                            	   287: op_ANDI_TO_CCR:
                            	   288: 
00:00000198 44FC00FF        	   289:     move #$FF,CCR
00:0000019C 023C00FF        	   290:     andi.b #$FF,CCR
00:000001A0 6AFE            	   291:     bpl.s *                   * branch if Z clear
00:000001A2 66FE            	   292:     bne.s *                   * branch if N clear
00:000001A4 68FE            	   293:     bvc.s *                   * branch if V clear
00:000001A6 64FE            	   294:     bcc.s *                   * branch if C clear
                            	   295: 
00:000001A8 44FC00FF        	   296:     move #$FF,CCR
00:000001AC 023C0000        	   297:     andi.b #$00,CCR
00:000001B0 67FE            	   298:     beq.s *                   * branch if Z set
00:000001B2 6BFE            	   299:     bmi.s *                   * branch if N set
00:000001B4 69FE            	   300:     bvs.s *                   * branch if V set
00:000001B6 65FE            	   301:     bcs.s *                   * branch if C set
                            	   302: 
00:000001B8 46FC2700        	   303:     move #$2700,SR           * Put flags back to initial value
                            	   304: 
00:000001BC 4E75            	   305:     rts
                            	   306: 
                            	   307: 
                            	   308: 
                            	   309: *-----------------------------------------------------------
                            	   310: *-----------------------------------------------------------
                            	   311: * OPCODE : ANDI_TO_SR
                            	   312: *-----------------------------------------------------------
                            	   313: *-----------------------------------------------------------
                            	   314: op_ANDI_TO_SR:
00:000001BE 46FC20FF        	   315:     move #$20FF,SR
00:000001C2 027CFFFF        	   316:     andi.w #$FFFF,SR
00:000001C6 6AFE            	   317:     bpl.s *                   * branch if Z clear
00:000001C8 66FE            	   318:     bne.s *                   * branch if N clear
00:000001CA 68FE            	   319:     bvc.s *                   * branch if V clear
00:000001CC 64FE            	   320:     bcc.s *                   * branch if C clear
                            	   321: 
00:000001CE 46FC20FF        	   322:     move #$20FF,SR
00:000001D2 027CFF00        	   323:     andi.w #$FF00,SR
00:000001D6 67FE            	   324:     beq.s *                   * branch if Z set
00:000001D8 6BFE            	   325:     bmi.s *                   * branch if N set
00:000001DA 69FE            	   326:     bvs.s *                   * branch if V set
00:000001DC 65FE            	   327:     bcs.s *                   * branch if C set
                            	   328: 
00:000001DE 46FC2700        	   329:     move #$2700,SR           * Put flags back to initial value
                            	   330: 
00:000001E2 4E75            	   331:     rts
                            	   332: 
                            	   333: 
                            	   334: *-----------------------------------------------------------
                            	   335: *-----------------------------------------------------------
                            	   336: * OPCODE : BTST
                            	   337: *-----------------------------------------------------------
                            	   338: *-----------------------------------------------------------
                            	   339: op_BTST:
                            	   340: 
                            	   341: *  Bit Number.s Static
                            	   342: 
                            	   343: *             EA = Dn  - LONG only
00:000001E4 203C80000001    	   344:             move.l #$80000001,d0      * populate test data
00:000001EA 08000000        	   345:             btst.l #0,d0
00:000001EE 67FE            	   346:             beq.s *               * branch if Z set
00:000001F0 08000001        	   347:             btst.l #1,d0              *
00:000001F4 66FE            	   348:             bne.s *               * branch if Z clear
00:000001F6 0800001F        	   349:             btst.l #31,d0             *
00:000001FA 67FE            	   350:             beq.s *               * branch if Z set
                            	   351: 
                            	   352: 
                            	   353: *             EA = (An)  - BYTE only
00:000001FC 307C0100        	   354:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000200 10BC0081        	   355:             move.b #$81,(a0)          * populate test data
00:00000204 1210            	   356:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00000206 08100000        	   357:             btst.b #0,(a0)
00:0000020A 67FE            	   358:             beq.s *               * branch if Z set
00:0000020C 08100001        	   359:             btst.b #1,(a0)            *
00:00000210 66FE            	   360:             bne.s *               * branch if Z clear
00:00000212 08100007        	   361:             btst.b #7,(a0)            *
00:00000216 67FE            	   362:             beq.s *               * branch if Z set
                            	   363: 
                            	   364: 
                            	   365: *             EA = (An)+  - BYTE only
00:00000218 307C0100        	   366:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000021C 10FC0001        	   367:             move.b #$01,(a0)+         * populate test data
00:00000220 10FC00FC        	   368:             move.b #$FC,(a0)+         * populate test data
00:00000224 10FC0080        	   369:             move.b #$80,(a0)+         * populate test data
00:00000228 307C0100        	   370:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000022C 08180000        	   371:             btst.b #0,(a0)+
00:00000230 67FE            	   372:             beq.s *               * branch if Z set
00:00000232 08180001        	   373:             btst.b #1,(a0)+           *
00:00000236 66FE            	   374:             bne.s *               * branch if Z clear
00:00000238 08180007        	   375:             btst.b #7,(a0)+           *
00:0000023C 67FE            	   376:             beq.s *               * branch if Z set
                            	   377: 
                            	   378: 
                            	   379: *             EA = -(An)  - BYTE only
00:0000023E 307C0100        	   380:             move.l #$00000100,a0      * point to memory to address
00:00000242 10FC0080        	   381:             move.b #$80,(a0)+         * populate test data
00:00000246 10FC00FC        	   382:             move.b #$FC,(a0)+         * populate test data
00:0000024A 10FC0001        	   383:             move.b #$01,(a0)+         * populate test data
00:0000024E 307C0103        	   384:             move.l #$00000103,a0      * point to memory to address
00:00000252 08200000        	   385:             btst.b #0,-(a0)
00:00000256 67FE            	   386:             beq.s *               * branch if Z set
00:00000258 08200001        	   387:             btst.b #1,-(a0)           *
00:0000025C 66FE            	   388:             bne.s *               * branch if Z clear
00:0000025E 08200007        	   389:             btst.b #7,-(a0)           *
00:00000262 67FE            	   390:             beq.s *               * branch if Z set
                            	   391: 
                            	   392: 
                            	   393: *             EA = n(An)  - BYTE only
00:00000264 307C0100        	   394:             move.l #$00000100,a0      * point to memory to address
00:00000268 10FC0001        	   395:             move.b #$01,(a0)+         * populate test data
00:0000026C 10FC00FC        	   396:             move.b #$FC,(a0)+         * populate test data
00:00000270 10FC0080        	   397:             move.b #$80,(a0)+         * populate test data
00:00000274 307C0100        	   398:             move.l #$00000100,a0      * point to memory to address
00:00000278 08100000        	   399:             btst.b #0,0(a0)
00:0000027C 67FE            	   400:             beq.s *               * branch if Z set
00:0000027E 082800010001    	   401:             btst.b #1,1(a0)           *
00:00000284 66FE            	   402:             bne.s *               * branch if Z clear
00:00000286 082800070002    	   403:             btst.b #7,2(a0)           *
00:0000028C 67FE            	   404:             beq.s *               * branch if Z set
                            	   405: 
                            	   406: 
                            	   407: *             EA = n(An,R.W)  - BYTE only
00:0000028E 307C0100        	   408:             move.l #$00000100,a0      * point to memory to address
00:00000292 93C9            	   409:             move.l #$00000000,a1      * point to memory to address
00:00000294 347C0001        	   410:             move.l #$00000001,a2      * point to memory to address
00:00000298 7000            	   411:             moveq  #$00000000,d0      * point to memory to address
00:0000029A 7201            	   412:             moveq  #$00000001,d1      * point to memory to address
00:0000029C 083000000000    	   413:             btst.b #0,0(a0,d0.w)
00:000002A2 67FE            	   414:             beq.s *               * branch if Z set
00:000002A4 083000011000    	   415:             btst.b #1,0(a0,d1.w)      *
00:000002AA 66FE            	   416:             bne.s *               * branch if Z clear
00:000002AC 083000071001    	   417:             btst.b #7,1(a0,d1.w)      *
00:000002B2 67FE            	   418:             beq.s *               * branch if Z set
                            	   419: *             EA = n(An,R.L)  - BYTE only
00:000002B4 083000000800    	   420:             btst.b #0,0(a0,d0.l)
00:000002BA 67FE            	   421:             beq.s *               * branch if Z set
00:000002BC 083000011800    	   422:             btst.b #1,0(a0,d1.l)      *
00:000002C2 66FE            	   423:             bne.s *               * branch if Z clear
00:000002C4 083000071801    	   424:             btst.b #7,1(a0,d1.l)      *
00:000002CA 67FE            	   425:             beq.s *               * branch if Z set
                            	   426: *             EA = n(An,A.W)  - BYTE only
00:000002CC 083000009000    	   427:             btst.b #0,0(a0,a1.w)
00:000002D2 67FE            	   428:             beq.s *               * branch if Z set
00:000002D4 08300001A000    	   429:             btst.b #1,0(a0,a2.w)      *
00:000002DA 66FE            	   430:             bne.s *               * branch if Z clear
00:000002DC 08300007A001    	   431:             btst.b #7,1(a0,a2.w)      *
00:000002E2 67FE            	   432:             beq.s *               * branch if Z set
                            	   433: *             EA = n(An,A.L)  - BYTE only
00:000002E4 083000009800    	   434:             btst.b #0,0(a0,a1.l)
00:000002EA 67FE            	   435:             beq.s *               * branch if Z set
00:000002EC 08300001A800    	   436:             btst.b #1,0(a0,a2.l)      *
00:000002F2 66FE            	   437:             bne.s *               * branch if Z clear
00:000002F4 08300007A801    	   438:             btst.b #7,1(a0,a2.l)      *
00:000002FA 67FE            	   439:             beq.s *               * branch if Z set
                            	   440: 
                            	   441: 
                            	   442: *             EA = x.W  - BYTE only
00:000002FC 083800000100    	   443:             btst.b #0,$0100
00:00000302 67FE            	   444:             beq.s *               * branch if Z set
00:00000304 083800010101    	   445:             btst.b #1,$0101           *
00:0000030A 66FE            	   446:             bne.s *               * branch if Z clear
00:0000030C 083800070102    	   447:             btst.b #7,$0102           *
00:00000312 67FE            	   448:             beq.s *               * branch if Z set
                            	   449: 
                            	   450: 
                            	   451: *             EA = x.L  - BYTE only
00:00000314 207C0000F100    	   452:             move.l #$F100,a0      * point to memory to address 0x100
00:0000031A 10FC0001        	   453:             move.b #$01,(a0)+         * populate test data
00:0000031E 10FC00FC        	   454:             move.b #$FC,(a0)+         * populate test data
00:00000322 10FC0080        	   455:             move.b #$80,(a0)+         * populate test data
00:00000326 083900000000F100	   456:             btst.b #0,$F100
00:0000032E 67FE            	   457:             beq.s *               * branch if Z set
00:00000330 083900010000F101	   458:             btst.b #1,$F101       *
00:00000338 66FE            	   459:             bne.s *               * branch if Z clear
00:0000033A 083900070000F102	   460:             btst.b #7,$F102       *
00:00000342 67FE            	   461:             beq.s *               * branch if Z set
                            	   462: 
                            	   463: 
                            	   464: *             EA = x(PC)  - BYTE only
00:00000344 4BFAFE9E        	   465:             lea op_BTST(pc),a5
00:00000348 083A0000FE98    	   466:             btst.b #0,op_BTST(pc)
00:0000034E 66FE            	   467:             bne.s *               * branch if Z clear
00:00000350 083A0003001A    	   468:             btst.b #3,op_BTST0(pc)     *
00:00000356 67FE            	   469:             beq.s *               * branch if Z set
00:00000358 083A00060074    	   470:             btst.b #6,op_BTST12(pc)    *
00:0000035E 67FE            	   471:             beq.s *               * branch if Z set
                            	   472: 
                            	   473: 
                            	   474: *             EA = n(PC,R.W)  - BYTE only
00:00000360 307C0100        	   475:             move.l #$00000100,a0      * point to memory to address
00:00000364 93C9            	   476:             move.l #$00000000,a1      * point to memory to address
00:00000366 347C0001        	   477:             move.l #$00000001,a2      * point to memory to address
00:0000036A 7000            	   478:             moveq  #$00000000,d0      * point to memory to address
00:0000036C 7201            	   479:             moveq  #$00000001,d1      * point to memory to address
                            	   480: 
00:0000036E 083B000000FC    	   481: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:00000374 66FE            	   482:             bne.s *               * branch if Z clear
                            	   483: 
00:00000376 4BFB1002        	   484:             lea op_BTST1(pc,d1.w),a5
00:0000037A 083B000110FC    	   485: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:00000380 67FE            	   486:             beq.s *               * branch if Z set
00:00000382 083B000710FC    	   487: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:00000388 66FE            	   488:             bne.s *               * branch if Z clear
                            	   489: *             EA = n(PC,R.L)  - BYTE only
00:0000038A 083B000008FC    	   490: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:00000390 66FE            	   491:             bne.s *               * branch if Z clear
00:00000392 083B000118FC    	   492: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:00000398 67FE            	   493:             beq.s *               * branch if Z set
00:0000039A 083B000718FC    	   494: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:000003A0 66FE            	   495:             bne.s *               * branch if Z clear
                            	   496: *             EA = n(PC,A.W)  - BYTE only
00:000003A2 083B000090FC    	   497: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:000003A8 66FE            	   498:             bne.s *               * branch if Z clear
00:000003AA 083B0001A0FC    	   499: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:000003B0 67FE            	   500:             beq.s *               * branch if Z set
00:000003B2 083B0007A0FC    	   501: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:000003B8 66FE            	   502:             bne.s *               * branch if Z clear
                            	   503: *             EA = n(PC,A.L)  - BYTE only
00:000003BA 083B000098FC    	   504: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:000003C0 66FE            	   505:             bne.s *               * branch if Z clear
00:000003C2 083B0001A8FC    	   506: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:000003C8 67FE            	   507:             beq.s *               * branch if Z set
00:000003CA 083B0007A8FC    	   508: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:000003D0 66FE            	   509: op_BTST12:  bne.s *               * branch if Z clear
                            	   510: 
                            	   511: 
                            	   512: 
                            	   513: * Bit Number.s Dynamic
                            	   514: 
                            	   515: *             EA = Dn  - LONG only
00:000003D2 203C80000001    	   516:             move.l #$80000001,d0      * populate test data
00:000003D8 7A00            	   517:             move.l #0,d5              * populate bit.s number to test
00:000003DA 7C01            	   518:             move.l #1,d6              * populate bit.s number to test
00:000003DC 7E1F            	   519:             move.l #31,d7              * populate bit.s number to test
                            	   520: 
00:000003DE 0B00            	   521:             btst.l d5,d0
00:000003E0 67FE            	   522:             beq.s *               * branch if Z set
00:000003E2 0D00            	   523:             btst.l d6,d0              *
00:000003E4 66FE            	   524:             bne.s *               * branch if Z clear
00:000003E6 0F00            	   525:             btst.l d7,d0             *
00:000003E8 67FE            	   526:             beq.s *               * branch if Z set
                            	   527: 
                            	   528: 
                            	   529: *             EA = (An)  - BYTE only
00:000003EA 7A00            	   530:             move.l #0,d5              * populate bit.s number to test
00:000003EC 7C01            	   531:             move.l #1,d6              * populate bit.s number to test
00:000003EE 7E07            	   532:             move.l #7,d7              * populate bit.s number to test
00:000003F0 307C0100        	   533:             move.l #$00000100,a0      * point to memory to address 0x100
00:000003F4 10BC0081        	   534:             move.b #$81,(a0)          * populate test data
00:000003F8 1210            	   535:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000003FA 0B10            	   536:             btst.b d5,(a0)
00:000003FC 67FE            	   537:             beq.s *               * branch if Z set
00:000003FE 0D10            	   538:             btst.b d6,(a0)            *
00:00000400 66FE            	   539:             bne.s *               * branch if Z clear
00:00000402 0F10            	   540:             btst.b d7,(a0)            *
00:00000404 67FE            	   541:             beq.s *               * branch if Z set
                            	   542: 
                            	   543: * ---
                            	   544: 
                            	   545: 
                            	   546: *             EA = (An)+  - BYTE only
00:00000406 307C0100        	   547:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000040A 10FC0001        	   548:             move.b #$01,(a0)+         * populate test data
00:0000040E 10FC00FC        	   549:             move.b #$FC,(a0)+         * populate test data
00:00000412 10FC0080        	   550:             move.b #$80,(a0)+         * populate test data
00:00000416 307C0100        	   551:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000041A 0B18            	   552:             btst.b d5,(a0)+
00:0000041C 67FE            	   553:             beq.s *               * branch if Z set
00:0000041E 0D18            	   554:             btst.b d6,(a0)+           *
00:00000420 66FE            	   555:             bne.s *               * branch if Z clear
00:00000422 0F18            	   556:             btst.b d7,(a0)+           *
00:00000424 67FE            	   557:             beq.s *               * branch if Z set
                            	   558: 
                            	   559: 
                            	   560: *             EA = -(An)  - BYTE only
00:00000426 307C0100        	   561:             move.l #$00000100,a0      * point to memory to address
00:0000042A 10FC0080        	   562:             move.b #$80,(a0)+         * populate test data
00:0000042E 10FC00FC        	   563:             move.b #$FC,(a0)+         * populate test data
00:00000432 10FC0001        	   564:             move.b #$01,(a0)+         * populate test data
00:00000436 307C0103        	   565:             move.l #$00000103,a0      * point to memory to address
00:0000043A 0B20            	   566:             btst.b d5,-(a0)
00:0000043C 67FE            	   567:             beq.s *               * branch if Z set
00:0000043E 0D20            	   568:             btst.b d6,-(a0)           *
00:00000440 66FE            	   569:             bne.s *               * branch if Z clear
00:00000442 0F20            	   570:             btst.b d7,-(a0)           *
00:00000444 67FE            	   571:             beq.s *               * branch if Z set
                            	   572: 
                            	   573: 
                            	   574: *             EA = n(An)  - BYTE only
00:00000446 307C0100        	   575:             move.l #$00000100,a0      * point to memory to address
00:0000044A 10FC0001        	   576:             move.b #$01,(a0)+         * populate test data
00:0000044E 10FC00FC        	   577:             move.b #$FC,(a0)+         * populate test data
00:00000452 10FC0080        	   578:             move.b #$80,(a0)+         * populate test data
00:00000456 307C0100        	   579:             move.l #$00000100,a0      * point to memory to address
00:0000045A 0B10            	   580:             btst.b d5,0(a0)
00:0000045C 67FE            	   581:             beq.s *               * branch if Z set
00:0000045E 0D280001        	   582:             btst.b d6,1(a0)           *
00:00000462 66FE            	   583:             bne.s *               * branch if Z clear
00:00000464 0F280002        	   584:             btst.b d7,2(a0)           *
00:00000468 67FE            	   585:             beq.s *               * branch if Z set
                            	   586: 
                            	   587: 
                            	   588: *             EA = n(An,R.W)  - BYTE only
00:0000046A 307C0100        	   589:             move.l #$00000100,a0      * point to memory to address
00:0000046E 93C9            	   590:             move.l #$00000000,a1      * point to memory to address
00:00000470 347C0001        	   591:             move.l #$00000001,a2      * point to memory to address
00:00000474 7000            	   592:             moveq  #$00000000,d0      * point to memory to address
00:00000476 7201            	   593:             moveq  #$00000001,d1      * point to memory to address
00:00000478 0B300000        	   594:             btst.b d5,0(a0,d0.w)
00:0000047C 67FE            	   595:             beq.s *               * branch if Z set
00:0000047E 0D301000        	   596:             btst.b d6,0(a0,d1.w)      *
00:00000482 66FE            	   597:             bne.s *               * branch if Z clear
00:00000484 0F301001        	   598:             btst.b d7,1(a0,d1.w)      *
00:00000488 67FE            	   599:             beq.s *               * branch if Z set
                            	   600: *             EA = n(An,R.L)  - BYTE only
00:0000048A 0B300800        	   601:             btst.b d5,0(a0,d0.l)
00:0000048E 67FE            	   602:             beq.s *               * branch if Z set
00:00000490 0D301800        	   603:             btst.b d6,0(a0,d1.l)      *
00:00000494 66FE            	   604:             bne.s *               * branch if Z clear
00:00000496 0F301801        	   605:             btst.b d7,1(a0,d1.l)      *
00:0000049A 67FE            	   606:             beq.s *               * branch if Z set
                            	   607: *             EA = n(An,A.W)  - BYTE only
00:0000049C 0B309000        	   608:             btst.b d5,0(a0,a1.w)
00:000004A0 67FE            	   609:             beq.s *               * branch if Z set
00:000004A2 0D30A000        	   610:             btst.b d6,0(a0,a2.w)      *
00:000004A6 66FE            	   611:             bne.s *               * branch if Z clear
00:000004A8 0F30A001        	   612:             btst.b d7,1(a0,a2.w)      *
00:000004AC 67FE            	   613:             beq.s *               * branch if Z set
                            	   614: *             EA = n(An,A.L)  - BYTE only
00:000004AE 0B309800        	   615:             btst.b d5,0(a0,a1.l)
00:000004B2 67FE            	   616:             beq.s *               * branch if Z set
00:000004B4 0D30A800        	   617:             btst.b d6,0(a0,a2.l)      *
00:000004B8 66FE            	   618:             bne.s *               * branch if Z clear
00:000004BA 0F30A801        	   619:             btst.b d7,1(a0,a2.l)      *
00:000004BE 67FE            	   620:             beq.s *               * branch if Z set
                            	   621: 
                            	   622: 
                            	   623: *             EA = x.W  - BYTE only
00:000004C0 0B380100        	   624:             btst.b d5,$0100
00:000004C4 67FE            	   625:             beq.s *               * branch if Z set
00:000004C6 0D380101        	   626:             btst.b d6,$0101           *
00:000004CA 66FE            	   627:             bne.s *               * branch if Z clear
00:000004CC 0F380102        	   628:             btst.b d7,$0102           *
00:000004D0 67FE            	   629:             beq.s *               * branch if Z set
                            	   630: 
                            	   631: 
                            	   632: *             EA = x.L  - BYTE only
00:000004D2 207C0000F100    	   633:             move.l #$F100,a0      * point to memory to address 0x100
00:000004D8 10FC0001        	   634:             move.b #$01,(a0)+         * populate test data
00:000004DC 10FC00FC        	   635:             move.b #$FC,(a0)+         * populate test data
00:000004E0 10FC0080        	   636:             move.b #$80,(a0)+         * populate test data
00:000004E4 0B390000F100    	   637:             btst.b d5,$F100
00:000004EA 67FE            	   638:             beq.s *               * branch if Z set
00:000004EC 0D390000F101    	   639:             btst.b d6,$F101       *
00:000004F2 66FE            	   640:             bne.s *               * branch if Z clear
00:000004F4 0F390000F102    	   641:             btst.b d7,$F102       *
00:000004FA 67FE            	   642:             beq.s *               * branch if Z set
                            	   643: 
                            	   644: 
                            	   645: *             EA = x(PC)  - BYTE only
00:000004FC 7C03            	   646:             move.l #3,d6              * populate bit.s number to test
00:000004FE 7E06            	   647:             move.l #6,d7              * populate bit.s number to test
00:00000500 4BFAFCE2        	   648:             lea op_BTST(pc),a5
00:00000504 0B3AFCDE        	   649:             btst.b d5,op_BTST(pc)
00:00000508 66FE            	   650:             bne.s *               * branch if Z clear
00:0000050A 0D3AFE62        	   651:             btst.b d6,op_BTST0(pc)     *
00:0000050E 67FE            	   652:             beq.s *               * branch if Z set
00:00000510 0F3AFEBE        	   653:             btst.b d7,op_BTST12(pc)    *
00:00000514 67FE            	   654:             beq.s *               * branch if Z set
                            	   655: 
                            	   656: 
                            	   657: *             EA = n(PC,R.W)  - BYTE only
00:00000516 307C0100        	   658:             move.l #$00000100,a0      * point to memory to address
00:0000051A 93C9            	   659:             move.l #$00000000,a1      * point to memory to address
00:0000051C 347C0001        	   660:             move.l #$00000001,a2      * point to memory to address
00:00000520 7000            	   661:             moveq  #$00000000,d0      * point to memory to address
00:00000522 7201            	   662:             moveq  #$00000001,d1      * point to memory to address
00:00000524 7C01            	   663:             move.l #1,d6              * populate bit.s number to test
00:00000526 7E07            	   664:             move.l #7,d7              * populate bit.s number to test
                            	   665: 
00:00000528 0B3B00FE        	   666: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:0000052C 67FE            	   667:             beq.s *               * branch if Z set
00:0000052E 4BFB1002        	   668:             lea op_BTST21(pc,d1.w),a5
00:00000532 0D3B10FE        	   669: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:00000536 67FE            	   670:             beq.s *               * branch if Z set
00:00000538 0F3B10FE        	   671: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:0000053C 66FE            	   672:             bne.s *               * branch if Z clear
                            	   673: *             EA = n(PC,R.L)  - BYTE only
00:0000053E 0B3B08FE        	   674: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:00000542 67FE            	   675:             beq.s *               * branch if Z set
00:00000544 0D3B18FE        	   676: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:00000548 67FE            	   677:             beq.s *               * branch if Z set
00:0000054A 0F3B18FE        	   678: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:0000054E 66FE            	   679:             bne.s *               * branch if Z clear
                            	   680: *             EA = n(PC,A.W)  - BYTE only
00:00000550 0B3B90FE        	   681: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:00000554 67FE            	   682:             beq.s *               * branch if Z set
00:00000556 0D3BA0FE        	   683: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:0000055A 67FE            	   684:             beq.s *               * branch if Z set
00:0000055C 0F3BA0FE        	   685: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:00000560 66FE            	   686:             bne.s *               * branch if Z clear
                            	   687: *             EA = n(PC,A.L)  - BYTE only
00:00000562 0B3B98FE        	   688: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:00000566 67FE            	   689:             beq.s *               * branch if Z set
00:00000568 0D3BA8FE        	   690: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:0000056C 67FE            	   691:             beq.s *               * branch if Z set
00:0000056E 0F3BA8FE        	   692: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:00000572 66FE            	   693: op_BTST32:  bne.s *               * branch if Z clear
                            	   694: 
                            	   695: *             EA = #x  - BYTE only
                            	   696: 
00:00000574 7A00            	   697:             move.l #0,d5              * populate bit.s number to test
00:00000576 7C03            	   698:             move.l #3,d6              * populate bit.s number to test
00:00000578 7E07            	   699:             move.l #7,d7              * populate bit.s number to test
                            	   700: 
00:0000057A 0B3C0088        	   701:             btst.b d5,#$88
00:0000057E 66FE            	   702:             bne.s *               * branch if Z clear
00:00000580 0D3C0088        	   703:             btst.b d6,#$88
00:00000584 67FE            	   704:             beq.s *               * branch if Z set
00:00000586 0F3C0088        	   705:             btst.b d7,#$88
00:0000058A 67FE            	   706:             beq.s *               * branch if Z set
                            	   707: 
                            	   708: 
00:0000058C 4E75            	   709:     rts
                            	   710: 
                            	   711: *-----------------------------------------------------------
                            	   712: *-----------------------------------------------------------
                            	   713: * OPCODE : BCHG
                            	   714: *-----------------------------------------------------------
                            	   715: *-----------------------------------------------------------
                            	   716: op_BCHG:
                            	   717: 
                            	   718: 
                            	   719: *  Bit Number.s Static
                            	   720: 
                            	   721: *             EA = Dn  - LONG only
00:0000058E 203C80000001    	   722:             move.l #$80000001,d0      * populate test data
00:00000594 08400000        	   723:             bchg.l #0,d0
00:00000598 67FE            	   724:             beq.s *               * branch if Z set
00:0000059A 08400001        	   725:             bchg.l #1,d0              *
00:0000059E 66FE            	   726:             bne.s *               * branch if Z clear
00:000005A0 0840001F        	   727:             bchg.l #31,d0             *
00:000005A4 67FE            	   728:             beq.s *               * branch if Z set
00:000005A6 0C8000000002    	   729:             cmpi.l #$00000002,d0
00:000005AC 66FE            	   730:             bne.s *               * branch if Z clear
                            	   731: 
                            	   732: 
                            	   733: *             EA = (An)  - BYTE only
00:000005AE 307C0100        	   734:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005B2 10BC0081        	   735:             move.b #$81,(a0)          * populate test data
00:000005B6 1210            	   736:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000005B8 08500000        	   737:             bchg.b #0,(a0)
00:000005BC 67FE            	   738:             beq.s *               * branch if Z set
00:000005BE 08500001        	   739:             bchg.b #1,(a0)            *
00:000005C2 66FE            	   740:             bne.s *               * branch if Z clear
00:000005C4 08500007        	   741:             bchg.b #7,(a0)            *
00:000005C8 67FE            	   742:             beq.s *               * branch if Z set
00:000005CA 0C100002        	   743:             cmpi.b #$02,(a0)
00:000005CE 66FE            	   744:             bne.s *               * branch if Z clear
                            	   745: 
                            	   746: *             EA = (An)+  - BYTE only
00:000005D0 307C0100        	   747:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005D4 10FC0001        	   748:             move.b #$01,(a0)+         * populate test data
00:000005D8 10FC00FC        	   749:             move.b #$FC,(a0)+         * populate test data
00:000005DC 10FC0080        	   750:             move.b #$80,(a0)+         * populate test data
00:000005E0 307C0100        	   751:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005E4 08580000        	   752:             bchg.b #0,(a0)+
00:000005E8 67FE            	   753:             beq.s *               * branch if Z set
00:000005EA 08580001        	   754:             bchg.b #1,(a0)+           *
00:000005EE 66FE            	   755:             bne.s *               * branch if Z clear
00:000005F0 08580007        	   756:             bchg.b #7,(a0)+           *
00:000005F4 67FE            	   757:             beq.s *               * branch if Z set
00:000005F6 307C0100        	   758:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005FA 4A18            	   759:             cmpi.b #$00,(a0)+
00:000005FC 66FE            	   760:             bne.s *               * branch if Z clear
00:000005FE 0C1800FE        	   761:             cmpi.b #$FE,(a0)+
00:00000602 66FE            	   762:             bne.s *               * branch if Z clear
00:00000604 4A18            	   763:             cmpi.b #$00,(a0)+
00:00000606 66FE            	   764:             bne.s *               * branch if Z clear
                            	   765: 
                            	   766: *             EA = -(An)  - BYTE only
00:00000608 307C0100        	   767:             move.l #$00000100,a0      * point to memory to address
00:0000060C 10FC0080        	   768:             move.b #$80,(a0)+         * populate test data
00:00000610 10FC00FC        	   769:             move.b #$FC,(a0)+         * populate test data
00:00000614 10FC0001        	   770:             move.b #$01,(a0)+         * populate test data
00:00000618 307C0103        	   771:             move.l #$00000103,a0      * point to memory to address
00:0000061C 08600000        	   772:             bchg.b #0,-(a0)
00:00000620 67FE            	   773:             beq.s *               * branch if Z set
00:00000622 08600001        	   774:             bchg.b #1,-(a0)           *
00:00000626 66FE            	   775:             bne.s *               * branch if Z clear
00:00000628 08600007        	   776:             bchg.b #7,-(a0)           *
00:0000062C 67FE            	   777:             beq.s *               * branch if Z set
00:0000062E 307C0103        	   778:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000632 4A20            	   779:             cmpi.b #$00,-(a0)
00:00000634 66FE            	   780:             bne.s *               * branch if Z clear
00:00000636 0C2000FE        	   781:             cmpi.b #$FE,-(a0)
00:0000063A 66FE            	   782:             bne.s *               * branch if Z clear
00:0000063C 4A20            	   783:             cmpi.b #$00,-(a0)
00:0000063E 66FE            	   784:             bne.s *               * branch if Z clear
                            	   785: 
                            	   786: 
                            	   787: *             EA = n(An)  - BYTE only
00:00000640 307C0100        	   788:             move.l #$00000100,a0      * point to memory to address
00:00000644 10FC0001        	   789:             move.b #$01,(a0)+         * populate test data
00:00000648 10FC00FC        	   790:             move.b #$FC,(a0)+         * populate test data
00:0000064C 10FC0080        	   791:             move.b #$80,(a0)+         * populate test data
00:00000650 307C0100        	   792:             move.l #$00000100,a0      * point to memory to address
00:00000654 08500000        	   793:             bchg.b #0,0(a0)
00:00000658 67FE            	   794:             beq.s *               * branch if Z set
00:0000065A 086800010001    	   795:             bchg.b #1,1(a0)           *
00:00000660 66FE            	   796:             bne.s *               * branch if Z clear
00:00000662 086800070002    	   797:             bchg.b #7,2(a0)           *
00:00000668 67FE            	   798:             beq.s *               * branch if Z set
00:0000066A 307C0100        	   799:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000066E 4A18            	   800:             cmpi.b #$00,(a0)+
00:00000670 66FE            	   801:             bne.s *               * branch if Z clear
00:00000672 0C1800FE        	   802:             cmpi.b #$FE,(a0)+
00:00000676 66FE            	   803:             bne.s *               * branch if Z clear
00:00000678 4A18            	   804:             cmpi.b #$00,(a0)+
00:0000067A 66FE            	   805:             bne.s *               * branch if Z clear
                            	   806: 
                            	   807: 
                            	   808: *             EA = n(An,D.W)  - BYTE only
00:0000067C 307C0100        	   809:             move.l #$00000100,a0      * point to memory to address
00:00000680 93C9            	   810:             move.l #$00000000,a1      * point to memory to address
00:00000682 347C0001        	   811:             move.l #$00000001,a2      * point to memory to address
00:00000686 7000            	   812:             moveq  #$00000000,d0      * point to memory to address
00:00000688 7201            	   813:             moveq  #$00000001,d1      * point to memory to address
00:0000068A 087000000000    	   814:             bchg.b #0,0(a0,d0.w)
00:00000690 66FE            	   815:             bne.s *               * branch if Z clear
00:00000692 087000011000    	   816:             bchg.b #1,0(a0,d1.w)      *
00:00000698 67FE            	   817:             beq.s *               * branch if Z set
00:0000069A 087000071001    	   818:             bchg.b #7,1(a0,d1.w)      *
00:000006A0 66FE            	   819:             bne.s *               * branch if Z clear
                            	   820: *             EA = n(An,D.L)  - BYTE only
00:000006A2 087000000800    	   821:             bchg.b #0,0(a0,d0.l)
00:000006A8 67FE            	   822:             beq.s *               * branch if Z set
00:000006AA 087000011800    	   823:             bchg.b #1,0(a0,d1.l)      *
00:000006B0 66FE            	   824:             bne.s *               * branch if Z clear
00:000006B2 087000071801    	   825:             bchg.b #7,1(a0,d1.l)      *
00:000006B8 67FE            	   826:             beq.s *               * branch if Z set
                            	   827: *             EA = n(An,A.W)  - BYTE only
00:000006BA 087000009000    	   828:             bchg.b #0,0(a0,a1.w)
00:000006C0 66FE            	   829:             bne.s *               * branch if Z clear
00:000006C2 08700001A000    	   830:             bchg.b #1,0(a0,a2.w)      *
00:000006C8 67FE            	   831:             beq.s *               * branch if Z set
00:000006CA 08700007A001    	   832:             bchg.b #7,1(a0,a2.w)      *
00:000006D0 66FE            	   833:             bne.s *               * branch if Z clear
                            	   834: *             EA = n(An,A.L)  - BYTE only
00:000006D2 087000009800    	   835:             bchg.b #0,0(a0,a1.l)
00:000006D8 67FE            	   836:             beq.s *               * branch if Z set
00:000006DA 08700001A800    	   837:             bchg.b #1,0(a0,a2.l)      *
00:000006E0 66FE            	   838:             bne.s *               * branch if Z clear
00:000006E2 08700007A801    	   839:             bchg.b #7,1(a0,a2.l)      *
00:000006E8 67FE            	   840:             beq.s *               * branch if Z set
00:000006EA 307C0100        	   841:             move.l #$00000100,a0      * point to memory to address 0x100
00:000006EE 4A18            	   842:             cmpi.b #$00,(a0)+
00:000006F0 66FE            	   843:             bne.s *               * branch if Z clear
00:000006F2 0C1800FE        	   844:             cmpi.b #$FE,(a0)+
00:000006F6 66FE            	   845:             bne.s *               * branch if Z clear
00:000006F8 4A18            	   846:             cmpi.b #$00,(a0)+
00:000006FA 66FE            	   847:             bne.s *               * branch if Z clear
                            	   848: 
                            	   849: 
                            	   850: *             EA = x.W  - BYTE only
00:000006FC 087800000100    	   851:             bchg.b #0,$0100
00:00000702 66FE            	   852:             bne.s *               * branch if Z clear
00:00000704 087800010101    	   853:             bchg.b #1,$0101           *
00:0000070A 67FE            	   854:             beq.s *               * branch if Z set
00:0000070C 087800070102    	   855:             bchg.b #7,$0102           *
00:00000712 66FE            	   856:             bne.s *               * branch if Z clear
00:00000714 307C0100        	   857:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000718 0C180001        	   858:             cmpi.b #$01,(a0)+
00:0000071C 66FE            	   859:             bne.s *               * branch if Z clear
00:0000071E 0C1800FC        	   860:             cmpi.b #$FC,(a0)+
00:00000722 66FE            	   861:             bne.s *               * branch if Z clear
00:00000724 0C180080        	   862:             cmpi.b #$80,(a0)+
00:00000728 66FE            	   863:             bne.s *               * branch if Z clear
                            	   864: 
                            	   865: *             EA = x.L  - BYTE only
00:0000072A 207C0000F100    	   866:             move.l #$F100,a0      * point to memory to address 0x100
00:00000730 10FC0001        	   867:             move.b #$01,(a0)+         * populate test data
00:00000734 10FC00FC        	   868:             move.b #$FC,(a0)+         * populate test data
00:00000738 10FC0080        	   869:             move.b #$80,(a0)+         * populate test data
00:0000073C 087900000000F100	   870:             bchg.b #0,$F100
00:00000744 67FE            	   871:             beq.s *               * branch if Z set
00:00000746 087900010000F101	   872:             bchg.b #1,$F101       *
00:0000074E 66FE            	   873:             bne.s *               * branch if Z clear
00:00000750 087900070000F102	   874:             bchg.b #7,$F102       *
00:00000758 67FE            	   875:             beq.s *               * branch if Z set
00:0000075A 307C0100        	   876:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000075E 0C180001        	   877:             cmpi.b #$01,(a0)+
00:00000762 66FE            	   878:             bne.s *               * branch if Z clear
00:00000764 0C1800FC        	   879:             cmpi.b #$FC,(a0)+
00:00000768 66FE            	   880:             bne.s *               * branch if Z clear
00:0000076A 0C180080        	   881:             cmpi.b #$80,(a0)+
00:0000076E 66FE            	   882:             bne.s *               * branch if Z clear
                            	   883: 
                            	   884: 
                            	   885: * Bit Number.s Dynamic
                            	   886: 
                            	   887: *             EA = Dn  - LONG only
00:00000770 203C80000001    	   888:             move.l #$80000001,d0      * populate test data
00:00000776 7A00            	   889:             move.l #0,d5              * populate bit.s number to test
00:00000778 7C01            	   890:             move.l #1,d6              * populate bit.s number to test
00:0000077A 7E1F            	   891:             move.l #31,d7              * populate bit.s number to test
                            	   892: 
00:0000077C 0B40            	   893:             bchg.l d5,d0
00:0000077E 67FE            	   894:             beq.s *               * branch if Z set
00:00000780 0D40            	   895:             bchg.l d6,d0              *
00:00000782 66FE            	   896:             bne.s *               * branch if Z clear
00:00000784 0F40            	   897:             bchg.l d7,d0             *
00:00000786 67FE            	   898:             beq.s *               * branch if Z set
00:00000788 0C8000000002    	   899:             cmpi.l #$00000002,d0
00:0000078E 66FE            	   900:             bne.s *               * branch if Z clear
                            	   901: 
                            	   902: 
                            	   903: *             EA = (An)  - BYTE only
00:00000790 7A00            	   904:             move.l #0,d5              * populate bit.s number to test
00:00000792 7C01            	   905:             move.l #1,d6              * populate bit.s number to test
00:00000794 7E07            	   906:             move.l #7,d7              * populate bit.s number to test
00:00000796 307C0100        	   907:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000079A 10BC0081        	   908:             move.b #$81,(a0)          * populate test data
00:0000079E 1210            	   909:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000007A0 0B50            	   910:             bchg.b d5,(a0)
00:000007A2 67FE            	   911:             beq.s *               * branch if Z set
00:000007A4 0D50            	   912:             bchg.b d6,(a0)            *
00:000007A6 66FE            	   913:             bne.s *               * branch if Z clear
00:000007A8 0F50            	   914:             bchg.b d7,(a0)            *
00:000007AA 67FE            	   915:             beq.s *               * branch if Z set
00:000007AC 0C100002        	   916:             cmpi.b #$02,(a0)
00:000007B0 66FE            	   917:             bne.s *               * branch if Z clear
                            	   918: 
                            	   919: 
                            	   920: *             EA = (An)+  - BYTE only
00:000007B2 307C0100        	   921:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007B6 10FC0001        	   922:             move.b #$01,(a0)+         * populate test data
00:000007BA 10FC00FC        	   923:             move.b #$FC,(a0)+         * populate test data
00:000007BE 10FC0080        	   924:             move.b #$80,(a0)+         * populate test data
00:000007C2 307C0100        	   925:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007C6 0B58            	   926:             bchg.b d5,(a0)+
00:000007C8 67FE            	   927:             beq.s *               * branch if Z set
00:000007CA 0D58            	   928:             bchg.b d6,(a0)+           *
00:000007CC 66FE            	   929:             bne.s *               * branch if Z clear
00:000007CE 0F58            	   930:             bchg.b d7,(a0)+           *
00:000007D0 67FE            	   931:             beq.s *               * branch if Z set
00:000007D2 307C0100        	   932:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007D6 4A18            	   933:             cmpi.b #$00,(a0)+
00:000007D8 66FE            	   934:             bne.s *               * branch if Z clear
00:000007DA 0C1800FE        	   935:             cmpi.b #$FE,(a0)+
00:000007DE 66FE            	   936:             bne.s *               * branch if Z clear
00:000007E0 4A18            	   937:             cmpi.b #$00,(a0)+
00:000007E2 66FE            	   938:             bne.s *               * branch if Z clear
                            	   939: 
                            	   940: *             EA = -(An)  - BYTE only
00:000007E4 307C0100        	   941:             move.l #$00000100,a0      * point to memory to address
00:000007E8 10FC0080        	   942:             move.b #$80,(a0)+         * populate test data
00:000007EC 10FC00FC        	   943:             move.b #$FC,(a0)+         * populate test data
00:000007F0 10FC0001        	   944:             move.b #$01,(a0)+         * populate test data
00:000007F4 307C0103        	   945:             move.l #$00000103,a0      * point to memory to address
00:000007F8 0B60            	   946:             bchg.b d5,-(a0)
00:000007FA 67FE            	   947:             beq.s *               * branch if Z set
00:000007FC 0D60            	   948:             bchg.b d6,-(a0)           *
00:000007FE 66FE            	   949:             bne.s *               * branch if Z clear
00:00000800 0F60            	   950:             bchg.b d7,-(a0)           *
00:00000802 67FE            	   951:             beq.s *               * branch if Z set
00:00000804 307C0103        	   952:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000808 4A20            	   953:             cmpi.b #$00,-(a0)
00:0000080A 66FE            	   954:             bne.s *               * branch if Z clear
00:0000080C 0C2000FE        	   955:             cmpi.b #$FE,-(a0)
00:00000810 66FE            	   956:             bne.s *               * branch if Z clear
00:00000812 4A20            	   957:             cmpi.b #$00,-(a0)
00:00000814 66FE            	   958:             bne.s *               * branch if Z clear
                            	   959: 
                            	   960: *             EA = n(An)  - BYTE only
00:00000816 307C0100        	   961:             move.l #$00000100,a0      * point to memory to address
00:0000081A 10FC0001        	   962:             move.b #$01,(a0)+         * populate test data
00:0000081E 10FC00FC        	   963:             move.b #$FC,(a0)+         * populate test data
00:00000822 10FC0080        	   964:             move.b #$80,(a0)+         * populate test data
00:00000826 307C0100        	   965:             move.l #$00000100,a0      * point to memory to address
00:0000082A 0B50            	   966:             bchg.b d5,0(a0)
00:0000082C 67FE            	   967:             beq.s *               * branch if Z set
00:0000082E 0D680001        	   968:             bchg.b d6,1(a0)           *
00:00000832 66FE            	   969:             bne.s *               * branch if Z clear
00:00000834 0F680002        	   970:             bchg.b d7,2(a0)           *
00:00000838 67FE            	   971:             beq.s *               * branch if Z set
00:0000083A 307C0100        	   972:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000083E 4A18            	   973:             cmpi.b #$00,(a0)+
00:00000840 66FE            	   974:             bne.s *               * branch if Z clear
00:00000842 0C1800FE        	   975:             cmpi.b #$FE,(a0)+
00:00000846 66FE            	   976:             bne.s *               * branch if Z clear
00:00000848 4A18            	   977:             cmpi.b #$00,(a0)+
00:0000084A 66FE            	   978:             bne.s *               * branch if Z clear
                            	   979: 
                            	   980: *             EA = n(An,R.W)  - BYTE only
00:0000084C 307C0100        	   981:             move.l #$00000100,a0      * point to memory to address
00:00000850 93C9            	   982:             move.l #$00000000,a1      * point to memory to address
00:00000852 347C0001        	   983:             move.l #$00000001,a2      * point to memory to address
00:00000856 7000            	   984:             moveq  #$00000000,d0      * point to memory to address
00:00000858 7201            	   985:             moveq  #$00000001,d1      * point to memory to address
00:0000085A 0B700000        	   986:             bchg.b d5,0(a0,d0.w)
00:0000085E 66FE            	   987:             bne.s *               * branch if Z clear
00:00000860 0D701000        	   988:             bchg.b d6,0(a0,d1.w)      *
00:00000864 67FE            	   989:             beq.s *               * branch if Z set
00:00000866 0F701001        	   990:             bchg.b d7,1(a0,d1.w)      *
00:0000086A 66FE            	   991:             bne.s *               * branch if Z clear
                            	   992: *             EA = n(An,R.L)  - BYTE only
00:0000086C 0B700800        	   993:             bchg.b d5,0(a0,d0.l)
00:00000870 67FE            	   994:             beq.s *               * branch if Z set
00:00000872 0D701800        	   995:             bchg.b d6,0(a0,d1.l)      *
00:00000876 66FE            	   996:             bne.s *               * branch if Z clear
00:00000878 0F701801        	   997:             bchg.b d7,1(a0,d1.l)      *
00:0000087C 67FE            	   998:             beq.s *               * branch if Z set
                            	   999: *             EA = n(An,A.W)  - BYTE only
00:0000087E 0B709000        	  1000:             bchg.b d5,0(a0,a1.w)
00:00000882 66FE            	  1001:             bne.s *               * branch if Z clear
00:00000884 0D70A000        	  1002:             bchg.b d6,0(a0,a2.w)      *
00:00000888 67FE            	  1003:             beq.s *               * branch if Z set
00:0000088A 0F70A001        	  1004:             bchg.b d7,1(a0,a2.w)      *
00:0000088E 66FE            	  1005:             bne.s *               * branch if Z clear
                            	  1006: *             EA = n(An,A.L)  - BYTE only
00:00000890 0B709800        	  1007:             bchg.b d5,0(a0,a1.l)
00:00000894 67FE            	  1008:             beq.s *               * branch if Z set
00:00000896 0D70A800        	  1009:             bchg.b d6,0(a0,a2.l)      *
00:0000089A 66FE            	  1010:             bne.s *               * branch if Z clear
00:0000089C 0F70A801        	  1011:             bchg.b d7,1(a0,a2.l)      *
00:000008A0 67FE            	  1012:             beq.s *               * branch if Z set
00:000008A2 4A18            	  1013:             cmpi.b #$00,(a0)+
00:000008A4 66FE            	  1014:             bne.s *               * branch if Z clear
                            	  1015: 
                            	  1016: *             EA = x.W  - BYTE only
00:000008A6 0B780100        	  1017:             bchg.b d5,$0100
00:000008AA 66FE            	  1018:             bne.s *               * branch if Z clear
00:000008AC 0D780101        	  1019:             bchg.b d6,$0101           *
00:000008B0 67FE            	  1020:             beq.s *               * branch if Z set
00:000008B2 0F780102        	  1021:             bchg.b d7,$0102           *
00:000008B6 66FE            	  1022:             bne.s *               * branch if Z clear
00:000008B8 0C1800FC        	  1023:             cmpi.b #$FC,(a0)+
00:000008BC 66FE            	  1024:             bne.s *               * branch if Z clear
                            	  1025: 
                            	  1026: *             EA = x.L  - BYTE only
00:000008BE 207C0000F100    	  1027:             move.l #$F100,a0      * point to memory to address 0x100
00:000008C4 10FC0001        	  1028:             move.b #$01,(a0)+         * populate test data
00:000008C8 10FC00FC        	  1029:             move.b #$FC,(a0)+         * populate test data
00:000008CC 10FC0080        	  1030:             move.b #$80,(a0)+         * populate test data
00:000008D0 0B790000F100    	  1031:             bchg.b d5,$F100
00:000008D6 67FE            	  1032:             beq.s *               * branch if Z set
00:000008D8 0D790000F101    	  1033:             bchg.b d6,$F101       *
00:000008DE 66FE            	  1034:             bne.s *               * branch if Z clear
00:000008E0 0F790000F102    	  1035:             bchg.b d7,$F102       *
00:000008E6 67FE            	  1036:             beq.s *               * branch if Z set
00:000008E8 207C0000F101    	  1037:             move.l #$F101,a0      * point to memory to address 0x100
00:000008EE 0C1000FE        	  1038:             cmpi.b #$FE,(a0)
00:000008F2 66FE            	  1039:             bne.s *               * branch if Z clear
                            	  1040: 
                            	  1041: 
00:000008F4 4E75            	  1042:     rts
                            	  1043: 
                            	  1044: *-----------------------------------------------------------
                            	  1045: *-----------------------------------------------------------
                            	  1046: * OPCODE : BCLR
                            	  1047: *-----------------------------------------------------------
                            	  1048: *-----------------------------------------------------------
                            	  1049: op_BCLR:
                            	  1050: 
                            	  1051: 
                            	  1052: *  Bit Number.s Static
                            	  1053: 
                            	  1054: *             EA = Dn  - LONG only
00:000008F6 203CFF0000FF    	  1055:             move.l #$FF0000FF,d0      * populate test data
00:000008FC 08800000        	  1056:             bclr.l #0,d0
00:00000900 67FE            	  1057:             beq.s *               * branch if Z set
00:00000902 08800001        	  1058:             bclr.l #1,d0              *
00:00000906 67FE            	  1059:             beq.s *               * branch if Z set
00:00000908 0880000F        	  1060:             bclr.l #15,d0             *
00:0000090C 66FE            	  1061:             bne.s *               * branch if Z clear
00:0000090E 0880001F        	  1062:             bclr.l #31,d0             *
00:00000912 67FE            	  1063:             beq.s *               * branch if Z set
00:00000914 0C807F0000FC    	  1064:             cmpi.l #$7F0000FC,d0
00:0000091A 66FE            	  1065:             bne.s *               * branch if Z clear
                            	  1066: 
                            	  1067: 
                            	  1068: *             EA = (An)  - BYTE only
00:0000091C 307C0100        	  1069:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000920 10BC000F        	  1070:             move.b #$0F,(a0)          * populate test data
00:00000924 08900000        	  1071:             bclr.b #0,(a0)
00:00000928 67FE            	  1072:             beq.s *               * branch if Z set
00:0000092A 08900007        	  1073:             bclr.b #7,(a0)            *
00:0000092E 66FE            	  1074:             bne.s *               * branch if Z clear
00:00000930 0C10000E        	  1075:             cmpi.b #$0E,(a0)
00:00000934 66FE            	  1076:             bne.s *               * branch if Z clear
                            	  1077: 
                            	  1078: *             EA = (An)+  - BYTE only
00:00000936 307C0100        	  1079:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000093A 10FC0001        	  1080:             move.b #$01,(a0)+         * populate test data
00:0000093E 10FC0000        	  1081:             move.b #$00,(a0)+         * populate test data
00:00000942 307C0100        	  1082:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000946 08980000        	  1083:             bclr.b #0,(a0)+
00:0000094A 67FE            	  1084:             beq.s *               * branch if Z set
00:0000094C 08980001        	  1085:             bclr.b #1,(a0)+           *
00:00000950 66FE            	  1086:             bne.s *               * branch if Z clear
00:00000952 307C0100        	  1087:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000956 4A18            	  1088:             cmpi.b #$00,(a0)+
00:00000958 66FE            	  1089:             bne.s *               * branch if Z clear
00:0000095A 4A18            	  1090:             cmpi.b #$00,(a0)+
00:0000095C 66FE            	  1091:             bne.s *               * branch if Z clear
                            	  1092: 
                            	  1093: 
                            	  1094: *             EA = -(An)  - BYTE only
00:0000095E 307C0100        	  1095:             move.l #$00000100,a0      * point to memory to address
00:00000962 10FC0001        	  1096:             move.b #$01,(a0)+         * populate test data
00:00000966 10FC0080        	  1097:             move.b #$80,(a0)+         * populate test data
00:0000096A 08A00007        	  1098:             bclr.b #7,-(a0)
00:0000096E 67FE            	  1099:             beq.s *               * branch if Z set
00:00000970 08A00000        	  1100:             bclr.b #0,-(a0)           *
00:00000974 67FE            	  1101:             beq.s *               * branch if Z set
00:00000976 307C0102        	  1102:             move.l #$00000102,a0      * point to memory to address 0x100
00:0000097A 4A20            	  1103:             cmpi.b #$00,-(a0)
00:0000097C 66FE            	  1104:             bne.s *               * branch if Z clear
00:0000097E 4A20            	  1105:             cmpi.b #$00,-(a0)
00:00000980 66FE            	  1106:             bne.s *               * branch if Z clear
                            	  1107: 
                            	  1108: 
                            	  1109: *             EA = n(An)  - BYTE only
00:00000982 307C0100        	  1110:             move.l #$00000100,a0      * point to memory to address
00:00000986 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
00:0000098A 10FC00FF        	  1112:             move.b #$FF,(a0)+         * populate test data
00:0000098E 307C0100        	  1113:             move.l #$00000100,a0      * point to memory to address
00:00000992 08900000        	  1114:             bclr.b #0,0(a0)
00:00000996 67FE            	  1115:             beq.s *               * branch if Z set
00:00000998 08A800040001    	  1116:             bclr.b #4,1(a0)           *
00:0000099E 67FE            	  1117:             beq.s *               * branch if Z set
00:000009A0 307C0100        	  1118:             move.l #$00000100,a0      * point to memory to address 0x100
00:000009A4 0C1800FE        	  1119:             cmpi.b #$FE,(a0)+
00:000009A8 66FE            	  1120:             bne.s *               * branch if Z clear
00:000009AA 0C1800EF        	  1121:             cmpi.b #$EF,(a0)+
00:000009AE 66FE            	  1122:             bne.s *               * branch if Z clear
                            	  1123: 
                            	  1124: 
                            	  1125: *             EA = n(An,D.W)  - BYTE only
00:000009B0 307C0100        	  1126:             move.l #$00000100,a0      * point to memory to address
00:000009B4 93C9            	  1127:             move.l #$00000000,a1      * point to memory to address
00:000009B6 347C0001        	  1128:             move.l #$00000001,a2      * point to memory to address
00:000009BA 7000            	  1129:             moveq  #$00000000,d0      * point to memory to address
00:000009BC 7201            	  1130:             moveq  #$00000001,d1      * point to memory to address
00:000009BE 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
00:000009C2 10FC00FF        	  1132:             move.b #$FF,(a0)+         * populate test data
00:000009C6 307C0100        	  1133:             move.l #$00000100,a0      * point to memory to address
00:000009CA 08B000000000    	  1134:             bclr.b #0,0(a0,d0.w)
00:000009D0 67FE            	  1135:             beq.s *               * branch if Z set
00:000009D2 08B000011000    	  1136:             bclr.b #1,0(a0,d1.w)      *
00:000009D8 67FE            	  1137:             beq.s *               * branch if Z set
00:000009DA 08B000021001    	  1138:             bclr.b #2,1(a0,d1.w)      *
00:000009E0 66FE            	  1139:             bne.s *               * branch if Z clear
                            	  1140: *             EA = n(An,D.L)  - BYTE only
00:000009E2 08B000030800    	  1141:             bclr.b #3,0(a0,d0.l)
00:000009E8 67FE            	  1142:             beq.s *               * branch if Z set
00:000009EA 08B000041800    	  1143:             bclr.b #4,0(a0,d1.l)      *
00:000009F0 67FE            	  1144:             beq.s *               * branch if Z set
00:000009F2 08B000051801    	  1145:             bclr.b #5,1(a0,d1.l)      *
00:000009F8 66FE            	  1146:             bne.s *               * branch if Z clear
                            	  1147: *             EA = n(An,A.W)  - BYTE only
00:000009FA 08B000069000    	  1148:             bclr.b #6,0(a0,a1.w)
00:00000A00 67FE            	  1149:             beq.s *               * branch if Z set
00:00000A02 08B00001A000    	  1150:             bclr.b #1,0(a0,a2.w)      *
00:00000A08 66FE            	  1151:             bne.s *               * branch if Z clear
00:00000A0A 08B00007A001    	  1152:             bclr.b #7,1(a0,a2.w)      *
00:00000A10 67FE            	  1153:             beq.s *               * branch if Z set
                            	  1154: *             EA = n(An,A.L)  - BYTE only
00:00000A12 08B000009800    	  1155:             bclr.b #0,0(a0,a1.l)
00:00000A18 66FE            	  1156:             bne.s *               * branch if Z clear
00:00000A1A 08B00000A800    	  1157:             bclr.b #0,0(a0,a2.l)      *
00:00000A20 67FE            	  1158:             beq.s *               * branch if Z set
00:00000A22 08B00001A801    	  1159:             bclr.b #1,1(a0,a2.l)      *
00:00000A28 66FE            	  1160:             bne.s *               * branch if Z clear
00:00000A2A 307C0100        	  1161:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A2E 0C1800B6        	  1162:             cmpi.b #$B6,(a0)+
00:00000A32 66FE            	  1163:             bne.s *               * branch if Z clear
00:00000A34 0C1800EC        	  1164:             cmpi.b #$EC,(a0)+
00:00000A38 66FE            	  1165:             bne.s *               * branch if Z clear
00:00000A3A 0C180059        	  1166:             cmpi.b #$59,(a0)+
00:00000A3E 67FE            	  1167:             beq.s *               * branch if Z set
                            	  1168: 
                            	  1169: 
                            	  1170: *             EA = x.W  - BYTE only
00:00000A40 307C0100        	  1171:             move.l #$00000100,a0      * point to memory to address
00:00000A44 10FC00FF        	  1172:             move.b #$FF,(a0)+         * populate test data
00:00000A48 08B800000100    	  1173:             bclr.b #0,$0100
00:00000A4E 67FE            	  1174:             beq.s *               * branch if Z set
00:00000A50 08B800010100    	  1175:             bclr.b #1,$0100           *
00:00000A56 67FE            	  1176:             beq.s *               * branch if Z set
00:00000A58 307C0100        	  1177:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A5C 0C1800FC        	  1178:             cmpi.b #$FC,(a0)+
00:00000A60 66FE            	  1179:             bne.s *               * branch if Z clear
                            	  1180: 
                            	  1181: 
                            	  1182: *             EA = x.L  - BYTE only
00:00000A62 207C0000F100    	  1183:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A68 10BC00FF        	  1184:             move.b #$FF,(a0)          * populate test data
00:00000A6C 08B900000000F100	  1185:             bclr.b #0,$F100
00:00000A74 67FE            	  1186:             beq.s *               * branch if Z set
00:00000A76 08B900010000F100	  1187:             bclr.b #1,$F100       *
00:00000A7E 67FE            	  1188:             beq.s *               * branch if Z set
00:00000A80 08B900020000F100	  1189:             bclr.b #2,$F100       *
00:00000A88 67FE            	  1190:             beq.s *               * branch if Z set
00:00000A8A 207C0000F100    	  1191:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A90 0C1800F8        	  1192:             cmpi.b #$F8,(a0)+
00:00000A94 66FE            	  1193:             bne.s *               * branch if Z clear
                            	  1194: 
                            	  1195: 
                            	  1196: * Bit Number.s Dynamic
                            	  1197: 
                            	  1198: *             EA = Dn  - LONG only
00:00000A96 203CFF00FF00    	  1199:             move.l #$FF00FF00,d0      * populate test data
00:00000A9C 7A00            	  1200:             move.l #0,d5              * populate bit.s number to test
00:00000A9E 7C01            	  1201:             move.l #1,d6              * populate bit.s number to test
00:00000AA0 7E1F            	  1202:             move.l #31,d7              * populate bit.s number to test
                            	  1203: 
00:00000AA2 0B80            	  1204:             bclr.l d5,d0
00:00000AA4 66FE            	  1205:             bne.s *               * branch if Z clear
00:00000AA6 0D80            	  1206:             bclr.l d6,d0              *
00:00000AA8 66FE            	  1207:             bne.s *               * branch if Z clear
00:00000AAA 0F80            	  1208:             bclr.l d7,d0             *
00:00000AAC 67FE            	  1209:             beq.s *               * branch if Z set
00:00000AAE 0C807F00FF00    	  1210:             cmpi.l #$7F00FF00,d0
00:00000AB4 66FE            	  1211:             bne.s *               * branch if Z clear
                            	  1212: 
                            	  1213: 
                            	  1214: *             EA = (An)  - BYTE only
00:00000AB6 7A00            	  1215:             move.l #0,d5              * populate bit.s number to test
00:00000AB8 7C01            	  1216:             move.l #1,d6              * populate bit.s number to test
00:00000ABA 7E07            	  1217:             move.l #7,d7              * populate bit.s number to test
00:00000ABC 307C0100        	  1218:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AC0 10BC0081        	  1219:             move.b #$81,(a0)          * populate test data
00:00000AC4 0B90            	  1220:             bclr.b d5,(a0)
00:00000AC6 67FE            	  1221:             beq.s *               * branch if Z set
00:00000AC8 0D90            	  1222:             bclr.b d6,(a0)            *
00:00000ACA 66FE            	  1223:             bne.s *               * branch if Z clear
00:00000ACC 0F90            	  1224:             bclr.b d7,(a0)            *
00:00000ACE 67FE            	  1225:             beq.s *               * branch if Z set
00:00000AD0 4A10            	  1226:             cmpi.b #$00,(a0)
00:00000AD2 66FE            	  1227:             bne.s *               * branch if Z clear
                            	  1228: 
                            	  1229: 
                            	  1230: *             EA = (An)+  - BYTE only
00:00000AD4 307C0100        	  1231:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AD8 10FC0001        	  1232:             move.b #$01,(a0)+         * populate test data
00:00000ADC 10FC00FC        	  1233:             move.b #$FC,(a0)+         * populate test data
00:00000AE0 10FC0080        	  1234:             move.b #$80,(a0)+         * populate test data
00:00000AE4 307C0100        	  1235:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AE8 0B98            	  1236:             bclr.b d5,(a0)+
00:00000AEA 67FE            	  1237:             beq.s *               * branch if Z set
00:00000AEC 0D98            	  1238:             bclr.b d6,(a0)+           *
00:00000AEE 66FE            	  1239:             bne.s *               * branch if Z clear
00:00000AF0 0F98            	  1240:             bclr.b d7,(a0)+           *
00:00000AF2 67FE            	  1241:             beq.s *               * branch if Z set
00:00000AF4 307C0100        	  1242:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AF8 4A18            	  1243:             cmpi.b #$00,(a0)+
00:00000AFA 66FE            	  1244:             bne.s *               * branch if Z clear
00:00000AFC 0C1800FC        	  1245:             cmpi.b #$FC,(a0)+
00:00000B00 66FE            	  1246:             bne.s *               * branch if Z clear
00:00000B02 4A18            	  1247:             cmpi.b #$00,(a0)+
00:00000B04 66FE            	  1248:             bne.s *               * branch if Z clear
                            	  1249: 
                            	  1250: *             EA = -(An)  - BYTE only
00:00000B06 307C0100        	  1251:             move.l #$00000100,a0      * point to memory to address
00:00000B0A 10FC0080        	  1252:             move.b #$80,(a0)+         * populate test data
00:00000B0E 10FC00FC        	  1253:             move.b #$FC,(a0)+         * populate test data
00:00000B12 10FC0001        	  1254:             move.b #$01,(a0)+         * populate test data
00:00000B16 307C0103        	  1255:             move.l #$00000103,a0      * point to memory to address
00:00000B1A 0BA0            	  1256:             bclr.b d5,-(a0)
00:00000B1C 67FE            	  1257:             beq.s *               * branch if Z set
00:00000B1E 0DA0            	  1258:             bclr.b d6,-(a0)           *
00:00000B20 66FE            	  1259:             bne.s *               * branch if Z clear
00:00000B22 0FA0            	  1260:             bclr.b d7,-(a0)           *
00:00000B24 67FE            	  1261:             beq.s *               * branch if Z set
00:00000B26 307C0103        	  1262:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000B2A 4A20            	  1263:             cmpi.b #$00,-(a0)
00:00000B2C 66FE            	  1264:             bne.s *               * branch if Z clear
00:00000B2E 0C2000FC        	  1265:             cmpi.b #$FC,-(a0)
00:00000B32 66FE            	  1266:             bne.s *               * branch if Z clear
00:00000B34 4A20            	  1267:             cmpi.b #$00,-(a0)
00:00000B36 66FE            	  1268:             bne.s *               * branch if Z clear
                            	  1269: 
                            	  1270: *             EA = n(An)  - BYTE only
00:00000B38 307C0100        	  1271:             move.l #$00000100,a0      * point to memory to address
00:00000B3C 10FC0001        	  1272:             move.b #$01,(a0)+         * populate test data
00:00000B40 10FC00FC        	  1273:             move.b #$FC,(a0)+         * populate test data
00:00000B44 10FC0080        	  1274:             move.b #$80,(a0)+         * populate test data
00:00000B48 307C0100        	  1275:             move.l #$00000100,a0      * point to memory to address
00:00000B4C 0B90            	  1276:             bclr.b d5,0(a0)
00:00000B4E 67FE            	  1277:             beq.s *               * branch if Z set
00:00000B50 0DA80001        	  1278:             bclr.b d6,1(a0)           *
00:00000B54 66FE            	  1279:             bne.s *               * branch if Z clear
00:00000B56 0FA80002        	  1280:             bclr.b d7,2(a0)           *
00:00000B5A 67FE            	  1281:             beq.s *               * branch if Z set
00:00000B5C 307C0100        	  1282:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000B60 4A18            	  1283:             cmpi.b #$00,(a0)+
00:00000B62 66FE            	  1284:             bne.s *               * branch if Z clear
00:00000B64 0C1800FC        	  1285:             cmpi.b #$FC,(a0)+
00:00000B68 66FE            	  1286:             bne.s *               * branch if Z clear
00:00000B6A 4A18            	  1287:             cmpi.b #$00,(a0)+
00:00000B6C 66FE            	  1288:             bne.s *               * branch if Z clear
                            	  1289: 
                            	  1290: *             EA = n(An,R.W)  - BYTE only
00:00000B6E 307C0100        	  1291:             move.l #$00000100,a0      * point to memory to address
00:00000B72 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:00000B76 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
00:00000B7A 10FC00FF        	  1294:             move.b #$FF,(a0)+         * populate test data
00:00000B7E 307C0103        	  1295:             move.l #$00000103,a0      * point to memory to address
00:00000B82 307C0100        	  1296:             move.l #$00000100,a0      * point to memory to address
00:00000B86 93C9            	  1297:             move.l #$00000000,a1      * point to memory to address
00:00000B88 347C0001        	  1298:             move.l #$00000001,a2      * point to memory to address
00:00000B8C 7000            	  1299:             moveq  #$00000000,d0      * point to memory to address
00:00000B8E 7201            	  1300:             moveq  #$00000001,d1      * point to memory to address
00:00000B90 0BB00000        	  1301:             bclr.b d5,0(a0,d0.w)
00:00000B94 67FE            	  1302:             beq.s *               * branch if Z set
00:00000B96 0DB01000        	  1303:             bclr.b d6,0(a0,d1.w)      *
00:00000B9A 67FE            	  1304:             beq.s *               * branch if Z set
00:00000B9C 0FB01001        	  1305:             bclr.b d7,1(a0,d1.w)      *
00:00000BA0 67FE            	  1306:             beq.s *               * branch if Z set
                            	  1307: *             EA = n(An,R.L)  - BYTE only
00:00000BA2 0BB00800        	  1308:             bclr.b d5,0(a0,d0.l)
00:00000BA6 66FE            	  1309:             bne.s *               * branch if Z clear
00:00000BA8 0DB01800        	  1310:             bclr.b d6,0(a0,d1.l)      *
00:00000BAC 66FE            	  1311:             bne.s *               * branch if Z clear
00:00000BAE 0FB01801        	  1312:             bclr.b d7,1(a0,d1.l)      *
00:00000BB2 66FE            	  1313:             bne.s *               * branch if Z clear
                            	  1314: *             EA = n(An,A.W)  - BYTE only
00:00000BB4 0BB09000        	  1315:             bclr.b d5,0(a0,a1.w)
00:00000BB8 66FE            	  1316:             bne.s *               * branch if Z clear
00:00000BBA 0DB0A000        	  1317:             bclr.b d6,0(a0,a2.w)      *
00:00000BBE 66FE            	  1318:             bne.s *               * branch if Z clear
00:00000BC0 0FB0A001        	  1319:             bclr.b d7,1(a0,a2.w)      *
00:00000BC4 66FE            	  1320:             bne.s *               * branch if Z clear
                            	  1321: *             EA = n(An,A.L)  - BYTE only
00:00000BC6 0BB09800        	  1322:             bclr.b d5,0(a0,a1.l)
00:00000BCA 66FE            	  1323:             bne.s *               * branch if Z clear
00:00000BCC 0DB0A800        	  1324:             bclr.b d6,0(a0,a2.l)      *
00:00000BD0 66FE            	  1325:             bne.s *               * branch if Z clear
00:00000BD2 0FB0A801        	  1326:             bclr.b d7,1(a0,a2.l)      *
00:00000BD6 66FE            	  1327:             bne.s *               * branch if Z clear
00:00000BD8 307C0100        	  1328:             move.l #$00000100,a0      * point to memory to address
00:00000BDC 0C1000FE        	  1329:             cmpi.b #$FE,(a0)
00:00000BE0 66FE            	  1330:             bne.s *               * branch if Z clear
                            	  1331: 
                            	  1332: *             EA = x.W  - BYTE only
00:00000BE2 307C0100        	  1333:             move.l #$00000100,a0      * point to memory to address
00:00000BE6 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:00000BEA 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
00:00000BEE 10FC00FF        	  1336:             move.b #$FF,(a0)+         * populate test data
00:00000BF2 0BB80100        	  1337:             bclr.b d5,$0100
00:00000BF6 67FE            	  1338:             beq.s *               * branch if Z set
00:00000BF8 0DB80101        	  1339:             bclr.b d6,$0101           *
00:00000BFC 67FE            	  1340:             beq.s *               * branch if Z set
00:00000BFE 0FB80102        	  1341:             bclr.b d7,$0102           *
00:00000C02 67FE            	  1342:             beq.s *               * branch if Z set
00:00000C04 307C0100        	  1343:             move.l #$00000100,a0      * point to memory to address
00:00000C08 0C1800FE        	  1344:             cmpi.b #$FE,(a0)+
00:00000C0C 66FE            	  1345:             bne.s *               * branch if Z clear
                            	  1346: 
                            	  1347: *             EA = x.L  - BYTE only
00:00000C0E 207C0000F100    	  1348:             move.l #$F100,a0      * point to memory to address 0x100
00:00000C14 10FC0001        	  1349:             move.b #$01,(a0)+         * populate test data
00:00000C18 10FC00FC        	  1350:             move.b #$FC,(a0)+         * populate test data
00:00000C1C 10FC0080        	  1351:             move.b #$80,(a0)+         * populate test data
00:00000C20 0BB90000F100    	  1352:             bclr.b d5,$F100
00:00000C26 67FE            	  1353:             beq.s *               * branch if Z set
00:00000C28 0DB90000F101    	  1354:             bclr.b d6,$F101       *
00:00000C2E 66FE            	  1355:             bne.s *               * branch if Z clear
00:00000C30 0FB90000F102    	  1356:             bclr.b d7,$F102       *
00:00000C36 67FE            	  1357:             beq.s *               * branch if Z set
00:00000C38 207C0000F101    	  1358:             move.l #$F101,a0      * point to memory to address 0x100
00:00000C3E 0C1000FC        	  1359:             cmpi.b #$FC,(a0)
00:00000C42 66FE            	  1360:             bne.s *               * branch if Z clear
                            	  1361: 
                            	  1362: 
                            	  1363: 
00:00000C44 4E75            	  1364:     rts
                            	  1365: 
                            	  1366: *-----------------------------------------------------------
                            	  1367: *-----------------------------------------------------------
                            	  1368: * OPCODE : BSET
                            	  1369: *-----------------------------------------------------------
                            	  1370: *-----------------------------------------------------------
                            	  1371: op_BSET:
                            	  1372: 
                            	  1373: 
                            	  1374: *  Bit Number.s Static
                            	  1375: 
                            	  1376: *             EA = Dn  - LONG only
00:00000C46 7000            	  1377:             moveq  #$00000000,d0      * populate test data
00:00000C48 08C00000        	  1378:             bset.l #0,d0
00:00000C4C 66FE            	  1379:             bne.s *               * branch if Z clear
00:00000C4E 08C00001        	  1380:             bset.l #1,d0              *
00:00000C52 66FE            	  1381:             bne.s *               * branch if Z clear
00:00000C54 08C0000F        	  1382:             bset.l #15,d0             *
00:00000C58 66FE            	  1383:             bne.s *               * branch if Z clear
00:00000C5A 08C0001F        	  1384:             bset.l #31,d0             *
00:00000C5E 66FE            	  1385:             bne.s *               * branch if Z clear
00:00000C60 0C8080008003    	  1386:             cmpi.l #$80008003,d0
00:00000C66 66FE            	  1387:             bne.s *               * branch if Z clear
                            	  1388: 
                            	  1389: 
                            	  1390: *             EA = (An)  - BYTE only
00:00000C68 307C0100        	  1391:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C6C 10BC0000        	  1392:             move.b #$00,(a0)          * populate test data
00:00000C70 08D00000        	  1393:             bset.b #0,(a0)
00:00000C74 66FE            	  1394:             bne.s *               * branch if Z clear
00:00000C76 08D00007        	  1395:             bset.b #7,(a0)            *
00:00000C7A 66FE            	  1396:             bne.s *               * branch if Z clear
00:00000C7C 0C100081        	  1397:             cmpi.b #$81,(a0)
00:00000C80 66FE            	  1398:             bne.s *               * branch if Z clear
                            	  1399: 
                            	  1400: *             EA = (An)+  - BYTE only
00:00000C82 307C0100        	  1401:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C86 10FC0000        	  1402:             move.b #$00,(a0)+         * populate test data
00:00000C8A 10FC0000        	  1403:             move.b #$00,(a0)+         * populate test data
00:00000C8E 307C0100        	  1404:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C92 08D80000        	  1405:             bset.b #0,(a0)+
00:00000C96 66FE            	  1406:             bne.s *               * branch if Z clear
00:00000C98 08D80001        	  1407:             bset.b #1,(a0)+           *
00:00000C9C 66FE            	  1408:             bne.s *               * branch if Z clear
00:00000C9E 307C0100        	  1409:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000CA2 0C180001        	  1410:             cmpi.b #$01,(a0)+
00:00000CA6 66FE            	  1411:             bne.s *               * branch if Z clear
00:00000CA8 0C180002        	  1412:             cmpi.b #$02,(a0)+
00:00000CAC 66FE            	  1413:             bne.s *               * branch if Z clear
                            	  1414: 
                            	  1415: 
                            	  1416: *             EA = -(An)  - BYTE only
00:00000CAE 307C0100        	  1417:             move.l #$00000100,a0      * point to memory to address
00:00000CB2 10FC0000        	  1418:             move.b #$00,(a0)+         * populate test data
00:00000CB6 10FC0000        	  1419:             move.b #$00,(a0)+         * populate test data
00:00000CBA 08E00007        	  1420:             bset.b #7,-(a0)
00:00000CBE 66FE            	  1421:             bne.s *               * branch if Z clear
00:00000CC0 08E00000        	  1422:             bset.b #0,-(a0)           *
00:00000CC4 66FE            	  1423:             bne.s *               * branch if Z clear
00:00000CC6 307C0102        	  1424:             move.l #$00000102,a0      * point to memory to address 0x100
00:00000CCA 0C200080        	  1425:             cmpi.b #$80,-(a0)
00:00000CCE 66FE            	  1426:             bne.s *               * branch if Z clear
00:00000CD0 0C200001        	  1427:             cmpi.b #$01,-(a0)
00:00000CD4 66FE            	  1428:             bne.s *               * branch if Z clear
                            	  1429: 
                            	  1430: 
                            	  1431: *             EA = n(An)  - BYTE only
00:00000CD6 307C0100        	  1432:             move.l #$00000100,a0      * point to memory to address
00:00000CDA 10FC0000        	  1433:             move.b #$00,(a0)+         * populate test data
00:00000CDE 10FC0000        	  1434:             move.b #$00,(a0)+         * populate test data
00:00000CE2 307C0100        	  1435:             move.l #$00000100,a0      * point to memory to address
00:00000CE6 08D00000        	  1436:             bset.b #0,0(a0)
00:00000CEA 66FE            	  1437:             bne.s *               * branch if Z clear
00:00000CEC 08E800040001    	  1438:             bset.b #4,1(a0)           *
00:00000CF2 66FE            	  1439:             bne.s *               * branch if Z clear
00:00000CF4 307C0100        	  1440:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000CF8 0C180001        	  1441:             cmpi.b #$01,(a0)+
00:00000CFC 66FE            	  1442:             bne.s *               * branch if Z clear
00:00000CFE 0C180010        	  1443:             cmpi.b #$10,(a0)+
00:00000D02 66FE            	  1444:             bne.s *               * branch if Z clear
                            	  1445: 
                            	  1446: 
                            	  1447: *             EA = n(An,D.W)  - BYTE only
00:00000D04 307C0100        	  1448:             move.l #$00000100,a0      * point to memory to address
00:00000D08 93C9            	  1449:             move.l #$00000000,a1      * point to memory to address
00:00000D0A 347C0004        	  1450:             move.l #$00000004,a2      * point to memory to address
00:00000D0E 7000            	  1451:             moveq  #$00000000,d0      * point to memory to address
00:00000D10 7201            	  1452:             moveq  #$00000001,d1      * point to memory to address
00:00000D12 10FC0000        	  1453:             move.b #$00,(a0)+         * populate test data
00:00000D16 10FC0000        	  1454:             move.b #$00,(a0)+         * populate test data
00:00000D1A 10FC0000        	  1455:             move.b #$00,(a0)+         * populate test data
00:00000D1E 10FC0000        	  1456:             move.b #$00,(a0)+         * populate test data
00:00000D22 10FC0000        	  1457:             move.b #$00,(a0)+         * populate test data
00:00000D26 10FC0000        	  1458:             move.b #$00,(a0)+         * populate test data
00:00000D2A 10FC0000        	  1459:             move.b #$00,(a0)+         * populate test data
00:00000D2E 10FC0000        	  1460:             move.b #$00,(a0)+         * populate test data
00:00000D32 10FC0000        	  1461:             move.b #$00,(a0)+         * populate test data
00:00000D36 10FC0000        	  1462:             move.b #$00,(a0)+         * populate test data
00:00000D3A 307C0100        	  1463:             move.l #$00000100,a0      * point to memory to address
00:00000D3E 08F000000000    	  1464:             bset.b #0,0(a0,d0.w)
00:00000D44 66FE            	  1465:             bne.s *               * branch if Z clear
00:00000D46 08F000011000    	  1466:             bset.b #1,0(a0,d1.w)      *
00:00000D4C 66FE            	  1467:             bne.s *               * branch if Z clear
00:00000D4E 08F000021001    	  1468:             bset.b #2,1(a0,d1.w)      *
00:00000D54 66FE            	  1469:             bne.s *               * branch if Z clear
                            	  1470: *             EA = n(An,D.L)  - BYTE only
00:00000D56 08F000030802    	  1471:             bset.b #3,2(a0,d0.l)
00:00000D5C 66FE            	  1472:             bne.s *               * branch if Z clear
00:00000D5E 08F000041800    	  1473:             bset.b #4,0(a0,d1.l)      *
00:00000D64 66FE            	  1474:             bne.s *               * branch if Z clear
00:00000D66 08F000051801    	  1475:             bset.b #5,1(a0,d1.l)      *
00:00000D6C 66FE            	  1476:             bne.s *               * branch if Z clear
                            	  1477: *             EA = n(An,A.W)  - BYTE only
00:00000D6E 08F000069000    	  1478:             bset.b #6,0(a0,a1.w)
00:00000D74 66FE            	  1479:             bne.s *               * branch if Z clear
00:00000D76 08F00001A000    	  1480:             bset.b #1,0(a0,a2.w)      *
00:00000D7C 66FE            	  1481:             bne.s *               * branch if Z clear
00:00000D7E 08F00007A001    	  1482:             bset.b #7,1(a0,a2.w)      *
00:00000D84 66FE            	  1483:             bne.s *               * branch if Z clear
                            	  1484: *             EA = n(An,A.L)  - BYTE only
00:00000D86 08F00000A802    	  1485:             bset.b #0,2(a0,a2.l)
00:00000D8C 66FE            	  1486:             bne.s *               * branch if Z clear
00:00000D8E 08F00000A803    	  1487:             bset.b #0,3(a0,a2.l)      *
00:00000D94 66FE            	  1488:             bne.s *               * branch if Z clear
00:00000D96 08F00001A804    	  1489:             bset.b #1,4(a0,a2.l)      *
00:00000D9C 66FE            	  1490:             bne.s *               * branch if Z clear
00:00000D9E 307C0100        	  1491:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000DA2 0C9841122C00    	  1492:             cmpi.l #$41122C00,(a0)+
00:00000DA8 66FE            	  1493:             bne.s *               * branch if Z clear
00:00000DAA 0C9802800101    	  1494:             cmpi.l #$02800101,(a0)+
00:00000DB0 66FE            	  1495:             bne.s *
                            	  1496: 
                            	  1497: 
                            	  1498: 
                            	  1499: *             EA = x.W  - BYTE only
00:00000DB2 307C0100        	  1500:             move.l #$00000100,a0      * point to memory to address
00:00000DB6 10FC0000        	  1501:             move.b #$00,(a0)+         * populate test data
00:00000DBA 08F800000100    	  1502:             bset.b #0,$0100
00:00000DC0 66FE            	  1503:             bne.s *               * branch if Z clear
00:00000DC2 08F800010100    	  1504:             bset.b #1,$0100           *
00:00000DC8 66FE            	  1505:             bne.s *               * branch if Z clear
00:00000DCA 307C0100        	  1506:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000DCE 0C180003        	  1507:             cmpi.b #$03,(a0)+
00:00000DD2 66FE            	  1508:             bne.s *
                            	  1509: 
                            	  1510: 
                            	  1511: *             EA = x.L  - BYTE only
00:00000DD4 207C0000F100    	  1512:             move.l #$F100,a0      * point to memory to address 0x100
00:00000DDA 10BC0000        	  1513:             move.b #$00,(a0)          * populate test data
00:00000DDE 08F900000000F100	  1514:             bset.b #0,$F100
00:00000DE6 66FE            	  1515:             bne.s *               * branch if Z clear
00:00000DE8 08F900010000F100	  1516:             bset.b #1,$F100       *
00:00000DF0 66FE            	  1517:             bne.s *               * branch if Z clear
00:00000DF2 08F900020000F100	  1518:             bset.b #2,$F100       *
00:00000DFA 66FE            	  1519:             bne.s *               * branch if Z clear
00:00000DFC 207C0000F100    	  1520:             move.l #$F100,a0      * point to memory to address 0x100
00:00000E02 0C180007        	  1521:             cmpi.b #$07,(a0)+
00:00000E06 66FE            	  1522:             bne.s *
                            	  1523: 
                            	  1524: 
                            	  1525: * Bit Number.s Dynamic
                            	  1526: 
                            	  1527: *             EA = Dn  - LONG only
00:00000E08 7000            	  1528:             moveq  #$00000000,d0      * populate test data
00:00000E0A 7A00            	  1529:             move.l #0,d5              * populate bit.s number to test
00:00000E0C 7C01            	  1530:             move.l #1,d6              * populate bit.s number to test
00:00000E0E 7E1F            	  1531:             move.l #31,d7              * populate bit.s number to test
                            	  1532: 
00:00000E10 0BC0            	  1533:             bset.l d5,d0
00:00000E12 66FE            	  1534:             bne.s *               * branch if Z clear
00:00000E14 0DC0            	  1535:             bset.l d6,d0              *
00:00000E16 66FE            	  1536:             bne.s *               * branch if Z clear
00:00000E18 0FC0            	  1537:             bset.l d7,d0             *
00:00000E1A 66FE            	  1538:             bne.s *               * branch if Z clear
00:00000E1C 0C8080000003    	  1539:             cmpi.l #$80000003,d0
00:00000E22 66FE            	  1540:             bne.s *               * branch if Z clear
                            	  1541: 
                            	  1542: 
                            	  1543: *             EA = (An)  - BYTE only
00:00000E24 7A00            	  1544:             move.l #0,d5              * populate bit.s number to test
00:00000E26 7C01            	  1545:             move.l #1,d6              * populate bit.s number to test
00:00000E28 7E07            	  1546:             move.l #7,d7              * populate bit.s number to test
00:00000E2A 307C0100        	  1547:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E2E 10BC0000        	  1548:             move.b #$00,(a0)          * populate test data
00:00000E32 0BD0            	  1549:             bset.b d5,(a0)
00:00000E34 66FE            	  1550:             bne.s *               * branch if Z clear
00:00000E36 0DD0            	  1551:             bset.b d6,(a0)            *
00:00000E38 66FE            	  1552:             bne.s *               * branch if Z clear
00:00000E3A 0FD0            	  1553:             bset.b d7,(a0)            *
00:00000E3C 66FE            	  1554:             bne.s *               * branch if Z clear
00:00000E3E 0C100083        	  1555:             cmpi.b #$83,(a0)
00:00000E42 66FE            	  1556:             bne.s *               * branch if Z clear
                            	  1557: 
                            	  1558: 
                            	  1559: *             EA = (An)+  - BYTE only
00:00000E44 307C0100        	  1560:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E48 10FC0000        	  1561:             move.b #$00,(a0)+         * populate test data
00:00000E4C 10FC0000        	  1562:             move.b #$00,(a0)+         * populate test data
00:00000E50 10FC0000        	  1563:             move.b #$00,(a0)+         * populate test data
00:00000E54 307C0100        	  1564:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E58 0BD8            	  1565:             bset.b d5,(a0)+
00:00000E5A 66FE            	  1566:             bne.s *               * branch if Z clear
00:00000E5C 0DD8            	  1567:             bset.b d6,(a0)+           *
00:00000E5E 66FE            	  1568:             bne.s *               * branch if Z clear
00:00000E60 0FD8            	  1569:             bset.b d7,(a0)+           *
00:00000E62 66FE            	  1570:             bne.s *               * branch if Z clear
00:00000E64 307C0100        	  1571:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E68 0C180001        	  1572:             cmpi.b #$01,(a0)+
00:00000E6C 66FE            	  1573:             bne.s *               * branch if Z clear
00:00000E6E 0C180002        	  1574:             cmpi.b #$02,(a0)+
00:00000E72 66FE            	  1575:             bne.s *               * branch if Z clear
00:00000E74 0C180080        	  1576:             cmpi.b #$80,(a0)+
00:00000E78 66FE            	  1577:             bne.s *               * branch if Z clear
                            	  1578: 
                            	  1579: *             EA = -(An)  - BYTE only
00:00000E7A 307C0100        	  1580:             move.l #$00000100,a0      * point to memory to address
00:00000E7E 10FC0000        	  1581:             move.b #$00,(a0)+         * populate test data
00:00000E82 10FC0000        	  1582:             move.b #$00,(a0)+         * populate test data
00:00000E86 10FC0000        	  1583:             move.b #$00,(a0)+         * populate test data
00:00000E8A 307C0103        	  1584:             move.l #$00000103,a0      * point to memory to address
00:00000E8E 0BE0            	  1585:             bset.b d5,-(a0)
00:00000E90 66FE            	  1586:             bne.s *               * branch if Z clear
00:00000E92 0DE0            	  1587:             bset.b d6,-(a0)           *
00:00000E94 66FE            	  1588:             bne.s *               * branch if Z clear
00:00000E96 0FE0            	  1589:             bset.b d7,-(a0)           *
00:00000E98 66FE            	  1590:             bne.s *               * branch if Z clear
00:00000E9A 307C0103        	  1591:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000E9E 0C200001        	  1592:             cmpi.b #$01,-(a0)
00:00000EA2 66FE            	  1593:             bne.s *               * branch if Z clear
00:00000EA4 0C200002        	  1594:             cmpi.b #$02,-(a0)
00:00000EA8 66FE            	  1595:             bne.s *               * branch if Z clear
00:00000EAA 0C200080        	  1596:             cmpi.b #$80,-(a0)
00:00000EAE 66FE            	  1597:             bne.s *               * branch if Z clear
                            	  1598: 
                            	  1599: *             EA = n(An)  - BYTE only
00:00000EB0 307C0100        	  1600:             move.l #$00000100,a0      * point to memory to address
00:00000EB4 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
00:00000EB8 10FC0000        	  1602:             move.b #$00,(a0)+         * populate test data
00:00000EBC 10FC0000        	  1603:             move.b #$00,(a0)+         * populate test data
00:00000EC0 307C0100        	  1604:             move.l #$00000100,a0      * point to memory to address
00:00000EC4 0BD0            	  1605:             bset.b d5,0(a0)
00:00000EC6 66FE            	  1606:             bne.s *               * branch if Z clear
00:00000EC8 0DE80001        	  1607:             bset.b d6,1(a0)           *
00:00000ECC 66FE            	  1608:             bne.s *               * branch if Z clear
00:00000ECE 0FE80002        	  1609:             bset.b d7,2(a0)           *
00:00000ED2 66FE            	  1610:             bne.s *               * branch if Z clear
00:00000ED4 307C0100        	  1611:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000ED8 0C180001        	  1612:             cmpi.b #$01,(a0)+
00:00000EDC 66FE            	  1613:             bne.s *               * branch if Z clear
00:00000EDE 0C180002        	  1614:             cmpi.b #$02,(a0)+
00:00000EE2 66FE            	  1615:             bne.s *               * branch if Z clear
00:00000EE4 0C180080        	  1616:             cmpi.b #$80,(a0)+
00:00000EE8 66FE            	  1617:             bne.s *               * branch if Z clear
                            	  1618: 
                            	  1619: *             EA = n(An,R.W)  - BYTE only
00:00000EEA 307C0100        	  1620:             move.l #$00000100,a0      * point to memory to address
00:00000EEE 10FC0000        	  1621:             move.b #$00,(a0)+         * populate test data
00:00000EF2 10FC0000        	  1622:             move.b #$00,(a0)+         * populate test data
00:00000EF6 10FC0000        	  1623:             move.b #$00,(a0)+         * populate test data
00:00000EFA 10FC0000        	  1624:             move.b #$00,(a0)+         * populate test data
00:00000EFE 10FC0000        	  1625:             move.b #$00,(a0)+         * populate test data
00:00000F02 10FC0000        	  1626:             move.b #$00,(a0)+         * populate test data
00:00000F06 10FC0000        	  1627:             move.b #$00,(a0)+         * populate test data
00:00000F0A 10FC0000        	  1628:             move.b #$00,(a0)+         * populate test data
00:00000F0E 10FC0000        	  1629:             move.b #$00,(a0)+         * populate test data
00:00000F12 10FC0000        	  1630:             move.b #$00,(a0)+         * populate test data
00:00000F16 10FC0000        	  1631:             move.b #$00,(a0)+         * populate test data
00:00000F1A 10FC0000        	  1632:             move.b #$00,(a0)+         * populate test data
00:00000F1E 307C0100        	  1633:             move.l #$00000100,a0      * point to memory to address
00:00000F22 93C9            	  1634:             move.l #$00000000,a1      * point to memory to address
00:00000F24 347C0001        	  1635:             move.l #$00000001,a2      * point to memory to address
00:00000F28 7000            	  1636:             moveq  #$00000000,d0      * point to memory to address
00:00000F2A 7201            	  1637:             moveq  #$00000001,d1      * point to memory to address
00:00000F2C 0BF00000        	  1638:             bset.b d5,0(a0,d0.w)
00:00000F30 66FE            	  1639:             bne.s *               * branch if Z clear
00:00000F32 0DF01000        	  1640:             bset.b d6,0(a0,d1.w)      *
00:00000F36 66FE            	  1641:             bne.s *               * branch if Z clear
00:00000F38 0FF01001        	  1642:             bset.b d7,1(a0,d1.w)      *
00:00000F3C 66FE            	  1643:             bne.s *               * branch if Z clear
                            	  1644: *             EA = n(An,R.L)  - BYTE only
00:00000F3E 0BF00802        	  1645:             bset.b d5,2(a0,d0.l)
00:00000F42 66FE            	  1646:             bne.s *               * branch if Z clear
00:00000F44 0DF01803        	  1647:             bset.b d6,3(a0,d1.l)      *
00:00000F48 66FE            	  1648:             bne.s *               * branch if Z clear
00:00000F4A 0FF01804        	  1649:             bset.b d7,4(a0,d1.l)      *
00:00000F4E 66FE            	  1650:             bne.s *               * branch if Z clear
                            	  1651: *             EA = n(An,A.W)  - BYTE only
00:00000F50 0BF09005        	  1652:             bset.b d5,5(a0,a1.w)
00:00000F54 66FE            	  1653:             bne.s *               * branch if Z clear
00:00000F56 0DF0A006        	  1654:             bset.b d6,6(a0,a2.w)      *
00:00000F5A 66FE            	  1655:             bne.s *               * branch if Z clear
00:00000F5C 0FF0A007        	  1656:             bset.b d7,7(a0,a2.w)      *
00:00000F60 66FE            	  1657:             bne.s *               * branch if Z clear
                            	  1658: *             EA = n(An,A.L)  - BYTE only
00:00000F62 0BF09808        	  1659:             bset.b d5,8(a0,a1.l)
00:00000F66 66FE            	  1660:             bne.s *               * branch if Z clear
00:00000F68 0DF0A809        	  1661:             bset.b d6,9(a0,a2.l)      *
00:00000F6C 66FE            	  1662:             bne.s *               * branch if Z clear
00:00000F6E 0FF0A80A        	  1663:             bset.b d7,10(a0,a2.l)      *
00:00000F72 66FE            	  1664:             bne.s *               * branch if Z clear
00:00000F74 307C0100        	  1665:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000F78 0C9801028100    	  1666:             cmpi.l #$01028100,(a0)+
00:00000F7E 66FE            	  1667:             bne.s *               * branch if Z clear
00:00000F80 0C9802810002    	  1668:             cmpi.l #$02810002,(a0)+
00:00000F86 66FE            	  1669:             bne.s *
                            	  1670: 
                            	  1671: 
                            	  1672: *             EA = x.W  - BYTE only
00:00000F88 307C0100        	  1673:             move.l #$00000100,a0      * point to memory to address
00:00000F8C 10FC0000        	  1674:             move.b #$00,(a0)+         * populate test data
00:00000F90 10FC0000        	  1675:             move.b #$00,(a0)+         * populate test data
00:00000F94 10FC0000        	  1676:             move.b #$00,(a0)+         * populate test data
00:00000F98 0BF80100        	  1677:             bset.b d5,$0100
00:00000F9C 66FE            	  1678:             bne.s *               * branch if Z clear
00:00000F9E 0DF80100        	  1679:             bset.b d6,$0100           *
00:00000FA2 66FE            	  1680:             bne.s *               * branch if Z clear
00:00000FA4 0FF80100        	  1681:             bset.b d7,$0100           *
00:00000FA8 66FE            	  1682:             bne.s *               * branch if Z clear
00:00000FAA 307C0100        	  1683:             move.l #$00000100,a0      * point to memory to address
00:00000FAE 0C180083        	  1684:             cmpi.b #$83,(a0)+
00:00000FB2 66FE            	  1685:             bne.s *               * branch if Z clear
                            	  1686: 
                            	  1687: *             EA = x.L  - BYTE only
00:00000FB4 207C0000F100    	  1688:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FBA 10FC0000        	  1689:             move.b #$00,(a0)+         * populate test data
00:00000FBE 10FC0000        	  1690:             move.b #$00,(a0)+         * populate test data
00:00000FC2 10FC0000        	  1691:             move.b #$00,(a0)+         * populate test data
00:00000FC6 0BF90000F100    	  1692:             bset.b d5,$F100
00:00000FCC 66FE            	  1693:             bne.s *               * branch if Z clear
00:00000FCE 0DF90000F100    	  1694:             bset.b d6,$F100       *
00:00000FD4 66FE            	  1695:             bne.s *               * branch if Z clear
00:00000FD6 0FF90000F100    	  1696:             bset.b d7,$F100       *
00:00000FDC 66FE            	  1697:             bne.s *               * branch if Z clear
00:00000FDE 207C0000F100    	  1698:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FE4 0C100083        	  1699:             cmpi.b #$83,(a0)
00:00000FE8 66FE            	  1700:             bne.s *               * branch if Z clear
                            	  1701: 
                            	  1702: 
00:00000FEA 4E75            	  1703:     rts
                            	  1704: 
                            	  1705: *-----------------------------------------------------------
                            	  1706: *-----------------------------------------------------------
                            	  1707: * OPCODE : MOVEP
                            	  1708: *-----------------------------------------------------------
                            	  1709: *-----------------------------------------------------------
                            	  1710: op_MOVEP:
                            	  1711: 
                            	  1712: * Dn --> x(An)
00:00000FEC 307C0100        	  1713:             move.l #$00000100,a0
00:00000FF0 203C12345678    	  1714:             move.l #$12345678,d0
00:00000FF6 223CAABBCCDD    	  1715:             move.l #$AABBCCDD,d1
00:00000FFC 20BC00000000    	  1716:             move.l #0,(a0)
00:00001002 217C000000000004	  1717:             move.l #0,4(a0)
                            	  1718: 
00:0000100A 01880000        	  1719:             movep.w d0,0(a0)      * even offset
00:0000100E 03880001        	  1720:             movep.w d1,1(a0)      * odd offset
                            	  1721: 
00:00001012 01C80004        	  1722:             movep.l d0,4(a0)      * even offset
00:00001016 03C80005        	  1723:             movep.l d1,5(a0)      * odd offset
                            	  1724: 
00:0000101A 0C9056CC78DD    	  1725:             cmpi.l #$56CC78DD,(a0)
00:00001020 66FE            	  1726:             bne.s *
00:00001022 0CA812AA34BB0004	  1727:             cmpi.l #$12AA34BB,4(a0)
00:0000102A 66FE            	  1728:             bne.s *
00:0000102C 0CA856CC78DD0008	  1729:             cmpi.l #$56CC78DD,8(a0)
00:00001034 66FE            	  1730:             bne.s *
                            	  1731: 
                            	  1732: 
                            	  1733: * x(An)--> Dn
00:00001036 203C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d0
00:0000103C 223C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d1
00:00001042 243C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d2
00:00001048 263C5A5A5A5A    	  1737:             move.l #$5a5a5a5a,d3
                            	  1738: 
00:0000104E 01080000        	  1739:             movep.w 0(a0),d0      * even offset
00:00001052 03080001        	  1740:             movep.w 1(a0),d1      * odd offset
                            	  1741: 
00:00001056 05480004        	  1742:             movep.l 4(a0),d2      * even offset
00:0000105A 07480005        	  1743:             movep.l 5(a0),d3      * odd offset
                            	  1744: 
00:0000105E 0C805A5A5678    	  1745:             cmpi.l #$5a5a5678,d0
00:00001064 66FE            	  1746:             bne.s *
00:00001066 0C815A5ACCDD    	  1747:             cmpi.l #$5a5aCCDD,d1
00:0000106C 66FE            	  1748:             bne.s *
00:0000106E 0C8212345678    	  1749:             cmpi.l #$12345678,d2
00:00001074 66FE            	  1750:             bne.s *
00:00001076 0C83AABBCCDD    	  1751:             cmpi.l #$AABBCCDD,d3
00:0000107C 66FE            	  1752:             bne.s *
                            	  1753: 
00:0000107E 4E75            	  1754:             rts
                            	  1755: 
                            	  1756: 
                            	  1757: 
                            	  1758: *-----------------------------------------------------------
                            	  1759: *-----------------------------------------------------------
                            	  1760: * OPCODE : BOOL_I
                            	  1761: *-----------------------------------------------------------
                            	  1762: *-----------------------------------------------------------
                            	  1763: op_BOOL_I:
                            	  1764: 
                            	  1765: *     Dn -- BYTE
00:00001080 203C12345678    	  1766:             move.l #$12345678,d0
00:00001086 44FC000F        	  1767:             move.w #$000F,CCR          * pre-set Flags
00:0000108A 000000FF        	  1768:             ori.b  #$FF,d0
00:0000108E 0A00005A        	  1769:             eori.b #$5A,d0
00:00001092 020000F0        	  1770:             andi.b #$F0,d0
00:00001096 69FE            	  1771:             bvs.s *                       * Check V,C are cleared
00:00001098 65FE            	  1772:             bcs.s *
00:0000109A 6AFE            	  1773:             bpl.s *                       * Verify if N flag is set
00:0000109C 02000000        	  1774:             andi.b #$00,d0
00:000010A0 6BFE            	  1775:             bmi.s *                       * Verify if N flag is cleared
00:000010A2 66FE            	  1776:             bne.s *                       * Verify if Z flag is set
                            	  1777: 
                            	  1778: *     Dn -- WORD
00:000010A4 223C12345678    	  1779:             move.l #$12345678,d1
00:000010AA 44FC000F        	  1780:             move.w #$000F,CCR          * pre-set Flags
00:000010AE 0041FFFF        	  1781:             ori.w  #$FFFF,d1
00:000010B2 0A415A5A        	  1782:             eori.w #$5A5A,d1
00:000010B6 0241F0F0        	  1783:             andi.w #$F0F0,d1
00:000010BA 69FE            	  1784:             bvs.s *                       * Check V,C are cleared
00:000010BC 65FE            	  1785:             bcs.s *
00:000010BE 6AFE            	  1786:             bpl.s *                       * Verify if N flag is set
00:000010C0 02410000        	  1787:             andi.w #$0000,d1
00:000010C4 6BFE            	  1788:             bmi.s *                       * Verify if N flag is cleared
00:000010C6 66FE            	  1789:             bne.s *                       * Verify if Z flag is set
                            	  1790: 
                            	  1791: *     Dn -- LONG
00:000010C8 243C12345678    	  1792:             move.l #$12345678,d2
00:000010CE 44FC000F        	  1793:             move.w #$000F,CCR          * pre-set Flags
00:000010D2 0082FFFFFFFF    	  1794:             ori.l  #$FFFFFFFF,d2
00:000010D8 0A825A5A5A5A    	  1795:             eori.l #$5A5A5A5A,d2
00:000010DE 0282F0F0F0F0    	  1796:             andi.l #$F0F0F0F0,d2
00:000010E4 69FE            	  1797:             bvs.s *                       * Check V,C are cleared
00:000010E6 65FE            	  1798:             bcs.s *
00:000010E8 6AFE            	  1799:             bpl.s *                       * Verify if N flag is set
00:000010EA 028200000000    	  1800:             andi.l #$00000000,d2
00:000010F0 6BFE            	  1801:             bmi.s *                       * Verify if N flag is cleared
00:000010F2 66FE            	  1802:             bne.s *                       * Verify if Z flag is set
                            	  1803: 
                            	  1804: 
                            	  1805: *     (An) -- BYTE
00:000010F4 307C0100        	  1806:             move.l #$00000100,a0
00:000010F8 20BC12345678    	  1807:             move.l #$12345678,(a0)
00:000010FE 44FC000F        	  1808:             move.w #$000F,CCR          * pre-set Flags
00:00001102 001000FF        	  1809:             ori.b  #$FF,(a0)
00:00001106 0A10005A        	  1810:             eori.b #$5A,(a0)
00:0000110A 021000F0        	  1811:             andi.b #$F0,(a0)
00:0000110E 69FE            	  1812:             bvs.s *                       * Check V,C are cleared
00:00001110 65FE            	  1813:             bcs.s *
00:00001112 6AFE            	  1814:             bpl.s *                       * Verify if N flag is set
00:00001114 02100000        	  1815:             andi.b #$00,(a0)
00:00001118 6BFE            	  1816:             bmi.s *                       * Verify if N flag is cleared
00:0000111A 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
00:0000111C 4A10            	  1818:             cmpi.b #$00,(a0)
00:0000111E 66FE            	  1819:             bne.s *                       * Verify if Z flag is set
                            	  1820: 
                            	  1821: *     (An) -- WORD
00:00001120 20BC12345678    	  1822:             move.l #$12345678,(a0)
00:00001126 44FC000F        	  1823:             move.w #$000F,CCR          * pre-set Flags
00:0000112A 0050FFFF        	  1824:             ori.w  #$FFFF,(a0)
00:0000112E 0A505A5A        	  1825:             eori.w #$5A5A,(a0)
00:00001132 0250F0F0        	  1826:             andi.w #$F0F0,(a0)
00:00001136 69FE            	  1827:             bvs.s *                       * Check V,C are cleared
00:00001138 65FE            	  1828:             bcs.s *
00:0000113A 6AFE            	  1829:             bpl.s *                       * Verify if N flag is set
00:0000113C 02500000        	  1830:             andi.w #$0000,(a0)
00:00001140 6BFE            	  1831:             bmi.s *                       * Verify if N flag is cleared
00:00001142 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
00:00001144 4A50            	  1833:             cmpi.w #$00,(a0)
00:00001146 66FE            	  1834:             bne.s *                       * Verify if Z flag is set
                            	  1835: 
                            	  1836: *     (An) -- LONG
00:00001148 20BC12345678    	  1837:             move.l #$12345678,(a0)
00:0000114E 44FC000F        	  1838:             move.w #$000F,CCR          * pre-set Flags
00:00001152 0090FFFFFFFF    	  1839:             ori.l  #$FFFFFFFF,(a0)
00:00001158 0A905A5A5A5A    	  1840:             eori.l #$5A5A5A5A,(a0)
00:0000115E 0290F0F0F0F0    	  1841:             andi.l #$F0F0F0F0,(a0)
00:00001164 69FE            	  1842:             bvs.s *                       * Check V,C are cleared
00:00001166 65FE            	  1843:             bcs.s *
00:00001168 6AFE            	  1844:             bpl.s *                       * Verify if N flag is set
00:0000116A 029000000000    	  1845:             andi.l #$00000000,(a0)
00:00001170 6BFE            	  1846:             bmi.s *                       * Verify if N flag is cleared
00:00001172 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
00:00001174 4A90            	  1848:             cmpi.l #$00,(a0)
00:00001176 66FE            	  1849:             bne.s *                       * Verify if Z flag is set
                            	  1850: 
                            	  1851: 
                            	  1852: 
                            	  1853: *     (An)+ -- BYTE
00:00001178 307C0100        	  1854:             move.l #$00000100,a0
00:0000117C 20BC00A5FF88    	  1855:             move.l #$00A5FF88,(a0)
00:00001182 44FC000F        	  1856:             move.w #$000F,CCR          * pre-set Flags
                            	  1857: 
00:00001186 001800F5        	  1858:             ori.b  #$F5,(a0)+
00:0000118A 6AFE            	  1859:             bpl.s *                       * Verify if N flag is set
00:0000118C 67FE            	  1860:             beq.s *                       * Verify if Z flag is cleared
                            	  1861: 
00:0000118E 4618            	  1862:             eori.b #$FF,(a0)+
00:00001190 6BFE            	  1863:             bmi.s *                       * Verify if N flag is cleared
00:00001192 67FE            	  1864:             beq.s *                       * Verify if Z flag is cleared
                            	  1865: 
00:00001194 021800AA        	  1866:             andi.b #$AA,(a0)+
00:00001198 6AFE            	  1867:             bpl.s *                       * Verify if N flag is set
00:0000119A 67FE            	  1868:             beq.s *                       * Verify if Z flag is cleared
                            	  1869: 
00:0000119C 307C0100        	  1870:             move.l #$00000100,a0
00:000011A0 0C90F55AAA88    	  1871:             cmpi.l #$F55AAA88,(a0)
00:000011A6 66FE            	  1872:             bne.s *                       * Verify if Z flag is set
                            	  1873: 
                            	  1874: 
                            	  1875: *     (An)+ -- WORD
00:000011A8 307C0100        	  1876:             move.l #$00000100,a0
00:000011AC 327C0104        	  1877:             move.l #$00000104,a1
00:000011B0 20BC00005A5A    	  1878:             move.l #$00005a5a,(a0)
00:000011B6 22BC12345678    	  1879:             move.l #$12345678,(a1)
00:000011BC 44FC000F        	  1880:             move.w #$000F,CCR          * pre-set Flags
                            	  1881: 
00:000011C0 00585678        	  1882:             ori.w  #$5678,(a0)+
00:000011C4 6BFE            	  1883:             bmi.s *                       * Verify if N flag is cleared
00:000011C6 67FE            	  1884:             beq.s *                       * Verify if Z flag is cleared
                            	  1885: 
00:000011C8 4658            	  1886:             eori.w #$FFFF,(a0)+
00:000011CA 6AFE            	  1887:             bpl.s *                       * Verify if N flag is set
00:000011CC 67FE            	  1888:             beq.s *                       * Verify if Z flag is cleared
                            	  1889: 
00:000011CE 0258A55A        	  1890:             andi.w #$A55A,(a0)+
00:000011D2 6BFE            	  1891:             bmi.s *                       * Verify if N flag is cleared
00:000011D4 67FE            	  1892:             beq.s *                       * Verify if Z flag is cleared
                            	  1893: 
00:000011D6 307C0100        	  1894:             move.l #$00000100,a0
00:000011DA 0C905678A5A5    	  1895:             cmpi.l #$5678a5a5,(a0)
00:000011E0 307C0104        	  1896:             move.l #$00000104,a0
00:000011E4 0C9000105678    	  1897:             cmpi.l #$00105678,(a0)
00:000011EA 66FE            	  1898:             bne.s *                       * Verify if Z flag is set
                            	  1899: 
                            	  1900: *     (An)+ -- LONG
00:000011EC 307C0100        	  1901:             move.l #$00000100,a0
00:000011F0 20FC00000000    	  1902:             move.l #$00000000,(a0)+
00:000011F6 20FC5A5A5A5A    	  1903:             move.l #$5a5a5a5a,(a0)+
00:000011FC 20FCFFFFFFFF    	  1904:             move.l #$FFFFFFFF,(a0)+
00:00001202 307C0100        	  1905:             move.l #$00000100,a0
00:00001206 44FC000F        	  1906:             move.w #$000F,CCR          * pre-set Flags
                            	  1907: 
00:0000120A 009812345678    	  1908:             ori.l  #$12345678,(a0)+
00:00001210 6BFE            	  1909:             bmi.s *                       * Verify if N flag is cleared
00:00001212 67FE            	  1910:             beq.s *                       * Verify if Z flag is cleared
                            	  1911: 
00:00001214 4698            	  1912:             eori.l #$FFFFFFFF,(a0)+
00:00001216 6AFE            	  1913:             bpl.s *                       * Verify if N flag is set
00:00001218 67FE            	  1914:             beq.s *                       * Verify if Z flag is cleared
                            	  1915: 
00:0000121A 0298A5A5A55A    	  1916:             andi.l #$A5A5A55A,(a0)+
00:00001220 6AFE            	  1917:             bpl.s *                       * Verify if N flag is set
00:00001222 67FE            	  1918:             beq.s *                       * Verify if Z flag is cleared
                            	  1919: 
00:00001224 307C0100        	  1920:             move.l #$00000100,a0
00:00001228 0C9812345678    	  1921:             cmpi.l #$12345678,(a0)+
00:0000122E 0C98A5A5A5A5    	  1922:             cmpi.l #$a5a5a5a5,(a0)+
00:00001234 0C98A5A5A55A    	  1923:             cmpi.l #$a5a5a55a,(a0)+
00:0000123A 66FE            	  1924:             bne.s *                       * Verify if Z flag is set
                            	  1925: 
00:0000123C 4E75            	  1926:             rts
                            	  1927: 
                            	  1928: 
                            	  1929: *-----------------------------------------------------------
                            	  1930: *-----------------------------------------------------------
                            	  1931: * OPCODE : BSR
                            	  1932: *-----------------------------------------------------------
                            	  1933: *-----------------------------------------------------------
                            	  1934: 
                            	  1935: 
00:0000123E 223C11111111    	  1936: BSR_CLOSE1:     move.l #$11111111,d1
00:00001244 4E75            	  1937:                 rts
                            	  1938: 
                            	  1939: 
                            	  1940: 
00:00001246 61F6            	  1941: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:00001248 612A            	  1942:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:0000124A 6100EE90        	  1943:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:0000124E 6100145A        	  1944:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1945: 
00:00001252 0C8111111111    	  1946:                 cmpi.l #$11111111,d1
00:00001258 66FE            	  1947:                 bne.s *
00:0000125A 0C8222222222    	  1948:                 cmpi.l #$22222222,d2
00:00001260 66FE            	  1949:                 bne.s *
00:00001262 0C8333333333    	  1950:                 cmpi.l #$33333333,d3
00:00001268 66FE            	  1951:                 bne.s *
00:0000126A 0C8444444444    	  1952:                 cmpi.l #$44444444,d4
00:00001270 66FE            	  1953:                 bne.s *
                            	  1954: 
00:00001272 4E75            	  1955:                 rts
                            	  1956: 
                            	  1957: 
00:00001274 243C22222222    	  1958: BSR_CLOSE2:     move.l #$22222222,d2
00:0000127A 4E75            	  1959:                 rts
                            	  1960: 
                            	  1961: *-----------------------------------------------------------
                            	  1962: *-----------------------------------------------------------
                            	  1963: * OPCODE : op_CMP_I
                            	  1964: *-----------------------------------------------------------
                            	  1965: *-----------------------------------------------------------
                            	  1966: op_CMP_I:
                            	  1967: 
00:0000127C 307C0100        	  1968:             move.l #$00000100,a0
00:00001280 20BC00000100    	  1969:             move.l #$00000100,(a0)
                            	  1970: 
                            	  1971: *     REGISTER - BYTE
00:00001286 7080            	  1972:             move.l #$FFFFFF80,d0
00:00001288 0C000080        	  1973:             cmpi.b #$80,d0
00:0000128C 66FE            	  1974:             bne.s *                       * Check Z Flag  beq/bne
00:0000128E 6BFE            	  1975:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001290 65FE            	  1976:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001292 69FE            	  1977:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1978: 
00:00001294 223CFFFFF000    	  1979:             move.l #$FFFFF000,d1
00:0000129A 4A01            	  1980:             cmpi.b #$00,d1
00:0000129C 66FE            	  1981:             bne.s *                       * Check Z Flag  beq/bne
00:0000129E 6BFE            	  1982:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012A0 65FE            	  1983:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012A2 69FE            	  1984:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1985: 
00:000012A4 7481D442        	  1986:             move.l #$FFFFFF02,d2
00:000012A8 0C0200FF        	  1987:             cmpi.b #$FF,d2
00:000012AC 67FE            	  1988:             beq.s *                       * Check Z Flag  beq/bne
00:000012AE 6BFE            	  1989:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012B0 64FE            	  1990:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012B2 69FE            	  1991:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1992: 
00:000012B4 263CFFFFFF7F    	  1993:             move.l #$FFFFFF7F,d3
00:000012BA 0C0300FF        	  1994:             cmpi.b #$FF,d3
00:000012BE 67FE            	  1995:             beq.s *                       * Check Z Flag  beq/bne
00:000012C0 6AFE            	  1996:             bpl.s *                       * Check N Flag  bmi/bpl
00:000012C2 64FE            	  1997:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012C4 68FE            	  1998:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1999: 
                            	  2000: 
                            	  2001: *     REGISTER - WORD
00:000012C6 203CFFFF8000    	  2002:             move.l #$FFFF8000,d0
00:000012CC 0C408000        	  2003:             cmpi.w #$8000,d0
00:000012D0 66FE            	  2004:             bne.s *                       * Check Z Flag  beq/bne
00:000012D2 6BFE            	  2005:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012D4 65FE            	  2006:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012D6 69FE            	  2007:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2008: 
00:000012D8 223CFFF00000    	  2009:             move.l #$FFF00000,d1
00:000012DE 4A41            	  2010:             cmpi.w #$0000,d1
00:000012E0 66FE            	  2011:             bne.s *                       * Check Z Flag  beq/bne
00:000012E2 6BFE            	  2012:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012E4 65FE            	  2013:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012E6 69FE            	  2014:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2015: 
00:000012E8 243CFFFF0002    	  2016:             move.l #$FFFF0002,d2
00:000012EE 0C42FFFF        	  2017:             cmpi.w #$FFFF,d2
00:000012F2 67FE            	  2018:             beq.s *                       * Check Z Flag  beq/bne
00:000012F4 6BFE            	  2019:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012F6 64FE            	  2020:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012F8 69FE            	  2021:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2022: 
00:000012FA 263CFFFF7FFF    	  2023:             move.l #$FFFF7FFF,d3
00:00001300 0C43FFFF        	  2024:             cmpi.w #$FFFF,d3
00:00001304 67FE            	  2025:             beq.s *                       * Check Z Flag  beq/bne
00:00001306 6AFE            	  2026:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001308 64FE            	  2027:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000130A 68FE            	  2028:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2029: 
                            	  2030: *     REGISTER - LONG
00:0000130C 203C80000000    	  2031:             move.l #$80000000,d0
00:00001312 0C8080000000    	  2032:             cmpi.l #$80000000,d0
00:00001318 66FE            	  2033:             bne.s *                       * Check Z Flag  beq/bne
00:0000131A 6BFE            	  2034:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000131C 65FE            	  2035:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000131E 69FE            	  2036:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2037: 
00:00001320 7200            	  2038:             moveq  #$00000000,d1
00:00001322 4A81            	  2039:             cmpi.l #$00000000,d1
00:00001324 66FE            	  2040:             bne.s *                       * Check Z Flag  beq/bne
00:00001326 6BFE            	  2041:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001328 65FE            	  2042:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000132A 69FE            	  2043:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2044: 
00:0000132C 7402            	  2045:             moveq  #$00000002,d2
00:0000132E 0C82FFFFFFFF    	  2046:             cmpi.l #$FFFFFFFF,d2
00:00001334 67FE            	  2047:             beq.s *                       * Check Z Flag  beq/bne
00:00001336 6BFE            	  2048:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001338 64FE            	  2049:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000133A 69FE            	  2050:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2051: 
00:0000133C 263C7FFFFFFF    	  2052:             move.l #$7FFFFFFF,d3
00:00001342 0C83FFFFFFFF    	  2053:             cmpi.l #$FFFFFFFF,d3
00:00001348 67FE            	  2054:             beq.s *                       * Check Z Flag  beq/bne
00:0000134A 6AFE            	  2055:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000134C 64FE            	  2056:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000134E 68FE            	  2057:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: 
                            	  2062: *     EA=x(An,Dn) - BYTE
00:00001350 307C0100        	  2063:             move.l #$00000100,a0
00:00001354 7E04            	  2064:             moveq  #$00000004,d7
                            	  2065: 
00:00001356 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
00:0000135E 21BCFFFFFF80700C	  2067:             move.l #$FFFFFF80,12(a0,d7)
00:00001366 0C300080700F    	  2068:             cmpi.b #$80,15(a0,d7)
00:0000136C 66FE            	  2069:             bne.s *                       * Check Z Flag  beq/bne
00:0000136E 6BFE            	  2070:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001370 65FE            	  2071:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001372 69FE            	  2072:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2073: 
00:00001374 21BCFFFFF000700C	  2074:             move.l #$FFFFF000,12(a0,d7)
00:0000137C 4A30700F        	  2075:             cmpi.b #$00,15(a0,d7)
00:00001380 66FE            	  2076:             bne.s *                       * Check Z Flag  beq/bne
00:00001382 6BFE            	  2077:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001384 65FE            	  2078:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001386 69FE            	  2079:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2080: 
00:00001388 21BCFFFFFF02700C	  2081:             move.l #$FFFFFF02,12(a0,d7)
00:00001390 0C3000FF700F    	  2082:             cmpi.b #$FF,15(a0,d7)
00:00001396 67FE            	  2083:             beq.s *                       * Check Z Flag  beq/bne
00:00001398 6BFE            	  2084:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000139A 64FE            	  2085:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000139C 69FE            	  2086:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2087: 
00:0000139E 21BCFFFFFF7F700C	  2088:             move.l #$FFFFFF7F,12(a0,d7)
00:000013A6 0C3000FF700F    	  2089:             cmpi.b #$FF,15(a0,d7)
00:000013AC 67FE            	  2090:             beq.s *                       * Check Z Flag  beq/bne
00:000013AE 6AFE            	  2091:             bpl.s *                       * Check N Flag  bmi/bpl
00:000013B0 64FE            	  2092:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013B2 68FE            	  2093:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2094: 
                            	  2095: 
                            	  2096: *     EA=x(An,Dn) - WORD
00:000013B4 21BCFFFF8000700C	  2097:             move.l #$FFFF8000,12(a0,d7)
00:000013BC 0C708000700E    	  2098:             cmpi.w #$8000,14(a0,d7)
00:000013C2 66FE            	  2099:             bne.s *                       * Check Z Flag  beq/bne
00:000013C4 6BFE            	  2100:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013C6 65FE            	  2101:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013C8 69FE            	  2102:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2103: 
00:000013CA 21BCFFF00000700C	  2104:             move.l #$FFF00000,12(a0,d7)
00:000013D2 4A70700E        	  2105:             cmpi.w #$0000,14(a0,d7)
00:000013D6 66FE            	  2106:             bne.s *                       * Check Z Flag  beq/bne
00:000013D8 6BFE            	  2107:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013DA 65FE            	  2108:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013DC 69FE            	  2109:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2110: 
00:000013DE 21BCFFFF0002700C	  2111:             move.l #$FFFF0002,12(a0,d7)
00:000013E6 0C70FFFF700E    	  2112:             cmpi.w #$FFFF,14(a0,d7)
00:000013EC 67FE            	  2113:             beq.s *                       * Check Z Flag  beq/bne
00:000013EE 6BFE            	  2114:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013F0 64FE            	  2115:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013F2 69FE            	  2116:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2117: 
00:000013F4 21BCFFFF7FFF700C	  2118:             move.l #$FFFF7FFF,12(a0,d7)
00:000013FC 0C70FFFF700E    	  2119:             cmpi.w #$FFFF,14(a0,d7)
00:00001402 67FE            	  2120:             beq.s *                       * Check Z Flag  beq/bne
00:00001404 6AFE            	  2121:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001406 64FE            	  2122:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001408 68FE            	  2123:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2124: 
                            	  2125: *     EA=x(An,Dn) - LONG
00:0000140A 21BC80000000700C	  2126:             move.l #$80000000,12(a0,d7)
00:00001412 0CB080000000700C	  2127:             cmpi.l #$80000000,12(a0,d7)
00:0000141A 66FE            	  2128:             bne.s *                       * Check Z Flag  beq/bne
00:0000141C 6BFE            	  2129:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000141E 65FE            	  2130:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001420 69FE            	  2131:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2132: 
00:00001422 21BC00000000700C	  2133:             move.l #$00000000,12(a0,d7)
00:0000142A 4AB0700C        	  2134:             cmpi.l #$00000000,12(a0,d7)
00:0000142E 66FE            	  2135:             bne.s *                       * Check Z Flag  beq/bne
00:00001430 6BFE            	  2136:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001432 65FE            	  2137:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001434 69FE            	  2138:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2139: 
00:00001436 21BC00000002700C	  2140:             move.l #$00000002,12(a0,d7)
00:0000143E 0CB0FFFFFFFF700C	  2141:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00001446 67FE            	  2142:             beq.s *                       * Check Z Flag  beq/bne
00:00001448 6BFE            	  2143:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000144A 64FE            	  2144:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000144C 69FE            	  2145:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2146: 
00:0000144E 21BC7FFFFFFF700C	  2147:             move.l #$7FFFFFFF,12(a0,d7)
00:00001456 0CB0FFFFFFFF700C	  2148:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:0000145E 67FE            	  2149:             beq.s *                       * Check Z Flag  beq/bne
00:00001460 6AFE            	  2150:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001462 64FE            	  2151:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001464 68FE            	  2152:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2153: 
                            	  2154: 
                            	  2155: 
                            	  2156: 
00:00001466 4E75            	  2157:             rts
                            	  2158: 
                            	  2159: 
                            	  2160: 
                            	  2161: *-----------------------------------------------------------
                            	  2162: *-----------------------------------------------------------
                            	  2163: * OPCODE : ADD_I
                            	  2164: *-----------------------------------------------------------
                            	  2165: *-----------------------------------------------------------
                            	  2166: op_ADD_I:
                            	  2167: 
                            	  2168: *     EA = Dn  - Byte
00:00001468 203C12345678    	  2169:             move.l #$12345678,d0      * populate test data
00:0000146E 06000000        	  2170:             addi.b #0,d0
00:00001472 67FE            	  2171:             beq.s *                       * Check Z Flag  beq/bne
00:00001474 6BFE            	  2172:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001476 65FE            	  2173:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001478 69FE            	  2174:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000147A 06000010        	  2175:             addi.b #$10,d0
00:0000147E 67FE            	  2176:             beq.s *                       * Check Z Flag  beq/bne
00:00001480 6AFE            	  2177:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001482 65FE            	  2178:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001484 68FE            	  2179:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001486 060000A5        	  2180:             addi.b #$A5,d0
00:0000148A 67FE            	  2181:             beq.s *                       * Check Z Flag  beq/bne
00:0000148C 6BFE            	  2182:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000148E 64FE            	  2183:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001490 68FE            	  2184:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001492 0C00002D        	  2185:             cmpi.b #$2D,d0
00:00001496 66FE            	  2186:             bne.s *                       * Check Z Flag  beq/bne
                            	  2187: 
                            	  2188: *     EA = Dn  - WORD
00:00001498 203C12345678    	  2189:             move.l #$12345678,d0      * populate test data
00:0000149E 06400000        	  2190:             addi.w #0,d0
00:000014A2 67FE            	  2191:             beq.s *                       * Check Z Flag  beq/bne
00:000014A4 6BFE            	  2192:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014A6 65FE            	  2193:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014A8 69FE            	  2194:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014AA 06407000        	  2195:             addi.w #$7000,d0
00:000014AE 67FE            	  2196:             beq.s *                       * Check Z Flag  beq/bne
00:000014B0 6AFE            	  2197:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014B2 65FE            	  2198:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014B4 68FE            	  2199:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014B6 0640A55A        	  2200:             addi.w #$A55A,d0
00:000014BA 67FE            	  2201:             beq.s *                       * Check Z Flag  beq/bne
00:000014BC 6BFE            	  2202:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014BE 64FE            	  2203:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014C0 68FE            	  2204:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014C2 0C406BD2        	  2205:             cmpi.w #$6BD2,d0
00:000014C6 66FE            	  2206:             bne.s *                       * Check Z Flag  beq/bne
                            	  2207: 
                            	  2208: *     EA = Dn  - LONG
00:000014C8 203C12345678    	  2209:             move.l #$12345678,d0      * populate test data
00:000014CE 068000000000    	  2210:             addi.l #0,d0
00:000014D4 67FE            	  2211:             beq.s *                       * Check Z Flag  beq/bne
00:000014D6 6BFE            	  2212:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014D8 65FE            	  2213:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014DA 69FE            	  2214:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014DC 0680F0000000    	  2215:             addi.l #$F0000000,d0
00:000014E2 67FE            	  2216:             beq.s *                       * Check Z Flag  beq/bne
00:000014E4 6BFE            	  2217:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014E6 64FE            	  2218:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014E8 69FE            	  2219:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014EA 0680855AA55A    	  2220:             addi.l #$855AA55A,d0
00:000014F0 67FE            	  2221:             beq.s *                       * Check Z Flag  beq/bne
00:000014F2 6AFE            	  2222:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014F4 65FE            	  2223:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014F6 69FE            	  2224:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014F8 0680A0000000    	  2225:             addi.l #$A0000000,d0
00:000014FE 68FE            	  2226:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001500 0C80278EFBD2    	  2227:             cmpi.l #$278EFBD2,d0
00:00001506 66FE            	  2228:             bne.s *                       * Check Z Flag  beq/bne
                            	  2229: 
                            	  2230: 
                            	  2231: 
                            	  2232: *     EA = x.L  - Byte
00:00001508 207C0000F100    	  2233:             move.l #$F100,a0      * populate test data
00:0000150E 20BC12345678    	  2234:             move.l #$12345678,(a0)     * populate test data
00:00001514 063900000000F103	  2235:             addi.b #0,$F103
00:0000151C 67FE            	  2236:             beq.s *                       * Check Z Flag  beq/bne
00:0000151E 6BFE            	  2237:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001520 65FE            	  2238:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001522 69FE            	  2239:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001524 063900100000F103	  2240:             addi.b #$10,$F103
00:0000152C 67FE            	  2241:             beq.s *                       * Check Z Flag  beq/bne
00:0000152E 6AFE            	  2242:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001530 65FE            	  2243:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001532 68FE            	  2244:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001534 063900A50000F103	  2245:             addi.b #$A5,$F103
00:0000153C 67FE            	  2246:             beq.s *                       * Check Z Flag  beq/bne
00:0000153E 6BFE            	  2247:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001540 64FE            	  2248:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001542 68FE            	  2249:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001544 0C39002D0000F103	  2250:             cmpi.b #$2D,$F103
00:0000154C 66FE            	  2251:             bne.s *                       * Check Z Flag  beq/bne
                            	  2252: 
                            	  2253: *     EA = x.L- WORD
00:0000154E 207C0000F100    	  2254:             move.l #$F100,a0      * populate test data
00:00001554 20BC12345678    	  2255:             move.l #$12345678,(a0)     * populate test data
00:0000155A 067900000000F100	  2256:             addi.w #0,$F100
00:00001562 67FE            	  2257:             beq.s *                       * Check Z Flag  beq/bne
00:00001564 6BFE            	  2258:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001566 65FE            	  2259:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001568 69FE            	  2260:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000156A 067970000000F100	  2261:             addi.w #$7000,$F100
00:00001572 67FE            	  2262:             beq.s *                       * Check Z Flag  beq/bne
00:00001574 6AFE            	  2263:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001576 65FE            	  2264:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001578 68FE            	  2265:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000157A 0679A55A0000F100	  2266:             addi.w #$A55A,$F100
00:00001582 67FE            	  2267:             beq.s *                       * Check Z Flag  beq/bne
00:00001584 6BFE            	  2268:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001586 64FE            	  2269:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001588 68FE            	  2270:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000158A 0C79278E0000F100	  2271:             cmpi.w #$278E,$F100
00:00001592 66FE            	  2272:             bne.s *                       * Check Z Flag  beq/bne
                            	  2273: 
                            	  2274: *     EA = x.L- LONG
00:00001594 23FC123456780000	  2275:             move.l #$12345678,$F100  * populate test data
00:0000159C F100
00:0000159E 06B9000000000000	  2276:             addi.l #0,$F100
00:000015A6 F100
00:000015A8 67FE            	  2277:             beq.s *                       * Check Z Flag  beq/bne
00:000015AA 6BFE            	  2278:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015AC 65FE            	  2279:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015AE 69FE            	  2280:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015B0 06B9F00000000000	  2281:             addi.l #$F0000000,$F100
00:000015B8 F100
00:000015BA 67FE            	  2282:             beq.s *                       * Check Z Flag  beq/bne
00:000015BC 6BFE            	  2283:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015BE 64FE            	  2284:             bcc.s *                       * Check C Flag  bcc/bcs
00:000015C0 69FE            	  2285:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015C2 06B9855AA55A0000	  2286:             addi.l #$855AA55A,$F100
00:000015CA F100
00:000015CC 67FE            	  2287:             beq.s *                       * Check Z Flag  beq/bne
00:000015CE 6AFE            	  2288:             bpl.s *                       * Check N Flag  bmi/bpl
00:000015D0 65FE            	  2289:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015D2 69FE            	  2290:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015D4 06B9A00000000000	  2291:             addi.l #$A0000000,$F100
00:000015DC F100
00:000015DE 68FE            	  2292:             bvc.s *                       * Check V Flag  bvc/bvs
00:000015E0 0CB9278EFBD20000	  2293:             cmpi.l #$278EFBD2,$F100
00:000015E8 F100
00:000015EA 66FE            	  2294:             bne.s *                       * Check Z Flag  beq/bne
                            	  2295: 
00:000015EC 4E75            	  2296:             rts
                            	  2297: 
                            	  2298: 
                            	  2299: *-----------------------------------------------------------
                            	  2300: *-----------------------------------------------------------
                            	  2301: * OPCODE : SUB_I
                            	  2302: *-----------------------------------------------------------
                            	  2303: *-----------------------------------------------------------
                            	  2304: op_SUB_I:
                            	  2305: 
                            	  2306: *     EA = Dn  - Byte
00:000015EE 203C12345678    	  2307:             move.l #$12345678,d0      * populate test data
00:000015F4 04000000        	  2308:             subi.b #0,d0
00:000015F8 67FE            	  2309:             beq.s *                       * Check Z Flag  beq/bne
00:000015FA 6BFE            	  2310:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015FC 65FE            	  2311:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015FE 69FE            	  2312:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001600 04000010        	  2313:             subi.b #$10,d0
00:00001604 67FE            	  2314:             beq.s *                       * Check Z Flag  beq/bne
00:00001606 6BFE            	  2315:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001608 65FE            	  2316:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000160A 69FE            	  2317:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000160C 040000A5        	  2318:             subi.b #$A5,d0
00:00001610 67FE            	  2319:             beq.s *                       * Check Z Flag  beq/bne
00:00001612 6AFE            	  2320:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001614 64FE            	  2321:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001616 68FE            	  2322:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001618 0C0000C3        	  2323:             cmpi.b #$C3,d0
00:0000161C 66FE            	  2324:             bne.s *                       * Check Z Flag  beq/bne
                            	  2325: 
                            	  2326: *     EA = Dn  - WORD
00:0000161E 203C12345678    	  2327:             move.l #$12345678,d0      * populate test data
00:00001624 04400000        	  2328:             subi.w #0,d0
00:00001628 67FE            	  2329:             beq.s *                       * Check Z Flag  beq/bne
00:0000162A 6BFE            	  2330:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000162C 65FE            	  2331:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000162E 69FE            	  2332:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001630 04407000        	  2333:             subi.w #$7000,d0
00:00001634 67FE            	  2334:             beq.s *                       * Check Z Flag  beq/bne
00:00001636 6AFE            	  2335:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001638 64FE            	  2336:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000163A 69FE            	  2337:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000163C 0440A55A        	  2338:             subi.w #$A55A,d0
00:00001640 67FE            	  2339:             beq.s *                       * Check Z Flag  beq/bne
00:00001642 6BFE            	  2340:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001644 65FE            	  2341:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001646 69FE            	  2342:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001648 0C40411E        	  2343:             cmpi.w #$411E,d0
00:0000164C 66FE            	  2344:             bne.s *                       * Check Z Flag  beq/bne
                            	  2345: 
                            	  2346: *     EA = Dn  - LONG
00:0000164E 203C12345678    	  2347:             move.l #$12345678,d0      * populate test data
00:00001654 048000000000    	  2348:             subi.l #0,d0
00:0000165A 67FE            	  2349:             beq.s *                       * Check Z Flag  beq/bne
00:0000165C 6BFE            	  2350:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000165E 65FE            	  2351:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001660 69FE            	  2352:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001662 0480F0000000    	  2353:             subi.l #$F0000000,d0
00:00001668 67FE            	  2354:             beq.s *                       * Check Z Flag  beq/bne
00:0000166A 6BFE            	  2355:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000166C 64FE            	  2356:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000166E 69FE            	  2357:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001670 0480855AA55A    	  2358:             subi.l #$855AA55A,d0
00:00001676 67FE            	  2359:             beq.s *                       * Check Z Flag  beq/bne
00:00001678 6AFE            	  2360:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000167A 64FE            	  2361:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000167C 68FE            	  2362:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000167E 0480A0000000    	  2363:             subi.l #$A0000000,d0
00:00001684 69FE            	  2364:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001686 0C80FCD9B11E    	  2365:             cmpi.l #$FCD9B11E,d0
00:0000168C 66FE            	  2366:             bne.s *                       * Check Z Flag  beq/bne
                            	  2367: 
                            	  2368: 
                            	  2369: 
                            	  2370: *     EA = x.L  - Byte
00:0000168E 207C0000F100    	  2371:             move.l #$F100,a0      * populate test data
00:00001694 20BC12345678    	  2372:             move.l #$12345678,(a0)     * populate test data
00:0000169A 043900000000F103	  2373:             subi.b #0,$F103
00:000016A2 67FE            	  2374:             beq.s *                       * Check Z Flag  beq/bne
00:000016A4 6BFE            	  2375:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016A6 65FE            	  2376:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016A8 69FE            	  2377:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016AA 043900100000F103	  2378:             subi.b #$10,$F103
00:000016B2 67FE            	  2379:             beq.s *                       * Check Z Flag  beq/bne
00:000016B4 6BFE            	  2380:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016B6 65FE            	  2381:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016B8 69FE            	  2382:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016BA 043900A50000F103	  2383:             subi.b #$A5,$F103
00:000016C2 67FE            	  2384:             beq.s *                       * Check Z Flag  beq/bne
00:000016C4 6AFE            	  2385:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016C6 64FE            	  2386:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016C8 68FE            	  2387:             bvc.s *                       * Check V Flag  bvc/bvs
00:000016CA 0C3900C30000F103	  2388:             cmpi.b #$C3,$F103
00:000016D2 66FE            	  2389:             bne.s *                       * Check Z Flag  beq/bne
                            	  2390: 
                            	  2391: *     EA = x.L- WORD
00:000016D4 207C0000F100    	  2392:             move.l #$F100,a0      * populate test data
00:000016DA 20BC12345678    	  2393:             move.l #$12345678,(a0)     * populate test data
00:000016E0 047900000000F100	  2394:             subi.w #0,$F100
00:000016E8 67FE            	  2395:             beq.s *                       * Check Z Flag  beq/bne
00:000016EA 6BFE            	  2396:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016EC 65FE            	  2397:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016EE 69FE            	  2398:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016F0 047970000000F100	  2399:             subi.w #$7000,$F100
00:000016F8 67FE            	  2400:             beq.s *                       * Check Z Flag  beq/bne
00:000016FA 6AFE            	  2401:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016FC 64FE            	  2402:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016FE 69FE            	  2403:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001700 0479A55A0000F100	  2404:             subi.w #$A55A,$F100
00:00001708 67FE            	  2405:             beq.s *                       * Check Z Flag  beq/bne
00:0000170A 6AFE            	  2406:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000170C 64FE            	  2407:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000170E 69FE            	  2408:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001710 0C79FCDA0000F100	  2409:             cmpi.w #$FCDA,$F100
00:00001718 66FE            	  2410:             bne.s *                       * Check Z Flag  beq/bne
                            	  2411: 
                            	  2412: *     EA = x.L- LONG
00:0000171A 23FC123456780000	  2413:             move.l #$12345678,$F100  * populate test data
00:00001722 F100
00:00001724 04B9000000000000	  2414:             subi.l #0,$F100
00:0000172C F100
00:0000172E 67FE            	  2415:             beq.s *                       * Check Z Flag  beq/bne
00:00001730 6BFE            	  2416:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001732 65FE            	  2417:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001734 69FE            	  2418:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001736 04B9F00000000000	  2419:             subi.l #$F0000000,$F100
00:0000173E F100
00:00001740 67FE            	  2420:             beq.s *                       * Check Z Flag  beq/bne
00:00001742 6BFE            	  2421:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001744 64FE            	  2422:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001746 69FE            	  2423:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001748 04B9855AA55A0000	  2424:             subi.l #$855AA55A,$F100
00:00001750 F100
00:00001752 67FE            	  2425:             beq.s *                       * Check Z Flag  beq/bne
00:00001754 6AFE            	  2426:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001756 64FE            	  2427:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001758 68FE            	  2428:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000175A 04B9A00000000000	  2429:             subi.l #$A0000000,$F100
00:00001762 F100
00:00001764 69FE            	  2430:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001766 0CB9FCD9B11E0000	  2431:             cmpi.l #$FCD9B11E,$F100
00:0000176E F100
00:00001770 66FE            	  2432:             bne.s *                       * Check Z Flag  beq/bne
                            	  2433: 
00:00001772 4E75            	  2434:             rts
                            	  2435: 
                            	  2436: 
                            	  2437: 
                            	  2438: *-----------------------------------------------------------
                            	  2439: *-----------------------------------------------------------
                            	  2440: * OPCODE : MOVE
                            	  2441: *-----------------------------------------------------------
                            	  2442: *-----------------------------------------------------------
                            	  2443: op_MOVE:
00:00001774 203C11223344    	  2444:             move.l #$11223344,d0
00:0000177A 223C55667788    	  2445:             move.l #$55667788,d1
00:00001780 243C8899AABB    	  2446:             move.l #$8899aabb,d2
00:00001786 263CCCDDEEFF    	  2447:             move.l #$ccddeeff,d3
00:0000178C 7800            	  2448:             moveq  #$00000000,d4
00:0000178E 7A00            	  2449:             moveq  #$00000000,d5
00:00001790 7C00            	  2450:             moveq  #$00000000,d6
00:00001792 7E00            	  2451:             moveq  #$00000000,d7
00:00001794 207C44332211    	  2452:             move.l #$44332211,a0
00:0000179A 227C88776655    	  2453:             move.l #$88776655,a1
00:000017A0 247CBBAA9988    	  2454:             move.l #$bbaa9988,a2
00:000017A6 267CFFEEDDCC    	  2455:             move.l #$ffeeddcc,a3
                            	  2456: 
00:000017AC 1800            	  2457:             move.b d0,d4              * BYTE - DATA REGISTER
00:000017AE 67FE            	  2458:             beq.s *                       * Check Z Flag  beq/bne
00:000017B0 6BFE            	  2459:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017B2 0C8400000044    	  2460:             cmpi.l #$00000044,d4
00:000017B8 66FE            	  2461:             bne.s *                       * Check Z Flag  beq/bne
                            	  2462: 
00:000017BA 3A01            	  2463:             move.w d1,d5              * WORD - DATA REGISTER
00:000017BC 67FE            	  2464:             beq.s *                       * Check Z Flag  beq/bne
00:000017BE 6BFE            	  2465:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017C0 0C8500007788    	  2466:             cmpi.l #$00007788,d5
00:000017C6 66FE            	  2467:             bne.s *                       * Check Z Flag  beq/bne
                            	  2468: 
00:000017C8 2C02            	  2469:             move.l d2,d6              * LONG - DATA REGISTER
00:000017CA 67FE            	  2470:             beq.s *                       * Check Z Flag  beq/bne
00:000017CC 6AFE            	  2471:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017CE 0C868899AABB    	  2472:             cmpi.l #$8899aabb,d6
00:000017D4 66FE            	  2473:             bne.s *                       * Check Z Flag  beq/bne
                            	  2474: 
00:000017D6 3A09            	  2475:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:000017D8 67FE            	  2476:             beq.s *                       * Check Z Flag  beq/bne
00:000017DA 6BFE            	  2477:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017DC 0C8500006655    	  2478:             cmpi.l #$00006655,d5
00:000017E2 66FE            	  2479:             bne.s *                       * Check Z Flag  beq/bne
                            	  2480: 
00:000017E4 2C0A            	  2481:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:000017E6 67FE            	  2482:             beq.s *                       * Check Z Flag  beq/bne
00:000017E8 6AFE            	  2483:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017EA 0C86BBAA9988    	  2484:             cmpi.l #$bbaa9988,d6
00:000017F0 66FE            	  2485:             bne.s *                       * Check Z Flag  beq/bne
                            	  2486: 
                            	  2487: 
00:000017F2 3842            	  2488:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:000017F4 B9C2            	  2489:             cmpa.l d2,a4
00:000017F6 67FE            	  2490:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2491: 
00:000017F8 2A41            	  2492:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:000017FA BBC1            	  2493:             cmpa.l d1,a5
00:000017FC 66FE            	  2494:             bne.s *                       * Check Z Flag  beq/bne
                            	  2495: 
                            	  2496: 
                            	  2497: 
                            	  2498: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2499: 
00:000017FE 203C11223344    	  2500:             move.l #$11223344,d0
00:00001804 223C00010100    	  2501:             move.l #$00010100,d1
00:0000180A 243C8899AABB    	  2502:             move.l #$8899aabb,d2
00:00001810 7601            	  2503:             moveq  #$00000001,d3
00:00001812 7800            	  2504:             moveq  #$00000000,d4
00:00001814 7A00            	  2505:             moveq  #$00000000,d5
00:00001816 7C00            	  2506:             moveq  #$00000000,d6
00:00001818 7E00            	  2507:             moveq  #$00000000,d7
00:0000181A 91C8            	  2508:             move.l #$00000000,a0
00:0000181C 227C00010100    	  2509:             move.l #$00010100,a1
                            	  2510: 
                            	  2511: *     x(An,AL) --> x.L
00:00001822 11BC005A9804    	  2512:             move.b #$5A,4(a0,a1.l)    * BYTE
00:00001828 47F09804        	  2513:             lea 4(a0,a1.l),a3
00:0000182C 13F0980400010105	  2514:             move.b 4(a0,a1.l),$00010105
00:00001834 67FE            	  2515:             beq.s *                       * Check Z Flag  beq/bne
00:00001836 6BFE            	  2516:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001838 0C30005A9805    	  2517:             cmpi.b #$5A,5(a0,a1.l)
00:0000183E 66FE            	  2518:             bne.s *                       * Check Z Flag  beq/bne
                            	  2519: 
                            	  2520: *     x.L --> n(An,Dw)
00:00001840 11B9000101051007	  2521: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:00001848 67FE            	  2522:             beq.s *                       * Check Z Flag  beq/bne
00:0000184A 6BFE            	  2523:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000184C 0C30005A1007    	  2524:             cmpi.b #$5A,7(a0,d1.w)
00:00001852 66FE            	  2525:             bne.s *                       * Check Z Flag  beq/bne
                            	  2526: 
                            	  2527: *     x(PC,Ds) --> x.w
00:00001854 11FB30660100    	  2528:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:0000185A 67FE            	  2529:             beq.s *                       * Check Z Flag  beq/bne
00:0000185C 6AFE            	  2530:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000185E 0C3900B900001841	  2531:             cmpi.b #$B9,1+MOVE2
00:00001866 66FE            	  2532:             bne.s *                       * Check Z Flag  beq/bne
                            	  2533: 
                            	  2534: *     #x -->    n(An,AL)
00:00001868 11BC00781007    	  2535:             move.b  #$78,7(a0,d1.w)    * BYTE
00:0000186E 67FE            	  2536:             beq.s *                       * Check Z Flag  beq/bne
00:00001870 6BFE            	  2537:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001872 0C3000781007    	  2538:             cmpi.b #$78,7(a0,d1.w)
00:00001878 66FE            	  2539:             bne.s *                       * Check Z Flag  beq/bne
                            	  2540: 
00:0000187A 203C11223344    	  2541:             move.l #$11223344,d0
00:00001880 223C00010100    	  2542:             move.l #$00010100,d1
00:00001886 243C8899AABB    	  2543:             move.l #$8899aabb,d2
00:0000188C 7602            	  2544:             moveq  #$00000002,d3
00:0000188E 7800            	  2545:             moveq  #$00000000,d4
00:00001890 7A00            	  2546:             moveq  #$00000000,d5
00:00001892 7C00            	  2547:             moveq  #$00000000,d6
00:00001894 7E00            	  2548:             moveq  #$00000000,d7
00:00001896 91C8            	  2549:             move.l #$00000000,a0
00:00001898 227C00010100    	  2550:             move.l #$00010100,a1
                            	  2551: 
                            	  2552: *     x(An,AL) --> x.L
00:0000189E 31BC5A5A9804    	  2553:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:000018A4 49F09804        	  2554:             lea 4(a0,a1.l),a4
00:000018A8 33F0980400010104	  2555:             move.w 4(a0,a1.l),$00010104
00:000018B0 67FE            	  2556:             beq.s *                       * Check Z Flag  beq/bne
00:000018B2 6BFE            	  2557:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018B4 0C705A5A9804    	  2558:             cmpi.w #$5A5A,4(a0,a1.l)
00:000018BA 66FE            	  2559:             bne.s *                       * Check Z Flag  beq/bne
                            	  2560: 
                            	  2561: *     x.L --> n(An,Dw)
00:000018BC 31B9000101041006	  2562: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:000018C4 67FE            	  2563:             beq.s *                       * Check Z Flag  beq/bne
00:000018C6 6BFE            	  2564:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018C8 0C705A5A1006    	  2565:             cmpi.w #$5A5A,6(a0,d1.w)
00:000018CE 66FE            	  2566:             bne.s *                       * Check Z Flag  beq/bne
                            	  2567: 
                            	  2568: *     x(PC,Ds) --> x.w
00:000018D0 31FB30EA0100    	  2569:             move.w  MOVE1(pc,d3),$0100 * WORD
00:000018D6 67FE            	  2570:             beq.s *                       * Check Z Flag  beq/bne
00:000018D8 6BFE            	  2571:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018DA 0C7967FE000018C4	  2572:             cmpi.w #$67FE,8+MOVE1
00:000018E2 66FE            	  2573:             bne.s *                       * Check Z Flag  beq/bne
                            	  2574: 
                            	  2575: *     #x -->    n(An,AL)
00:000018E4 31BC78781006    	  2576:             move.w  #$7878,6(a0,d1.w)    * WORD
00:000018EA 67FE            	  2577:             beq.s *                       * Check Z Flag  beq/bne
00:000018EC 6BFE            	  2578:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018EE 0C7078781006    	  2579:             cmpi.w #$7878,6(a0,d1.w)
00:000018F4 66FE            	  2580:             bne.s *                       * Check Z Flag  beq/bne
                            	  2581: 
                            	  2582: * ---
                            	  2583: 
00:000018F6 203C11223344    	  2584:             move.l #$11223344,d0
00:000018FC 223C00010100    	  2585:             move.l #$00010100,d1
00:00001902 243C8899AABB    	  2586:             move.l #$8899aabb,d2
00:00001908 7602            	  2587:             moveq  #$00000002,d3
00:0000190A 7800            	  2588:             moveq  #$00000000,d4
00:0000190C 7A00            	  2589:             moveq  #$00000000,d5
00:0000190E 7C00            	  2590:             moveq  #$00000000,d6
00:00001910 7E00            	  2591:             moveq  #$00000000,d7
00:00001912 91C8            	  2592:             move.l #$00000000,a0
00:00001914 227C00010100    	  2593:             move.l #$00010100,a1
                            	  2594: 
                            	  2595: *     x(An,AL) --> x.L
00:0000191A 21BC5A5A12349804	  2596:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:00001922 49F09804        	  2597:             lea 4(a0,a1.l),a4
00:00001926 23F0980400010104	  2598:             move.l 4(a0,a1.l),$00010104
00:0000192E 67FE            	  2599:             beq.s *                       * Check Z Flag  beq/bne
00:00001930 6BFE            	  2600:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001932 0CB05A5A12349804	  2601:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:0000193A 66FE            	  2602:             bne.s *                       * Check Z Flag  beq/bne
                            	  2603: 
                            	  2604: *     x.L --> n(An,Dw)
00:0000193C 21B9000101041006	  2605: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00001944 67FE            	  2606:             beq.s *                       * Check Z Flag  beq/bne
00:00001946 6BFE            	  2607:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001948 0CB05A5A12341006	  2608:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:00001950 66FE            	  2609:             bne.s *                       * Check Z Flag  beq/bne
                            	  2610: 
                            	  2611: *     x(PC,Ds) --> x.w
00:00001952 21FB30E80100    	  2612:             move.l  MOVE3(pc,d3),$0100 * LONG
00:00001958 67FE            	  2613:             beq.s *                       * Check Z Flag  beq/bne
00:0000195A 6BFE            	  2614:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000195C 0CB967FE6BFE0000	  2615:             cmpi.l #$67FE6BFE,8+MOVE3
00:00001964 1944
00:00001966 66FE            	  2616:             bne.s *                       * Check Z Flag  beq/bne
                            	  2617: 
                            	  2618: *     #x -->    n(An,AL)
00:00001968 21BC787823231006	  2619:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:00001970 67FE            	  2620:             beq.s *                       * Check Z Flag  beq/bne
00:00001972 6BFE            	  2621:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001974 0CB0787823231006	  2622:             cmpi.l #$78782323,6(a0,d1.w)
00:0000197C 66FE            	  2623:             bne.s *                       * Check Z Flag  beq/bne
                            	  2624: 
                            	  2625: 
00:0000197E 4E75            	  2626:          rts
                            	  2627: 
                            	  2628: 
                            	  2629: *-----------------------------------------------------------
                            	  2630: *-----------------------------------------------------------
                            	  2631: * OPCODE : MOVE_xxx_FLAGS
                            	  2632: *-----------------------------------------------------------
                            	  2633: *-----------------------------------------------------------
                            	  2634: op_MOVE_xxx_FLAGS:
                            	  2635: 
                            	  2636: *     Move_To_SR
                            	  2637: 
                            	  2638: *     Dn
                            	  2639: 
00:00001980 303C2FFF        	  2640:             move.w #$2FFF,d0
00:00001984 46C0            	  2641:             move d0,SR
00:00001986 6AFE            	  2642:             bpl.s *           * branch if Z clear
00:00001988 66FE            	  2643:             bne.s *           * branch if N clear
00:0000198A 68FE            	  2644:             bvc.s *           * branch if V clear
00:0000198C 64FE            	  2645:             bcc.s *           * branch if C clear
00:0000198E 303C2F00        	  2646:             move.w #$2F00,d0
00:00001992 44C0            	  2647:             move d0,CCR
00:00001994 67FE            	  2648:             beq.s *           * branch if Z set
00:00001996 6BFE            	  2649:             bmi.s *           * branch if N set
00:00001998 69FE            	  2650:             bvs.s *           * branch if V set
00:0000199A 65FE            	  2651:             bcs.s *           * branch if C set
                            	  2652: 
00:0000199C 303C2000        	  2653:             move.w #$2000,d0
00:000019A0 46C0            	  2654:             move d0,SR
00:000019A2 67FE            	  2655:             beq.s *           * branch if Z set
00:000019A4 6BFE            	  2656:             bmi.s *           * branch if N set
00:000019A6 69FE            	  2657:             bvs.s *           * branch if V set
00:000019A8 65FE            	  2658:             bcs.s *           * branch if C set
                            	  2659: 
                            	  2660: *     (An)
00:000019AA 307C0100        	  2661:             move.l #$00000100,a0
00:000019AE 30BC2FFF        	  2662:             move.w #$2FFF,(a0)
00:000019B2 46D0            	  2663:             move (a0),SR
00:000019B4 6AFE            	  2664:             bpl.s *           * branch if Z clear
00:000019B6 66FE            	  2665:             bne.s *           * branch if N clear
00:000019B8 68FE            	  2666:             bvc.s *           * branch if V clear
00:000019BA 64FE            	  2667:             bcc.s *           * branch if C clear
                            	  2668: 
00:000019BC 30BC2000        	  2669:             move.w #$2000,(a0)
00:000019C0 46D0            	  2670:             move (a0),SR
00:000019C2 67FE            	  2671:             beq.s *           * branch if Z set
00:000019C4 6BFE            	  2672:             bmi.s *           * branch if N set
00:000019C6 69FE            	  2673:             bvs.s *           * branch if V set
00:000019C8 65FE            	  2674:             bcs.s *           * branch if C set
                            	  2675: 
                            	  2676: *     (An)+
00:000019CA 307C0100        	  2677:             move.l #$00000100,a0
00:000019CE 30BC2FFF        	  2678:             move.w #$2FFF,(a0)
00:000019D2 46D8            	  2679:             move (a0)+,SR
00:000019D4 6AFE            	  2680:             bpl.s *           * branch if Z clear
00:000019D6 66FE            	  2681:             bne.s *           * branch if N clear
00:000019D8 68FE            	  2682:             bvc.s *           * branch if V clear
00:000019DA 64FE            	  2683:             bcc.s *           * branch if C clear
                            	  2684: 
00:000019DC 30BC2000        	  2685:             move.w #$2000,(a0)
00:000019E0 46D8            	  2686:             move (a0)+,SR
00:000019E2 67FE            	  2687:             beq.s *           * branch if Z set
00:000019E4 6BFE            	  2688:             bmi.s *           * branch if N set
00:000019E6 69FE            	  2689:             bvs.s *           * branch if V set
00:000019E8 65FE            	  2690:             bcs.s *           * branch if C set
                            	  2691: 
                            	  2692: *     -(An)
00:000019EA 307C0102        	  2693:             move.l #$00000102,a0
00:000019EE 30BC2FFF        	  2694:             move.w #$2FFF,(a0)
00:000019F2 46D8            	  2695:             move (a0)+,SR
00:000019F4 6AFE            	  2696:             bpl.s *           * branch if Z clear
00:000019F6 66FE            	  2697:             bne.s *           * branch if N clear
00:000019F8 68FE            	  2698:             bvc.s *           * branch if V clear
00:000019FA 64FE            	  2699:             bcc.s *           * branch if C clear
                            	  2700: 
00:000019FC 30BC2000        	  2701:             move.w #$2000,(a0)
00:00001A00 46D8            	  2702:             move (a0)+,SR
00:00001A02 67FE            	  2703:             beq.s *           * branch if Z set
00:00001A04 6BFE            	  2704:             bmi.s *           * branch if N set
00:00001A06 69FE            	  2705:             bvs.s *           * branch if V set
00:00001A08 65FE            	  2706:             bcs.s *           * branch if C set
                            	  2707: 
                            	  2708: *     n(An)
00:00001A0A 307C0102        	  2709:             move.l #$00000102,a0
00:00001A0E 317C2FFF0002    	  2710:             move.w #$2FFF,2(a0)
00:00001A14 46E80002        	  2711:             move 2(a0),SR
00:00001A18 6AFE            	  2712:             bpl.s *           * branch if Z clear
00:00001A1A 66FE            	  2713:             bne.s *           * branch if N clear
00:00001A1C 68FE            	  2714:             bvc.s *           * branch if V clear
00:00001A1E 64FE            	  2715:             bcc.s *           * branch if C clear
                            	  2716: 
00:00001A20 317C20000002    	  2717:             move.w #$2000,2(a0)
00:00001A26 46E80002        	  2718:             move 2(a0),SR
00:00001A2A 67FE            	  2719:             beq.s *           * branch if Z set
00:00001A2C 6BFE            	  2720:             bmi.s *           * branch if N set
00:00001A2E 69FE            	  2721:             bvs.s *           * branch if V set
00:00001A30 65FE            	  2722:             bcs.s *           * branch if C set
                            	  2723: 
                            	  2724: *     n(An,Rn.l)
00:00001A32 307C0100        	  2725:             move.l #$00000100,a0
00:00001A36 7002            	  2726:             moveq  #$00000002,d0
00:00001A38 31BC2FFF0802    	  2727:             move.w #$2FFF,2(a0,d0.l)
00:00001A3E 46F00802        	  2728:             move 2(a0,d0.l),SR
00:00001A42 6AFE            	  2729:             bpl.s *           * branch if Z clear
00:00001A44 66FE            	  2730:             bne.s *           * branch if N clear
00:00001A46 68FE            	  2731:             bvc.s *           * branch if V clear
00:00001A48 64FE            	  2732:             bcc.s *           * branch if C clear
                            	  2733: 
00:00001A4A 31BC20000802    	  2734:             move.w #$2000,2(a0,d0.l)
00:00001A50 46F00802        	  2735:             move 2(a0,d0.l),SR
00:00001A54 67FE            	  2736:             beq.s *           * branch if Z set
00:00001A56 6BFE            	  2737:             bmi.s *           * branch if N set
00:00001A58 69FE            	  2738:             bvs.s *           * branch if V set
00:00001A5A 65FE            	  2739:             bcs.s *           * branch if C set
                            	  2740: 
                            	  2741: *     x.W
00:00001A5C 31FC2FFF0100    	  2742:             move.w #$2FFF,$0100
00:00001A62 46F80100        	  2743:             move $0100,SR
00:00001A66 6AFE            	  2744:             bpl.s *           * branch if Z clear
00:00001A68 66FE            	  2745:             bne.s *           * branch if N clear
00:00001A6A 68FE            	  2746:             bvc.s *           * branch if V clear
00:00001A6C 64FE            	  2747:             bcc.s *           * branch if C clear
                            	  2748: 
00:00001A6E 31FC20000100    	  2749:             move.w #$2000,$0100
00:00001A74 46F80100        	  2750:             move $0100,SR
00:00001A78 67FE            	  2751:             beq.s *           * branch if Z set
00:00001A7A 6BFE            	  2752:             bmi.s *           * branch if N set
00:00001A7C 69FE            	  2753:             bvs.s *           * branch if V set
00:00001A7E 65FE            	  2754:             bcs.s *           * branch if C set
                            	  2755: 
                            	  2756: *     x.L
00:00001A80 33FC2FFF00010100	  2757:             move.w #$2FFF,$00010100
00:00001A88 46F900010100    	  2758:             move $00010100,SR
00:00001A8E 6AFE            	  2759:             bpl.s *           * branch if Z clear
00:00001A90 66FE            	  2760:             bne.s *           * branch if N clear
00:00001A92 68FE            	  2761:             bvc.s *           * branch if V clear
00:00001A94 64FE            	  2762:             bcc.s *           * branch if C clear
                            	  2763: 
00:00001A96 33FC200000010100	  2764: MOVE4:      move.w #$2000,$00010100
00:00001A9E 46F900010100    	  2765:             move $00010100,SR
00:00001AA4 67FE            	  2766:             beq.s *           * branch if Z set
00:00001AA6 6BFE            	  2767:             bmi.s *           * branch if N set
00:00001AA8 69FE            	  2768:             bvs.s *           * branch if V set
00:00001AAA 65FE            	  2769:             bcs.s *           * branch if C set
                            	  2770: 
                            	  2771: *     x(PC)
00:00001AAC 46FAFFEA        	  2772:             move MOVE4+2(pc),SR
00:00001AB0 67FE            	  2773:             beq.s *           * branch if Z set
00:00001AB2 6BFE            	  2774:             bmi.s *           * branch if N set
00:00001AB4 69FE            	  2775:             bvs.s *           * branch if V set
00:00001AB6 65FE            	  2776:             bcs.s *           * branch if C set
                            	  2777: 
                            	  2778: *     x(PC,d0.l)
00:00001AB8 7000            	  2779:             moveq  #$00000000,d0
00:00001ABA 46FB08DC        	  2780:             move MOVE4+2(pc,d0.l),SR
00:00001ABE 67FE            	  2781:             beq.s *           * branch if Z set
00:00001AC0 6BFE            	  2782:             bmi.s *           * branch if N set
00:00001AC2 69FE            	  2783:             bvs.s *           * branch if V set
00:00001AC4 65FE            	  2784:             bcs.s *           * branch if C set
00:00001AC6 44FB08D0        	  2785:             move MOVE4+2(pc,d0.l),CCR
00:00001ACA 67FE            	  2786:             beq.s *           * branch if Z set
00:00001ACC 6BFE            	  2787:             bmi.s *           * branch if N set
00:00001ACE 69FE            	  2788:             bvs.s *           * branch if V set
00:00001AD0 65FE            	  2789:             bcs.s *           * branch if C set
                            	  2790: 
                            	  2791: *     #x
00:00001AD2 46FC2FFF        	  2792:             move #$2FFF,SR
00:00001AD6 66FE            	  2793:             bne.s *           * branch if Z clear
00:00001AD8 6AFE            	  2794:             bpl.s *           * branch if N clear
00:00001ADA 68FE            	  2795:             bvc.s *           * branch if V clear
00:00001ADC 64FE            	  2796:             bcc.s *           * branch if C clear
                            	  2797: 
                            	  2798: 
                            	  2799: 
                            	  2800: *  MOVE_From_SR
                            	  2801: 
                            	  2802: 
                            	  2803: 
                            	  2804: *     Dn
00:00001ADE 46FC275A        	  2805:             move #$275A,SR          * Initial value
00:00001AE2 40C0            	  2806:             move SR,d0
00:00001AE4 0C40271A        	  2807:             cmpi.w #$271A,d0
                            	  2808: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2809: *            bne.s *                   * branch if Z set
                            	  2810: 
                            	  2811: *     (An)
00:00001AE8 307C0100        	  2812:             move.l #$00000100,a0
00:00001AEC 46FC275A        	  2813:             move #$275A,SR          * Initial value
00:00001AF0 40D0            	  2814:             move SR,(a0)
00:00001AF2 0C50275A        	  2815:             cmpi.w #$275A,(a0)
00:00001AF6 66FE            	  2816:             bne.s *                   * branch if Z set
                            	  2817: 
                            	  2818: *     (An)+
00:00001AF8 307C0100        	  2819:             move.l #$00000100,a0
00:00001AFC 46FC257A        	  2820:             move #$257A,SR          * Initial value
00:00001B00 40D8            	  2821:             move SR,(a0)+
00:00001B02 307C0100        	  2822:             move.l #$00000100,a0
00:00001B06 0C58257A        	  2823:             cmpi.w #$257A,(a0)+
00:00001B0A 66FE            	  2824:             bne.s *                   * branch if Z set
                            	  2825: 
                            	  2826: *     -(An)
00:00001B0C 307C0102        	  2827:             move.l #$00000102,a0
00:00001B10 46FC2766        	  2828:             move #$2766,SR          * Initial value
00:00001B14 40E0            	  2829:             move SR,-(a0)
00:00001B16 307C0100        	  2830:             move.l #$00000100,a0
00:00001B1A 0C502766        	  2831:             cmpi.w #$2766,(a0)
00:00001B1E 66FE            	  2832:             bne.s *                   * branch if Z set
                            	  2833: 
                            	  2834: *     x(An)
00:00001B20 307C0102        	  2835:             move.l #$00000102,a0
00:00001B24 46FC2733        	  2836:             move #$2733,SR          * Initial value
00:00001B28 40E80004        	  2837:             move SR,4(a0)
00:00001B2C 0C6827330004    	  2838:             cmpi.w #$2733,4(a0)
00:00001B32 66FE            	  2839:             bne.s *                   * branch if Z set
                            	  2840: 
                            	  2841: *     x(An,rn)
00:00001B34 307C0102        	  2842:             move.l #$00000102,a0
00:00001B38 7004            	  2843:             moveq  #$00000004,d0
00:00001B3A 46FC275A        	  2844:             move #$275a,SR          * Initial value
00:00001B3E 40F00804        	  2845:             move SR,4(a0,d0.l)
00:00001B42 0C70275A0804    	  2846:             cmpi.w #$275a,4(a0,d0.l)
00:00001B48 66FE            	  2847:             bne.s *                   * branch if Z set
                            	  2848: 
                            	  2849: *     x.W
00:00001B4A 46FC2777        	  2850:             move #$2777,SR          * Initial value
00:00001B4E 40F80102        	  2851:             move SR,$0102
00:00001B52 0C7827770102    	  2852:             cmpi.w #$2777,$0102
00:00001B58 66FE            	  2853:             bne.s *                   * branch if Z set
                            	  2854: 
                            	  2855: *     x.L
00:00001B5A 46FC2777        	  2856:             move #$2777,SR          * Initial value
00:00001B5E 40F900010102    	  2857:             move SR,$10102
00:00001B64 0C79277700010102	  2858:             cmpi.w #$2777,$10102
00:00001B6C 66FE            	  2859:             bne.s *                   * branch if Z set
                            	  2860: 
                            	  2861: 
                            	  2862: 
00:00001B6E 46FC2700        	  2863:             move #$2700,SR          * Put flags back to initial value
                            	  2864: 
00:00001B72 4E75            	  2865:             rts
                            	  2866: 
                            	  2867: 
                            	  2868: *-----------------------------------------------------------
                            	  2869: *-----------------------------------------------------------
                            	  2870: * OPCODE : EXT
                            	  2871: *-----------------------------------------------------------
                            	  2872: *-----------------------------------------------------------
                            	  2873: op_EXT:
                            	  2874: 
00:00001B74 707F            	  2875:             move.l #$0000007F,d0
00:00001B76 223C00008FFF    	  2876:             move.l #$00008FFF,d1
00:00001B7C 7400            	  2877:             moveq  #$00000000,d2
                            	  2878: 
00:00001B7E 4880            	  2879:             ext.w d0
00:00001B80 6BFE            	  2880:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001B82 67FE            	  2881:             beq.s *                   * Check Z Flag  beq/bne
00:00001B84 0C800000007F    	  2882:             cmpi.l #$0000007F,d0
00:00001B8A 66FE            	  2883:             bne.s *                   * branch if Z set
                            	  2884: 
00:00001B8C 48C1            	  2885:             ext.l d1
00:00001B8E 6AFE            	  2886:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001B90 67FE            	  2887:             beq.s *                   * Check Z Flag  beq/bne
00:00001B92 0C81FFFF8FFF    	  2888:             cmpi.l #$FFFF8FFF,d1
00:00001B98 66FE            	  2889:             bne.s *                   * branch if Z set
                            	  2890: 
00:00001B9A 48C2            	  2891:             ext.l d2
00:00001B9C 66FE            	  2892:             bne.s *                   * Check Z Flag  beq/bne
                            	  2893: 
                            	  2894: 
                            	  2895: 
00:00001B9E 4E75            	  2896:             rts
                            	  2897: 
                            	  2898: 
                            	  2899: *-----------------------------------------------------------
                            	  2900: *-----------------------------------------------------------
                            	  2901: * OPCODE : SWAP
                            	  2902: *-----------------------------------------------------------
                            	  2903: *-----------------------------------------------------------
                            	  2904: op_SWAP:
                            	  2905: 
00:00001BA0 203C12345678    	  2906:             move.l #$12345678,d0
                            	  2907: 
00:00001BA6 4840            	  2908:             swap d0
00:00001BA8 6BFE            	  2909:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001BAA 67FE            	  2910:             beq.s *                   * Check Z Flag  beq/bne
00:00001BAC 0C8056781234    	  2911:             cmpi.l #$56781234,d0
00:00001BB2 66FE            	  2912:             bne.s *                   * branch if Z set
                            	  2913: 
                            	  2914: 
                            	  2915: 
00:00001BB4 4E75            	  2916:             rts
                            	  2917: 
                            	  2918: 
                            	  2919: *-----------------------------------------------------------
                            	  2920: *-----------------------------------------------------------
                            	  2921: * OPCODE : LEA_PEA
                            	  2922: *-----------------------------------------------------------
                            	  2923: *-----------------------------------------------------------
                            	  2924: op_LEAPEA:
                            	  2925: 
00:00001BB6 207C00345678    	  2926:             move.l #$00345678,a0
00:00001BBC 7800            	  2927:             moveq  #$00000000,d4
                            	  2928: 
                            	  2929: *     (An)
00:00001BBE 4DD0            	  2930:             lea (a0),a6
00:00001BC0 200E            	  2931:             move.l a6,d0
00:00001BC2 0C8000345678    	  2932:             cmpi.l #$00345678,d0
00:00001BC8 66FE            	  2933:             bne.s *                   * branch if Z set
00:00001BCA 4850            	  2934:             pea (a0)
00:00001BCC 0C9700345678    	  2935:             cmpi.l #$00345678,(a7)
00:00001BD2 66FE            	  2936:             bne.s *                   * branch if Z set
                            	  2937:             * This was without a specifier which the assembler defaulted to .w
00:00001BD4 588F            	  2938:             addq.l #4,a7            * Restore Stack Pointer
                            	  2939: 
                            	  2940: *     x(An)
00:00001BD6 4DE80004        	  2941:             lea 4(a0),a6
00:00001BDA 200E            	  2942:             move.l a6,d0
00:00001BDC 0C800034567C    	  2943:             cmpi.l #$0034567C,d0
00:00001BE2 66FE            	  2944:             bne.s *                   * branch if Z set
00:00001BE4 48680004        	  2945:             pea 4(a0)
00:00001BE8 0C970034567C    	  2946:             cmpi.l #$0034567C,(a7)
00:00001BEE 66FE            	  2947:             bne.s *                   * branch if Z set
                            	  2948:             * This was without a specifier which the assembler defaulted to .w
00:00001BF0 588F            	  2949:             addq.l #4,a7            * Restore Stack Pointer
                            	  2950: 
                            	  2951: *     x(An,Dn.l)
00:00001BF2 4DF04004        	  2952:             lea 4(a0,d4),a6
00:00001BF6 200E            	  2953:             move.l a6,d0
00:00001BF8 0C800034567C    	  2954:             cmpi.l #$0034567C,d0
00:00001BFE 66FE            	  2955:             bne.s *                   * branch if Z set
00:00001C00 48704804        	  2956:             pea 4(a0,d4.l)
00:00001C04 0C970034567C    	  2957:             cmpi.l #$0034567C,(a7)
00:00001C0A 66FE            	  2958:             bne.s *                   * branch if Z set
                            	  2959:             * This was without a specifier which the assembler defaulted to .w
00:00001C0C 588F            	  2960:             addq.l #4,a7            * Restore Stack Pointer
                            	  2961: 
                            	  2962: *     x.W
00:00001C0E 4DF81234        	  2963:             lea $1234,a6
00:00001C12 200E            	  2964:             move.l a6,d0
00:00001C14 0C401234        	  2965:             cmpi.w #$1234,d0
00:00001C18 66FE            	  2966:             bne.s *                   * branch if Z set
00:00001C1A 48781234        	  2967:             pea $1234
00:00001C1E 0C9700001234    	  2968:             cmpi.l #$00001234,(a7)
00:00001C24 66FE            	  2969:             bne.s *                   * branch if Z set
                            	  2970:             * This was without a specifier which the assembler defaulted to .w
00:00001C26 588F            	  2971:             addq.l #4,a7            * Restore Stack Pointer
                            	  2972: 
                            	  2973: *     x.L
00:00001C28 4DF900345678    	  2974:             lea $00345678,a6
00:00001C2E 200E            	  2975:             move.l a6,d0
00:00001C30 B08E            	  2976:             cmp.l a6,d0
00:00001C32 66FE            	  2977:             bne.s *                   * branch if Z set
00:00001C34 487900345678    	  2978:             pea $00345678
00:00001C3A 0C9700345678    	  2979:             cmpi.l #$00345678,(a7)
00:00001C40 66FE            	  2980:             bne.s *                   * branch if Z set
                            	  2981:             * This was without a specifier which the assembler defaulted to .w
00:00001C42 588F            	  2982:             addq.l #4,a7            * Restore Stack Pointer
                            	  2983: 
                            	  2984: *     x(PC)
00:00001C44 4DFA0008        	  2985:             lea LEA1(pc),a6
00:00001C48 200E            	  2986:             move.l a6,d0
00:00001C4A B08E            	  2987:             cmp.l a6,d0
00:00001C4C 66FE            	  2988:             bne.s *                   * branch if Z set
00:00001C4E 487AFFFE        	  2989: LEA1:       pea LEA1(pc)
00:00001C52 0C970000241E    	  2990:             cmpi.l #$0000241E,(a7)
00:00001C58 67FE            	  2991:             beq.s *                   * branch if Z clear
                            	  2992:             * This was without a specifier which the assembler defaulted to .w
00:00001C5A 588F            	  2993:             addq.l #4,a7              * Restore Stack Pointer
                            	  2994: 
                            	  2995: 
                            	  2996: 
                            	  2997: 
00:00001C5C 46FC2700        	  2998:             move #$2700,SR          * Put flags back to initial value
                            	  2999: 
00:00001C60 4E75            	  3000:             rts
                            	  3001: 
                            	  3002: 
                            	  3003: 
                            	  3004: *-----------------------------------------------------------
                            	  3005: *-----------------------------------------------------------
                            	  3006: * OPCODE : LEA_TAS
                            	  3007: *-----------------------------------------------------------
                            	  3008: *-----------------------------------------------------------
                            	  3009: op_TAS:
                            	  3010: 
                            	  3011: *     Test just one addressing mode
                            	  3012: 
00:00001C62 307C0100        	  3013:             move.l #$00000100,a0
                            	  3014: 
                            	  3015: *     (An)
00:00001C66 10BC0000        	  3016:             move.b #$00,(a0)
00:00001C6A 6BFE            	  3017:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C6C 66FE            	  3018:             bne.s *                   * Check Z Flag  beq/bne
00:00001C6E 4AD0            	  3019:             tas (a0)
00:00001C70 0C100080        	  3020:             cmpi.b #$80,(a0)
00:00001C74 66FE            	  3021:             bne.s *                   * branch if Z set
00:00001C76 10BC00F5        	  3022:             move.b #$F5,(a0)
00:00001C7A 4AD0            	  3023:             tas (a0)
00:00001C7C 6AFE            	  3024:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001C7E 67FE            	  3025:             beq.s *                   * Check Z Flag  beq/bne
00:00001C80 4AD0            	  3026:             tas (a0)
00:00001C82 0C1000F5        	  3027:             cmpi.b #$F5,(a0)
00:00001C86 66FE            	  3028:             bne.s *                   * branch if Z set
                            	  3029: 
00:00001C88 4E75            	  3030:             rts
                            	  3031: 
                            	  3032: 
                            	  3033: *-----------------------------------------------------------
                            	  3034: *-----------------------------------------------------------
                            	  3035: * OPCODE : LEA_TST
                            	  3036: *-----------------------------------------------------------
                            	  3037: *-----------------------------------------------------------
                            	  3038: op_TST:
                            	  3039: 
                            	  3040: *     Test just one addressing mode
                            	  3041: 
00:00001C8A 307C0100        	  3042:             move.l #$00000100,a0
                            	  3043: 
                            	  3044: *     (An) - BYTE
00:00001C8E 10BC0000        	  3045:             move.b #$00,(a0)
00:00001C92 4A10            	  3046:             tst.b (a0)
00:00001C94 6BFE            	  3047:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C96 66FE            	  3048:             bne.s *                   * Check Z Flag  beq/bne
00:00001C98 10BC00F5        	  3049:             move.b #$F5,(a0)
00:00001C9C 4A10            	  3050:             tst.b (a0)
00:00001C9E 6AFE            	  3051:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CA0 67FE            	  3052:             beq.s *                   * Check Z Flag  beq/bne
                            	  3053: 
                            	  3054: *     (An) - WORD
00:00001CA2 30BC0000        	  3055:             move.w #$0000,(a0)
00:00001CA6 4A50            	  3056:             tst.w (a0)
00:00001CA8 6BFE            	  3057:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CAA 66FE            	  3058:             bne.s *                   * Check Z Flag  beq/bne
00:00001CAC 30BCF567        	  3059:             move.w #$F567,(a0)
00:00001CB0 4A50            	  3060:             tst.w (a0)
00:00001CB2 6AFE            	  3061:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CB4 67FE            	  3062:             beq.s *                   * Check Z Flag  beq/bne
                            	  3063: 
                            	  3064: *     (An) - LONG
00:00001CB6 20BC00000000    	  3065:             move.l #$00000000,(a0)
00:00001CBC 4A90            	  3066:             tst.l (a0)
00:00001CBE 6BFE            	  3067:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CC0 66FE            	  3068:             bne.s *                   * Check Z Flag  beq/bne
00:00001CC2 20BCF56789AB    	  3069:             move.l #$F56789ab,(a0)
00:00001CC8 4A90            	  3070:             tst.l (a0)
00:00001CCA 6AFE            	  3071:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CCC 67FE            	  3072:             beq.s *                   * Check Z Flag  beq/bne
                            	  3073: 
                            	  3074: 
00:00001CCE 4E75            	  3075:             rts
                            	  3076: 
                            	  3077: 
                            	  3078: *-----------------------------------------------------------
                            	  3079: *-----------------------------------------------------------
                            	  3080: * OPCODE : LINKS
                            	  3081: *-----------------------------------------------------------
                            	  3082: *-----------------------------------------------------------
                            	  3083: op_LINKS:
                            	  3084: 
00:00001CD0 207C11223344    	  3085:             move.l #$11223344,a0
00:00001CD6 203C11223344    	  3086:             move.l #$11223344,d0
00:00001CDC 4E500000        	  3087:             link a0,#$0
00:00001CE0 0C9711223344    	  3088:             cmpi.l #$11223344,(a7)
                            	  3089: 
00:00001CE6 4E58            	  3090:             unlk a0
00:00001CE8 B1C0            	  3091:             cmp.l d0,a0
00:00001CEA 66FE            	  3092:             bne.s *                   * branch if Z set
                            	  3093: 
00:00001CEC 4E75            	  3094:             rts
                            	  3095: 
                            	  3096: *-----------------------------------------------------------
                            	  3097: *-----------------------------------------------------------
                            	  3098: * OPCODE : MOVE_USP
                            	  3099: *-----------------------------------------------------------
                            	  3100: *-----------------------------------------------------------
                            	  3101: op_MOVE_USP:
                            	  3102: 
00:00001CEE 207C11223344    	  3103:             move.l #$11223344,a0
00:00001CF4 4E60            	  3104:             move a0,USP
00:00001CF6 4E69            	  3105:             move USP,a1
00:00001CF8 B3C8            	  3106:             cmp.l a0,a1
00:00001CFA 66FE            	  3107:             bne.s *                   * branch if Z set
                            	  3108: 
00:00001CFC 4E75            	  3109:             rts
                            	  3110: 
                            	  3111: 
                            	  3112: *-----------------------------------------------------------
                            	  3113: *-----------------------------------------------------------
                            	  3114: * OPCODE : CHK
                            	  3115: *-----------------------------------------------------------
                            	  3116: *-----------------------------------------------------------
                            	  3117: op_CHK:
00:00001CFE 303C1122        	  3118:             move.w #$1122,d0
00:00001D02 323C1122        	  3119:             move.w #$1122,d1
00:00001D06 4380            	  3120:             chk d0,d1
                            	  3121: 
00:00001D08 4E71            	  3122:             nop
00:00001D0A 4E71            	  3123:             nop
                            	  3124: 
00:00001D0C 323C1122        	  3125:             move.w #$1122,d1
00:00001D10 43BC1122        	  3126:             chk #$1122,d1
                            	  3127: 
00:00001D14 323C1122        	  3128:             move.w #$1122,d1
00:00001D18 43BC007A        	  3129:             chk #00122,d1
00:00001D1C BCBCEEEE0006    	  3130:             cmp.l #$EEEE0006,d6
00:00001D22 66FE            	  3131:             bne.s *                   * branch if Z set
                            	  3132: 
00:00001D24 303C1122        	  3133:             move.w #$1122,d0
00:00001D28 323C8000        	  3134:             move.w #$8000,d1
00:00001D2C 4380            	  3135:             chk d0,d1
00:00001D2E BCBCEEEE0006    	  3136:             cmp.l #$EEEE0006,d6
00:00001D34 66FE            	  3137:             bne.s *                   * branch if Z set
                            	  3138: 
00:00001D36 4E75            	  3139:             rts
                            	  3140: 
                            	  3141: 
                            	  3142: *-----------------------------------------------------------
                            	  3143: *-----------------------------------------------------------
                            	  3144: * OPCODE : NEGS
                            	  3145: *-----------------------------------------------------------
                            	  3146: *-----------------------------------------------------------
                            	  3147: op_NEGS:
                            	  3148: 
                            	  3149: *     NOT - BYTE
00:00001D38 307C0100        	  3150:             move.l #$00000100,a0
00:00001D3C 7000            	  3151:             moveq  #$00000000,d0
00:00001D3E 4600            	  3152:             not.b d0
00:00001D40 6AFE            	  3153:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D42 67FE            	  3154:             beq.s *                   * Check Z Flag  beq/bne
00:00001D44 4600            	  3155:             not.b d0
00:00001D46 6BFE            	  3156:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D48 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
00:00001D4A 4A00            	  3158:             cmpi.b #$00,d0
00:00001D4C 66FE            	  3159:             bne.s *                   * Check Z Flag  beq/bne
00:00001D4E 10BC0080        	  3160:             move.b #$80,(a0)
00:00001D52 4610            	  3161:             not.b (a0)
00:00001D54 6BFE            	  3162:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D56 67FE            	  3163:             beq.s *                   * Check Z Flag  beq/bne
00:00001D58 4610            	  3164:             not.b (a0)
00:00001D5A 6AFE            	  3165:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D5C 67FE            	  3166:             beq.s *                   * Check Z Flag  beq/bne
00:00001D5E 0C100080        	  3167:             cmpi.b #$80,(a0)
00:00001D62 66FE            	  3168:             bne.s *                   * Check Z Flag  beq/bne
                            	  3169: 
                            	  3170: *     NOT - WORD
00:00001D64 307C0100        	  3171:             move.l #$00000100,a0
00:00001D68 7000            	  3172:             moveq  #$00000000,d0
00:00001D6A 4640            	  3173:             not.w d0
00:00001D6C 6AFE            	  3174:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D6E 67FE            	  3175:             beq.s *                   * Check Z Flag  beq/bne
00:00001D70 4640            	  3176:             not.w d0
00:00001D72 6BFE            	  3177:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D74 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
00:00001D76 4A40            	  3179:             cmpi.w #$0000,d0
00:00001D78 66FE            	  3180:             bne.s *                   * Check Z Flag  beq/bne
00:00001D7A 30BC5A5A        	  3181:             move.w #$5a5a,(a0)
00:00001D7E 4650            	  3182:             not.w (a0)
00:00001D80 6AFE            	  3183:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D82 67FE            	  3184:             beq.s *                   * Check Z Flag  beq/bne
00:00001D84 4650            	  3185:             not.w (a0)
00:00001D86 6BFE            	  3186:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D88 67FE            	  3187:             beq.s *                   * Check Z Flag  beq/bne
00:00001D8A 0C505A5A        	  3188:             cmpi.w #$5a5a,(a0)
00:00001D8E 66FE            	  3189:             bne.s *                   * Check Z Flag  beq/bne
                            	  3190: 
                            	  3191: *     NOT - LONG
00:00001D90 307C0100        	  3192:             move.l #$00000100,a0
00:00001D94 7000            	  3193:             moveq  #$00000000,d0
00:00001D96 4680            	  3194:             not.l d0
00:00001D98 6AFE            	  3195:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D9A 67FE            	  3196:             beq.s *                   * Check Z Flag  beq/bne
00:00001D9C 4680            	  3197:             not.l d0
00:00001D9E 6BFE            	  3198:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DA0 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
00:00001DA2 4A80            	  3200:             cmpi.l #$00000000,d0
00:00001DA4 66FE            	  3201:             bne.s *                   * Check Z Flag  beq/bne
00:00001DA6 20BC5A5A1234    	  3202:             move.l #$5a5a1234,(a0)
00:00001DAC 4690            	  3203:             not.l (a0)
00:00001DAE 6AFE            	  3204:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DB0 67FE            	  3205:             beq.s *                   * Check Z Flag  beq/bne
00:00001DB2 4690            	  3206:             not.l (a0)
00:00001DB4 6BFE            	  3207:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DB6 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne
00:00001DB8 0C905A5A1234    	  3209:             cmpi.l #$5a5a1234,(a0)
00:00001DBE 66FE            	  3210:             bne.s *                   * Check Z Flag  beq/bne
                            	  3211: 
                            	  3212: * -----
                            	  3213: 
                            	  3214: *     NEG - BYTE
00:00001DC0 307C0100        	  3215:             move.l #$00000100,a0
00:00001DC4 7000            	  3216:             moveq  #$00000000,d0
00:00001DC6 7240D241        	  3217:             move.l #$00000080,d1
00:00001DCA 4400            	  3218:             neg.b d0
00:00001DCC 6BFE            	  3219:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001DCE 66FE            	  3220:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001DD0 65FE            	  3221:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001DD2 69FE            	  3222:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DD4 4401            	  3223:             neg.b d1
00:00001DD6 6AFE            	  3224:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001DD8 67FE            	  3225:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DDA 64FE            	  3226:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DDC 68FE            	  3227:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001DDE 0C010080        	  3228:             cmpi.b #$80,d1
00:00001DE2 66FE            	  3229:             bne.s *                   * Check Z Flag  beq/bne
00:00001DE4 10BC007F        	  3230:             move.b #$7F,(a0)
00:00001DE8 4410            	  3231:             neg.b (a0)
00:00001DEA 6AFE            	  3232:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001DEC 67FE            	  3233:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DEE 64FE            	  3234:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DF0 69FE            	  3235:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DF2 10BC00F5        	  3236:             move.b #$F5,(a0)
00:00001DF6 4410            	  3237:             neg.b (a0)
00:00001DF8 6BFE            	  3238:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001DFA 67FE            	  3239:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DFC 64FE            	  3240:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DFE 69FE            	  3241:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E00 0C10000B        	  3242:             cmpi.b #$0B,(a0)
00:00001E04 66FE            	  3243:             bne.s *                   * Check Z Flag  beq/bne
                            	  3244: 
                            	  3245: * -----
                            	  3246: 
                            	  3247: *     NEG - WORD
00:00001E06 307C0100        	  3248:             move.l #$00000100,a0
00:00001E0A 7000            	  3249:             moveq  #$00000000,d0
00:00001E0C 223C00008000    	  3250:             move.l #$00008000,d1
00:00001E12 4440            	  3251:             neg.w d0
00:00001E14 6BFE            	  3252:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E16 66FE            	  3253:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E18 65FE            	  3254:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E1A 69FE            	  3255:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E1C 4441            	  3256:             neg.w d1
00:00001E1E 6AFE            	  3257:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E20 67FE            	  3258:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E22 64FE            	  3259:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E24 68FE            	  3260:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E26 0C418000        	  3261:             cmpi.w #$8000,d1
00:00001E2A 66FE            	  3262:             bne.s *                   * Check Z Flag  beq/bne
00:00001E2C 30BC7FFF        	  3263:             move.w #$7FFF,(a0)
00:00001E30 4450            	  3264:             neg.w (a0)
00:00001E32 6AFE            	  3265:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E34 67FE            	  3266:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E36 64FE            	  3267:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E38 69FE            	  3268:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E3A 30BCF578        	  3269:             move.w #$F578,(a0)
00:00001E3E 4450            	  3270:             neg.w (a0)
00:00001E40 6BFE            	  3271:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E42 67FE            	  3272:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E44 64FE            	  3273:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E46 69FE            	  3274:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E48 0C500A88        	  3275:             cmpi.w #$0A88,(a0)
00:00001E4C 66FE            	  3276:             bne.s *                   * Check Z Flag  beq/bne
                            	  3277: 
                            	  3278: * -----
                            	  3279: 
                            	  3280: *     NEG - LONG
00:00001E4E 307C0100        	  3281:             move.l #$00000100,a0
00:00001E52 7000            	  3282:             moveq  #$00000000,d0
00:00001E54 223C80000000    	  3283:             move.l #$80000000,d1
00:00001E5A 4480            	  3284:             neg.l d0
00:00001E5C 6BFE            	  3285:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E5E 66FE            	  3286:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E60 65FE            	  3287:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E62 69FE            	  3288:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E64 4481            	  3289:             neg.l d1
00:00001E66 6AFE            	  3290:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E68 67FE            	  3291:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E6A 64FE            	  3292:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E6C 68FE            	  3293:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E6E 0C8180000000    	  3294:             cmpi.l #$80000000,d1
00:00001E74 66FE            	  3295:             bne.s *                   * Check Z Flag  beq/bne
00:00001E76 20BC7FFFFFFF    	  3296:             move.l #$7FFFFFFF,(a0)
00:00001E7C 4490            	  3297:             neg.l (a0)
00:00001E7E 6AFE            	  3298:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E80 67FE            	  3299:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E82 64FE            	  3300:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E84 69FE            	  3301:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E86 20BCF5781234    	  3302:             move.l #$F5781234,(a0)
00:00001E8C 4490            	  3303:             neg.l (a0)
00:00001E8E 6BFE            	  3304:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E90 67FE            	  3305:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E92 64FE            	  3306:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E94 69FE            	  3307:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E96 0C900A87EDCC    	  3308:             cmpi.l #$0A87EDCC,(a0)
00:00001E9C 66FE            	  3309:             bne.s *                   * Check Z Flag  beq/bne
                            	  3310: 
                            	  3311: 
                            	  3312: * -----
                            	  3313: 
                            	  3314: *     NEGX - BYTE
00:00001E9E 307C0100        	  3315:             move.l #$00000100,a0
00:00001EA2 7000            	  3316:             moveq  #$00000000,d0
00:00001EA4 7240D241        	  3317:             move.l #$00000080,d1
00:00001EA8 003C0010        	  3318:             ori.b #$10,CCR        * Set X Flag
00:00001EAC 4000            	  3319:             negx.b d0
00:00001EAE 6AFE            	  3320:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001EB0 67FE            	  3321:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EB2 64FE            	  3322:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EB4 69FE            	  3323:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EB6 023C00EF        	  3324:             andi.b #$EF,CCR       * Clear X Flag
00:00001EBA 4000            	  3325:             negx.b d0
00:00001EBC 6BFE            	  3326:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001EBE 67FE            	  3327:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EC0 64FE            	  3328:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EC2 69FE            	  3329:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EC4 003C0010        	  3330:             ori.b #$10,CCR        * Set X Flag
00:00001EC8 4001            	  3331:             negx.b d1
00:00001ECA 6BFE            	  3332:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001ECC 67FE            	  3333:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001ECE 64FE            	  3334:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001ED0 69FE            	  3335:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001ED2 0C01007F        	  3336:             cmpi.b #$7F,d1
00:00001ED6 66FE            	  3337:             bne.s *                   * Check Z Flag  beq/bne
00:00001ED8 023C00EF        	  3338:             andi.b #$EF,CCR       * Clear X Flag
00:00001EDC 4001            	  3339:             negx.b d1
00:00001EDE 6AFE            	  3340:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EE0 67FE            	  3341:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EE2 64FE            	  3342:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001EE4 69FE            	  3343:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001EE6 0C010081        	  3344:             cmpi.b #$81,d1
00:00001EEA 66FE            	  3345:             bne.s *                   * Check Z Flag  beq/bne
00:00001EEC 10BC007F        	  3346:             move.b #$7F,(a0)
00:00001EF0 003C0010        	  3347:             ori.b #$10,CCR        * Set X Flag
00:00001EF4 4010            	  3348:             negx.b (a0)
00:00001EF6 6AFE            	  3349:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EF8 67FE            	  3350:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EFA 64FE            	  3351:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3352:             * I think overflow should happen here.
                            	  3353: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EFC 10BC007F        	  3354:             move.b #$7F,(a0)
00:00001F00 023C00EF        	  3355:             andi.b #$EF,CCR       * Clear X Flag
00:00001F04 4010            	  3356:             negx.b (a0)
00:00001F06 6AFE            	  3357:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F08 67FE            	  3358:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F0A 64FE            	  3359:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F0C 69FE            	  3360:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F0E 10BC00F5        	  3361:             move.b #$F5,(a0)
00:00001F12 003C0010        	  3362:             ori.b #$10,CCR        * Set X Flag
00:00001F16 4010            	  3363:             negx.b (a0)
00:00001F18 6BFE            	  3364:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F1A 67FE            	  3365:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F1C 64FE            	  3366:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F1E 69FE            	  3367:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F20 0C10000A        	  3368:             cmpi.b #$0A,(a0)
00:00001F24 66FE            	  3369:             bne.s *                   * Check Z Flag  beq/bne
00:00001F26 023C00EF        	  3370:             andi.b #$EF,CCR       * Clear X Flag
00:00001F2A 4010            	  3371:             negx.b (a0)
00:00001F2C 6AFE            	  3372:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F2E 67FE            	  3373:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F30 64FE            	  3374:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F32 69FE            	  3375:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F34 0C1000F6        	  3376:             cmpi.b #$F6,(a0)
00:00001F38 66FE            	  3377:             bne.s *                   * Check Z Flag  beq/bne
                            	  3378: 
                            	  3379: 
                            	  3380: 
                            	  3381: * -----
                            	  3382: 
                            	  3383: *     NEGX - WORD
00:00001F3A 307C0100        	  3384:             move.l #$00000100,a0
00:00001F3E 7000            	  3385:             moveq  #$00000000,d0
00:00001F40 223C00008000    	  3386:             move.l #$00008000,d1
00:00001F46 003C0010        	  3387:             ori.b #$10,CCR        * Set X Flag
00:00001F4A 4040            	  3388:             negx.w d0
00:00001F4C 6AFE            	  3389:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F4E 67FE            	  3390:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F50 64FE            	  3391:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F52 69FE            	  3392:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F54 023C00EF        	  3393:             andi.b #$EF,CCR       * Clear X Flag
00:00001F58 4040            	  3394:             negx.w d0
00:00001F5A 6BFE            	  3395:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F5C 67FE            	  3396:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F5E 64FE            	  3397:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F60 69FE            	  3398:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F62 003C0010        	  3399:             ori.b #$10,CCR        * Set X Flag
00:00001F66 4041            	  3400:             negx.w d1
00:00001F68 6BFE            	  3401:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001F6A 67FE            	  3402:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F6C 64FE            	  3403:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F6E 69FE            	  3404:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F70 0C417FFF        	  3405:             cmpi.w #$7FFF,d1
00:00001F74 66FE            	  3406:             bne.s *                   * Check Z Flag  beq/bne
00:00001F76 023C00EF        	  3407:             andi.b #$EF,CCR       * Clear X Flag
00:00001F7A 4041            	  3408:             negx.w d1
00:00001F7C 6AFE            	  3409:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F7E 67FE            	  3410:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F80 64FE            	  3411:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F82 69FE            	  3412:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F84 0C418001        	  3413:             cmpi.w #$8001,d1
00:00001F88 66FE            	  3414:             bne.s *                   * Check Z Flag  beq/bne
00:00001F8A 30BC7FFF        	  3415:             move.w #$7FFF,(a0)
00:00001F8E 003C0010        	  3416:             ori.b #$10,CCR        * Set X Flag
00:00001F92 4050            	  3417:             negx.w (a0)
00:00001F94 6AFE            	  3418:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F96 67FE            	  3419:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F98 64FE            	  3420:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3421: ***            
                            	  3422: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F9A 30BCF567        	  3423:             move.w #$F567,(a0)
00:00001F9E 023C00EF        	  3424:             andi.b #$EF,CCR       * Clear X Flag
00:00001FA2 4050            	  3425:             negx.w (a0)
00:00001FA4 6BFE            	  3426:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001FA6 67FE            	  3427:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FA8 64FE            	  3428:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FAA 69FE            	  3429:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FAC 30BCF567        	  3430:             move.w #$F567,(a0)
00:00001FB0 003C0010        	  3431:             ori.b #$10,CCR        * Set X Flag
00:00001FB4 4050            	  3432:             negx.w (a0)
00:00001FB6 6BFE            	  3433:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FB8 67FE            	  3434:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FBA 64FE            	  3435:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FBC 69FE            	  3436:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FBE 0C500A98        	  3437:             cmpi.w #$0A98,(a0)
00:00001FC2 66FE            	  3438:             bne.s *                   * Check Z Flag  beq/bne
00:00001FC4 023C00EF        	  3439:             andi.b #$EF,CCR       * Clear X Flag
00:00001FC8 4050            	  3440:             negx.w (a0)
00:00001FCA 6AFE            	  3441:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001FCC 67FE            	  3442:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FCE 64FE            	  3443:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FD0 69FE            	  3444:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FD2 0C50F568        	  3445:             cmpi.w #$F568,(a0)
00:00001FD6 66FE            	  3446:             bne.s *                   * Check Z Flag  beq/bne
                            	  3447: 
                            	  3448: 
                            	  3449: * -----
                            	  3450: 
                            	  3451: *     NEGX - LONG
00:00001FD8 307C0100        	  3452:             move.l #$00000100,a0
00:00001FDC 7000            	  3453:             moveq  #$00000000,d0
00:00001FDE 223C80000000    	  3454:             move.l #$80000000,d1
00:00001FE4 003C0010        	  3455:             ori.b #$10,CCR        * Set X Flag
00:00001FE8 4080            	  3456:             negx.l d0
00:00001FEA 6AFE            	  3457:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001FEC 67FE            	  3458:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001FEE 64FE            	  3459:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001FF0 69FE            	  3460:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FF2 023C00EF        	  3461:             andi.b #$EF,CCR       * Clear X Flag
00:00001FF6 4080            	  3462:             negx.l d0
00:00001FF8 6BFE            	  3463:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FFA 67FE            	  3464:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001FFC 64FE            	  3465:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001FFE 69FE            	  3466:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002000 003C0010        	  3467:             ori.b #$10,CCR        * Set X Flag
00:00002004 4081            	  3468:             negx.l d1
00:00002006 6BFE            	  3469:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00002008 67FE            	  3470:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000200A 64FE            	  3471:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000200C 69FE            	  3472:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:0000200E 0C817FFFFFFF    	  3473:             cmpi.l #$7FFFFFFF,d1
00:00002014 66FE            	  3474:             bne.s *                   * Check Z Flag  beq/bne
00:00002016 023C00EF        	  3475:             andi.b #$EF,CCR       * Clear X Flag
00:0000201A 4081            	  3476:             negx.l d1
00:0000201C 6AFE            	  3477:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000201E 67FE            	  3478:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002020 64FE            	  3479:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3480: ****            
                            	  3481: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:00002022 0C8180000001    	  3482:             cmpi.l #$80000001,d1
00:00002028 66FE            	  3483:             bne.s *                   * Check Z Flag  beq/bne
00:0000202A 20BC00007FFF    	  3484:             move.l #$7FFF,(a0)
00:00002030 003C0010        	  3485:             ori.b #$10,CCR        * Set X Flag
00:00002034 4090            	  3486:             negx.l (a0)
00:00002036 6AFE            	  3487:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00002038 67FE            	  3488:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000203A 64FE            	  3489:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3490: ****            
                            	  3491: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000203C 20BCF5671234    	  3492:             move.l #$F5671234,(a0)
00:00002042 023C00EF        	  3493:             andi.b #$EF,CCR       * Clear X Flag
00:00002046 4090            	  3494:             negx.l (a0)
00:00002048 6BFE            	  3495:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000204A 67FE            	  3496:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000204C 64FE            	  3497:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000204E 69FE            	  3498:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002050 20BCF5675678    	  3499:             move.l #$F5675678,(a0)
00:00002056 003C0010        	  3500:             ori.b #$10,CCR        * Set X Flag
00:0000205A 4090            	  3501:             negx.l (a0)
00:0000205C 6BFE            	  3502:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000205E 67FE            	  3503:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002060 64FE            	  3504:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002062 69FE            	  3505:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002064 0C900A98A987    	  3506:             cmpi.l #$0A98A987,(a0)
00:0000206A 66FE            	  3507:             bne.s *                   * Check Z Flag  beq/bne
00:0000206C 023C00EF        	  3508:             andi.b #$EF,CCR       * Clear X Flag
00:00002070 4090            	  3509:             negx.l (a0)
00:00002072 6AFE            	  3510:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00002074 67FE            	  3511:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002076 64FE            	  3512:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002078 69FE            	  3513:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000207A 0C90F5675679    	  3514:             cmpi.l #$F5675679,(a0)
00:00002080 66FE            	  3515:             bne.s *                   * Check Z Flag  beq/bne
                            	  3516: 
                            	  3517: 
                            	  3518: * -----
                            	  3519: 
                            	  3520: *     CLR - BYTE
00:00002082 307C0100        	  3521:             move.l #$00000100,a0
00:00002086 203C12345678    	  3522:             move.l #$12345678,d0
00:0000208C 223C12345678    	  3523:             move.l #$12345678,d1
00:00002092 243C12345678    	  3524:             move.l #$12345678,d2
00:00002098 283C12345600    	  3525:             move.l #$12345600,d4
00:0000209E 2A3C12340000    	  3526:             move.l #$12340000,d5
00:000020A4 7C00            	  3527:             moveq  #$00000000,d6
                            	  3528: 
00:000020A6 4200            	  3529:             clr.b d0
00:000020A8 66FE            	  3530:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020AA 6BFE            	  3531:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020AC B880            	  3532:             cmp.l d0,d4
00:000020AE 66FE            	  3533:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3534: 
00:000020B0 4241            	  3535:             clr.w d1
00:000020B2 66FE            	  3536:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020B4 6BFE            	  3537:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020B6 BA81            	  3538:             cmp.l d1,d5
00:000020B8 66FE            	  3539:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3540: 
00:000020BA 7400            	  3541:             clr.l d2
00:000020BC 66FE            	  3542:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020BE 6BFE            	  3543:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020C0 BC82            	  3544:             cmp.l d2,d6
00:000020C2 66FE            	  3545:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3546: 
00:000020C4 4E75            	  3547:             rts
                            	  3548: 
                            	  3549: 
                            	  3550: 
                            	  3551: *-----------------------------------------------------------
                            	  3552: *-----------------------------------------------------------
                            	  3553: * OPCODE : MOVEM
                            	  3554: *-----------------------------------------------------------
                            	  3555: *-----------------------------------------------------------
                            	  3556: op_MOVEM:
                            	  3557: 
                            	  3558: *     WORD  Registers --> Memory
00:000020C6 203C0000D0D0    	  3559:             move.l #$0000d0d0,d0
00:000020CC 223C0000D1D1    	  3560:             move.l #$0000d1d1,d1
00:000020D2 243C0000D2D2    	  3561:             move.l #$0000d2d2,d2
00:000020D8 263C0000D3D3    	  3562:             move.l #$0000d3d3,d3
00:000020DE 283C0000D4D4    	  3563:             move.l #$0000d4d4,d4
00:000020E4 2A3C0000D5D5    	  3564:             move.l #$0000d5d5,d5
00:000020EA 2C3C0000D6D6    	  3565:             move.l #$0000d6d6,d6
00:000020F0 2E3C0000D7D7    	  3566:             move.l #$0000d7d7,d7
00:000020F6 307C0A0A        	  3567:             move.l #$00000a0a,a0
00:000020FA 327C1A1A        	  3568:             move.l #$00001a1a,a1
00:000020FE 347C2A2A        	  3569:             move.l #$00002a2a,a2
00:00002102 367C3A3A        	  3570:             move.l #$00003a3a,a3
00:00002106 387C4A4A        	  3571:             move.l #$00004a4a,a4
00:0000210A 3A7C5A5A        	  3572:             move.l #$00005a5a,a5
00:0000210E 3C7C6A6A        	  3573:             move.l #$00006a6a,a6
                            	  3574: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3575: 
00:00002112 48B8FFFF0100    	  3576:             movem.w D0-D7/A0-A7,$00000100
                            	  3577: 
00:00002118 307C0100        	  3578:             move.l #$00000100,a0
                            	  3579: 
00:0000211C B058            	  3580:             cmp.w (a0)+,d0
00:0000211E 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002120 B258            	  3582:             cmp.w (a0)+,d1
00:00002122 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002124 B458            	  3584:             cmp.w (a0)+,d2
00:00002126 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002128 B658            	  3586:             cmp.w (a0)+,d3
00:0000212A 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000212C B858            	  3588:             cmp.w (a0)+,d4
00:0000212E 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002130 BA58            	  3590:             cmp.w (a0)+,d5
00:00002132 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002134 BC58            	  3592:             cmp.w (a0)+,d6
00:00002136 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002138 BE58            	  3594:             cmp.w (a0)+,d7
00:0000213A 66FE            	  3595:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3596: 
00:0000213C 0C580A0A        	  3597:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:00002140 66FE            	  3598:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3599: 
00:00002142 B2D8            	  3600:             cmp.w (a0)+,a1
00:00002144 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002146 B4D8            	  3602:             cmp.w (a0)+,a2
00:00002148 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000214A B6D8            	  3604:             cmp.w (a0)+,a3
00:0000214C 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000214E B8D8            	  3606:             cmp.w (a0)+,a4
00:00002150 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002152 BAD8            	  3608:             cmp.w (a0)+,a5
00:00002154 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002156 BCD8            	  3610:             cmp.w (a0)+,a6
00:00002158 66FE            	  3611:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: 
                            	  3616: *     LONG  Registers --> Memory
00:0000215A 203CD0D0D0D0    	  3617:             move.l #$d0d0d0d0,d0
00:00002160 223CD1D1D1D1    	  3618:             move.l #$d1d1d1d1,d1
00:00002166 243CD2D2D2D2    	  3619:             move.l #$d2d2d2d2,d2
00:0000216C 263CD3D3D3D3    	  3620:             move.l #$d3d3d3d3,d3
00:00002172 283CD4D4D4D4    	  3621:             move.l #$d4d4d4d4,d4
00:00002178 2A3CD5D5D5D5    	  3622:             move.l #$d5d5d5d5,d5
00:0000217E 2C3CD6D6D6D6    	  3623:             move.l #$d6d6d6d6,d6
00:00002184 2E3CD7D7D7D7    	  3624:             move.l #$d7d7d7d7,d7
00:0000218A 207C0A0A0A0A    	  3625:             move.l #$0a0a0a0a,a0
00:00002190 227C1A1A1A1A    	  3626:             move.l #$1a1a1a1a,a1
00:00002196 247C2A2A2A2A    	  3627:             move.l #$2a2a2a2a,a2
00:0000219C 267C3A3A3A3A    	  3628:             move.l #$3a3a3a3a,a3
00:000021A2 287C4A4A4A4A    	  3629:             move.l #$4a4a4a4a,a4
00:000021A8 2A7C5A5A5A5A    	  3630:             move.l #$5a5a5a5a,a5
00:000021AE 2C7C6A6A6A6A    	  3631:             move.l #$6a6a6a6a,a6
                            	  3632: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3633: 
                            	  3634: 
00:000021B4 48F8FFFF0120    	  3635:             movem.l D0-D7/A0-A7,$00000120
                            	  3636: 
00:000021BA 307C0120        	  3637:             move.l #$00000120,a0
                            	  3638: 
00:000021BE B098            	  3639:             cmp.l (a0)+,d0
00:000021C0 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021C2 B298            	  3641:             cmp.l (a0)+,d1
00:000021C4 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021C6 B498            	  3643:             cmp.l (a0)+,d2
00:000021C8 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021CA B698            	  3645:             cmp.l (a0)+,d3
00:000021CC 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021CE B898            	  3647:             cmp.l (a0)+,d4
00:000021D0 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021D2 BA98            	  3649:             cmp.l (a0)+,d5
00:000021D4 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021D6 BC98            	  3651:             cmp.l (a0)+,d6
00:000021D8 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021DA BE98            	  3653:             cmp.l (a0)+,d7
00:000021DC 66FE            	  3654:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3655: 
00:000021DE 0C980A0A0A0A    	  3656:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:000021E4 66FE            	  3657:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3658: 
00:000021E6 B3D8            	  3659:             cmp.l (a0)+,a1
00:000021E8 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021EA B5D8            	  3661:             cmp.l (a0)+,a2
00:000021EC 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021EE B7D8            	  3663:             cmp.l (a0)+,a3
00:000021F0 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021F2 B9D8            	  3665:             cmp.l (a0)+,a4
00:000021F4 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021F6 BBD8            	  3667:             cmp.l (a0)+,a5
00:000021F8 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021FA BDD8            	  3669:             cmp.l (a0)+,a6
00:000021FC 66FE            	  3670:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3671: *      ----
                            	  3672: 
                            	  3673: 
                            	  3674: *     WORD  Registers --> Memory  -(An) EA Mode
00:000021FE 203C0000D0D0    	  3675:             move.l #$0000d0d0,d0
00:00002204 223C0000D1D1    	  3676:             move.l #$0000d1d1,d1
00:0000220A 243C0000D2D2    	  3677:             move.l #$0000d2d2,d2
00:00002210 263C0000D3D3    	  3678:             move.l #$0000d3d3,d3
00:00002216 283C0000D4D4    	  3679:             move.l #$0000d4d4,d4
00:0000221C 2A3C0000D5D5    	  3680:             move.l #$0000d5d5,d5
00:00002222 2C3C0000D6D6    	  3681:             move.l #$0000d6d6,d6
00:00002228 2E3C0000D7D7    	  3682:             move.l #$0000d7d7,d7
00:0000222E 307C0A0A        	  3683:             move.l #$00000a0a,a0
00:00002232 327C1A1A        	  3684:             move.l #$00001a1a,a1
00:00002236 347C2A2A        	  3685:             move.l #$00002a2a,a2
00:0000223A 367C3A3A        	  3686:             move.l #$00003a3a,a3
00:0000223E 387C4A4A        	  3687:             move.l #$00004a4a,a4
00:00002242 3A7C5A5A        	  3688:             move.l #$00005a5a,a5
00:00002246 3C7C6A6A        	  3689:             move.l #$00006a6a,a6
                            	  3690: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3691: 
00:0000224A 307C01A0        	  3692:             move.l #$000001A0,a0
00:0000224E 48A0FFFF        	  3693:             movem.w D0-D7/A0-A7,-(a0)
                            	  3694: 
00:00002252 307C019E        	  3695:             move.l #$0000019E,a0
                            	  3696: 
00:00002256 BCE0            	  3697:             cmp.w -(a0),a6
00:00002258 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000225A BAE0            	  3699:             cmp.w -(a0),a5
00:0000225C 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000225E B8E0            	  3701:             cmp.w -(a0),a4
00:00002260 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002262 B6E0            	  3703:             cmp.w -(a0),a3
00:00002264 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002266 B4E0            	  3705:             cmp.w -(a0),a2
00:00002268 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000226A B2E0            	  3707:             cmp.w -(a0),a1
00:0000226C 66FE            	  3708:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000226E B0E0            	  3709:             cmp.w -(a0),a0
                            	  3710: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00002270 BE60            	  3711:             cmp.w -(a0),d7
00:00002272 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002274 BC60            	  3713:             cmp.w -(a0),d6
00:00002276 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002278 BA60            	  3715:             cmp.w -(a0),d5
00:0000227A 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000227C B860            	  3717:             cmp.w -(a0),d4
00:0000227E 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002280 B660            	  3719:             cmp.w -(a0),d3
00:00002282 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002284 B460            	  3721:             cmp.w -(a0),d2
00:00002286 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002288 B260            	  3723:             cmp.w -(a0),d1
00:0000228A 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000228C B060            	  3725:             cmp.w -(a0),d0
00:0000228E 66FE            	  3726:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: 
                            	  3731: *     LONG  Registers --> Memory   -(An) EA Mode
00:00002290 203CD0D0D0D0    	  3732:             move.l #$d0d0d0d0,d0
00:00002296 223CD1D1D1D1    	  3733:             move.l #$d1d1d1d1,d1
00:0000229C 243CD2D2D2D2    	  3734:             move.l #$d2d2d2d2,d2
00:000022A2 263CD3D3D3D3    	  3735:             move.l #$d3d3d3d3,d3
00:000022A8 283CD4D4D4D4    	  3736:             move.l #$d4d4d4d4,d4
00:000022AE 2A3CD5D5D5D5    	  3737:             move.l #$d5d5d5d5,d5
00:000022B4 2C3CD6D6D6D6    	  3738:             move.l #$d6d6d6d6,d6
00:000022BA 2E3CD7D7D7D7    	  3739:             move.l #$d7d7d7d7,d7
00:000022C0 207C0A0A0A0A    	  3740:             move.l #$0a0a0a0a,a0
00:000022C6 227C1A1A1A1A    	  3741:             move.l #$1a1a1a1a,a1
00:000022CC 247C2A2A2A2A    	  3742:             move.l #$2a2a2a2a,a2
00:000022D2 267C3A3A3A3A    	  3743:             move.l #$3a3a3a3a,a3
00:000022D8 287C4A4A4A4A    	  3744:             move.l #$4a4a4a4a,a4
00:000022DE 2A7C5A5A5A5A    	  3745:             move.l #$5a5a5a5a,a5
00:000022E4 2C7C6A6A6A6A    	  3746:             move.l #$6a6a6a6a,a6
                            	  3747: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3748: 
                            	  3749: 
00:000022EA 307C01A0        	  3750:             move.l #$000001A0,a0
00:000022EE 48E0FFFF        	  3751:             movem.l D0-D7/A0-A7,-(a0)
                            	  3752: 
00:000022F2 307C019C        	  3753:             move.l #$0000019C,a0
                            	  3754: 
00:000022F6 BDE0            	  3755:             cmp.l -(a0),a6
00:000022F8 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022FA BBE0            	  3757:             cmp.l -(a0),a5
00:000022FC 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022FE B9E0            	  3759:             cmp.l -(a0),a4
00:00002300 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002302 B7E0            	  3761:             cmp.l -(a0),a3
00:00002304 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002306 B5E0            	  3763:             cmp.l -(a0),a2
00:00002308 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000230A B3E0            	  3765:             cmp.l -(a0),a1
00:0000230C 66FE            	  3766:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000230E B1E0            	  3767:             cmp.l -(a0),a0
                            	  3768: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00002310 BEA0            	  3769:             cmp.l -(a0),d7
00:00002312 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002314 BCA0            	  3771:             cmp.l -(a0),d6
00:00002316 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002318 BAA0            	  3773:             cmp.l -(a0),d5
00:0000231A 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000231C B8A0            	  3775:             cmp.l -(a0),d4
00:0000231E 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002320 B6A0            	  3777:             cmp.l -(a0),d3
00:00002322 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002324 B4A0            	  3779:             cmp.l -(a0),d2
00:00002326 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002328 B2A0            	  3781:             cmp.l -(a0),d1
00:0000232A 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000232C B0A0            	  3783:             cmp.l -(a0),d0
00:0000232E 66FE            	  3784:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3785: 
                            	  3786: 
                            	  3787: 
                            	  3788: *     ----
                            	  3789: 
                            	  3790: *     WORD - Memory --> Registers
00:00002330 7000            	  3791:             moveq  #$00000000,d0
00:00002332 7200            	  3792:             moveq  #$00000000,d1
00:00002334 7400            	  3793:             moveq  #$00000000,d2
00:00002336 7600            	  3794:             moveq  #$00000000,d3
00:00002338 7800            	  3795:             moveq  #$00000000,d4
00:0000233A 7A00            	  3796:             moveq  #$00000000,d5
00:0000233C 7C00            	  3797:             moveq  #$00000000,d6
00:0000233E 7E00            	  3798:             moveq  #$00000000,d7
00:00002340 91C8            	  3799:             move.l #$00000000,a0
00:00002342 93C9            	  3800:             move.l #$00000000,a1
00:00002344 95CA            	  3801:             move.l #$00000000,a2
00:00002346 97CB            	  3802:             move.l #$00000000,a3
00:00002348 99CC            	  3803:             move.l #$00000000,a4
00:0000234A 9BCD            	  3804:             move.l #$00000000,a5
00:0000234C 9DCE            	  3805:             move.l #$00000000,a6
                            	  3806: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3807: 
00:0000234E 4CB82A550100    	  3808:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3809: 
00:00002354 B0BCFFFFD0D0    	  3810:             cmp.l #$FFFFD0D0,d0
00:0000235A 66FE            	  3811:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000235C B4BCFFFFD1D1    	  3812:             cmp.l #$FFFFD1D1,d2
00:00002362 66FE            	  3813:             bne.s *                  * Check Z Flag  beq/bne 0
00:00002364 B8BCFFFFD2D2    	  3814:             cmp.l #$FFFFD2D2,d4
00:0000236A 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000236C BCBCFFFFD3D3    	  3816:             cmp.l #$FFFFD3D3,d6
00:00002372 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002374 B2FCD4D4        	  3818:             cmp.l #$FFFFD4D4,a1
00:00002378 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000237A B6FCD5D5        	  3820:             cmp.l #$FFFFD5D5,a3
00:0000237E 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002380 BAFCD6D6        	  3822:             cmp.l #$FFFFD6D6,a5
00:00002384 66FE            	  3823:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3824: 
                            	  3825: 
                            	  3826: *     LONG - Memory --> Registers
00:00002386 7000            	  3827:             moveq  #$00000000,d0
00:00002388 7200            	  3828:             moveq  #$00000000,d1
00:0000238A 7400            	  3829:             moveq  #$00000000,d2
00:0000238C 7600            	  3830:             moveq  #$00000000,d3
00:0000238E 7800            	  3831:             moveq  #$00000000,d4
00:00002390 7A00            	  3832:             moveq  #$00000000,d5
00:00002392 7C00            	  3833:             moveq  #$00000000,d6
00:00002394 7E00            	  3834:             moveq  #$00000000,d7
00:00002396 91C8            	  3835:             move.l #$00000000,a0
00:00002398 93C9            	  3836:             move.l #$00000000,a1
00:0000239A 95CA            	  3837:             move.l #$00000000,a2
00:0000239C 97CB            	  3838:             move.l #$00000000,a3
00:0000239E 99CC            	  3839:             move.l #$00000000,a4
00:000023A0 9BCD            	  3840:             move.l #$00000000,a5
00:000023A2 9DCE            	  3841:             move.l #$00000000,a6
                            	  3842: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3843: 
00:000023A4 4CF82A550120    	  3844:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3845: 
00:000023AA B0BCD0D0D0D0    	  3846:             cmp.l #$D0D0D0D0,d0
00:000023B0 66FE            	  3847:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023B2 B4BCD1D1D1D1    	  3848:             cmp.l #$D1D1D1D1,d2
00:000023B8 66FE            	  3849:             bne.s *                  * Check Z Flag  beq/bne 0
00:000023BA B8BCD2D2D2D2    	  3850:             cmp.l #$D2D2D2D2,d4
00:000023C0 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023C2 BCBCD3D3D3D3    	  3852:             cmp.l #$D3D3D3D3,d6
00:000023C8 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023CA B3FCD4D4D4D4    	  3854:             cmp.l #$D4D4D4D4,a1
00:000023D0 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023D2 B7FCD5D5D5D5    	  3856:             cmp.l #$D5D5D5D5,a3
00:000023D8 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023DA BBFCD6D6D6D6    	  3858:             cmp.l #$D6D6D6D6,a5
00:000023E0 66FE            	  3859:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3860: 
00:000023E2 4E75            	  3861:             rts
                            	  3862: 
                            	  3863: 
                            	  3864: *-----------------------------------------------------------
                            	  3865: *-----------------------------------------------------------
                            	  3866: * OPCODE : ABCD
                            	  3867: *-----------------------------------------------------------
                            	  3868: *-----------------------------------------------------------
                            	  3869: op_ABCD:
                            	  3870: 
                            	  3871: *     Test with X Flag CLEARED
00:000023E4 307C0110        	  3872:                 move.l #$00000110,a0 * Address pointer-X
00:000023E8 327C0120        	  3873:                 move.l #$00000120,a1 * Address pointer-Y
00:000023EC 7000            	  3874:                 moveq  #$00000000,d0 * BCD byte-X
00:000023EE 7200            	  3875:                 moveq  #$00000000,d1 * BCD byte-Y
00:000023F0 7400            	  3876:                 moveq  #$00000000,d2
00:000023F2 7600            	  3877:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000023F4 7800            	  3878:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000023F6 7A00            	  3879:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000023F8 2C3C00000099    	  3880:                 move.l #$00000099,d6 * Inner loop counter
00:000023FE 2E3C00000099    	  3881:                 move.l #$00000099,d7 * Outer loop counter
                            	  3882: 
00:00002404 2007            	  3883: ABCD_OUTER1:    move.l d7,d0
00:00002406 2206            	  3884: ABCD_INNER1:    move.l d6,d1
00:00002408 023C00EF        	  3885:                 andi.b #$EF,CCR     * Clear X Flag
00:0000240C 307C0110        	  3886:                 move.l #$00000110,a0 * Address pointer-X
00:00002410 327C0120        	  3887:                 move.l #$00000120,a1 * Address pointer-Y
00:00002414 1140FFFF        	  3888:                 move.b d0,-1(a0)
00:00002418 1341FFFF        	  3889:                 move.b d1,-1(a1)
                            	  3890: 
00:0000241C C300            	  3891:                 abcd d0,d1
00:0000241E 6402            	  3892:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00002420 5284            	  3893:                 add.l #1,d4
00:00002422 DA81            	  3894: ABCD_NO_C1:     add.l d1,d5
                            	  3895: 
00:00002424 C308            	  3896:                 abcd -(a0),-(a1)
00:00002426 6402            	  3897:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00002428 5284            	  3898:                 add.l #1,d4
00:0000242A D611            	  3899: ABCD_NO_C2:     add.b (a1),d3
                            	  3900: 
                            	  3901: 
00:0000242C 51CEFFD8        	  3902:                 dbf d6,ABCD_INNER1
00:00002430 2C3C00000099    	  3903:                 move.l #$00000099,d6
00:00002436 51CFFFCC        	  3904:                 dbf d7,ABCD_OUTER1
00:0000243A 0C8400005AFC    	  3905:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:00002440 66FE            	  3906:                 bne.s *
00:00002442 0C85001C9A34    	  3907:                 cmpi.l #$001C9A34,d5
00:00002448 66FE            	  3908:                 bne.s *
00:0000244A 0C8300000034    	  3909:                 cmpi.l #$00000034,d3
00:00002450 66FE            	  3910:                 bne.s *
                            	  3911: 
                            	  3912: *     Test with X Flag SET
00:00002452 307C0110        	  3913:                 move.l #$00000110,a0 * Address pointer-X
00:00002456 327C0120        	  3914:                 move.l #$00000120,a1 * Address pointer-Y
00:0000245A 7000            	  3915:                 moveq  #$00000000,d0 * BCD byte-X
00:0000245C 7200            	  3916:                 moveq  #$00000000,d1 * BCD byte-Y
00:0000245E 7400            	  3917:                 moveq  #$00000000,d2
00:00002460 7600            	  3918:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002462 7800            	  3919:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002464 7A00            	  3920:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00002466 2C3C00000099    	  3921:                 move.l #$00000099,d6 * Inner loop counter
00:0000246C 2E3C00000099    	  3922:                 move.l #$00000099,d7 * Outer loop counter
                            	  3923: 
00:00002472 2007            	  3924: ABCD_OUTER2:    move.l d7,d0
00:00002474 2206            	  3925: ABCD_INNER2:    move.l d6,d1
00:00002476 003C0010        	  3926:                 ori.b #$10,CCR      * Set X Flag
00:0000247A 307C0110        	  3927:                 move.l #$00000110,a0 * Address pointer-X
00:0000247E 327C0120        	  3928:                 move.l #$00000120,a1 * Address pointer-Y
00:00002482 1140FFFF        	  3929:                 move.b d0,-1(a0)
00:00002486 1341FFFF        	  3930:                 move.b d1,-1(a1)
                            	  3931: 
00:0000248A C300            	  3932:                 abcd d0,d1
00:0000248C 6402            	  3933:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:0000248E 5284            	  3934:                 add.l #1,d4
00:00002490 DA81            	  3935: ABCD_NO_C3:     add.l d1,d5
                            	  3936: 
00:00002492 C308            	  3937:                 abcd -(a0),-(a1)
00:00002494 6402            	  3938:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00002496 5284            	  3939:                 add.l #1,d4
00:00002498 D611            	  3940: ABCD_NO_C4:     add.b (a1),d3
                            	  3941: 
                            	  3942: 
00:0000249A 51CEFFD8        	  3943:                 dbf d6,ABCD_INNER2
00:0000249E 2C3C00000099    	  3944:                 move.l #$00000099,d6
00:000024A4 51CFFFCC        	  3945:                 dbf d7,ABCD_OUTER2
00:000024A8 0C8400005B60    	  3946:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:000024AE 66FE            	  3947:                 bne.s *
00:000024B0 0C85001CCFC8    	  3948:                 cmpi.l #$001CCFC8,d5
00:000024B6 66FE            	  3949:                 bne.s *
00:000024B8 0C8300000034    	  3950:                 cmpi.l #$00000034,d3
00:000024BE 66FE            	  3951:                 bne.s *
                            	  3952: 
                            	  3953: *             Quick check of Z Flag
00:000024C0 103C0000        	  3954:                 move.b #$00,d0
00:000024C4 123C0000        	  3955:                 move.b #$00,d1
00:000024C8 44FC0000        	  3956:                 move #$00,CCR              * Set Z flag to 0
00:000024CC C101            	  3957:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000024CE 67FE            	  3958:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3959: 
00:000024D0 103C0001        	  3960:                 move.b #$01,d0
00:000024D4 123C0000        	  3961:                 move.b #$00,d1
00:000024D8 44FC0004        	  3962:                 move #$04,CCR              * Set Z flag to 0
00:000024DC C101            	  3963:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000024DE 67FE            	  3964:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3965: 
00:000024E0 4E75            	  3966:                 rts
                            	  3967: 
                            	  3968: *-----------------------------------------------------------
                            	  3969: *-----------------------------------------------------------
                            	  3970: * OPCODE : SBCD
                            	  3971: *-----------------------------------------------------------
                            	  3972: *-----------------------------------------------------------
                            	  3973: op_SBCD:
                            	  3974: 
                            	  3975: *     Test with X Flag CLEARED
00:000024E2 307C0110        	  3976:                 move.l #$00000110,a0 * Address pointer-X
00:000024E6 327C0120        	  3977:                 move.l #$00000120,a1 * Address pointer-Y
00:000024EA 7000            	  3978:                 moveq  #$00000000,d0 * BCD byte-X
00:000024EC 7200            	  3979:                 moveq  #$00000000,d1 * BCD byte-Y
00:000024EE 7400            	  3980:                 moveq  #$00000000,d2
00:000024F0 7600            	  3981:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000024F2 7800            	  3982:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000024F4 7A00            	  3983:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000024F6 2C3C00000099    	  3984:                 move.l #$00000099,d6 * Inner loop counter
00:000024FC 2E3C00000099    	  3985:                 move.l #$00000099,d7 * Outer loop counter
                            	  3986: 
00:00002502 2007            	  3987: SBCD_OUTER1:    move.l d7,d0
00:00002504 2206            	  3988: SBCD_INNER1:    move.l d6,d1
00:00002506 023C00EF        	  3989:                 andi.b #$EF,CCR     * Clear X Flag
00:0000250A 307C0110        	  3990:                 move.l #$00000110,a0 * Address pointer-X
00:0000250E 327C0120        	  3991:                 move.l #$00000120,a1 * Address pointer-Y
00:00002512 1140FFFF        	  3992:                 move.b d0,-1(a0)
00:00002516 1341FFFF        	  3993:                 move.b d1,-1(a1)
                            	  3994: 
00:0000251A 8300            	  3995:                 sbcd d0,d1
00:0000251C 6402            	  3996:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:0000251E 5284            	  3997:                 add.l #1,d4
00:00002520 DA81            	  3998: SBCD_NO_C1:     add.l d1,d5
                            	  3999: 
00:00002522 8308            	  4000:                 sbcd -(a0),-(a1)
00:00002524 6402            	  4001:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00002526 5284            	  4002:                 add.l #1,d4
00:00002528 D611            	  4003: SBCD_NO_C2:     add.b (a1),d3
                            	  4004: 
                            	  4005: 
00:0000252A 51CEFFD8        	  4006:                 dbf d6,SBCD_INNER1
00:0000252E 2C3C00000099    	  4007:                 move.l #$00000099,d6
00:00002534 51CFFFCC        	  4008:                 dbf d7,SBCD_OUTER1
00:00002538 0C8400005C0A    	  4009:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:0000253E 66FE            	  4010:                 bne.s *
00:00002540 0C85001C459E    	  4011:                 cmpi.l #$001C459E,d5
00:00002546 66FE            	  4012:                 bne.s *
00:00002548 0C830000009E    	  4013:                 cmpi.l #$0000009E,d3
00:0000254E 66FE            	  4014:                 bne.s *
                            	  4015: 
                            	  4016: *     Test with X Flag SET
00:00002550 307C0110        	  4017:                 move.l #$00000110,a0 * Address pointer-X
00:00002554 327C0120        	  4018:                 move.l #$00000120,a1 * Address pointer-Y
00:00002558 7000            	  4019:                 moveq  #$00000000,d0 * BCD byte-X
00:0000255A 7200            	  4020:                 moveq  #$00000000,d1 * BCD byte-Y
00:0000255C 7400            	  4021:                 moveq  #$00000000,d2
00:0000255E 7600            	  4022:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002560 7800            	  4023:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002562 7A00            	  4024:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00002564 2C3C00000099    	  4025:                 move.l #$00000099,d6 * Inner loop counter
00:0000256A 2E3C00000099    	  4026:                 move.l #$00000099,d7 * Outer loop counter
                            	  4027: 
00:00002570 2007            	  4028: SBCD_OUTER2:    move.l d7,d0
00:00002572 2206            	  4029: SBCD_INNER2:    move.l d6,d1
00:00002574 003C0010        	  4030:                 ori.b #$10,CCR      * Set X Flag
00:00002578 307C0110        	  4031:                 move.l #$00000110,a0 * Address pointer-X
00:0000257C 327C0120        	  4032:                 move.l #$00000120,a1 * Address pointer-Y
00:00002580 1140FFFF        	  4033:                 move.b d0,-1(a0)
00:00002584 1341FFFF        	  4034:                 move.b d1,-1(a1)
                            	  4035: 
00:00002588 8300            	  4036:                 sbcd d0,d1
00:0000258A 6402            	  4037:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:0000258C 5284            	  4038:                 add.l #1,d4
00:0000258E DA81            	  4039: SBCD_NO_C3:     add.l d1,d5
                            	  4040: 
00:00002590 8308            	  4041:                 sbcd -(a0),-(a1)
00:00002592 6402            	  4042:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00002594 5284            	  4043:                 add.l #1,d4
00:00002596 D611            	  4044: SBCD_NO_C4:     add.b (a1),d3
                            	  4045: 
00:00002598 51CEFFD8        	  4046:                 dbf d6,SBCD_INNER2
00:0000259C 2C3C00000099    	  4047:                 move.l #$00000099,d6
00:000025A2 51CFFFCC        	  4048:                 dbf d7,SBCD_OUTER2
00:000025A6 0C8400005CA4    	  4049:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:000025AC 66FE            	  4050:                 bne.s *
00:000025AE 0C85001C5C66    	  4051:                 cmpi.l #$001C5C66,d5
00:000025B4 66FE            	  4052:                 bne.s *
00:000025B6 0C830000009E    	  4053:                 cmpi.l #$0000009E,d3
00:000025BC 66FE            	  4054:                 bne.s *
                            	  4055: 
                            	  4056: 
                            	  4057: *             Quick check of Z Flag
00:000025BE 103C0000        	  4058:                 move.b #$00,d0
00:000025C2 123C0000        	  4059:                 move.b #$00,d1
00:000025C6 44FC0000        	  4060:                 move #$00,CCR              * Set Z flag to 0
00:000025CA 8101            	  4061:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000025CC 67FE            	  4062:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4063: 
00:000025CE 103C0001        	  4064:                 move.b #$01,d0
00:000025D2 123C0000        	  4065:                 move.b #$00,d1
00:000025D6 44FC0004        	  4066:                 move #$04,CCR              * Set Z flag to 0
00:000025DA 8101            	  4067:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000025DC 67FE            	  4068:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4069: 
00:000025DE 4E75            	  4070:                 rts
                            	  4071: 
                            	  4072: *-----------------------------------------------------------
                            	  4073: *-----------------------------------------------------------
                            	  4074: * OPCODE : NBCD
                            	  4075: *-----------------------------------------------------------
                            	  4076: *-----------------------------------------------------------
                            	  4077: op_NBCD:
                            	  4078: 
                            	  4079: *        NBCD to a  Register
                            	  4080: 
00:000025E0 7000            	  4081:                 moveq  #$00000000,d0 * BCD byte
00:000025E2 7200            	  4082:                 moveq  #$00000000,d1
00:000025E4 7400            	  4083:                 moveq  #$00000000,d2
00:000025E6 7600            	  4084:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:000025E8 7800            	  4085:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000025EA 7A00            	  4086:                 moveq  #$00000000,d5 * Cumulative BCD results
00:000025EC 2C3C00000099    	  4087:                 move.l #$00000099,d6
00:000025F2 2E3C00000099    	  4088:                 move.l #$00000099,d7 * Loop counter
                            	  4089: 
00:000025F8 2007            	  4090: NBCD_LOOP:      move.l d7,d0
00:000025FA 44FC0004        	  4091:                 move #$04,CCR        * Set Z flag to 0
                            	  4092: 
00:000025FE 4800            	  4093:                 nbcd d0
                            	  4094: 
00:00002600 6402            	  4095:                 bcc.s NBCD_NO_C         * Check C Flag
00:00002602 5284            	  4096:                 add.l #1,d4
00:00002604 6602            	  4097: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:00002606 5283            	  4098:                 add.l #1,d3
00:00002608 DA80            	  4099: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4100: 
00:0000260A 51CFFFEC        	  4101:                 dbf d7,NBCD_LOOP
                            	  4102: 
00:0000260E 0C8300000001    	  4103:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00002614 66FE            	  4104:                 bne.s *
00:00002616 0C8400000099    	  4105:                 cmpi.l #$00000099,d4
00:0000261C 66FE            	  4106:                 bne.s *
00:0000261E 0C8500002E3B    	  4107:                 cmpi.l #$00002E3B,d5
00:00002624 66FE            	  4108:                 bne.s *
                            	  4109: 
                            	  4110: 
                            	  4111: *        NBCD to a memory location
                            	  4112: 
00:00002626 7000            	  4113:                 moveq  #$00000000,d0 * BCD byte
00:00002628 7200            	  4114:                 moveq  #$00000000,d1
00:0000262A 7400            	  4115:                 moveq  #$00000000,d2
00:0000262C 7600            	  4116:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:0000262E 7800            	  4117:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002630 7A00            	  4118:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00002632 2C3C00000099    	  4119:                 move.l #$00000099,d6
00:00002638 2E3C00000099    	  4120:                 move.l #$00000099,d7 * Loop counter
                            	  4121: 
00:0000263E 11C70100        	  4122: NBCD_LOOP1:     move.b d7,$00000100
00:00002642 44FC0004        	  4123:                 move #$04,CCR        * Set Z flag to 0
                            	  4124: 
00:00002646 48380100        	  4125:                 nbcd $00000100
00:0000264A 10380100        	  4126:                 move.b $00000100,d0
                            	  4127: 
00:0000264E 6402            	  4128:                 bcc.s NBCD_NO_C1        * Check C Flag
00:00002650 5284            	  4129:                 add.l #1,d4
00:00002652 6602            	  4130: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:00002654 5283            	  4131:                 add.l #1,d3
00:00002656 DA80            	  4132: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4133: 
00:00002658 51CFFFE4        	  4134:                 dbf d7,NBCD_LOOP1
                            	  4135: 
00:0000265C 0C8300000001    	  4136:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00002662 66FE            	  4137:                 bne.s *
00:00002664 4A84            	  4138:                 cmpi.l #$00000000,d4
00:00002666 66FE            	  4139:                 bne.s *
00:00002668 0C8500002E3B    	  4140:                 cmpi.l #$00002E3B,d5
00:0000266E 66FE            	  4141:                 bne.s *
                            	  4142: 
                            	  4143: 
00:00002670 4E75            	  4144:                 rts
                            	  4145: 
                            	  4146: 
                            	  4147: 
                            	  4148: *-----------------------------------------------------------
                            	  4149: *-----------------------------------------------------------
                            	  4150: * OPCODE : TRAPV
                            	  4151: *-----------------------------------------------------------
                            	  4152: *-----------------------------------------------------------
                            	  4153: op_TRAPV:
                            	  4154: 
                            	  4155: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4156: 
00:00002672 7000            	  4157:                 moveq  #$00000000,d0 * Clear d0
                            	  4158: 
00:00002674 44FC0000        	  4159:                 move #$00,CCR        * Clear V flag
00:00002678 4E76            	  4160:                 trapv
00:0000267A 4A80            	  4161:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:0000267C 66FE            	  4162:                 bne.s *
                            	  4163: 
00:0000267E 44FC0002        	  4164:                 move #$02,CCR        * Set V flag
00:00002682 4E76            	  4165:                 trapv
00:00002684 0C8012345678    	  4166:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:0000268A 66FE            	  4167:                 bne.s *
                            	  4168: 
                            	  4169: 
00:0000268C 4E75            	  4170:                 rts
                            	  4171: 
                            	  4172: 
                            	  4173: 
                            	  4174: *-----------------------------------------------------------
                            	  4175: *-----------------------------------------------------------
                            	  4176: * OPCODE : RTR
                            	  4177: *-----------------------------------------------------------
                            	  4178: *-----------------------------------------------------------
                            	  4179: 
                            	  4180: op_RTR:
                            	  4181: 
                            	  4182: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4183: 
00:0000268E 41FA000C        	  4184:                 lea RTR_DONE,a0
00:00002692 2F08            	  4185:                 move.l a0,-(a7)     * push destination PC to the stack
00:00002694 2F3C0000FF15    	  4186:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
00:0000269A 4E77            	  4187:                 rtr
                            	  4188: 
00:0000269C 40C0            	  4189: RTR_DONE:       move SR,d0
00:0000269E 0240001F        	  4190:                 andi #$1F,d0
00:000026A2 0C400015        	  4191:                 cmpi #$15,d0
00:000026A6 66FE            	  4192:                 bne.s *
                            	  4193: 
00:000026A8 4E75            	  4194:                 rts
                            	  4195: 
                            	  4196: 
00:000026AA 283C44444444    	  4197: BSR_FAR2:       move.l #$44444444,d4
00:000026B0 4E75            	  4198:                 rts
                            	  4199: 
                            	  4200: 
                            	  4201: *-----------------------------------------------------------
                            	  4202: *-----------------------------------------------------------
                            	  4203: * OPCODE : BCC
                            	  4204: *-----------------------------------------------------------
                            	  4205: *-----------------------------------------------------------
                            	  4206: 
00:000026B2 44FC0000        	  4207: op_BCC:         move #$00,CCR
00:000026B6 6202            	  4208:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:000026B8 60FE            	  4209:                 bra.s *
                            	  4210: 
00:000026BA 44FC0001        	  4211: BCC1:           move #$01,CCR
00:000026BE 63000004        	  4212:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:000026C2 60FE            	  4213:                 bra.s *
                            	  4214: 
00:000026C4 44FC0000        	  4215: BCC2:           move #$00,CCR
00:000026C8 6402            	  4216:                 bcc.s BCC3            * Carry Clear         C=0
00:000026CA 60FE            	  4217:                 bra.s *
                            	  4218: 
00:000026CC 44FC0001        	  4219: BCC3:           move #$01,CCR
00:000026D0 65000004        	  4220:                 bcs.w BCC4            * Carry Set           C=1
00:000026D4 60FE            	  4221:                 bra.s *
                            	  4222: 
00:000026D6 44FC0000        	  4223: BCC4:           move #$00,CCR
00:000026DA 6602            	  4224:                 bne.s BCC5            * Not Equal           Z=0
00:000026DC 60FE            	  4225:                 bra.s *
                            	  4226: 
00:000026DE 44FC0004        	  4227: BCC5:           move #$04,CCR
00:000026E2 67000004        	  4228:                 beq.w BCC6            * Equal               Z=1
00:000026E6 60FE            	  4229:                 bra.s *
                            	  4230: 
00:000026E8 44FC0000        	  4231: BCC6:           move #$00,CCR
00:000026EC 6802            	  4232:                 bvc.s BCC7            * V Clear             V=0
00:000026EE 60FE            	  4233:                 bra.s *
                            	  4234: 
00:000026F0 44FC0002        	  4235: BCC7:           move #$02,CCR
00:000026F4 69000004        	  4236:                 bvs.w BCC8            * V Set               V=1
00:000026F8 60FE            	  4237:                 bra.s *
                            	  4238: 
00:000026FA 44FC0000        	  4239: BCC8:           move #$00,CCR
00:000026FE 6A02            	  4240:                 bpl.s BCC9            * Plus                N=0
00:00002700 60FE            	  4241:                 bra.s *
                            	  4242: 
00:00002702 44FC0008        	  4243: BCC9:           move #$08,CCR
00:00002706 6B000004        	  4244:                 bmi.w BCC10           * Minus               N=1
00:0000270A 60FE            	  4245:                 bra.s *
                            	  4246: 
00:0000270C 44FC0000        	  4247: BCC10:          move #$00,CCR
00:00002710 6C02            	  4248:                 bge.s BCC11           * Greater or Equal    N=V
00:00002712 60FE            	  4249:                 bra.s *
                            	  4250: 
00:00002714 44FC0002        	  4251: BCC11:          move #$02,CCR
00:00002718 6D000004        	  4252:                 blt.w BCC12           * Less Than           N!=V
00:0000271C 60FE            	  4253:                 bra.s *
                            	  4254: 
00:0000271E 44FC000A        	  4255: BCC12:          move #$0A,CCR
00:00002722 6E02            	  4256:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:00002724 60FE            	  4257:                 bra.s *
                            	  4258: 
00:00002726 44FC0006        	  4259: BCC13:          move #$06,CCR
00:0000272A 6F000004        	  4260:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:0000272E 60FE            	  4261:                 bra.s *
                            	  4262: 
                            	  4263: 
00:00002730 4E75            	  4264: BCC14:          rts
                            	  4265: 
                            	  4266: 
                            	  4267: *-----------------------------------------------------------
                            	  4268: *-----------------------------------------------------------
                            	  4269: * OPCODE : DBCC
                            	  4270: *-----------------------------------------------------------
                            	  4271: *-----------------------------------------------------------
                            	  4272: 
00:00002732 7003            	  4273: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:00002734 7200            	  4274:                 moveq  #$00000000,d1    * Accumulator
00:00002736 44FC0000        	  4275:                 move #$00,CCR
                            	  4276: 
00:0000273A 5201            	  4277: DBCC_LOOP1:     addi.b #$1,d1
00:0000273C 51C8FFFC        	  4278:                 dbf d0,DBCC_LOOP1
                            	  4279: 
00:00002740 0C8100000004    	  4280:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:00002746 66FE            	  4281:                 bne.s *
                            	  4282: 
00:00002748 5201            	  4283: DBCC_LOOP2:     addi.b #$1,d1
00:0000274A 54C8FFFC        	  4284:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4285: 
00:0000274E 0C8100000005    	  4286:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:00002754 66FE            	  4287:                 bne.s *
                            	  4288: 
00:00002756 4E75            	  4289:                 rts
                            	  4290: 
                            	  4291: 
                            	  4292: *-----------------------------------------------------------
                            	  4293: *-----------------------------------------------------------
                            	  4294: * OPCODE : SCC
                            	  4295: *-----------------------------------------------------------
                            	  4296: *-----------------------------------------------------------
                            	  4297: 
00:00002758 44FC0001        	  4298: op_SCC:         move #$01,CCR
00:0000275C 54F900010000    	  4299:                 scc $00010000                   * Clear the EA byte
00:00002762 4A3900010000    	  4300:                 cmpi.b #$00,$00010000
00:00002768 66FE            	  4301:                 bne.s *
                            	  4302: 
00:0000276A 44FC0000        	  4303:                 move #$00,CCR
00:0000276E 54F900010000    	  4304:                 scc $00010000                   * Set the EA byte to 0xFF
00:00002774 0C3900FF00010000	  4305:                 cmpi.b #$FF,$00010000
00:0000277C 66FE            	  4306:                 bne.s *
                            	  4307: 
00:0000277E 4E75            	  4308:                 rts
                            	  4309: 
                            	  4310: 
                            	  4311: 
                            	  4312: *-----------------------------------------------------------
                            	  4313: *-----------------------------------------------------------
                            	  4314: * OPCODE : ADDQ
                            	  4315: *-----------------------------------------------------------
                            	  4316: *-----------------------------------------------------------
                            	  4317: 
                            	  4318: op_ADDQ:
                            	  4319: 
                            	  4320: *     BYTE
00:00002780 203C000000FF    	  4321:                 move.l #$000000FF,d0    * Loop counter
00:00002786 7200            	  4322:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002788 7400            	  4323:                 moveq  #$00000000,d2    * Data results accumulator
00:0000278A 7600            	  4324:                 moveq  #$00000000,d3
00:0000278C 7800            	  4325:                 moveq  #$00000000,d4
00:0000278E 7A00            	  4326:                 moveq  #$00000000,d5
00:00002790 7C00            	  4327:                 moveq  #$00000000,d6
00:00002792 7E00            	  4328:                 moveq  #$00000000,d7
                            	  4329: 
00:00002794 5605            	  4330: ADDQ_LOOP1:     addq.b #3,d5
00:00002796 40C6            	  4331:                 move SR,d6
00:00002798 02860000001F    	  4332:                 andi.l #$1F,d6        * Isolate flags
00:0000279E D286            	  4333:                 add.l d6,d1           * Copy flag results into accumulator
00:000027A0 D485            	  4334:                 add.l d5,d2           * Copy data results into data accumulator
00:000027A2 51C8FFF0        	  4335:                 dbf d0,ADDQ_LOOP1
                            	  4336: 
00:000027A6 0C810000043D    	  4337:                 cmpi.l #$0000043D,d1
00:000027AC 66FE            	  4338:                 bne.s *
00:000027AE 0C8200007F80    	  4339:                 cmpi.l #$00007F80,d2
00:000027B4 66FE            	  4340:                 bne.s *
                            	  4341: 
                            	  4342: 
                            	  4343: *     WORD
00:000027B6 203C000000FF    	  4344:                 move.l #$000000FF,d0    * Loop counter
00:000027BC 7200            	  4345:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027BE 7400            	  4346:                 moveq  #$00000000,d2    * Data results accumulator
00:000027C0 7600            	  4347:                 moveq  #$00000000,d3
00:000027C2 7800            	  4348:                 moveq  #$00000000,d4
00:000027C4 2A3C0000FFF0    	  4349:                 move.l #$0000FFF0,d5
00:000027CA 7C00            	  4350:                 moveq  #$00000000,d6
00:000027CC 7E00            	  4351:                 moveq  #$00000000,d7
00:000027CE 307C0100        	  4352:                 move.l #$00000100,a0
                            	  4353: 
00:000027D2 5A45            	  4354: ADDQ_LOOP2:     addq.w #5,d5
00:000027D4 40C6            	  4355:                 move SR,d6
00:000027D6 02860000001F    	  4356:                 andi.l #$1F,d6        * Isolate flags
00:000027DC D286            	  4357:                 add.l d6,d1           * Copy flag results into accumulator
00:000027DE D485            	  4358:                 add.l d5,d2           * Copy data results into data accumulator
00:000027E0 51C8FFF0        	  4359:                 dbf d0,ADDQ_LOOP2
                            	  4360: 
00:000027E4 0C8100000029    	  4361:                 cmpi.l #$00000029,d1
00:000027EA 66FE            	  4362:                 bne.s *
00:000027EC 0C8200057280    	  4363:                 cmpi.l #$00057280,d2
00:000027F2 66FE            	  4364:                 bne.s *
                            	  4365: 
                            	  4366: 
                            	  4367: *     LONG
00:000027F4 203C000000FF    	  4368:                 move.l #$000000FF,d0    * Loop counter
00:000027FA 7200            	  4369:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027FC 7400            	  4370:                 moveq  #$00000000,d2    * Data results accumulator
00:000027FE 7600            	  4371:                 moveq  #$00000000,d3
00:00002800 7800            	  4372:                 moveq  #$00000000,d4
00:00002802 7AF0            	  4373:                 move.l #$FFFFFFF0,d5
00:00002804 7C00            	  4374:                 moveq  #$00000000,d6
00:00002806 7E00            	  4375:                 moveq  #$00000000,d7
                            	  4376: 
00:00002808 5285            	  4377: ADDQ_LOOP3:     addq.l #1,d5
00:0000280A 40C6            	  4378:                 move SR,d6
00:0000280C 02860000001F    	  4379:                 andi.l #$1F,d6        * Isolate flags
00:00002812 D286            	  4380:                 add.l d6,d1           * Copy flag results into accumulator
00:00002814 D485            	  4381:                 add.l d5,d2           * Copy data results into data accumulator
00:00002816 51C8FFF0        	  4382:                 dbf d0,ADDQ_LOOP3
                            	  4383: 
00:0000281A 0C810000008D    	  4384:                 cmpi.l #$0000008D,d1
00:00002820 66FE            	  4385:                 bne.s *
00:00002822 0C8200007080    	  4386:                 cmpi.l #$00007080,d2
00:00002828 66FE            	  4387:                 bne.s *
                            	  4388: 
                            	  4389: *     Check that Flags are not updated for Address registers
00:0000282A 207C0000FFFF    	  4390:                 move.l #$0000FFFF,a0
00:00002830 44FC0000        	  4391:                 move #$00,CCR         * Clear flags
00:00002834 5E48            	  4392:                 addq.w #$7,a0
00:00002836 65FE            	  4393:                 bcs.s *
                            	  4394: 
00:00002838 4E75            	  4395:                 rts
                            	  4396: 
                            	  4397: 
                            	  4398: 
                            	  4399: *-----------------------------------------------------------
                            	  4400: *-----------------------------------------------------------
                            	  4401: * OPCODE : SUBQ
                            	  4402: *-----------------------------------------------------------
                            	  4403: *-----------------------------------------------------------
                            	  4404: 
                            	  4405: op_SUBQ:
                            	  4406: 
                            	  4407: *     BYTE
00:0000283A 203C000000FF    	  4408:                 move.l #$000000FF,d0    * Loop counter
00:00002840 7200            	  4409:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002842 243C00001234    	  4410:                 move.l #$00001234,d2    * Data results accumulator
00:00002848 7600            	  4411:                 moveq  #$00000000,d3
00:0000284A 7800            	  4412:                 moveq  #$00000000,d4
00:0000284C 7A12            	  4413:                 moveq  #$00000012,d5
00:0000284E 7C00            	  4414:                 moveq  #$00000000,d6
00:00002850 7E00            	  4415:                 moveq  #$00000000,d7
                            	  4416: 
00:00002852 5305            	  4417: SUBQ_LOOP1:     subq.b #1,d5
00:00002854 40C6            	  4418:                 move SR,d6
00:00002856 02860000001F    	  4419:                 andi.l #$1F,d6        * Isolate flags
00:0000285C D286            	  4420:                 add.l d6,d1           * Copy flag results into accumulator
00:0000285E D485            	  4421:                 add.l d5,d2           * Copy data results into data accumulator
00:00002860 51C8FFF0        	  4422:                 dbf d0,SUBQ_LOOP1
                            	  4423: 
00:00002864 0C8100000417    	  4424:                 cmpi.l #$00000417,d1
00:0000286A 66FE            	  4425:                 bne.s *
00:0000286C 0C82000091B4    	  4426:                 cmpi.l #$000091B4,d2
00:00002872 66FE            	  4427:                 bne.s *
                            	  4428: 
                            	  4429: 
                            	  4430: *     WORD
00:00002874 203C000000FF    	  4431:                 move.l #$000000FF,d0    * Loop counter
00:0000287A 7200            	  4432:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000287C 7400            	  4433:                 moveq  #$00000000,d2    * Data results accumulator
00:0000287E 7600            	  4434:                 moveq  #$00000000,d3
00:00002880 7800            	  4435:                 moveq  #$00000000,d4
00:00002882 7A02            	  4436:                 moveq  #$00000002,d5
00:00002884 7C00            	  4437:                 moveq  #$00000000,d6
00:00002886 7E00            	  4438:                 moveq  #$00000000,d7
00:00002888 307C0100        	  4439:                 move.l #$00000100,a0
                            	  4440: 
00:0000288C 5B45            	  4441: SUBQ_LOOP2:     subq.w #5,d5
00:0000288E 40C6            	  4442:                 move SR,d6
00:00002890 02860000001F    	  4443:                 andi.l #$1F,d6        * Isolate flags
00:00002896 D286            	  4444:                 add.l d6,d1           * Copy flag results into accumulator
00:00002898 D485            	  4445:                 add.l d5,d2           * Copy data results into data accumulator
00:0000289A 51C8FFF0        	  4446:                 dbf d0,SUBQ_LOOP2
                            	  4447: 
00:0000289E 0C8100000811    	  4448:                 cmpi.l #$00000811,d1
00:000028A4 66FE            	  4449:                 bne.s *
00:000028A6 0C8200FD7F80    	  4450:                 cmpi.l #$00FD7F80,d2
00:000028AC 66FE            	  4451:                 bne.s *
                            	  4452: 
                            	  4453: 
                            	  4454: *     LONG
00:000028AE 203C000000FF    	  4455:                 move.l #$000000FF,d0    * Loop counter
00:000028B4 7200            	  4456:                 moveq  #$00000000,d1    * Flag results accumulator
00:000028B6 7400            	  4457:                 moveq  #$00000000,d2    * Data results accumulator
00:000028B8 7600            	  4458:                 moveq  #$00000000,d3
00:000028BA 7800            	  4459:                 moveq  #$00000000,d4
00:000028BC 7A07            	  4460:                 moveq  #$00000007,d5
00:000028BE 7C00            	  4461:                 moveq  #$00000000,d6
00:000028C0 7E00            	  4462:                 moveq  #$00000000,d7
                            	  4463: 
00:000028C2 5385            	  4464: SUBQ_LOOP3:     subq.l #1,d5
00:000028C4 40C6            	  4465:                 move SR,d6
00:000028C6 02860000001F    	  4466:                 andi.l #$1F,d6        * Isolate flags
00:000028CC D286            	  4467:                 add.l d6,d1           * Copy flag results into accumulator
00:000028CE D485            	  4468:                 add.l d5,d2           * Copy data results into data accumulator
00:000028D0 51C8FFF0        	  4469:                 dbf d0,SUBQ_LOOP3
                            	  4470: 
00:000028D4 0C81000007DD    	  4471:                 cmpi.l #$000007DD,d1
00:000028DA 66FE            	  4472:                 bne.s *
00:000028DC 0C82FFFF8680    	  4473:                 cmpi.l #$FFFF8680,d2
00:000028E2 66FE            	  4474:                 bne.s *
                            	  4475: 
                            	  4476: *     Check that Flags are not updated for Address registers
00:000028E4 207C0001FFFF    	  4477:                 move.l #$0001FFFF,a0
00:000028EA 44FC0000        	  4478:                 move #$00,CCR         * Clear flags
00:000028EE 5F48            	  4479:                 subq.w #$7,a0
00:000028F0 65FE            	  4480:                 bcs.s *
                            	  4481: 
00:000028F2 4E75            	  4482:                 rts
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: 
                            	  4487: *-----------------------------------------------------------
                            	  4488: *-----------------------------------------------------------
                            	  4489: * OPCODE : MOVEQ
                            	  4490: *-----------------------------------------------------------
                            	  4491: *-----------------------------------------------------------
                            	  4492: 
                            	  4493: op_MOVEQ:
00:000028F4 7000            	  4494:                 moveq  #$00000000,d0
00:000028F6 7000            	  4495:                 moveq #$0,d0
00:000028F8 66FE            	  4496:                 bne.s *
00:000028FA 4A80            	  4497:                 cmpi.l #$00000000,d0
00:000028FC 66FE            	  4498:                 bne.s *
                            	  4499: 
00:000028FE 7000            	  4500:                 moveq  #$00000000,d0
00:00002900 7080            	  4501:                 moveq #-128,d0
00:00002902 67FE            	  4502:                 beq.s *
00:00002904 6AFE            	  4503:                 bpl.s *
00:00002906 0C80FFFFFF80    	  4504:                 cmpi.l #$FFFFFF80,d0
00:0000290C 66FE            	  4505:                 bne.s *
                            	  4506: 
                            	  4507: 
00:0000290E 4E75            	  4508:                 rts
                            	  4509: 
                            	  4510: 
                            	  4511: *-----------------------------------------------------------
                            	  4512: *-----------------------------------------------------------
                            	  4513: * OPCODE : DIVU
                            	  4514: *-----------------------------------------------------------
                            	  4515: *-----------------------------------------------------------
                            	  4516: 
                            	  4517: op_DIVU:
                            	  4518: 
00:00002910 203CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00002916 223C00005A5A    	  4520:                 move.l #$00005a5a,d1        * Initial Divisor
00:0000291C 243CA5A5A5A5    	  4521:                 move.l #$a5a5a5a5,d2
00:00002922 7600            	  4522:                 moveq  #$00000000,d3
00:00002924 7800            	  4523:                 moveq  #$00000000,d4        * Cumulative data results
00:00002926 7A00            	  4524:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002928 7C0E            	  4525:                 move.l #$0000000E,d6       * Inner loop counter
00:0000292A 7E1E            	  4526:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4527: 
                            	  4528: 
00:0000292C 80C1            	  4529: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:0000292E 40C3            	  4530:                 move SR,d3
00:00002930 02830000000C    	  4531:                 andi.l #$0C,d3            * Isolate flags
00:00002936 DA83            	  4532:                 add.l d3,d5               * Copy flag results into accumulator
00:00002938 D880            	  4533:                 add.l d0,d4               * Copy data results into data accumulator
00:0000293A E289            	  4534:                 lsr.l #$1,d1
                            	  4535: 
00:0000293C 51CEFFEE        	  4536:                 dbf d6,DIVU_OUTER1
00:00002940 E28A            	  4537:                 lsr.l #$1,d2
00:00002942 2002            	  4538:                 move.l d2,d0
00:00002944 223C00005A5A    	  4539:                 move.l #$00005a5a,d1       * Initial Divisor
00:0000294A 7C0E            	  4540:                 move.l #$0000000E,d6       * Inner loop counter
00:0000294C 51CFFFDE        	  4541:                 dbf d7,DIVU_OUTER1
                            	  4542: 
00:00002950 0C8492FEDB89    	  4543:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:00002956 66FE            	  4544:                 bne.s *
                            	  4545: 
00:00002958 0C8500000110    	  4546:                 cmpi.l #$00000110,d5      * Check the Flag results
00:0000295E 66FE            	  4547:                 bne.s *
                            	  4548: 
                            	  4549: 
00:00002960 4E75            	  4550:                 rts
                            	  4551: 
                            	  4552: 
                            	  4553: 
                            	  4554: *-----------------------------------------------------------
                            	  4555: *-----------------------------------------------------------
                            	  4556: * OPCODE : DIVS
                            	  4557: *-----------------------------------------------------------
                            	  4558: *-----------------------------------------------------------
                            	  4559: 
                            	  4560: op_DIVS:
                            	  4561: 
00:00002962 203CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00002968 223C00005A5A    	  4563:                 move.l #$00005a5a,d1        * Initial Divisor
00:0000296E 243CA5A5A5A5    	  4564:                 move.l #$a5a5a5a5,d2
00:00002974 7600            	  4565:                 moveq  #$00000000,d3
00:00002976 7800            	  4566:                 moveq  #$00000000,d4        * Cumulative data results
00:00002978 7A00            	  4567:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000297A 7C0E            	  4568:                 move.l #$0000000E,d6       * Inner loop counter
00:0000297C 7E1E            	  4569:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4570: 
                            	  4571: 
00:0000297E 81C1            	  4572: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
00:00002980 40C3            	  4573:                 move SR,d3
00:00002982 02830000000C    	  4574:                 andi.l #$0C,d3            * Isolate flags
00:00002988 DA83            	  4575:                 add.l d3,d5               * Copy flag results into accumulator
00:0000298A D880            	  4576:                 add.l d0,d4               * Copy data results into data accumulator
00:0000298C E289            	  4577:                 lsr.l #$1,d1
                            	  4578: 
00:0000298E 51CEFFEE        	  4579:                 dbf d6,DIVS_OUTER1
00:00002992 E28A            	  4580:                 lsr.l #$1,d2
00:00002994 2002            	  4581:                 move.l d2,d0
00:00002996 223C00005A5A    	  4582:                 move.l #$00005a5a,d1       * Initial Divisor
00:0000299C 7C0E            	  4583:                 move.l #$0000000E,d6       * Inner loop counter
00:0000299E 51CFFFDE        	  4584:                 dbf d7,DIVS_OUTER1
                            	  4585: 
00:000029A2 0C844EC5D057    	  4586:                 cmpi.l #$4EC5D057,d4      * Check the data results
00:000029A8 66FE            	  4587:                 bne.s *
                            	  4588: 
00:000029AA 0C8500000038    	  4589:                 cmpi.l #$00000038,d5      * Check the Flag results
00:000029B0 66FE            	  4590:                 bne.s *
                            	  4591: 
                            	  4592: 
00:000029B2 4E75            	  4593:                 rts
                            	  4594: 
                            	  4595: 
                            	  4596: 
                            	  4597: *-----------------------------------------------------------
                            	  4598: *-----------------------------------------------------------
                            	  4599: * OPCODE : OR
                            	  4600: *-----------------------------------------------------------
                            	  4601: *-----------------------------------------------------------
                            	  4602: 
                            	  4603: op_OR:
                            	  4604: 
                            	  4605: *  * <EA> to Register
                            	  4606: 
00:000029B4 203CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000029BA 223C8167E123    	  4608:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000029C0 243CA5A5A5A5    	  4609:                 move.l #$a5a5a5a5,d2
00:000029C6 7600            	  4610:                 moveq  #$00000000,d3
00:000029C8 7800            	  4611:                 moveq  #$00000000,d4       * Cumulative data results
00:000029CA 7A00            	  4612:                 moveq  #$00000000,d5       * Cumulative flag results
00:000029CC 7C1E            	  4613:                 move.l #$0000001E,d6       * Inner loop counter
00:000029CE 7E1E            	  4614:                 move.l #$0000001E,d7       * Outer loop counter
00:000029D0 307C0100        	  4615:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4616: 
                            	  4617: 
                            	  4618: OR_OUTER1:
                            	  4619: 
                            	  4620: *     BYTE
00:000029D4 2081            	  4621:                 move.l d1,(a0)
00:000029D6 8010            	  4622:                 or.b (a0),d0
00:000029D8 40C3            	  4623:                 move SR,d3
00:000029DA 02830000000C    	  4624:                 andi.l #$0C,d3            * Isolate flags
00:000029E0 DA83            	  4625:                 add.l d3,d5               * Copy flag results into accumulator
00:000029E2 D880            	  4626:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4627: 
                            	  4628: *     WORD
00:000029E4 2081            	  4629:                 move.l d1,(a0)
00:000029E6 8050            	  4630:                 or.w (a0),d0
00:000029E8 40C3            	  4631:                 move SR,d3
00:000029EA 02830000000C    	  4632:                 andi.l #$0C,d3            * Isolate flags
00:000029F0 DA83            	  4633:                 add.l d3,d5               * Copy flag results into accumulator
00:000029F2 D880            	  4634:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4635: 
                            	  4636: *     LONG
00:000029F4 2081            	  4637:                 move.l d1,(a0)
00:000029F6 8090            	  4638:                 or.l (a0),d0
00:000029F8 40C3            	  4639:                 move SR,d3
00:000029FA 02830000000F    	  4640:                 andi.l #$0F,d3            * Isolate flags
00:00002A00 DA83            	  4641:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A02 D880            	  4642:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4643: 
                            	  4644: 
00:00002A04 E289            	  4645:                 lsr.l #$1,d1
00:00002A06 51CEFFCC        	  4646:                 dbf d6,OR_OUTER1
00:00002A0A E28A            	  4647:                 lsr.l #$1,d2
00:00002A0C 223C8167E123    	  4648:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A12 7C1E            	  4649:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A14 51CFFFBE        	  4650:                 dbf d7,OR_OUTER1
                            	  4651: 
00:00002A18 0C8476EAC803    	  4652:                 cmpi.l #$76EAC803,d4      * Check the data results
00:00002A1E 66FE            	  4653:                 bne.s *
00:00002A20 0C8500005A18    	  4654:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00002A26 66FE            	  4655:                 bne.s *
                            	  4656: 
                            	  4657: 
                            	  4658: *  * Register to <EA>
                            	  4659: 
00:00002A28 203C86738374    	  4660:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002A2E 223CFC55F2FE    	  4661:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002A34 243C86738374    	  4662:                 move.l #$86738374,d2
00:00002A3A 7600            	  4663:                 moveq  #$00000000,d3
00:00002A3C 7800            	  4664:                 moveq  #$00000000,d4       * Cumulative data results
00:00002A3E 7A00            	  4665:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002A40 7C1E            	  4666:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A42 7E1D            	  4667:                 move.l #$0000001D,d7       * Outer loop counter
00:00002A44 307C0100        	  4668:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4669: 
                            	  4670: 
                            	  4671: OR_OUTER2:
                            	  4672: 
                            	  4673: *     BYTE
00:00002A48 2080            	  4674:                 move.l d0,(a0)
00:00002A4A 8310            	  4675:                 or.b d1,(a0)
00:00002A4C 40C3            	  4676:                 move SR,d3
00:00002A4E 02830000000C    	  4677:                 andi.l #$0C,d3            * Isolate flags
00:00002A54 DA83            	  4678:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A56 D890            	  4679:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4680: 
                            	  4681: *     WORD
00:00002A58 2080            	  4682:                 move.l d0,(a0)
00:00002A5A 8350            	  4683:                 or.w d1,(a0)
00:00002A5C 40C3            	  4684:                 move SR,d3
00:00002A5E 02830000000C    	  4685:                 andi.l #$0C,d3            * Isolate flags
00:00002A64 DA83            	  4686:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A66 D890            	  4687:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4688: 
                            	  4689: *     LONG
00:00002A68 2080            	  4690:                 move.l d0,(a0)
00:00002A6A 8390            	  4691:                 or.l d1,(a0)
00:00002A6C 40C3            	  4692:                 move SR,d3
00:00002A6E 02830000000F    	  4693:                 andi.l #$0F,d3            * Isolate flags
00:00002A74 DA83            	  4694:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A76 D890            	  4695:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4696: 
                            	  4697: 
00:00002A78 E289            	  4698:                 lsr.l #$1,d1
00:00002A7A 51CEFFCC        	  4699:                 dbf d6,OR_OUTER2
00:00002A7E E28A            	  4700:                 lsr.l #$1,d2
00:00002A80 223C8167E123    	  4701:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A86 7C1E            	  4702:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A88 51CFFFBE        	  4703:                 dbf d7,OR_OUTER2
                            	  4704: 
00:00002A8C 0C84FA82B9E4    	  4705:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00002A92 66FE            	  4706:                 bne.s *
00:00002A94 0C8500005730    	  4707:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00002A9A 66FE            	  4708:                 bne.s *
                            	  4709: 
                            	  4710: 
00:00002A9C 4E75            	  4711:                 rts
                            	  4712: 
                            	  4713: 
                            	  4714: 
                            	  4715: *-----------------------------------------------------------
                            	  4716: *-----------------------------------------------------------
                            	  4717: * OPCODE : AND
                            	  4718: *-----------------------------------------------------------
                            	  4719: *-----------------------------------------------------------
                            	  4720: 
                            	  4721: op_AND:
                            	  4722: 
                            	  4723: *  * <EA> to Register
                            	  4724: 
00:00002A9E 203CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002AA4 223C8167E123    	  4726:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002AAA 243CA5A5A5A5    	  4727:                 move.l #$a5a5a5a5,d2
00:00002AB0 7600            	  4728:                 moveq  #$00000000,d3
00:00002AB2 7800            	  4729:                 moveq  #$00000000,d4       * Cumulative data results
00:00002AB4 7A00            	  4730:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002AB6 7C1E            	  4731:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AB8 7E1E            	  4732:                 move.l #$0000001E,d7       * Outer loop counter
00:00002ABA 307C0100        	  4733:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4734: 
                            	  4735: 
                            	  4736: AND_OUTER1:
                            	  4737: 
                            	  4738: *     BYTE
00:00002ABE 2081            	  4739:                 move.l d1,(a0)
00:00002AC0 C010            	  4740:                 and.b (a0),d0
00:00002AC2 40C3            	  4741:                 move SR,d3
00:00002AC4 02830000000C    	  4742:                 andi.l #$0C,d3            * Isolate flags
00:00002ACA DA83            	  4743:                 add.l d3,d5               * Copy flag results into accumulator
00:00002ACC D880            	  4744:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4745: 
                            	  4746: *     WORD
00:00002ACE 2081            	  4747:                 move.l d1,(a0)
00:00002AD0 C050            	  4748:                 and.w (a0),d0
00:00002AD2 40C3            	  4749:                 move SR,d3
00:00002AD4 02830000000C    	  4750:                 andi.l #$0C,d3            * Isolate flags
00:00002ADA DA83            	  4751:                 add.l d3,d5               * Copy flag results into accumulator
00:00002ADC D880            	  4752:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4753: 
                            	  4754: *     LONG
00:00002ADE 2081            	  4755:                 move.l d1,(a0)
00:00002AE0 C090            	  4756:                 and.l (a0),d0
00:00002AE2 40C3            	  4757:                 move SR,d3
00:00002AE4 02830000000F    	  4758:                 andi.l #$0F,d3            * Isolate flags
00:00002AEA DA83            	  4759:                 add.l d3,d5               * Copy flag results into accumulator
00:00002AEC D880            	  4760:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4761: 
                            	  4762: 
00:00002AEE E289            	  4763:                 lsr.l #$1,d1
00:00002AF0 51CEFFCC        	  4764:                 dbf d6,AND_OUTER1
00:00002AF4 E28A            	  4765:                 lsr.l #$1,d2
00:00002AF6 223C8167E123    	  4766:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002AFC 7C1E            	  4767:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AFE 51CFFFBE        	  4768:                 dbf d7,AND_OUTER1
                            	  4769: 
00:00002B02 0C84CF212883    	  4770:                 cmpi.l #$CF212883,d4      * Check the data results
00:00002B08 66FE            	  4771:                 bne.s *
00:00002B0A 0C8500002D10    	  4772:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:00002B10 66FE            	  4773:                 bne.s *
                            	  4774: 
                            	  4775: 
                            	  4776: *  * Register to <EA>
                            	  4777: 
00:00002B12 203C86738374    	  4778:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B18 223CFC55F2FE    	  4779:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B1E 243C86738374    	  4780:                 move.l #$86738374,d2
00:00002B24 7600            	  4781:                 moveq  #$00000000,d3
00:00002B26 7800            	  4782:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B28 7A00            	  4783:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002B2A 7C1E            	  4784:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B2C 7E1D            	  4785:                 move.l #$0000001D,d7       * Outer loop counter
00:00002B2E 307C0100        	  4786:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4787: 
                            	  4788: 
                            	  4789: AND_OUTER2:
                            	  4790: 
                            	  4791: *     BYTE
00:00002B32 2080            	  4792:                 move.l d0,(a0)
00:00002B34 C310            	  4793:                 and.b d1,(a0)
00:00002B36 40C3            	  4794:                 move SR,d3
00:00002B38 02830000000C    	  4795:                 andi.l #$0C,d3            * Isolate flags
00:00002B3E DA83            	  4796:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B40 D890            	  4797:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4798: 
                            	  4799: *     WORD
00:00002B42 2080            	  4800:                 move.l d0,(a0)
00:00002B44 C350            	  4801:                 and.w d1,(a0)
00:00002B46 40C3            	  4802:                 move SR,d3
00:00002B48 02830000000C    	  4803:                 andi.l #$0C,d3            * Isolate flags
00:00002B4E DA83            	  4804:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B50 D890            	  4805:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4806: 
                            	  4807: *     LONG
00:00002B52 2080            	  4808:                 move.l d0,(a0)
00:00002B54 C390            	  4809:                 and.l d1,(a0)
00:00002B56 40C3            	  4810:                 move SR,d3
00:00002B58 02830000000F    	  4811:                 andi.l #$0F,d3            * Isolate flags
00:00002B5E DA83            	  4812:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B60 D890            	  4813:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4814: 
                            	  4815: 
00:00002B62 E289            	  4816:                 lsr.l #$1,d1
00:00002B64 51CEFFCC        	  4817:                 dbf d6,AND_OUTER2
00:00002B68 E28A            	  4818:                 lsr.l #$1,d2
00:00002B6A 223C8167E123    	  4819:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002B70 7C1E            	  4820:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B72 51CFFFBE        	  4821:                 dbf d7,AND_OUTER2
                            	  4822: 
00:00002B76 0C844A3DE544    	  4823:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:00002B7C 66FE            	  4824:                 bne.s *
00:00002B7E 0C85000018E8    	  4825:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00002B84 66FE            	  4826:                 bne.s *
                            	  4827: 
                            	  4828: 
00:00002B86 4E75            	  4829:                 rts
                            	  4830: 
                            	  4831: 
                            	  4832: 
                            	  4833: *-----------------------------------------------------------
                            	  4834: *-----------------------------------------------------------
                            	  4835: * OPCODE : EOR
                            	  4836: *-----------------------------------------------------------
                            	  4837: *-----------------------------------------------------------
                            	  4838: 
                            	  4839: op_EOR:
                            	  4840: 
                            	  4841: *  * Register to <EA>
                            	  4842: 
00:00002B88 203C86738374    	  4843:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B8E 223CFC55F2FE    	  4844:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B94 243C86738374    	  4845:                 move.l #$86738374,d2
00:00002B9A 7600            	  4846:                 moveq  #$00000000,d3
00:00002B9C 7800            	  4847:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B9E 7A00            	  4848:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002BA0 7C1E            	  4849:                 move.l #$0000001E,d6       * Inner loop counter
00:00002BA2 7E1D            	  4850:                 move.l #$0000001D,d7       * Outer loop counter
00:00002BA4 307C0100        	  4851:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4852: 
                            	  4853: 
                            	  4854: EOR_OUTER2:
                            	  4855: 
                            	  4856: *     BYTE
00:00002BA8 2080            	  4857:                 move.l d0,(a0)
00:00002BAA B310            	  4858:                 eor.b d1,(a0)
00:00002BAC 40C3            	  4859:                 move SR,d3
00:00002BAE 02830000000C    	  4860:                 andi.l #$0C,d3            * Isolate flags
00:00002BB4 DA83            	  4861:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BB6 D890            	  4862:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4863: 
                            	  4864: *     WORD
00:00002BB8 2080            	  4865:                 move.l d0,(a0)
00:00002BBA B350            	  4866:                 eor.w d1,(a0)
00:00002BBC 40C3            	  4867:                 move SR,d3
00:00002BBE 02830000000C    	  4868:                 andi.l #$0C,d3            * Isolate flags
00:00002BC4 DA83            	  4869:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BC6 D890            	  4870:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4871: 
                            	  4872: *     LONG
00:00002BC8 2080            	  4873:                 move.l d0,(a0)
00:00002BCA B390            	  4874:                 eor.l d1,(a0)
00:00002BCC 40C3            	  4875:                 move SR,d3
00:00002BCE 02830000000F    	  4876:                 andi.l #$0F,d3            * Isolate flags
00:00002BD4 DA83            	  4877:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BD6 D890            	  4878:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4879: 
                            	  4880: 
00:00002BD8 E289            	  4881:                 lsr.l #$1,d1
00:00002BDA 51CEFFCC        	  4882:                 dbf d6,EOR_OUTER2
00:00002BDE E28A            	  4883:                 lsr.l #$1,d2
00:00002BE0 223C8167E123    	  4884:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002BE6 7C1E            	  4885:                 move.l #$0000001E,d6       * Inner loop counter
00:00002BE8 51CFFFBE        	  4886:                 dbf d7,EOR_OUTER2
                            	  4887: 
00:00002BEC 0C8455C5EB70    	  4888:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:00002BF2 66FE            	  4889:                 bne.s *
00:00002BF4 0C8500004430    	  4890:                 cmpi.l #$00004430,d5      * Check the Flag results
00:00002BFA 66FE            	  4891:                 bne.s *
                            	  4892: 
                            	  4893: 
00:00002BFC 4E75            	  4894:                 rts
                            	  4895: 
                            	  4896: 
                            	  4897: *-----------------------------------------------------------
                            	  4898: *-----------------------------------------------------------
                            	  4899: * OPCODE : CMP
                            	  4900: *-----------------------------------------------------------
                            	  4901: *-----------------------------------------------------------
                            	  4902: 
                            	  4903: op_CMP:
                            	  4904: 
                            	  4905: 
                            	  4906: *  * <EA> to Register
                            	  4907: 
00:00002BFE 203CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002C04 223C8167E123    	  4909:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002C0A 243CA5A5A5A5    	  4910:                 move.l #$a5a5a5a5,d2
00:00002C10 7600            	  4911:                 moveq  #$00000000,d3
00:00002C12 7800            	  4912:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C14 7A00            	  4913:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C16 7C1E            	  4914:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C18 7E1E            	  4915:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C1A 307C0100        	  4916:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4917: 
                            	  4918: 
                            	  4919: CMP_OUTER1:
                            	  4920: 
                            	  4921: *     BYTE
00:00002C1E 2081            	  4922:                 move.l d1,(a0)
00:00002C20 B010            	  4923:                 cmp.b (a0),d0
00:00002C22 40C3            	  4924:                 move SR,d3
00:00002C24 02830000000F    	  4925:                 andi.l #$0F,d3            * Isolate flags
00:00002C2A DA83            	  4926:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C2C D880            	  4927:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4928: 
                            	  4929: *     WORD
00:00002C2E 2081            	  4930:                 move.l d1,(a0)
00:00002C30 B050            	  4931:                 cmp.w (a0),d0
00:00002C32 40C3            	  4932:                 move SR,d3
00:00002C34 02830000000F    	  4933:                 andi.l #$0F,d3            * Isolate flags
00:00002C3A DA83            	  4934:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C3C D880            	  4935:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4936: 
                            	  4937: *     LONG
00:00002C3E 2081            	  4938:                 move.l d1,(a0)
00:00002C40 B090            	  4939:                 cmp.l (a0),d0
00:00002C42 40C3            	  4940:                 move SR,d3
00:00002C44 02830000000F    	  4941:                 andi.l #$0F,d3            * Isolate flags
00:00002C4A DA83            	  4942:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C4C D880            	  4943:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4944: 
                            	  4945: 
00:00002C4E E289            	  4946:                 lsr.l #$1,d1
00:00002C50 51CEFFCC        	  4947:                 dbf d6,CMP_OUTER1
00:00002C54 E28A            	  4948:                 lsr.l #$1,d2
00:00002C56 223C8167E123    	  4949:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002C5C 7C1E            	  4950:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C5E 51CFFFBE        	  4951:                 dbf d7,CMP_OUTER1
                            	  4952: 
00:00002C62 0C847878712F    	  4953:                 cmpi.l #$7878712F,d4      * Check the data results
00:00002C68 66FE            	  4954:                 bne.s *
00:00002C6A 0C8500005502    	  4955:                 cmpi.l #$00005502,d5      * Check the Flag results
00:00002C70 66FE            	  4956:                 bne.s *
                            	  4957: 
                            	  4958: 
                            	  4959: 
00:00002C72 4E75            	  4960:                 rts
                            	  4961: 
                            	  4962: 
                            	  4963: *-----------------------------------------------------------
                            	  4964: *-----------------------------------------------------------
                            	  4965: * OPCODE : CMPA
                            	  4966: *-----------------------------------------------------------
                            	  4967: *-----------------------------------------------------------
                            	  4968: 
                            	  4969: op_CMPA:
                            	  4970: 
                            	  4971: 
                            	  4972: *  * <EA> to Register
                            	  4973: 
00:00002C74 207CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00002C7A 223C8167E123    	  4975:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002C80 243CA5A5A5A5    	  4976:                 move.l #$a5a5a5a5,d2
00:00002C86 7600            	  4977:                 moveq  #$00000000,d3
00:00002C88 7800            	  4978:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C8A 7A00            	  4979:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C8C 7C1E            	  4980:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C8E 7E1E            	  4981:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C90 327C0100        	  4982:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4983: 
                            	  4984: 
                            	  4985: CMPA_OUTER1:
                            	  4986: 
                            	  4987: 
                            	  4988: *     WORD
00:00002C94 2281            	  4989:                 move.l d1,(a1)
00:00002C96 B0D1            	  4990:                 cmpa.w (a1),a0
00:00002C98 40C3            	  4991:                 move SR,d3
00:00002C9A 02830000000F    	  4992:                 andi.l #$0F,d3            * Isolate flags
00:00002CA0 DA83            	  4993:                 add.l d3,d5               * Copy flag results into accumulator
00:00002CA2 D888            	  4994:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4995: 
                            	  4996: *     LONG
00:00002CA4 2281            	  4997:                 move.l d1,(a1)
00:00002CA6 B1D1            	  4998:                 cmpa.l (a1),a0
00:00002CA8 40C3            	  4999:                 move SR,d3
00:00002CAA 02830000000F    	  5000:                 andi.l #$0F,d3            * Isolate flags
00:00002CB0 DA83            	  5001:                 add.l d3,d5               * Copy flag results into accumulator
00:00002CB2 D888            	  5002:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5003: 
                            	  5004: 
00:00002CB4 E289            	  5005:                 lsr.l #$1,d1
00:00002CB6 51CEFFDC        	  5006:                 dbf d6,CMPA_OUTER1
00:00002CBA E28A            	  5007:                 lsr.l #$1,d2
00:00002CBC 223C8167E123    	  5008:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002CC2 7C1E            	  5009:                 move.l #$0000001E,d6       * Inner loop counter
00:00002CC4 51CFFFCE        	  5010:                 dbf d7,CMPA_OUTER1
                            	  5011: 
00:00002CC8 0C84A5A5A0CA    	  5012:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:00002CCE 66FE            	  5013:                 bne.s *
00:00002CD0 0C8500003A7D    	  5014:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:00002CD6 66FE            	  5015:                 bne.s *
                            	  5016: 
                            	  5017: 
00:00002CD8 4E75            	  5018:                 rts
                            	  5019: 
                            	  5020: 
                            	  5021: 
                            	  5022: *-----------------------------------------------------------
                            	  5023: *-----------------------------------------------------------
                            	  5024: * OPCODE : CMPM
                            	  5025: *-----------------------------------------------------------
                            	  5026: *-----------------------------------------------------------
                            	  5027: 
                            	  5028: op_CMPM:
                            	  5029: 
00:00002CDA 307C0100        	  5030:                 move.l #$00000100,a0       * Address for Data-X
00:00002CDE 327C0200        	  5031:                 move.l #$00000200,a1       * Address for Data-Y
00:00002CE2 7000            	  5032:                 moveq  #$00000000,d0
00:00002CE4 7200            	  5033:                 moveq  #$00000000,d1
00:00002CE6 7400            	  5034:                 moveq  #$00000000,d2
                            	  5035: 
00:00002CE8 20FC11FF5580    	  5036:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00002CEE 20FC1111FFFF    	  5037:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00002CF4 20FC33333333    	  5038:                 move.l #$33333333,(a0)+   * Populate test data
00:00002CFA 20FC44444444    	  5039:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5040: 
00:00002D00 22FC80FF337F    	  5041:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00002D06 22FCFFFF1111    	  5042:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00002D0C 22FC33333333    	  5043:                 move.l #$33333333,(a1)+   * Populate test data
00:00002D12 22FC44444444    	  5044:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5045: 
00:00002D18 307C0100        	  5046:                 move.l #$00000100,a0       * Address for Data-X
00:00002D1C 327C0200        	  5047:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D20 7C0F            	  5048:                 move.l #$0000000F,d6       * Loop counter
                            	  5049: 
00:00002D22 B308            	  5050: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00002D24 40C3            	  5051:                 move SR,d3
00:00002D26 02830000000F    	  5052:                 andi.l #$0F,d3            * Isolate flags
00:00002D2C D083            	  5053:                 add.l d3,d0               * Copy flag results into accumulator
00:00002D2E 51CEFFF2        	  5054:                 dbf d6,CMPM_LOOP1
                            	  5055: 
                            	  5056: 
00:00002D32 307C0100        	  5057:                 move.l #$00000100,a0       * Address for Data-X
00:00002D36 327C0200        	  5058:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D3A 7C07            	  5059:                 moveq  #$00000007,d6       * Loop counter
                            	  5060: 
00:00002D3C B348            	  5061: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:00002D3E 40C3            	  5062:                 move SR,d3
00:00002D40 02830000000F    	  5063:                 andi.l #$0F,d3            * Isolate flags
00:00002D46 D283            	  5064:                 add.l d3,d1               * Copy flag results into accumulator
00:00002D48 51CEFFF2        	  5065:                 dbf d6,CMPM_LOOP2
                            	  5066: 
                            	  5067: 
00:00002D4C 307C0100        	  5068:                 move.l #$00000100,a0       * Address for Data-X
00:00002D50 327C0200        	  5069:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D54 7C03            	  5070:                 moveq  #$00000003,d6       * Loop counter
                            	  5071: 
00:00002D56 B388            	  5072: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00002D58 40C3            	  5073:                 move SR,d3
00:00002D5A 02830000000F    	  5074:                 andi.l #$0F,d3            * Isolate flags
00:00002D60 D483            	  5075:                 add.l d3,d2               * Copy flag results into accumulator
00:00002D62 51CEFFF2        	  5076:                 dbf d6,CMPM_LOOP3
                            	  5077: 
                            	  5078: 
00:00002D66 0C800000004C    	  5079:                 cmpi.l #$0000004C,d0      * Check the data results
00:00002D6C 66FE            	  5080:                 bne.s *
00:00002D6E 0C8100000024    	  5081:                 cmpi.l #$00000024,d1
00:00002D74 66FE            	  5082:                 bne.s *
00:00002D76 0C8200000012    	  5083:                 cmpi.l #$00000012,d2
00:00002D7C 66FE            	  5084:                 bne.s *
                            	  5085: 
00:00002D7E 4E75            	  5086:                 rts
                            	  5087: 
                            	  5088: 
                            	  5089: *-----------------------------------------------------------
                            	  5090: *-----------------------------------------------------------
                            	  5091: * OPCODE : ADD
                            	  5092: *-----------------------------------------------------------
                            	  5093: *-----------------------------------------------------------
                            	  5094: 
                            	  5095: op_ADD:
                            	  5096: 
                            	  5097: 
                            	  5098: *  * <EA> to Register
00:00002D80 203CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002D86 223C8167E123    	  5100:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002D8C 243CA5A5A5A5    	  5101:                 move.l #$a5a5a5a5,d2
00:00002D92 7600            	  5102:                 moveq  #$00000000,d3
00:00002D94 7800            	  5103:                 moveq  #$00000000,d4       * Cumulative data results
00:00002D96 7A00            	  5104:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002D98 7C1E            	  5105:                 move.l #$0000001E,d6       * Inner loop counter
00:00002D9A 7E1E            	  5106:                 move.l #$0000001E,d7       * Outer loop counter
00:00002D9C 307C0100        	  5107:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5108: 
                            	  5109: 
                            	  5110: ADD_OUTER1:
                            	  5111: 
                            	  5112: *     BYTE
00:00002DA0 2081            	  5113:                 move.l d1,(a0)
00:00002DA2 D010            	  5114:                 add.b (a0),d0
00:00002DA4 40C3            	  5115:                 move SR,d3
00:00002DA6 02830000001F    	  5116:                 andi.l #$1F,d3            * Isolate flags
00:00002DAC DA83            	  5117:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DAE D880            	  5118:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5119: 
                            	  5120: *     WORD
00:00002DB0 2081            	  5121:                 move.l d1,(a0)
00:00002DB2 D050            	  5122:                 add.w (a0),d0
00:00002DB4 40C3            	  5123:                 move SR,d3
00:00002DB6 02830000000C    	  5124:                 andi.l #$0C,d3            * Isolate flags
00:00002DBC DA83            	  5125:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DBE D880            	  5126:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5127: 
                            	  5128: *     LONG
00:00002DC0 2081            	  5129:                 move.l d1,(a0)
00:00002DC2 D090            	  5130:                 add.l (a0),d0
00:00002DC4 40C3            	  5131:                 move SR,d3
00:00002DC6 02830000000F    	  5132:                 andi.l #$0F,d3            * Isolate flags
00:00002DCC DA83            	  5133:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DCE D880            	  5134:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5135: 
                            	  5136: 
00:00002DD0 E299            	  5137:                 ror.l #$1,d1
00:00002DD2 51CEFFCC        	  5138:                 dbf d6,ADD_OUTER1
00:00002DD6 E29A            	  5139:                 ror.l #$1,d2
00:00002DD8 223C8167E123    	  5140:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002DDE 7C1E            	  5141:                 move.l #$0000001E,d6       * Inner loop counter
00:00002DE0 51CFFFBE        	  5142:                 dbf d7,ADD_OUTER1
                            	  5143: 
00:00002DE4 0C8423ED428F    	  5144:                 cmpi.l #$23ED428F,d4      * Check the data results
00:00002DEA 66FE            	  5145:                 bne.s *
00:00002DEC 0C8500004C96    	  5146:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:00002DF2 66FE            	  5147:                 bne.s *
                            	  5148: 
                            	  5149: 
                            	  5150: *  * Register to <EA>
00:00002DF4 203C86738374    	  5151:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002DFA 223CFC55F2FE    	  5152:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002E00 243C86738374    	  5153:                 move.l #$86738374,d2
00:00002E06 7600            	  5154:                 moveq  #$00000000,d3
00:00002E08 7800            	  5155:                 moveq  #$00000000,d4       * Cumulative data results
00:00002E0A 7A00            	  5156:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002E0C 7C1E            	  5157:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E0E 7E1D            	  5158:                 move.l #$0000001D,d7       * Outer loop counter
00:00002E10 307C0100        	  5159:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5160: 
                            	  5161: 
                            	  5162: ADD_OUTER2:
                            	  5163: 
                            	  5164: *     BYTE
00:00002E14 2080            	  5165:                 move.l d0,(a0)
00:00002E16 D310            	  5166:                 add.b d1,(a0)
00:00002E18 40C3            	  5167:                 move SR,d3
00:00002E1A 02830000000C    	  5168:                 andi.l #$0C,d3            * Isolate flags
00:00002E20 DA83            	  5169:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E22 D890            	  5170:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5171: 
                            	  5172: *     WORD
00:00002E24 2080            	  5173:                 move.l d0,(a0)
00:00002E26 D350            	  5174:                 add.w d1,(a0)
00:00002E28 40C3            	  5175:                 move SR,d3
00:00002E2A 02830000001F    	  5176:                 andi.l #$1F,d3            * Isolate flags
00:00002E30 DA83            	  5177:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E32 D890            	  5178:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5179: 
                            	  5180: *     LONG
00:00002E34 2080            	  5181:                 move.l d0,(a0)
00:00002E36 D390            	  5182:                 add.l d1,(a0)
00:00002E38 40C3            	  5183:                 move SR,d3
00:00002E3A 02830000000F    	  5184:                 andi.l #$0F,d3            * Isolate flags
00:00002E40 DA83            	  5185:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E42 D890            	  5186:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5187: 
                            	  5188: 
00:00002E44 E299            	  5189:                 ror.l #$1,d1
00:00002E46 51CEFFCC        	  5190:                 dbf d6,ADD_OUTER2
00:00002E4A E29A            	  5191:                 ror.l #$1,d2
00:00002E4C 223C8167E123    	  5192:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002E52 7C1E            	  5193:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E54 51CFFFBE        	  5194:                 dbf d7,ADD_OUTER2
                            	  5195: 
00:00002E58 0C846701B884    	  5196:                 cmpi.l #$6701B884,d4      * Check the data results
00:00002E5E 66FE            	  5197:                 bne.s *
00:00002E60 0C8500005467    	  5198:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00002E66 66FE            	  5199:                 bne.s *
                            	  5200: 
00:00002E68 4E75            	  5201:                 rts
                            	  5202: 
                            	  5203: *-----------------------------------------------------------
                            	  5204: *-----------------------------------------------------------
                            	  5205: * OPCODE : SUB
                            	  5206: *-----------------------------------------------------------
                            	  5207: *-----------------------------------------------------------
                            	  5208: 
                            	  5209: op_SUB:
                            	  5210: 
                            	  5211: *  * <EA> to Register
00:00002E6A 203CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002E70 223C8167E123    	  5213:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002E76 243CA5A5A5A5    	  5214:                 move.l #$a5a5a5a5,d2
00:00002E7C 7600            	  5215:                 moveq  #$00000000,d3
00:00002E7E 7800            	  5216:                 moveq  #$00000000,d4       * Cumulative data results
00:00002E80 7A00            	  5217:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002E82 7C1E            	  5218:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E84 7E1E            	  5219:                 move.l #$0000001E,d7       * Outer loop counter
00:00002E86 307C0100        	  5220:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5221: 
                            	  5222: 
                            	  5223: SUB_OUTER1:
                            	  5224: 
                            	  5225: *     BYTE
00:00002E8A 2081            	  5226:                 move.l d1,(a0)
00:00002E8C 9010            	  5227:                 sub.b (a0),d0
00:00002E8E 40C3            	  5228:                 move SR,d3
00:00002E90 02830000001F    	  5229:                 andi.l #$1F,d3            * Isolate flags
00:00002E96 DA83            	  5230:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E98 D880            	  5231:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5232: 
                            	  5233: *     WORD
00:00002E9A 2081            	  5234:                 move.l d1,(a0)
00:00002E9C 9050            	  5235:                 sub.w (a0),d0
00:00002E9E 40C3            	  5236:                 move SR,d3
00:00002EA0 02830000000C    	  5237:                 andi.l #$0C,d3            * Isolate flags
00:00002EA6 DA83            	  5238:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EA8 D880            	  5239:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5240: 
                            	  5241: *     LONG
00:00002EAA 2081            	  5242:                 move.l d1,(a0)
00:00002EAC 9090            	  5243:                 sub.l (a0),d0
00:00002EAE 40C3            	  5244:                 move SR,d3
00:00002EB0 02830000000F    	  5245:                 andi.l #$0F,d3            * Isolate flags
00:00002EB6 DA83            	  5246:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EB8 D880            	  5247:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5248: 
                            	  5249: 
00:00002EBA E299            	  5250:                 ror.l #$1,d1
00:00002EBC 51CEFFCC        	  5251:                 dbf d6,SUB_OUTER1
00:00002EC0 E29A            	  5252:                 ror.l #$1,d2
00:00002EC2 223C8167E123    	  5253:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002EC8 7C1E            	  5254:                 move.l #$0000001E,d6       * Inner loop counter
00:00002ECA 51CFFFBE        	  5255:                 dbf d7,SUB_OUTER1
                            	  5256: 
00:00002ECE 0C841A8D14CF    	  5257:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:00002ED4 66FE            	  5258:                 bne.s *
00:00002ED6 0C8500004FC4    	  5259:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:00002EDC 66FE            	  5260:                 bne.s *
                            	  5261: 
                            	  5262: 
                            	  5263: *  * Register to <EA>
00:00002EDE 203C86738374    	  5264:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002EE4 223CFC55F2FE    	  5265:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002EEA 243C86738374    	  5266:                 move.l #$86738374,d2
00:00002EF0 7600            	  5267:                 moveq  #$00000000,d3
00:00002EF2 7800            	  5268:                 moveq  #$00000000,d4       * Cumulative data results
00:00002EF4 7A00            	  5269:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002EF6 7C1E            	  5270:                 move.l #$0000001E,d6       * Inner loop counter
00:00002EF8 7E1D            	  5271:                 move.l #$0000001D,d7       * Outer loop counter
00:00002EFA 307C0100        	  5272:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5273: 
                            	  5274: 
                            	  5275: SUB_OUTER2:
                            	  5276: 
                            	  5277: *     BYTE
00:00002EFE 2080            	  5278:                 move.l d0,(a0)
00:00002F00 9310            	  5279:                 sub.b d1,(a0)
00:00002F02 40C3            	  5280:                 move SR,d3
00:00002F04 02830000000C    	  5281:                 andi.l #$0C,d3            * Isolate flags
00:00002F0A DA83            	  5282:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F0C D890            	  5283:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5284: 
                            	  5285: *     WORD
00:00002F0E 2080            	  5286:                 move.l d0,(a0)
00:00002F10 9350            	  5287:                 sub.w d1,(a0)
00:00002F12 40C3            	  5288:                 move SR,d3
00:00002F14 02830000001F    	  5289:                 andi.l #$1F,d3            * Isolate flags
00:00002F1A DA83            	  5290:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F1C D890            	  5291:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5292: 
                            	  5293: *     LONG
00:00002F1E 2080            	  5294:                 move.l d0,(a0)
00:00002F20 9390            	  5295:                 sub.l d1,(a0)
00:00002F22 40C3            	  5296:                 move SR,d3
00:00002F24 02830000000F    	  5297:                 andi.l #$0F,d3            * Isolate flags
00:00002F2A DA83            	  5298:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F2C D890            	  5299:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5300: 
                            	  5301: 
00:00002F2E E299            	  5302:                 ror.l #$1,d1
00:00002F30 51CEFFCC        	  5303:                 dbf d6,SUB_OUTER2
00:00002F34 E29A            	  5304:                 ror.l #$1,d2
00:00002F36 223C8167E123    	  5305:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F3C 7C1E            	  5306:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F3E 51CFFFBE        	  5307:                 dbf d7,SUB_OUTER2
                            	  5308: 
00:00002F42 0C8436D38BEC    	  5309:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00002F48 66FE            	  5310:                 bne.s *
00:00002F4A 0C85000045A5    	  5311:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:00002F50 66FE            	  5312:                 bne.s *
                            	  5313: 
                            	  5314: 
                            	  5315: 
                            	  5316: 
00:00002F52 4E75            	  5317:                 rts
                            	  5318: 
                            	  5319: 
                            	  5320: 
                            	  5321: *-----------------------------------------------------------
                            	  5322: *-----------------------------------------------------------
                            	  5323: * OPCODE : ADDA
                            	  5324: *-----------------------------------------------------------
                            	  5325: *-----------------------------------------------------------
                            	  5326: 
                            	  5327: op_ADDA:
                            	  5328: 
                            	  5329: *  * <EA> to Register
00:00002F54 203CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002F5A 223C8167E123    	  5331:                 move.l #$8167E123,d1
00:00002F60 243CA5A5A5A5    	  5332:                 move.l #$a5a5a5a5,d2
00:00002F66 7600            	  5333:                 moveq  #$00000000,d3
00:00002F68 7800            	  5334:                 moveq  #$00000000,d4       * Cumulative data results
00:00002F6A 7A00            	  5335:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002F6C 7C1E            	  5336:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F6E 7E1E            	  5337:                 move.l #$0000001E,d7       * Outer loop counter
00:00002F70 307C0100        	  5338:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002F74 227C8167E123    	  5339:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5340: 
                            	  5341: ADDA_OUTER1:
                            	  5342: 
                            	  5343: *     WORD
                            	  5344: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5345: *                adda.w (a0),a1
                            	  5346: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5347: 
                            	  5348: *     LONG
00:00002F7A 2081            	  5349:                 move.l d1,(a0)
00:00002F7C D3D0            	  5350:                 adda.l (a0),a1
00:00002F7E D889            	  5351:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5352: 
00:00002F80 E299            	  5353:                 ror.l #$1,d1
00:00002F82 51CEFFF6        	  5354:                 dbf d6,ADDA_OUTER1
00:00002F86 E299            	  5355:                 ror.l #$1,d1
00:00002F88 2241            	  5356:                 move.l d1,a1
00:00002F8A 223C8167E123    	  5357:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F90 7C1E            	  5358:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F92 51CFFFE6        	  5359:                 dbf d7,ADDA_OUTER1
                            	  5360: 
00:00002F96 0C84AC04DB4C    	  5361:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:00002F9C 66FE            	  5362:                 bne.s *
                            	  5363: 
                            	  5364: 
00:00002F9E 4E75            	  5365:                 rts
                            	  5366: 
                            	  5367: 
                            	  5368: *-----------------------------------------------------------
                            	  5369: *-----------------------------------------------------------
                            	  5370: * OPCODE : SUBA
                            	  5371: *-----------------------------------------------------------
                            	  5372: *-----------------------------------------------------------
                            	  5373: 
                            	  5374: op_SUBA:
                            	  5375: 
                            	  5376: *  * <EA> to Register
00:00002FA0 203CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002FA6 223C8167E123    	  5378:                 move.l #$8167E123,d1
00:00002FAC 243CA5A5A5A5    	  5379:                 move.l #$a5a5a5a5,d2
00:00002FB2 7600            	  5380:                 moveq  #$00000000,d3
00:00002FB4 7800            	  5381:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FB6 7A00            	  5382:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002FB8 7C1E            	  5383:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FBA 7E1E            	  5384:                 move.l #$0000001E,d7       * Outer loop counter
00:00002FBC 307C0100        	  5385:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002FC0 227C8167E123    	  5386:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5387: 
                            	  5388: SUBA_OUTER1:
                            	  5389: 
                            	  5390: *     WORD
                            	  5391: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5392: *                suba.w (a0),a1
                            	  5393: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5394: 
                            	  5395: *     LONG
00:00002FC6 2081            	  5396:                 move.l d1,(a0)
00:00002FC8 93D0            	  5397:                 suba.l (a0),a1
00:00002FCA D889            	  5398:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5399: 
00:00002FCC E299            	  5400:                 ror.l #$1,d1
00:00002FCE 51CEFFF6        	  5401:                 dbf d6,SUBA_OUTER1
00:00002FD2 E299            	  5402:                 ror.l #$1,d1
00:00002FD4 2241            	  5403:                 move.l d1,a1
00:00002FD6 223C8167E123    	  5404:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002FDC 7C1E            	  5405:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FDE 51CFFFE6        	  5406:                 dbf d7,SUBA_OUTER1
                            	  5407: 
00:00002FE2 0C84E1E36D7A    	  5408:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:00002FE8 66FE            	  5409:                 bne.s *
                            	  5410: 
                            	  5411: 
00:00002FEA 4E75            	  5412:                 rts
                            	  5413: 
                            	  5414: 
                            	  5415: 
                            	  5416: *-----------------------------------------------------------
                            	  5417: *-----------------------------------------------------------
                            	  5418: * OPCODE : ADDX
                            	  5419: *-----------------------------------------------------------
                            	  5420: *-----------------------------------------------------------
                            	  5421: 
                            	  5422: op_ADDX:
                            	  5423: 
                            	  5424: 
                            	  5425: *  * Register to Register
00:00002FEC 203CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002FF2 223C8167E123    	  5427:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002FF8 243CA5A5A5A5    	  5428:                 move.l #$a5a5a5a5,d2
00:00002FFE 7600            	  5429:                 moveq  #$00000000,d3
00:00003000 7800            	  5430:                 moveq  #$00000000,d4       * Cumulative data results
00:00003002 7A00            	  5431:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003004 7C1E            	  5432:                 move.l #$0000001E,d6       * Inner loop counter
00:00003006 7E1E            	  5433:                 move.l #$0000001E,d7       * Outer loop counter
00:00003008 307C0100        	  5434:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5435: 
                            	  5436: 
                            	  5437: ADDX_OUTER1:
                            	  5438: 
                            	  5439: *     BYTE
00:0000300C 2002            	  5440:                 move.l d2,d0
00:0000300E D101            	  5441:                 addx.b d1,d0
00:00003010 40C3            	  5442:                 move SR,d3
00:00003012 02830000001F    	  5443:                 andi.l #$1F,d3            * Isolate flags
00:00003018 DA83            	  5444:                 add.l d3,d5               * Copy flag results into accumulator
00:0000301A D880            	  5445:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5446: 
                            	  5447: *     WORD
00:0000301C 2002            	  5448:                 move.l d2,d0
00:0000301E D141            	  5449:                 addx.w d1,d0
00:00003020 40C3            	  5450:                 move SR,d3
00:00003022 02830000001F    	  5451:                 andi.l #$1F,d3            * Isolate flags
00:00003028 DA83            	  5452:                 add.l d3,d5               * Copy flag results into accumulator
00:0000302A D880            	  5453:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5454: 
                            	  5455: *     LONG
00:0000302C 2002            	  5456:                 move.l d2,d0
00:0000302E D181            	  5457:                 addx.l d1,d0
00:00003030 40C3            	  5458:                 move SR,d3
00:00003032 02830000001F    	  5459:                 andi.l #$1F,d3            * Isolate flags
00:00003038 DA83            	  5460:                 add.l d3,d5               * Copy flag results into accumulator
00:0000303A D880            	  5461:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5462: 
00:0000303C E299            	  5463:                 ror.l #$1,d1
00:0000303E 51CEFFCC        	  5464:                 dbf d6,ADDX_OUTER1
00:00003042 E29A            	  5465:                 ror.l #$1,d2
00:00003044 223C8167E123    	  5466:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000304A 7C1E            	  5467:                 move.l #$0000001E,d6       * Inner loop counter
00:0000304C 51CFFFBE        	  5468:                 dbf d7,ADDX_OUTER1
                            	  5469: 
00:00003050 0C844E96A4D9    	  5470:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:00003056 66FE            	  5471:                 bne.s *
00:00003058 0C85000085CD    	  5472:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:0000305E 66FE            	  5473:                 bne.s *
                            	  5474: 
                            	  5475: 
                            	  5476: 
                            	  5477: *     -(An),-(An)
                            	  5478: 
00:00003060 7000            	  5479:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00003062 7200            	  5480:                 moveq  #$00000000,d1
00:00003064 7400            	  5481:                 moveq  #$00000000,d2
00:00003066 307C0100        	  5482:                 move.l #$00000100,a0       * Address for Data-X
00:0000306A 327C0200        	  5483:                 move.l #$00000200,a1       * Address for Data-Y
00:0000306E 20FC11FF5580    	  5484:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00003074 20FC1111FFFF    	  5485:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:0000307A 20FC33333333    	  5486:                 move.l #$33333333,(a0)+   * Populate test data
00:00003080 20FC44444444    	  5487:                 move.l #$44444444,(a0)+   * Populate test data
00:00003086 22FC80FF337F    	  5488:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000308C 22FCFFFF1111    	  5489:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00003092 22FC33333333    	  5490:                 move.l #$33333333,(a1)+   * Populate test data
00:00003098 22FC44444444    	  5491:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5492: 
                            	  5493: 
00:0000309E 7C0F            	  5494:                 move.l #$0000000F,d6       * Loop counter
                            	  5495: 
00:000030A0 D308            	  5496: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:000030A2 40C3            	  5497:                 move SR,d3
00:000030A4 02830000000F    	  5498:                 andi.l #$0F,d3            * Isolate flags
00:000030AA D083            	  5499:                 add.l d3,d0               * Copy flag results into accumulator
00:000030AC D211            	  5500:                 add.b (a1),d1
00:000030AE 51CEFFF0        	  5501:                 dbf d6,ADDX_LOOP3
                            	  5502: 
                            	  5503: 
00:000030B2 307C0110        	  5504:                 move.l #$00000110,a0       * Address for Data-X
00:000030B6 327C0210        	  5505:                 move.l #$00000210,a1       * Address for Data-Y
00:000030BA 7C07            	  5506:                 moveq  #$00000007,d6       * Loop counter
                            	  5507: 
00:000030BC D348            	  5508: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:000030BE 40C3            	  5509:                 move SR,d3
00:000030C0 02830000000F    	  5510:                 andi.l #$0F,d3            * Isolate flags
00:000030C6 D083            	  5511:                 add.l d3,d0               * Copy flag results into accumulator
00:000030C8 D251            	  5512:                 add.w (a1),d1
00:000030CA 51CEFFF0        	  5513:                 dbf d6,ADDX_LOOP4
                            	  5514: 
                            	  5515: 
00:000030CE 307C0110        	  5516:                 move.l #$00000110,a0       * Address for Data-X
00:000030D2 327C0210        	  5517:                 move.l #$00000210,a1       * Address for Data-Y
00:000030D6 7C03            	  5518:                 moveq  #$00000003,d6       * Loop counter
                            	  5519: 
00:000030D8 D388            	  5520: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:000030DA 40C3            	  5521:                 move SR,d3
00:000030DC 02830000000F    	  5522:                 andi.l #$0F,d3            * Isolate flags
00:000030E2 D083            	  5523:                 add.l d3,d0               * Copy flag results into accumulator
00:000030E4 D291            	  5524:                 add.l (a1),d1
00:000030E6 51CEFFF0        	  5525:                 dbf d6,ADDX_LOOP5
                            	  5526: 
                            	  5527: 
00:000030EA 0C8000000095    	  5528:                 cmpi.l #$00000095,d0      * Check the flag results
00:000030F0 66FE            	  5529:                 bne.s *
00:000030F2 0C81C812A682    	  5530:                 cmpi.l #$C812A682,d1      * Check the data results
00:000030F8 66FE            	  5531:                 bne.s *
                            	  5532: 
00:000030FA 4E75            	  5533:                 rts
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: 
                            	  5538: *-----------------------------------------------------------
                            	  5539: *-----------------------------------------------------------
                            	  5540: * OPCODE : SUBX
                            	  5541: *-----------------------------------------------------------
                            	  5542: *-----------------------------------------------------------
                            	  5543: 
                            	  5544: op_SUBX:
                            	  5545: 
                            	  5546: 
                            	  5547: *  * Register to Register
00:000030FC 203CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00003102 223C8167E123    	  5549:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00003108 243CA5A5A5A5    	  5550:                 move.l #$a5a5a5a5,d2
00:0000310E 7600            	  5551:                 moveq  #$00000000,d3
00:00003110 7800            	  5552:                 moveq  #$00000000,d4       * Cumulative data results
00:00003112 7A00            	  5553:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003114 7C1E            	  5554:                 move.l #$0000001E,d6       * Inner loop counter
00:00003116 7E1E            	  5555:                 move.l #$0000001E,d7       * Outer loop counter
00:00003118 307C0100        	  5556:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5557: 
                            	  5558: 
                            	  5559: SUBX_OUTER1:
                            	  5560: 
                            	  5561: *     BYTE
00:0000311C 2002            	  5562:                 move.l d2,d0
00:0000311E 9101            	  5563:                 subx.b d1,d0
00:00003120 40C3            	  5564:                 move SR,d3
00:00003122 02830000001F    	  5565:                 andi.l #$1F,d3            * Isolate flags
00:00003128 DA83            	  5566:                 add.l d3,d5               * Copy flag results into accumulator
00:0000312A D880            	  5567:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5568: 
                            	  5569: *     WORD
00:0000312C 2002            	  5570:                 move.l d2,d0
00:0000312E 9141            	  5571:                 subx.w d1,d0
00:00003130 40C3            	  5572:                 move SR,d3
00:00003132 02830000001F    	  5573:                 andi.l #$1F,d3            * Isolate flags
00:00003138 DA83            	  5574:                 add.l d3,d5               * Copy flag results into accumulator
00:0000313A D880            	  5575:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5576: 
                            	  5577: *     LONG
00:0000313C 2002            	  5578:                 move.l d2,d0
00:0000313E 9181            	  5579:                 subx.l d1,d0
00:00003140 40C3            	  5580:                 move SR,d3
00:00003142 02830000001F    	  5581:                 andi.l #$1F,d3            * Isolate flags
00:00003148 DA83            	  5582:                 add.l d3,d5               * Copy flag results into accumulator
00:0000314A D880            	  5583:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5584: 
00:0000314C E299            	  5585:                 ror.l #$1,d1
00:0000314E 51CEFFCC        	  5586:                 dbf d6,SUBX_OUTER1
00:00003152 E29A            	  5587:                 ror.l #$1,d2
00:00003154 223C8167E123    	  5588:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000315A 7C1E            	  5589:                 move.l #$0000001E,d6       * Inner loop counter
00:0000315C 51CFFFBE        	  5590:                 dbf d7,SUBX_OUTER1
                            	  5591: 
00:00003160 0C84FCAA913E    	  5592:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:00003166 66FE            	  5593:                 bne.s *
00:00003168 0C8500007E89    	  5594:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:0000316E 66FE            	  5595:                 bne.s *
                            	  5596: 
                            	  5597: 
                            	  5598: 
                            	  5599: *     -(An),-(An)
                            	  5600: 
00:00003170 7000            	  5601:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00003172 7200            	  5602:                 moveq  #$00000000,d1
00:00003174 7400            	  5603:                 moveq  #$00000000,d2
00:00003176 307C0100        	  5604:                 move.l #$00000100,a0       * Address for Data-X
00:0000317A 327C0200        	  5605:                 move.l #$00000200,a1       * Address for Data-Y
00:0000317E 20FC11FF5580    	  5606:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00003184 20FC1111FFFF    	  5607:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:0000318A 20FC80FF337F    	  5608:                 move.l #$80FF337F,(a0)+   * Populate test data
00:00003190 20FC44444444    	  5609:                 move.l #$44444444,(a0)+   * Populate test data
00:00003196 22FC80FF337F    	  5610:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000319C 22FC1111FFFF    	  5611:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:000031A2 22FC33333333    	  5612:                 move.l #$33333333,(a1)+   * Populate test data
00:000031A8 22FC5580EECC    	  5613:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5614: 
                            	  5615: 
00:000031AE 7C0F            	  5616:                 move.l #$0000000F,d6       * Loop counter
                            	  5617: 
00:000031B0 9308            	  5618: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:000031B2 40C3            	  5619:                 move SR,d3
00:000031B4 02830000000F    	  5620:                 andi.l #$0F,d3            * Isolate flags
00:000031BA D083            	  5621:                 add.l d3,d0               * Copy flag results into accumulator
00:000031BC D211            	  5622:                 add.b (a1),d1
00:000031BE 51CEFFF0        	  5623:                 dbf d6,SUBX_LOOP3
                            	  5624: 
                            	  5625: 
00:000031C2 307C0110        	  5626:                 move.l #$00000110,a0       * Address for Data-X
00:000031C6 327C0210        	  5627:                 move.l #$00000210,a1       * Address for Data-Y
00:000031CA 7C07            	  5628:                 moveq  #$00000007,d6       * Loop counter
                            	  5629: 
00:000031CC 9348            	  5630: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:000031CE 40C3            	  5631:                 move SR,d3
00:000031D0 02830000000F    	  5632:                 andi.l #$0F,d3            * Isolate flags
00:000031D6 D083            	  5633:                 add.l d3,d0               * Copy flag results into accumulator
00:000031D8 D251            	  5634:                 add.w (a1),d1
00:000031DA 51CEFFF0        	  5635:                 dbf d6,SUBX_LOOP4
                            	  5636: 
                            	  5637: 
00:000031DE 307C0110        	  5638:                 move.l #$00000110,a0       * Address for Data-X
00:000031E2 327C0210        	  5639:                 move.l #$00000210,a1       * Address for Data-Y
00:000031E6 7C03            	  5640:                 moveq  #$00000003,d6       * Loop counter
                            	  5641: 
00:000031E8 9388            	  5642: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:000031EA 40C3            	  5643:                 move SR,d3
00:000031EC 02830000000F    	  5644:                 andi.l #$0F,d3            * Isolate flags
00:000031F2 D083            	  5645:                 add.l d3,d0               * Copy flag results into accumulator
00:000031F4 D291            	  5646:                 add.l (a1),d1
00:000031F6 51CEFFF0        	  5647:                 dbf d6,SUBX_LOOP5
                            	  5648: 
                            	  5649: 
00:000031FA 0C80000000B1    	  5650:                 cmpi.l #$000000B1,d0      * Check the flag results
00:00003200 66FE            	  5651:                 bne.s *
00:00003202 0C8162C6F417    	  5652:                 cmpi.l #$62C6F417,d1      * Check the data results
00:00003208 66FE            	  5653:                 bne.s *
                            	  5654: 
00:0000320A 4E75            	  5655:                 rts
                            	  5656: 
                            	  5657: 
                            	  5658: *-----------------------------------------------------------
                            	  5659: *-----------------------------------------------------------
                            	  5660: * OPCODE : MULU
                            	  5661: *-----------------------------------------------------------
                            	  5662: *-----------------------------------------------------------
                            	  5663: 
                            	  5664: op_MULU:
                            	  5665: 
00:0000320C 203CFE805501    	  5666:                 move.l #$FE805501,d0        * Initial
00:00003212 223C5697EDB6    	  5667:                 move.l #$5697EDB6,d1        * Initial Y
00:00003218 243CFE805501    	  5668:                 move.l #$FE805501,d2
00:0000321E 7600            	  5669:                 moveq  #$00000000,d3
00:00003220 7800            	  5670:                 moveq  #$00000000,d4        * Cumulative data results
00:00003222 7A00            	  5671:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003224 7C0E            	  5672:                 move.l #$0000000E,d6       * Inner loop counter
00:00003226 7E0E            	  5673:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5674: 
                            	  5675: 
00:00003228 C0C1            	  5676: MULU_OUTER1:    mulu d1,d0
00:0000322A 40C3            	  5677:                 move SR,d3
00:0000322C 02830000000C    	  5678:                 andi.l #$0C,d3            * Isolate flags
00:00003232 DA83            	  5679:                 add.l d3,d5               * Copy flag results into accumulator
00:00003234 D880            	  5680:                 add.l d0,d4               * Copy data results into data accumulator
00:00003236 E299            	  5681:                 ror.l #$1,d1
                            	  5682: 
00:00003238 51CEFFEE        	  5683:                 dbf d6,MULU_OUTER1
00:0000323C E29A            	  5684:                 ror.l #$1,d2
00:0000323E 2002            	  5685:                 move.l d2,d0
00:00003240 7C0E            	  5686:                 move.l #$0000000E,d6       * Inner loop counter
00:00003242 51CFFFE4        	  5687:                 dbf d7,MULU_OUTER1
                            	  5688: 
00:00003246 0C8476FB988C    	  5689:                 cmpi.l #$76FB988C,d4      * Check the data results
00:0000324C 66FE            	  5690:                 bne.s *
                            	  5691: 
00:0000324E 0C8500000170    	  5692:                 cmpi.l #$00000170,d5      * Check the Flag results
00:00003254 66FE            	  5693:                 bne.s *
                            	  5694: 
                            	  5695: 
00:00003256 4E75            	  5696:                 rts
                            	  5697: 
                            	  5698: 
                            	  5699: *-----------------------------------------------------------
                            	  5700: *-----------------------------------------------------------
                            	  5701: * OPCODE : MULS
                            	  5702: *-----------------------------------------------------------
                            	  5703: *-----------------------------------------------------------
                            	  5704: 
                            	  5705: op_MULS:
                            	  5706: 
00:00003258 203CFE805501    	  5707:                 move.l #$FE805501,d0        * Initial
00:0000325E 223C5697EDB6    	  5708:                 move.l #$5697EDB6,d1        * Initial Y
00:00003264 243CFE805501    	  5709:                 move.l #$FE805501,d2
00:0000326A 7600            	  5710:                 moveq  #$00000000,d3
00:0000326C 7800            	  5711:                 moveq  #$00000000,d4        * Cumulative data results
00:0000326E 7A00            	  5712:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003270 7C0E            	  5713:                 move.l #$0000000E,d6       * Inner loop counter
00:00003272 7E0E            	  5714:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5715: 
                            	  5716: 
00:00003274 C1C1            	  5717: MULS_OUTER1:    muls d1,d0
00:00003276 40C3            	  5718:                 move SR,d3
00:00003278 02830000000C    	  5719:                 andi.l #$0C,d3            * Isolate flags
00:0000327E DA83            	  5720:                 add.l d3,d5               * Copy flag results into accumulator
00:00003280 D880            	  5721:                 add.l d0,d4               * Copy data results into data accumulator
00:00003282 E299            	  5722:                 ror.l #$1,d1
                            	  5723: 
00:00003284 51CEFFEE        	  5724:                 dbf d6,MULS_OUTER1
00:00003288 E29A            	  5725:                 ror.l #$1,d2
00:0000328A 2002            	  5726:                 move.l d2,d0
00:0000328C 7C0E            	  5727:                 move.l #$0000000E,d6       * Inner loop counter
00:0000328E 51CFFFE4        	  5728:                 dbf d7,MULS_OUTER1
                            	  5729: 
00:00003292 0C84D4E2988C    	  5730:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:00003298 66FE            	  5731:                 bne.s *
                            	  5732: 
00:0000329A 0C85000003E0    	  5733:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:000032A0 66FE            	  5734:                 bne.s *
                            	  5735: 
                            	  5736: 
00:000032A2 4E75            	  5737:                 rts
                            	  5738: 
                            	  5739: 
                            	  5740: 
                            	  5741: *-----------------------------------------------------------
                            	  5742: *-----------------------------------------------------------
                            	  5743: * OPCODE : EXG
                            	  5744: *-----------------------------------------------------------
                            	  5745: *-----------------------------------------------------------
                            	  5746: 
                            	  5747: op_EXG:
00:000032A4 223CD1D1D1D1    	  5748:                 move.l #$d1d1d1d1,d1
00:000032AA 243CD2D2D2D2    	  5749:                 move.l #$d2d2d2d2,d2
00:000032B0 263CD3D3D3D3    	  5750:                 move.l #$d3d3d3d3,d3
00:000032B6 227CA1A1A1A1    	  5751:                 move.l #$a1a1a1a1,a1
00:000032BC 247CA2A2A2A2    	  5752:                 move.l #$a2a2a2a2,a2
00:000032C2 267CA3A3A3A3    	  5753:                 move.l #$a3a3a3a3,a3
                            	  5754: 
00:000032C8 C342            	  5755:                 exg d1,d2
00:000032CA C34A            	  5756:                 exg a1,a2
00:000032CC C78B            	  5757:                 exg d3,a3
                            	  5758: 
00:000032CE 0C81D2D2D2D2    	  5759:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:000032D4 66FE            	  5760:                 bne.s *
00:000032D6 0C82D1D1D1D1    	  5761:                 cmpi.l #$d1d1d1d1,d2
00:000032DC 66FE            	  5762:                 bne.s *
00:000032DE 0C83A3A3A3A3    	  5763:                 cmpi.l #$a3a3a3a3,d3
00:000032E4 66FE            	  5764:                 bne.s *
                            	  5765: 
00:000032E6 2209            	  5766:                 move.l a1,d1
00:000032E8 240A            	  5767:                 move.l a2,d2
00:000032EA 260B            	  5768:                 move.l a3,d3
                            	  5769: 
00:000032EC 0C81A2A2A2A2    	  5770:                 cmpi.l #$a2a2a2a2,d1
00:000032F2 66FE            	  5771:                 bne.s *
00:000032F4 0C82A1A1A1A1    	  5772:                 cmpi.l #$a1a1a1a1,d2
00:000032FA 66FE            	  5773:                 bne.s *
00:000032FC 0C83D3D3D3D3    	  5774:                 cmpi.l #$d3d3d3d3,d3
00:00003302 66FE            	  5775:                 bne.s *
                            	  5776: 
00:00003304 4E75            	  5777:                 rts
                            	  5778: 
                            	  5779: 
                            	  5780: *-----------------------------------------------------------
                            	  5781: *-----------------------------------------------------------
                            	  5782: * OPCODE : ROx
                            	  5783: *-----------------------------------------------------------
                            	  5784: *-----------------------------------------------------------
                            	  5785: 
                            	  5786: *     Subroutine to check and accumulate the flags
00:00003306 40C3            	  5787: ROx_FLAGS:      move SR,d3
00:00003308 02830000000F    	  5788:                 andi.l #$0F,d3            * Isolate flags
00:0000330E DA83            	  5789:                 add.l d3,d5               * Copy flag results into accumulator
00:00003310 4E75            	  5790:                 rts
                            	  5791: 
                            	  5792: op_ROx:
                            	  5793: 
                            	  5794: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5795: 
                            	  5796: *        BYTE LEFT
00:00003312 203C80018FF1    	  5797:                 move.l #$80018FF1,d0
00:00003318 7A00            	  5798:                 moveq  #$00000000,d5
00:0000331A 7C11            	  5799:                 moveq  #$00000011,d6
                            	  5800: ROx_LOOP1:
00:0000331C ED38            	  5801:                 rol.b d6,d0
00:0000331E 61E6            	  5802:                 bsr ROx_FLAGS
00:00003320 51CEFFFA        	  5803:                 dbf d6,ROx_LOOP1
00:00003324 0C8080018FE3    	  5804:                 cmpi.l #$80018FE3,d0
00:0000332A 66FE            	  5805:                 bne.s *
00:0000332C 0C850000006B    	  5806:                 cmpi.l #$0000006B,d5
00:00003332 66FE            	  5807:                 bne.s *
                            	  5808: 
                            	  5809: *        BYTE RIGHT
00:00003334 203C80018FF1    	  5810:                 move.l #$80018FF1,d0
00:0000333A 7C12            	  5811:                 moveq  #$00000012,d6
                            	  5812: ROx_LOOP2:
00:0000333C EC38            	  5813:                 ror.b d6,d0
00:0000333E 61C6            	  5814:                 bsr ROx_FLAGS
00:00003340 51CEFFFA        	  5815:                 dbf d6,ROx_LOOP2
00:00003344 0C8080018F3E    	  5816:                 cmpi.l #$80018F3E,d0
00:0000334A 66FE            	  5817:                 bne.s *
00:0000334C 0C85000000C5    	  5818:                 cmpi.l #$000000C5,d5
00:00003352 66FE            	  5819:                 bne.s *
                            	  5820: 
                            	  5821: 
                            	  5822: *        WORD LEFT
00:00003354 203C80018FF1    	  5823:                 move.l #$80018FF1,d0
00:0000335A 7C13            	  5824:                 moveq  #$00000013,d6
                            	  5825: ROx_LOOP3:
00:0000335C ED78            	  5826:                 rol.w d6,d0
00:0000335E 61A6            	  5827:                 bsr ROx_FLAGS
00:00003360 51CEFFFA        	  5828:                 dbf d6,ROx_LOOP3
00:00003364 0C80800163FC    	  5829:                 cmpi.l #$800163FC,d0
00:0000336A 66FE            	  5830:                 bne.s *
00:0000336C 0C8500000131    	  5831:                 cmpi.l #$00000131,d5
00:00003372 66FE            	  5832:                 bne.s *
                            	  5833: 
                            	  5834: *        WORD RIGHT
00:00003374 203C80018FF1    	  5835:                 move.l #$80018FF1,d0
00:0000337A 7C1E            	  5836:                 move.l #$0000001E,d6
                            	  5837: ROx_LOOP4:
00:0000337C EC78            	  5838:                 ror.w d6,d0
00:0000337E 6186            	  5839:                 bsr ROx_FLAGS
00:00003380 51CEFFFA        	  5840:                 dbf d6,ROx_LOOP4
00:00003384 0C808001C7F8    	  5841:                 cmpi.l #$8001C7F8,d0
00:0000338A 66FE            	  5842:                 bne.s *
00:0000338C 0C85000001DB    	  5843:                 cmpi.l #$000001DB,d5
00:00003392 66FE            	  5844:                 bne.s *
                            	  5845: 
                            	  5846: 
                            	  5847: *        LONG LEFT
00:00003394 203C80018FF1    	  5848:                 move.l #$80018FF1,d0
00:0000339A 7C15            	  5849:                 moveq  #$00000015,d6
                            	  5850: ROx_LOOP5:
00:0000339C EDB8            	  5851:                 rol.l d6,d0
00:0000339E 6100FF66        	  5852:                 bsr ROx_FLAGS
00:000033A2 51CEFFF8        	  5853:                 dbf d6,ROx_LOOP5
00:000033A6 0C8000C7F8C0    	  5854:                 cmpi.l #$00C7F8C0,d0
00:000033AC 66FE            	  5855:                 bne.s *
00:000033AE 0C850000021A    	  5856:                 cmpi.l #$0000021A,d5
00:000033B4 66FE            	  5857:                 bne.s *
                            	  5858: 
                            	  5859: *        LONG RIGHT
00:000033B6 203C80018FF1    	  5860:                 move.l #$80018FF1,d0
00:000033BC 7C16            	  5861:                 moveq  #$00000016,d6
                            	  5862: ROx_LOOP6:
00:000033BE ECB8            	  5863:                 ror.l d6,d0
00:000033C0 6100FF44        	  5864:                 bsr ROx_FLAGS
00:000033C4 51CEFFF8        	  5865:                 dbf d6,ROx_LOOP6
00:000033C8 0C80000C7F8C    	  5866:                 cmpi.l #$000C7F8C,d0
00:000033CE 66FE            	  5867:                 bne.s *
00:000033D0 0C8500000250    	  5868:                 cmpi.l #$00000250,d5
00:000033D6 66FE            	  5869:                 bne.s *
                            	  5870: 
                            	  5871: 
                            	  5872: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5873: 
00:000033D8 203C80018FF1    	  5874:                 move.l #$80018FF1,d0
00:000033DE 7A00            	  5875:                 moveq  #$00000000,d5
                            	  5876: 
                            	  5877: *        BYTE LEFT
00:000033E0 E318            	  5878:                 rol.b #1,d0
00:000033E2 6100FF22        	  5879:                 bsr ROx_FLAGS
00:000033E6 EB18            	  5880:                 rol.b #5,d0
00:000033E8 6100FF1C        	  5881:                 bsr ROx_FLAGS
00:000033EC EF18            	  5882:                 rol.b #7,d0
00:000033EE 6100FF16        	  5883:                 bsr ROx_FLAGS
00:000033F2 E118            	  5884:                 rol.b #8,d0
00:000033F4 6100FF10        	  5885:                 bsr ROx_FLAGS
00:000033F8 0C8080018F3E    	  5886:                 cmpi.l #$80018F3E,d0
00:000033FE 66FE            	  5887:                 bne.s *
00:00003400 0C8500000009    	  5888:                 cmpi.l #$00000009,d5
00:00003406 66FE            	  5889:                 bne.s *
                            	  5890: 
                            	  5891: *        BYTE RIGHT
00:00003408 E218            	  5892:                 ror.b #1,d0
00:0000340A 6100FEFA        	  5893:                 bsr ROx_FLAGS
00:0000340E EA18            	  5894:                 ror.b #5,d0
00:00003410 6100FEF4        	  5895:                 bsr ROx_FLAGS
00:00003414 EE18            	  5896:                 ror.b #7,d0
00:00003416 6100FEEE        	  5897:                 bsr ROx_FLAGS
00:0000341A E018            	  5898:                 ror.b #8,d0
00:0000341C 6100FEE8        	  5899:                 bsr ROx_FLAGS
00:00003420 0C8080018FF1    	  5900:                 cmpi.l #$80018FF1,d0
00:00003426 66FE            	  5901:                 bne.s *
00:00003428 0C8500000024    	  5902:                 cmpi.l #$00000024,d5
00:0000342E 66FE            	  5903:                 bne.s *
                            	  5904: 
                            	  5905: *        WORD LEFT
00:00003430 E358            	  5906:                 rol.w #1,d0
00:00003432 6100FED2        	  5907:                 bsr ROx_FLAGS
00:00003436 EB58            	  5908:                 rol.w #5,d0
00:00003438 6100FECC        	  5909:                 bsr ROx_FLAGS
00:0000343C EF58            	  5910:                 rol.w #7,d0
00:0000343E 6100FEC6        	  5911:                 bsr ROx_FLAGS
00:00003442 E158            	  5912:                 rol.w #8,d0
00:00003444 6100FEC0        	  5913:                 bsr ROx_FLAGS
00:00003448 0C808001FE31    	  5914:                 cmpi.l #$8001FE31,d0
00:0000344E 66FE            	  5915:                 bne.s *
00:00003450 0C8500000037    	  5916:                 cmpi.l #$00000037,d5
00:00003456 66FE            	  5917:                 bne.s *
                            	  5918: 
                            	  5919: *        WORD RIGHT
00:00003458 E258            	  5920:                 ror.w #1,d0
00:0000345A 6100FEAA        	  5921:                 bsr ROx_FLAGS
00:0000345E EA58            	  5922:                 ror.w #5,d0
00:00003460 6100FEA4        	  5923:                 bsr ROx_FLAGS
00:00003464 EE58            	  5924:                 ror.w #7,d0
00:00003466 6100FE9E        	  5925:                 bsr ROx_FLAGS
00:0000346A E058            	  5926:                 ror.w #8,d0
00:0000346C 6100FE98        	  5927:                 bsr ROx_FLAGS
00:00003470 0C8080018FF1    	  5928:                 cmpi.l #$80018FF1,d0
00:00003476 66FE            	  5929:                 bne.s *
00:00003478 0C850000005B    	  5930:                 cmpi.l #$0000005B,d5
00:0000347E 66FE            	  5931:                 bne.s *
                            	  5932: 
                            	  5933: *        LONG LEFT
00:00003480 E398            	  5934:                 rol.l #1,d0
00:00003482 6100FE82        	  5935:                 bsr ROx_FLAGS
00:00003486 EB98            	  5936:                 rol.l #5,d0
00:00003488 6100FE7C        	  5937:                 bsr ROx_FLAGS
00:0000348C EF98            	  5938:                 rol.l #7,d0
00:0000348E 6100FE76        	  5939:                 bsr ROx_FLAGS
00:00003492 E198            	  5940:                 rol.l #8,d0
00:00003494 6100FE70        	  5941:                 bsr ROx_FLAGS
00:00003498 0C80FE300031    	  5942:                 cmpi.l #$FE300031,d0
00:0000349E 66FE            	  5943:                 bne.s *
00:000034A0 0C8500000065    	  5944:                 cmpi.l #$00000065,d5
00:000034A6 66FE            	  5945:                 bne.s *
                            	  5946: 
                            	  5947: *        LONG RIGHT
00:000034A8 E298            	  5948:                 ror.l #1,d0
00:000034AA 6100FE5A        	  5949:                 bsr ROx_FLAGS
00:000034AE EA98            	  5950:                 ror.l #5,d0
00:000034B0 6100FE54        	  5951:                 bsr ROx_FLAGS
00:000034B4 EE98            	  5952:                 ror.l #7,d0
00:000034B6 6100FE4E        	  5953:                 bsr ROx_FLAGS
00:000034BA E098            	  5954:                 ror.l #8,d0
00:000034BC 6100FE48        	  5955:                 bsr ROx_FLAGS
00:000034C0 0C8080018FF1    	  5956:                 cmpi.l #$80018FF1,d0
00:000034C6 66FE            	  5957:                 bne.s *
00:000034C8 0C8500000080    	  5958:                 cmpi.l #$00000080,d5
00:000034CE 66FE            	  5959:                 bne.s *
                            	  5960: 
                            	  5961: 
                            	  5962: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5963: 
00:000034D0 7A00            	  5964:                 moveq  #$00000000,d5
00:000034D2 307C0100        	  5965:                 move.l #$00000100,a0
00:000034D6 30BC8FF1        	  5966:                 move.w #$8FF1,(a0)
                            	  5967: 
                            	  5968: *        WORD LEFT
00:000034DA E7D0            	  5969:                 rol (a0)
00:000034DC 6100FE28        	  5970:                 bsr ROx_FLAGS
00:000034E0 E7D0            	  5971:                 rol (a0)
00:000034E2 6100FE22        	  5972:                 bsr ROx_FLAGS
00:000034E6 E7D0            	  5973:                 rol (a0)
00:000034E8 6100FE1C        	  5974:                 bsr ROx_FLAGS
00:000034EC E7D0            	  5975:                 rol (a0)
00:000034EE 6100FE16        	  5976:                 bsr ROx_FLAGS
00:000034F2 3010            	  5977:                 move.w (a0),d0
00:000034F4 0C808001FF18    	  5978:                 cmpi.l #$8001FF18,d0
00:000034FA 66FE            	  5979:                 bne.s *
00:000034FC 0C8500000009    	  5980:                 cmpi.l #$00000009,d5
00:00003502 66FE            	  5981:                 bne.s *
                            	  5982: 
                            	  5983: *        WORD RIGHT
00:00003504 E6D0            	  5984:                 ror (a0)
00:00003506 6100FDFE        	  5985:                 bsr ROx_FLAGS
00:0000350A E6D0            	  5986:                 ror (a0)
00:0000350C 6100FDF8        	  5987:                 bsr ROx_FLAGS
00:00003510 E6D0            	  5988:                 ror (a0)
00:00003512 6100FDF2        	  5989:                 bsr ROx_FLAGS
00:00003516 E6D0            	  5990:                 ror (a0)
00:00003518 6100FDEC        	  5991:                 bsr ROx_FLAGS
00:0000351C E6D0            	  5992:                 ror (a0)
00:0000351E 6100FDE6        	  5993:                 bsr ROx_FLAGS
00:00003522 E6D0            	  5994:                 ror (a0)
00:00003524 6100FDE0        	  5995:                 bsr ROx_FLAGS
00:00003528 3010            	  5996:                 move.w (a0),d0
00:0000352A 0C80800163FC    	  5997:                 cmpi.l #$800163FC,d0
00:00003530 66FE            	  5998:                 bne.s *
00:00003532 0C850000001B    	  5999:                 cmpi.l #$0000001B,d5
00:00003538 66FE            	  6000:                 bne.s *
                            	  6001: 
00:0000353A 4E75            	  6002:                 rts
                            	  6003: 
                            	  6004: 
                            	  6005: 
                            	  6006: *-----------------------------------------------------------
                            	  6007: *-----------------------------------------------------------
                            	  6008: * OPCODE : ROXx
                            	  6009: *-----------------------------------------------------------
                            	  6010: *-----------------------------------------------------------
                            	  6011: 
                            	  6012: *     Subroutine to check and accumulate the flags
00:0000353C 40C3            	  6013: ROXx_FLAGS:     move SR,d3
00:0000353E 02830000000F    	  6014:                 andi.l #$0F,d3            * Isolate flags
00:00003544 DA83            	  6015:                 add.l d3,d5               * Copy flag results into accumulator
00:00003546 4E75            	  6016:                 rts
                            	  6017: 
                            	  6018: op_ROXx:
                            	  6019: 
                            	  6020: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6021: 
                            	  6022: *        BYTE LEFT
00:00003548 203C80018FF1    	  6023:                 move.l #$80018FF1,d0
00:0000354E 7A00            	  6024:                 moveq  #$00000000,d5
00:00003550 7C11            	  6025:                 moveq  #$00000011,d6
                            	  6026: ROXx_LOOP1:
00:00003552 ED30            	  6027:                 roxl.b d6,d0
00:00003554 61E6            	  6028:                 bsr ROXx_FLAGS
00:00003556 51CEFFFA        	  6029:                 dbf d6,ROXx_LOOP1
00:0000355A 0C8080018FD0    	  6030:                 cmpi.l #$80018FD0,d0
00:00003560 66FE            	  6031:                 bne.s *
00:00003562 0C8500000042    	  6032:                 cmpi.l #$00000042,d5
00:00003568 66FE            	  6033:                 bne.s *
                            	  6034: 
                            	  6035: *        BYTE RIGHT
00:0000356A 203C80018FF1    	  6036:                 move.l #$80018FF1,d0
00:00003570 7C12            	  6037:                 moveq  #$00000012,d6
                            	  6038: ROXx_LOOP2:
00:00003572 EC30            	  6039:                 roxr.b d6,d0
00:00003574 61C6            	  6040:                 bsr ROXx_FLAGS
00:00003576 51CEFFFA        	  6041:                 dbf d6,ROXx_LOOP2
00:0000357A 0C8080018F51    	  6042:                 cmpi.l #$80018F51,d0
00:00003580 66FE            	  6043:                 bne.s *
00:00003582 0C850000009C    	  6044:                 cmpi.l #$0000009C,d5
00:00003588 66FE            	  6045:                 bne.s *
                            	  6046: 
                            	  6047: 
                            	  6048: *        WORD LEFT
00:0000358A 203C80018FF1    	  6049:                 move.l #$80018FF1,d0
00:00003590 7C13            	  6050:                 moveq  #$00000013,d6
                            	  6051: ROXx_LOOP3:
00:00003592 ED70            	  6052:                 roxl.w d6,d0
00:00003594 61A6            	  6053:                 bsr ROXx_FLAGS
00:00003596 51CEFFFA        	  6054:                 dbf d6,ROXx_LOOP3
00:0000359A 0C8080013980    	  6055:                 cmpi.l #$80013980,d0
00:000035A0 66FE            	  6056:                 bne.s *
00:000035A2 0C85000000C9    	  6057:                 cmpi.l #$000000C9,d5
00:000035A8 66FE            	  6058:                 bne.s *
                            	  6059: 
                            	  6060: *        WORD RIGHT
00:000035AA 203C80018FF1    	  6061:                 move.l #$80018FF1,d0
00:000035B0 7C1E            	  6062:                 move.l #$0000001E,d6
                            	  6063: ROXx_LOOP4:
00:000035B2 EC70            	  6064:                 roxr.w d6,d0
00:000035B4 6186            	  6065:                 bsr ROXx_FLAGS
00:000035B6 51CEFFFA        	  6066:                 dbf d6,ROXx_LOOP4
00:000035BA 0C8080010A1D    	  6067:                 cmpi.l #$80010A1D,d0
00:000035C0 66FE            	  6068:                 bne.s *
00:000035C2 0C850000014D    	  6069:                 cmpi.l #$0000014D,d5
00:000035C8 66FE            	  6070:                 bne.s *
                            	  6071: 
                            	  6072: 
                            	  6073: *        LONG LEFT
00:000035CA 203C80018FF1    	  6074:                 move.l #$80018FF1,d0
00:000035D0 7C15            	  6075:                 moveq  #$00000015,d6
                            	  6076: ROXx_LOOP5:
00:000035D2 EDB0            	  6077:                 roxl.l d6,d0
00:000035D4 6100FF66        	  6078:                 bsr ROXx_FLAGS
00:000035D8 51CEFFF8        	  6079:                 dbf d6,ROXx_LOOP5
00:000035DC 0C80800185D0    	  6080:                 cmpi.l #$800185D0,d0
00:000035E2 66FE            	  6081:                 bne.s *
00:000035E4 0C85000001A1    	  6082:                 cmpi.l #$000001A1,d5
00:000035EA 66FE            	  6083:                 bne.s *
                            	  6084: 
                            	  6085: *        LONG RIGHT
00:000035EC 203C80018FF1    	  6086:                 move.l #$80018FF1,d0
00:000035F2 7C16            	  6087:                 moveq  #$00000016,d6
                            	  6088: ROXx_LOOP6:
00:000035F4 ECB0            	  6089:                 roxr.l d6,d0
00:000035F6 6100FF44        	  6090:                 bsr ROXx_FLAGS
00:000035FA 51CEFFF8        	  6091:                 dbf d6,ROXx_LOOP6
00:000035FE 0C80082D8200    	  6092:                 cmpi.l #$082D8200,d0
00:00003604 66FE            	  6093:                 bne.s *
00:00003606 0C85000001DE    	  6094:                 cmpi.l #$000001DE,d5
00:0000360C 66FE            	  6095:                 bne.s *
                            	  6096: 
                            	  6097: 
                            	  6098: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6099: 
00:0000360E 203C80018FF1    	  6100:                 move.l #$80018FF1,d0
00:00003614 7A00            	  6101:                 moveq  #$00000000,d5
                            	  6102: 
                            	  6103: *        BYTE LEFT
00:00003616 E310            	  6104:                 roxl.b #1,d0
00:00003618 6100FF22        	  6105:                 bsr ROXx_FLAGS
00:0000361C EB10            	  6106:                 roxl.b #5,d0
00:0000361E 6100FF1C        	  6107:                 bsr ROXx_FLAGS
00:00003622 EF10            	  6108:                 roxl.b #7,d0
00:00003624 6100FF16        	  6109:                 bsr ROXx_FLAGS
00:00003628 E110            	  6110:                 roxl.b #8,d0
00:0000362A 6100FF10        	  6111:                 bsr ROXx_FLAGS
00:0000362E 0C8080018F09    	  6112:                 cmpi.l #$80018F09,d0
00:00003634 66FE            	  6113:                 bne.s *
00:00003636 0C850000000B    	  6114:                 cmpi.l #$0000000B,d5
00:0000363C 66FE            	  6115:                 bne.s *
                            	  6116: 
                            	  6117: *        BYTE RIGHT
00:0000363E E210            	  6118:                 roxr.b #1,d0
00:00003640 6100FEFA        	  6119:                 bsr ROXx_FLAGS
00:00003644 EA10            	  6120:                 roxr.b #5,d0
00:00003646 6100FEF4        	  6121:                 bsr ROXx_FLAGS
00:0000364A EE10            	  6122:                 roxr.b #7,d0
00:0000364C 6100FEEE        	  6123:                 bsr ROXx_FLAGS
00:00003650 E010            	  6124:                 roxr.b #8,d0
00:00003652 6100FEE8        	  6125:                 bsr ROXx_FLAGS
00:00003656 0C8080018F00    	  6126:                 cmpi.l #$80018F00,d0
00:0000365C 66FE            	  6127:                 bne.s *
00:0000365E 0C8500000015    	  6128:                 cmpi.l #$00000015,d5
00:00003664 66FE            	  6129:                 bne.s *
                            	  6130: 
                            	  6131: *        WORD LEFT
00:00003666 E350            	  6132:                 roxl.w #1,d0
00:00003668 6100FED2        	  6133:                 bsr ROXx_FLAGS
00:0000366C EB50            	  6134:                 roxl.w #5,d0
00:0000366E 6100FECC        	  6135:                 bsr ROXx_FLAGS
00:00003672 EF50            	  6136:                 roxl.w #7,d0
00:00003674 6100FEC6        	  6137:                 bsr ROXx_FLAGS
00:00003678 E150            	  6138:                 roxl.w #8,d0
00:0000367A 6100FEC0        	  6139:                 bsr ROXx_FLAGS
00:0000367E 0C808001B000    	  6140:                 cmpi.l #$8001B000,d0
00:00003684 66FE            	  6141:                 bne.s *
00:00003686 0C8500000027    	  6142:                 cmpi.l #$00000027,d5
00:0000368C 66FE            	  6143:                 bne.s *
                            	  6144: 
                            	  6145: *        WORD RIGHT
00:0000368E E250            	  6146:                 roxr.w #1,d0
00:00003690 6100FEAA        	  6147:                 bsr ROXx_FLAGS
00:00003694 EA50            	  6148:                 roxr.w #5,d0
00:00003696 6100FEA4        	  6149:                 bsr ROXx_FLAGS
00:0000369A EE50            	  6150:                 roxr.w #7,d0
00:0000369C 6100FE9E        	  6151:                 bsr ROXx_FLAGS
00:000036A0 E050            	  6152:                 roxr.w #8,d0
00:000036A2 6100FE98        	  6153:                 bsr ROXx_FLAGS
00:000036A6 0C8080010A00    	  6154:                 cmpi.l #$80010A00,d0
00:000036AC 66FE            	  6155:                 bne.s *
00:000036AE 0C8500000028    	  6156:                 cmpi.l #$00000028,d5
00:000036B4 66FE            	  6157:                 bne.s *
                            	  6158: 
                            	  6159: *        LONG LEFT
00:000036B6 E390            	  6160:                 roxl.l #1,d0
00:000036B8 6100FE82        	  6161:                 bsr ROXx_FLAGS
00:000036BC EB90            	  6162:                 roxl.l #5,d0
00:000036BE 6100FE7C        	  6163:                 bsr ROXx_FLAGS
00:000036C2 EF90            	  6164:                 roxl.l #7,d0
00:000036C4 6100FE76        	  6165:                 bsr ROXx_FLAGS
00:000036C8 E190            	  6166:                 roxl.l #8,d0
00:000036CA 6100FE70        	  6167:                 bsr ROXx_FLAGS
00:000036CE 0C8040000010    	  6168:                 cmpi.l #$40000010,d0
00:000036D4 66FE            	  6169:                 bne.s *
00:000036D6 0C850000002A    	  6170:                 cmpi.l #$0000002A,d5
00:000036DC 66FE            	  6171:                 bne.s *
                            	  6172: 
                            	  6173: *        LONG RIGHT
00:000036DE E290            	  6174:                 roxr.l #1,d0
00:000036E0 6100FE5A        	  6175:                 bsr ROXx_FLAGS
00:000036E4 EA90            	  6176:                 roxr.l #5,d0
00:000036E6 6100FE54        	  6177:                 bsr ROXx_FLAGS
00:000036EA EE90            	  6178:                 roxr.l #7,d0
00:000036EC 6100FE4E        	  6179:                 bsr ROXx_FLAGS
00:000036F0 E090            	  6180:                 roxr.l #8,d0
00:000036F2 6100FE48        	  6181:                 bsr ROXx_FLAGS
00:000036F6 0C8000010200    	  6182:                 cmpi.l #$00010200,d0
00:000036FC 66FE            	  6183:                 bne.s *
00:000036FE 0C8500000032    	  6184:                 cmpi.l #$00000032,d5
00:00003704 66FE            	  6185:                 bne.s *
                            	  6186: 
                            	  6187: 
                            	  6188: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6189: 
00:00003706 7A00            	  6190:                 moveq  #$00000000,d5
00:00003708 307C0100        	  6191:                 move.l #$00000100,a0
00:0000370C 30BC8FF1        	  6192:                 move.w #$8FF1,(a0)
                            	  6193: 
                            	  6194: *        WORD LEFT
00:00003710 E5D0            	  6195:                 roxl (a0)
00:00003712 6100FE28        	  6196:                 bsr ROXx_FLAGS
00:00003716 E5D0            	  6197:                 roxl (a0)
00:00003718 6100FE22        	  6198:                 bsr ROXx_FLAGS
00:0000371C E5D0            	  6199:                 roxl (a0)
00:0000371E 6100FE1C        	  6200:                 bsr ROXx_FLAGS
00:00003722 E5D0            	  6201:                 roxl (a0)
00:00003724 6100FE16        	  6202:                 bsr ROXx_FLAGS
00:00003728 3010            	  6203:                 move.w (a0),d0
00:0000372A 0C800001FF10    	  6204:                 cmpi.l #$0001FF10,d0
00:00003730 66FE            	  6205:                 bne.s *
00:00003732 0C8500000009    	  6206:                 cmpi.l #$00000009,d5
00:00003738 66FE            	  6207:                 bne.s *
                            	  6208: 
                            	  6209: *        WORD RIGHT
00:0000373A E4D0            	  6210:                 roxr (a0)
00:0000373C 6100FDFE        	  6211:                 bsr ROXx_FLAGS
00:00003740 E4D0            	  6212:                 roxr (a0)
00:00003742 6100FDF8        	  6213:                 bsr ROXx_FLAGS
00:00003746 E4D0            	  6214:                 roxr (a0)
00:00003748 6100FDF2        	  6215:                 bsr ROXx_FLAGS
00:0000374C E4D0            	  6216:                 roxr (a0)
00:0000374E 6100FDEC        	  6217:                 bsr ROXx_FLAGS
00:00003752 E4D0            	  6218:                 roxr (a0)
00:00003754 6100FDE6        	  6219:                 bsr ROXx_FLAGS
00:00003758 E4D0            	  6220:                 roxr (a0)
00:0000375A 6100FDE0        	  6221:                 bsr ROXx_FLAGS
00:0000375E 3010            	  6222:                 move.w (a0),d0
00:00003760 0C80000103FC    	  6223:                 cmpi.l #$000103FC,d0
00:00003766 66FE            	  6224:                 bne.s *
00:00003768 0C850000000A    	  6225:                 cmpi.l #$0000000A,d5
00:0000376E 66FE            	  6226:                 bne.s *
                            	  6227: 
00:00003770 4E75            	  6228:                 rts
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: 
                            	  6233: *-----------------------------------------------------------
                            	  6234: *-----------------------------------------------------------
                            	  6235: * OPCODE : SHIFTS
                            	  6236: *-----------------------------------------------------------
                            	  6237: *-----------------------------------------------------------
                            	  6238: 
                            	  6239: *     Subroutine to check and accumulate the flags
00:00003772 40C3            	  6240: SHIFTS_FLAGS:   move SR,d3
00:00003774 02830000000F    	  6241:                 andi.l #$0F,d3            * Isolate flags
00:0000377A DA83            	  6242:                 add.l d3,d5               * Copy flag results into accumulator
00:0000377C 4E75            	  6243:                 rts
                            	  6244: 
                            	  6245: op_SHIFTS:
                            	  6246: 
                            	  6247: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6248: 
                            	  6249: *        BYTE LEFT
00:0000377E 203C80018F81    	  6250:                 move.l #$80018F81,d0
00:00003784 7A00            	  6251:                 moveq  #$00000000,d5
00:00003786 7C02            	  6252:                 moveq  #$00000002,d6
                            	  6253: SHIFTS_LOOP1:
00:00003788 ED20            	  6254:                 asl.b d6,d0
00:0000378A 61E6            	  6255:                 bsr SHIFTS_FLAGS
00:0000378C 51CEFFFA        	  6256:                 dbf d6,SHIFTS_LOOP1
00:00003790 0C8080018F08    	  6257:                 cmpi.l #$80018F08,d0
00:00003796 66FE            	  6258:                 bne.s *
00:00003798 0C8500000002    	  6259:                 cmpi.l #$00000002,d5
00:0000379E 66FE            	  6260:                 bne.s *
                            	  6261: 
                            	  6262: *        BYTE RIGHT
00:000037A0 203C80018F81    	  6263:                 move.l #$80018F81,d0
00:000037A6 7C02            	  6264:                 moveq  #$00000002,d6
                            	  6265: SHIFTS_LOOP2:
00:000037A8 EC20            	  6266:                 asr.b d6,d0
00:000037AA 61C6            	  6267:                 bsr SHIFTS_FLAGS
00:000037AC 51CEFFFA        	  6268:                 dbf d6,SHIFTS_LOOP2
00:000037B0 0C8080018FF0    	  6269:                 cmpi.l #$80018FF0,d0
00:000037B6 66FE            	  6270:                 bne.s *
00:000037B8 0C850000001A    	  6271:                 cmpi.l #$0000001A,d5
00:000037BE 66FE            	  6272:                 bne.s *
                            	  6273: 
                            	  6274: 
                            	  6275: *        WORD LEFT
00:000037C0 203C80018FF1    	  6276:                 move.l #$80018FF1,d0
00:000037C6 7C02            	  6277:                 moveq  #$00000002,d6
                            	  6278: SHIFTS_LOOP3:
00:000037C8 ED60            	  6279:                 asl.w d6,d0
00:000037CA 61A6            	  6280:                 bsr SHIFTS_FLAGS
00:000037CC 51CEFFFA        	  6281:                 dbf d6,SHIFTS_LOOP3
00:000037D0 0C8080017F88    	  6282:                 cmpi.l #$80017F88,d0
00:000037D6 66FE            	  6283:                 bne.s *
00:000037D8 0C850000001C    	  6284:                 cmpi.l #$0000001C,d5
00:000037DE 66FE            	  6285:                 bne.s *
                            	  6286: 
                            	  6287: *        WORD RIGHT
00:000037E0 203C80018FF1    	  6288:                 move.l #$80018FF1,d0
00:000037E6 7C02            	  6289:                 moveq  #$00000002,d6
                            	  6290: SHIFTS_LOOP4:
00:000037E8 EC60            	  6291:                 asr.w d6,d0
00:000037EA 6186            	  6292:                 bsr SHIFTS_FLAGS
00:000037EC 51CEFFFA        	  6293:                 dbf d6,SHIFTS_LOOP4
00:000037F0 0C808001F1FE    	  6294:                 cmpi.l #$8001F1FE,d0
00:000037F6 66FE            	  6295:                 bne.s *
00:000037F8 0C8500000034    	  6296:                 cmpi.l #$00000034,d5
00:000037FE 66FE            	  6297:                 bne.s *
                            	  6298: 
                            	  6299: 
                            	  6300: *        LONG LEFT
00:00003800 203C80018FF1    	  6301:                 move.l #$80018FF1,d0
00:00003806 7C02            	  6302:                 moveq  #$00000002,d6
                            	  6303: SHIFTS_LOOP5:
00:00003808 EDA0            	  6304:                 asl.l d6,d0
00:0000380A 6100FF66        	  6305:                 bsr SHIFTS_FLAGS
00:0000380E 51CEFFF8        	  6306:                 dbf d6,SHIFTS_LOOP5
00:00003812 0C80000C7F88    	  6307:                 cmpi.l #$000C7F88,d0
00:00003818 66FE            	  6308:                 bne.s *
00:0000381A 0C8500000036    	  6309:                 cmpi.l #$00000036,d5
00:00003820 66FE            	  6310:                 bne.s *
                            	  6311: 
                            	  6312: *        LONG RIGHT
00:00003822 203C80018FF1    	  6313:                 move.l #$80018FF1,d0
00:00003828 7C02            	  6314:                 moveq  #$00000002,d6
                            	  6315: SHIFTS_LOOP6:
00:0000382A ECA0            	  6316:                 asr.l d6,d0
00:0000382C 6100FF44        	  6317:                 bsr SHIFTS_FLAGS
00:00003830 51CEFFF8        	  6318:                 dbf d6,SHIFTS_LOOP6
00:00003834 0C80F00031FE    	  6319:                 cmpi.l #$F00031FE,d0
00:0000383A 66FE            	  6320:                 bne.s *
00:0000383C 0C850000004E    	  6321:                 cmpi.l #$0000004E,d5
00:00003842 66FE            	  6322:                 bne.s *
                            	  6323: 
                            	  6324: 
                            	  6325: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6326: 
00:00003844 203C80018FF1    	  6327:                 move.l #$80018FF1,d0
00:0000384A 7A00            	  6328:                 moveq  #$00000000,d5
                            	  6329: 
                            	  6330: *        BYTE LEFT
00:0000384C D000            	  6331:                 asl.b #1,d0
00:0000384E 6100FF22        	  6332:                 bsr SHIFTS_FLAGS
00:00003852 E500            	  6333:                 asl.b #2,d0
00:00003854 6100FF1C        	  6334:                 bsr SHIFTS_FLAGS
00:00003858 D000            	  6335:                 asl.b #1,d0
00:0000385A 6100FF16        	  6336:                 bsr SHIFTS_FLAGS
00:0000385E E700            	  6337:                 asl.b #3,d0
00:00003860 6100FF10        	  6338:                 bsr SHIFTS_FLAGS
00:00003864 0C8080018F80    	  6339:                 cmpi.l #$80018F80,d0
00:0000386A 66FE            	  6340:                 bne.s *
00:0000386C 0C850000001F    	  6341:                 cmpi.l #$0000001F,d5
00:00003872 66FE            	  6342:                 bne.s *
                            	  6343: 
                            	  6344: *        BYTE RIGHT
00:00003874 E200            	  6345:                 asr.b #1,d0
00:00003876 6100FEFA        	  6346:                 bsr SHIFTS_FLAGS
00:0000387A E400            	  6347:                 asr.b #2,d0
00:0000387C 6100FEF4        	  6348:                 bsr SHIFTS_FLAGS
00:00003880 E600            	  6349:                 asr.b #3,d0
00:00003882 6100FEEE        	  6350:                 bsr SHIFTS_FLAGS
00:00003886 E200            	  6351:                 asr.b #1,d0
00:00003888 6100FEE8        	  6352:                 bsr SHIFTS_FLAGS
00:0000388C 0C8080018FFF    	  6353:                 cmpi.l #$80018FFF,d0
00:00003892 66FE            	  6354:                 bne.s *
00:00003894 0C850000003F    	  6355:                 cmpi.l #$0000003F,d5
00:0000389A 66FE            	  6356:                 bne.s *
                            	  6357: 
                            	  6358: *        WORD LEFT
00:0000389C D040            	  6359:                 asl.w #1,d0
00:0000389E 6100FED2        	  6360:                 bsr SHIFTS_FLAGS
00:000038A2 E540            	  6361:                 asl.w #2,d0
00:000038A4 6100FECC        	  6362:                 bsr SHIFTS_FLAGS
00:000038A8 E740            	  6363:                 asl.w #3,d0
00:000038AA 6100FEC6        	  6364:                 bsr SHIFTS_FLAGS
00:000038AE EB40            	  6365:                 asl.w #5,d0
00:000038B0 6100FEC0        	  6366:                 bsr SHIFTS_FLAGS
00:000038B4 0C808001F800    	  6367:                 cmpi.l #$8001F800,d0
00:000038BA 66FE            	  6368:                 bne.s *
00:000038BC 0C8500000056    	  6369:                 cmpi.l #$00000056,d5
00:000038C2 66FE            	  6370:                 bne.s *
                            	  6371: 
                            	  6372: *        WORD RIGHT
00:000038C4 EA40            	  6373:                 asr.w #5,d0
00:000038C6 6100FEAA        	  6374:                 bsr SHIFTS_FLAGS
00:000038CA E240            	  6375:                 asr.w #1,d0
00:000038CC 6100FEA4        	  6376:                 bsr SHIFTS_FLAGS
00:000038D0 E440            	  6377:                 asr.w #2,d0
00:000038D2 6100FE9E        	  6378:                 bsr SHIFTS_FLAGS
00:000038D6 E840            	  6379:                 asr.w #4,d0
00:000038D8 6100FE98        	  6380:                 bsr SHIFTS_FLAGS
00:000038DC 0C808001FFFF    	  6381:                 cmpi.l #$8001FFFF,d0
00:000038E2 66FE            	  6382:                 bne.s *
00:000038E4 0C8500000077    	  6383:                 cmpi.l #$00000077,d5
00:000038EA 66FE            	  6384:                 bne.s *
                            	  6385: 
                            	  6386: *        LONG LEFT
00:000038EC 203C80018FF1    	  6387:                 move.l #$80018FF1,d0
00:000038F2 D080            	  6388:                 asl.l #1,d0
00:000038F4 6100FE7C        	  6389:                 bsr SHIFTS_FLAGS
00:000038F8 E580            	  6390:                 asl.l #2,d0
00:000038FA 6100FE76        	  6391:                 bsr SHIFTS_FLAGS
00:000038FE EF80            	  6392:                 asl.l #7,d0
00:00003900 6100FE70        	  6393:                 bsr SHIFTS_FLAGS
00:00003904 E980            	  6394:                 asl.l #4,d0
00:00003906 6100FE6A        	  6395:                 bsr SHIFTS_FLAGS
00:0000390A 0C8063FC4000    	  6396:                 cmpi.l #$63FC4000,d0
00:00003910 66FE            	  6397:                 bne.s *
00:00003912 0C850000007A    	  6398:                 cmpi.l #$0000007A,d5
00:00003918 66FE            	  6399:                 bne.s *
                            	  6400: 
                            	  6401: *        LONG RIGHT
00:0000391A 203C80018FF1    	  6402:                 move.l #$80018FF1,d0
00:00003920 E280            	  6403:                 asr.l #1,d0
00:00003922 6100FE4E        	  6404:                 bsr SHIFTS_FLAGS
00:00003926 EA80            	  6405:                 asr.l #5,d0
00:00003928 6100FE48        	  6406:                 bsr SHIFTS_FLAGS
00:0000392C EE80            	  6407:                 asr.l #7,d0
00:0000392E 6100FE42        	  6408:                 bsr SHIFTS_FLAGS
00:00003932 E080            	  6409:                 asr.l #8,d0
00:00003934 6100FE3C        	  6410:                 bsr SHIFTS_FLAGS
00:00003938 0C80FFFFFC00    	  6411:                 cmpi.l #$FFFFFC00,d0
00:0000393E 66FE            	  6412:                 bne.s *
00:00003940 0C850000009C    	  6413:                 cmpi.l #$0000009C,d5
00:00003946 66FE            	  6414:                 bne.s *
                            	  6415: 
                            	  6416: 
                            	  6417: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6418: 
00:00003948 7A00            	  6419:                 moveq  #$00000000,d5
00:0000394A 307C0100        	  6420:                 move.l #$00000100,a0
00:0000394E 30BC8FF1        	  6421:                 move.w #$8FF1,(a0)
                            	  6422: 
                            	  6423: *        WORD LEFT
00:00003952 E1D0            	  6424:                 asl  (a0)
00:00003954 6100FE1C        	  6425:                 bsr SHIFTS_FLAGS
00:00003958 E1D0            	  6426:                 asl  (a0)
00:0000395A 6100FE16        	  6427:                 bsr SHIFTS_FLAGS
00:0000395E E1D0            	  6428:                 asl  (a0)
00:00003960 6100FE10        	  6429:                 bsr SHIFTS_FLAGS
00:00003964 E1D0            	  6430:                 asl  (a0)
00:00003966 6100FE0A        	  6431:                 bsr SHIFTS_FLAGS
00:0000396A 3010            	  6432:                 move.w (a0),d0
00:0000396C 0C80FFFFFF10    	  6433:                 cmpi.l #$FFFFFF10,d0
00:00003972 66FE            	  6434:                 bne.s *
00:00003974 0C850000000D    	  6435:                 cmpi.l #$0000000D,d5
00:0000397A 66FE            	  6436:                 bne.s *
                            	  6437: 
                            	  6438: *        WORD RIGHT
00:0000397C E0D0            	  6439:                 asr (a0)
00:0000397E 6100FDF2        	  6440:                 bsr SHIFTS_FLAGS
00:00003982 E0D0            	  6441:                 asr (a0)
00:00003984 6100FDEC        	  6442:                 bsr SHIFTS_FLAGS
00:00003988 E0D0            	  6443:                 asr (a0)
00:0000398A 6100FDE6        	  6444:                 bsr SHIFTS_FLAGS
00:0000398E E0D0            	  6445:                 asr (a0)
00:00003990 6100FDE0        	  6446:                 bsr SHIFTS_FLAGS
00:00003994 E0D0            	  6447:                 asr (a0)
00:00003996 6100FDDA        	  6448:                 bsr SHIFTS_FLAGS
00:0000399A E0D0            	  6449:                 asr (a0)
00:0000399C 6100FDD4        	  6450:                 bsr SHIFTS_FLAGS
00:000039A0 3010            	  6451:                 move.w (a0),d0
00:000039A2 0C80FFFFFFFC    	  6452:                 cmpi.l #$FFFFFFFC,d0
00:000039A8 66FE            	  6453:                 bne.s *
00:000039AA 0C850000003E    	  6454:                 cmpi.l #$0000003E,d5
00:000039B0 66FE            	  6455:                 bne.s *
                            	  6456: 
00:000039B2 4E75            	  6457:                 rts
                            	  6458: 
                            	  6459: 
                            	  6460: 
                            	  6461: *-----------------------------------------------------------
                            	  6462: *-----------------------------------------------------------
                            	  6463: * OPCODE : SHIFTS2
                            	  6464: *-----------------------------------------------------------
                            	  6465: *-----------------------------------------------------------
                            	  6466: 
                            	  6467: *     Subroutine to check and accumulate the flags
00:000039B4 40C3            	  6468: SHIFTS2_FLAGS:  move SR,d3
00:000039B6 02830000000F    	  6469:                 andi.l #$0F,d3            * Isolate flags
00:000039BC DA83            	  6470:                 add.l d3,d5               * Copy flag results into accumulator
00:000039BE 4E75            	  6471:                 rts
                            	  6472: 
                            	  6473: op_SHIFTS2:
                            	  6474: 
                            	  6475: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6476: 
                            	  6477: *        BYTE LEFT
00:000039C0 203C80018F81    	  6478:                 move.l #$80018F81,d0
00:000039C6 7A00            	  6479:                 moveq  #$00000000,d5
00:000039C8 7C02            	  6480:                 moveq  #$00000002,d6
                            	  6481: SHIFTS2_LOOP1:
00:000039CA ED28            	  6482:                 lsl.b d6,d0
00:000039CC 61E6            	  6483:                 bsr SHIFTS2_FLAGS
00:000039CE 51CEFFFA        	  6484:                 dbf d6,SHIFTS2_LOOP1
00:000039D2 0C8080018F08    	  6485:                 cmpi.l #$80018F08,d0
00:000039D8 66FE            	  6486:                 bne.s *
00:000039DA 4A85            	  6487:                 cmpi.l #$00000000,d5
00:000039DC 66FE            	  6488:                 bne.s *
                            	  6489: 
                            	  6490: *        BYTE RIGHT
00:000039DE 203C80018F81    	  6491:                 move.l #$80018F81,d0
00:000039E4 7C02            	  6492:                 moveq  #$00000002,d6
                            	  6493: SHIFTS2_LOOP2:
00:000039E6 EC28            	  6494:                 lsr.b d6,d0
00:000039E8 61CA            	  6495:                 bsr SHIFTS2_FLAGS
00:000039EA 51CEFFFA        	  6496:                 dbf d6,SHIFTS2_LOOP2
00:000039EE 0C8080018F10    	  6497:                 cmpi.l #$80018F10,d0
00:000039F4 66FE            	  6498:                 bne.s *
00:000039F6 4A85            	  6499:                 cmpi.l #$00000000,d5
00:000039F8 66FE            	  6500:                 bne.s *
                            	  6501: 
                            	  6502: 
                            	  6503: *        WORD LEFT
00:000039FA 203C80018FF1    	  6504:                 move.l #$80018FF1,d0
00:00003A00 7C02            	  6505:                 moveq  #$00000002,d6
                            	  6506: SHIFTS2_LOOP3:
00:00003A02 ED68            	  6507:                 lsl.w d6,d0
00:00003A04 61AE            	  6508:                 bsr SHIFTS2_FLAGS
00:00003A06 51CEFFFA        	  6509:                 dbf d6,SHIFTS2_LOOP3
00:00003A0A 0C8080017F88    	  6510:                 cmpi.l #$80017F88,d0
00:00003A10 66FE            	  6511:                 bne.s *
00:00003A12 4A85            	  6512:                 cmpi.l #$00000000,d5
00:00003A14 66FE            	  6513:                 bne.s *
                            	  6514: 
                            	  6515: *        WORD RIGHT
00:00003A16 203C80018FF1    	  6516:                 move.l #$80018FF1,d0
00:00003A1C 7C02            	  6517:                 moveq  #$00000002,d6
                            	  6518: SHIFTS2_LOOP4:
00:00003A1E EC68            	  6519:                 lsr.w d6,d0
00:00003A20 6192            	  6520:                 bsr SHIFTS2_FLAGS
00:00003A22 51CEFFFA        	  6521:                 dbf d6,SHIFTS2_LOOP4
00:00003A26 0C80800111FE    	  6522:                 cmpi.l #$800111FE,d0
00:00003A2C 66FE            	  6523:                 bne.s *
00:00003A2E 4A85            	  6524:                 cmpi.l #$00000000,d5
00:00003A30 66FE            	  6525:                 bne.s *
                            	  6526: 
                            	  6527: 
                            	  6528: *        LONG LEFT
00:00003A32 203C80018FF1    	  6529:                 move.l #$80018FF1,d0
00:00003A38 7C02            	  6530:                 moveq  #$00000002,d6
                            	  6531: SHIFTS2_LOOP5:
00:00003A3A EDA8            	  6532:                 lsl.l d6,d0
00:00003A3C 6100FF76        	  6533:                 bsr SHIFTS2_FLAGS
00:00003A40 51CEFFF8        	  6534:                 dbf d6,SHIFTS2_LOOP5
00:00003A44 0C80000C7F88    	  6535:                 cmpi.l #$000C7F88,d0
00:00003A4A 66FE            	  6536:                 bne.s *
00:00003A4C 4A85            	  6537:                 cmpi.l #$00000000,d5
00:00003A4E 66FE            	  6538:                 bne.s *
                            	  6539: 
                            	  6540: *        LONG RIGHT
00:00003A50 203C80018FF1    	  6541:                 move.l #$80018FF1,d0
00:00003A56 7C02            	  6542:                 moveq  #$00000002,d6
                            	  6543: SHIFTS2_LOOP6:
00:00003A58 ECA8            	  6544:                 lsr.l d6,d0
00:00003A5A 6100FF58        	  6545:                 bsr SHIFTS2_FLAGS
00:00003A5E 51CEFFF8        	  6546:                 dbf d6,SHIFTS2_LOOP6
00:00003A62 0C80100031FE    	  6547:                 cmpi.l #$100031FE,d0
00:00003A68 66FE            	  6548:                 bne.s *
00:00003A6A 4A85            	  6549:                 cmpi.l #$00000000,d5
00:00003A6C 66FE            	  6550:                 bne.s *
                            	  6551: 
                            	  6552: 
                            	  6553: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6554: 
00:00003A6E 203C80018FF1    	  6555:                 move.l #$80018FF1,d0
00:00003A74 7A00            	  6556:                 moveq  #$00000000,d5
                            	  6557: 
                            	  6558: *        BYTE LEFT
00:00003A76 E308            	  6559:                 lsl.b #1,d0
00:00003A78 6100FF3A        	  6560:                 bsr SHIFTS2_FLAGS
00:00003A7C E508            	  6561:                 lsl.b #2,d0
00:00003A7E 6100FF34        	  6562:                 bsr SHIFTS2_FLAGS
00:00003A82 E308            	  6563:                 lsl.b #1,d0
00:00003A84 6100FF2E        	  6564:                 bsr SHIFTS2_FLAGS
00:00003A88 E708            	  6565:                 lsl.b #3,d0
00:00003A8A 6100FF28        	  6566:                 bsr SHIFTS2_FLAGS
00:00003A8E 0C8080018F80    	  6567:                 cmpi.l #$80018F80,d0
00:00003A94 66FE            	  6568:                 bne.s *
00:00003A96 0C850000001B    	  6569:                 cmpi.l #$0000001B,d5
00:00003A9C 66FE            	  6570:                 bne.s *
                            	  6571: 
                            	  6572: *        BYTE RIGHT
00:00003A9E E208            	  6573:                 lsr.b #1,d0
00:00003AA0 6100FF12        	  6574:                 bsr SHIFTS2_FLAGS
00:00003AA4 E408            	  6575:                 lsr.b #2,d0
00:00003AA6 6100FF0C        	  6576:                 bsr SHIFTS2_FLAGS
00:00003AAA E608            	  6577:                 lsr.b #3,d0
00:00003AAC 6100FF06        	  6578:                 bsr SHIFTS2_FLAGS
00:00003AB0 E208            	  6579:                 lsr.b #1,d0
00:00003AB2 6100FF00        	  6580:                 bsr SHIFTS2_FLAGS
00:00003AB6 0C8080018F01    	  6581:                 cmpi.l #$80018F01,d0
00:00003ABC 66FE            	  6582:                 bne.s *
00:00003ABE 0C850000001B    	  6583:                 cmpi.l #$0000001B,d5
00:00003AC4 66FE            	  6584:                 bne.s *
                            	  6585: 
                            	  6586: *        WORD LEFT
00:00003AC6 E348            	  6587:                 lsl.w #1,d0
00:00003AC8 6100FEEA        	  6588:                 bsr SHIFTS2_FLAGS
00:00003ACC E548            	  6589:                 lsl.w #2,d0
00:00003ACE 6100FEE4        	  6590:                 bsr SHIFTS2_FLAGS
00:00003AD2 E748            	  6591:                 lsl.w #3,d0
00:00003AD4 6100FEDE        	  6592:                 bsr SHIFTS2_FLAGS
00:00003AD8 EB48            	  6593:                 lsl.w #5,d0
00:00003ADA 6100FED8        	  6594:                 bsr SHIFTS2_FLAGS
00:00003ADE 0C8080010800    	  6595:                 cmpi.l #$80010800,d0
00:00003AE4 66FE            	  6596:                 bne.s *
00:00003AE6 0C8500000025    	  6597:                 cmpi.l #$00000025,d5
00:00003AEC 66FE            	  6598:                 bne.s *
                            	  6599: 
                            	  6600: *        WORD RIGHT
00:00003AEE EA48            	  6601:                 lsr.w #5,d0
00:00003AF0 6100FEC2        	  6602:                 bsr SHIFTS2_FLAGS
00:00003AF4 E248            	  6603:                 lsr.w #1,d0
00:00003AF6 6100FEBC        	  6604:                 bsr SHIFTS2_FLAGS
00:00003AFA E448            	  6605:                 lsr.w #2,d0
00:00003AFC 6100FEB6        	  6606:                 bsr SHIFTS2_FLAGS
00:00003B00 E848            	  6607:                 lsr.w #4,d0
00:00003B02 6100FEB0        	  6608:                 bsr SHIFTS2_FLAGS
00:00003B06 0C8080010000    	  6609:                 cmpi.l #$80010000,d0
00:00003B0C 66FE            	  6610:                 bne.s *
00:00003B0E 0C850000002A    	  6611:                 cmpi.l #$0000002A,d5
00:00003B14 66FE            	  6612:                 bne.s *
                            	  6613: 
                            	  6614: *        LONG LEFT
00:00003B16 203C80018FF1    	  6615:                 move.l #$80018FF1,d0
00:00003B1C E388            	  6616:                 lsl.l #1,d0
00:00003B1E 6100FE94        	  6617:                 bsr SHIFTS2_FLAGS
00:00003B22 E588            	  6618:                 lsl.l #2,d0
00:00003B24 6100FE8E        	  6619:                 bsr SHIFTS2_FLAGS
00:00003B28 EF88            	  6620:                 lsl.l #7,d0
00:00003B2A 6100FE88        	  6621:                 bsr SHIFTS2_FLAGS
00:00003B2E E988            	  6622:                 lsl.l #4,d0
00:00003B30 6100FE82        	  6623:                 bsr SHIFTS2_FLAGS
00:00003B34 0C8063FC4000    	  6624:                 cmpi.l #$63FC4000,d0
00:00003B3A 66FE            	  6625:                 bne.s *
00:00003B3C 0C850000002B    	  6626:                 cmpi.l #$0000002B,d5
00:00003B42 66FE            	  6627:                 bne.s *
                            	  6628: 
                            	  6629: *        LONG RIGHT
00:00003B44 203C80018FF1    	  6630:                 move.l #$80018FF1,d0
00:00003B4A E288            	  6631:                 lsr.l #1,d0
00:00003B4C 6100FE66        	  6632:                 bsr SHIFTS2_FLAGS
00:00003B50 EA88            	  6633:                 lsr.l #5,d0
00:00003B52 6100FE60        	  6634:                 bsr SHIFTS2_FLAGS
00:00003B56 EE88            	  6635:                 lsr.l #7,d0
00:00003B58 6100FE5A        	  6636:                 bsr SHIFTS2_FLAGS
00:00003B5C E088            	  6637:                 lsr.l #8,d0
00:00003B5E 6100FE54        	  6638:                 bsr SHIFTS2_FLAGS
00:00003B62 0C8000000400    	  6639:                 cmpi.l #$00000400,d0
00:00003B68 66FE            	  6640:                 bne.s *
00:00003B6A 0C850000002D    	  6641:                 cmpi.l #$0000002D,d5
00:00003B70 66FE            	  6642:                 bne.s *
                            	  6643: 
                            	  6644: 
                            	  6645: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6646: 
00:00003B72 7A00            	  6647:                 moveq  #$00000000,d5
00:00003B74 307C0100        	  6648:                 move.l #$00000100,a0
00:00003B78 30BC8FF1        	  6649:                 move.w #$8FF1,(a0)
                            	  6650: 
                            	  6651: *        WORD LEFT
00:00003B7C E3D0            	  6652:                 lsl  (a0)
00:00003B7E 6100FE34        	  6653:                 bsr SHIFTS2_FLAGS
00:00003B82 E3D0            	  6654:                 lsl  (a0)
00:00003B84 6100FE2E        	  6655:                 bsr SHIFTS2_FLAGS
00:00003B88 E3D0            	  6656:                 lsl  (a0)
00:00003B8A 6100FE28        	  6657:                 bsr SHIFTS2_FLAGS
00:00003B8E E3D0            	  6658:                 lsl  (a0)
00:00003B90 6100FE22        	  6659:                 bsr SHIFTS2_FLAGS
00:00003B94 3010            	  6660:                 move.w (a0),d0
00:00003B96 0C800000FF10    	  6661:                 cmpi.l #$0000FF10,d0
00:00003B9C 66FE            	  6662:                 bne.s *
00:00003B9E 0C8500000009    	  6663:                 cmpi.l #$00000009,d5
00:00003BA4 66FE            	  6664:                 bne.s *
                            	  6665: 
                            	  6666: *        WORD RIGHT
00:00003BA6 E2D0            	  6667:                 lsr (a0)
00:00003BA8 6100FE0A        	  6668:                 bsr SHIFTS2_FLAGS
00:00003BAC E2D0            	  6669:                 lsr (a0)
00:00003BAE 6100FE04        	  6670:                 bsr SHIFTS2_FLAGS
00:00003BB2 E2D0            	  6671:                 lsr (a0)
00:00003BB4 6100FDFE        	  6672:                 bsr SHIFTS2_FLAGS
00:00003BB8 E2D0            	  6673:                 lsr (a0)
00:00003BBA 6100FDF8        	  6674:                 bsr SHIFTS2_FLAGS
00:00003BBE E2D0            	  6675:                 lsr (a0)
00:00003BC0 6100FDF2        	  6676:                 bsr SHIFTS2_FLAGS
00:00003BC4 E2D0            	  6677:                 lsr (a0)
00:00003BC6 6100FDEC        	  6678:                 bsr SHIFTS2_FLAGS
00:00003BCA 3010            	  6679:                 move.w (a0),d0
00:00003BCC 0C80000003FC    	  6680:                 cmpi.l #$000003FC,d0
00:00003BD2 66FE            	  6681:                 bne.s *
00:00003BD4 0C850000000A    	  6682:                 cmpi.l #$0000000A,d5
00:00003BDA 66FE            	  6683:                 bne.s *
                            	  6684: 
00:00003BDC 4E75            	  6685:                 rts
                            	  6686: 
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ; OPCODE : BSR / RTS
                            	  6690: ;-----------------------------------------------------------
                            	  6691: ;-----------------------------------------------------------
                            	  6692: 
                            	  6693: ;t3_bsr:
                            	  6694: ;	moveq	#3,d3
                            	  6695: ;	rts
                            	  6696: 
                            	  6697: ;t1_bsr:
                            	  6698: ;	moveq	#1,d1
                            	  6699: ;	rts
                            	  6700: 
                            	  6701: ;op_bsr:
                            	  6702: ;	bsr			t1_bsr
                            	  6703: ;	bsr			t2_bsr
                            	  6704: ;	bsr.w		t3_bsr
                            	  6705: ;	bsr.w		t4_bsr
                            	  6706: ;	cmpi.l	#1,d1
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#2,d2
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#3,d3
                            	  6711: ;	bne			*
                            	  6712: ;	cmpi.l	#4,d4
                            	  6713: ;	bne			*
                            	  6714: ;	rts
                            	  6715: 
                            	  6716: ;t2_bsr:
                            	  6717: ;	moveq	#2,d2
                            	  6718: ;	rts
                            	  6719: 	
                            	  6720: ;t4_bsr:
                            	  6721: ;	moveq	#4,d4
                            	  6722: ;	rts
                            	  6723: 


Symbols by name:
ABCD_INNER1                     00:00002406
ABCD_INNER2                     00:00002474
ABCD_NO_C1                      00:00002422
ABCD_NO_C2                      00:0000242A
ABCD_NO_C3                      00:00002490
ABCD_NO_C4                      00:00002498
ABCD_OUTER1                     00:00002404
ABCD_OUTER2                     00:00002472
ADDA_OUTER1                     00:00002F7A
ADDQ_LOOP1                      00:00002794
ADDQ_LOOP2                      00:000027D2
ADDQ_LOOP3                      00:00002808
ADDX_LOOP3                      00:000030A0
ADDX_LOOP4                      00:000030BC
ADDX_LOOP5                      00:000030D8
ADDX_OUTER1                     00:0000300C
ADD_OUTER1                      00:00002DA0
ADD_OUTER2                      00:00002E14
ALL_DONE                        00:000000DA
AND_OUTER1                      00:00002ABE
AND_OUTER2                      00:00002B32
BCC1                            00:000026BA
BCC10                           00:0000270C
BCC11                           00:00002714
BCC12                           00:0000271E
BCC13                           00:00002726
BCC14                           00:00002730
BCC2                            00:000026C4
BCC3                            00:000026CC
BCC4                            00:000026D6
BCC5                            00:000026DE
BCC6                            00:000026E8
BCC7                            00:000026F0
BCC8                            00:000026FA
BCC9                            00:00002702
BSR_CLOSE1                      00:0000123E
BSR_CLOSE2                      00:00001274
BSR_FAR1                        00:000000DC
BSR_FAR2                        00:000026AA
CMPA_OUTER1                     00:00002C94
CMPM_LOOP1                      00:00002D22
CMPM_LOOP2                      00:00002D3C
CMPM_LOOP3                      00:00002D56
CMP_OUTER1                      00:00002C1E
DBCC_LOOP1                      00:0000273A
DBCC_LOOP2                      00:00002748
DIVS_OUTER1                     00:0000297E
DIVU_OUTER1                     00:0000292C
EOR_OUTER2                      00:00002BA8
EXCEPTION_6                     00:000000F0
EXCEPTION_7                     00:00000100
LEA1                            00:00001C4E
MOVE1                           00:000018BC
MOVE2                           00:00001840
MOVE3                           00:0000193C
MOVE4                           00:00001A96
MULS_OUTER1                     00:00003274
MULU_OUTER1                     00:00003228
NBCD_LOOP                       00:000025F8
NBCD_LOOP1                      00:0000263E
NBCD_NO_C                       00:00002604
NBCD_NO_C1                      00:00002652
NBCD_NO_Z                       00:00002608
NBCD_NO_Z1                      00:00002656
OR_OUTER1                       00:000029D4
OR_OUTER2                       00:00002A48
ROXx_FLAGS                      00:0000353C
ROXx_LOOP1                      00:00003552
ROXx_LOOP2                      00:00003572
ROXx_LOOP3                      00:00003592
ROXx_LOOP4                      00:000035B2
ROXx_LOOP5                      00:000035D2
ROXx_LOOP6                      00:000035F4
ROx_FLAGS                       00:00003306
ROx_LOOP1                       00:0000331C
ROx_LOOP2                       00:0000333C
ROx_LOOP3                       00:0000335C
ROx_LOOP4                       00:0000337C
ROx_LOOP5                       00:0000339C
ROx_LOOP6                       00:000033BE
RTR_DONE                        00:0000269C
SBCD_INNER1                     00:00002504
SBCD_INNER2                     00:00002572
SBCD_NO_C1                      00:00002520
SBCD_NO_C2                      00:00002528
SBCD_NO_C3                      00:0000258E
SBCD_NO_C4                      00:00002596
SBCD_OUTER1                     00:00002502
SBCD_OUTER2                     00:00002570
SHIFTS2_FLAGS                   00:000039B4
SHIFTS2_LOOP1                   00:000039CA
SHIFTS2_LOOP2                   00:000039E6
SHIFTS2_LOOP3                   00:00003A02
SHIFTS2_LOOP4                   00:00003A1E
SHIFTS2_LOOP5                   00:00003A3A
SHIFTS2_LOOP6                   00:00003A58
SHIFTS_FLAGS                    00:00003772
SHIFTS_LOOP1                    00:00003788
SHIFTS_LOOP2                    00:000037A8
SHIFTS_LOOP3                    00:000037C8
SHIFTS_LOOP4                    00:000037E8
SHIFTS_LOOP5                    00:00003808
SHIFTS_LOOP6                    00:0000382A
SUBA_OUTER1                     00:00002FC6
SUBQ_LOOP1                      00:00002852
SUBQ_LOOP2                      00:0000288C
SUBQ_LOOP3                      00:000028C2
SUBX_LOOP3                      00:000031B0
SUBX_LOOP4                      00:000031CC
SUBX_LOOP5                      00:000031E8
SUBX_OUTER1                     00:0000311C
SUB_OUTER1                      00:00002E8A
SUB_OUTER2                      00:00002EFE
cpu_test                        00:00000000
op_ABCD                         00:000023E4
op_ADD                          00:00002D80
op_ADDA                         00:00002F54
op_ADDQ                         00:00002780
op_ADDX                         00:00002FEC
op_ADD_I                        00:00001468
op_AND                          00:00002A9E
op_ANDI_TO_CCR                  00:00000198
op_ANDI_TO_SR                   00:000001BE
op_BCC                          00:000026B2
op_BCHG                         00:0000058E
op_BCLR                         00:000008F6
op_BOOL_I                       00:00001080
op_BSET                         00:00000C46
op_BSR                          00:00001246
op_BTST                         00:000001E4
op_BTST0                        00:0000036E
op_BTST1                        00:0000037A
op_BTST10                       00:000003C2
op_BTST11                       00:000003CA
op_BTST12                       00:000003D0
op_BTST2                        00:00000382
op_BTST20                       00:00000528
op_BTST21                       00:00000532
op_BTST22                       00:00000538
op_BTST23                       00:0000053E
op_BTST24                       00:00000544
op_BTST25                       00:0000054A
op_BTST26                       00:00000550
op_BTST27                       00:00000556
op_BTST28                       00:0000055C
op_BTST29                       00:00000562
op_BTST3                        00:0000038A
op_BTST30                       00:00000568
op_BTST31                       00:0000056E
op_BTST32                       00:00000572
op_BTST4                        00:00000392
op_BTST5                        00:0000039A
op_BTST6                        00:000003A2
op_BTST7                        00:000003AA
op_BTST8                        00:000003B2
op_BTST9                        00:000003BA
op_CHK                          00:00001CFE
op_CMP                          00:00002BFE
op_CMPA                         00:00002C74
op_CMPM                         00:00002CDA
op_CMP_I                        00:0000127C
op_DBCC                         00:00002732
op_DIVS                         00:00002962
op_DIVU                         00:00002910
op_EOR                          00:00002B88
op_EORI_TO_CCR                  00:0000014C
op_EORI_TO_SR                   00:00000172
op_EXG                          00:000032A4
op_EXT                          00:00001B74
op_LEAPEA                       00:00001BB6
op_LINKS                        00:00001CD0
op_MOVE                         00:00001774
op_MOVEM                        00:000020C6
op_MOVEP                        00:00000FEC
op_MOVEQ                        00:000028F4
op_MOVE_USP                     00:00001CEE
op_MOVE_xxx_FLAGS               00:00001980
op_MULS                         00:00003258
op_MULU                         00:0000320C
op_NBCD                         00:000025E0
op_NEGS                         00:00001D38
op_OR                           00:000029B4
op_ORI_TO_CCR                   00:00000108
op_ORI_TO_SR                    00:0000012A
op_ROXx                         00:00003548
op_ROx                          00:00003312
op_RTR                          00:0000268E
op_SBCD                         00:000024E2
op_SCC                          00:00002758
op_SHIFTS                       00:0000377E
op_SHIFTS2                      00:000039C0
op_SUB                          00:00002E6A
op_SUBA                         00:00002FA0
op_SUBQ                         00:0000283A
op_SUBX                         00:000030FC
op_SUB_I                        00:000015EE
op_SWAP                         00:00001BA0
op_TAS                          00:00001C62
op_TRAPV                        00:00002672
op_TST                          00:00001C8A

Symbols by value:
00000000 cpu_test
000000DA ALL_DONE
000000DC BSR_FAR1
000000F0 EXCEPTION_6
00000100 EXCEPTION_7
00000108 op_ORI_TO_CCR
0000012A op_ORI_TO_SR
0000014C op_EORI_TO_CCR
00000172 op_EORI_TO_SR
00000198 op_ANDI_TO_CCR
000001BE op_ANDI_TO_SR
000001E4 op_BTST
0000036E op_BTST0
0000037A op_BTST1
00000382 op_BTST2
0000038A op_BTST3
00000392 op_BTST4
0000039A op_BTST5
000003A2 op_BTST6
000003AA op_BTST7
000003B2 op_BTST8
000003BA op_BTST9
000003C2 op_BTST10
000003CA op_BTST11
000003D0 op_BTST12
00000528 op_BTST20
00000532 op_BTST21
00000538 op_BTST22
0000053E op_BTST23
00000544 op_BTST24
0000054A op_BTST25
00000550 op_BTST26
00000556 op_BTST27
0000055C op_BTST28
00000562 op_BTST29
00000568 op_BTST30
0000056E op_BTST31
00000572 op_BTST32
0000058E op_BCHG
000008F6 op_BCLR
00000C46 op_BSET
00000FEC op_MOVEP
00001080 op_BOOL_I
0000123E BSR_CLOSE1
00001246 op_BSR
00001274 BSR_CLOSE2
0000127C op_CMP_I
00001468 op_ADD_I
000015EE op_SUB_I
00001774 op_MOVE
00001840 MOVE2
000018BC MOVE1
0000193C MOVE3
00001980 op_MOVE_xxx_FLAGS
00001A96 MOVE4
00001B74 op_EXT
00001BA0 op_SWAP
00001BB6 op_LEAPEA
00001C4E LEA1
00001C62 op_TAS
00001C8A op_TST
00001CD0 op_LINKS
00001CEE op_MOVE_USP
00001CFE op_CHK
00001D38 op_NEGS
000020C6 op_MOVEM
000023E4 op_ABCD
00002404 ABCD_OUTER1
00002406 ABCD_INNER1
00002422 ABCD_NO_C1
0000242A ABCD_NO_C2
00002472 ABCD_OUTER2
00002474 ABCD_INNER2
00002490 ABCD_NO_C3
00002498 ABCD_NO_C4
000024E2 op_SBCD
00002502 SBCD_OUTER1
00002504 SBCD_INNER1
00002520 SBCD_NO_C1
00002528 SBCD_NO_C2
00002570 SBCD_OUTER2
00002572 SBCD_INNER2
0000258E SBCD_NO_C3
00002596 SBCD_NO_C4
000025E0 op_NBCD
000025F8 NBCD_LOOP
00002604 NBCD_NO_C
00002608 NBCD_NO_Z
0000263E NBCD_LOOP1
00002652 NBCD_NO_C1
00002656 NBCD_NO_Z1
00002672 op_TRAPV
0000268E op_RTR
0000269C RTR_DONE
000026AA BSR_FAR2
000026B2 op_BCC
000026BA BCC1
000026C4 BCC2
000026CC BCC3
000026D6 BCC4
000026DE BCC5
000026E8 BCC6
000026F0 BCC7
000026FA BCC8
00002702 BCC9
0000270C BCC10
00002714 BCC11
0000271E BCC12
00002726 BCC13
00002730 BCC14
00002732 op_DBCC
0000273A DBCC_LOOP1
00002748 DBCC_LOOP2
00002758 op_SCC
00002780 op_ADDQ
00002794 ADDQ_LOOP1
000027D2 ADDQ_LOOP2
00002808 ADDQ_LOOP3
0000283A op_SUBQ
00002852 SUBQ_LOOP1
0000288C SUBQ_LOOP2
000028C2 SUBQ_LOOP3
000028F4 op_MOVEQ
00002910 op_DIVU
0000292C DIVU_OUTER1
00002962 op_DIVS
0000297E DIVS_OUTER1
000029B4 op_OR
000029D4 OR_OUTER1
00002A48 OR_OUTER2
00002A9E op_AND
00002ABE AND_OUTER1
00002B32 AND_OUTER2
00002B88 op_EOR
00002BA8 EOR_OUTER2
00002BFE op_CMP
00002C1E CMP_OUTER1
00002C74 op_CMPA
00002C94 CMPA_OUTER1
00002CDA op_CMPM
00002D22 CMPM_LOOP1
00002D3C CMPM_LOOP2
00002D56 CMPM_LOOP3
00002D80 op_ADD
00002DA0 ADD_OUTER1
00002E14 ADD_OUTER2
00002E6A op_SUB
00002E8A SUB_OUTER1
00002EFE SUB_OUTER2
00002F54 op_ADDA
00002F7A ADDA_OUTER1
00002FA0 op_SUBA
00002FC6 SUBA_OUTER1
00002FEC op_ADDX
0000300C ADDX_OUTER1
000030A0 ADDX_LOOP3
000030BC ADDX_LOOP4
000030D8 ADDX_LOOP5
000030FC op_SUBX
0000311C SUBX_OUTER1
000031B0 SUBX_LOOP3
000031CC SUBX_LOOP4
000031E8 SUBX_LOOP5
0000320C op_MULU
00003228 MULU_OUTER1
00003258 op_MULS
00003274 MULS_OUTER1
000032A4 op_EXG
00003306 ROx_FLAGS
00003312 op_ROx
0000331C ROx_LOOP1
0000333C ROx_LOOP2
0000335C ROx_LOOP3
0000337C ROx_LOOP4
0000339C ROx_LOOP5
000033BE ROx_LOOP6
0000353C ROXx_FLAGS
00003548 op_ROXx
00003552 ROXx_LOOP1
00003572 ROXx_LOOP2
00003592 ROXx_LOOP3
000035B2 ROXx_LOOP4
000035D2 ROXx_LOOP5
000035F4 ROXx_LOOP6
00003772 SHIFTS_FLAGS
0000377E op_SHIFTS
00003788 SHIFTS_LOOP1
000037A8 SHIFTS_LOOP2
000037C8 SHIFTS_LOOP3
000037E8 SHIFTS_LOOP4
00003808 SHIFTS_LOOP5
0000382A SHIFTS_LOOP6
000039B4 SHIFTS2_FLAGS
000039C0 op_SHIFTS2
000039CA SHIFTS2_LOOP1
000039E6 SHIFTS2_LOOP2
00003A02 SHIFTS2_LOOP3
00003A1E SHIFTS2_LOOP4
00003A3A SHIFTS2_LOOP5
00003A58 SHIFTS2_LOOP6

0 error(s), 62 warning(s) unlisted in pass 1
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Stratford
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              CR      EQU     $0D             ;ASCII equates
                              LF      EQU     $0A
                              TAB     EQU     $09
                              CTRLC   EQU     $03
                              CTRLH   EQU     $08
                              CTRLI   EQU     $09
                              CTRLJ   EQU     $0A
                              CTRLK   EQU     $0B
                              CTRLM   EQU $0D
                              CTRLS   EQU     $13
                              CTRLX   EQU     $18
                              XON             EQU     $11
                              XOFF    EQU     $13
 
                              MAX_TASKNO      EQU 63
                              DRAM_BASE       EQU $10000000
 
                              ScreenLocation          EQU             $10
                              ColorCodeLocation       EQU             $14
                              ScreenLocation2         EQU             $18
                              BlkcpySrc                       EQU             $1C
                              BlkcpyDst                       EQU             $20
                              Strptr                          EQU             $24
                              PICptr                          EQU             $28
                              ; Forth Area
                              ; 0x30-0x60
 
                              RunningID                       EQU             $800000
 
                              ; Task control blocks, room for 256 tasks
                              TCB_NxtRdy              EQU             $00     ; next task on ready / timeout list
                              TCB_PrvRdy              EQU             $04     ; previous task on ready / timeout list
                              TCB_NxtTCB              EQU             $08
                              TCB_Timeout             EQU             $0C
                              TCB_Priority    EQU             $10
                              TCB_MSGPTR_D1   EQU             $14
                              TCB_MSGPTR_D2   EQU             $18
                              TCB_hJCB                        EQU             $1C
                              TCB_Status              EQU             $1E
                              TCB_CursorRow   EQU             $20
                              TCB_CursorCol   EQU             $21
                              TCB_hWaitMbx    EQU             $22     ; handle of mailbox task is waiting at
                              TCB_mbq_next    EQU             $24     ; mailbox queue next
                              TCB_mbq_prev    EQU             $28     ; mailbox queue previous
                              TCB_iof_next    EQU             $2C
                              TCB_iof_prev    EQU             $30
                              TCB_SPSave              EQU             $34     ; TCB_SPSave area
                              TCB_mmu_map             EQU             $38
 
                              KeybdHead               EQU             $FFFFFC800
                              KeybdTail               EQU             $FFFFFC900
                              KeybdEcho               EQU             $FFFFFCA00
                              KeybdBad                EQU             $FFFFFCB00
                              KeybdAck                EQU             $FFFFFCC00
                              KeybdLocks              EQU             $FFFFFCD00
                              KeybdBuffer             EQU             $FFFFFC000      ; buffer is 16 chars
 
                              COREID  EQU             $FFFFFFFE0
                              MSCOUNT EQU             $FFFFFFFE4
                              LEDS            EQU             $FFFE60000
                              TEXTSCR         EQU             $FFFE00000
                              TEXTREG         EQU             $FFFE0DF00
                              TEXT_COLS       EQU             0
                              TEXT_ROWS       EQU             1
                              TEXT_CURPOS     EQU             34
                              KEYBD           EQU             $FFFE30400
                              KEYBDCLR        EQU             $FFFE30402
                              PIC                     EQU             $FFFE3F000
                              SPRITE_CTRL             EQU             $FFFE10000
                              SPRITE_EN                       EQU             $3C0
 
                              BIOS_SCREENS    EQU     $17000000       ; $17000000 to $171FFFFF
 
                              ; EhBASIC vars:
                              ;
                              NmiBase         EQU             $DC
                              IrqBase         EQU             $DF
 
                              ; The IO focus list is a doubly linked list formed into a ring.
                              ;
                              IOFocusNdx      EQU             $100
                              IOFocusID               EQU             $100
 
                              ; These variables use direct page access
                              CursorRow       EQU             $110
                              CursorCol       EQU             $111
                              CharColor       EQU             $112
                              ScreenColor     EQU             $113
                              CursorFlash     EQU             $114
                              KeyState1       EQU     $120
                              KeyState2       EQU     $121
                              KeyLED          EQU     $122
                              KeybdID         EQU     $124
 
                              QNdx0           EQU             $780
                              QNdx1           EQU             QNdx0+2
                              QNdx2           EQU             QNdx1+2
                              QNdx3           EQU             QNdx2+2
                              QNdx4           EQU             QNdx3+2
                              FreeTCB         EQU             QNdx4+2
                              TimeoutList     EQU             FreeTCB+2
                              FreeMbx         EQU             RunningTCB + 2
                              nMailbox        EQU             FreeMbx + 2
                              FreeMsg         EQU             nMailbox + 2
                              nMsgBlk         EQU             FreeMsg + 2
 
                              IrqSource       EQU             $79A
 
                              IRQFlag         EQU             $7C6
 
                              CharOutVec      EQU             $800
                              CharInVec       EQU             $804
 
                              ; Register save area for monitor
                              mon_DSAVE       EQU             $900
                              mon_XSAVE       EQU             $902
                              mon_YSAVE       EQU             $904
                              mon_USAVE       EQU             $906
                              mon_SSAVE       EQU             $908
                              mon_PCSAVE      EQU             $90A
                              mon_DPRSAVE     EQU             $90E
                              mon_CCRSAVE     EQU             $90F
 
                              mon_numwka      EQU             $910
                              mon_r1          EQU             $920
                              mon_r2          EQU             $922
 
                              ; The ORG directive must set an address a multiple of 4 in order for the Verilog
                              ; output to work correctly.
 
                                      org             $FFD0AC
 00FFD0AC 012                             nop
 00FFD0AD 012                             nop
 00FFD0AE 012                             nop
                              XBLANK
 00FFD0AF 0C6020                          ldb             #' '
 00FFD0B1 0170028B9                       lbsr    OUTCH
 00FFD0B4 039                             rts
 
                                      org             $FFD0D0
 00FFD0D0 012                             nop
 00FFD0D1 012                             nop
                              CRLF
                              CRLF1:
 00FFD0D2 0C600D                          ldb             #CR
 00FFD0D4 017002896                       lbsr    OUTCH
 00FFD0D7 0C600A                          ldb             #LF
 00FFD0D9 017002891                       lbsr    OUTCH
 00FFD0DC 039                             rts
 
                                      org             $FFD0F0
 00FFD0F0 012                             nop
 00FFD0F1 020FDF                          bra             CRLF1
 
                                      org             $FFD1DC
                              ONEKEY
 00FFD1DC 06E90F000804                    jmp             [CharInVec]
 
                                      org             $FFD2C0
 00FFD2C0 012                             nop
                              LETTER
 00FFD2C1 0170026A9                       lbsr    OUTCH
 00FFD2C4 039                             rts
 
                                      org             $FFD2CC
 00FFD2CC 012                             nop
 00FFD2CD 012                             nop
                              HEX2
 00FFD2CE 0170020CB                       lbsr    DispByteAsHex
 00FFD2D1 039                             rts
                              HEX4
 00FFD2D2 0170020BE                       lbsr    DispWordAsHex
 00FFD2D5 039                             rts
 
                                      org             $FFD300
                              ClearScreenJmp
 00FFD300 016001ECA                       lbra    ClearScreen
                                      org             $FFD308
                              HomeCursorJmp
 00FFD308 016001F35                       lbra    HomeCursor
 
                                      org             $FFE000
 
                              ; Local RAM test routine
                              ; Checkerboard testing.
                              ; There is 70kB of local RAM
                              ; Does not use any RAM including no stack
 
                              ramtest:
 00FFE000 18E000000                       ldy             #0
 00FFE003 086001                          lda             #1
 00FFE005 0150B7FFFE60000                 sta             LEDS
 00FFE00A 0CCAAA555                       ldd             #$AAA555
                              ramtest1:
 00FFE00D 0EDA01                          std             ,y++
 00FFE00F 18C008000                       cmpy    #32768
 00FFE012 025FF9                          blo             ramtest1
                                      ; now readback values and compare
 00FFE014 18E000000                       ldy             #0
                              ramtest3:
 00FFE017 0ECA01                          ldd             ,y++
 00FFE019 183AAA555                       cmpd    #$AAA555
 00FFE01C 02600E                          bne             ramerr
 00FFE01E 18C008000                       cmpy    #32768
 00FFE021 025FF4                          blo             ramtest3
 00FFE023 086002                          lda             #2
 00FFE025 0150B7FFFE60000                 sta             LEDS
 00FFE02A 06EC04                          jmp             ,u
                              ramerr:
 00FFE02C 086080                          lda             #$80
 00FFE02E 0150B7FFFE60000                 sta             LEDS
 00FFE033 08EE00000                       ldx             #TEXTSCR
 00FFE036 0150F6FFFFFFFE0                 ldb             COREID
 00FFE03B 03A                             abx
 00FFE03C 086046                          lda             #'F'
 00FFE03E 0A7804                          sta             ,x
 00FFE040 013                             sync
 00FFE041 06EC04                          jmp             ,u
 
                                      org             $FFF000
 00FFF000 FFF987                          FDB Monitor
 00FFF002 FFF022                          FDB DumRts      ;       NEXTCMD
 00FFF004 FFF94F                          FDB INCH
 00FFF006 FFF954                          FDB INCHE
 00FFF008 FFF958                          FDB INCHEK
 00FFF00A FFF96D                          FDB OUTCH
 00FFF00C FFF380                          FDB PDATA
 00FFF00E FFF373                          FDB PCRLF
 00FFF010 FFF36F                          FDB PSTRNG
 00FFF012 FFF022                          FDB DumRts                      ; LRA
 00FFF014 FFF022                          FDB DumRts
 00FFF016 FFF022                          FDB DumRts
 00FFF018 FFF022                          FDB DumRts
 00FFF01A FFF022                          FDB DumRts                      ; VINIZ
 00FFF01C FFF29A                          FDB DisplayChar ;       VOUTCH
 00FFF01E FFF022                          FDB DumRts                      ; ACINIZ
 00FFF020 FFF022                          FDB DumRts                      ; AOUTCH
 
                              DumRts:
 00FFF022 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 
                              start:
 00FFF023 086055                          lda             #$55                    ; see if we can at least set LEDs
 00FFF025 0150B7FFFE60000                 sta             LEDS
 00FFF02A 0CEFFF030                       ldu             #st6                    ; U = return address
 00FFF02D 07EFFE000                       jmp             ramtest         ; JMP dont JSR
                              st6:
 00FFF030 1CE003FFF                       lds             #$3FFF          ; boot up stack area
 00FFF033 0150B6FFFFFFFE0                 lda             COREID
 00FFF038 081002                          cmpa    #2
                              ;       beq             st8
                              ;       sync                                            ; halt cores other than 2
                              st8:
                              ;       bne             skip_init
                              ;       bsr             romToRam
                              ;       ldd             #st7 & $FFFF
                              ;       tfr             d,x
                              ;       jmp             ,x                              ; jump to the BIOS now in local RAM
                              st7:
 00FFF03A 08D11C                          bsr             Delay3s         ; give some time for devices to reset
 00FFF03C 0860AA                          lda             #$AA
 00FFF03E 0150B7FFFE60000                 sta             LEDS
 00FFF043 086002                          lda             #2
 00FFF045 097100                          sta             IOFocusID       ; core #2 has focus
 00FFF047 0B7800000                       sta             RunningID
 00FFF04A 0860CE                          lda             #$0CE
 00FFF04C 097113                          sta             ScreenColor
 00FFF04E 097112                          sta             CharColor
 00FFF050 08D17B                          bsr             ClearScreen
 00FFF052 0CCFFF29A                       ldd             #DisplayChar
 00FFF055 0DD800                          std             CharOutVec
 00FFF057 0CCFFF82A                       ldd             #DBGGetKey
 00FFF05A 0DD804                          std             CharInVec
 00FFF05C 0150F6FFFFFFFE0                 ldb             COREID
 00FFF061 0C1002                          cmpb    #2
 00FFF063 02700D                          beq             init
 00FFF065 020025                          bra             skip_init
 00FFF067 020089                          bra             multi_sieve
                              st3:
 00FFF069 0860FF                          lda             #$FF
 00FFF06B 0150B7FFFE60000                 sta             LEDS
 00FFF070 020FF7                          bra             st3
 
                                      ; initialize interrupt controller
                                      ; first, zero out all the vectors
                              init:
 00FFF072 08E000080                       ldx             #128
 00FFF075 086001                          lda             #1                      ; set irq(bit0), clear firq (bit1), disable int (bit 6), clear edge sense(bit 7)
 00FFF077 0C6002                          ldb             #2                      ; serving core id
                              st1:
 00FFF079 06F809E3F000                    clr             PIC,x           ; cause code
 00FFF07D 0A7809E3F001                    sta             PIC+1,x
 00FFF081 0E7809E3F002                    stb             PIC+2,x
 00FFF085 030004                          leax    4,x
 00FFF087 08C000100                       cmpx    #256
 00FFF08A 025FED                          blo             st1
                              ;       lda             #4                              ; make the timer interrupt edge sensitive
                              ;       sta             PIC+4                   ; reg #4 is the edge sensitivity setting
                              ;       sta             PIC                             ; reg #0 is interrupt enable
 
                              skip_init:
 00FFF08C 01C0EF                          andcc   #$EF                    ; unmask irq
 00FFF08E 086038                          lda             #56
 00FFF090 0150B7FFFE0DF00                 sta             TEXTREG+TEXT_COLS
 00FFF095 08601F                          lda             #31
 00FFF097 0150B7FFFE0DF01                 sta             TEXTREG+TEXT_ROWS
 00FFF09C 08D12F                          bsr             ClearScreen
 00FFF09E 08D1A0                          bsr             HomeCursor
 00FFF0A0 086005                          lda             #5
 00FFF0A2 0150B7FFFE60000                 sta             LEDS
 00FFF0A7 0CCFFF0BB                       ldd             #msgStartup
 00FFF0AA 08D2A7                          bsr             DisplayString
 00FFF0AC 08E000000                       ldx             #0
 00FFF0AF 0CC000000                       ldd             #0
 00FFF0B2 0170008C2                       lbsr    ShowSprites
 00FFF0B5 0170006FC                       lbsr    KeybdInit
 00FFF0B8 07EFFF982                       jmp             MonitorStart
 
                              msgStartup
 00FFF0BB 072066036038030039020           fcb             "rf6809 12-bit System Starting.",CR,LF,0
 00FFF0C2 03103202D062069074020
 00FFF0C9 05307907307406506D020
 00FFF0D0 05307406107207406906E
 00FFF0D7 06702E00D00A000
 
                              ;------------------------------------------------------------------------------
                              ; The checkpoint register must be cleared within 1 second or a NMI interrupt
                              ; will occur. checkpoint should be called with a JSR so that the global ROM
                              ; routine is called.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              checkpoint:
 00FFF0DC 01507FFFFFFFFE1                 clr             $FFFFFFFE1      ; writing any value will do
 00FFF0E1 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Copy the system ROM to local RAM
                              ; Running the code from local RAM is probably an order of magnitude faster
                              ; then running from the global ROM. It also reduces the network traffic to
                              ; run from local RAM.
                              ;
                              ; Modifies:
                              ;               d,x,y
                              ;------------------------------------------------------------------------------
 
                              romToRam:
 00FFF0E2 08EFFC000                       ldx             #$FFC000
 00FFF0E5 18E00C000                       ldy             #$00C000
                              romToRam1:
 00FFF0E8 0EC801                          ldd             ,x++
 00FFF0EA 0EDA01                          std             ,y++
 00FFF0EC 08C000000                       cmpx    #0
 00FFF0EF 026FF7                          bne             romToRam1
 00FFF0F1 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Multi-core sieve program.
                              ;------------------------------------------------------------------------------
 
                              ; First fill screen chars with 'P' indicating prime positions
                              ; Each core is responsible for the Nth position where N is the
                              ; core number minus two.
                              ;
                              multi_sieve:
 00FFF0F2 086050                          lda             #'P'                                    ; indicate prime
 00FFF0F4 0150F6FFFFFFFE0                 ldb             COREID                          ; find out which core we are
 00FFF0F9 0C0002                          subb    #2
 00FFF0FB 08E000000                       ldx             #0                                              ; start at first char of screen
 00FFF0FE 03A                             abx
                              multi_sieve3:
 00FFF0FF 0A7809E00000                    sta             TEXTSCR,x                       ; store 'P'
 00FFF103 030008                          leax    8,x                                             ; advance to next position
 00FFF105 08C000FFF                       cmpx    #4095
 00FFF108 025FF5                          blo             multi_sieve3
 00FFF10A 0BDFFF0DC                       jsr             checkpoint
*** warning 1: Long branch within short branch range could be optimized
 00FFF10D 0CB002                          addb    #2                                              ; start sieve at 2 (core id)
 00FFF10F 08604E                          lda             #'N'                                    ; flag position value of 'N' for non-prime
                              multi_sieve2:
 00FFF111 08E000000                       ldx             #0
 00FFF114 03A                             abx                                                                     ; skip the first position - might be prime
                              multi_sieve1:
 00FFF115 03A                             abx                                                                     ; increment
 00FFF116 0A7809E00000                    sta             TEXTSCR,x
 00FFF11A 08C000FFF                       cmpx    #4095
 00FFF11D 025FF6                          blo             multi_sieve1
 00FFF11F 0BDFFF0DC                       jsr             checkpoint
*** warning 1: Long branch within short branch range could be optimized
 00FFF122 0CB008                          addb    #8                                              ; number of cores working on it
 00FFF124 0C1FF0                          cmpb    #4080
 00FFF126 025FE9                          blo             multi_sieve2
                              multi_sieve4:                                   ; hang machine
 00FFF128 013                             sync
 00FFF129 01600085B                       lbra    Monitor
 
                              sieve:
 00FFF12C 086050                          lda             #'P'                                    ; indicate prime
 00FFF12E 08E000000                       ldx             #0                                              ; start at first char of screen
                              sieve3:
 00FFF131 0A7809E00000                    sta             TEXTSCR,x                       ; store 'P'
 00FFF135 030001                          leax    1,x                                             ; advance to next position
 00FFF137 08C000FFF                       cmpx    #4095
 00FFF13A 025FF5                          blo             sieve3
 00FFF13C 0C6002                          ldb             #2                                              ; start sieve at 2
 00FFF13E 08604E                          lda             #'N'                                    ; flag position value of 'N' for non-prime
                              sieve2:
 00FFF140 08E000000                       ldx             #0
 00FFF143 03A                             abx                                                                     ; skip the first position - might be prime
                              sieve1:
 00FFF144 03A                             abx                                                                     ; increment
 00FFF145 0A7809E00000                    sta             TEXTSCR,x
 00FFF149 08C000FFF                       cmpx    #4095
 00FFF14C 025FC7                          blo             multi_sieve1
 00FFF14E 0CB001                          addb    #1                                              ; number of cores working on it
 00FFF150 0C1FF0                          cmpb    #4080
 00FFF152 025FEC                          blo             sieve2
                              sieve4:                                                         ; hang machine
 00FFF154 013                             sync
 00FFF155 01600082A                       lbra    MonitorStart
 
                              ;------------------------------------------------------------------------------
                              ; Three second delay for user convenience and to allow some devices time to
                              ; reset.
                              ;------------------------------------------------------------------------------
 
                              Delay3s:
 00FFF158 0CC895440                       ldd             #9000000
                              dly3s1:
 00FFF15B 0C10FF                          cmpb    #$FF
 00FFF15D 026000                          bne             dly3s2
                              dly3s2:
 00FFF15F 0150B7FFFE60000                 sta             LEDS
 00FFF164 083000001                       subd    #1
 00FFF167 026FF2                          bne             dly3s1
 00FFF169 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ShiftLeft5:
 00FFF16A 058                             aslb
 00FFF16B 049                             rola
 00FFF16C 058                             aslb
 00FFF16D 049                             rola
 00FFF16E 058                             aslb
 00FFF16F 049                             rola
 00FFF170 058                             aslb
 00FFF171 049                             rola
 00FFF172 058                             aslb
 00FFF173 049                             rola
 00FFF174 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ;
                              CopyVirtualScreenToScreen:
 00FFF175 034076                          pshs    d,x,y,u
 00FFF177 08D0B6                          bsr             GetScreenLocation
 00FFF179 01F001                          tfr             d,x
 00FFF17B 18EE00000                       ldy             #TEXTSCR
 00FFF17E 0CE000364                       ldu             #56*31/2
                              cv2s1:
 00FFF181 0EC801                          ldd             ,x++
 00FFF183 0EDA01                          std             ,y++
 00FFF185 0335FF                          leau    -1,u
 00FFF187 283000000                       cmpu    #0
 00FFF18A 026FF5                          bne             cv2s1
                                      ; reset the cursor position in the text controller
 00FFF18C 0D6110                          ldb             CursorRow
 00FFF18E 086038                          lda             #56
 00FFF190 03D                             mul
 00FFF191 01F001                          tfr             d,x
 00FFF193 0D6111                          ldb             CursorCol
 00FFF195 03A                             abx
 00FFF196 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
 00FFF19B 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ;
                              CopyScreenToVirtualScreen:
 00FFF19D 034076                          pshs    d,x,y,u
 00FFF19F 08D08E                          bsr             GetScreenLocation
 00FFF1A1 01F002                          tfr             d,y
 00FFF1A3 08EE00000                       ldx             #TEXTSCR
 00FFF1A6 0CE000364                       ldu             #56*31/2
                              cs2v1:
 00FFF1A9 0EC801                          ldd             ,x++
 00FFF1AB 0EDA01                          std             ,y++
 00FFF1AD 0335FF                          leau    -1,u
 00FFF1AF 283000000                       cmpu    #0
 00FFF1B2 026FF5                          bne             cs2v1
 00FFF1B4 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 00FFF1B6 054045058054053043052           fcb             "TEXTSCR "
 00FFF1BD 020
 00FFF1BE FFF1C8                          fcw             TextOpen
 00FFF1C0 FFF1C9                          fcw             TextClose
 00FFF1C2 FFF1CA                          fcw             TextRead
 00FFF1C4 FFF1CB                          fcw             TextWrite
 00FFF1C6 FFF1CC                          fcw             TextSeek
 
                              TextOpen:
 00FFF1C8 039                             rts
                              TextClose:
 00FFF1C9 039                             rts
                              TextRead:
 00FFF1CA 039                             rts
                              TextWrite:
 00FFF1CB 039                             rts
                              TextSeek:
 00FFF1CC 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Clear the screen and the screen color memory
                              ; We clear the screen to give a visual indication that the system
                              ; is working at all.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              ClearScreen:
 00FFF1CD 034076                          pshs    d,x,y,u
 00FFF1CF 08E0006C8                       ldx             #56*31
 00FFF1D2 01F013                          tfr             x,u
 00FFF1D4 08D059                          bsr             GetScreenLocation
 00FFF1D6 01F002                          tfr             d,y
 00FFF1D8 0C6020                          ldb             #' '                            ; space char
                              cs1:
 00FFF1DA 0E7A00                          stb             ,y+                                     ; set text to space
 00FFF1DC 0301FF                          leax    -1,x                            ; decrement x
 00FFF1DE 026FFA                          bne             cs1
 00FFF1E0 0150F6FFFFFFFE0                 ldb             COREID                  ; update colors only if we have focus
 00FFF1E5 0D1100                          cmpb    IOFocusID
 00FFF1E7 02000D                          bra             cs3
 00FFF1E9 18EE02000                       ldy             #TEXTSCR+$2000
                              ;       lda             CharColor
 00FFF1EC 0860CE                          lda             #$0CE
 00FFF1EE 01F031                          tfr             u,x                                     ; get back count
                              cs2:
 00FFF1F0 0A7A00                          sta             ,y+
 00FFF1F2 0301FF                          leax    -1,x                            ; decrement x
 00FFF1F4 026FFA                          bne             cs2
                              cs3:
 00FFF1F6 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ; Scroll text on the screen upwards
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              ScrollUp:
 00FFF1F8 034076                          pshs    d,x,y,u
 00FFF1FA 18E000363                       ldy             #(56*31-1)/2    ; y = num chars/2 to move
 00FFF1FD 08D030                          bsr             GetScreenLocation
 00FFF1FF 01F001                          tfr             d,x
 00FFF201 01F003                          tfr             d,u
 00FFF203 030038                          leax    56,x                    ; x = index to source row
                              scrup1:
 00FFF205 0EC801                          ldd             ,x++                    ; move 2 characters
 00FFF207 0EDC01                          std             ,u++
 00FFF209 0313FF                          leay    -1,y
 00FFF20B 026FF8                          bne             scrup1
 00FFF20D 08601E                          lda             #30
 00FFF20F 08D002                          bsr             BlankLine
 00FFF211 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ; Blank out a line on the display
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;       acca = line number to blank
                              ;------------------------------------------------------------------------------
 
                              BlankLine:
 00FFF213 034016                          pshs    d,x
 00FFF215 034002                          pshs    a
 00FFF217 08D016                          bsr             GetScreenLocation
 00FFF219 01F001                          tfr             d,x
 00FFF21B 035002                          puls    a
 00FFF21D 0C6038                          ldb             #56             ; b = # chars to blank out from video controller
 00FFF21F 03D                             mul                                     ; d = screen index (row# * #cols)
 00FFF220 03080B                          leax    d,x
 00FFF222 01F001                          tfr             d,x
 00FFF224 086020                          lda             #' '
 00FFF226 0C6038                          ldb             #56             ; b = # chars to blank out from video controller
                              blnkln1:
 00FFF228 0A7800                          sta             ,x+
 00FFF22A 05A                             decb
 00FFF22B 026FFB                          bne             blnkln1
 00FFF22D 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Get the location of the screen memory. The location
                              ; depends on whether or not the task has the output focus.
                              ;
                              ; Modifies:
                              ;               d
                              ; Retuns:
                              ;               d = screen location
                              ;------------------------------------------------------------------------------
 
                              GetScreenLocation:
 00FFF22F 0150B6FFFFFFFE0                 lda             COREID                  ; which core are we?
 00FFF234 091100                          cmpa    IOFocusID               ; do we have the IO focus
 00FFF236 026004                          bne             gsl1                            ; no, go pick virtual screen address
 00FFF238 0CCE00000                       ldd             #TEXTSCR                ; yes, we update the real screen
 00FFF23B 039                             rts
                              gsl1:
 00FFF23C 0CC007800                       ldd             #$7800
 00FFF23F 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; HomeCursor
                              ; Set the cursor location to the top left of the screen.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              HomeCursor:
 00FFF240 034016                          pshs    d,x
 00FFF242 00F110                          clr             CursorRow
 00FFF244 00F111                          clr             CursorCol
 00FFF246 0150F6FFFFFFFE0                 ldb             COREID
 00FFF24B 0D1100                          cmpb    IOFocusID
 00FFF24D 026006                          bne             hc1
 00FFF24F 04F                             clra
 00FFF250 0150B7FFFE0DF22                 sta             TEXTREG+TEXT_CURPOS
                              hc1:
 00FFF255 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Update the cursor position in the text controller based on the
                              ;  CursorRow,CursorCol.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
                              ;
                              UpdateCursorPos:
 00FFF257 034016                          pshs    d,x
 00FFF259 0150F6FFFFFFFE0                 ldb             COREID                          ; update cursor position in text controller
 00FFF25E 0D1100                          cmpb    IOFocusID                       ; only for the task with the output focus
 00FFF260 026014                          bne             ucp1                                    
 00FFF262 096110                          lda             CursorRow
 00FFF264 08403F                          anda    #$3F                                    ; limit of 63 rows
 00FFF266 0150F6FFFE0DF00                 ldb             TEXTREG+TEXT_COLS
 00FFF26B 03D                             mul
 00FFF26C 01F001                          tfr             d,x
 00FFF26E 0D6111                          ldb             CursorCol
 00FFF270 03A                             abx
 00FFF271 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
                              ucp1:
 00FFF276 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Calculate screen memory location from CursorRow,CursorCol.
                              ; Also refreshes the cursor location.
                              ;
                              ; Modifies:
                              ;               d
                              ; Returns:
                              ;       d = screen location
                              ;------------------------------------------------------------------------------
                              ;
                              CalcScreenLoc:
 00FFF278 034010                          pshs    x
 00FFF27A 096110                          lda             CursorRow
 00FFF27C 0C6038                          ldb             #56
 00FFF27E 03D                             mul
 00FFF27F 01F001                          tfr             d,x
 00FFF281 0D6111                          ldb             CursorCol
 00FFF283 03A                             abx
 00FFF284 0150F6FFFFFFFE0                 ldb             COREID                          ; update cursor position in text controller
 00FFF289 0D1100                          cmpb    IOFocusID                       ; only for the task with the output focus
 00FFF28B 026005                          bne             csl1                                    
 00FFF28D 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
                              csl1:
 00FFF292 08DF9B                          bsr             GetScreenLocation
 00FFF294 03080B                          leax    d,x
 00FFF296 01F010                          tfr             x,d
 00FFF298 035090                          puls    x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Display a character on the screen.
                              ; If the task doesn't have the I/O focus then the character is written to
                              ; the virtual screen.
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;       accb = char to display
                              ;------------------------------------------------------------------------------
                              ;
                              DisplayChar:
 00FFF29A 034016                          pshs    d,x
 00FFF29C 0C100D                          cmpb    #CR                                     ; carriage return ?
 00FFF29E 026006                          bne             dccr
 00FFF2A0 00F111                          clr             CursorCol               ; just set cursor column to zero on a CR
 00FFF2A2 08DFB3                          bsr             UpdateCursorPos
                              dcx14:
 00FFF2A4 035096                          puls    d,x,pc
                              dccr:
 00FFF2A6 0C1091                          cmpb    #$91                            ; cursor right ?
 00FFF2A8 02600D                          bne             dcx6
 00FFF2AA 096111                          lda             CursorCol
 00FFF2AC 081037                          cmpa    #55
 00FFF2AE 024003                          bhs             dcx7
 00FFF2B0 04C                             inca
 00FFF2B1 097111                          sta             CursorCol
                              dcx7:
 00FFF2B3 08DFA2                          bsr             UpdateCursorPos
 00FFF2B5 035096                          puls    d,x,pc
                              dcx6:
 00FFF2B7 0C1090                          cmpb    #$90                            ; cursor up ?
 00FFF2B9 026009                          bne             dcx8            
 00FFF2BB 096110                          lda             CursorRow
 00FFF2BD 027FF4                          beq             dcx7
 00FFF2BF 04A                             deca
 00FFF2C0 097110                          sta             CursorRow
 00FFF2C2 020FEF                          bra             dcx7
                              dcx8:
 00FFF2C4 0C1093                          cmpb    #$93                            ; cursor left ?
 00FFF2C6 026009                          bne             dcx9
 00FFF2C8 096111                          lda             CursorCol
 00FFF2CA 027FE7                          beq             dcx7
 00FFF2CC 04A                             deca
 00FFF2CD 097111                          sta             CursorCol
 00FFF2CF 020FE2                          bra             dcx7
                              dcx9:
 00FFF2D1 0C1092                          cmpb    #$92                            ; cursor down ?
 00FFF2D3 02600B                          bne             dcx10
 00FFF2D5 096110                          lda             CursorRow
 00FFF2D7 08101F                          cmpa    #31
 00FFF2D9 027FD8                          beq             dcx7
 00FFF2DB 04C                             inca
 00FFF2DC 097110                          sta             CursorRow
 00FFF2DE 020FD3                          bra             dcx7
                              dcx10:
 00FFF2E0 0C1094                          cmpb    #$94                            ; cursor home ?
 00FFF2E2 02600C                          bne             dcx11
 00FFF2E4 096111                          lda             CursorCol
 00FFF2E6 027004                          beq             dcx12
 00FFF2E8 00F111                          clr             CursorCol
 00FFF2EA 020FC7                          bra             dcx7
                              dcx12:
 00FFF2EC 00F110                          clr             CursorRow
 00FFF2EE 020FC3                          bra             dcx7
                              dcx11:
 00FFF2F0 0C1099                          cmpb    #$99                            ; delete ?
 00FFF2F2 026008                          bne             dcx13
 00FFF2F4 08DF82                          bsr             CalcScreenLoc
 00FFF2F6 01F001                          tfr             d,x
 00FFF2F8 096111                          lda             CursorCol               ; acc = cursor column
 00FFF2FA 02000D                          bra             dcx5
                              dcx13
 00FFF2FC 0C1008                          cmpb    #CTRLH                  ; backspace ?
 00FFF2FE 02601A                          bne             dcx3
 00FFF300 096111                          lda             CursorCol
 00FFF302 02702A                          beq             dcx4
 00FFF304 04A                             deca
 00FFF305 097111                          sta             CursorCol
 00FFF307 08DF6F                          bsr             CalcScreenLoc
                              dcx5:
 00FFF309 0E6001                          ldb             1,x
 00FFF30B 0E7801                          stb             ,x++
 00FFF30D 04C                             inca
 00FFF30E 081037                          cmpa    #55
 00FFF310 025FF7                          blo             dcx5
 00FFF312 0C6020                          ldb             #' '
 00FFF314 0301FF                          leax    -1,x
 00FFF316 0E7804                          stb             ,x
 00FFF318 03509E                          puls    d,x,dp,pc
                              dcx3:
 00FFF31A 0C100A                          cmpb    #LF                             ; linefeed ?
 00FFF31C 02700E                          beq             dclf
 00FFF31E 034004                          pshs    b
 00FFF320 08DF56                          bsr     CalcScreenLoc
 00FFF322 01F001                          tfr             d,x
 00FFF324 035004                          puls    b
 00FFF326 0E7804                          stb             ,x
                                      ; ToDo character color
                              ;       lda             CharColor
                              ;       sta             $2000,x
 00FFF328 08D006                          bsr             IncCursorPos
 00FFF32A 035096                          puls    d,x,pc
                              dclf:
 00FFF32C 08D011                          bsr             IncCursorRow
                              dcx4:
 00FFF32E 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Increment the cursor position, scroll the screen if needed.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              IncCursorPos:
 00FFF330 034016                          pshs    d,x
 00FFF332 096111                          lda             CursorCol
 00FFF334 04C                             inca
 00FFF335 097111                          sta             CursorCol
 00FFF337 081037                          cmpa    #55
 00FFF339 025014                          blo             icc1
 00FFF33B 00F111                          clr             CursorCol               ; column = 0
 00FFF33D 020002                          bra             icr1
                              IncCursorRow:
 00FFF33F 034016                          pshs    d,x
                              icr1:
 00FFF341 096110                          lda             CursorRow
 00FFF343 04C                             inca
 00FFF344 097110                          sta             CursorRow
 00FFF346 08101F                          cmpa    #31
 00FFF348 025005                          blo             icc1
 00FFF34A 04A                             deca                                                    ; backup the cursor row, we are scrolling up
 00FFF34B 097110                          sta             CursorRow
 00FFF34D 08DEA9                          bsr             ScrollUp
                              icc1:
 00FFF34F 08DF06                          bsr             UpdateCursorPos
                              icc2:
 00FFF351 035096                          puls    d,x,pc  
 
                              ;------------------------------------------------------------------------------
                              ; Display a string on the screen.
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;               d = pointer to string
                              ;------------------------------------------------------------------------------
                              ;
                              DisplayString:
 00FFF353 034016                          pshs    d,x
 00FFF355 01F001                          tfr             d,x
                              dspj1B:
 00FFF357 0E6800                          ldb             ,x+                             ; move string char into acc
 00FFF359 027004                          beq             dsretB          ; is it end of string ?
 00FFF35B 08D610                          bsr             OUTCH                   ; display character
 00FFF35D 020FF8                          bra             dspj1B
                              dsretB:
 00FFF35F 035096                          puls    d,x,pc
 
                              DisplayStringCRLF
 00FFF361 034006                          pshs    d
 00FFF363 08DFEE                          bsr             DisplayString
 00FFF365 0C600D                          ldb             #CR
 00FFF367 08D604                          bsr             OUTCH
 00FFF369 0C600A                          ldb             #LF
 00FFF36B 08D600                          bsr             OUTCH
 00FFF36D 035086                          puls    d,pc
                                      
                              ;
                              ; PRINT CR, LF, STRING
                              ;
                              PSTRNG
 00FFF36F 08D002                          BSR             PCRLF
 00FFF371 02000D                          BRA             PDATA
                              PCRLF
 00FFF373 034010                          PSHS    X
 00FFF375 08EFFF387                       LDX             #CRLFST
 00FFF378 08D006                          BSR             PDATA
 00FFF37A 035010                          PULS    X
 00FFF37C 039                             RTS
 
                              PRINT
 00FFF37D 0BDFFF96D                       JSR             OUTCH
                              PDATA
 00FFF380 0E6800                          LDB             ,X+
 00FFF382 0C1004                          CMPB    #$04
 00FFF384 026FF7                          BNE             PRINT
 00FFF386 039                             RTS
 
                              CRLFST
 00FFF387 00D00A004                       fcb     CR,LF,4
 
                              DispDWordAsHex:
 00FFF38A 08D007                          bsr             DispWordAsHex
 00FFF38C 01E001                          exg             d,x
 00FFF38E 08D003                          bsr             DispWordAsHex
 00FFF390 01E001                          exg             d,x
 00FFF392 039                             rts
 
                              DispWordAsHex:
 00FFF393 01E089                          exg             a,b
 00FFF395 08D005                          bsr             DispByteAsHex
 00FFF397 01E089                          exg             a,b
 00FFF399 08D001                          bsr             DispByteAsHex
 00FFF39B 039                             rts
 
                              DispByteAsHex:
 00FFF39C 034004                    pshs  b
 00FFF39E 054                             lsrb
 00FFF39F 054                             lsrb
 00FFF3A0 054                             lsrb
 00FFF3A1 054                             lsrb
 00FFF3A2 054                             lsrb
 00FFF3A3 054                             lsrb
 00FFF3A4 054                             lsrb
 00FFF3A5 054                             lsrb
 00FFF3A6 08D00C                          bsr             DispNyb
 00FFF3A8 035004                          puls    b
 00FFF3AA 034004                          pshs    b
 00FFF3AC 054                             lsrb
 00FFF3AD 054                             lsrb
 00FFF3AE 054                             lsrb
 00FFF3AF 054                             lsrb
 00FFF3B0 08D002                          bsr             DispNyb
 00FFF3B2 035004                          puls    b
 
                              DispNyb
 00FFF3B4 034004                          pshs    b
 00FFF3B6 0C400F                          andb    #$0F
 00FFF3B8 0C100A                          cmpb    #10
 00FFF3BA 025006                          blo             DispNyb1
 00FFF3BC 0CB037                          addb    #'A'-10
 00FFF3BE 08D5AD                          bsr             OUTCH
 00FFF3C0 035084                          puls    b,pc
                              DispNyb1
 00FFF3C2 0CB030                          addb    #'0'
 00FFF3C4 08D5A7                          bsr             OUTCH
 00FFF3C6 035084                          puls    b,pc
 
                              ;==============================================================================
                              ; Keyboard I/O
                              ;==============================================================================
 
                                      ;--------------------------------------------------------------------------
                                      ; PS2 scan codes to ascii conversion tables.
                                      ;--------------------------------------------------------------------------
                                      ;
                                      org     (* + 127) & $FFFFFF80
 
                              unshiftedScanCodes:
 00FFF400 02E0A902E0A50A30A10A2           fcb     $2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
 00FFF407 0AC
 00FFF408 02E0AA0A80A60A4009060           fcb     $2e,$aa,$a8,$a6,$a4,$09,$60,$2e
 00FFF40F 02E
 00FFF410 02E02E02E02E02E071031           fcb     $2e,$2e,$2e,$2e,$2e,$71,$31,$2e
 00FFF417 02E
 00FFF418 02E02E07A073061077032           fcb     $2e,$2e,$7a,$73,$61,$77,$32,$2e
 00FFF41F 02E
 00FFF420 02E063078064065034033           fcb     $2e,$63,$78,$64,$65,$34,$33,$2e
 00FFF427 02E
 00FFF428 02E020076066074072035           fcb     $2e,$20,$76,$66,$74,$72,$35,$2e
 00FFF42F 02E
 00FFF430 02E06E062068067079036           fcb     $2e,$6e,$62,$68,$67,$79,$36,$2e
 00FFF437 02E
 00FFF438 02E02E06D06A075037038           fcb     $2e,$2e,$6d,$6a,$75,$37,$38,$2e
 00FFF43F 02E
 00FFF440 02E02C06B06906F030039           fcb     $2e,$2c,$6b,$69,$6f,$30,$39,$2e
 00FFF447 02E
 00FFF448 02E02E02F06C03B07002D           fcb     $2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
 00FFF44F 02E
 00FFF450 02E02E02702E05B03D02E           fcb     $2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
 00FFF457 02E
 00FFF458 0AD02E00D05D02E05C02E           fcb     $ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
 00FFF45F 02E
 00FFF460 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFF467 02E
 00FFF468 02E09502E09309402E02E           fcb     $2e,$95,$2e,$93,$94,$2e,$2e,$2e
 00FFF46F 02E
 00FFF470 09807F09202E09109001B           fcb     $98,$7f,$92,$2e,$91,$90,$1b,$af
 00FFF477 0AF
 00FFF478 0AB02E09702E02E0960AE           fcb     $ab,$2e,$97,$2e,$2e,$96,$ae,$2e
 00FFF47F 02E
 
 00FFF480 02E02E02E0A702E02E02E           fcb     $2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
 00FFF487 02E
 00FFF488 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF48F 02E
 00FFF490 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF497 02E
 00FFF498 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF49F 02E
 00FFF4A0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4A7 02E
 00FFF4A8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4AF 02E
 00FFF4B0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4B7 02E
 00FFF4B8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4BF 02E
 00FFF4C0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4C7 02E
 00FFF4C8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4CF 02E
 00FFF4D0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4D7 02E
 00FFF4D8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4DF 02E
 00FFF4E0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4E7 02E
 00FFF4E8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4EF 02E
 00FFF4F0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4F7 02E
 00FFF4F8 02E02E0FA02E02E02E02E           fcb     $2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
 00FFF4FF 02E
 
                              shiftedScanCodes:
 00FFF500 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF507 02E
 00FFF508 02E02E02E02E02E00907E           fcb     $2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
 00FFF50F 02E
 00FFF510 02E02E02E02E02E051021           fcb     $2e,$2e,$2e,$2e,$2e,$51,$21,$2e
 00FFF517 02E
 00FFF518 02E02E05A053041057040           fcb     $2e,$2e,$5a,$53,$41,$57,$40,$2e
 00FFF51F 02E
 00FFF520 02E043058044045024023           fcb     $2e,$43,$58,$44,$45,$24,$23,$2e
 00FFF527 02E
 00FFF528 02E020056046054052025           fcb     $2e,$20,$56,$46,$54,$52,$25,$2e
 00FFF52F 02E
 00FFF530 02E04E04204804705905E           fcb     $2e,$4e,$42,$48,$47,$59,$5e,$2e
 00FFF537 02E
 00FFF538 02E02E04D04A05502602A           fcb     $2e,$2e,$4d,$4a,$55,$26,$2a,$2e
 00FFF53F 02E
 00FFF540 02E03C04B04904F029028           fcb     $2e,$3c,$4b,$49,$4f,$29,$28,$2e
 00FFF547 02E
 00FFF548 02E03E03F04C03A05005F           fcb     $2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
 00FFF54F 02E
 00FFF550 02E02E02202E07B02B02E           fcb     $2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
 00FFF557 02E
 00FFF558 02E02E00D07D02E07C02E           fcb     $2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
 00FFF55F 02E
 00FFF560 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFF567 02E
 00FFF568 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF56F 02E
 00FFF570 02E07F02E02E02E02E01B           fcb     $2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
 00FFF577 02E
 00FFF578 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF57F 02E
 
 00FFF580 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF587 02E
 00FFF588 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF58F 02E
 00FFF590 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF597 02E
 00FFF598 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF59F 02E
 00FFF5A0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5A7 02E
 00FFF5A8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5AF 02E
 00FFF5B0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5B7 02E
 00FFF5B8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5BF 02E
 00FFF5C0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5C7 02E
 00FFF5C8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5CF 02E
 00FFF5D0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5D7 02E
 00FFF5D8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5DF 02E
 00FFF5E0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5E7 02E
 00FFF5E8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5EF 02E
 00FFF5F0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5F7 02E
 00FFF5F8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5FF 02E
 
                              ; control
                              keybdControlCodes:
 00FFF600 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF607 02E
 00FFF608 02E02E02E02E02E00907E           fcb     $2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
 00FFF60F 02E
 00FFF610 02E02E02E02E02E011021           fcb     $2e,$2e,$2e,$2e,$2e,$11,$21,$2e
 00FFF617 02E
 00FFF618 02E02E01A013001017040           fcb     $2e,$2e,$1a,$13,$01,$17,$40,$2e
 00FFF61F 02E
 00FFF620 02E003018004005024023           fcb     $2e,$03,$18,$04,$05,$24,$23,$2e
 00FFF627 02E
 00FFF628 02E020016006014012025           fcb     $2e,$20,$16,$06,$14,$12,$25,$2e
 00FFF62F 02E
 00FFF630 02E00E00200800701905E           fcb     $2e,$0e,$02,$08,$07,$19,$5e,$2e
 00FFF637 02E
 00FFF638 02E02E00D00A01502602A           fcb     $2e,$2e,$0d,$0a,$15,$26,$2a,$2e
 00FFF63F 02E
 00FFF640 02E03C00B00900F029028           fcb     $2e,$3c,$0b,$09,$0f,$29,$28,$2e
 00FFF647 02E
 00FFF648 02E03E03F00C03A01005F           fcb     $2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
 00FFF64F 02E
 00FFF650 02E02E02202E07B02B02E           fcb     $2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
 00FFF657 02E
 00FFF658 02E02E00D07D02E07C02E           fcb     $2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
 00FFF65F 02E
 00FFF660 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFF667 02E
 00FFF668 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF66F 02E
 00FFF670 02E07F02E02E02E02E01B           fcb     $2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
 00FFF677 02E
 00FFF678 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF67F 02E
 
                              keybdExtendedCodes:
 00FFF680 02E02E02E02E0A30A10A2           fcb     $2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
 00FFF687 02E
 00FFF688 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF68F 02E
 00FFF690 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF697 02E
 00FFF698 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF69F 02E
 00FFF6A0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6A7 02E
 00FFF6A8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6AF 02E
 00FFF6B0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6B7 02E
 00FFF6B8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6BF 02E
 00FFF6C0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6C7 02E
 00FFF6C8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6CF 02E
 00FFF6D0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6D7 02E
 00FFF6D8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6DF 02E
 00FFF6E0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6E7 02E
 00FFF6E8 02E09502E09309402E02E           fcb     $2e,$95,$2e,$93,$94,$2e,$2e,$2e
 00FFF6EF 02E
 00FFF6F0 09809909202E09109002E           fcb     $98,$99,$92,$2e,$91,$90,$2e,$2e
 00FFF6F7 02E
 00FFF6F8 02E02E09702E02E09602E           fcb     $2e,$2e,$97,$2e,$2e,$96,$2e,$2e
 00FFF6FF 02E
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ;       Keyboard driver routines to interface to a PS2 style keyboard
                              ; Converts the scancode to ascii
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              SC_F12  EQU     $07
                              SC_C    EQU             $21
                              SC_T    EQU         $2C
                              SC_Z            EQU     $1A
                              SC_DEL  EQU                     $71     ; extend
                              SC_KEYUP        EQU             $F0
                              SC_EXTEND EQU     $E0
                              SC_CTRL EQU                     $14
                              SC_RSHIFT               EQU     $59
                              SC_NUMLOCK      EQU     $77
                              SC_SCROLLLOCK           EQU     $7E
                              SC_CAPSLOCK             EQU             $58
                              SC_ALT  EQU                     $11
 
                              ;#define SC_LSHIFT      EQU             $12
                              ;SC_DEL         EQU             $71             ; extend
                              ;SC_LCTRL       EQU             $58
 
                              SC_TAB  EQU     $0D
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Recieve a byte from the keyboard, used after a command is sent to the
                              ; keyboard in order to wait for a response.
                              ;
                              ; Parameters: none
                              ; Returns: accd = recieved byte ($00 to $FF), -1 on timeout
                              ; Modifies: acc
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdRecvByte:
 00FFF700 034010                                  pshs    x
 00FFF702 08E000064                               ldx             #100                                            ; wait up to 1s
                              krb3:
 00FFF705 08D05A                                  bsr             KeybdGetStatus  ; wait for response from keyboard
 00FFF707 05D                                     tstb
 00FFF708 02B00B                                  bmi             krb4                                            ; is input buffer full ? yes, branch
 00FFF70A 08D02D                                  bsr             Wait10ms                                ; wait a bit
 00FFF70C 0301FF                                  leax    -1,x
 00FFF70E 026FF5                                  bne             krb3                                            ; go back and try again
 00FFF710 0CCFFFFFF                               ldd             #-1                                                     ; return -1
 00FFF713 035090                                  puls    x,pc
                              krb4:
 00FFF715 08D05A                                  bsr             KeybdGetScancode
 00FFF717 035090                                  puls    x,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Send a byte to the keyboard.
                              ;
                              ; Parameters: accb byte to send
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 0 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdSendByte:
 00FFF719 0150F7FFFE30400                 stb             KEYBD
 00FFF71E 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait until the keyboard transmit is complete
                              ;
                              ; Parameters: none
                              ; Returns: r1 = 0 if successful, r1 = -1 timeout
                              ; Modifies: r1
                              ; Stack Space: 3 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdWaitTx:
 00FFF71F 034010                                  pshs    x
 00FFF721 08E000064                               ldx             #100                            ; wait a max of 1s
                              kwt1:
 00FFF724 08D03B                                  bsr             KeybdGetStatus
 00FFF726 0C4040                                  andb    #$40                            ; check for transmit complete bit; branch if bit set
 00FFF728 02600B                                  bne             kwt2
 00FFF72A 08D00D                                  bsr             Wait10ms                ; delay a little bit
 00FFF72C 0301FF                                  leax    -1,x
 00FFF72E 026FF4                                  bne             kwt1                            ; go back and try again
 00FFF730 0CCFFFFFF                               ldd             #-1                                     ; timed out, return -1
 00FFF733 035090                                  puls    x,pc
                              kwt2:
 00FFF735 04F                                     clra                                                    ; wait complete, return 0
 00FFF736 05F                                     clrb                                                    
 00FFF737 035090                                  puls    x,pc                            
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for 10 ms
                              ;
                              ; Parameters: none
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              Wait10ms:
 00FFF739 034006                          pshs    d
 00FFF73B 0150B6FFFFFFFE7                 lda             MSCOUNT+3
                              W10_0001:
 00FFF740 01F089                          tfr             a,b
 00FFF742 0150F0FFFFFFFE7                 subb    MSCOUNT+3
 00FFF747 0C1FFA                          cmpb    #$FFA
 00FFF749 022FF5                          bhi             W10_0001
 00FFF74B 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for 300 ms (256 ms)
                              ;
                              ; Parameters: none
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              Wait300ms:
 00FFF74D 034006                          pshs    d
 00FFF74F 0150B6FFFFFFFE7                 lda             MSCOUNT+3
                              W300_0001:
 00FFF754 01F089                          tfr             a,b
 00FFF756 0150F0FFFFFFFE7                 subb    MSCOUNT+3
 00FFF75B 0C1F00                          cmpb    #$F00
 00FFF75D 022FF5                          bhi     W300_0001
 00FFF75F 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get the keyboard status
                              ;
                              ; Parameters: none
                              ; Returns: d = status
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetStatus:
 00FFF761 0150F6FFFE30401                 ldb             KEYBD+1
 00FFF766 0C5080                          bitb    #$80
 00FFF768 026002                          bne             kbgs1
 00FFF76A 04F                             clra
 00FFF76B 039                             rts
                              kbgs1:                                  ; return negative status
 00FFF76C 0CAF00                          orb             #$F00
 00FFF76E 086FFF                          lda             #-1
 00FFF770 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get the scancode from the keyboard port
                              ;
                              ; Parameters: none
                              ; Returns: acca = scancode
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetScancode:
 00FFF771 04F                             clra
 00FFF772 0150F6FFFE30400                 ldb             KEYBD                           ; get the scan code
 00FFF777 01507FFFFE30401                 clr             KEYBD+1                 ; clear receive register
 00FFF77C 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Set the LEDs on the keyboard.
                              ;
                              ; Parameters: d LED status to set
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdSetLED:
 00FFF77D 034004                          pshs    b
 00FFF77F 0C60ED                          ldb             #$ED                                            ; set LEDs command
 00FFF781 08DF96                          bsr             KeybdSendByte
 00FFF783 08DF9A                          bsr             KeybdWaitTx
 00FFF785 08DF79                          bsr             KeybdRecvByte   ; should be an ack
 00FFF787 035004                          puls    b
 00FFF789 08DF8E                          bsr             KeybdSendByte
 00FFF78B 08DF92                          bsr             KeybdWaitTx
 00FFF78D 08DF71                          bsr             KeybdRecvByte   ; should be an ack
 00FFF78F 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get ID - get the keyboards identifier code.
                              ;
                              ; Parameters: none
                              ; Returns: d = $AB83, $00 on fail
                              ; Modifies: d, KeybdID updated
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetID:
 00FFF790 0C60F2                          ldb             #$F2
 00FFF792 08DF85                          bsr             KeybdSendByte
 00FFF794 08DF89                          bsr             KeybdWaitTx
 00FFF796 08DF68                          bsr             KeybdRecvByte
 00FFF798 0C5080                          bitb    #$80
 00FFF79A 026014                          bne             kgnotKbd
 00FFF79C 0C10AB                          cmpb    #$AB
 00FFF79E 026010                          bne             kgnotKbd
 00FFF7A0 08DF5E                          bsr             KeybdRecvByte
 00FFF7A2 0C5080                          bitb    #$80
 00FFF7A4 02600A                          bne             kgnotKbd
 00FFF7A6 0C1083                          cmpb    #$83
 00FFF7A8 026006                          bne             kgnotKbd
 00FFF7AA 0CC00AB83                       ldd             #$AB83
                              kgid1:
 00FFF7AD 0DD124                          std             KeybdID
 00FFF7AF 039                             rts
                              kgnotKbd:
 00FFF7B0 04F                             clra
 00FFF7B1 05F                             clrb
 00FFF7B2 020FF9                          bra             kgid1
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Initialize the keyboard.
                              ;
                              ; Parameters:
                              ;               none
                              ;       Modifies:
                              ;               none
                              ; Returns:
                              ;               none
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdInit:
 00FFF7B4 034026                          pshs    d,y
 00FFF7B6 18E000005                       ldy             #5
                              kbdi0002:
 00FFF7B9 08DF7E                          bsr             Wait10ms
 00FFF7BB 0C6FFF                          ldb             #-1                                     ; send reset code to keyboard
 00FFF7BD 0150F7FFFE30401                 stb             KEYBD+1                 ; write $FF to status reg to clear TX state
 00FFF7C2 08DF55                          bsr             KeybdSendByte   ; now write to transmit register
 00FFF7C4 08DF59                          bsr             KeybdWaitTx             ; wait until no longer busy
 00FFF7C6 08DF38                          bsr             KeybdRecvByte   ; look for an ACK ($FA)
 00FFF7C8 0C10FA                          cmpb    #$FA
 00FFF7CA 026021                          bne             kbdiTryAgain
 00FFF7CC 08DF32                          bsr             KeybdRecvByte   ; look for BAT completion code ($AA)
 00FFF7CE 0C10FC                          cmpb    #$FC                            ; reset error ?
 00FFF7D0 02701B                          beq             kbdiTryAgain
 00FFF7D2 0C10AA                          cmpb    #$AA                            ; reset complete okay ?
 00FFF7D4 026017                          bne             kbdiTryAgain
 
                                      ; After a reset, scan code set #2 should be active
                              .config:
 00FFF7D6 0C60F0                          ldb             #$F0                    ; send scan code select
 00FFF7D8 0150F7FFFE60000                 stb             LEDS
 00FFF7DD 08DF3A                          bsr             KeybdSendByte
 00FFF7DF 08DF3E                          bsr             KeybdWaitTx
 00FFF7E1 05D                             tstb
 00FFF7E2 02B009                          bmi             kbdiTryAgain
 00FFF7E4 08DF1A                          bsr             KeybdRecvByte   ; wait for response from keyboard
 00FFF7E6 04D                             tsta
 00FFF7E7 02B004                          bmi             kbdiTryAgain
 00FFF7E9 0C10FA                          cmpb    #$FA
 00FFF7EB 02700C                          beq             kbdi0004
                              kbdiTryAgain:
 00FFF7ED 0313FF                          dey
 00FFF7EF 026FC8                          bne       kbdi0002
                              .keybdErr:
 00FFF7F1 0CCFFF819                       ldd             #msgBadKeybd
 00FFF7F4 01700FB6A                       lbsr    DisplayStringCRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF7F7 020014                          bra             ledxit
                              kbdi0004:
 00FFF7F9 0C6002                          ldb             #2                      ; select scan code set #2
 00FFF7FB 08DF1C                          bsr             KeybdSendByte
 00FFF7FD 08DF20                          bsr             KeybdWaitTx
 00FFF7FF 04D                             tsta
 00FFF800 02BFEB                          bmi             kbdiTryAgain
 00FFF802 08DEFC                          bsr             KeybdRecvByte   ; wait for response from keyboard
 00FFF804 04D                             tsta
 00FFF805 02BFE6                          bmi             kbdiTryAgain
 00FFF807 0C10FA                          cmpb    #$FA
 00FFF809 026FE2                          bne             kbdiTryAgain
 00FFF80B 08DF83                          bsr             KeybdGetID
                              ledxit:
 00FFF80D 0C6007                          ldb             #$07
 00FFF80F 08DF6C                          bsr             KeybdSetLED
 00FFF811 08DF3A                          bsr             Wait300ms
 00FFF813 0C6000                          ldb             #$00
 00FFF815 08DF66                          bsr             KeybdSetLED
 00FFF817 0350A6                          puls    d,y,pc
 
                              msgBadKeybd:
 00FFF819 04B06507906206F061072           fcb             "Keyboard error",0
 00FFF820 06402006507207206F072
 00FFF827 000
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              DBGCheckForKey:
 00FFF828 020F37                          bra             KeybdGetStatus
 
 
                              ; KeyState2_
                              ; 876543210
                              ; ||||||||+ = shift
                              ; |||||||+- = alt
                              ; ||||||+-- = control
                              ; |||||+--- = numlock
                              ; ||||+---- = capslock
                              ; |||+----- = scrolllock
                              ; ||+------ =
                              ; |+------- = 
                              ; +-------- = extended
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Parameters:
                              ;               b:      0 = non blocking, otherwise blocking
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              DBGGetKey:
 00FFF82A 034010                          pshs    x
                              dbgk2:
 00FFF82C 034004                          pshs    b
 00FFF82E 08DF31                          bsr             KeybdGetStatus
 00FFF830 0C4080                          andb    #$80                                                    ; is key available?
 00FFF832 035004                          puls    b
 00FFF834 026008                          bne             dbgk1                                                   ; branch if key
 00FFF836 05D                             tstb                                                                            ; block?
 00FFF837 027FF3                          beq             dbgk2                                                   ; If no key and blocking - loop
 00FFF839 0CCFFFFFF                       ldd             #-1                                                             ; return -1 if no block and no key
 00FFF83C 035090                          puls    x,pc
                              dbgk1:
 00FFF83E 08DF31                          bsr             KeybdGetScancode
                                      ; Make sure there is a small delay between scancode reads
 00FFF840 08E000014                       ldx             #20
                              dbgk3:
 00FFF843 0301FF                          leax    -1,x
 00FFF845 026FFC                          bne             dbgk3
                                      ; switch on scan code
 00FFF847 0C10F0                          cmpb    #SC_KEYUP
 00FFF849 026006                          bne             dbgk4
 00FFF84B 00F120                          clr             KeyState1                                       ; make KeyState1 = -1
 00FFF84D 000120                          neg             KeyState1
 00FFF84F 020FDB                          bra             dbgk2                                                   ; loop back
                              dbgk4:
 00FFF851 0C10E0                          cmpb    #SC_EXTEND
 00FFF853 026008                          bne             dbgk5
 00FFF855 096121                          lda             KeyState2
 00FFF857 08A080                          ora             #$80
 00FFF859 097121                          sta             KeyState2
 00FFF85B 020FCF                          bra             dbgk2
                              dbgk5:
 00FFF85D 0C1014                          cmpb    #SC_CTRL
 00FFF85F 026016                          bne             dbgkNotCtrl
 00FFF861 00D120                          tst             KeyState1
 00FFF863 02B008                          bmi             dbgk7
 00FFF865 096121                          lda             KeyState2
 00FFF867 08A004                          ora             #4
 00FFF869 097121                          sta             KeyState2
 00FFF86B 020006                          bra             dbgk8
                              dbgk7:
 00FFF86D 096121                          lda             KeyState2
 00FFF86F 084FFB                          anda    #~4
 00FFF871 097121                          sta             KeyState2
                              dbgk8:
 00FFF873 00F120                          clr             KeyState1
 00FFF875 020FB5                          bra             dbgk2
                              dbgkNotCtrl:
 00FFF877 0C1059                          cmpb    #SC_RSHIFT
 00FFF879 026016                          bne             dbgkNotRshift
 00FFF87B 00D120                          tst             KeyState1
 00FFF87D 02B008                          bmi             dbgk9
 00FFF87F 096121                          lda             KeyState2
 00FFF881 08A001                          ora             #1
 00FFF883 097121                          sta             KeyState2
 00FFF885 020006                          bra             dbgk10
                              dbgk9:
 00FFF887 096121                          lda             KeyState2
 00FFF889 084FFE                          anda    #~1
 00FFF88B 097121                          sta             KeyState2
                              dbgk10:
 00FFF88D 00F120                          clr             KeyState1
 00FFF88F 020F9B                          bra             dbgk2
                              dbgkNotRshift:
 00FFF891 0C1077                          cmpb    #SC_NUMLOCK
 00FFF893 026013                          bne             dbgkNotNumlock
 00FFF895 096121                          lda             KeyState2
 00FFF897 088010                          eora    #16
 00FFF899 097121                          sta             KeyState2
 00FFF89B 096122                          lda             KeyLED
 00FFF89D 088002                          eora    #2
 00FFF89F 097122                          sta             KeyLED
 00FFF8A1 01F089                          tfr             a,b
 00FFF8A3 04F                             clra
 00FFF8A4 08DED7                          bsr             KeybdSetLED
 00FFF8A6 020F84                          bra             dbgk2
                              dbgkNotNumlock:
 00FFF8A8 0C1058                          cmpb    #SC_CAPSLOCK
 00FFF8AA 026013                          bne             dbgkNotCapslock
 00FFF8AC 096121                          lda             KeyState2
 00FFF8AE 088020                          eora    #32
 00FFF8B0 097121                          sta             KeyState2
 00FFF8B2 096122                          lda             KeyLED
 00FFF8B4 088004                          eora    #4
 00FFF8B6 097122                          sta             KeyLED
 00FFF8B8 01F089                          tfr             a,b
 00FFF8BA 04F                             clra
 00FFF8BB 08DEC0                          bsr             KeybdSetLED
 00FFF8BD 020F6D                          bra             dbgk2
                              dbgkNotCapslock:
 00FFF8BF 0C107E                          cmpb    #SC_SCROLLLOCK
 00FFF8C1 026013                          bne             dbgkNotScrolllock
 00FFF8C3 096121                          lda             KeyState2
 00FFF8C5 088040                          eora    #64
 00FFF8C7 097121                          sta             KeyState2
 00FFF8C9 096122                          lda             KeyLED
 00FFF8CB 088001                          eora    #1
 00FFF8CD 097122                          sta             KeyLED
 00FFF8CF 01F089                          tfr             a,b
 00FFF8D1 04F                             clra
 00FFF8D2 08DEA9                          bsr             KeybdSetLED
 00FFF8D4 020F56                          bra             dbgk2
                              dbgkNotScrolllock:
 00FFF8D6 0C1011                          cmpb    #SC_ALT
 00FFF8D8 026016                          bne             dbgkNotAlt
 00FFF8DA 00D120                          tst             KeyState1
 00FFF8DC 02B008                          bmi             dbgk11
 00FFF8DE 096121                          lda             KeyState2
 00FFF8E0 08A002                          ora             #2
 00FFF8E2 097121                          sta             KeyState2
 00FFF8E4 020006                          bra             dbgk12
                              dbgk11:
 00FFF8E6 096121                          lda             KeyState2
 00FFF8E8 084FFD                          anda    #~2
 00FFF8EA 097121                          sta             KeyState2
                              dbgk12:
 00FFF8EC 00F120                          clr             KeyState1
 00FFF8EE 020F3C                          bra             dbgk2
                              dbgkNotAlt:
 00FFF8F0 00D120                          tst             KeyState1
 00FFF8F2 027004                          beq             dbgk13
 00FFF8F4 00F120                          clr             KeyState1
 00FFF8F6 020F34                          bra             dbgk2
                              dbgk13:
 00FFF8F8 096121                          lda             KeyState2               ; Check for CTRL-ALT-DEL
 00FFF8FA 084006                          anda    #6
 00FFF8FC 081006                          cmpa    #6
 00FFF8FE 026008                          bne             dbgk14
 00FFF900 0C1071                          cmpb    #SC_DEL 
 00FFF902 026004                          bne             dbgk14
 00FFF904 06E90FFFFFFE                    jmp             [$FFFFFE]               ; jump to reset vector
                              dbgk14:
 00FFF908 00D121                          tst             KeyState2               ; extended code?
 00FFF90A 02A00B                          bpl             dbgk15
 00FFF90C 096121                          lda             KeyState2
 00FFF90E 08407F                          anda    #$7F
 00FFF910 097121                          sta             KeyState2
 00FFF912 08EFFF680                       ldx             #keybdExtendedCodes
 00FFF915 020019                          bra             dbgk18
                              dbgk15:
 00FFF917 096121                          lda             KeyState2               ; Is CTRL down?
 00FFF919 084004                          anda    #4
 00FFF91B 027005                          beq             dbgk16
 00FFF91D 08EFFF600                       ldx             #keybdControlCodes
 00FFF920 02000E                          bra             dbgk18
                              dbgk16:
 00FFF922 096121                          lda             KeyState2               ; Is shift down?
 00FFF924 084001                          anda    #1
 00FFF926 027005                          beq             dbgk17
 00FFF928 08EFFF500                       ldx             #shiftedScanCodes
 00FFF92B 020003                          bra             dbgk18
                              dbgk17:
 00FFF92D 08EFFF400                       ldx             #unshiftedScanCodes
                              dbgk18:
 00FFF930 03A                             abx
 00FFF931 0E6804                          ldb             ,x
 00FFF933 04F                             clra
 00FFF934 035090                          puls    x,pc                            ; and return
                                      
 
 00FFF936 04B04505904204F041052           fcb             "KEYBOARD"
 00FFF93D 044
 00FFF93E FFF948                          fcw             KeybdOpen
 00FFF940 FFF949                          fcw             KeybdClose
 00FFF942 FFF94A                          fcw             KeybdRead
 00FFF944 FFF94B                          fcw             KeybdWrite
 00FFF946 FFF94C                          fcw             KeybdSeek
 
                              ; Keyboard Open:
                              ; Initialize the keyboard buffer head and tail indexes
                              ;
                              KeybdOpen:
 00FFF948 039                             rts
 
                              ; Keyboard Close:
                              ; Nothing to do except maybe clear the keyboard buffer
                              ;
                              KeybdClose:
 00FFF949 039                             rts
                              ;
                              KeybdRead:
 00FFF94A 039                             rts
                              ;
                              KeybdWrite:
 00FFF94B 039                             rts
 
                              KeybdSeek:
 00FFF94C 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Check if there is a keyboard character available. If so return true (<0)
                              ; otherwise return false (0) in accb.
                              ;------------------------------------------------------------------------------
                              ;
                              KeybdCheckForKeyDirect:
 00FFF94D 020ED9                          bra             DBGCheckForKey
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              INCH:
 00FFF94F 0CCFFFFFF                       ldd             #-1                             ; block if no key available
 00FFF952 020ED6                          bra             DBGGetKey
 
                              INCHE:
 00FFF954 08DFF9                          bsr             INCH
 00FFF956 020009                          bra             INCHEK3
 
                              INCHEK:
 00FFF958 08DFF5                          bsr             INCH
 00FFF95A 01507DFFFFFCA00                 tst             KeybdEcho
 00FFF95F 02700B                          beq             INCHEK1
                              INCHEK3:
 00FFF961 08100D                          cmpa    #CR
 00FFF963 026005                          bne             INCHEK2
 00FFF965 01700D76A                       lbsr            CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF968 020002                          bra             INCHEK1
                              INCHEK2:
 00FFF96A 08D92E                          bsr             DisplayChar
                              INCHEK1:
 00FFF96C 039                             rts
 
                              OUTCH:
 00FFF96D 06E90F000800                    jmp             [CharOutVec]
 
                              ;------------------------------------------------------------------------------
                              ; r1 0=echo off, non-zero = echo on
                              ;------------------------------------------------------------------------------
                              ;
                              SetKeyboardEcho:
 00FFF971 0150F7FFFFFCA00                 stb             KeybdEcho
 00FFF976 039                             rts
 
 
                              ;------------------------------------------------------------------------------
                              ; Parameters:
                              ;               x,d     bitmap of sprites to enable
                              ;------------------------------------------------------------------------------
 
                              ShowSprites:
 00FFF977 0150BFFFFE103C0                 stx             SPRITE_CTRL+SPRITE_EN
 00FFF97C 0150FDFFFE103C2                 std             SPRITE_CTRL+SPRITE_EN+2
 00FFF981 039                             rts
 
                              ;==============================================================================
                              ; System Monitor
                              ;==============================================================================
                              ;
                              MonitorStart:
 00FFF982 0CCFFFAE0                       ldd             #HelpMsg
 00FFF985 08D9CC                          bsr             DisplayString
                              Monitor:
 00FFF987 03280F003FFF                    leas    $3FFF                           ; reset stack pointer
 00FFF98B 05F                             clrb                                                    ; turn off keyboard echo
 00FFF98C 08DFE3                          bsr             SetKeyboardEcho
                              ;       jsr             RequestIOFocus
                              PromptLn:
 00FFF98E 01700D741                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF991 0C6024                          ldb             #'$'
 00FFF993 08DFD8                          bsr             OUTCH
 
                              ; Get characters until a CR is keyed
                                      
                              Prompt3:
 00FFF995 0CCFFFFFF                       ldd             #-1                                     ; block until key present
 00FFF998 08DE90                          bsr             DBGGetKey
 00FFF99A 0C100D                          cmpb    #CR
 00FFF99C 027004                          beq             Prompt1
 00FFF99E 08DFCD                          bsr             OUTCH
 00FFF9A0 020FF3                          bra             Prompt3
 
                              ; Process the screen line that the CR was keyed on
                              ;
                              Prompt1:
 00FFF9A2 0CC005050                       ldd             #$5050
 00FFF9A5 0150FDFFFE60000                 std             LEDS
 00FFF9AA 0F6800000                       ldb             RunningID
 00FFF9AD 0C103D                          cmpb    #61
 00FFF9AF 022FE4                          bhi             Prompt3
 00FFF9B1 0CC005151                       ldd             #$5151
 00FFF9B4 0150FDFFFE60000                 std             LEDS
 00FFF9B9 00F111                          clr             CursorCol                       ; go back to the start of the line
 00FFF9BB 08D8BB                          bsr             CalcScreenLoc   ; calc screen memory location
 00FFF9BD 01F002                          tfr             d,y
 00FFF9BF 0CC005252                       ldd             #$5252
 00FFF9C2 0150FDFFFE60000                 std             LEDS
 00FFF9C7 08D055                          bsr             MonGetNonSpace
 00FFF9C9 0C1024                          cmpb    #'$'
 00FFF9CB 026009                          bne             Prompt2                 ; skip over '$' prompt character
 00FFF9CD 086353                          lda             #$5353
 00FFF9CF 0150FDFFFE60000                 std             LEDS
 00FFF9D4 08D048                          bsr             MonGetNonSpace
 
                              ; Dispatch based on command character
                              ;
                              Prompt2:
 00FFF9D6 0C103F                          cmpb    #'?'                    ; $? - display help
 00FFF9D8 026007                          bne             PromptC
 00FFF9DA 0CCFFFAE0                       ldd             #HelpMsg
 00FFF9DD 08D974                          bsr             DisplayString
 00FFF9DF 020FA6                          bra             Monitor
                              PromptC:
 00FFF9E1 0C1043                          cmpb    #'C'
 00FFF9E3 026007                          bne             PromptD
 00FFF9E5 01700F7E5                       lbsr            ClearScreen
*** warning 1: Long branch within short branch range could be optimized
 00FFF9E8 08D856                          bsr             HomeCursor
 00FFF9EA 020F9B                          bra             Monitor
                              PromptD:
 00FFF9EC 0C1044                          cmpb    #'D'
 00FFF9EE 026008                          bne             PromptF
 00FFF9F0 08D027                          bsr             MonGetch
 00FFF9F2 0C1052                          cmpb    #'R'
 00FFF9F4 026F9F                          bne             Prompt3
 00FFF9F6 020193                          bra             DumpRegs
                              PromptF:
 00FFF9F8 0C1046                          cmpb    #'F'
 00FFF9FA 02600F                          bne             PromptJ
 00FFF9FC 08D01B                          bsr             MonGetch
 00FFF9FE 0C1049                          cmpb    #'I'
 00FFFA00 026F85                          bne             Monitor
 00FFFA02 08D015                          bsr             MonGetch
 00FFFA04 0C1047                          cmpb    #'G'
 00FFFA06 026F7F                          bne             Monitor
 00FFFA08 07EFE0000                       jmp             $FE0000
                              PromptJ:
 00FFFA0B 0C104A                          cmpb    #'J'
 00FFFA0D 1270001BF                       lbeq    jump_to_code
                              PromptR:
 00FFFA10 0C1052                          cmpb    #'R'
 00FFFA12 026F73                          bne             Monitor
 00FFFA14 01700E5E9                       lbsr    ramtest
*** warning 1: Long branch within short branch range could be optimized
 00FFFA17 020F6E                          bra             Monitor
 
                              MonGetch:
 00FFFA19 0E6A04                          ldb             ,y
 00FFFA1B 031201                          leay    1,y
 00FFFA1D 039                             rts
 
                              MonGetNonSpace:
 00FFFA1E 08DFF9                          bsr             MonGetCh
 00FFFA20 0C1020                          cmpb    #' '
 00FFFA22 027FFA                          beq             MonGetNonSpace
 00FFFA24 0C1009                          cmpb    #9              ; tab
 00FFFA26 027FF6                          beq             MonGetNonSpace
 00FFFA28 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Ignore blanks in the input
                              ; Y = text pointer
                              ; D destroyed
                              ;------------------------------------------------------------------------------
                              ;
                              ignBlanks:
                              ignBlanks1:
 00FFFA29 08DFEE                          bsr             MonGetch
 00FFFA2B 0C1020                          cmpb    #' '
 00FFFA2D 027FFA                          beq             ignBlanks1
 00FFFA2F 0313FF                          leay    -1,y
 00FFFA31 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              GetTwoParams:
 00FFFA32 08DFF5                          bsr             ignBlanks
 00FFFA34 08D02E                          bsr             GetHexNumber    ; get start address of dump
 00FFFA36 0DC910                          ldd             mon_numwka
 00FFFA38 0DD920                          std             mon_r1
 00FFFA3A 0DC912                          ldd             mon_numwka+2
 00FFFA3C 0DD922                          std             mon_r1+2
 00FFFA3E 08DFE9                          bsr             ignBlanks
 00FFFA40 08D022                          bsr             GetHexNumber    ; get end address of dump
 00FFFA42 0DC910                          ldd             mon_numwka
 00FFFA44 0DD922                          std             mon_r2
 00FFFA46 0DC912                          ldd             mon_numwka+2
 00FFFA48 0DD924                          std             mon_r2+2
 00FFFA4A 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Get a range, the end must be greater or equal to the start.
                              ;------------------------------------------------------------------------------
                              GetRange:
 00FFFA4B 08DFE5                          bsr             GetTwoParams
 00FFFA4D 0DC924                          ldd             mon_r2+2
 00FFFA4F 093922                          subd    mon_r1+2
 00FFFA51 0DC922                          ldd             mon_r2
 00FFFA53 0D2921                          sbcb    mon_r1+1
 00FFFA55 092920                          sbca    mon_r1
 00FFFA57 12500006C                       lbcs    DisplayErr
 00FFFA5A 039                             rts
 
                              shl_numwka:
 00FFFA5B 008913                          asl             mon_numwka+3
 00FFFA5D 009912                          rol             mon_numwka+2
 00FFFA5F 009911                          rol             mon_numwka+1
 00FFFA61 009910                          rol             mon_numwka
 00FFFA63 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Get a hexidecimal number. Maximum of nine digits.
                              ; Y = text pointer (updated)
                              ; D = number of digits
                              ; mon_numwka contains number
                              ;------------------------------------------------------------------------------
                              ;
                              GetHexNumber:
 00FFFA64 04F05F                          clrd
 00FFFA66 0DD910                          std             mon_numwka
 00FFFA68 0DD912                          std             mon_numwka+2
 00FFFA6A 034010                          pshs    x
 00FFFA6C 08E000000                       ldx             #0                                      ; max 9 eight digits
                              gthxn2:
 00FFFA6F 08DFA8                          bsr             MonGetch
 00FFFA71 08D01D                          bsr             AsciiToHexNybble
 00FFFA73 0C1FFF                          cmpb    #-1
 00FFFA75 027015                          beq             gthxn1
 00FFFA77 08DFE2                          bsr             shl_numwka
 00FFFA79 08DFE0                          bsr             shl_numwka
 00FFFA7B 08DFDE                          bsr             shl_numwka
 00FFFA7D 08DFDC                          bsr             shl_numwka
 00FFFA7F 0C400F                          andb    #$0f
 00FFFA81 0DA913                          orb             mon_numwka+3
 00FFFA83 0D7913                          stb             mon_numwka+3
 00FFFA85 030001                          inx
 00FFFA87 08C000009                       cmpx    #9
 00FFFA8A 025FE3                          blo             gthxn2
                              gthxn1:
 00FFFA8C 01F010                          tfr             x,d
 00FFFA8E 035090                          puls    x,pc
 
                              ;GetDecNumber:
                              ;       phx
                              ;       push    r4
                              ;       push    r5
                              ;       ldx             #0
                              ;       ld              r4,#10
                              ;       ld              r5,#10
                              ;gtdcn2:
                              ;       jsr             MonGetch
                              ;       jsr             AsciiToDecNybble
                              ;       cmp             #-1
                              ;       beq             gtdcn1
                              ;       mul             r2,r2,r5
                              ;       add             r2,r1
                              ;       dec             r4
                              ;       bne             gtdcn2
                              ;gtdcn1:
                              ;       txa
                              ;       pop             r5
                              ;       pop             r4
                              ;       plx
                              ;       rts
 
                              ;------------------------------------------------------------------------------
                              ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                              ; to a hex nybble.
                              ;------------------------------------------------------------------------------
                              ;
                              AsciiToHexNybble:
 00FFFA90 0C1030                          cmpb    #'0'
 00FFFA92 024021                          bcc             gthx3
 00FFFA94 0C103A                          cmpb    #'9'+1
 00FFFA96 025003                          bcs             gthx5
 00FFFA98 0C0030                          subb    #'0'
 00FFFA9A 039                             rts
                              gthx5:
 00FFFA9B 0C1041                          cmpb    #'A'
 00FFFA9D 024016                          bcc             gthx3
 00FFFA9F 0C1047                          cmpb    #'F'+1
 00FFFAA1 025005                          bcs             gthx6
 00FFFAA3 0C0041                          subb    #'A'
 00FFFAA5 0CB00A                          addb    #10
 00FFFAA7 039                             rts
                              gthx6:
 00FFFAA8 0C1061                          cmpb    #'a'
 00FFFAAA 024009                          bcc             gthx3
 00FFFAAC 0C107B                          cmpb    #'z'+1
 00FFFAAE 025005                          bcs             gthx3
 00FFFAB0 0C0061                          subb    #'a'
 00FFFAB2 0CB00A                          addb    #10
 00FFFAB4 039                             rts
                              gthx3:
 00FFFAB5 0C6FFF                          ldb             #-1             ; not a hex number
 00FFFAB7 039                             rts
 
                              AsciiToDecNybble:
 00FFFAB8 0C1030                          cmpb    #'0'
 00FFFABA 024007                          bcc             gtdc3
 00FFFABC 0C103A                          cmpb    #'9'+1
 00FFFABE 025003                          bcs             gtdc3
 00FFFAC0 0C0030                          subb    #'0'
 00FFFAC2 039                             rts
                              gtdc3:
 00FFFAC3 0C6FFF                          ldb             #-1
 00FFFAC5 039                             rts
 
                              DisplayErr:
 00FFFAC6 08EFFFAD8                       ldx             #msgErr
 00FFFAC9 04F05F                          clrd
 00FFFACB 08D003                          bsr             DisplayStringDX
 00FFFACD 07EFFF987                       jmp             Monitor
 
                              DisplayStringDX
 00FFFAD0 0DD024                          std             Strptr
 00FFFAD2 09F026                          stx             Strptr+2
 00FFFAD4 0BDFFF353                       jsr             DisplayString
 00FFFAD7 039                             rts
 
                              msgErr:
 00FFFAD8 02A02A04507207200D00A           fcb     "**Err",CR,LF,0
 00FFFADF 000
 
                              HelpMsg:
 00FFFAE0 03F02003D020044069073           fcb             "? = Display help",CR,LF
 00FFFAE7 07006C061079020068065
 00FFFAEE 06C07000D00A
 00FFFAF2 04304C05302003D020063           fcb     "CLS = clear screen",CR,LF
 00FFFAF9 06C065061072020073063
 00FFFB00 07206506506E00D00A
                              ;       db      "S = Boot from SD Card",CR,LF
                              ;       db      ": = Edit memory bytes",CR,LF
                              ;       db      "L = Load sector",CR,LF
                              ;       db      "W = Write sector",CR,LF
 00FFFB06 04405202003D020044075           fcb "DR = Dump registers",CR,LF
 00FFFB0D 06D070020072065067069
 00FFFB14 07307406507207300D00A
                              ;       db      "D = Dump memory",CR,LF
                              ;       db      "F = Fill memory",CR,LF
                              ;       db  "FL = Dump I/O Focus List",CR,LF
 00FFFB1B 04604904702003D020073           fcb "FIG = start FIG Forth",CR,LF
 00FFFB22 074061072074020046049
 00FFFB29 04702004606F072074068
 00FFFB30 00D00A
                              ;       db      "KILL n = kill task #n",CR,LF
                              ;       db      "B = start tiny basic",CR,LF
                              ;       db      "b = start EhBasic 6502",CR,LF
 00FFFB32 04A02003D02004A07506D           fcb     "J = Jump to code",CR,LF
 00FFFB39 07002007406F02006306F
 00FFFB40 06406500D00A
 00FFFB44 05204104D02003D020074           fcb "RAM = test RAM",CR,LF
 00FFFB4B 06507307402005204104D
 00FFFB52 00D00A
                              ;       db      "R[n] = Set register value",CR,LF
                              ;       db      "r = random lines - test bitmap",CR,LF
                              ;       db      "e = ethernet test",CR,LF
                              ;       db      "T = Dump task list",CR,LF
                              ;       db      "TO = Dump timeout list",CR,LF
                              ;       db      "TI = display date/time",CR,LF
                              ;       db      "TEMP = display temperature",CR,LF
                              ;       db      "P = Piano",CR,LF,0
 00FFFB54 000                             fcb             0
 
                              msgRegHeadings
 00FFFB55 00D00A02004402F041042           fcb     CR,LF," D/AB   X    Y    U    S     PC    DP CCR",CR,LF,0
 00FFFB5C 020020020058020020020
 00FFFB63 020059020020020020055
 00FFFB6A 020020020020053020020
 00FFFB71 020020020050043020020
 00FFFB78 020020044050020043043
 00FFFB7F 05200D00A000
 
                              nHEX4:
 00FFFB83 0BDFFD2D2                       jsr             HEX4
 00FFFB86 039                             rts
 
                              nXBLANK:
 00FFFB87 0C6020                          ldb             #' '
 00FFFB89 020DE2                          bra             OUTCH
 
                              DumpRegs
 00FFFB8B 08EFFFB55                       ldx             #msgRegHeadings
 00FFFB8E 0CC0000FF                       ldd             #msgRegHeadings>>16
 00FFFB91 0BDFFFAD0                       jsr             DisplayStringDX
 00FFFB94 08DFF1                          bsr             nXBLANK
 00FFFB96 0DC900                          ldd             mon_DSAVE
 00FFFB98 08DFE9                          bsr             nHEX4
 00FFFB9A 08DFEB                          bsr             nXBLANK
 00FFFB9C 0DC902                          ldd             mon_XSAVE
 00FFFB9E 08DFE3                          bsr             nHEX4
 00FFFBA0 08DFE5                          bsr             nXBLANK
 00FFFBA2 0DC904                          ldd             mon_YSAVE
 00FFFBA4 08DFDD                          bsr             nHEX4
 00FFFBA6 08DFDF                          bsr             nXBLANK
 00FFFBA8 0DC906                          ldd             mon_USAVE
 00FFFBAA 08DFD7                          bsr             nHEX4
 00FFFBAC 08DFD9                          bsr             nXBLANK
 00FFFBAE 0DC908                          ldd             mon_SSAVE
 00FFFBB0 08DFD1                          bsr             nHEX4
 00FFFBB2 08DFD3                          bsr             nXBLANK
 00FFFBB4 0DC90A                          ldd             mon_PCSAVE
 00FFFBB6 08DFCB                          bsr             nHEX4
 00FFFBB8 0DC90C                          ldd             mon_PCSAVE+2
 00FFFBBA 08DFC7                          bsr             nHEX4
 00FFFBBC 08DFC9                          bsr             nXBLANK
 00FFFBBE 0DC90E                          ldd             mon_DPRSAVE
 00FFFBC0 0BDFFD2CE                       jsr             HEX2
 00FFFBC3 08DFC2                          bsr             nXBLANK
 00FFFBC5 09690F                          lda             mon_CCRSAVE
 00FFFBC7 0BDFFD2CE                       jsr             HEX2
 00FFFBCA 08DFBB                          bsr             nXBLANK
 00FFFBCC 07EFFF987                       jmp             Monitor
 
                              ; Jump to code
                              jump_to_code:
 00FFFBCF 08DE93                          bsr             GetHexNumber
 00FFFBD1 01A010                          sei
 00FFFBD3 1DE908                          lds             mon_SSAVE
 00FFFBD5 0CCFFFC02                       ldd             #<jtc_exit
 00FFFBD8 034006                          pshs    d
 00FFFBDA 0CC000000                       ldd             #>jtc_exit
 00FFFBDD 034004                          pshs    b
 00FFFBDF 0DC912                          ldd             mon_numwka+2
 00FFFBE1 034006                          pshs    d
 00FFFBE3 0DC910                          ldd             mon_numwka
 00FFFBE5 034006                          pshs    d
 00FFFBE7 0DC906                          ldd             mon_USAVE
 00FFFBE9 034006                          pshs    d
 00FFFBEB 0DC904                          ldd             mon_YSAVE
 00FFFBED 034006                          pshs    d
 00FFFBEF 0DC902                          ldd             mon_XSAVE
 00FFFBF1 034006                          pshs    d
 00FFFBF3 09690E                          lda             mon_DPRSave
 00FFFBF5 034002                          pshs    a
 00FFFBF7 0DC900                          ldd             mon_DSAVE
 00FFFBF9 034006                          pshs    d
 00FFFBFB 09690F                          lda             mon_CCRSAVE
 00FFFBFD 034002                          pshs    a
 00FFFBFF 0150350FF                       puls    far ccr,d,dpr,x,y,u,pc
                              jtc_exit:
 00FFFC02 034001                          pshs    ccr
 00FFFC04 0DD900                          std             mon_DSAVE
 00FFFC06 09F902                          stx             mon_XSAVE
 00FFFC08 19F904                          sty             mon_YSAVE
 00FFFC0A 0DF906                          stu             mon_USAVE
 00FFFC0C 01F0B8                          tfr             dpr,a
 00FFFC0E 09790E                          sta             mon_DPRSAVE
 00FFFC10 035002                          puls    a
 00FFFC12 09790F                          sta             mon_CCRSAVE
 00FFFC14 1DF908                          sts             mon_SSAVE
 00FFFC16 1CE003FFF                       lds             #$3FFF
                                      ; todo set according to coreid
 00FFFC19 07EFFFB8B                       jmp             DumpRegs
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              swi3_rout:
 00FFFC1C 01A010                          sei
 00FFFC1E 035002                          puls    a
 00FFFC20 09790F                          sta             mon_CCRSAVE
 00FFFC22 03507E                          puls    D,DPR,X,Y,U
 00FFFC24 0DD900                          std             mon_DSAVE
 00FFFC26 09F902                          stx             mon_XSAVE
 00FFFC28 19F904                          sty             mon_YSAVE
 00FFFC2A 0DF906                          stu             mon_USAVE
 00FFFC2C 01F0B8                          tfr             dpr,a
 00FFFC2E 09790E                          sta             mon_DPRSAVE
 00FFFC30 035006                          puls    D
 00FFFC32 0DD90A                          std             mon_PCSAVE
 00FFFC34 035006                          puls    D
 00FFFC36 0DD90C                          std             mon_PCSAVE+2
 00FFFC38 1DF908                          sts             mon_SSAVE
 00FFFC3A 1CE003FFF                       lds             #$3FFF
 00FFFC3D 01C0EF                          cli
 00FFFC3F 07EFFFB8B                       jmp             DumpRegs
                              swi3_exit:
 00FFFC42 01A010                          sei
 00FFFC44 1DE908                          lds             mon_SSAVE
 00FFFC46 0DC90C                          ldd             mon_PCSAVE+2
 00FFFC48 034006                          pshs    d
 00FFFC4A 0DC90A                          ldd             mon_PCSAVE
 00FFFC4C 034006                          pshs    d
 00FFFC4E 0DE906                          ldu             mon_USAVE
 00FFFC50 19E904                          ldy             mon_YSAVE
 00FFFC52 09E902                          ldx             mon_XSAVE
 00FFFC54 034070                          pshs    x,y,u
 00FFFC56 09690E                          lda             mon_DPRSAVE
 00FFFC58 034002                          pshs    a
 00FFFC5A 0DC900                          ldd             mon_DSAVE
 00FFFC5C 034006                          pshs    d
 00FFFC5E 09690F                          lda             mon_CCRSAVE
 00FFFC60 034002                          pshs    a
 00FFFC62 01F08A                          tfr             a,ccr
 00FFFC64 01C0EF                          cli
 00FFFC66 03B                             rti
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              irq_rout:
                                      ; Reset the edge sense circuit in the PIC
 00FFFC67 086002                          lda             #2                              ; Timer is IRQ #2
 00FFFC69 0150B7FFFE3F006                 sta             PIC+6                   ; register 6 is edge sense reset reg    
 
 00FFFC6E 09779A                          sta             IrqSource               ; stuff a byte indicating the IRQ source for PEEK()
 00FFFC70 0960DF                          lda             IrqBase                 ; get the IRQ flag byte
 00FFFC72 044                             lsra
 00FFFC73 09A0DF                          ora             IrqBase
 00FFFC75 0840E0                          anda    #$E0
 00FFFC77 0970DF                          sta             IrqBase
 
 00FFFC79 01507CFFFE0006E                 inc             TEXTSCR+110             ; update IRQ live indicator on screen
                                      
                                      ; flash the cursor
                                      ; only bother to flash the cursor for the task with the IO focus.
 00FFFC7E 0150B6FFFFFFFE0                 lda             COREID
 00FFFC83 091100                          cmpa    IOFocusID
 00FFFC85 026021                          bne             tr1a
 00FFFC87 096114                          lda             CursorFlash             ; test if we want a flashing cursor
 00FFFC89 02701D                          beq             tr1a
 00FFFC8B 01700F5EA                       lbsr    CalcScreenLoc   ; compute cursor location in memory
*** warning 1: Long branch within short branch range could be optimized
 00FFFC8E 01F002                          tfr             d,y
 00FFFC90 0A6A09002000                    lda             $2000,y                 ; get color code $2000 higher in memory
 00FFFC94 0D67C6                          ldb             IRQFlag                 ; get counter
 00FFFC96 054                             lsrb
 00FFFC97 044                             lsra
 00FFFC98 044                             lsra
 00FFFC99 044                             lsra
 00FFFC9A 044                             lsra
 00FFFC9B 054                             lsrb
 00FFFC9C 049                             rola
 00FFFC9D 054                             lsrb
 00FFFC9E 049                             rola
 00FFFC9F 054                             lsrb
 00FFFCA0 049                             rola
 00FFFCA1 054                             lsrb
 00FFFCA2 049                             rola
 00FFFCA3 0A7A0A000E00000                 sta             $E00000,y               ; store the color code back to memory
                              tr1a
 00FFFCA8 03B                             rti
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              nmi_rout:
 00FFFCA9 0150F6FFFFFFFE0                 ldb             COREID
 00FFFCAE 086049                          lda             #'I'
 00FFFCB0 08EE00028                       ldx             #TEXTSCR+40
 00FFFCB3 03A                             abx
 00FFFCB4 0A7804                          sta             ,x
 00FFFCB6 03B                             rti
 
                                      org             $FFFFF0
 00FFFFF0 012                             nop
 00FFFFF1 012                             nop
 00FFFFF2 FFFC1C                          fcw             swi3_rout
 
                                      org             $FFFFF8
 00FFFFF8 FFFC67                          fcw             irq_rout
 00FFFFFA FFF023                          fcw             start                           ; SWI
 00FFFFFC FFFCA9                          fcw             nmi_rout                ; NMI
 00FFFFFE FFF023                          fcw             start                           ; RST

8 warning(s) in pass 2.

SYMBOL TABLE
 ASCIITODECNYBBLE 02 00FFFAB8 ASCIITOHEXNYBBLE 02 00FFFA90 BIOS_SCREENS 00 17000000 BLANKLINE 02 00FFF213
 BLKCPYDST 00 00000020 BLKCPYSRC 00 0000001C   BLNKLN1 02 00FFF228 CALCSCREENLOC 02 00FFF278
 CHARCOLOR 00 00000112 CHARINVEC 00 00000804 CHAROUTVEC 00 00000800 CHECKPOINT 02 00FFF0DC
 CLEARSCREEN 02 00FFF1CD CLEARSCREENJMP 02 00FFD300 COLORCODELOCATION 00 00000014 COPYSCREENTOVIRTUALSCREEN 02 00FFF19D
 COPYVIRTUALSCREENTOSCREEN 02 00FFF175    COREID 00 FFFFFFE0        CR 00 0000000D      CRLF 02 00FFD0D2
     CRLF1 02 00FFD0D2    CRLFST 02 00FFF387       CS1 02 00FFF1DA       CS2 02 00FFF1F0
     CS2V1 02 00FFF1A9       CS3 02 00FFF1F6      CSL1 02 00FFF292     CTRLC 00 00000003
     CTRLH 00 00000008     CTRLI 00 00000009     CTRLJ 00 0000000A     CTRLK 00 0000000B
     CTRLM 00 0000000D     CTRLS 00 00000013     CTRLX 00 00000018 CURSORCOL 00 00000111
 CURSORFLASH 00 00000114 CURSORROW 00 00000110     CV2S1 02 00FFF181 DBGCHECKFORKEY 02 00FFF828
 DBGGETKEY 02 00FFF82A     DBGK1 02 00FFF83E    DBGK10 02 00FFF88D    DBGK11 02 00FFF8E6
    DBGK12 02 00FFF8EC    DBGK13 02 00FFF8F8    DBGK14 02 00FFF908    DBGK15 02 00FFF917
    DBGK16 02 00FFF922    DBGK17 02 00FFF92D    DBGK18 02 00FFF930     DBGK2 02 00FFF82C
     DBGK3 02 00FFF843     DBGK4 02 00FFF851     DBGK5 02 00FFF85D     DBGK7 02 00FFF86D
     DBGK8 02 00FFF873     DBGK9 02 00FFF887 DBGKNOTALT 02 00FFF8F0 DBGKNOTCAPSLOCK 02 00FFF8BF
 DBGKNOTCTRL 02 00FFF877 DBGKNOTNUMLOCK 02 00FFF8A8 DBGKNOTRSHIFT 02 00FFF891 DBGKNOTSCROLLLOCK 02 00FFF8D6
      DCCR 02 00FFF2A6      DCLF 02 00FFF32C     DCX10 02 00FFF2E0     DCX11 02 00FFF2F0
     DCX12 02 00FFF2EC     DCX13 02 00FFF2FC     DCX14 02 00FFF2A4      DCX3 02 00FFF31A
      DCX4 02 00FFF32E      DCX5 02 00FFF309      DCX6 02 00FFF2B7      DCX7 02 00FFF2B3
      DCX8 02 00FFF2C4      DCX9 02 00FFF2D1   DELAY3S 02 00FFF158 DISPBYTEASHEX 02 00FFF39C
 DISPDWORDASHEX 02 00FFF38A DISPLAYCHAR 02 00FFF29A DISPLAYERR 02 00FFFAC6 DISPLAYSTRING 02 00FFF353
 DISPLAYSTRINGCRLF 02 00FFF361 DISPLAYSTRINGDX 02 00FFFAD0   DISPNYB 02 00FFF3B4  DISPNYB1 02 00FFF3C2
 DISPWORDASHEX 02 00FFF393    DLY3S1 02 00FFF15B    DLY3S2 02 00FFF15F DRAM_BASE 00 10000000
    DSPJ1B 02 00FFF357    DSRETB 02 00FFF35F  DUMPREGS 02 00FFFB8B    DUMRTS 02 00FFF022
   FREEMBX 02 00000002   FREEMSG 02 00000006   FREETCB 00 0000078A GETHEXNUMBER 02 00FFFA64
  GETRANGE 02 00FFFA4B GETSCREENLOCATION 02 00FFF22F GETTWOPARAMS 02 00FFFA32      GSL1 02 00FFF23C
     GTDC3 02 00FFFAC3     GTHX3 02 00FFFAB5     GTHX5 02 00FFFA9B     GTHX6 02 00FFFAA8
    GTHXN1 02 00FFFA8C    GTHXN2 02 00FFFA6F       HC1 02 00FFF255   HELPMSG 02 00FFFAE0
      HEX2 02 00FFD2CE      HEX4 02 00FFD2D2 HOMECURSOR 02 00FFF240 HOMECURSORJMP 02 00FFD308
      ICC1 02 00FFF34F      ICC2 02 00FFF351      ICR1 02 00FFF341 IGNBLANKS 02 00FFFA29
 IGNBLANKS1 02 00FFFA29 INCCURSORPOS 02 00FFF330 INCCURSORROW 02 00FFF33F      INCH 02 00FFF94F
     INCHE 02 00FFF954    INCHEK 02 00FFF958   INCHEK1 02 00FFF96C   INCHEK2 02 00FFF96A
   INCHEK3 02 00FFF961      INIT 02 00FFF072 IOFOCUSID 00 00000100 IOFOCUSNDX 00 00000100
   IRQBASE 00 000000DF   IRQFLAG 00 000007C6 IRQSOURCE 00 0000079A  IRQ_ROUT 02 00FFFC67
  JTC_EXIT 02 00FFFC02 JUMP_TO_CODE 02 00FFFBCF  KBDI0002 02 00FFF7B9  KBDI0004 02 00FFF7F9
 KBDITRYAGAIN 02 00FFF7ED     KBGS1 02 00FFF76C     KEYBD 00 FFE30400  KEYBDACK 00 FFFFCC00
  KEYBDBAD 00 FFFFCB00 KEYBDBUFFER 00 FFFFC000 KEYBDCHECKFORKEYDIRECT 02 00FFF94D KEYBDCLOSE 02 00FFF949
  KEYBDCLR 00 FFE30402 KEYBDCONTROLCODES 02 00FFF600 KEYBDECHO 00 FFFFCA00 KEYBDEXTENDEDCODES 02 00FFF680
 KEYBDGETID 02 00FFF790 KEYBDGETSCANCODE 02 00FFF771 KEYBDGETSTATUS 02 00FFF761 KEYBDHEAD 00 FFFFC800
   KEYBDID 00 00000124 KEYBDINIT 02 00FFF7B4 KEYBDLOCKS 00 FFFFCD00 KEYBDOPEN 02 00FFF948
 KEYBDREAD 02 00FFF94A KEYBDRECVBYTE 02 00FFF700 KEYBDSEEK 02 00FFF94C KEYBDSENDBYTE 02 00FFF719
 KEYBDSETLED 02 00FFF77D KEYBDTAIL 00 FFFFC900 KEYBDWAITTX 02 00FFF71F KEYBDWRITE 02 00FFF94B
    KEYLED 00 00000122 KEYSTATE1 00 00000120 KEYSTATE2 00 00000121     KGID1 02 00FFF7AD
  KGNOTKBD 02 00FFF7B0      KRB3 02 00FFF705      KRB4 02 00FFF715      KWT1 02 00FFF724
      KWT2 02 00FFF735      LEDS 00 FFE60000    LEDXIT 02 00FFF80D    LETTER 02 00FFD2C1
        LF 00 0000000A MAX_TASKNO 00 0000003F  MONGETCH 02 00FFFA19 MONGETNONSPACE 02 00FFFA1E
   MONITOR 02 00FFF987 MONITORSTART 02 00FFF982 MON_CCRSAVE 00 0000090F MON_DPRSAVE 00 0000090E
 MON_DSAVE 00 00000900 MON_NUMWKA 00 00000910 MON_PCSAVE 00 0000090A    MON_R1 00 00000920
    MON_R2 00 00000922 MON_SSAVE 00 00000908 MON_USAVE 00 00000906 MON_XSAVE 00 00000902
 MON_YSAVE 00 00000904   MSCOUNT 00 FFFFFFE4 MSGBADKEYBD 02 00FFF819    MSGERR 02 00FFFAD8
 MSGREGHEADINGS 02 00FFFB55 MSGSTARTUP 02 00FFF0BB MULTI_SIEVE 02 00FFF0F2 MULTI_SIEVE1 02 00FFF115
 MULTI_SIEVE2 02 00FFF111 MULTI_SIEVE3 02 00FFF0FF MULTI_SIEVE4 02 00FFF128     NHEX4 02 00FFFB83
  NMAILBOX 02 00000004   NMIBASE 00 000000DC  NMI_ROUT 02 00FFFCA9   NMSGBLK 02 00000008
   NXBLANK 02 00FFFB87    ONEKEY 02 00FFD1DC     OUTCH 02 00FFF96D     PCRLF 02 00FFF373
     PDATA 02 00FFF380       PIC 00 FFE3F000    PICPTR 00 00000028     PRINT 02 00FFF37D
   PROMPT1 02 00FFF9A2   PROMPT2 02 00FFF9D6   PROMPT3 02 00FFF995   PROMPTC 02 00FFF9E1
   PROMPTD 02 00FFF9EC   PROMPTF 02 00FFF9F8   PROMPTJ 02 00FFFA0B  PROMPTLN 02 00FFF98E
   PROMPTR 02 00FFFA10    PSTRNG 02 00FFF36F     QNDX0 00 00000780     QNDX1 00 00000782
     QNDX2 00 00000784     QNDX3 00 00000786     QNDX4 00 00000788    RAMERR 02 00FFE02C
   RAMTEST 02 00FFE000  RAMTEST1 02 00FFE00D  RAMTEST3 02 00FFE017  ROMTORAM 02 00FFF0E2
 ROMTORAM1 02 00FFF0E8 RUNNINGID 00 00800000 RUNNINGTCB 06 00000000 SCREENCOLOR 00 00000113
 SCREENLOCATION 00 00000010 SCREENLOCATION2 00 00000018  SCROLLUP 02 00FFF1F8    SCRUP1 02 00FFF205
    SC_ALT 00 00000011      SC_C 00 00000021 SC_CAPSLOCK 00 00000058   SC_CTRL 00 00000014
    SC_DEL 00 00000071 SC_EXTEND 00 000000E0    SC_F12 00 00000007  SC_KEYUP 00 000000F0
 SC_NUMLOCK 00 00000077 SC_RSHIFT 00 00000059 SC_SCROLLLOCK 00 0000007E      SC_T 00 0000002C
    SC_TAB 00 0000000D      SC_Z 00 0000001A SETKEYBOARDECHO 02 00FFF971 SHIFTEDSCANCODES 02 00FFF500
 SHIFTLEFT5 02 00FFF16A SHL_NUMWKA 02 00FFFA5B SHOWSPRITES 02 00FFF977     SIEVE 02 00FFF12C
    SIEVE1 02 00FFF144    SIEVE2 02 00FFF140    SIEVE3 02 00FFF131    SIEVE4 02 00FFF154
 SKIP_INIT 02 00FFF08C SPRITE_CTRL 00 FFE10000 SPRITE_EN 00 000003C0       ST1 02 00FFF079
       ST3 02 00FFF069       ST6 02 00FFF030       ST7 02 00FFF03A       ST8 02 00FFF03A
     START 02 00FFF023    STRPTR 00 00000024 SWI3_EXIT 02 00FFFC42 SWI3_ROUT 02 00FFFC1C
       TAB 00 00000009 TCB_CURSORCOL 00 00000021 TCB_CURSORROW 00 00000020  TCB_HJCB 00 0000001C
 TCB_HWAITMBX 00 00000022 TCB_IOF_NEXT 00 0000002C TCB_IOF_PREV 00 00000030 TCB_MBQ_NEXT 00 00000024
 TCB_MBQ_PREV 00 00000028 TCB_MMU_MAP 00 00000038 TCB_MSGPTR_D1 00 00000014 TCB_MSGPTR_D2 00 00000018
 TCB_NXTRDY 00 00000000 TCB_NXTTCB 00 00000008 TCB_PRIORITY 00 00000010 TCB_PRVRDY 00 00000004
 TCB_SPSAVE 00 00000034 TCB_STATUS 00 0000001E TCB_TIMEOUT 00 0000000C TEXTCLOSE 02 00FFF1C9
  TEXTOPEN 02 00FFF1C8  TEXTREAD 02 00FFF1CA   TEXTREG 00 FFE0DF00   TEXTSCR 00 FFE00000
  TEXTSEEK 02 00FFF1CC TEXTWRITE 02 00FFF1CB TEXT_COLS 00 00000000 TEXT_CURPOS 00 00000022
 TEXT_ROWS 00 00000001 TIMEOUTLIST 00 0000078C      TR1A 02 00FFFCA8      UCP1 02 00FFF276
 UNSHIFTEDSCANCODES 02 00FFF400 UPDATECURSORPOS 02 00FFF257  W10_0001 02 00FFF740 W300_0001 02 00FFF754
  WAIT10MS 02 00FFF739 WAIT300MS 02 00FFF74D    XBLANK 02 00FFD0AF      XOFF 00 00000013
       XON 00 00000011
325 SYMBOLS

0 error(s), 70 warning(s)

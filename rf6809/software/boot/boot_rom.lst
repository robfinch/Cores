0 error(s), 1534 warning(s) unlisted in pass 1
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; BSD 3-Clause License
                              ; Redistribution and use in source and binary forms, with or without
                              ; modification, are permitted provided that the following conditions are met:
                              ;
                              ; 1. Redistributions of source code must retain the above copyright notice, this
                              ;    list of conditions and the following disclaimer.
                              ;
                              ; 2. Redistributions in binary form must reproduce the above copyright notice,
                              ;    this list of conditions and the following disclaimer in the documentation
                              ;    and/or other materials provided with the distribution.
                              ;
                              ; 3. Neither the name of the copyright holder nor the names of its
                              ;    contributors may be used to endorse or promote products derived from
                              ;    this software without specific prior written permission.
                              ;
                              ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                              ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                              ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                              ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                              ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                              ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                              ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                              ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                              ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                              ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                              ;                                                                          
                              ; ============================================================================
                              ;
                              CR      EQU     $0D             ;ASCII equates
                              LF      EQU     $0A
                              TAB     EQU     $09
                              CTRLC   EQU     $03
                              CTRLH   EQU     $08
                              CTRLI   EQU     $09
                              CTRLJ   EQU     $0A
                              CTRLK   EQU     $0B
                              CTRLM   EQU $0D
                              CTRLS   EQU     $13
                              CTRLT EQU $14
                              CTRLX   EQU     $18
                              XON             EQU     $11
                              XOFF    EQU     $13
 
                              FIRST_CORE      EQU     1
                              MAX_TASKNO      EQU 63
                              DRAM_BASE       EQU $10000000
 
                              ScreenLocation          EQU             $10
                              ColorCodeLocation       EQU             $14
                              ScreenLocation2         EQU             $18
                              BlkcpySrc                       EQU             $1C
                              BlkcpyDst                       EQU             $20
                              Strptr                          EQU             $24
                              PICptr                          EQU             $28
                              ; Forth Area
                              ; 0x30-0x60
 
                              RunningID                       EQU             $800000
 
                              ; Task control blocks, room for 256 tasks
                              TCB_NxtRdy              EQU             $00     ; next task on ready / timeout list
                              TCB_PrvRdy              EQU             $04     ; previous task on ready / timeout list
                              TCB_NxtTCB              EQU             $08
                              TCB_Timeout             EQU             $0C
                              TCB_Priority    EQU             $10
                              TCB_MSGPTR_D1   EQU             $14
                              TCB_MSGPTR_D2   EQU             $18
                              TCB_hJCB                        EQU             $1C
                              TCB_Status              EQU             $1E
                              TCB_CursorRow   EQU             $20
                              TCB_CursorCol   EQU             $21
                              TCB_hWaitMbx    EQU             $22     ; handle of mailbox task is waiting at
                              TCB_mbq_next    EQU             $24     ; mailbox queue next
                              TCB_mbq_prev    EQU             $28     ; mailbox queue previous
                              TCB_iof_next    EQU             $2C
                              TCB_iof_prev    EQU             $30
                              TCB_SPSave              EQU             $34     ; TCB_SPSave area
                              TCB_mmu_map             EQU             $38
 
                              KeybdHead               EQU             $FFFFFC800
                              KeybdTail               EQU             $FFFFFC900
                              KeybdEcho               EQU             $FFFFFCA00
                              KeybdBad                EQU             $FFFFFCB00
                              KeybdAck                EQU             $FFFFFCC00
                              KeybdLocks              EQU             $FFFFFCD00
                              KeybdBuffer             EQU             $FFFFFC000      ; buffer is 16 chars
 
                              COREID  EQU             $FFFFFFFE0
                              MSCOUNT EQU             $FFFFFFFE4
                              LEDS            EQU             $FFFE60001
                              VIA                     EQU             $FFFE60000
                              VIA_PA          EQU             1
                              VIA_DDRA        EQU             3
                              VIA_ACR                 EQU             11
                              VIA_IFR                 EQU             13
                              VIA_IER                 EQU             14
                              VIA_T3LL                EQU             18
                              VIA_T3LH                EQU             19
                              VIA_T3CMPL      EQU             20
                              VIA_T3CMPH      EQU             21
                              TEXTSCR         EQU             $FFFE00000
                              TEXTREG         EQU             $FFFE0DF00
                              TEXT_COLS       EQU             0
                              TEXT_ROWS       EQU             1
                              TEXT_CURPOS     EQU             34
                              ACIA            EQU             $FFFE30100
                              ACIA_TX         EQU             0
                              ACIA_RX         EQU             0
                              ACIA_STAT       EQU             1
                              ACIA_CMD        EQU             2
                              ACIA_CTRL       EQU             3
                              ACIA_CTRL2      EQU             11
                              RTC                             EQU             $FFFE30500      ; I2C
                              RTCBuf          EQU             $7FC0
 
                              KEYBD           EQU             $FFFE30400
                              KEYBDCLR        EQU             $FFFE30402
                              PIC                     EQU             $FFFE3F000
                              SPRITE_CTRL             EQU             $FFFE10000
                              SPRITE_EN                       EQU             $3C0
 
                              OUTSEMA EQU     $EF0000
                              SEMAABS EQU     $1000
                              OSSEMA  EQU     $EF0010
 
                              BIOS_SCREENS    EQU     $17000000       ; $17000000 to $171FFFFF
 
                              ; EhBASIC vars:
                              ;
                              NmiBase         EQU             $FF0013
                              IrqBase         EQU             $FF0014
 
                              IOFocusNdx      EQU             $100
 
                              ; These variables in global OS storage area
 
                              IOFocusList     EQU             $FF0000 ; to $FF000F
                              IOFocusID               EQU             $FF0010
                              IrqSource               EQU             $FF0011
                              IRQFlag                 EQU             $FF0012
 
                              ; These variables use direct page access
                              CursorRow       EQU             $110
                              CursorCol       EQU             $111
                              CharColor       EQU             $112
                              ScreenColor     EQU             $113
                              CursorFlash     EQU             $114
                              KeyState1       EQU     $120
                              KeyState2       EQU     $121
                              KeyLED          EQU     $122
                              KeybdID         EQU     $124
                              KeybdBlock      EQU     $126
                              kbdHeadRcv      EQU     $127
                              kbdTailRcv      EQU     $128
                              kbdFifo                 EQU     $40                             ; in local RAM
                              kbdFifoAlias    EQU     $C00040 ; to $C0007F    ; alias for $40 to $7F
                              SerhZero                EQU     $130
                              SerHeadRcv      EQU     $131
                              SertZero                EQU     $132
                              SerTailRcv      EQU     $133
                              SerHeadXmit     EQU     $136
                              SerTailXmit     EQU     $138
                              SerRcvXon               EQU     $139
                              SerRcvXoff      EQU     $140
                              SerRcvBuf               EQU     $BFF000 ; 4kB serial recieve buffer
 
                              farflag EQU             $15F
                              asmbuf  EQU             $160    ; to $17F
 
                              QNdx0           EQU             $780
                              QNdx1           EQU             QNdx0+2
                              QNdx2           EQU             QNdx1+2
                              QNdx3           EQU             QNdx2+2
                              QNdx4           EQU             QNdx3+2
                              FreeTCB         EQU             QNdx4+2
                              TimeoutList     EQU             FreeTCB+2
                              FreeMbx         EQU             RunningTCB + 2
                              nMailbox        EQU             FreeMbx + 2
                              FreeMsg         EQU             nMailbox + 2
                              nMsgBlk         EQU             FreeMsg + 2
 
 
                              CharOutVec      EQU             $800
                              CharInVec       EQU             $804
                              CmdPromptJI     EQU     $808
                              MonErrVec       EQU             $80C
 
                              ; Register save area for monitor
                              mon_DSAVE       EQU             $900
                              mon_XSAVE       EQU             $902
                              mon_YSAVE       EQU             $904
                              mon_USAVE       EQU             $906
                              mon_SSAVE       EQU             $908
                              mon_PCSAVE      EQU             $90A
                              mon_DPRSAVE     EQU             $90E
                              mon_CCRSAVE     EQU             $90F
 
                              mon_numwka      EQU             $910
                              mon_r1          EQU             $920
                              mon_r2          EQU             $924
 
                              ; The ORG directive must set an address a multiple of 4 in order for the Verilog
                              ; output to work correctly.
 
                                      org             $FFD0AC
 00FFD0AC 012                             nop
 00FFD0AD 012                             nop
 00FFD0AE 012                             nop
                              XBLANK
 00FFD0AF 0C6020                          ldb             #' '
 00FFD0B1 017001C5E                       lbsr    OUTCH
 00FFD0B4 039                             rts
 
                                      org             $FFD0D0
 00FFD0D0 012                             nop
 00FFD0D1 012                             nop
                              CRLF
                              CRLF1:
 00FFD0D2 0C600D                          ldb             #CR
 00FFD0D4 017001C3B                       lbsr    OUTCH
 00FFD0D7 0C600A                          ldb             #LF
 00FFD0D9 017001C36                       lbsr    OUTCH
 00FFD0DC 039                             rts
 
                                      org             $FFD0F0
 00FFD0F0 012                             nop
 00FFD0F1 020FDF                          bra             CRLF1
 
                                      org             $FFD1DC
                              ONEKEY
 00FFD1DC 06E90F000804                    jmp             [CharInVec]
 
                                      org             $FFD2C0
 00FFD2C0 012                             nop
                              LETTER
 00FFD2C1 017001A4E                       lbsr    OUTCH
 00FFD2C4 039                             rts
 
                                      org             $FFD2CC
 00FFD2CC 012                             nop
 00FFD2CD 012                             nop
                              HEX2
 00FFD2CE 017001139                       lbsr    DispByteAsHex
 00FFD2D1 039                             rts
                              HEX4
 00FFD2D2 01700112C                       lbsr    DispWordAsHex
 00FFD2D5 039                             rts
 
                                      org             $FFD300
                              ClearScreenJmp
 00FFD300 016000F22                       lbra    ClearScreen
                                      org             $FFD308
                              HomeCursorJmp
 00FFD308 016000F8D                       lbra    HomeCursor
 
                                      org             $FFD400
 
                              ; Local RAM test routine
                              ; Checkerboard testing.
                              ; There is 70kB of local RAM
                              ; Does not use any RAM including no stack
 
                              ramtest:
 00FFD400 18E000000                       ldy             #0
 00FFD403 086001                          lda             #1
 00FFD405 0150B7FFFE60001                 sta             LEDS
 00FFD40A 0CCAAA555                       ldd             #$AAA555
                              ramtest1:
 00FFD40D 0EDA01                          std             ,y++
 00FFD40F 18C008000                       cmpy    #$8000
 00FFD412 025FF9                          blo             ramtest1
                                      ; now readback values and compare
 00FFD414 18E000000                       ldy             #0
                              ramtest3:
 00FFD417 0ECA01                          ldd             ,y++
 00FFD419 183AAA555                       cmpd    #$AAA555
 00FFD41C 02600E                          bne             ramerr
 00FFD41E 18C008000                       cmpy    #$8000
 00FFD421 025FF4                          blo             ramtest3
 00FFD423 086002                          lda             #2
 00FFD425 0150B7FFFE60001                 sta             LEDS
 00FFD42A 06EC04                          jmp             ,u
                              ramerr:
 00FFD42C 086080                          lda             #$80
 00FFD42E 0150B7FFFE60001                 sta             LEDS
 00FFD433 08EE00000                       ldx             #TEXTSCR
 00FFD436 0150F6FFFFFFFE0                 ldb             COREID
 00FFD43B 03A                             abx
 00FFD43C 086046                          lda             #'F'
 00FFD43E 0A7804                          sta             ,x
 00FFD440 013                             sync
 00FFD441 06EC04                          jmp             ,u
 
                                      org             $FFE000
 00FFE000 FFF92E                          FDB Monitor
 00FFE002 FFE022                          FDB DumRts      ;       NEXTCMD
 00FFE004 FFECDA                          FDB INCH
 00FFE006 FFECF8                          FDB INCHE
 00FFE008 FFECFC                          FDB INCHEK
 00FFE00A FFED12                          FDB OUTCH
 00FFE00C FFE3EE                          FDB PDATA
 00FFE00E FFE3E1                          FDB PCRLF
 00FFE010 FFE3DD                          FDB PSTRNG
 00FFE012 FFE022                          FDB DumRts                      ; LRA
 00FFE014 FFE022                          FDB DumRts
 00FFE016 FFE022                          FDB DumRts
 00FFE018 FFE022                          FDB DumRts
 00FFE01A FFE022                          FDB DumRts                      ; VINIZ
 00FFE01C FFE2F5                          FDB DisplayChar ;       VOUTCH
 00FFE01E FFE022                          FDB DumRts                      ; ACINIZ
 00FFE020 FFE022                          FDB DumRts                      ; AOUTCH
 
                              DumRts:
 00FFE022 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 
                              start:
 00FFE023 086FFF                          lda             #$FFF                   ; all cores can do this
 00FFE025 0150B7FFFE60003                 sta             VIA+VIA_DDRA
 00FFE02A 086055                          lda             #$55                    ; see if we can at least set LEDs
 00FFE02C 0150B7FFFE60001                 sta             LEDS
 00FFE031 086001                          lda             #1                              ; prime OS semaphore
 00FFE033 0B7EF1010                       sta             OSSEMA+$1000
 00FFE036 0CEFFE03C                       ldu             #st6                    ; U = return address
 00FFE039 07EFFD400                       jmp             ramtest         ; JMP dont JSR
                              st6:
 00FFE03C 1CE006FFF                       lds             #$6FFF          ; boot up stack area
 00FFE03F 0150B6FFFFFFFE0                 lda             COREID
 00FFE044 081001                          cmpa    #FIRST_CORE
                              ;       beq             st8
                              ;       sync                                            ; halt cores other than 2
                              st8:
                              ;       bne             skip_init
                              ;       bsr             romToRam
                              ;       ldd             #st7 & $FFFF
                              ;       tfr             d,x
                              ;       jmp             ,x                              ; jump to the BIOS now in local RAM
                              st7:
 00FFE046 08D159                          bsr             Delay3s         ; give some time for devices to reset
 00FFE048 0860AA                          lda             #$AA
 00FFE04A 0150B7FFFE60001                 sta             LEDS
 00FFE04F 086001                          lda             #FIRST_CORE
 00FFE051 0B7FF0010                       sta             IOFocusID       ; core #2 has focus
 00FFE054 0B7800000                       sta             RunningID
                                      ; Clear IO focus list
 00FFE057 08E000000                       ldx             #0
                              st9:
 00FFE05A 06F80A000FF0000                 clr             IOFocusList,x
 00FFE05F 030001                          inx
 00FFE061 08C000010                       cmpx    #16
 00FFE064 025FF4                          blo             st9
 00FFE066 086018                          lda             #24
 00FFE068 0B7FF0001                       sta             IOFocusList+FIRST_CORE
 
 00FFE06B 0860CE                          lda             #$0CE
 00FFE06D 097113                          sta             ScreenColor
 00FFE06F 097112                          sta             CharColor
 00FFE071 08D1B2                          bsr             ClearScreen
 00FFE073 0CCFFE2F5                       ldd             #DisplayChar
 00FFE076 0FD000800                       std             CharOutVec
 00FFE079 0CCFFEBE4                       ldd             #SerialPeekCharDirect
 00FFE07C 0FD000804                       std             CharInVec
 00FFE07F 0C6018                          ldb             #24                             ; request IO focus
 00FFE081 017000CD5                       lbsr    OSCall
 00FFE084 0150F6FFFFFFFE0                 ldb             COREID
 00FFE089 0C1001                          cmpb    #FIRST_CORE
 00FFE08B 02700D                          beq             init
 00FFE08D 020046                          bra             skip_init
 00FFE08F 0200AE                          bra             multi_sieve
                              st3:
 00FFE091 0860FF                          lda             #$FF
 00FFE093 0150B7FFFE60001                 sta             LEDS
 00FFE098 020FF7                          bra             st3
 
                                      ; initialize interrupt controller
                                      ; first, zero out all the vectors
                              init:
 00FFE09A 01700042A                       lbsr    rtc_read        ; get clock values
 00FFE09D 08E000127                       ldx             #kbdHeadRcv
 00FFE0A0 0C6020                          ldb             #32                             ; number of bytes to zero out
                              init1:
 00FFE0A2 06F800                          clr             ,x+
 00FFE0A4 05A                             decb
 00FFE0A5 026FFB                          bne             init1
 00FFE0A7 01700038E                       lbsr    TimerInit
 00FFE0AA 017000AC2                       lbsr    InitSerial
 00FFE0AD 08E000080                       ldx             #128
 00FFE0B0 086001                          lda             #1                      ; set irq(bit0), clear firq (bit1), disable int (bit 6), clear edge sense(bit 7)
 00FFE0B2 0C6001                          ldb             #FIRST_CORE                     ; serving core id
                              st1:
 00FFE0B4 06F809E3F000                    clr             PIC,x                   ; cause code
 00FFE0B8 0A7809E3F001                    sta             PIC+1,x
 00FFE0BC 0E7809E3F002                    stb             PIC+2,x
 00FFE0C0 030004                          leax    4,x
 00FFE0C2 08C000100                       cmpx    #256
 00FFE0C5 025FED                          blo             st1
                              ;       lda             #4                              ; make the timer interrupt edge sensitive
                              ;       sta             PIC+4                   ; reg #4 is the edge sensitivity setting
                              ;       sta             PIC                             ; reg #0 is interrupt enable
 00FFE0C7 086081                          lda             #$81                    ; make irq edge sensitive
 00FFE0C9 0150B7FFFE3F0FD                 sta             PIC+$FD
 00FFE0CE 08601F                          lda             #31                             ; enable timer interrupt
                              ;       sta             PIC+9
 00FFE0D0 0C6001                          ldb             #1
 00FFE0D2 0F7EF1000                       stb             OUTSEMA+SEMAABS ; set semaphore to 1 available slot
                              skip_init:
 00FFE0D5 01C0EF                          andcc   #$EF                    ; unmask irq
 00FFE0D7 086038                          lda             #56
 00FFE0D9 0150B7FFFE0DF00                 sta             TEXTREG+TEXT_COLS
 00FFE0DE 08601D                          lda             #29
 00FFE0E0 0150B7FFFE0DF01                 sta             TEXTREG+TEXT_ROWS
 00FFE0E5 08D13E                          bsr             ClearScreen
 00FFE0E7 08D1AF                          bsr             HomeCursor
 00FFE0E9 086005                          lda             #5
 00FFE0EB 0150B7FFFE60001                 sta             LEDS
 00FFE0F0 0CCFFE108                       ldd             #msgStartup
 00FFE0F3 08D2C1                          bsr             DisplayString
 00FFE0F5 08E000000                       ldx             #0
 00FFE0F8 0CC000000                       ldd             #0
 00FFE0FB 017000C1E                       lbsr    ShowSprites
 00FFE0FE 01700083F                       lbsr    KeybdInit
 00FFE101 0DC124                          ldd             KeybdID
 00FFE103 08D2FC                          bsr             DispWordAsHex
 00FFE105 07EFFF910                       jmp             MonitorStart
 
                              msgStartup
 00FFE108 072066036038030039020           fcb             "rf6809 12-bit System Starting.",CR,LF,0
 00FFE10F 03103202D062069074020
 00FFE116 05307907307406506D020
 00FFE11D 05307406107207406906E
 00FFE124 06702E00D00A000
 
                              ;------------------------------------------------------------------------------
                              ; The checkpoint register must be cleared within 1 second or a NMI interrupt
                              ; will occur. checkpoint should be called with a JSR so that the global ROM
                              ; routine is called.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              checkpoint:
 00FFE129 01507FFFFFFFFE1                 clr             $FFFFFFFE1      ; writing any value will do
 00FFE12E 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Copy the system ROM to local RAM
                              ; Running the code from local RAM is probably an order of magnitude faster
                              ; then running from the global ROM. It also reduces the network traffic to
                              ; run from local RAM.
                              ;
                              ; Modifies:
                              ;               d,x,y
                              ;------------------------------------------------------------------------------
 
                              romToRam:
 00FFE12F 08EFFC000                       ldx             #$FFC000
 00FFE132 18E00C000                       ldy             #$00C000
                              romToRam1:
 00FFE135 0EC801                          ldd             ,x++
 00FFE137 0EDA01                          std             ,y++
 00FFE139 08C000000                       cmpx    #0
 00FFE13C 026FF7                          bne             romToRam1
 00FFE13E 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Multi-core sieve program.
                              ;------------------------------------------------------------------------------
 
                              ; First fill screen chars with 'P' indicating prime positions
                              ; Each core is responsible for the Nth position where N is the
                              ; core number minus two.
                              ;
                              multi_sieve:
 00FFE13F 086050                          lda             #'P'                                    ; indicate prime
 00FFE141 0150F6FFFFFFFE0                 ldb             COREID                          ; find out which core we are
 00FFE146 0C0001                          subb    #FIRST_CORE
 00FFE148 08E000000                       ldx             #0                                              ; start at first char of screen
 00FFE14B 03A                             abx
                              multi_sieve3:
 00FFE14C 0A7809E00000                    sta             TEXTSCR,x                       ; store 'P'
 00FFE150 030008                          leax    8,x                                             ; advance to next position
 00FFE152 08C000FFF                       cmpx    #4095
 00FFE155 025FF5                          blo             multi_sieve3
 00FFE157 0BDFFE129                       jsr             checkpoint
*** warning 1: Long branch within short branch range could be optimized
 00FFE15A 0CB002                          addb    #2                                              ; start sieve at 2 (core id)
 00FFE15C 08604E                          lda             #'N'                                    ; flag position value of 'N' for non-prime
                              multi_sieve2:
 00FFE15E 08E000000                       ldx             #0
 00FFE161 03A                             abx                                                                     ; skip the first position - might be prime
                              multi_sieve1:
 00FFE162 03A                             abx                                                                     ; increment
 00FFE163 0A7809E00000                    sta             TEXTSCR,x
 00FFE167 08C000FFF                       cmpx    #4095
 00FFE16A 025FF6                          blo             multi_sieve1
 00FFE16C 0BDFFE129                       jsr             checkpoint
*** warning 1: Long branch within short branch range could be optimized
 00FFE16F 0CB008                          addb    #8                                              ; number of cores working on it
 00FFE171 0C1FF0                          cmpb    #4080
 00FFE173 025FE9                          blo             multi_sieve2
                              multi_sieve4:                                   ; hang machine
 00FFE175 013                             sync
 00FFE176 0160017B5                       lbra    Monitor
 
                              ;------------------------------------------------------------------------------
                              ; Single core sieve.
                              ;------------------------------------------------------------------------------
 
                              sieve:
 00FFE179 086050                          lda             #'P'                                    ; indicate prime
 00FFE17B 08E000000                       ldx             #0                                              ; start at first char of screen
                              sieve3:
 00FFE17E 0A7809E00000                    sta             TEXTSCR,x                       ; store 'P'
 00FFE182 030001                          inx                                                                     ; advance to next position
 00FFE184 08C000FFF                       cmpx    #4095
 00FFE187 025FF5                          blo             sieve3
 00FFE189 0C6002                          ldb             #2                                              ; start sieve at 2
 00FFE18B 08604E                          lda             #'N'                                    ; flag position value of 'N' for non-prime
                              sieve2:
 00FFE18D 08E000000                       ldx             #0
 00FFE190 03A                             abx                                                                     ; skip the first position - might be prime
                              sieve1:
 00FFE191 03A                             abx                                                                     ; increment
 00FFE192 0A7809E00000                    sta             TEXTSCR,x
 00FFE196 08C000FFF                       cmpx    #4095
 00FFE199 025FC7                          blo             multi_sieve1
 00FFE19B 05C                             incb                                                            ; number of cores working on it
 00FFE19C 0C1FF0                          cmpb    #4080
 00FFE19E 025FED                          blo             sieve2
                              sieve4:                                                         ; hang machine
 00FFE1A0 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Three second delay for user convenience and to allow some devices time to
                              ; reset.
                              ;------------------------------------------------------------------------------
 
                              Delay3s:
 00FFE1A1 0CC895440                       ldd             #9000000
                              dly3s1:
 00FFE1A4 0C10FF                          cmpb    #$FF
 00FFE1A6 026000                          bne             dly3s2
                              dly3s2:
 00FFE1A8 0150B7FFFE60001                 sta             LEDS
 00FFE1AD 083000001                       subd    #1
 00FFE1B0 026FF2                          bne             dly3s1
 00FFE1B2 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ShiftLeft5:
 00FFE1B3 058                             aslb
 00FFE1B4 049                             rola
 00FFE1B5 058                             aslb
 00FFE1B6 049                             rola
 00FFE1B7 058                             aslb
 00FFE1B8 049                             rola
 00FFE1B9 058                             aslb
 00FFE1BA 049                             rola
 00FFE1BB 058                             aslb
 00FFE1BC 049                             rola
 00FFE1BD 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Parameters:
                              ;               b = core id of core to copy
                              ;------------------------------------------------------------------------------
                              ;
                              CopyVirtualScreenToScreen:
 00FFE1BE 034076                          pshs    d,x,y,u
                                      ; Compute virtual screen location for core passed in accb.
 00FFE1C0 01F098                          tfr             b,a
 00FFE1C2 048                             asla
 00FFE1C3 048                             asla
 00FFE1C4 048                             asla
 00FFE1C5 048                             asla
 00FFE1C6 08AC00                          ora             #$C00
 00FFE1C8 05F                             clrb
 00FFE1C9 01F001                          tfr             d,x
 00FFE1CB 034006                          pshs    d
 00FFE1CD 18EE00000                       ldy             #TEXTSCR
 00FFE1D0 0CE00032C                       ldu             #56*29/2
                              cv2s1:
 00FFE1D3 0EC801                          ldd             ,x++
 00FFE1D5 0EDA01                          std             ,y++
 00FFE1D7 0335FF                          leau    -1,u
 00FFE1D9 283000000                       cmpu    #0
 00FFE1DC 026FF5                          bne             cv2s1
                                      ; reset the cursor position in the text controller
 00FFE1DE 035010                          puls    x
 00FFE1E0 0E6808110                       ldb             CursorRow,x
 00FFE1E3 086038                          lda             #56
 00FFE1E5 03D                             mul
 00FFE1E6 01F002                          tfr             d,y
 00FFE1E8 0E6808111                       ldb             CursorCol,x
 00FFE1EB 01F021                          tfr             y,x
 00FFE1ED 03A                             abx
 00FFE1EE 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
 00FFE1F3 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ;
                              CopyScreenToVirtualScreen:
 00FFE1F5 034076                          pshs    d,x,y,u
 00FFE1F7 08D08D                          bsr             GetScreenLocation
 00FFE1F9 01F002                          tfr             d,y
 00FFE1FB 08EE00000                       ldx             #TEXTSCR
 00FFE1FE 0CE00032C                       ldu             #56*29/2
                              cs2v1:
 00FFE201 0EC801                          ldd             ,x++
 00FFE203 0EDA01                          std             ,y++
 00FFE205 0335FF                          leau    -1,u
 00FFE207 283000000                       cmpu    #0
 00FFE20A 026FF5                          bne             cs2v1
 00FFE20C 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 00FFE20E 054045058054053043052           fcb             "TEXTSCR "
 00FFE215 020
 00FFE216 FFE220                          fcw             TextOpen
 00FFE218 FFE221                          fcw             TextClose
 00FFE21A FFE222                          fcw             TextRead
 00FFE21C FFE223                          fcw             TextWrite
 00FFE21E FFE224                          fcw             TextSeek
 
                              TextOpen:
 00FFE220 039                             rts
                              TextClose:
 00FFE221 039                             rts
                              TextRead:
 00FFE222 039                             rts
                              TextWrite:
 00FFE223 039                             rts
                              TextSeek:
 00FFE224 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Clear the screen and the screen color memory
                              ; We clear the screen to give a visual indication that the system
                              ; is working at all.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              ClearScreen:
 00FFE225 034076                          pshs    d,x,y,u
 00FFE227 08E000658                       ldx             #56*29
 00FFE22A 01F013                          tfr             x,u
 00FFE22C 08D058                          bsr             GetScreenLocation
 00FFE22E 01F002                          tfr             d,y
 00FFE230 0C6020                          ldb             #' '                            ; space char
                              cs1:
 00FFE232 0E7A00                          stb             ,y+                                     ; set text to space
 00FFE234 0301FF                          leax    -1,x                            ; decrement x
 00FFE236 026FFA                          bne             cs1
 00FFE238 0150F6FFFFFFFE0                 ldb             COREID                  ; update colors only if we have focus
 00FFE23D 0F1FF0010                       cmpb    IOFocusID
 00FFE240 02000D                          bra             cs3
 00FFE242 18EE02000                       ldy             #TEXTSCR+$2000
                              ;       lda             CharColor
 00FFE245 0860CE                          lda             #$0CE
 00FFE247 01F031                          tfr             u,x                                     ; get back count
                              cs2:
 00FFE249 0A7A00                          sta             ,y+
 00FFE24B 0301FF                          dex                                                             ; decrement x
 00FFE24D 026FFA                          bne             cs2
                              cs3:
 00FFE24F 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ; Scroll text on the screen upwards
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              ScrollUp:
 00FFE251 034076                          pshs    d,x,y,u
 00FFE253 18E00032B                       ldy             #(56*29-1)/2    ; y = num chars/2 to move
 00FFE256 08D02E                          bsr             GetScreenLocation
 00FFE258 01F001                          tfr             d,x
 00FFE25A 01F003                          tfr             d,u
 00FFE25C 030038                          leax    56,x                    ; x = index to source row
                              scrup1:
 00FFE25E 0EC801                          ldd             ,x++                    ; move 2 characters
 00FFE260 0EDC01                          std             ,u++
 00FFE262 0313FF                          dey
 00FFE264 026FF8                          bne             scrup1
 00FFE266 08601D                          lda             #29
 00FFE268 08D002                          bsr             BlankLine
 00FFE26A 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ; Blank out a line on the display
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;       acca = line number to blank
                              ;------------------------------------------------------------------------------
 
                              BlankLine:
 00FFE26C 034016                          pshs    d,x
 00FFE26E 034002                          pshs    a
 00FFE270 08D014                          bsr             GetScreenLocation
 00FFE272 01F001                          tfr             d,x
 00FFE274 035002                          puls    a
 00FFE276 0C6038                          ldb             #56             ; b = # chars to blank out from video controller
 00FFE278 03D                             mul                                     ; d = screen index (row# * #cols)
 00FFE279 03080B                          leax    d,x
 00FFE27B 086020                          lda             #' '
 00FFE27D 0C6038                          ldb             #56             ; b = # chars to blank out from video controller
                              blnkln1:
 00FFE27F 0A7800                          sta             ,x+
 00FFE281 05A                             decb
 00FFE282 026FFB                          bne             blnkln1
 00FFE284 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Get the location of the screen memory. The location
                              ; depends on whether or not the task has the output focus.
                              ;
                              ; Modifies:
                              ;               d
                              ; Retuns:
                              ;               d = screen location
                              ;------------------------------------------------------------------------------
 
                              GetScreenLocation:
 00FFE286 0150B6FFFFFFFE0                 lda             COREID                  ; which core are we?
 00FFE28B 0B1FF0010                       cmpa    IOFocusID               ; do we have the IO focus
 00FFE28E 026004                          bne             gsl1                            ; no, go pick virtual screen address
 00FFE290 0CCE00000                       ldd             #TEXTSCR                ; yes, we update the real screen
 00FFE293 039                             rts
                              gsl1:
 00FFE294 0CC007800                       ldd             #$7800
 00FFE297 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; HomeCursor
                              ; Set the cursor location to the top left of the screen.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              HomeCursor:
 00FFE298 034016                          pshs    d,x
 00FFE29A 00F110                          clr             CursorRow
 00FFE29C 00F111                          clr             CursorCol
 00FFE29E 0150F6FFFFFFFE0                 ldb             COREID
 00FFE2A3 0F1FF0010                       cmpb    IOFocusID
 00FFE2A6 026006                          bne             hc1
 00FFE2A8 04F                             clra
 00FFE2A9 0150B7FFFE0DF22                 sta             TEXTREG+TEXT_CURPOS
                              hc1:
 00FFE2AE 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Update the cursor position in the text controller based on the
                              ;  CursorRow,CursorCol.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
                              ;
                              UpdateCursorPos:
 00FFE2B0 034016                          pshs    d,x
 00FFE2B2 0150F6FFFFFFFE0                 ldb             COREID                          ; update cursor position in text controller
 00FFE2B7 0F1FF0010                       cmpb    IOFocusID                       ; only for the task with the output focus
 00FFE2BA 026014                          bne             ucp1                                    
 00FFE2BC 096110                          lda             CursorRow
 00FFE2BE 08403F                          anda    #$3F                                    ; limit of 63 rows
 00FFE2C0 0150F6FFFE0DF00                 ldb             TEXTREG+TEXT_COLS
 00FFE2C5 03D                             mul
 00FFE2C6 01F001                          tfr             d,x
 00FFE2C8 0D6111                          ldb             CursorCol
 00FFE2CA 03A                             abx
 00FFE2CB 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
                              ucp1:
 00FFE2D0 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Calculate screen memory location from CursorRow,CursorCol.
                              ; Also refreshes the cursor location.
                              ;
                              ; Modifies:
                              ;               d
                              ; Returns:
                              ;       d = screen location
                              ;------------------------------------------------------------------------------
                              ;
                              CalcScreenLoc:
 00FFE2D2 034010                          pshs    x
 00FFE2D4 096110                          lda             CursorRow
 00FFE2D6 0C6038                          ldb             #56
 00FFE2D8 03D                             mul
 00FFE2D9 01F001                          tfr             d,x
 00FFE2DB 0D6111                          ldb             CursorCol
 00FFE2DD 03A                             abx
 00FFE2DE 0150F6FFFFFFFE0                 ldb             COREID                          ; update cursor position in text controller
 00FFE2E3 0F1FF0010                       cmpb    IOFocusID                       ; only for the task with the output focus
 00FFE2E6 026005                          bne             csl1                                    
 00FFE2E8 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
                              csl1:
 00FFE2ED 08DF97                          bsr             GetScreenLocation
 00FFE2EF 03080B                          leax    d,x
 00FFE2F1 01F010                          tfr             x,d
 00FFE2F3 035090                          puls    x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Display a character on the screen.
                              ; If the task doesn't have the I/O focus then the character is written to
                              ; the virtual screen.
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;       accb = char to display
                              ;------------------------------------------------------------------------------
                              ;
                              DisplayChar:
 00FFE2F5 017000910                       lbsr    SerialPutChar
 00FFE2F8 034016                          pshs    d,x
 00FFE2FA 0C100D                          cmpb    #CR                                     ; carriage return ?
 00FFE2FC 026007                          bne             dccr
 00FFE2FE 00F111                          clr             CursorCol               ; just set cursor column to zero on a CR
 00FFE300 08DFAE                          bsr             UpdateCursorPos
                              dcx14:
 00FFE302 01600008C                       lbra            dcx4
                              dccr:
 00FFE305 0C1091                          cmpb    #$91                            ; cursor right ?
 00FFE307 02600D                          bne             dcx6
 00FFE309 096111                          lda             CursorCol
 00FFE30B 081038                          cmpa    #56
 00FFE30D 024003                          bhs             dcx7
 00FFE30F 04C                             inca
 00FFE310 097111                          sta             CursorCol
                              dcx7:
 00FFE312 08DF9C                          bsr             UpdateCursorPos
 00FFE314 035096                          puls    d,x,pc
                              dcx6:
 00FFE316 0C1090                          cmpb    #$90                            ; cursor up ?
 00FFE318 026009                          bne             dcx8            
 00FFE31A 096110                          lda             CursorRow
 00FFE31C 027FF4                          beq             dcx7
 00FFE31E 04A                             deca
 00FFE31F 097110                          sta             CursorRow
 00FFE321 020FEF                          bra             dcx7
                              dcx8:
 00FFE323 0C1093                          cmpb    #$93                            ; cursor left ?
 00FFE325 026009                          bne             dcx9
 00FFE327 096111                          lda             CursorCol
 00FFE329 027FE7                          beq             dcx7
 00FFE32B 04A                             deca
 00FFE32C 097111                          sta             CursorCol
 00FFE32E 020FE2                          bra             dcx7
                              dcx9:
 00FFE330 0C1092                          cmpb    #$92                            ; cursor down ?
 00FFE332 02600B                          bne             dcx10
 00FFE334 096110                          lda             CursorRow
 00FFE336 08101D                          cmpa    #29
 00FFE338 027FD8                          beq             dcx7
 00FFE33A 04C                             inca
 00FFE33B 097110                          sta             CursorRow
 00FFE33D 020FD3                          bra             dcx7
                              dcx10:
 00FFE33F 0C1094                          cmpb    #$94                            ; cursor home ?
 00FFE341 02600C                          bne             dcx11
 00FFE343 096111                          lda             CursorCol
 00FFE345 027004                          beq             dcx12
 00FFE347 00F111                          clr             CursorCol
 00FFE349 020FC7                          bra             dcx7
                              dcx12:
 00FFE34B 00F110                          clr             CursorRow
 00FFE34D 020FC3                          bra             dcx7
                              dcx11:
 00FFE34F 0C1099                          cmpb    #$99                            ; delete ?
 00FFE351 026008                          bne             dcx13
 00FFE353 08DF7D                          bsr             CalcScreenLoc
 00FFE355 01F001                          tfr             d,x
 00FFE357 096111                          lda             CursorCol               ; acc = cursor column
 00FFE359 020011                          bra             dcx5
                              dcx13
 00FFE35B 0C1008                          cmpb    #CTRLH                  ; backspace ?
 00FFE35D 02601E                          bne             dcx3
 00FFE35F 096111                          lda             CursorCol
 00FFE361 02702E                          beq             dcx4
 00FFE363 04A                             deca
 00FFE364 097111                          sta             CursorCol
 00FFE366 08DF6A                          bsr             CalcScreenLoc
 00FFE368 01F001                          tfr             d,x
 00FFE36A 096111                          lda             CursorCol
                              dcx5:
 00FFE36C 0E6001                          ldb             1,x
 00FFE36E 0E7801                          stb             ,x++
 00FFE370 04C                             inca
 00FFE371 081038                          cmpa    #56
 00FFE373 025FF7                          blo             dcx5
 00FFE375 0C6020                          ldb             #' '
 00FFE377 0301FF                          dex
 00FFE379 0E7804                          stb             ,x
 00FFE37B 020014                          bra             dcx4
                              dcx3:
 00FFE37D 0C100A                          cmpb    #LF                             ; linefeed ?
 00FFE37F 02700E                          beq             dclf
 00FFE381 034004                          pshs    b
 00FFE383 08DF4D                          bsr     CalcScreenLoc
 00FFE385 01F001                          tfr             d,x
 00FFE387 035004                          puls    b
 00FFE389 0E7804                          stb             ,x
                                      ; ToDo character color
                              ;       lda             CharColor
                              ;       sta             $2000,x
 00FFE38B 08D006                          bsr             IncCursorPos
 00FFE38D 020002                          bra             dcx4
                              dclf:
 00FFE38F 08D011                          bsr             IncCursorRow
                              dcx4:
 00FFE391 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Increment the cursor position, scroll the screen if needed.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              IncCursorPos:
 00FFE393 034016                          pshs    d,x
 00FFE395 096111                          lda             CursorCol
 00FFE397 04C                             inca
 00FFE398 097111                          sta             CursorCol
 00FFE39A 081038                          cmpa    #56
 00FFE39C 025014                          blo             icc1
 00FFE39E 00F111                          clr             CursorCol               ; column = 0
 00FFE3A0 020002                          bra             icr1
                              IncCursorRow:
 00FFE3A2 034016                          pshs    d,x
                              icr1:
 00FFE3A4 096110                          lda             CursorRow
 00FFE3A6 04C                             inca
 00FFE3A7 097110                          sta             CursorRow
 00FFE3A9 08101D                          cmpa    #29
 00FFE3AB 025005                          blo             icc1
 00FFE3AD 04A                             deca                                                    ; backup the cursor row, we are scrolling up
 00FFE3AE 097110                          sta             CursorRow
 00FFE3B0 08DE9F                          bsr             ScrollUp
                              icc1:
 00FFE3B2 08DEFC                          bsr             UpdateCursorPos
                              icc2:
 00FFE3B4 035096                          puls    d,x,pc  
 
                              ;------------------------------------------------------------------------------
                              ; Display a string on the screen.
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;               d = pointer to string
                              ;------------------------------------------------------------------------------
                              ;
                              DisplayString:
 00FFE3B6 034016                          pshs    d,x
 00FFE3B8 01F001                          tfr             d,x
                              dspj2:                                          ; lock semaphore for access
 00FFE3BA 0B6EF0001                       lda             OUTSEMA+1
 00FFE3BD 027FFB                          beq             dspj2
                              dspj1B:
 00FFE3BF 0E6800                          ldb             ,x+                             ; move string char into acc
 00FFE3C1 027005                          beq             dsretB          ; is it end of string ?
 00FFE3C3 01700094C                       lbsr    OUTCH                   ; display character
 00FFE3C6 020FF7                          bra             dspj1B
                              dsretB:
 00FFE3C8 07FEF0001                       clr             OUTSEMA+1       ; unlock semaphore
 00FFE3CB 035096                          puls    d,x,pc
 
                              DisplayStringCRLF:
 00FFE3CD 034006                          pshs    d
 00FFE3CF 08DFE5                          bsr             DisplayString
 00FFE3D1 0C600D                          ldb             #CR
 00FFE3D3 01700093C                       lbsr    OUTCH
 00FFE3D6 0C600A                          ldb             #LF
 00FFE3D8 017000937                       lbsr    OUTCH
 00FFE3DB 035086                          puls    d,pc
                                      
                              ;
                              ; PRINT CR, LF, STRING
                              ;
                              PSTRNG
 00FFE3DD 08D002                          BSR             PCRLF
 00FFE3DF 02000D                          BRA             PDATA
                              PCRLF
 00FFE3E1 034010                          PSHS    X
 00FFE3E3 08EFFE3F5                       LDX             #CRLFST
 00FFE3E6 08D006                          BSR             PDATA
 00FFE3E8 035010                          PULS    X
 00FFE3EA 039                             RTS
 
                              PRINT
 00FFE3EB 0BDFFED12                       JSR             OUTCH
                              PDATA
 00FFE3EE 0E6800                          LDB             ,X+
 00FFE3F0 0C1004                          CMPB    #$04
 00FFE3F2 026FF7                          BNE             PRINT
 00FFE3F4 039                             RTS
 
                              CRLFST
 00FFE3F5 00D00A004                       fcb     CR,LF,4
 
                              DispDWordAsHex:
 00FFE3F8 08D007                          bsr             DispWordAsHex
 00FFE3FA 01E001                          exg             d,x
 00FFE3FC 08D003                          bsr             DispWordAsHex
 00FFE3FE 01E001                          exg             d,x
 00FFE400 039                             rts
 
                              DispWordAsHex:
 00FFE401 01E089                          exg             a,b
 00FFE403 08D005                          bsr             DispByteAsHex
 00FFE405 01E089                          exg             a,b
 00FFE407 08D001                          bsr             DispByteAsHex
 00FFE409 039                             rts
 
                              DispByteAsHex:
 00FFE40A 034004                    pshs  b
 00FFE40C 054                             lsrb
 00FFE40D 054                             lsrb
 00FFE40E 054                             lsrb
 00FFE40F 054                             lsrb
 00FFE410 054                             lsrb
 00FFE411 054                             lsrb
 00FFE412 054                             lsrb
 00FFE413 054                             lsrb
 00FFE414 08D00C                          bsr             DispNyb
 00FFE416 035004                          puls    b
 00FFE418 034004                          pshs    b
 00FFE41A 054                             lsrb
 00FFE41B 054                             lsrb
 00FFE41C 054                             lsrb
 00FFE41D 054                             lsrb
 00FFE41E 08D002                          bsr             DispNyb
 00FFE420 035004                          puls    b
 
                              DispNyb
 00FFE422 034004                          pshs    b
 00FFE424 0C400F                          andb    #$0F
 00FFE426 0C100A                          cmpb    #10
 00FFE428 025007                          blo             DispNyb1
 00FFE42A 0CB037                          addb    #'A'-10
 00FFE42C 0170008E3                       lbsr    OUTCH
 00FFE42F 035084                          puls    b,pc
                              DispNyb1
 00FFE431 0CB030                          addb    #'0'
 00FFE433 0170008DC                       lbsr    OUTCH
 00FFE436 035084                          puls    b,pc
 
                              ;==============================================================================
                              ; Timer
                              ;==============================================================================
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; Timer routines for a WDC6522 compatible circuit.
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              TimerInit:
 00FFE438 0CC061A80                       ldd             #$61A80                                 ; compare to 400000 (100 Hz assuming 40MHz clock)
 00FFE43B 0150F7FFFE60014                 stb             VIA+VIA_T3CMPL
 00FFE440 0150B7FFFE60015                 sta             VIA+VIA_T3CMPH
 00FFE445 01507FFFFE60012                 clr             VIA+VIA_T3LL
 00FFE44A 01507FFFFE60013                 clr             VIA+VIA_T3LH
 00FFE44F 0150B6FFFE6000B                 lda             VIA+VIA_ACR                     ; set continuous mode for timer
 00FFE454 08A100                          ora             #$100
 00FFE456 0150B7FFFE6000B                 sta             VIA+VIA_ACR                     ; enable timer #3 interrupts
 00FFE45B 086810                          lda             #$810
 00FFE45D 0150B7FFFE6000E                 sta             VIA+VIA_IER
 00FFE462 039                             rts
 
                              TimerIRQ:
                                      ; Reset the edge sense circuit in the PIC
 00FFE463 08601F                          lda             #31                                                     ; Timer is IRQ #31
 00FFE465 0B7FF0011                       sta             IrqSource               ; stuff a byte indicating the IRQ source for PEEK()
 00FFE468 0150B7FFFE3F010                 sta             PIC+16                                  ; register 16 is edge sense reset reg   
 00FFE46D 0150B6FFFE6000D                 lda             VIA+VIA_IFR
 00FFE472 02A011                          bpl             notTimerIRQ
 00FFE474 085800                          bita    #$800
 00FFE476 02700D                          beq             notTimerIRQ
 00FFE478 01507FFFFE60012                 clr             VIA+VIA_T3LL
 00FFE47D 01507FFFFE60013                 clr             VIA+VIA_T3LH
 00FFE482 07CE00037                       inc             $E00037                                 ; update timer IRQ screen flag
                              notTimerIRQ:
 00FFE485 039                             rts
 
 
                                      
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; BSD 3-Clause License
                              ; Redistribution and use in source and binary forms, with or without
                              ; modification, are permitted provided that the following conditions are met:
                              ;
                              ; 1. Redistributions of source code must retain the above copyright notice, this
                              ;    list of conditions and the following disclaimer.
                              ;
                              ; 2. Redistributions in binary form must reproduce the above copyright notice,
                              ;    this list of conditions and the following disclaimer in the documentation
                              ;    and/or other materials provided with the distribution.
                              ;
                              ; 3. Neither the name of the copyright holder nor the names of its
                              ;    contributors may be used to endorse or promote products derived from
                              ;    this software without specific prior written permission.
                              ;
                              ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                              ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                              ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                              ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                              ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                              ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                              ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                              ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                              ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                              ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                              ;                                                                          
                              ; ============================================================================
                              ;
                              ;===============================================================================
                              ; Generic I2C routines
                              ;
                              ; It is assumed there may be more than one I2C controller in the system, so
                              ; the address of the controller is passed in the X register.
                              ;===============================================================================
 
                              I2C_PREL        EQU             $0
                              I2C_PREH        EQU             $1
                              I2C_CTRL        EQU             $2
                              I2C_RXR         EQU             $3
                              I2C_TXR         EQU             $3
                              I2C_CMD         EQU             $4
                              I2C_STAT        EQU             $4
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; i2c initialization, sets the clock prescaler
                              ;
                              ; Parameters:
                              ;               x = I2C controller address
                              ; Returns: none
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              _i2c_init:
 00FFE486 034004                          pshs    b
 00FFE488 0C6004                          ldb             #4                                                                      ; setup prescale for 400kHz clock
 00FFE48A 0E7804                          stb             I2C_PREL,x
 00FFE48C 06F001                          clr             I2C_PREH,x
 00FFE48E 035084                          puls    b,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for I2C transfer to complete
                              ;
                              ; Parameters
                              ;       x - I2C controller base address
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              i2c_wait_tip:
 00FFE490 034004                          pshs            b
                              i2cw1:
 00FFE492 0E6004                          ldb                     I2C_STAT,x              ; would use lvb, but lb is okay since its the I/O area
 00FFE494 0C5001                          bitb            #1                                              ; wait for tip to clear
 00FFE496 026FFA                          bne                     i2cw1
 00FFE498 035084                          puls            b,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Write command to i2c
                              ;
                              ; Parameters
                              ;               accb - data to transmit
                              ;               acca - command value
                              ;               x       - I2C controller base address
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              i2c_wr_cmd:
 00FFE49A 0E7003                          stb             I2C_TXR,x
 00FFE49C 0A7004                          sta             I2C_CMD,x
 00FFE49E 08DFF0                          bsr             i2c_wait_tip
 00FFE4A0 0E6004                          ldb             I2C_STAT,x
 00FFE4A2 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Parameters
                              ;               x - I2C controller base address
                              ;               accb - data to send
                              ; Returns: none
                              ; Stack space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              _i2c_xmit1:
 00FFE4A3 034006                          pshs    d                                                               ; save data value
 00FFE4A5 034006                          pshs    d                                                               ; and save it again
 00FFE4A7 0C6001                          ldb             #1
 00FFE4A9 0E7002                          stb             I2C_CTRL,x                      ; enable the core
 00FFE4AB 0C6076                          ldb             #$76                                            ; set slave address = %0111011
 00FFE4AD 086090                          lda             #$90                                            ; set STA, WR
 00FFE4AF 08DFE9                          bsr             i2c_wr_cmd
 00FFE4B1 08D00A                          bsr             i2c_wait_rx_nack
 00FFE4B3 035006                          puls    d                                                               ; get back data value
 00FFE4B5 086050                          lda             #$50                                            ; set STO, WR
 00FFE4B7 08DFE1                          bsr             i2c_wr_cmd
 00FFE4B9 08D002                          bsr             i2c_wait_rx_nack
 00FFE4BB 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              i2c_wait_rx_nack:
 00FFE4BD 034004                          pshs    b                                                               ; save off accb
                              i2cwr1:
 00FFE4BF 0E6004                          ldb             I2C_STAT,x                      ; wait for RXack = 0
 00FFE4C1 0C5080                          bitb    #$80                                            ; test for nack
 00FFE4C3 026FFA                          bne             i2cwr1
 00FFE4C5 035084                          puls    b,pc
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; BSD 3-Clause License
                              ; Redistribution and use in source and binary forms, with or without
                              ; modification, are permitted provided that the following conditions are met:
                              ;
                              ; 1. Redistributions of source code must retain the above copyright notice, this
                              ;    list of conditions and the following disclaimer.
                              ;
                              ; 2. Redistributions in binary form must reproduce the above copyright notice,
                              ;    this list of conditions and the following disclaimer in the documentation
                              ;    and/or other materials provided with the distribution.
                              ;
                              ; 3. Neither the name of the copyright holder nor the names of its
                              ;    contributors may be used to endorse or promote products derived from
                              ;    this software without specific prior written permission.
                              ;
                              ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                              ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                              ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                              ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                              ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                              ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                              ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                              ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                              ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                              ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                              ;
                              ; ============================================================================
 
                              ;===============================================================================
                              ; Realtime clock routines
                              ;===============================================================================
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Read the real-time-clock chip.
                              ;
                              ; The entire contents of the clock registers and sram are read into a buffer
                              ; in one-shot rather than reading the registers individually.
                              ;
                              ; Parameters: none
                              ; Returns: d = 0 on success, otherwise non-zero
                              ; Modifies: d and RTCBuf
                              ; Stack space: 6 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              rtc_read:
 00FFE4C7 08EE30500                       ldx                     #RTC
 00FFE4CA 18E007FC0                       ldy                     #RTCBuf
 00FFE4CD 0C6080                          ldb                     #$80
 00FFE4CF 0E7002                          stb                     I2C_CTRL,x              ; enable I2C
 00FFE4D1 0CC0900DE                       ldd                     #$900DE                         ; read address, write op, STA + wr bit
 00FFE4D4 08DFC4                          bsr                     i2c_wr_cmd
 00FFE4D6 0C5080                          bitb            #$80
 00FFE4D8 02603C                          bne                     rtc_rxerr
 00FFE4DA 0CC010000                       ldd                     #$10000                         ; address zero, wr bit
 00FFE4DD 08DFBB                          bsr                     i2c_wr_cmd
 00FFE4DF 0C5080                          bitb            #$80
 00FFE4E1 026033                          bne                     rtc_rxerr
 00FFE4E3 0CC0900DF                       ldd                     #$900DF                         ; read address, read op, STA + wr bit
 00FFE4E6 08DFB2                          bsr                     i2c_wr_cmd
 00FFE4E8 0C5080                          bitb            #$80
 00FFE4EA 02602A                          bne                     rtc_rxerr
                                      
 00FFE4EC 05F                             clrb
                              rtcr0001:
 00FFE4ED 086020                          lda                     #$20
 00FFE4EF 0A7004                          sta                     I2C_CMD,x                       ; rd bit
 00FFE4F1 08DF9D                          bsr                     i2c_wait_tip
 00FFE4F3 08DFC8                          bsr                     i2c_wait_rx_nack
 00FFE4F5 0A6004                          lda                     I2C_STAT,x
 00FFE4F7 085080                          bita            #$80
 00FFE4F9 02601B                          bne                     rtc_rxerr
 00FFE4FB 0A6003                          lda                     I2C_RXR,x
 00FFE4FD 0A7A07                          sta                     b,y
 00FFE4FF 05C                             incb
 00FFE500 0C105F                          cmpb            #$5F
 00FFE502 025FE9                          blo                     rtcr0001
 00FFE504 086068                          lda                     #$68
 00FFE506 0A7004                          sta                     I2C_CMD,x                       ; STO, rd bit + nack
 00FFE508 08DF86                          bsr                     i2c_wait_tip
 00FFE50A 0A6004                          lda                     I2C_STAT,x
 00FFE50C 085080                          bita            #$80
 00FFE50E 026006                          bne                     rtc_rxerr
 00FFE510 0A6003                          lda                     I2C_RXR,x
 00FFE512 0A7A07                          sta                     b,y
 00FFE514 04F05F                          clrd                                                                    ; return 0
                              rtc_rxerr:
 00FFE516 06F002                          clr                     I2C_CTRL,x      ; disable I2C and return status
 00FFE518 04F                             clra
 00FFE519 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Write the real-time-clock chip.
                              ;
                              ; The entire contents of the clock registers and sram are written from a 
                              ; buffer (RTCBuf) in one-shot rather than writing the registers individually.
                              ;
                              ; Parameters: none
                              ; Returns: r1 = 0 on success, otherwise non-zero
                              ; Modifies: r1 and RTCBuf
                              ; Stack space: 6 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              rtc_write:
 00FFE51A 08EE30500                       ldx             #RTC
 00FFE51D 18E007FC0                       ldy             #RTCBuf
                                      
 00FFE520 0C6080                          ldb             #$80
 00FFE522 0E7002                          stb             I2C_CTRL,x              ; enable I2C
 00FFE524 0CC0900DE                       ldd             #$900DE                         ; read address, write op, STA + wr bit
 00FFE527 08DF71                          bsr             i2c_wr_cmd
 00FFE529 0C5080                          bitb    #$80
 00FFE52B 026FE9                          bne             rtc_rxerr
 00FFE52D 0CC010000                       ldd             #$10000                         ; address zero, wr bit
 00FFE530 08DF68                          bsr             i2c_wr_cmd
 00FFE532 0C5080                          bitb    #$80
 00FFE534 026FE0                          bne             rtc_rxerr
 
 00FFE536 0C6000                          ldb             #0
                              rtcw0001:
 00FFE538 034004                          pshs    b
 00FFE53A 0E6A05                          ldb             b,y
 00FFE53C 086010                          lda             #$10
 00FFE53E 08DF5A                          bsr             i2c_wr_cmd
 00FFE540 0C5080                          bitb    #$80
 00FFE542 035004                          puls    b
 00FFE544 026FD0                          bne             rtc_rxerr
 00FFE546 05C                             incb
 00FFE547 0C105F                          cmpb    #$5F
 00FFE549 025FED                          blo             rtcw0001
 00FFE54B 0E6A05                          ldb             b,y
 00FFE54D 086050                          lda             #$50                                    ; STO, wr bit
 00FFE54F 08DF49                          bsr             i2c_wr_cmd
 00FFE551 0C5080                          bitb    #$80
 00FFE553 026FC1                          bne             rtc_rxerr
 00FFE555 04F05F                          clrd                                                            ; return 0
 00FFE557 06F002                          clr             I2C_CTRL,x              ; disable I2C and return status
 00FFE559 039                             rts
 
                              ;==============================================================================
                              ; Keyboard I/O
                              ;==============================================================================
 
                                      ;--------------------------------------------------------------------------
                                      ; PS2 scan codes to ascii conversion tables.
                                      ;--------------------------------------------------------------------------
                                      ;
                                      org     (* + 127) & $FFFFFF80
 
                              unshiftedScanCodes:
 00FFE580 02E0A902E0A50A30A10A2           fcb     $2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
 00FFE587 0AC
 00FFE588 02E0AA0A80A60A4009060           fcb     $2e,$aa,$a8,$a6,$a4,$09,$60,$2e
 00FFE58F 02E
 00FFE590 02E02E02E02E02E071031           fcb     $2e,$2e,$2e,$2e,$2e,$71,$31,$2e
 00FFE597 02E
 00FFE598 02E02E07A073061077032           fcb     $2e,$2e,$7a,$73,$61,$77,$32,$2e
 00FFE59F 02E
 00FFE5A0 02E063078064065034033           fcb     $2e,$63,$78,$64,$65,$34,$33,$2e
 00FFE5A7 02E
 00FFE5A8 02E020076066074072035           fcb     $2e,$20,$76,$66,$74,$72,$35,$2e
 00FFE5AF 02E
 00FFE5B0 02E06E062068067079036           fcb     $2e,$6e,$62,$68,$67,$79,$36,$2e
 00FFE5B7 02E
 00FFE5B8 02E02E06D06A075037038           fcb     $2e,$2e,$6d,$6a,$75,$37,$38,$2e
 00FFE5BF 02E
 00FFE5C0 02E02C06B06906F030039           fcb     $2e,$2c,$6b,$69,$6f,$30,$39,$2e
 00FFE5C7 02E
 00FFE5C8 02E02E02F06C03B07002D           fcb     $2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
 00FFE5CF 02E
 00FFE5D0 02E02E02702E05B03D02E           fcb     $2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
 00FFE5D7 02E
 00FFE5D8 0AD02E00D05D02E05C02E           fcb     $ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
 00FFE5DF 02E
 00FFE5E0 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFE5E7 02E
 00FFE5E8 02E09502E09309402E02E           fcb     $2e,$95,$2e,$93,$94,$2e,$2e,$2e
 00FFE5EF 02E
 00FFE5F0 09807F09202E09109001B           fcb     $98,$7f,$92,$2e,$91,$90,$1b,$af
 00FFE5F7 0AF
 00FFE5F8 0AB02E09702E02E0960AE           fcb     $ab,$2e,$97,$2e,$2e,$96,$ae,$2e
 00FFE5FF 02E
 
 00FFE600 02E02E02E0A702E02E02E           fcb     $2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
 00FFE607 02E
 00FFE608 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE60F 02E
 00FFE610 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE617 02E
 00FFE618 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE61F 02E
 00FFE620 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE627 02E
 00FFE628 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE62F 02E
 00FFE630 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE637 02E
 00FFE638 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE63F 02E
 00FFE640 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE647 02E
 00FFE648 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE64F 02E
 00FFE650 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE657 02E
 00FFE658 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE65F 02E
 00FFE660 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE667 02E
 00FFE668 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE66F 02E
 00FFE670 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE677 02E
 00FFE678 02E02E0FA02E02E02E02E           fcb     $2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
 00FFE67F 02E
 
                              shiftedScanCodes:
 00FFE680 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE687 02E
 00FFE688 02E02E02E02E02E00907E           fcb     $2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
 00FFE68F 02E
 00FFE690 02E02E02E02E02E051021           fcb     $2e,$2e,$2e,$2e,$2e,$51,$21,$2e
 00FFE697 02E
 00FFE698 02E02E05A053041057040           fcb     $2e,$2e,$5a,$53,$41,$57,$40,$2e
 00FFE69F 02E
 00FFE6A0 02E043058044045024023           fcb     $2e,$43,$58,$44,$45,$24,$23,$2e
 00FFE6A7 02E
 00FFE6A8 02E020056046054052025           fcb     $2e,$20,$56,$46,$54,$52,$25,$2e
 00FFE6AF 02E
 00FFE6B0 02E04E04204804705905E           fcb     $2e,$4e,$42,$48,$47,$59,$5e,$2e
 00FFE6B7 02E
 00FFE6B8 02E02E04D04A05502602A           fcb     $2e,$2e,$4d,$4a,$55,$26,$2a,$2e
 00FFE6BF 02E
 00FFE6C0 02E03C04B04904F029028           fcb     $2e,$3c,$4b,$49,$4f,$29,$28,$2e
 00FFE6C7 02E
 00FFE6C8 02E03E03F04C03A05005F           fcb     $2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
 00FFE6CF 02E
 00FFE6D0 02E02E02202E07B02B02E           fcb     $2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
 00FFE6D7 02E
 00FFE6D8 02E02E00D07D02E07C02E           fcb     $2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
 00FFE6DF 02E
 00FFE6E0 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFE6E7 02E
 00FFE6E8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE6EF 02E
 00FFE6F0 02E07F02E02E02E02E01B           fcb     $2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
 00FFE6F7 02E
 00FFE6F8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE6FF 02E
 
 00FFE700 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE707 02E
 00FFE708 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE70F 02E
 00FFE710 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE717 02E
 00FFE718 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE71F 02E
 00FFE720 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE727 02E
 00FFE728 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE72F 02E
 00FFE730 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE737 02E
 00FFE738 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE73F 02E
 00FFE740 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE747 02E
 00FFE748 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE74F 02E
 00FFE750 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE757 02E
 00FFE758 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE75F 02E
 00FFE760 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE767 02E
 00FFE768 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE76F 02E
 00FFE770 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE777 02E
 00FFE778 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE77F 02E
 
                              ; control
                              keybdControlCodes:
 00FFE780 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE787 02E
 00FFE788 02E02E02E02E02E00907E           fcb     $2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
 00FFE78F 02E
 00FFE790 02E02E02E02E02E011021           fcb     $2e,$2e,$2e,$2e,$2e,$11,$21,$2e
 00FFE797 02E
 00FFE798 02E02E01A013001017040           fcb     $2e,$2e,$1a,$13,$01,$17,$40,$2e
 00FFE79F 02E
 00FFE7A0 02E003018004005024023           fcb     $2e,$03,$18,$04,$05,$24,$23,$2e
 00FFE7A7 02E
 00FFE7A8 02E020016006014012025           fcb     $2e,$20,$16,$06,$14,$12,$25,$2e
 00FFE7AF 02E
 00FFE7B0 02E00E00200800701905E           fcb     $2e,$0e,$02,$08,$07,$19,$5e,$2e
 00FFE7B7 02E
 00FFE7B8 02E02E00D00A01502602A           fcb     $2e,$2e,$0d,$0a,$15,$26,$2a,$2e
 00FFE7BF 02E
 00FFE7C0 02E03C00B00900F029028           fcb     $2e,$3c,$0b,$09,$0f,$29,$28,$2e
 00FFE7C7 02E
 00FFE7C8 02E03E03F00C03A01005F           fcb     $2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
 00FFE7CF 02E
 00FFE7D0 02E02E02202E07B02B02E           fcb     $2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
 00FFE7D7 02E
 00FFE7D8 02E02E00D07D02E07C02E           fcb     $2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
 00FFE7DF 02E
 00FFE7E0 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFE7E7 02E
 00FFE7E8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE7EF 02E
 00FFE7F0 02E07F02E02E02E02E01B           fcb     $2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
 00FFE7F7 02E
 00FFE7F8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE7FF 02E
 
                              keybdExtendedCodes:
 00FFE800 02E02E02E02E0A30A10A2           fcb     $2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
 00FFE807 02E
 00FFE808 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE80F 02E
 00FFE810 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE817 02E
 00FFE818 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE81F 02E
 00FFE820 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE827 02E
 00FFE828 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE82F 02E
 00FFE830 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE837 02E
 00FFE838 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE83F 02E
 00FFE840 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE847 02E
 00FFE848 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE84F 02E
 00FFE850 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE857 02E
 00FFE858 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE85F 02E
 00FFE860 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFE867 02E
 00FFE868 02E09502E09309402E02E           fcb     $2e,$95,$2e,$93,$94,$2e,$2e,$2e
 00FFE86F 02E
 00FFE870 09809909202E09109002E           fcb     $98,$99,$92,$2e,$91,$90,$2e,$2e
 00FFE877 02E
 00FFE878 02E02E09702E02E09602E           fcb     $2e,$2e,$97,$2e,$2e,$96,$2e,$2e
 00FFE87F 02E
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ;       Keyboard driver routines to interface to a PS2 style keyboard
                              ; Converts the scancode to ascii
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              SC_F12  EQU     $07
                              SC_C    EQU             $21
                              SC_T    EQU         $2C
                              SC_Z            EQU     $1A
                              SC_DEL  EQU                     $71     ; extend
                              SC_KEYUP        EQU             $F0     ; should be $f0
                              SC_EXTEND EQU     $E0
                              SC_CTRL EQU                     $14
                              SC_RSHIFT               EQU     $59
                              SC_NUMLOCK      EQU     $77
                              SC_SCROLLLOCK           EQU     $7E
                              SC_CAPSLOCK             EQU             $58
                              SC_ALT  EQU                     $11
 
                              ;#define SC_LSHIFT      EQU             $12
                              ;SC_DEL         EQU             $71             ; extend
                              ;SC_LCTRL       EQU             $58
 
                              SC_TAB  EQU     $0D
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Recieve a byte from the keyboard, used after a command is sent to the
                              ; keyboard in order to wait for a response.
                              ;
                              ; Parameters: none
                              ; Returns: accd = recieved byte ($00 to $FF), -1 on timeout
                              ; Modifies: acc
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdRecvByte:
 00FFE880 034010                          pshs    x
 00FFE882 08E000064                       ldx             #100                                            ; wait up to 1s
                              krb3:
 00FFE885 08D05A                          bsr             KeybdGetStatus  ; wait for response from keyboard
 00FFE887 05D                             tstb
 00FFE888 02B00B                          bmi             krb4                                            ; is input buffer full ? yes, branch
 00FFE88A 08D02D                          bsr             Wait10ms                                ; wait a bit
 00FFE88C 0301FF                          dex
 00FFE88E 026FF5                          bne             krb3                                            ; go back and try again
 00FFE890 0CCFFFFFF                       ldd             #-1                                                     ; return -1
 00FFE893 035090                          puls    x,pc
                              krb4:
 00FFE895 08D066                          bsr             KeybdGetScancode
 00FFE897 035090                          puls    x,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Send a byte to the keyboard.
                              ;
                              ; Parameters: accb byte to send
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 0 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdSendByte:
 00FFE899 0150F7FFFE30400                 stb             KEYBD
 00FFE89E 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait until the keyboard transmit is complete
                              ;
                              ; Parameters: none
                              ; Returns: r1 = 0 if successful, r1 = -1 timeout
                              ; Modifies: r1
                              ; Stack Space: 3 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdWaitTx:
 00FFE89F 034010                          pshs    x
 00FFE8A1 08E000064                       ldx             #100                            ; wait a max of 1s
                              kwt1:
 00FFE8A4 08D03B                          bsr             KeybdGetStatus
 00FFE8A6 0C4040                          andb    #$40                            ; check for transmit complete bit; branch if bit set
 00FFE8A8 02600B                          bne             kwt2
 00FFE8AA 08D00D                          bsr             Wait10ms                ; delay a little bit
 00FFE8AC 0301FF                          dex
 00FFE8AE 026FF4                          bne             kwt1                            ; go back and try again
 00FFE8B0 0CCFFFFFF                       ldd             #-1                                     ; timed out, return -1
 00FFE8B3 035090                          puls    x,pc
                              kwt2:
 00FFE8B5 04F                             clra                                                    ; wait complete, return 0
 00FFE8B6 05F                             clrb                                                    
 00FFE8B7 035090                          puls    x,pc                            
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for 10 ms
                              ;
                              ; Parameters: none
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              Wait10ms:
 00FFE8B9 034006                          pshs    d
 00FFE8BB 0150B6FFFFFFFE7                 lda             MSCOUNT+3
                              W10_0001:
 00FFE8C0 01F089                          tfr             a,b
 00FFE8C2 0150F0FFFFFFFE7                 subb    MSCOUNT+3
 00FFE8C7 0C1FFA                          cmpb    #$FFA
 00FFE8C9 022FF5                          bhi             W10_0001
 00FFE8CB 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for 300 ms (256 ms)
                              ;
                              ; Parameters: none
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              Wait300ms:
 00FFE8CD 034006                          pshs    d
 00FFE8CF 0150B6FFFFFFFE7                 lda             MSCOUNT+3
                              W300_0001:
 00FFE8D4 01F089                          tfr             a,b
 00FFE8D6 0150F0FFFFFFFE7                 subb    MSCOUNT+3
 00FFE8DB 0C1F00                          cmpb    #$F00
 00FFE8DD 022FF5                          bhi     W300_0001
 00FFE8DF 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get the keyboard status
                              ;
                              ; Parameters: none
                              ; Returns: d = status
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetStatus:
                              kbgs3:
 00FFE8E1 0150F6FFFE30401                 ldb             KEYBD+1
 00FFE8E6 0C5080                          bitb    #$80
 00FFE8E8 02600E                          bne             kbgs1
 00FFE8EA 0C5001                          bitb    #$01            ; check parity error flag
 00FFE8EC 026002                          bne             kbgs2
 00FFE8EE 04F                             clra
 00FFE8EF 039                             rts
                              kbgs2:
 00FFE8F0 0C60FE                          ldb             #$FE            ; request resend
 00FFE8F2 08DFA5                          bsr             KeybdSendByte
 00FFE8F4 08DFA9                          bsr             KeybdWaitTx
 00FFE8F6 020FE9                          bra             kbgs3
                              kbgs1:                                  ; return negative status
 00FFE8F8 0CAF00                          orb             #$F00
 00FFE8FA 086FFF                          lda             #-1
 00FFE8FC 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get the scancode from the keyboard port
                              ;
                              ; Parameters: none
                              ; Returns: acca = scancode
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetScancode:
 00FFE8FD 04F                             clra
 00FFE8FE 0150F6FFFE30400                 ldb             KEYBD                           ; get the scan code
 00FFE903 01507FFFFE30401                 clr             KEYBD+1                 ; clear receive register (write $00 to status reg)
 00FFE908 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Set the LEDs on the keyboard.
                              ;
                              ; Parameters: d LED status to set
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdSetLED:
 00FFE909 034004                          pshs    b
 00FFE90B 0C60ED                          ldb             #$ED                                            ; set LEDs command
 00FFE90D 08DF8A                          bsr             KeybdSendByte
 00FFE90F 08DF8E                          bsr             KeybdWaitTx
 00FFE911 08DF6D                          bsr             KeybdRecvByte   ; should be an ack
 00FFE913 035004                          puls    b
 00FFE915 08DF82                          bsr             KeybdSendByte
 00FFE917 08DF86                          bsr             KeybdWaitTx
 00FFE919 08DF65                          bsr             KeybdRecvByte   ; should be an ack
 00FFE91B 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get ID - get the keyboards identifier code.
                              ;
                              ; Parameters: none
                              ; Returns: d = $AB83, $00 on fail
                              ; Modifies: d, KeybdID updated
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetID:
 00FFE91C 0C60F2                          ldb             #$F2
 00FFE91E 08DF79                          bsr             KeybdSendByte
 00FFE920 08DF7D                          bsr             KeybdWaitTx
 00FFE922 08DF5C                          bsr             KeybdRecvByte
 00FFE924 0C5080                          bitb    #$80
 00FFE926 026014                          bne             kgnotKbd
 00FFE928 0C10AB                          cmpb    #$AB
 00FFE92A 026010                          bne             kgnotKbd
 00FFE92C 08DF52                          bsr             KeybdRecvByte
 00FFE92E 0C5080                          bitb    #$80
 00FFE930 02600A                          bne             kgnotKbd
 00FFE932 0C1083                          cmpb    #$83
 00FFE934 026006                          bne             kgnotKbd
 00FFE936 0CC00AB83                       ldd             #$AB83
                              kgid1:
 00FFE939 0DD124                          std             KeybdID
 00FFE93B 039                             rts
                              kgnotKbd:
 00FFE93C 04F                             clra
 00FFE93D 05F                             clrb
 00FFE93E 020FF9                          bra             kgid1
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Initialize the keyboard.
                              ;
                              ; Parameters:
                              ;               none
                              ;       Modifies:
                              ;               none
                              ; Returns:
                              ;               none
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdInit:
 00FFE940 034026                          pshs    d,y
 00FFE942 18E000005                       ldy             #5
 00FFE945 00F120                          clr             KeyState1               ; records key up/down state
 00FFE947 00F121                          clr             KeyState2               ; records shift,ctrl,alt state
                              kbdi0002:
 00FFE949 08DF6E                          bsr             Wait10ms
 00FFE94B 01507FFFFE30401                 clr             KEYBD+1                 ; clear receive register (write $00 to status reg)
 00FFE950 0C6FFF                          ldb             #-1                                     ; send reset code to keyboard
 00FFE952 0150F7FFFE30401                 stb             KEYBD+1                 ; write $FF to status reg to clear TX state
 00FFE957 08DF40                          bsr             KeybdSendByte   ; now write to transmit register
 00FFE959 08DF44                          bsr             KeybdWaitTx             ; wait until no longer busy
 00FFE95B 08DF23                          bsr             KeybdRecvByte   ; look for an ACK ($FA)
 00FFE95D 0C10FA                          cmpb    #$FA
 00FFE95F 026021                          bne             kbdiTryAgain
 00FFE961 08DF1D                          bsr             KeybdRecvByte   ; look for BAT completion code ($AA)
 00FFE963 0C10FC                          cmpb    #$FC                            ; reset error ?
 00FFE965 02701B                          beq             kbdiTryAgain
 00FFE967 0C10AA                          cmpb    #$AA                            ; reset complete okay ?
 00FFE969 026017                          bne             kbdiTryAgain
 
                                      ; After a reset, scan code set #2 should be active
                              .config:
 00FFE96B 0C60F0                          ldb             #$F0                    ; send scan code select
 00FFE96D 0150F7FFFE60001                 stb             LEDS
 00FFE972 08DF25                          bsr             KeybdSendByte
 00FFE974 08DF29                          bsr             KeybdWaitTx
 00FFE976 05D                             tstb
 00FFE977 02B009                          bmi             kbdiTryAgain
 00FFE979 08DF05                          bsr             KeybdRecvByte   ; wait for response from keyboard
 00FFE97B 04D                             tsta
 00FFE97C 02B004                          bmi             kbdiTryAgain
 00FFE97E 0C10FA                          cmpb    #$FA                                    ; ACK
 00FFE980 02700C                          beq             kbdi0004
                              kbdiTryAgain:
 00FFE982 0313FF                          dey
 00FFE984 026FC3                          bne       kbdi0002
                              .keybdErr:
 00FFE986 0CCFFE9AE                       ldd             #msgBadKeybd
 00FFE989 017FFFA41                       lbsr    DisplayStringCRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFE98C 020014                          bra             ledxit
                              kbdi0004:
 00FFE98E 0C6002                          ldb             #2                      ; select scan code set #2
 00FFE990 08DF07                          bsr             KeybdSendByte
 00FFE992 08DF0B                          bsr             KeybdWaitTx
 00FFE994 05D                             tstb
 00FFE995 02BFEB                          bmi             kbdiTryAgain
 00FFE997 08DEE7                          bsr             KeybdRecvByte   ; wait for response from keyboard
 00FFE999 04D                             tsta
 00FFE99A 02BFE6                          bmi             kbdiTryAgain
 00FFE99C 0C10FA                          cmpb    #$FA
 00FFE99E 026FE2                          bne             kbdiTryAgain
 00FFE9A0 08DF7A                          bsr             KeybdGetID
                              ledxit:
 00FFE9A2 0C6007                          ldb             #$07
 00FFE9A4 08DF63                          bsr             KeybdSetLED
 00FFE9A6 08DF25                          bsr             Wait300ms
 00FFE9A8 0C6000                          ldb             #$00
 00FFE9AA 08DF5D                          bsr             KeybdSetLED
 00FFE9AC 0350A6                          puls    d,y,pc
 
                              msgBadKeybd:
 00FFE9AE 04B06507906206F061072           fcb             "Keyboard error",0
 00FFE9B5 06402006507207206F072
 00FFE9BC 000
 
                              ;------------------------------------------------------------------------------
                              ; Calculate number of character in input buffer
                              ;
                              ; Parameters:
                              ;               y = $Cn00000 where n is core id
                              ; Returns:
                              ;               d = number of bytes in buffer.
                              ;------------------------------------------------------------------------------
 
                              kbdRcvCount:
 00FFE9BD 04F                             clra
 00FFE9BE 0E6A08128                       ldb             kbdTailRcv,y
 00FFE9C1 0E0A08127                       subb    kbdHeadRcv,y
 00FFE9C4 02C008                          bge             krcXit
 00FFE9C6 0C6040                          ldb             #$40
 00FFE9C8 0E0A08127                       subb    kbdHeadRcv,y
 00FFE9CB 0EBA08128                       addb    kbdTailRcv,y
                              krcXit:
 00FFE9CE 039                             rts
 
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdIRQ:
 00FFE9CF 0150B6FFFE30401                 lda             KEYBD+1                                         ; check status
 00FFE9D4 085080                          bita    #$80                                                    ; was key pressed?
 00FFE9D6 027034                          beq             notKbdIRQ                                       ; if not, exit
 00FFE9D8 0150F6FFFE30400                 ldb             KEYBD                                                   ; get the scan code
 00FFE9DD 01507FFFFE30401                 clr             KEYBD+1                                         ; clear receive register (write $00 to status reg)
 00FFE9E2 034004                          pshs    b                                                                       ; save it off
 00FFE9E4 0B6FF0010                       lda             IOFocusID                                       ; compute core memory address $Cn0000
 00FFE9E7 05F                             clrb
 00FFE9E8 048                             asla
 00FFE9E9 048                             asla
 00FFE9EA 048                             asla
 00FFE9EB 048                             asla
 00FFE9EC 08AC00                          ora             #$C00                                                   ; address $Cn0000       
 00FFE9EE 01F002                          tfr             d,y                                                             ; y =
 00FFE9F0 08DFCB                          bsr             kbdRcvCount                             ; get count of scan codes in buffer
 00FFE9F2 0C1040                          cmpb    #64                                                             ; check if buffer full?
 00FFE9F4 024017                          bhs             kbdBufFull                              ; if buffer full, ignore new keystroke
 00FFE9F6 01F021                          tfr             y,x                                                             ; compute fifo address
 00FFE9F8 0E6A08128                       ldb             kbdTailRcv,y                    ; b = buffer index
 00FFE9FB 035002                          puls    a                                                                       ; get back scancode
 00FFE9FD 030040                          leax    kbdFifo,x                                       ; x = base address for fifo
 00FFE9FF 0A7845                          sta             b,x                                                             ; store in buffer
 00FFEA01 05C                             incb                                                                            ; increment buffer index
 00FFEA02 0C403F                          andb    #$3f                                                    ; wrap around at 64 chars
 00FFEA04 0E7A08128                       stb             kbdTailRcv,y                    ; update it
 00FFEA07 08601C                          lda             #28                                                             ; Keyboard is IRQ #28
 00FFEA09 0B7FF0011                       sta             IrqSource                                       ; stuff a byte indicating the IRQ source for PEEK()
                              notKbdIRQ:
 00FFEA0C 039                             rts     
                              kbdBufFull:
 00FFEA0D 032601                          leas    1,s                                                             ; get rid of saved scancode
 00FFEA0F 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              DBGCheckForKey:
 00FFEA10 020ECF                          bra             KeybdGetStatus
 
 
                              ; KeyState2 variable bit meanings
                              ;1176543210
                              ; ||||||||+ = shift
                              ; |||||||+- = alt
                              ; ||||||+-- = control
                              ; |||||+--- = numlock
                              ; ||||+---- = capslock
                              ; |||+----- = scrolllock
                              ; ||+------ = <empty>
                              ; |+------- =    "
                              ; |         =    "
                              ; |         =    "
                              ; |         =    "
                              ; +-------- = extended
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Keyboard get routine.
                              ;
                              ; The routine may get characters directly from the scancode input or less
                              ; directly from the scancode buffer, if things are interrupt driven.
                              ;
                              ; Parameters:
                              ;               b:  bit 11 = blocking status 1=blocking, 0=non blocking
                              ;               b:      bit 1  = scancode source 1=scancode buffer, 0=direct
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              GetKey:
 00FFEA12 034030                          pshs    x,y
 00FFEA14 0D7126                          stb             KeybdBlock                              ; save off blocking status
                              dbgk2:
 00FFEA16 0D6126                          ldb             KeybdBlock
 00FFEA18 034004                          pshs    b
 00FFEA1A 0C5001                          bitb    #1                                                              ; what is the scancode source
 00FFEA1C 02701A                          beq             dbgk20                                          ; branch if direct read
 00FFEA1E 0150B6FFFFFFFE0                 lda             COREID                                          ; compute core memory address
 00FFEA23 05F                             clrb
 00FFEA24 048                             asla
 00FFEA25 048                             asla
 00FFEA26 048                             asla
 00FFEA27 048                             asla
 00FFEA28 08AC00                          ora             #$C00
 00FFEA2A 01F002                          tfr             d,y                                                             ; y = $Cn0000
 00FFEA2C 08DF8F                          bsr             kbdRcvCount
 00FFEA2E 05D                             tstb                                                                            ; anything in buffer?
 00FFEA2F 035004                          puls    b
 00FFEA31 026018                          bne             dbgk1                                                   ; branch if something in buffer
 00FFEA33 05D                             tstb
 00FFEA34 02BFE0                          bmi             dbgk2                                                   ; if no key and blocking - loop
 00FFEA36 02000E                          bra             dbgk24
                              dbgk20:
 00FFEA38 18E000000                       ldy             #0
 00FFEA3B 08DEA4                          bsr             KeybdGetStatus
 00FFEA3D 0C4080                          andb    #$80                                                    ; is key available?
 00FFEA3F 035004                          puls    b
 00FFEA41 026008                          bne             dbgk1                                                   ; branch if key
 00FFEA43 05D                             tstb                                                                            ; block?
 00FFEA44 02BFD0                          bmi             dbgk2                                                   ; If no key and blocking - loop
                              dbgk24:
 00FFEA46 0CCFFFFFF                       ldd             #-1                                                             ; return -1 if no block and no key
 00FFEA49 0350B0                          puls    x,y,pc
                              dbgk1:
 00FFEA4B 18C000000                       cmpy    #0
 00FFEA4E 026004                          bne             dbgk22
 00FFEA50 08DEAB                          bsr             KeybdGetScancode        ; get scancode directly
 00FFEA52 020011                          bra             dbgk23
                              dbgk22:
                                      ; Retrieve value from scancode buffer
 00FFEA54 01F021                          tfr             y,x
 00FFEA56 030040                          leax    kbdFifo,x                                       ; x = fifo address
 00FFEA58 0E6A08127                       ldb             kbdHeadRcv,y                    ; b = buffer index
 00FFEA5B 0A6A0D                          lda             b,x                                                             ; get the scancode
 00FFEA5D 05C                             incb                                                                            ; increment fifo index
 00FFEA5E 0C403F                          andb    #$3f                                                    ; and wrap around
 00FFEA60 0E7A08127                       stb             kbdHeadRcv,y                    ; save it back
 00FFEA63 01F089                          tfr             a,b                                                             ; the scancode is needed in accb
                              dbgk23:
                              ;       lbsr    DispByteAsHex
                                      ; Make sure there is a small delay between scancode reads
 00FFEA65 08E000014                       ldx             #20
                              dbgk3:
 00FFEA68 0301FF                          dex
 00FFEA6A 026FFC                          bne             dbgk3
                                      ; switch on scan code
 00FFEA6C 0C10F0                          cmpb    #SC_KEYUP
 00FFEA6E 026004                          bne             dbgk4
 00FFEA70 0D7120                          stb             KeyState1                                       ; make KeyState1 <> 0
 00FFEA72 020FA2                          bra             dbgk2                                                   ; loop back
                              dbgk4:
 00FFEA74 0C10E0                          cmpb    #SC_EXTEND
 00FFEA76 026008                          bne             dbgk5
 00FFEA78 096121                          lda             KeyState2
 00FFEA7A 08A800                          ora             #$800
 00FFEA7C 097121                          sta             KeyState2
 00FFEA7E 020F96                          bra             dbgk2
                              dbgk5:
 00FFEA80 0C1014                          cmpb    #SC_CTRL
 00FFEA82 026016                          bne             dbgkNotCtrl
 00FFEA84 00D120                          tst             KeyState1
 00FFEA86 026008                          bne             dbgk7
 00FFEA88 096121                          lda             KeyState2
 00FFEA8A 08A004                          ora             #4
 00FFEA8C 097121                          sta             KeyState2
 00FFEA8E 020006                          bra             dbgk8
                              dbgk7:
 00FFEA90 096121                          lda             KeyState2
 00FFEA92 084FFB                          anda    #~4
 00FFEA94 097121                          sta             KeyState2
                              dbgk8:
 00FFEA96 00F120                          clr             KeyState1
 00FFEA98 020F7C                          bra             dbgk2
                              dbgkNotCtrl:
 00FFEA9A 0C1059                          cmpb    #SC_RSHIFT
 00FFEA9C 026016                          bne             dbgkNotRshift
 00FFEA9E 00D120                          tst             KeyState1
 00FFEAA0 026008                          bne             dbgk9
 00FFEAA2 096121                          lda             KeyState2
 00FFEAA4 08A001                          ora             #1
 00FFEAA6 097121                          sta             KeyState2
 00FFEAA8 020006                          bra             dbgk10
                              dbgk9:
 00FFEAAA 096121                          lda             KeyState2
 00FFEAAC 084FFE                          anda    #~1
 00FFEAAE 097121                          sta             KeyState2
                              dbgk10:
 00FFEAB0 00F120                          clr             KeyState1
 00FFEAB2 020F62                          bra             dbgk2
                              dbgkNotRshift:
 00FFEAB4 0C1077                          cmpb    #SC_NUMLOCK
 00FFEAB6 026013                          bne             dbgkNotNumlock
 00FFEAB8 096121                          lda             KeyState2
 00FFEABA 088010                          eora    #16
 00FFEABC 097121                          sta             KeyState2
 00FFEABE 096122                          lda             KeyLED
 00FFEAC0 088002                          eora    #2
 00FFEAC2 097122                          sta             KeyLED
 00FFEAC4 01F089                          tfr             a,b
 00FFEAC6 04F                             clra
 00FFEAC7 08DE40                          bsr             KeybdSetLED
 00FFEAC9 020F4B                          bra             dbgk2
                              dbgkNotNumlock:
 00FFEACB 0C1058                          cmpb    #SC_CAPSLOCK
 00FFEACD 026013                          bne             dbgkNotCapslock
 00FFEACF 096121                          lda             KeyState2
 00FFEAD1 088020                          eora    #32
 00FFEAD3 097121                          sta             KeyState2
 00FFEAD5 096122                          lda             KeyLED
 00FFEAD7 088004                          eora    #4
 00FFEAD9 097122                          sta             KeyLED
 00FFEADB 01F089                          tfr             a,b
 00FFEADD 04F                             clra
 00FFEADE 08DE29                          bsr             KeybdSetLED
 00FFEAE0 020F34                          bra             dbgk2
                              dbgkNotCapslock:
 00FFEAE2 0C107E                          cmpb    #SC_SCROLLLOCK
 00FFEAE4 026013                          bne             dbgkNotScrolllock
 00FFEAE6 096121                          lda             KeyState2
 00FFEAE8 088040                          eora    #64
 00FFEAEA 097121                          sta             KeyState2
 00FFEAEC 096122                          lda             KeyLED
 00FFEAEE 088001                          eora    #1
 00FFEAF0 097122                          sta             KeyLED
 00FFEAF2 01F089                          tfr             a,b
 00FFEAF4 04F                             clra
 00FFEAF5 08DE12                          bsr             KeybdSetLED
 00FFEAF7 020F1D                          bra             dbgk2
                              dbgkNotScrolllock:
 00FFEAF9 0C1011                          cmpb    #SC_ALT
 00FFEAFB 026016                          bne             dbgkNotAlt
 00FFEAFD 00D120                          tst             KeyState1
 00FFEAFF 026008                          bne             dbgk11
 00FFEB01 096121                          lda             KeyState2
 00FFEB03 08A002                          ora             #2
 00FFEB05 097121                          sta             KeyState2
 00FFEB07 020006                          bra             dbgk12
                              dbgk11:
 00FFEB09 096121                          lda             KeyState2
 00FFEB0B 084FFD                          anda    #~2
 00FFEB0D 097121                          sta             KeyState2
                              dbgk12:
 00FFEB0F 00F120                          clr             KeyState1
 00FFEB11 020F03                          bra             dbgk2
                              dbgkNotAlt:
 00FFEB13 00D120                          tst             KeyState1
 00FFEB15 027004                          beq             dbgk13
 00FFEB17 00F120                          clr             KeyState1
 00FFEB19 020EFB                          bra             dbgk2
                              dbgk13:
 00FFEB1B 096121                          lda             KeyState2               ; Check for CTRL-ALT-DEL
 00FFEB1D 084006                          anda    #6
 00FFEB1F 081006                          cmpa    #6
 00FFEB21 026008                          bne             dbgk14
 00FFEB23 0C1071                          cmpb    #SC_DEL 
 00FFEB25 026004                          bne             dbgk14
 00FFEB27 06E90FFFFFFC                    jmp             [$FFFFFC]               ; jump to NMI vector
                              dbgk14:
 00FFEB2B 00D121                          tst             KeyState2               ; extended code?
 00FFEB2D 02A00B                          bpl             dbgk15
 00FFEB2F 096121                          lda             KeyState2
 00FFEB31 0847FF                          anda    #$7FF
 00FFEB33 097121                          sta             KeyState2
 00FFEB35 08EFFE800                       ldx             #keybdExtendedCodes
 00FFEB38 020017                          bra             dbgk18
                              dbgk15:
 00FFEB3A 096121                          lda             KeyState2               ; Is CTRL down?
 00FFEB3C 085004                          bita    #4
 00FFEB3E 027005                          beq             dbgk16
 00FFEB40 08EFFE780                       ldx             #keybdControlCodes
 00FFEB43 02000C                          bra             dbgk18
                              dbgk16:
 00FFEB45 085001                          bita    #1                                      ; Is shift down?
 00FFEB47 027005                          beq             dbgk17
 00FFEB49 08EFFE680                       ldx             #shiftedScanCodes
 00FFEB4C 020003                          bra             dbgk18
                              dbgk17:
 00FFEB4E 08EFFE580                       ldx             #unshiftedScanCodes
                              dbgk18:
 00FFEB51 0E690FFFE580                    ldb             b,x                                     ; load accb with ascii from table
 00FFEB55 04F                             clra
 00FFEB56 0350B0                          puls    x,y,pc                  ; and return
                                      
 
 00FFEB58 04B04505904204F041052           fcb             "KEYBOARD"
 00FFEB5F 044
 00FFEB60 FFEB6A                          fcw             KeybdOpen
 00FFEB62 FFEB6B                          fcw             KeybdClose
 00FFEB64 FFEB6C                          fcw             KeybdRead
 00FFEB66 FFEB6D                          fcw             KeybdWrite
 00FFEB68 FFEB6E                          fcw             KeybdSeek
 
                              ; Keyboard Open:
                              ; Initialize the keyboard buffer head and tail indexes
                              ;
                              KeybdOpen:
 00FFEB6A 039                             rts
 
                              ; Keyboard Close:
                              ; Nothing to do except maybe clear the keyboard buffer
                              ;
                              KeybdClose:
 00FFEB6B 039                             rts
                              ;
                              KeybdRead:
 00FFEB6C 039                             rts
                              ;
                              KeybdWrite:
 00FFEB6D 039                             rts
 
                              KeybdSeek:
 00FFEB6E 039                             rts
 
                              ;==============================================================================
                              ; Serial I/O
                              ;==============================================================================
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; Serial port routines for a WDC6551 compatible circuit.
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              ;------------------------------------------------------------------------------
                              ; Initialize serial port.
                              ;
                              ; Clear buffer indexes. Two bytes are used for the buffer index even though
                              ; only a single byte is needed. This is for convenience in calculating the
                              ; number of characters in the buffer, done later. The upper byte remains at
                              ; zero.
                              ; The port is initialized for 9600 baud, 1 stop bit and 8 bits data sent.
                              ; The internal baud rate generator is used.
                              ;
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               d
                              ; Returns:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              InitSerial:
                              SerialInit:
 00FFEB6F 04F                             clra
 00FFEB70 05F                             clrb
 00FFEB71 0DD130                          std             SerHeadRcv-1
 00FFEB73 0DD132                          std             SerTailRcv-1
 00FFEB75 0DD135                          std             SerHeadXmit-1
 00FFEB77 0DD137                          std             SerTailXmit-1
 00FFEB79 00F139                          clr             SerRcvXon
 00FFEB7B 00F140                          clr             SerRcvXoff
 00FFEB7D 0150B6FFFFFFFE0                 lda             COREID
                              sini1:
 00FFEB82 0B1FF0010                       cmpa    IOFocusID
 00FFEB85 026FFB                          bne             sini1
 00FFEB87 0C6009                          ldb             #$09                                            ; dtr,rts active, rxint enabled, no parity
 00FFEB89 0150F7FFFE30102                 stb             ACIA+ACIA_CMD
 00FFEB8E 0C601F                          ldb             #$1F                                            ; baud 9600, 1 stop bit, 8 bit, internal baud gen
 00FFEB90 0150F7FFFE30103                 stb             ACIA+ACIA_CTRL
 00FFEB95 0C60A6                          ldb             #$0A6                                           ; diable fifos, reset fifos
 00FFEB97 0150F7FFFE3010B                 stb             ACIA+ACIA_CTRL2 
 00FFEB9C 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; SerialGetChar
                              ;
                              ; Check the serial port buffer to see if there's a char available. If there's
                              ; a char available then return it. If the buffer is almost empty then send an
                              ; XON.
                              ;
                              ; Stack Space:
                              ;               2 words
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;               d = character or -1
                              ;------------------------------------------------------------------------------
 
                              SerialGetChar:
 00FFEB9D 034030                                  pshs    x,y
 00FFEB9F 18E000000                               ldy             #0
 00FFEBA2 01A010                                  sei                                                                             ; disable interrupts
 00FFEBA4 08D082                                  bsr             SerialRcvCount                  ; check number of chars in receive buffer
 00FFEBA6 0C1008                                  cmpb    #8                                                      ; less than 8?
 00FFEBA8 02200C                                  bhi             sgc2
 00FFEBAA 0D6139                                  ldb             SerRcvXon                               ; skip sending XON if already sent
 00FFEBAC 026008                                  bne       sgc2            ; XON already sent?
 00FFEBAE 0C6011                                  ldb             #XON                                            ; if <8 send an XON
 00FFEBB0 00F140                                  clr             SerRcvXoff                      ; clear XOFF status
 00FFEBB2 0D7139                                  stb             SerRcvXon                               ; flag so we don't send it multiple times
 00FFEBB4 08D052                                  bsr             SerialPutChar
                              sgc2:
 00FFEBB6 0D6131                                  ldb             SerHeadRcv                      ; check if anything is in buffer
 00FFEBB8 0D1133                                  cmpb    SerTailRcv
 00FFEBBA 02700A                                  beq             sgcNoChars                      ; no?
 00FFEBBC 08EBFF000                               ldx             #SerRcvBuf
 00FFEBBF 04F                                     clra
 00FFEBC0 0E6835                                  ldb             b,x                                                     ; get byte from buffer
 00FFEBC2 00C131                                  inc             SerHeadRcv                      ; 4k wrap around
 00FFEBC4 020003                                  bra             sgcXit
                              sgcNoChars:
 00FFEBC6 0CCFFFFFF                               ldd             #-1
                              sgcXit:
 00FFEBC9 01C0EF                                  cli
 00FFEBCB 0350B0                                  puls    x,y,pc
 
                              ;------------------------------------------------------------------------------
                              ; SerialPeekChar
                              ;
                              ; Check the serial port buffer to see if there's a char available. If there's
                              ; a char available then return it. But don't update the buffer indexes. No need
                              ; to send an XON here.
                              ;
                              ; Stack Space:
                              ;               0 words
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;               d = character or -1
                              ;------------------------------------------------------------------------------
 
                              SerialPeekChar:
 00FFEBCD 034011                          pshs    x,ccr
 00FFEBCF 01A010                          sei
 00FFEBD1 0D6131                          ldb             SerHeadRcv                              ; check if anything is in buffer
 00FFEBD3 0D1133                          cmpb    SerTailRcv
 00FFEBD5 027008                          beq             spcNoChars                              ; no?
 00FFEBD7 08EBFF000                       ldx             #SerRcvBuf
 00FFEBDA 04F                             clra
 00FFEBDB 0E6815                          ldb             b,x                                                             ; get byte from buffer
 00FFEBDD 020003                          bra             spcXit
                              spcNoChars:
 00FFEBDF 0CCFFFFFF                       ldd             #-1
                              spcXit:
 00FFEBE2 035091                          puls    x,ccr,pc
 
                              ;------------------------------------------------------------------------------
                              ; SerialPeekChar
                              ;               Get a character directly from the I/O port. This bypasses the input
                              ; buffer.
                              ;
                              ; Stack Space:
                              ;               0 words
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               d
                              ; Returns:
                              ;               d = character or -1
                              ;------------------------------------------------------------------------------
 
                              SerialPeekCharDirect:
 00FFEBE4 0150B6FFFFFFFE0                 lda             COREID                                                  ; Ensure we have the IO Focus
 00FFEBE9 0B1FF0010                       cmpa    IOFocusID
 00FFEBEC 026014                          bne             spcd0001
                                      ; Disallow interrupts between status read and rx read.
 00FFEBEE 01A010                          sei
 00FFEBF0 0150F6FFFE30101                 ldb             ACIA+ACIA_STAT
 00FFEBF5 0C5008                          bitb    #8                                                                      ; look for Rx not empty
 00FFEBF7 027009                          beq             spcd0001
 00FFEBF9 04F                             clra
 00FFEBFA 0150F6FFFE30100                 ldb             ACIA+ACIA_RX
 00FFEBFF 01C0EF                          cli
 00FFEC01 039                             rts
                              spcd0001:
 00FFEC02 0CCFFFFFF                       ldd             #-1
 00FFEC05 01C0EF                          cli
 00FFEC07 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; SerialPutChar
                              ;    Put a character to the serial transmitter. This routine blocks until the
                              ; transmitter is empty. 
                              ;
                              ; Stack Space
                              ;               0 words
                              ; Parameters:
                              ;               b = character to put
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              SerialPutChar:
 00FFEC08 034003                          pshs    a,ccr
                              spc0001:
 00FFEC0A 0150B6FFFFFFFE0                 lda             COREID                                  ; Ensure we have the IO Focus
 00FFEC0F 0B1FF0010                       cmpa    IOFocusID
 00FFEC12 026FF6                          bne             spc0001
 00FFEC14 01C0EF                          cli                                                                             ; provide a window for an interrupt to occur
 00FFEC16 01A010                          sei
                                      ; Between the status read and the transmit do not allow an
                                      ; intervening interrupt.
 00FFEC18 0150B6FFFE30101                 lda             ACIA+ACIA_STAT  ; wait until the uart indicates tx empty
 00FFEC1D 085010                          bita    #16                                                     ; bit #4 of the status reg
 00FFEC1F 027FE9                          beq             spc0001                     ; branch if transmitter is not empty
 00FFEC21 0150F7FFFE30100                 stb             ACIA+ACIA_TX            ; send the byte
 00FFEC26 035083                          puls    a,ccr,pc
 
                              ;------------------------------------------------------------------------------
                              ; Calculate number of character in input buffer
                              ;
                              ; Parameters:
                              ;               y = 0 if current core, otherwise reference to core memory area $Cyxxxx
                              ; Returns:
                              ;               d = number of bytes in buffer.
                              ;------------------------------------------------------------------------------
 
                              SerialRcvCount:
 00FFEC28 04F                             clra
 00FFEC29 0E6A08133                       ldb             SerTailRcv,y
 00FFEC2C 0E0A08131                       subb    SerHeadRcv,y
 00FFEC2F 02C009                          bge             srcXit
 00FFEC31 0CC001000                       ldd             #$1000
 00FFEC34 0A3A08131                       subd    SerHeadRcv,y
 00FFEC37 0E3A08133                       addd    SerTailRcv,y
                              srcXit:
 00FFEC3A 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Serial IRQ routine
                              ;
                              ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                              ; Received characters are buffered. If the buffer becomes full, new characters
                              ; will be lost.
                              ;
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               d,x
                              ; Returns:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              SerialIRQ:
                              sirqNxtByte:
 00FFEC3B 0150F6FFFE30101                 ldb             ACIA+ACIA_STAT  ; check the status
 00FFEC40 0C5008                          bitb    #$08                                            ; bit 3 = rx full
 00FFEC42 027049                          beq             notRxInt
 00FFEC44 0150F6FFFE30100                 ldb             ACIA+ACIA_RX            ; get data from Rx buffer to clear interrupt
 00FFEC49 0C1014                          cmpb    #CTRLT                                  ; detect special keystroke
 00FFEC4B 026000                          bne     sirq0001
                              ;       bsr     DumpTraceQueue
                              sirq0001:
 00FFEC4D 034004                          pshs    b
                                      ; Compute receive buffer address
 00FFEC4F 0B6FF0010                       lda             IOFocusID
 00FFEC52 048                             asla
 00FFEC53 048                             asla
 00FFEC54 048                             asla
 00FFEC55 048                             asla
 00FFEC56 08AC00                          ora             #$C00
 00FFEC58 05F                             clrb    
 00FFEC59 01F002                          tfr             d,y
 00FFEC5B 035004                          puls    b
 00FFEC5D 0A6A08133                       lda             SerTailRcv,y                    ; check if recieve buffer full
 00FFEC60 04C                             inca
 00FFEC61 0A1A08131                       cmpa    SerHeadRcv,y
 00FFEC64 027027                          beq             sirqRxFull
 00FFEC66 0A7A08133                       sta             SerTailRcv,y            ; update tail pointer
 00FFEC69 04A                             deca                                                                    ; backup
 00FFEC6A 01E089                          exg             a,b
 00FFEC6C 030A0A000BFF000                 leax    SerRcvBuf,y                     ; x = buffer address
 00FFEC71 0A7A0F                          sta             b,x                                                     ; store recieved byte in buffer
 00FFEC73 06DA08140                       tst             SerRcvXoff,y            ; check if xoff already sent
 00FFEC76 026FC3                          bne             sirqNxtByte
 00FFEC78 08DFAE                          bsr             SerialRcvCount  ; if more than 4080 chars in buffer
 00FFEC7A 0C1FF0                          cmpb    #4080
 00FFEC7C 025FBD                          blo             sirqNxtByte
 00FFEC7E 0C6013                          ldb             #XOFF                                           ; send an XOFF
 00FFEC80 06FA08139                       clr             SerRcvXon,y                     ; clear XON status
 00FFEC83 0E7A08140                       stb             SerRcvXoff,y            ; set XOFF status
 00FFEC86 0150F7FFFE30100                 stb             ACIA+ACIA_TX
 00FFEC8B 020FAE                          bra             sirqNxtByte     ; check the status for another byte
                              sirqRxFull:
                              notRxInt:
 00FFEC8D 039                             rts
 
                              nmeSerial:
 00FFEC8E 05306507206906106C000           fcb             "Serial",0
 
                              ;------------------------------------------------------------------------------
                              ; Put a string to the serial port.
                              ;
                              ; Parameters:
                              ;               d = pointer to string
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              SerialPutString:
 00FFEC95 034016                          pshs    d,x
 00FFEC97 01F001                          tfr             d,x
                              sps2:
 00FFEC99 0E6804                          ldb             ,x
 00FFEC9B 027006                          beq             spsXit
 00FFEC9D 030001                          inx
 00FFEC9F 08DF67                          bsr             SerialPutChar
 00FFECA1 020FF6                          bra             sps2
                              spsXit:
 00FFECA3 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; A little routine to test serial output.
                              ;
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              SerialOutputTest:
 00FFECA5 034006                          pshs    d
 00FFECA7 0CCFFECC5                       ldd             #msgSerialTest
 00FFECAA 017FFF709                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFECAD 08DEC0                          bsr             SerialInit
                              sotst1:
 00FFECAF 0C6011                          ldb             #XON
 00FFECB1 08DF55                          bsr             SerialPutChar
 00FFECB3 08DF53                          bsr             SerialPutChar
 00FFECB5 08DF51                          bsr             SerialPutChar
 00FFECB7 0CCFFECC5                       ldd             #msgSerialTest
 00FFECBA 08DFD9                          bsr             SerialPutString
 00FFECBC 01700001B                       lbsr    INCH
 00FFECBF 0C1003                          cmpb    #CTRLC
 00FFECC1 026FEC                          bne             sotst1
 00FFECC3 035086                          puls    d,pc
 
                              msgSerialTest:
 00FFECC5 05306507206906106C020           fcb     "Serial port test",CR,LF,0
 00FFECCC 07006F072074020074065
 00FFECD3 07307400D00A000
 
 
                              ;------------------------------------------------------------------------------
                              ; Check if there is a keyboard character available. If so return true (<0)
                              ; otherwise return false (0) in accb.
                              ;------------------------------------------------------------------------------
                              ;
                              KeybdCheckForKeyDirect:
 00FFECD8 020D36                          bra             DBGCheckForKey
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              INCH:
 00FFECDA 034004                          pshs    b
                              INCH2:
 00FFECDC 0150F6FFFFFFFE0                 ldb             COREID
 00FFECE1 0F1FF0010                       cmpb    IOFocusID       ; if we do not have focus, block
 00FFECE4 026FF6                          bne             INCH2                   
                              ;       ldb             #$800                   ; block if no key available, get scancode directly
                              ;       bra             GetKey
                              ;       jsr             [CharInVec]     ; vector is being overwritten somehow
 00FFECE6 017FFFEFB                       lbsr    SerialPeekCharDirect
*** warning 1: Long branch within short branch range could be optimized
 00FFECE9 04D                             tsta
 00FFECEA 02B003                          bmi             INCH1                   ; block if no key available
 00FFECEC 032601                          leas    1,s                             ; get rid of blocking status
 00FFECEE 039                             rts
                              INCH1:
 00FFECEF 035004                          puls    b                                       ; check blocking status
 00FFECF1 05D                             tstb
 00FFECF2 02BFE6                          bmi     INCH                    ; if blocking, loop
 00FFECF4 0CCFFFFFF                       ldd             #-1                             ; return -1 if no char available
 00FFECF7 039                             rts
 
                              INCHE:
 00FFECF8 08DFE0                          bsr             INCH
 00FFECFA 020009                          bra             INCHEK3
 
                              INCHEK:
 00FFECFC 08DFDC                          bsr             INCH
 00FFECFE 01507DFFFFFCA00                 tst             KeybdEcho
 00FFED03 02700C                          beq             INCHEK1
                              INCHEK3:
 00FFED05 08100D                          cmpa    #CR
 00FFED07 026005                          bne             INCHEK2
 00FFED09 017FFE3C6                       lbsr            CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFED0C 020003                          bra             INCHEK1
                              INCHEK2:
 00FFED0E 017FFF5E4                       lbsr    DisplayChar
*** warning 1: Long branch within short branch range could be optimized
                              INCHEK1:
 00FFED11 039                             rts
 
                              OUTCH:
 00FFED12 06E90F000800                    jmp             [CharOutVec]
 
                              ;------------------------------------------------------------------------------
                              ; r1 0=echo off, non-zero = echo on
                              ;------------------------------------------------------------------------------
                              ;
                              SetKeyboardEcho:
 00FFED16 0150F7FFFFFCA00                 stb             KeybdEcho
 00FFED1B 039                             rts
 
 
                              ;------------------------------------------------------------------------------
                              ; Parameters:
                              ;               x,d     bitmap of sprites to enable
                              ;------------------------------------------------------------------------------
 
                              ShowSprites:
 00FFED1C 0150BFFFFE103C0                 stx             SPRITE_CTRL+SPRITE_EN
 00FFED21 0150FDFFFE103C2                 std             SPRITE_CTRL+SPRITE_EN+2
 00FFED26 039                             rts
 
                              ;==============================================================================
                              ; Femtiki Operating System.
                              ;==============================================================================
 
                              OSCallTbl:
 00FFED27 000000                          fcw             0
 00FFED29 000000                          fcw             0
 00FFED2B 000000                          fcw             0
 00FFED2D 000000                          fcw             0
 00FFED2F 000000                          fcw             0
 00FFED31 000000                          fcw             0
 00FFED33 000000                          fcw             0
 00FFED35 000000                          fcw             0
 00FFED37 000000                          fcw             0
 00FFED39 000000                          fcw             0
 00FFED3B 000000                          fcw             0
 00FFED3D 000000                          fcw             0
 00FFED3F 000000                          fcw             0
 00FFED41 000000                          fcw             0
 00FFED43 000000                          fcw             0
 00FFED45 000000                          fcw             0
 00FFED47 000000                          fcw             0
 00FFED49 000000                          fcw             0
 00FFED4B 000000                          fcw             0
 00FFED4D 000000                          fcw             0
 00FFED4F 000000                          fcw             0
 00FFED51 000000                          fcw             0
 00FFED53 FFED84                          fcw             ReleaseIOFocus
 00FFED55 000000                          fcw             0
 00FFED57 FFED6D                          fcw             RequestIOFocus
 
                              OSCall:
                                      ; wait for availability
                              osc1:
 00FFED59 07DEF0011                       tst             OSSEMA+1
 00FFED5C 027FFB                          beq             osc1
 00FFED5E 058                             aslb
 00FFED5F 08EFFED27                       ldx             #OSCallTbl
 00FFED62 03A                             abx
 00FFED63 06D804                          tst             ,x
 00FFED65 027002                          beq             oscx
 00FFED67 06E904                          jmp             [,x]
                              oscx:
 00FFED69 07FEF0011                       clr             OSSEMA+1
 00FFED6C 039                             rts
 
                              RequestIOFocus:
 00FFED6D 0150F6FFFFFFFE0                 ldb             COREID
 00FFED72 08EFF0000                       ldx             #IOFocusList
 00FFED75 03A                             abx
 00FFED76 0A7804                          sta             ,x
 00FFED78 07DFF0010                       tst             IOFocusID
 00FFED7B 126FFFFEB                       lbne    oscx
*** warning 1: Long branch within short branch range could be optimized
 00FFED7E 0F7FF0010                       stb             IOFocusID
 00FFED81 016FFFFE5                       lbra    oscx
*** warning 1: Long branch within short branch range could be optimized
 
                              ReleaseIOFocus:
 00FFED84 0150F6FFFFFFFE0                 ldb             COREID
 00FFED89 08EFF0000                       ldx             #IOFocusList
 00FFED8C 03A                             abx
 00FFED8D 06F804                          clr             ,x                                              ; clear the request indicator
 00FFED8F 017FFF463                       lbsr    CopyScreenToVirtualScreen
*** warning 1: Long branch within short branch range could be optimized
 00FFED92 0F1FF0010                       cmpb    IOFocusID                       ; are we the one with the focus?
 00FFED95 126FFFFD1                       lbne    oscx
*** warning 1: Long branch within short branch range could be optimized
                                      ; We had the focus, so now a new core needs the focus.
                                      ; Search the focus list for a requestor. If no requester
                                      ; is found, give focus to core #1.
 00FFED98 08600F                          lda             #15
                              riof2:
 00FFED9A 05C                             incb
 00FFED9B 0C400F                          andb    #15
 00FFED9D 03A                             abx
 00FFED9E 06D804                          tst             ,x
 00FFEDA0 026009                          bne             riof1
 00FFEDA2 04A                             deca
 00FFEDA3 026FF5                          bne             riof2
                                      ; If no focus is requested by anyone, give to core #1
 00FFEDA5 0C6001                          ldb             #1
 00FFEDA7 086018                          lda             #24
 00FFEDA9 0A7804                          sta             ,x
                              riof1:
 00FFEDAB 0F7FF0010                       stb             IOFocusID
 00FFEDAE 017FFF40D                       lbsr    CopyVirtualScreenToScreen
*** warning 1: Long branch within short branch range could be optimized
 00FFEDB1 016FFFFB5                       lbra    oscx
*** warning 1: Long branch within short branch range could be optimized
                                              
                                      
                              ;==============================================================================
                              ; Disassembler
                              ;==============================================================================
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; BSD 3-Clause License
                              ; Redistribution and use in source and binary forms, with or without
                              ; modification, are permitted provided that the following conditions are met:
                              ;
                              ; 1. Redistributions of source code must retain the above copyright notice, this
                              ;    list of conditions and the following disclaimer.
                              ;
                              ; 2. Redistributions in binary form must reproduce the above copyright notice,
                              ;    this list of conditions and the following disclaimer in the documentation
                              ;    and/or other materials provided with the distribution.
                              ;
                              ; 3. Neither the name of the copyright holder nor the names of its
                              ;    contributors may be used to endorse or promote products derived from
                              ;    this software without specific prior written permission.
                              ;
                              ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                              ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                              ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                              ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                              ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                              ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                              ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                              ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                              ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                              ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                              ;                                                                          
                              ; ============================================================================
                              ;
                              ; Disassembler
                              ;
                              ;
                              DIRECT  EQU     1
                              LSREL           EQU     2
                              IMMB            EQU     3
                              SREL            EQU     4
                              NDX                     EQU     5
                              EXT                     EQU     6
                              IMMW            EQU     7
                              FAREXT  EQU     8
                              TFREXG  EQU     9
 
                              distbl1:
                                      ; 00 to 0F
 00FFEDB4 04E045047020001                 fcb             "NEG ", DIRECT
 00FFEDB9 020020020020000                 fcb             "    ", 0
 00FFEDBE 020020020020000                 fcb             "    ", 0
 00FFEDC3 04304F04D020001                 fcb             "COM ", DIRECT
 00FFEDC8 04C053052020001                 fcb             "LSR ", DIRECT
 00FFEDCD 020020020020000                 fcb             "    ", 0
 00FFEDD2 05204F052020001                 fcb             "ROR ", DIRECT
 00FFEDD7 041053052020001                 fcb             "ASR ", DIRECT
 00FFEDDC 04105304C020001                 fcb             "ASL ", DIRECT
 00FFEDE1 05204F04C020001                 fcb             "ROL ", DIRECT
 00FFEDE6 044045043020001                 fcb             "DEC ", DIRECT
 00FFEDEB 020020020020000                 fcb             "    ", 0
 00FFEDF0 04904E043020001                 fcb             "INC ", DIRECT
 00FFEDF5 054053054020001                 fcb             "TST ", DIRECT
 00FFEDFA 04A04D050020001                 fcb             "JMP ", DIRECT
 00FFEDFF 04304C052020001                 fcb             "CLR ", DIRECT
                                      
                                      ; 10 to 1F
 00FFEE04 020020020020000                 fcb             "    ", 0
 00FFEE09 020020020020000                 fcb             "    ", 0
 00FFEE0E 04E04F050020000                 fcb             "NOP ", 0
 00FFEE13 05305904E043000                 fcb             "SYNC", 0
 00FFEE18 020020020020000                 fcb             "    ", 0
 00FFEE1D 046041052020000                 fcb             "FAR ", 0
 00FFEE22 04C042052041002                 fcb             "LBRA", LSREL
 00FFEE27 04C042053052002                 fcb             "LBSR", LSREL
 00FFEE2C 020020020020000                 fcb             "    ", 0
 00FFEE31 044041041020000                 fcb             "DAA ", 0
 00FFEE36 04F052043043003                 fcb             "ORCC", IMMB
 00FFEE3B 020020020020000                 fcb             "    ", 0
 00FFEE40 04104E044043003                 fcb             "ANDC", IMMB
 00FFEE45 053045058020000                 fcb             "SEX ", 0
 00FFEE4A 045058047020009                 fcb             "EXG ", TFREXG
 00FFEE4F 054046052020009                 fcb             "TFR ", TFREXG
                                      
                                      ; 20 to 2F
 00FFEE54 042052041020004                 fcb             "BRA ", SREL
 00FFEE59 04205204E020004                 fcb             "BRN ", SREL
 00FFEE5E 042048049020004                 fcb             "BHI ", SREL
 00FFEE63 04204C053020004                 fcb             "BLS ", SREL
 00FFEE68 042048053020004                 fcb             "BHS ", SREL
 00FFEE6D 04204C04F020004                 fcb             "BLO ", SREL
 00FFEE72 04204E045020004                 fcb             "BNE ", SREL
 00FFEE77 042045051020004                 fcb             "BEQ ", SREL
 00FFEE7C 042056043020004                 fcb             "BVC ", SREL
 00FFEE81 042056053020004                 fcb             "BVS ", SREL
 00FFEE86 04205004C020004                 fcb             "BPL ", SREL
 00FFEE8B 04204D049020004                 fcb             "BMI ", SREL
 00FFEE90 042047045020004                 fcb             "BGE ", SREL
 00FFEE95 04204C054020004                 fcb             "BLT ", SREL
 00FFEE9A 042047054020004                 fcb             "BGT ", SREL
 00FFEE9F 04204C045020004                 fcb             "BLE ", SREL
                                      
                                      ; 30 to 3F
 00FFEEA4 04C045041058005                 fcb             "LEAX", NDX
 00FFEEA9 04C045041059005                 fcb             "LEAY", NDX
 00FFEEAE 04C045041053005                 fcb             "LEAS", NDX
 00FFEEB3 04C045041055005                 fcb             "LEAU", NDX
 00FFEEB8 050053048053003                 fcb             "PSHS", IMMB
 00FFEEBD 05005504C053003                 fcb             "PULS", IMMB
 00FFEEC2 050053048055003                 fcb             "PSHU", IMMB
 00FFEEC7 05005504C055003                 fcb             "PULU", IMMB
 00FFEECC 052054046020000                 fcb             "RTF ", 0
 00FFEED1 052054053020000                 fcb             "RTS ", 0
 00FFEED6 041042058020000                 fcb             "ABX ", 0
 00FFEEDB 052054049020000                 fcb             "RTI ", 0
 00FFEEE0 043057041049003                 fcb             "CWAI", IMMB
 00FFEEE5 04D05504C020000                 fcb             "MUL ", 0
 00FFEEEA 020020020020000                 fcb             "    ", 0
 00FFEEEF 053057049020000                 fcb             "SWI ", 0
 
                                      ; 40 to 4F
 00FFEEF4 04E045047041000                 fcb             "NEGA", 0
 00FFEEF9 020020020020000                 fcb             "    ", 0
 00FFEEFE 020020020020000                 fcb       "    ", 0
 00FFEF03 04304F04D041000                 fcb             "COMA", 0
 00FFEF08 04C053052041000                 fcb             "LSRA", 0
 00FFEF0D 020020020020000                 fcb             "    ", 0
 00FFEF12 05204F052041000                 fcb             "RORA", 0
 00FFEF17 041053052041000                 fcb             "ASRA", 0
 00FFEF1C 04105304C041000                 fcb             "ASLA", 0
 00FFEF21 05204F04C041000                 fcb             "ROLA", 0
 00FFEF26 044045043041000                 fcb             "DECA", 0
 00FFEF2B 020020020020000                 fcb             "    ", 0
 00FFEF30 04904E043041000                 fcb             "INCA", 0
 00FFEF35 054053054041000                 fcb             "TSTA", 0
 00FFEF3A 020020020020000                 fcb             "    ", 0
 00FFEF3F 04304C052041000                 fcb             "CLRA", 0
                                      
                                      ; 50 to 5F
 00FFEF44 04E045047042000                 fcb             "NEGB", 0
 00FFEF49 020020020020000                 fcb             "    ", 0
 00FFEF4E 020020020020000                 fcb       "    ", 0
 00FFEF53 04304F04D042000                 fcb             "COMB", 0
 00FFEF58 04C053052042000                 fcb             "LSRB", 0
 00FFEF5D 020020020020000                 fcb             "    ", 0
 00FFEF62 05204F052042000                 fcb             "RORB", 0
 00FFEF67 041053052042000                 fcb             "ASRB", 0
 00FFEF6C 04105304C042000                 fcb             "ASLB", 0
 00FFEF71 05204F04C042000                 fcb             "ROLB", 0
 00FFEF76 044045043042000                 fcb             "DECB", 0
 00FFEF7B 020020020020000                 fcb             "    ", 0
 00FFEF80 04904E043042000                 fcb             "INCB", 0
 00FFEF85 054053054042000                 fcb             "TSTB", 0
 00FFEF8A 020020020020000                 fcb             "    ", 0
 00FFEF8F 04304C052042000                 fcb             "CLRB", 0
                                      
                                      ; 60 to 6F
 00FFEF94 04E045047020005                 fcb             "NEG ", NDX
 00FFEF99 020020020020000                 fcb             "    ", 0
 00FFEF9E 020020020020000                 fcb       "    ", 0
 00FFEFA3 04304F04D020005                 fcb             "COM ", NDX
 00FFEFA8 04C053052020005                 fcb             "LSR ", NDX
 00FFEFAD 020020020020000                 fcb             "    ", 0
 00FFEFB2 05204F052020005                 fcb             "ROR ", NDX
 00FFEFB7 041053052020005                 fcb             "ASR ", NDX
 00FFEFBC 04105304C020005                 fcb             "ASL ", NDX
 00FFEFC1 05204F04C020005                 fcb             "ROL ", NDX
 00FFEFC6 044045043020005                 fcb             "DEC ", NDX
 00FFEFCB 020020020020000                 fcb             "    ", 0
 00FFEFD0 04904E043020005                 fcb             "INC ", NDX
 00FFEFD5 054053054020005                 fcb             "TST ", NDX
 00FFEFDA 04A04D050020005                 fcb             "JMP ", NDX
 00FFEFDF 04304C052020005                 fcb             "CLR ", NDX
 
                                      ; 70 to 7F
 00FFEFE4 04E045047020006                 fcb             "NEG ", EXT
 00FFEFE9 020020020020000                 fcb             "    ", 0
 00FFEFEE 020020020020000                 fcb       "    ", 0
 00FFEFF3 04304F04D020006                 fcb             "COM ", EXT
 00FFEFF8 04C053052020006                 fcb             "LSR ", EXT
 00FFEFFD 020020020020000                 fcb             "    ", 0
 00FFF002 05204F052020006                 fcb             "ROR ", EXT
 00FFF007 041053052020006                 fcb             "ASR ", EXT
 00FFF00C 04105304C020006                 fcb             "ASL ", EXT
 00FFF011 05204F04C020006                 fcb             "ROL ", EXT
 00FFF016 044045043020006                 fcb             "DEC ", EXT
 00FFF01B 020020020020000                 fcb             "    ", 0
 00FFF020 04904E043020006                 fcb             "INC ", EXT
 00FFF025 054053054020006                 fcb             "TST ", EXT
 00FFF02A 04A04D050020006                 fcb             "JMP ", EXT
 00FFF02F 04304C052020006                 fcb             "CLR ", EXT
 
                                      ; 80 to 8F
 00FFF034 053055042041003                 fcb             "SUBA", IMMB
 00FFF039 04304D050041003                 fcb             "CMPA", IMMB
 00FFF03E 053042043041003                 fcb             "SBCA", IMMB
 00FFF043 053055042044007                 fcb             "SUBD", IMMW
 00FFF048 04104E044041003                 fcb             "ANDA", IMMB
 00FFF04D 042049054041003                 fcb             "BITA", IMMB
 00FFF052 04C044041020003                 fcb             "LDA ", IMMB
 00FFF057 020020020020000                 fcb             "    ", 0
 00FFF05C 04504F052041003                 fcb             "EORA", IMMB
 00FFF061 041044043041003                 fcb             "ADCA", IMMB
 00FFF066 04F052041020003                 fcb             "ORA ", IMMB
 00FFF06B 041044044041003                 fcb             "ADDA", IMMB
 00FFF070 04304D050058007                 fcb             "CMPX", IMMW
 00FFF075 042053052020004                 fcb             "BSR ", SREL
 00FFF07A 04C044058020007                 fcb             "LDX ", IMMW
 00FFF07F 04A04D046020008                 fcb             "JMF ", FAREXT
                                      
                                      ; 90 to 9F
 00FFF084 053055042041001                 fcb             "SUBA", DIRECT
 00FFF089 04304D050041001                 fcb             "CMPA", DIRECT
 00FFF08E 053042043041001                 fcb             "SBCA", DIRECT
 00FFF093 053055042044001                 fcb             "SUBD", DIRECT
 00FFF098 04104E044041001                 fcb             "ANDA", DIRECT
 00FFF09D 042049054041001                 fcb             "BITA", DIRECT
 00FFF0A2 04C044041020001                 fcb             "LDA ", DIRECT
 00FFF0A7 053054041020001                 fcb             "STA ", DIRECT
 00FFF0AC 04504F052041001                 fcb             "EORA", DIRECT
 00FFF0B1 041044043041001                 fcb             "ADCA", DIRECT
 00FFF0B6 04F052041020001                 fcb             "ORA ", DIRECT
 00FFF0BB 041044044041001                 fcb             "ADDA", DIRECT
 00FFF0C0 04304D050058001                 fcb             "CMPX", DIRECT
 00FFF0C5 04A053052020001                 fcb             "JSR ", DIRECT
 00FFF0CA 04C044058020001                 fcb             "LDX ", DIRECT
 00FFF0CF 053054058020001                 fcb             "STX ", DIRECT
 
                                      ; A0 to AF
 00FFF0D4 053055042041005                 fcb             "SUBA", NDX
 00FFF0D9 04304D050041005                 fcb             "CMPA", NDX
 00FFF0DE 053042043041005                 fcb             "SBCA", NDX
 00FFF0E3 053055042044005                 fcb             "SUBD", NDX
 00FFF0E8 04104E044041005                 fcb             "ANDA", NDX
 00FFF0ED 042049054041005                 fcb             "BITA", NDX
 00FFF0F2 04C044041020005                 fcb             "LDA ", NDX
 00FFF0F7 053054041020005                 fcb             "STA ", NDX
 00FFF0FC 04504F052041005                 fcb             "EORA", NDX
 00FFF101 041044043041005                 fcb             "ADCA", NDX
 00FFF106 04F052041020005                 fcb             "ORA ", NDX
 00FFF10B 041044044041005                 fcb             "ADDA", NDX
 00FFF110 04304D050058005                 fcb             "CMPX", NDX
 00FFF115 04A053052020005                 fcb             "JSR ", NDX
 00FFF11A 04C044058020005                 fcb             "LDX ", NDX
 00FFF11F 053054058020005                 fcb             "STX ", NDX
 
                                      ; B0 to BF
 00FFF124 053055042041006                 fcb             "SUBA", EXT
 00FFF129 04304D050041006                 fcb             "CMPA", EXT
 00FFF12E 053042043041006                 fcb             "SBCA", EXT
 00FFF133 053055042044006                 fcb             "SUBD", EXT
 00FFF138 04104E044041006                 fcb             "ANDA", EXT
 00FFF13D 042049054041006                 fcb             "BITA", EXT
 00FFF142 04C044041020006                 fcb             "LDA ", EXT
 00FFF147 053054041020006                 fcb             "STA ", EXT
 00FFF14C 04504F052041006                 fcb             "EORA", EXT
 00FFF151 041044043041006                 fcb             "ADCA", EXT
 00FFF156 04F052041020006                 fcb             "ORA ", EXT
 00FFF15B 041044044041006                 fcb             "ADDA", EXT
 00FFF160 04304D050058006                 fcb             "CMPX", EXT
 00FFF165 04A053052020006                 fcb             "JSR ", EXT
 00FFF16A 04C044058020006                 fcb             "LDX ", EXT
 00FFF16F 053054058020006                 fcb             "STX ", EXT
                                      
                                      ; C0 to CF
 00FFF174 053055042042003                 fcb             "SUBB", IMMB
 00FFF179 04304D050042003                 fcb             "CMPB", IMMB
 00FFF17E 053042043062003                 fcb             "SBCb", IMMB
 00FFF183 041044044044007                 fcb             "ADDD", IMMW
 00FFF188 04104E044042003                 fcb             "ANDB", IMMB
 00FFF18D 042049054042003                 fcb             "BITB", IMMB
 00FFF192 04C044042020003                 fcb             "LDB ", IMMB
 00FFF197 020020020020000                 fcb             "    ", 0
 00FFF19C 04504F052042003                 fcb             "EORB", IMMB
 00FFF1A1 041044043042003                 fcb             "ADCB", IMMB
 00FFF1A6 04F052042020003                 fcb             "ORB ", IMMB
 00FFF1AB 041044044042003                 fcb             "ADDB", IMMB
 00FFF1B0 04C044044020007                 fcb             "LDD ", IMMW
 00FFF1B5 020020020020004                 fcb             "    ", SREL
 00FFF1BA 04C044055020007                 fcb             "LDU ", IMMW
 00FFF1BF 04A053046020008                 fcb             "JSF ", FAREXT
 
                                      ; D0 to DF
 00FFF1C4 053055042042001                 fcb             "SUBB", DIRECT
 00FFF1C9 04304D050042001                 fcb             "CMPB", DIRECT
 00FFF1CE 053042043042001                 fcb             "SBCB", DIRECT
 00FFF1D3 041044044044001                 fcb             "ADDD", DIRECT
 00FFF1D8 04104E044042001                 fcb             "ANDB", DIRECT
 00FFF1DD 042049054042001                 fcb             "BITB", DIRECT
 00FFF1E2 04C044042020001                 fcb             "LDB ", DIRECT
 00FFF1E7 053054042020001                 fcb             "STB ", DIRECT
 00FFF1EC 04504F052042001                 fcb             "EORB", DIRECT
 00FFF1F1 041044043042001                 fcb             "ADCB", DIRECT
 00FFF1F6 04F052042020001                 fcb             "ORB ", DIRECT
 00FFF1FB 041044044042001                 fcb             "ADDB", DIRECT
 00FFF200 04C044044020001                 fcb             "LDD ", DIRECT
 00FFF205 053054044020001                 fcb             "STD ", DIRECT
 00FFF20A 04C044055020001                 fcb             "LDU ", DIRECT
 00FFF20F 053054055020001                 fcb             "STU ", DIRECT
 
                                      ; E0 to EF      
 00FFF214 053055042042005                 fcb             "SUBB", NDX
 00FFF219 04304D050042005                 fcb             "CMPB", NDX
 00FFF21E 053042043042005                 fcb             "SBCB", NDX
 00FFF223 041044044044005                 fcb             "ADDD", NDX
 00FFF228 04104E044042005                 fcb             "ANDB", NDX
 00FFF22D 042049054042005                 fcb             "BITB", NDX
 00FFF232 04C044042020005                 fcb             "LDB ", NDX
 00FFF237 053054042020005                 fcb             "STB ", NDX
 00FFF23C 04504F052042005                 fcb             "EORB", NDX
 00FFF241 041044043042005                 fcb             "ADCB", NDX
 00FFF246 04F052042020005                 fcb             "ORB ", NDX
 00FFF24B 041044044042005                 fcb             "ADDB", NDX
 00FFF250 04C044044020005                 fcb             "LDD ", NDX
 00FFF255 053054044020005                 fcb             "STD ", NDX
 00FFF25A 04C044055020005                 fcb             "LDU ", NDX
 00FFF25F 053054055020005                 fcb             "STU ", NDX
 
                                      ; F0 to FF
 00FFF264 053055042042006                 fcb             "SUBB", EXT
 00FFF269 04304D050042006                 fcb             "CMPB", EXT
 00FFF26E 053042043042006                 fcb             "SBCB", EXT
 00FFF273 041044044044006                 fcb             "ADDD", EXT
 00FFF278 04104E044042006                 fcb             "ANDB", EXT
 00FFF27D 042049054042006                 fcb             "BITB", EXT
 00FFF282 04C044042020006                 fcb             "LDB ", EXT
 00FFF287 053054042020006                 fcb             "STB ", EXT
 00FFF28C 04504F052042006                 fcb             "EORB", EXT
 00FFF291 041044043042006                 fcb             "ADCB", EXT
 00FFF296 04F052042020006                 fcb             "ORB ", EXT
 00FFF29B 041044044042006                 fcb             "ADDB", EXT
 00FFF2A0 04C044044020006                 fcb             "LDD ", EXT
 00FFF2A5 053054044020006                 fcb             "STD ", EXT
 00FFF2AA 04C044055020006                 fcb             "LDU ", EXT
 00FFF2AF 053054055020006                 fcb             "STU ", EXT
 
                                      ; 120 to 12F
                              distbl2:
 00FFF2B4 04C042052041                    fcb             "LBRA"
 00FFF2B8 04C04205204E                    fcb             "LBRN"
 00FFF2BC 04C042048049                    fcb             "LBHI"
 00FFF2C0 04C04204C053                    fcb             "LBLS"
 00FFF2C4 04C042048053                    fcb             "LBHS"
 00FFF2C8 04C04204C04F                    fcb             "LBLO"
 00FFF2CC 04C04204E045                    fcb             "LBNE"
 00FFF2D0 04C042045051                    fcb             "LBEQ"
 00FFF2D4 04C042056043                    fcb             "LBVC"
 00FFF2D8 04C042056053                    fcb             "LBVS"
 00FFF2DC 04C04205004C                    fcb             "LBPL"
 00FFF2E0 04C04204D049                    fcb             "LBMI"
 00FFF2E4 04C042047045                    fcb             "LBGE"
 00FFF2E8 04C04204C054                    fcb             "LBLT"
 00FFF2EC 04C042047054                    fcb             "LBGT"
 00FFF2F0 04C04204C045                    fcb             "LBLE"
                                      
                              distbl3:
 00FFF2F4 13F                             fcb             $13F
 00FFF2F5 183                             fcb             $183
 00FFF2F6 18C                             fcb             $18C
 00FFF2F7 18E                             fcb             $18E
 00FFF2F8 193                             fcb             $193
 00FFF2F9 19C                             fcb             $19C
 00FFF2FA 19E                             fcb             $19E
 00FFF2FB 19F                             fcb             $19F
 00FFF2FC 1A3                             fcb             $1A3
 00FFF2FD 1AC                             fcb             $1AC
 00FFF2FE 1AE                             fcb             $1AE
 00FFF2FF 1AF                             fcb             $1AF
 00FFF300 1B3                             fcb             $1B3
 00FFF301 1BC                             fcb             $1BC
 00FFF302 1BE                             fcb             $1BE
 00FFF303 1BF                             fcb             $1BF
 00FFF304 1CE                             fcb             $1CE
 00FFF305 1DE                             fcb             $1DE
 00FFF306 1DF                             fcb             $1DF
 00FFF307 1EE                             fcb             $1EE
 00FFF308 1EF                             fcb             $1EF
 00FFF309 1FE                             fcb             $1FE
 00FFF30A 1FF                             fcb             $1FF
 00FFF30B 23F                             fcb             $23F
 00FFF30C 283                             fcb             $283
 00FFF30D 28C                             fcb             $28C
 00FFF30E 293                             fcb             $293
 00FFF30F 29C                             fcb             $29C
 00FFF310 2A3                             fcb             $2A3
 00FFF311 2AC                             fcb             $2AC
 00FFF312 2B3                             fcb             $2B3
 00FFF313 2BC                             fcb             $2BC
 
                              distbl4:        
 00FFF314 053057049032000                 fcb             "SWI2", 0
 00FFF319 04304D050044007                 fcb             "CMPD", IMMW
 00FFF31E 04304D050059007                 fcb             "CMPY", IMMW
 00FFF323 04C044059020007                 fcb             "LDY ", IMMW
 00FFF328 04304D050044001                 fcb             "CMPD", DIRECT
 00FFF32D 04304D050059001                 fcb             "CMPY", DIRECT  
 00FFF332 04C044059020001                 fcb             "LDY ", DIRECT
 00FFF337 053054059020001                 fcb             "STY ", DIRECT
 00FFF33C 04304D050044005                 fcb             "CMPD", NDX
 00FFF341 04304D050059005                 fcb             "CMPY", NDX
 00FFF346 04C044059020005                 fcb             "LDY ", NDX
 00FFF34B 053054059020005                 fcb             "STY ", NDX
 00FFF350 04304D050044006                 fcb             "CMPD", EXT
 00FFF355 04304D050059006                 fcb             "CMPY", EXT
 00FFF35A 04C044059020006                 fcb             "LDY ", EXT
 00FFF35F 053054059020006                 fcb             "STY ", EXT
 00FFF364 04C044053020007                 fcb             "LDS ", IMMW
 00FFF369 04C044053020001                 fcb             "LDS ", DIRECT
 00FFF36E 053054053020001                 fcb             "STS ", DIRECT
 00FFF373 04C044053020005                 fcb             "LDS ", NDX
 00FFF378 053054053020005                 fcb             "STS ", NDX
 00FFF37D 04C044053020006                 fcb             "LDS ", EXT
 00FFF382 053054053020006                 fcb             "STS ", EXT
 00FFF387 053057049033000                 fcb             "SWI3", 0
 00FFF38C 04304D050055007                 fcb             "CMPU", IMMW
 00FFF391 04304D050053007                 fcb             "CMPS", IMMW
 00FFF396 04304D050055001                 fcb             "CMPU", DIRECT
 00FFF39B 04304D050053001                 fcb             "CMPS", DIRECT
 00FFF3A0 04304D050055005                 fcb             "CMPU", NDX
 00FFF3A5 04304D050053005                 fcb             "CMPS", NDX
 00FFF3AA 04304D050055006                 fcb             "CMPU", EXT
 00FFF3AF 04304D050053006                 fcb             "CMPS", EXT
 
                              disassem:
 00FFF3B4 00F15F                          clr             farflag
 00FFF3B6 0170006AD                       lbsr    GetRange
 00FFF3B9 017FFDD16                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF3BC 1BE000922                       ldy             mon_r1+2
                              disLoop1:
 00FFF3BF 01F020                          tfr             y,d
 00FFF3C1 017FFF03D                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF3C4 0C6020                          ldb             #' '
 00FFF3C6 017FFF949                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF3C9 0E6A00                          ldb             ,y+
 00FFF3CB 0C5300                          bitb    #$300
 00FFF3CD 12600041F                       lbne    dis1
 00FFF3D0 0C40FF                          andb    #$FF                    ; mask off extra bits
 00FFF3D2 0C1015                          cmpb    #$15
 00FFF3D4 026004                          bne             dis20
 00FFF3D6 0D715F                          stb             farflag
 00FFF3D8 020FE5                          bra             disLoop1
                              dis20:
 00FFF3DA 08EFFEDB4                       ldx             #distbl1
                              dis23:
 00FFF3DD 086005                          lda             #5
 00FFF3DF 03D                             mul
 00FFF3E0 03A                             abx
 00FFF3E1 0E6800                          ldb             ,x+
 00FFF3E3 017FFF92C                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF3E6 0E6800                          ldb             ,x+
 00FFF3E8 017FFF927                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF3EB 0E6800                          ldb             ,x+
 00FFF3ED 017FFF922                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF3F0 0E6800                          ldb             ,x+
 00FFF3F2 017FFF91D                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF3F5 0C6020                          ldb             #' '
 00FFF3F7 017FFF918                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF3FA 0E6800                          ldb             ,x+
 00FFF3FC 127000443                       lbeq    disNextLine
 00FFF3FF 0C1001                          cmpb    #DIRECT
 00FFF401 026008                          bne             disNotDirect
 00FFF403 0E6A00                          ldb             ,y+
 00FFF405 017FFF002                       lbsr    DispByteAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF408 016000437                       lbra    disNextLine
                              disNotDirect:
 00FFF40B 0C1002                          cmpb    #LSREL
 00FFF40D 02600C                          bne             disNotLRel
                              dis21:
 00FFF40F 0ECA01                          ldd             ,y++
                              dis2:
 00FFF411 030A0B                          leax    d,y
 00FFF413 01F010                          tfr             x,d
 00FFF415 017FFEFE9                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF418 016000427                       lbra    disNextLine
                              disNotLRel:
 00FFF41B 0C1004                          cmpb    #SREL
 00FFF41D 026005                          bne             disNotRel
 00FFF41F 0E6A00                          ldb             ,y+
 00FFF421 04F                             clra
 00FFF422 020FED                          bra             dis2
                              disNotRel:
 00FFF424 0C1005                          cmpb    #NDX
 00FFF426 026385                          bne             disNotNdx
 00FFF428 0E6A00                          ldb             ,y+
 00FFF42A 0C5800                          bitb    #$800
 00FFF42C 02601E                          bne             disNot9                 ; test for offset 9 mode
 00FFF42E 034004                          pshs    b
 00FFF430 0C41FF                          andb    #$1FF                           ; mask to offset bits
 00FFF432 04F                             clra                                                    ;
 00FFF433 0C5100                          bitb    #$100                           ; test for negative offset
 00FFF435 027003                          beq             dis3
 00FFF437 04A                             deca                                                    ; sign extend offset
 00FFF438 0CAE00                          orb             #$E00
                              dis3:
 00FFF43A 017FFEFC4                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF43D 0C602C                          ldb             #','
 00FFF43F 017FFF8D0                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF442 035004                          puls    b
 00FFF444 08D42E                          bsr             disNdxReg
 00FFF446 017FFF8C9                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF449 0160003F6                       lbra    disNextLine
                              disNot9:
 00FFF44C 034004                          pshs    b
 00FFF44E 0C5100                          bitb    #$100                   ; check if indirect
 00FFF450 027005                          beq             dis4
 00FFF452 0C605B                          ldb             #'['
 00FFF454 017FFF8BB                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis4:
 00FFF457 0E6E04                          ldb             ,s                              ; get back b
 00FFF459 0C400F                          andb    #15
 00FFF45B 026030                          bne             disNotRplus
 00FFF45D 0E6E04                          ldb             ,s
 00FFF45F 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF461 027005                          beq             dis5
 00FFF463 0C605D                          ldb             #']'
 00FFF465 017FFF8AA                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis5:
 00FFF468 0C602C                          ldb             #','
 00FFF46A 017FFF8A5                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF46D 0E6E04                          ldb             ,s
 00FFF46F 08D403                          bsr             disNdxReg
 00FFF471 017FFF89E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF474 0C602B                          ldb             #'+'
 00FFF476 017FFF899                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF479 035004                          puls    b
 00FFF47B 0C5100                          bitb    #$100
 00FFF47D 1270003C2                       lbeq    disNextLine
 00FFF480 0C5080                          bitb    #$80
 00FFF482 1260003BD                       lbne    disNextLine
 00FFF485 0C605D                          ldb             #']'
 00FFF487 017FFF888                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF48A 0160003B5                       lbra    disNextLine
                              disNotRplus:
 00FFF48D 0C1001                          cmpb    #1
 00FFF48F 026033                          bne             disNotRplusplus 
 00FFF491 0E6E04                          ldb             ,s
 00FFF493 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF495 027005                          beq             dis6
 00FFF497 0C605D                          ldb             #']'
 00FFF499 017FFF876                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis6:
 00FFF49C 0C602C                          ldb             #','
 00FFF49E 017FFF871                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4A1 0E6E04                          ldb             ,s
 00FFF4A3 08D3CF                          bsr             disNdxReg
 00FFF4A5 017FFF86A                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4A8 0C602B                          ldb             #'+'
 00FFF4AA 017FFF865                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4AD 017FFF862                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4B0 035004                          puls    b
 00FFF4B2 0C5100                          bitb    #$100
 00FFF4B4 12700038B                       lbeq    disNextLine
 00FFF4B7 0C5080                          bitb    #$80
 00FFF4B9 126000386                       lbne    disNextLine
 00FFF4BC 0C605D                          ldb             #']'
 00FFF4BE 017FFF851                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4C1 01600037E                       lbra    disNextLine
                              disNotRplusplus:
 00FFF4C4 0C1002                          cmpb    #2
 00FFF4C6 026030                          bne             disNotRminus
 00FFF4C8 0E6E04                          ldb             ,s
 00FFF4CA 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF4CC 027005                          beq             dis7
 00FFF4CE 0C605D                          ldb             #']'
 00FFF4D0 017FFF83F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis7:
 00FFF4D3 0C602C                          ldb             #','
 00FFF4D5 017FFF83A                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4D8 0E6E04                          ldb             ,s
 00FFF4DA 08D398                          bsr             disNdxReg
 00FFF4DC 017FFF833                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4DF 0C602D                          ldb             #'-'
 00FFF4E1 017FFF82E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4E4 035004                          puls    b
 00FFF4E6 0C5100                          bitb    #$100
 00FFF4E8 127000357                       lbeq    disNextLine
 00FFF4EB 0C5080                          bitb    #$80
 00FFF4ED 126000352                       lbne    disNextLine
 00FFF4F0 0C605D                          ldb             #']'
 00FFF4F2 017FFF81D                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF4F5 01600034A                       lbra    disNextLine
                              disNotRminus:
 00FFF4F8 0C1003                          cmpb    #3
 00FFF4FA 026033                          bne             disNotRminusminus
 00FFF4FC 0E6E04                          ldb             ,s
 00FFF4FE 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF500 027005                          beq             dis8
 00FFF502 0C605D                          ldb             #']'
 00FFF504 017FFF80B                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis8:
 00FFF507 0C602C                          ldb             #','
 00FFF509 017FFF806                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF50C 0E6E04                          ldb             ,s
 00FFF50E 08D364                          bsr             disNdxReg
 00FFF510 017FFF7FF                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF513 0C602D                          ldb             #'-'
 00FFF515 017FFF7FA                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF518 017FFF7F7                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF51B 035004                          puls    b
 00FFF51D 0C5100                          bitb    #$100
 00FFF51F 127000320                       lbeq    disNextLine
 00FFF522 0C5080                          bitb    #$80
 00FFF524 12600031B                       lbne    disNextLine
 00FFF527 0C605D                          ldb             #']'
 00FFF529 017FFF7E6                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF52C 016000313                       lbra    disNextLine
                              disNotRminusminus:
 00FFF52F 0C1004                          cmpb    #4
 00FFF531 02602B                          bne             disNotR
 00FFF533 0E6E04                          ldb             ,s
 00FFF535 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF537 027005                          beq             dis9
 00FFF539 0C605D                          ldb             #']'
 00FFF53B 017FFF7D4                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis9:
 00FFF53E 0C602C                          ldb             #','
 00FFF540 017FFF7CF                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF543 0E6E04                          ldb             ,s
 00FFF545 08D32D                          bsr             disNdxReg
 00FFF547 017FFF7C8                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF54A 035004                          puls    b
 00FFF54C 0C5100                          bitb    #$100
 00FFF54E 1270002F1                       lbeq    disNextLine
 00FFF551 0C5080                          bitb    #$80
 00FFF553 1260002EC                       lbne    disNextLine
 00FFF556 0C605D                          ldb             #']'
 00FFF558 017FFF7B7                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF55B 0160002E4                       lbra    disNextLine
                              disNotR:
 00FFF55E 0C1005                          cmpb    #5
 00FFF560 026038                          bne             disNotBOffs
 00FFF562 0C6042                          ldb             #'B'
 00FFF564 017FFF7AB                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF567 0E6E04                          ldb             ,s
 00FFF569 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF56B 027005                          beq             dis10
 00FFF56D 0C605D                          ldb             #']'
 00FFF56F 017FFF7A0                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis10:
 00FFF572 0C602C                          ldb             #','
 00FFF574 017FFF79B                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF577 0E6E04                          ldb             ,s
 00FFF579 08D2F9                          bsr             disNdxReg
 00FFF57B 017FFF794                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF57E 0C602D                          ldb             #'-'
 00FFF580 017FFF78F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF583 017FFF78C                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF586 035004                          puls    b
 00FFF588 0C5100                          bitb    #$100
 00FFF58A 1270002B5                       lbeq    disNextLine
 00FFF58D 0C5080                          bitb    #$80
 00FFF58F 1260002B0                       lbne    disNextLine
 00FFF592 0C605D                          ldb             #']'
 00FFF594 017FFF77B                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF597 0160002A8                       lbra    disNextLine
                              disNotBOffs:
 00FFF59A 0C1006                          cmpb    #6
 00FFF59C 026038                          bne             disNotAOffs
 00FFF59E 0C6041                          ldb             #'A'
 00FFF5A0 017FFF76F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5A3 0E6E04                          ldb             ,s
 00FFF5A5 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF5A7 027005                          beq             dis11
 00FFF5A9 0C605D                          ldb             #']'
 00FFF5AB 017FFF764                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis11:
 00FFF5AE 0C602C                          ldb             #','
 00FFF5B0 017FFF75F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5B3 0E6E04                          ldb             ,s
 00FFF5B5 08D2BD                          bsr             disNdxReg
 00FFF5B7 017FFF758                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5BA 0C602D                          ldb             #'-'
 00FFF5BC 017FFF753                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5BF 017FFF750                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5C2 035004                          puls    b
 00FFF5C4 0C5100                          bitb    #$100
 00FFF5C6 127000279                       lbeq    disNextLine
 00FFF5C9 0C5080                          bitb    #$80
 00FFF5CB 126000274                       lbne    disNextLine
 00FFF5CE 0C605D                          ldb             #']'
 00FFF5D0 017FFF73F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5D3 01600026C                       lbra    disNextLine
                              disNotAOffs:
 00FFF5D6 0C1008                          cmpb    #8
 00FFF5D8 026039                          bne             disNotBO
 00FFF5DA 0E6A00                          ldb             ,y+
 00FFF5DC 01D                             sex
 00FFF5DD 017FFEE21                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF5E0 0E6E04                          ldb             ,s
 00FFF5E2 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF5E4 027005                          beq             dis12
 00FFF5E6 0C605D                          ldb             #']'
 00FFF5E8 017FFF727                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis12:
 00FFF5EB 0C602C                          ldb             #','
 00FFF5ED 017FFF722                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5F0 0E6E04                          ldb             ,s
 00FFF5F2 08D280                          bsr             disNdxReg
 00FFF5F4 017FFF71B                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5F7 0C602D                          ldb             #'-'
 00FFF5F9 017FFF716                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5FC 017FFF713                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF5FF 035004                          puls    b
 00FFF601 0C5100                          bitb    #$100
 00FFF603 12700023C                       lbeq    disNextLine
 00FFF606 0C5080                          bitb    #$80
 00FFF608 126000237                       lbne    disNextLine
 00FFF60B 0C605D                          ldb             #']'
 00FFF60D 017FFF702                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF610 01600022F                       lbra    disNextLine
                              disNotBO:
 00FFF613 0C1009                          cmpb    #9
 00FFF615 026038                          bne             disNotWO
 00FFF617 0ECA01                          ldd             ,y++
 00FFF619 017FFEDE5                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF61C 0E6E04                          ldb             ,s
 00FFF61E 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF620 027005                          beq             dis13
 00FFF622 0C605D                          ldb             #']'
 00FFF624 017FFF6EB                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis13:
 00FFF627 0C602C                          ldb             #','
 00FFF629 017FFF6E6                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF62C 0E6E04                          ldb             ,s
 00FFF62E 08D244                          bsr             disNdxReg
 00FFF630 017FFF6DF                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF633 0C602D                          ldb             #'-'
 00FFF635 017FFF6DA                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF638 017FFF6D7                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF63B 035004                          puls    b
 00FFF63D 0C5100                          bitb    #$100
 00FFF63F 127000200                       lbeq    disNextLine
 00FFF642 0C5080                          bitb    #$80
 00FFF644 1260001FB                       lbne    disNextLine
 00FFF647 0C605D                          ldb             #']'
 00FFF649 017FFF6C6                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF64C 0160001F3                       lbra    disNextLine
                              disNotWO:
 00FFF64F 0C100A                          cmpb    #10
 00FFF651 02603D                          bne             disNotTO
 00FFF653 0E6A01                          ldb             ,y++
 00FFF655 017FFEDB2                       lbsr    DispByteAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF658 0ECA01                          ldd             ,y++
 00FFF65A 017FFEDA4                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF65D 0E6E04                          ldb             ,s
 00FFF65F 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF661 027005                          beq             dis14
 00FFF663 0C605D                          ldb             #']'
 00FFF665 017FFF6AA                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis14:
 00FFF668 0C602C                          ldb             #','
 00FFF66A 017FFF6A5                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF66D 0E6E04                          ldb             ,s
 00FFF66F 08D203                          bsr             disNdxReg
 00FFF671 017FFF69E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF674 0C602D                          ldb             #'-'
 00FFF676 017FFF699                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF679 017FFF696                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF67C 035004                          puls    b
 00FFF67E 0C5100                          bitb    #$100
 00FFF680 1270001BF                       lbeq    disNextLine
 00FFF683 0C5080                          bitb    #$80
 00FFF685 1260001BA                       lbne    disNextLine
 00FFF688 0C605D                          ldb             #']'
 00FFF68A 017FFF685                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF68D 0160001B2                       lbra    disNextLine
                              disNotTO:
 00FFF690 0C100B                          cmpb    #11
 00FFF692 026038                          bne             disNotDOffs
 00FFF694 0C6044                          ldb             #'D'
 00FFF696 017FFF679                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF699 0E6E04                          ldb             ,s
 00FFF69B 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF69D 027005                          beq             dis15
 00FFF69F 0C605D                          ldb             #']'
 00FFF6A1 017FFF66E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis15:
 00FFF6A4 0C602C                          ldb             #','
 00FFF6A6 017FFF669                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6A9 0E6E04                          ldb             ,s
 00FFF6AB 08D1C7                          bsr             disNdxReg
 00FFF6AD 017FFF662                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6B0 0C602D                          ldb             #'-'
 00FFF6B2 017FFF65D                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6B5 017FFF65A                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6B8 035004                          puls    b
 00FFF6BA 0C5100                          bitb    #$100
 00FFF6BC 127000183                       lbeq    disNextLine
 00FFF6BF 0C5080                          bitb    #$80
 00FFF6C1 12600017E                       lbne    disNextLine
 00FFF6C4 0C605D                          ldb             #']'
 00FFF6C6 017FFF649                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6C9 016000176                       lbra    disNextLine
                              disNotDOffs:
 00FFF6CC 0C100C                          cmpb    #12
 00FFF6CE 026040                          bne             disNotPBO
 00FFF6D0 0E6A00                          ldb             ,y+
 00FFF6D2 01D                             sex
 00FFF6D3 017FFED2B                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF6D6 0E6E04                          ldb             ,s
 00FFF6D8 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF6DA 027005                          beq             dis16
 00FFF6DC 0C605D                          ldb             #']'
 00FFF6DE 017FFF631                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis16:
 00FFF6E1 0C602C                          ldb             #','
 00FFF6E3 017FFF62C                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6E6 0E6E04                          ldb             ,s
 00FFF6E8 08D18A                          bsr             disNdxReg
 00FFF6EA 0C6050                          ldb             #'P'
 00FFF6EC 017FFF623                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6EF 0C6043                          ldb             #'C'
 00FFF6F1 017FFF61E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6F4 0C602D                          ldb             #'-'
 00FFF6F6 017FFF619                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6F9 017FFF616                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF6FC 035004                          puls    b
 00FFF6FE 0C5100                          bitb    #$100
 00FFF700 12700013F                       lbeq    disNextLine
 00FFF703 0C5080                          bitb    #$80
 00FFF705 12600013A                       lbne    disNextLine
 00FFF708 0C605D                          ldb             #']'
 00FFF70A 017FFF605                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF70D 016000132                       lbra    disNextLine
                              disNotPBO:
 00FFF710 0C100D                          cmpb    #13
 00FFF712 02603F                          bne             disNotPWO       
 00FFF714 0ECA01                          ldd             ,y++
 00FFF716 017FFECE8                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF719 0E6E04                          ldb             ,s
 00FFF71B 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF71D 027005                          beq             dis17
 00FFF71F 0C605D                          ldb             #']'
 00FFF721 017FFF5EE                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis17:
 00FFF724 0C602C                          ldb             #','
 00FFF726 017FFF5E9                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF729 0E6E04                          ldb             ,s
 00FFF72B 08D147                          bsr             disNdxReg
 00FFF72D 0C6050                          ldb             #'P'
 00FFF72F 017FFF5E0                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF732 0C6043                          ldb             #'C'
 00FFF734 017FFF5DB                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF737 0C602D                          ldb             #'-'
 00FFF739 017FFF5D6                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF73C 017FFF5D3                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF73F 035004                          puls    b
 00FFF741 0C5100                          bitb    #$100
 00FFF743 1270000FC                       lbeq    disNextLine
 00FFF746 0C5080                          bitb    #$80
 00FFF748 1260000F7                       lbne    disNextLine
 00FFF74B 0C605D                          ldb             #']'
 00FFF74D 017FFF5C2                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF750 0160000EF                       lbra    disNextLine
                              disNotPWO:
 00FFF753 0C100E                          cmpb    #14
 00FFF755 026044                          bne             disNotPTO
 00FFF757 0E6A00                          ldb             ,y+
 00FFF759 017FFECAE                       lbsr    DispByteAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF75C 0ECA01                          ldd             ,y++
 00FFF75E 017FFECA0                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF761 0E6E04                          ldb             ,s
 00FFF763 0C5080                          bitb    #$80                    ; outer indexed?
 00FFF765 027005                          beq             dis18
 00FFF767 0C605D                          ldb             #']'
 00FFF769 017FFF5A6                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dis18:
 00FFF76C 0C602C                          ldb             #','
 00FFF76E 017FFF5A1                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF771 0E6E04                          ldb             ,s
 00FFF773 08D0FF                          bsr             disNdxReg
 00FFF775 0C6050                          ldb             #'P'
 00FFF777 017FFF598                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF77A 0C6043                          ldb             #'C'
 00FFF77C 017FFF593                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF77F 0C602D                          ldb             #'-'
 00FFF781 017FFF58E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF784 017FFF58B                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF787 035004                          puls    b
 00FFF789 0C5100                          bitb    #$100
 00FFF78B 1270000B4                       lbeq    disNextLine
 00FFF78E 0C5080                          bitb    #$80
 00FFF790 1260000AF                       lbne    disNextLine
 00FFF793 0C605D                          ldb             #']'
 00FFF795 017FFF57A                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF798 0160000A7                       lbra    disNextLine
                              disNotPTO:
 00FFF79B 0C605B                          ldb             #'['
 00FFF79D 017FFF572                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF7A0 0ECA01                          ldd             ,y++
 00FFF7A2 017FFEC5C                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF7A5 0C605D                          ldb             #']'
 00FFF7A7 017FFF568                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF7AA 016000095                       lbra    disNextLine
                              disNotNdx:
 00FFF7AD 0C1006                          cmpb    #EXT
 00FFF7AF 026013                          bne             disNotExt
 00FFF7B1 00D15F                          tst             farflag
 00FFF7B3 027005                          beq             dis30
 00FFF7B5 0E6A01                          ldb             ,y++
 00FFF7B7 017FFEC50                       lbsr    DispByteAsHex
*** warning 1: Long branch within short branch range could be optimized
                              dis30:
 00FFF7BA 0ECA01                          ldd             ,y++
 00FFF7BC 017FFEC42                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF7BF 00F15F                          clr             farflag
 00FFF7C1 01600007E                       lbra    disNextLine
                              disNotExt:
 00FFF7C4 0C1003                          cmpb    #IMMB
 00FFF7C6 02600D                          bne             disNotIMMB
 00FFF7C8 0C6023                          ldb             #'#'
 00FFF7CA 017FFF545                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF7CD 0E6A00                          ldb             ,y+
 00FFF7CF 017FFEC38                       lbsr    DispByteAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF7D2 01600006D                       lbra    disNextLine
                              disNotIMMB:
 00FFF7D5 0C1007                          cmpb    #IMMW
 00FFF7D7 02600C                          bne             disNotIMMW
 00FFF7D9 0C6023                          ldb             #'#'
 00FFF7DB 017FFF534                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF7DE 0ECA01                          ldd             ,y++
 00FFF7E0 017FFEC1E                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFF7E3 02005D                          bra             disNextLine
                              disNotIMMW:
 00FFF7E5 0C1009                          cmpb    #TFREXG
 00FFF7E7 026006                          bne             disNotTfr
 00FFF7E9 0E6A00                          ldb             ,y+
 00FFF7EB 08D0B8                          bsr             disTfrExg
 00FFF7ED 020053                          bra             disNextLine
                              disNotTfr:
                              dis1:
 00FFF7EF 0C1121                          cmpb    #$121
 00FFF7F1 025028                          blo             dis19
 00FFF7F3 0C112F                          cmpb    #$12F
 00FFF7F5 022024                          bhi             dis19
 00FFF7F7 0C40FF                          andb    #$FF
 00FFF7F9 08EFFF2B4                       ldx             #distbl2
 00FFF7FC 058                             aslb
 00FFF7FD 058                             aslb
 00FFF7FE 03A                             abx
 00FFF7FF 0E6800                          ldb             ,x+
 00FFF801 017FFF50E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF804 0E6800                          ldb             ,x+
 00FFF806 017FFF509                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF809 0E6800                          ldb             ,x+
 00FFF80B 017FFF504                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF80E 0E6800                          ldb             ,x+
 00FFF810 017FFF4FF                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF813 0C6020                          ldb             #' '
 00FFF815 017FFF4FA                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF818 016FFFBF4                       lbra    dis21
*** warning 1: Long branch within short branch range could be optimized
                              dis19:
 00FFF81B 08E000000                       ldx             #0
                              dis24:
 00FFF81E 0E180A000FFF2F4                 cmpb    distbl3,x
 00FFF823 026006                          bne             dis25
 00FFF825 08EFFF314                       ldx             #distbl4
 00FFF828 016FFFBB2                       lbra    dis23
*** warning 1: Long branch within short branch range could be optimized
                              dis25:
 00FFF82B 030001                          inx
 00FFF82D 08C00001F                       cmpx    #31
 00FFF830 025FEC                          blo             dis24
 00FFF832 0C603F                          ldb             #'?'
 00FFF834 017FFF4DB                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF837 017FFF4D8                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF83A 017FFF4D5                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF83D 017FFF4D2                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF840 020000                          bra             disNextLine
                              disNextLine:
 00FFF842 00F15F                          clr             farflag
 00FFF844 017FFD88B                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF847 1BC000926                       cmpy    mon_r2+2
 00FFF84A 125FFFB72                       lblo    disLoop1
*** warning 1: Long branch within short branch range could be optimized
 00FFF84D 0160000DE                       lbra    Monitor
 
                              disNdxRegs:
 00FFF850 058059053055                    fcb             'X','Y','S','U'
                              disTfrRegs:
 00FFF854 044020058020059020055           fcb             "D X Y U S PC    A B CCDP        "
 00FFF85B 020053020050043020020
 00FFF862 020020041020042020043
 00FFF869 043044050020020020020
 00FFF870 020020020020
 
                              disNdxReg:
 00FFF874 0C4600                          andb    #$600
 00FFF876 059                             rolb
 00FFF877 059                             rolb
 00FFF878 059                             rolb
 00FFF879 059                             rolb
 00FFF87A 04F                             clra
 00FFF87B 034040                          pshs    u
 00FFF87D 01F003                          tfr             d,u
 00FFF87F 0A6C0A000FFF850                 lda             disNdxRegs,u
 00FFF884 035040                          puls    u
 00FFF886 01E089                          exg             a,b
 00FFF888 039                             rts
 
                              disTfrReg:
 00FFF889 034014                          pshs    b,x
 00FFF88B 08EFFF854                       ldx             #disTfrRegs
 00FFF88E 058                             aslb
 00FFF88F 0A6815                          lda             b,x
 00FFF891 01E089                          exg             a,b
 00FFF893 017FFF47C                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF896 01E089                          exg             a,b
 00FFF898 030001                          inx
 00FFF89A 0E688D                          ldb             b,x
 00FFF89C 0C1020                          cmpb    #' '
 00FFF89E 027003                          beq             disTfr1
 00FFF8A0 017FFF46F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              disTfr1:
 00FFF8A3 035094                          puls    b,x,pc
                                      
                              disTfrExg:
 00FFF8A5 034004                          pshs    b
 00FFF8A7 059                             rolb
 00FFF8A8 059                             rolb
 00FFF8A9 059                             rolb
 00FFF8AA 059                             rolb
 00FFF8AB 0C400F                          andb    #15
 00FFF8AD 08DFDA                          bsr             disTfrReg
 00FFF8AF 0C602C                          ldb             #','
 00FFF8B1 017FFF45E                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF8B4 0E6E04                          ldb             ,s
 00FFF8B6 0C400F                          andb    #15
 00FFF8B8 08DFCF                          bsr             disTfrReg
 00FFF8BA 035084                          puls    b,pc
 
                              ASMO:
 00FFF8BC 034006                          pshs    d
 00FFF8BE 0CCFFF8D0                       ldd             #ASMOUTCH
 00FFF8C1 0FD000800                       std             CharOutVec
 00FFF8C4 035086                          puls    d,pc
 
                              ASMOO:
 00FFF8C6 034006                          pshs    d
 00FFF8C8 0CCFFE2F5                       ldd             #DisplayChar
 00FFF8CB 0FD000800                       std             CharOutVec
 00FFF8CE 035086                          puls    d,pc
 
                              ASMOUTCH:
 00FFF8D0 0E7C00                          stb             ,u+
 00FFF8D2 039                             rts
 
                              DumpAsmbuf:
 00FFF8D3 0CE000160                       ldu             #asmbuf
                              dab2:
 00FFF8D6 0E6C00                          ldb             ,u+
 00FFF8D8 027005                          beq             dab1
 00FFF8DA 017FFF435                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF8DD 020FF7                          bra             dab2
                              dab1:
 00FFF8DF 039                             rts
                                      
                              ;==============================================================================
                              ; System Monitor
                              ;==============================================================================
 
                              CmdPrompt:
 00FFF8E0 017FFD7EF                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF8E3 0C6024                          ldb             #'$'
 00FFF8E5 017FFF42A                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF8E8 016FFF427                       lbra    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 
                              msgF09Starting:
 00FFF8EB 04606506D07406906B069           fcb             "Femtiki F09 Multi-core OS Starting",CR,LF,0
 00FFF8F2 02004603003902004D075
 00FFF8F9 06C07406902D06306F072
 00FFF900 06502004F053020053074
 00FFF907 06107207406906E06700D
 00FFF90E 00A000
 
                              MonitorStart:
 00FFF910 0CCFFF8EB                       ldd             #msgF09Starting
 00FFF913 017FFEAA0                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFF916 0CCFFFB0E                       ldd             #HelpMsg
 00FFF919 017FFEA9A                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFF91C 0CCFFF8E0                       ldd             #CmdPrompt
 00FFF91F 0FD000808                       std             CmdPromptJI
 00FFF922 0CCFFFAF5                       ldd             #DisplayErr
 00FFF925 0FD00080C                       std             MonErrVec
 00FFF928 0CC0063FF                       ldd             #$63FF                  ; default app stack
 00FFF92B 0FD000908                       std             mon_SSAVE
                              Monitor:
 00FFF92E 03280F006FFF                    leas    $6FFF                           ; reset stack pointer
 00FFF932 05F                             clrb                                                    ; turn off keyboard echo
 00FFF933 017FFF3E0                       lbsr    SetKeyboardEcho
*** warning 1: Long branch within short branch range could be optimized
                                      ; Reset IO vectors
 00FFF936 0CCFFEBE4                       ldd             #SerialPeekCharDirect
 00FFF939 0FD000804                       std             CharInVec
 00FFF93C 0CCFFE2F5                       ldd             #DisplayChar
 00FFF93F 0FD000800                       std             CharOutVec
 00FFF942 0CCFFF8E0                       ldd             #CmdPrompt
 00FFF945 0FD000808                       std             CmdPromptJI
                              ;       jsr             RequestIOFocus
                              PromptLn:
 00FFF948 0AD90F000808                    jsr             [CmdPromptJI]
 
                              ; Get characters until a CR is keyed
                                      
                              Prompt3:
 00FFF94C 0CCFFFFFF                       ldd             #-1                                     ; block until key present
 00FFF94F 017FFF388                       lbsr    INCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF952 0C100D                          cmpb    #CR
 00FFF954 027005                          beq             Prompt1
 00FFF956 017FFF3B9                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFF959 020FF1                          bra             Prompt3
 
                              ; Process the screen line that the CR was keyed on
                              ;
                              Prompt1:
 00FFF95B 0CC005050                       ldd             #$5050
 00FFF95E 0150FDFFFE60001                 std             LEDS
                              ;       ldb             RunningID
                              ;       cmpb    #61
                              ;       bhi             Prompt3
 00FFF963 0CC005151                       ldd             #$5151
 00FFF966 0150FDFFFE60001                 std             LEDS
 00FFF96B 00F111                          clr             CursorCol                       ; go back to the start of the line
 00FFF96D 017FFE962                       lbsr    CalcScreenLoc   ; calc screen memory location
*** warning 1: Long branch within short branch range could be optimized
 00FFF970 01F002                          tfr             d,y
 00FFF972 0CC005252                       ldd             #$5252
 00FFF975 0150FDFFFE60001                 std             LEDS
                              skipDollar:
 00FFF97A 08D0B9                          bsr             MonGetNonSpace
 00FFF97C 0C1024                          cmpb    #'$'
 00FFF97E 027FFA                          beq             skipDollar              ; skip over '$' prompt character
 00FFF980 086353                          lda             #$5353
 00FFF982 0150FDFFFE60001                 std             LEDS
 
                              ; Dispatch based on command character
                              ;
                              Prompt2:
 00FFF987 0C103C                          cmpb    #'<'
 00FFF989 02602C                          bne             PromptHelp
 00FFF98B 08D0A3                          bsr             MonGetch
 00FFF98D 0C103E                          cmpb    #'>'
 00FFF98F 026F9D                          bne             Monitor
 00FFF991 08D09D                          bsr             MonGetch
 00FFF993 0C1073                          cmpb    #'s'
 00FFF995 02600E                          bne             Prompt2a
 00FFF997 0CCFFEBE4                       ldd             #SerialPeekCharDirect
 00FFF99A 0FD000804                       std             CharInVec
 00FFF99D 0CCFFEC08                       ldd             #SerialPutChar
 00FFF9A0 0FD000800                       std             CharOutVec
 00FFF9A3 020F89                          bra             Monitor
                              Prompt2a:
 00FFF9A5 0C1063                          cmpb    #'c'
 00FFF9A7 026F85                          bne             Monitor
 00FFF9A9 0CCFFEA12                       ldd             #GetKey
 00FFF9AC 0FD000804                       std             CharInVec
 00FFF9AF 0CCFFE2F5                       ldd             #DisplayChar
 00FFF9B2 0FD000800                       std             CharOutVec
 00FFF9B5 020F77                          bra             Monitor
                              PromptHelp:
 00FFF9B7 0C103F                          cmpb    #'?'                    ; $? - display help
 00FFF9B9 026008                          bne             PromptC
 00FFF9BB 0CCFFFB0E                       ldd             #HelpMsg
 00FFF9BE 017FFE9F5                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFF9C1 020F6B                          bra             Monitor
                              PromptC:
 00FFF9C3 0C1043                          cmpb    #'C'
 00FFF9C5 026008                          bne             PromptD
 00FFF9C7 017FFE85B                       lbsr    ClearScreen
*** warning 1: Long branch within short branch range could be optimized
 00FFF9CA 017FFE8CB                       lbsr    HomeCursor
*** warning 1: Long branch within short branch range could be optimized
 00FFF9CD 020F5F                          bra             Monitor
                              PromptD:
 00FFF9CF 0C1044                          cmpb    #'D'
 00FFF9D1 026008                          bne             PromptColon
 00FFF9D3 08D05B                          bsr             MonGetch
 00FFF9D5 0C1052                          cmpb    #'R'
 00FFF9D7 02626F                          bne             DumpMemory
 00FFF9D9 020309                          bra             DumpRegs
                              PromptColon:
 00FFF9DB 0C103A                          cmpb    #':'
 00FFF9DD 026003                          bne             PromptF
 00FFF9DF 0160002C2                       lbra    EditMemory
                              PromptF:
 00FFF9E2 0C1046                          cmpb    #'F'
 00FFF9E4 026016                          bne             PromptJ
 00FFF9E6 08D048                          bsr             MonGetch
 00FFF9E8 0C1049                          cmpb    #'I'
 00FFF9EA 026009                          bne             PromptFL
 00FFF9EC 08D042                          bsr             MonGetch
 00FFF9EE 0C1047                          cmpb    #'G'
 00FFF9F0 026F3C                          bne             Monitor
 00FFF9F2 07EFE0000                       jmp             $FE0000
                              PromptFL:
 00FFF9F5 0C104C                          cmpb    #'L'
 00FFF9F7 026F35                          bne             Monitor
 00FFF9F9 0160003A9                       lbra    DumpIOFocusList
                              PromptJ:
 00FFF9FC 0C104A                          cmpb    #'J'
 00FFF9FE 12700032E                       lbeq    jump_to_code
                              PromptR:
 00FFFA01 0C1052                          cmpb    #'R'
 00FFFA03 026006                          bne             Prompt_s
 00FFFA05 0CEFFF92E                       ldu             #Monitor
 00FFFA08 016FFD9F5                       lbra    ramtest
*** warning 1: Long branch within short branch range could be optimized
                              Prompt_s:
 00FFFA0B 0C1073                          cmpb    #'s'
 00FFFA0D 026005                          bne             PromptT
 00FFFA0F 017FFF293                       lbsr    SerialOutputTest
*** warning 1: Long branch within short branch range could be optimized
 00FFFA12 020F1A                          bra             Monitor
                              PromptT:
 00FFFA14 0C1054                          cmpb    #'T'
 00FFFA16 026011                          bne             PromptU
 00FFFA18 08D016                          bsr             MonGetch
 00FFFA1A 0C1049                          cmpb    #'I'
 00FFFA1C 026F10                          bne             Monitor
 00FFFA1E 08D010                          bsr             MonGetch
 00FFFA20 0C1052                          cmpb    #'R'
 00FFFA22 026F0A                          bne             Monitor
 00FFFA24 017FFEAA0                       lbsr    rtc_read
*** warning 1: Long branch within short branch range could be optimized
 00FFFA27 020F05                          bra             Monitor
                              PromptU:
 00FFFA29 0C1055                          cmpb    #'U'
 00FFFA2B 026F01                          bne             Monitor
 00FFFA2D 016FFF984                       lbra    disassem
*** warning 1: Long branch within short branch range could be optimized
 
                              MonGetch:
 00FFFA30 0E6A04                          ldb             ,y
 00FFFA32 031201                          iny
 00FFFA34 039                             rts
 
                              MonGetNonSpace:
 00FFFA35 08DFF9                          bsr             MonGetCh
 00FFFA37 0C1020                          cmpb    #' '
 00FFFA39 027FFA                          beq             MonGetNonSpace
 00FFFA3B 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Ignore blanks in the input
                              ; Y = text pointer
                              ; D destroyed
                              ;------------------------------------------------------------------------------
                              ;
                              ignBlanks:
                              ignBlanks1:
 00FFFA3C 08DFF2                          bsr             MonGetch
 00FFFA3E 0C1020                          cmpb    #' '
 00FFFA40 027FFA                          beq             ignBlanks1
 00FFFA42 0313FF                          dey
 00FFFA44 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              GetTwoParams:
 00FFFA45 08DFF5                          bsr             ignBlanks
 00FFFA47 08D046                          bsr             GetHexNumber    ; get start address of dump
 00FFFA49 0FC000910                       ldd             mon_numwka
 00FFFA4C 0FD000920                       std             mon_r1
 00FFFA4F 0FC000912                       ldd             mon_numwka+2
 00FFFA52 0FD000922                       std             mon_r1+2
 00FFFA55 08DFE5                          bsr             ignBlanks
 00FFFA57 08D036                          bsr             GetHexNumber    ; get end address of dump
 00FFFA59 0FC000910                       ldd             mon_numwka
 00FFFA5C 0FD000924                       std             mon_r2
 00FFFA5F 0FC000912                       ldd             mon_numwka+2
 00FFFA62 0FD000926                       std             mon_r2+2
 00FFFA65 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Get a range, the end must be greater or equal to the start.
                              ;------------------------------------------------------------------------------
                              GetRange:
 00FFFA66 08DFDD                          bsr             GetTwoParams
 00FFFA68 0FC000926                       ldd             mon_r2+2
 00FFFA6B 0B3000922                       subd    mon_r1+2
 00FFFA6E 0FC000924                       ldd             mon_r2
 00FFFA71 0F2000921                       sbcb    mon_r1+1
 00FFFA74 0B2000920                       sbca    mon_r1
 00FFFA77 124000007                       lbcc    grng1
 00FFFA7A 0AD90F00080C                    jsr             [MonErrVec]
 00FFFA7E 016FFFEAD                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
                              grng1:
 00FFFA81 039                             rts
 
                              shl_numwka:
 00FFFA82 078000913                       asl             mon_numwka+3
 00FFFA85 079000912                       rol             mon_numwka+2
 00FFFA88 079000911                       rol             mon_numwka+1
 00FFFA8B 079000910                       rol             mon_numwka
 00FFFA8E 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Get a hexidecimal number. Maximum of twelve digits.
                              ;
                              ; Modifies:
                              ;       Y = text pointer (updated)
                              ;       D = number of digits
                              ;       mon_numwka contains number
                              ;------------------------------------------------------------------------------
                              ;
                              GetHexNumber:
 00FFFA8F 04F05F                          clrd
 00FFFA91 0FD000910                       std             mon_numwka      ; zero out work area
 00FFFA94 0FD000912                       std             mon_numwka+2
 00FFFA97 034010                          pshs    x
 00FFFA99 08E000000                       ldx             #0                                      ; max 12 eight digits
                              gthxn2:
 00FFFA9C 08DF92                          bsr             MonGetch
 00FFFA9E 08D01F                          bsr             AsciiToHexNybble
 00FFFAA0 0C1FFF                          cmpb    #-1
 00FFFAA2 027017                          beq             gthxn1
 00FFFAA4 08DFDC                          bsr             shl_numwka
 00FFFAA6 08DFDA                          bsr             shl_numwka
 00FFFAA8 08DFD8                          bsr             shl_numwka
 00FFFAAA 08DFD6                          bsr             shl_numwka
 00FFFAAC 0C400F                          andb    #$0f
 00FFFAAE 0FA000913                       orb             mon_numwka+3
 00FFFAB1 0F7000913                       stb             mon_numwka+3
 00FFFAB4 030001                          inx
 00FFFAB6 08C00000C                       cmpx    #12
 00FFFAB9 025FE1                          blo             gthxn2
                              gthxn1:
 00FFFABB 01F010                          tfr             x,d
 00FFFABD 035090                          puls    x,pc
 
                              ;GetDecNumber:
                              ;       phx
                              ;       push    r4
                              ;       push    r5
                              ;       ldx             #0
                              ;       ld              r4,#10
                              ;       ld              r5,#10
                              ;gtdcn2:
                              ;       jsr             MonGetch
                              ;       jsr             AsciiToDecNybble
                              ;       cmp             #-1
                              ;       beq             gtdcn1
                              ;       mul             r2,r2,r5
                              ;       add             r2,r1
                              ;       dec             r4
                              ;       bne             gtdcn2
                              ;gtdcn1:
                              ;       txa
                              ;       pop             r5
                              ;       pop             r4
                              ;       plx
                              ;       rts
 
                              ;------------------------------------------------------------------------------
                              ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                              ; to a hex nybble.
                              ;------------------------------------------------------------------------------
                              ;
                              AsciiToHexNybble:
 00FFFABF 0C1030                          cmpb    #'0'
 00FFFAC1 025021                          blo             gthx3
 00FFFAC3 0C1039                          cmpb    #'9'
 00FFFAC5 022003                          bhi             gthx5
 00FFFAC7 0C0030                          subb    #'0'
 00FFFAC9 039                             rts
                              gthx5:
 00FFFACA 0C1041                          cmpb    #'A'
 00FFFACC 025016                          blo             gthx3
 00FFFACE 0C1046                          cmpb    #'F'
 00FFFAD0 022005                          bhi             gthx6
 00FFFAD2 0C0041                          subb    #'A'
 00FFFAD4 0CB00A                          addb    #10
 00FFFAD6 039                             rts
                              gthx6:
 00FFFAD7 0C1061                          cmpb    #'a'
 00FFFAD9 025009                          blo             gthx3
 00FFFADB 0C107A                          cmpb    #'z'
 00FFFADD 022005                          bhi             gthx3
 00FFFADF 0C0061                          subb    #'a'
 00FFFAE1 0CB00A                          addb    #10
 00FFFAE3 039                             rts
                              gthx3:
 00FFFAE4 0C6FFF                          ldb             #-1             ; not a hex number
 00FFFAE6 039                             rts
 
                              AsciiToDecNybble:
 00FFFAE7 0C1030                          cmpb    #'0'
 00FFFAE9 024007                          bcc             gtdc3
 00FFFAEB 0C103A                          cmpb    #'9'+1
 00FFFAED 025003                          bcs             gtdc3
 00FFFAEF 0C0030                          subb    #'0'
 00FFFAF1 039                             rts
                              gtdc3:
 00FFFAF2 0C6FFF                          ldb             #-1
 00FFFAF4 039                             rts
 
                              DisplayErr:
 00FFFAF5 0CCFFFB06                       ldd             #msgErr
 00FFFAF8 017FFE8BB                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFFAFB 07EFFF92E                       jmp             Monitor
 
                              DisplayStringDX
 00FFFAFE 0DD024                          std             Strptr
 00FFFB00 09F026                          stx             Strptr+2
 00FFFB02 0BDFFE3B6                       jsr             DisplayString
 00FFFB05 039                             rts
 
                              msgErr:
 00FFFB06 02A02A04507207200D00A           fcb     "**Err",CR,LF,0
 00FFFB0D 000
 
                              HelpMsg:
 00FFFB0E 03F02003D020044069073           fcb             "? = Display help",CR,LF
 00FFFB15 07006C061079020068065
 00FFFB1C 06C07000D00A
 00FFFB20 04304C05302003D020063           fcb     "CLS = clear screen",CR,LF
 00FFFB27 06C065061072020073063
 00FFFB2E 07206506506E00D00A
                              ;       db      "S = Boot from SD Card",CR,LF
 00FFFB34 03A02003D020045064069           fcb     ": = Edit memory bytes",CR,LF
 00FFFB3B 07402006D06506D06F072
 00FFFB42 079020062079074065073
 00FFFB49 00D00A
                              ;       db      "L = Load sector",CR,LF
                              ;       db      "W = Write sector",CR,LF
 00FFFB4B 04405202003D020044075           fcb "DR = Dump registers",CR,LF
 00FFFB52 06D070020072065067069
 00FFFB59 07307406507207300D00A
 00FFFB60 04402003D02004407506D           fcb     "D = Dump memory",CR,LF
 00FFFB67 07002006D06506D06F072
 00FFFB6E 07900D00A
                              ;       db      "F = Fill memory",CR,LF
 00FFFB71 04604C02003D020044075           fcb "FL = Dump I/O Focus List",CR,LF
 00FFFB78 06D07002004902F04F020
 00FFFB7F 04606F06307507302004C
 00FFFB86 06907307400D00A
 00FFFB8B 04604904702003D020073           fcb "FIG = start FIG Forth",CR,LF
 00FFFB92 074061072074020046049
 00FFFB99 04702004606F072074068
 00FFFBA0 00D00A
                              ;       db      "KILL n = kill task #n",CR,LF
                              ;       db      "B = start tiny basic",CR,LF
                              ;       db      "b = start EhBasic 6502",CR,LF
 00FFFBA2 04A02003D02004A07506D           fcb     "J = Jump to code",CR,LF
 00FFFBA9 07002007406F02006306F
 00FFFBB0 06406500D00A
 00FFFBB4 05204104D02003D020074           fcb "RAM = test RAM",CR,LF
 00FFFBBB 06507307402005204104D
 00FFFBC2 00D00A
                              ;       db      "R[n] = Set register value",CR,LF
                              ;       db      "r = random lines - test bitmap",CR,LF
                              ;       db      "e = ethernet test",CR,LF
 00FFFBC4 07302003D020073065072           fcb     "s = serial output test",CR,LF
 00FFFBCB 06906106C02006F075074
 00FFFBD2 070075074020074065073
 00FFFBD9 07400D00A
                              ;       db      "T = Dump task list",CR,LF
                              ;       db      "TO = Dump timeout list",CR,LF
 00FFFBDC 05404902003D020064069           fcb     "TI = display date/time",CR,LF
 00FFFBE3 07307006C061079020064
 00FFFBEA 06107406502F07406906D
 00FFFBF1 06500D00A
                              ;       db      "TEMP = display temperature",CR,LF
 00FFFBF4 05502003D02007506E061           fcb     "U = unassemble",CR,LF
 00FFFBFB 07307306506D06206C065
 00FFFC02 00D00A
                              ;       db      "P = Piano",CR,LF,0
 00FFFC04 000                             fcb             0
 
                              msgRegHeadings
 00FFFC05 00D00A02002004402F041           fcb     CR,LF,"  D/AB     X      Y      U      S       PC    DP  CCR",CR,LF,0
 00FFFC0C 042020020020020020058
 00FFFC13 020020020020020020059
 00FFFC1A 020020020020020020055
 00FFFC21 020020020020020020053
 00FFFC28 020020020020020020020
 00FFFC2F 050043020020020020044
 00FFFC36 05002002004304305200D
 00FFFC3D 00A000
 
                              nHEX4:
 00FFFC3F 0BDFFD2D2                       jsr             HEX4
 00FFFC42 039                             rts
 
                              nXBLANK:
 00FFFC43 0C6020                          ldb             #' '
 00FFFC45 016FFF0CA                       lbra    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 
                              ;------------------------------------------------------------------------------
                              ; Dump Memory
                              ;
                              ; Usage:
                              ;       $D FFFC12 FFFC20
                              ;
                              ; Dump formatted to look like:
                              ;               :FFFC12 012 012 012 012 555 666 777 888
                              ;
                              ;------------------------------------------------------------------------------
 
                              DumpMemory:
 00FFFC48 08DE1C                          bsr             GetRange
 00FFFC4A 18E000000                       ldy             #0
 00FFFC4D 1BE000922                       ldy             mon_r1+2
                              dmpm2:
 00FFFC50 017FFD47F                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFFC53 0C603A                          ldb             #':'
 00FFFC55 017FFF0BA                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFC58 01F020                          tfr             y,d
                                      ;addd   mon_r1+2                                        ; output the address
 00FFFC5A 017FFE7A4                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFFC5D 0C6020                          ldb             #' '
 00FFFC5F 017FFF0B0                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFC62 08E000008                       ldx             #8                                                              ; number of bytes to display
                              dmpm1:
                              ;       ldb             far [mon_r1+1],y
                                      ;ldb            [mon_r1+2],y
 00FFFC65 0E6A04                          ldb             ,y
 00FFFC67 031201                          iny
 00FFFC69 017FFE79E                       lbsr    DispByteAsHex                   ; display byte
*** warning 1: Long branch within short branch range could be optimized
 00FFFC6C 0C6020                          ldb             #' '                                                    ; followed by a space
 00FFFC6E 017FFF0A1                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFC71 05F                             clrb
 00FFFC72 04F                             clra
 00FFFC73 017FFF064                       lbsr    INCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFC76 0C1003                          cmpb    #CTRLC
 00FFFC78 027024                          beq             dmpm3
 00FFFC7A 0301FF                          dex
 00FFFC7C 026FE7                          bne             dmpm1
                                      ; Now output ascii
 00FFFC7E 0C6020                          ldb             #' '
 00FFFC80 017FFF08F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFC83 08E000008                       ldx             #8                                                              ; 8 chars to output
 00FFFC86 0313F8                          leay    -8,y                                                    ; backup pointer
                              dmpm5:
                              ;       ldb             far [mon_r1+1],y        ; get the char
                              ;       ldb             [mon_r1+2],y                    ; get the char
 00FFFC88 0E6A04                          ldb             ,y
 00FFFC8A 0C1020                          cmpb    #$20                                                    ; is it a control char?
 00FFFC8C 024002                          bhs             dmpm4
 00FFFC8E 0C602E                          ldb             #'.'
                              dmpm4:
 00FFFC90 017FFF07F                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFC93 031201                          iny
 00FFFC95 0301FF                          dex
 00FFFC97 026FEF                          bne             dmpm5
 00FFFC99 1BC000926                       cmpy    mon_r2+2
 00FFFC9C 025FB2                          blo             dmpm2
                              dmpm3:
 00FFFC9E 017FFD431                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFFCA1 016FFFC8A                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
 
                              ;------------------------------------------------------------------------------
                              ; Edit Memory
                              ;
                              ; Usage:
                              ;       $$:FFFC12 8 "Hello World!" 0
                              ;
                              ; Dump formatted to look like:
                              ;               :FFFC12 012 012 012 012 555 666 777 888
                              ;
                              ;------------------------------------------------------------------------------
 
                              EditMemory:
 00FFFCA4 0CE000008                       ldu             #8                                              ; set max byte count
 00FFFCA7 017FFFDE5                       lbsr    GetHexNumber    ; get the start address
*** warning 1: Long branch within short branch range could be optimized
 00FFFCAA 0BE000922                       ldx             mon_r1+2
                              EditMem2:
 00FFFCAD 017FFFD8C                       lbsr    ignBlanks                       ; skip over blanks
*** warning 1: Long branch within short branch range could be optimized
 00FFFCB0 017FFFDDC                       lbsr    GetHexNumber    ; get the byte value
*** warning 1: Long branch within short branch range could be optimized
 00FFFCB3 05D                             tstb                                                            ; check for valid value
 00FFFCB4 02B00C                          bmi             EditMem1                        ; if invalid, quit
 00FFFCB6 0F6000923                       ldb             mon_r1+3                        ; get value
 00FFFCB9 0E7800                          stb             ,x+                                             ; update memory at address
 00FFFCBB 0335FF                          leau    -1,u                                    ; decremeent byte count
 00FFFCBD 283000000                       cmpu    #0
 00FFFCC0 026FEB                          bne             EditMem2                        ; go back for annother byte
                              EditMem1:
 00FFFCC2 017FFFD6B                       lbsr    MonGetch                        ; see if a string is being entered
*** warning 1: Long branch within short branch range could be optimized
 00FFFCC5 0C1022                          cmpb    #'"'
 00FFFCC7 026018                          bne             EditMem3                        ; no string, we're done
 00FFFCC9 0CE000028                       ldu             #40                                             ; string must be less than 40 chars
                              EditMem4:
 00FFFCCC 017FFFD61                       lbsr    MonGetch                        ; look for close quote
*** warning 1: Long branch within short branch range could be optimized
 00FFFCCF 0C1022                          cmpb    #'"'
 00FFFCD1 026005                          bne             EditMem6                        ; end of string?
 00FFFCD3 0CE000008                       ldu             #8                                              ; reset the byte count
 00FFFCD6 020FD5                          bra             EditMem2
                              EditMem6:                       
 00FFFCD8 0E7800                          stb             ,x+                                             ; store the character in memory
 00FFFCDA 0335FF                          leau    -1,u                                    ; decrement byte count
 00FFFCDC 283000000                       cmpu    #0
 00FFFCDF 022FEB                          bhi             EditMem4                        ; max 40 chars
                              EditMem3:
 00FFFCE1 016FFFC4A                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
                                      
 
                              ;------------------------------------------------------------------------------
                              ; Dump Registers
                              ;
                              ;       Usage:
                              ;               $DR
                              ;------------------------------------------------------------------------------
 
                              DumpRegs:
 00FFFCE4 0CCFFFC05                       ldd             #msgRegHeadings
 00FFFCE7 017FFE6CC                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFFCEA 08DF57                          bsr             nXBLANK
 00FFFCEC 0FC000900                       ldd             mon_DSAVE
 00FFFCEF 08DF4E                          bsr             nHEX4
 00FFFCF1 08DF50                          bsr             nXBLANK
 00FFFCF3 0FC000902                       ldd             mon_XSAVE
 00FFFCF6 08DF47                          bsr             nHEX4
 00FFFCF8 08DF49                          bsr             nXBLANK
 00FFFCFA 0FC000904                       ldd             mon_YSAVE
 00FFFCFD 08DF40                          bsr             nHEX4
 00FFFCFF 08DF42                          bsr             nXBLANK
 00FFFD01 0FC000906                       ldd             mon_USAVE
 00FFFD04 08DF39                          bsr             nHEX4
 00FFFD06 08DF3B                          bsr             nXBLANK
 00FFFD08 0FC000908                       ldd             mon_SSAVE
 00FFFD0B 08DF32                          bsr             nHEX4
 00FFFD0D 08DF34                          bsr             nXBLANK
 00FFFD0F 0F600090B                       ldb             mon_PCSAVE+1
 00FFFD12 017FFE6F5                       lbsr    DispByteAsHex   
*** warning 1: Long branch within short branch range could be optimized
 00FFFD15 0FC00090C                       ldd             mon_PCSAVE+2
 00FFFD18 08DF25                          bsr             nHEX4
 00FFFD1A 08DF27                          bsr             nXBLANK
 00FFFD1C 0FC00090E                       ldd             mon_DPRSAVE
 00FFFD1F 0BDFFD2CE                       jsr             HEX2
 00FFFD22 08DF1F                          bsr             nXBLANK
 00FFFD24 0B600090F                       lda             mon_CCRSAVE
 00FFFD27 017FFD5A4                       lbsr    HEX2
*** warning 1: Long branch within short branch range could be optimized
 00FFFD2A 08DF17                          bsr             nXBLANK
 00FFFD2C 016FFFBFF                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
 
                              ;------------------------------------------------------------------------------
                              ; Jump to code
                              ;
                              ; Registers are loaded with values from the monitor register save area before
                              ; the code is jumped to.
                              ;
                              ; J <address>
                              ;------------------------------------------------------------------------------
 
                              jump_to_code:
 00FFFD2F 08DD5E                          bsr             GetHexNumber
 00FFFD31 01A010                          sei
 00FFFD33 1FE000908                       lds             mon_SSAVE
 00FFFD36 0CCFFFD6A                       ldd             #<jtc_exit              ; setup stack for RTS back to monitor
 00FFFD39 034006                          pshs    d
 00FFFD3B 0C6000                          ldb             #>jtc_exit
 00FFFD3D 034004                          pshs    b
 00FFFD3F 0FC000912                       ldd             mon_numwka+2    ; get the address parameter
 00FFFD42 034006                          pshs    d
 00FFFD44 0F6000911                       ldb             mon_numwka+1
 00FFFD47 034004                          pshs    b
 00FFFD49 0FC000906                       ldd             mon_USAVE
 00FFFD4C 034006                          pshs    d
 00FFFD4E 0FC000904                       ldd             mon_YSAVE
 00FFFD51 034006                          pshs    d
 00FFFD53 0FC000902                       ldd             mon_XSAVE
 00FFFD56 034006                          pshs    d
 00FFFD58 0B600090E                       lda             mon_DPRSave
 00FFFD5B 034002                          pshs    a
 00FFFD5D 0FC000900                       ldd             mon_DSAVE
 00FFFD60 034006                          pshs    d
 00FFFD62 0B600090F                       lda             mon_CCRSAVE
 00FFFD65 034002                          pshs    a
 00FFFD67 0150350FF                       puls    far ccr,d,dpr,x,y,u,pc
                              jtc_exit:
 00FFFD6A 1FF000908                       sts             >mon_SSAVE              ; need to use extended addressing, no direct page setting
 00FFFD6D 03280F006FFF                    leas    $6FFF                                   ; reset stack to system area, dont modify flags register!
 00FFFD71 034001                          pshs    ccr                                             ; now the stack can be used
 00FFFD73 034002                          pshs    a                                                       ; save acca register so we can use it
 00FFFD75 01F0B8                          tfr             dpr,a                                   ; a = outgoing dpr value
 00FFFD77 0B700090E                       sta             >mon_DPRSAVE    ; force extended addressing mode usage here dpr is not set
 00FFFD7A 04F                             clra                                                            ; dpg register must be set to zero before values are 
 00FFFD7B 01F08B                          tfr             a,dpr                                   ; saved in the monitor register save area.
 00FFFD7D 035002                          puls    a                                                       ; get back acca
 00FFFD7F 0FD000900                       std             mon_DSAVE                       ; save regsters, can use direct addressing now
 00FFFD82 0BF000902                       stx             mon_XSAVE
 00FFFD85 1BF000904                       sty             mon_YSAVE
 00FFFD88 0FF000906                       stu             mon_USAVE
 00FFFD8B 035002                          puls    a                                                       ; get back ccr
 00FFFD8D 0B700090F                       sta             mon_CCRSAVE             ; and save it too
                                      ; Reset vectors in case they got toasted.
 00FFFD90 0CCFFEBE4                       ldd             #SerialPeekCharDirect
 00FFFD93 0FD000804                       std             CharInVec
 00FFFD96 0CCFFE2F5                       ldd             #DisplayChar
 00FFFD99 0FD000800                       std             CharOutVec
 00FFFD9C 0FCFFFAF5                       ldd             DisplayErr
 00FFFD9F 0FD00080C                       std             MonErrVec
                                      ; todo set according to coreid
 00FFFDA2 016FFFF3F                       lbra    DumpRegs                        ; now go do a register dump
*** warning 1: Long branch within short branch range could be optimized
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 
                              DumpIOFocusList:
 00FFFDA5 08E000000                       ldx             #0
                              dfl2:
 00FFFDA8 0E680A000FF0000                 ldb             IOFocusList,x
 00FFFDAD 0C1018                          cmpb    #24
 00FFFDAF 02600A                          bne             dfl1
 00FFFDB1 01F010                          tfr             x,d
 00FFFDB3 017FFE654                       lbsr    DispByteAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFFDB6 0C6020                          ldb             #' '
 00FFFDB8 017FFEF57                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
                              dfl1:
 00FFFDBB 030001                          inx
 00FFFDBD 08C000010                       cmpx    #16
 00FFFDC0 025FE6                          blo             dfl2
 00FFFDC2 017FFD30D                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFFDC5 016FFFB66                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
                                      
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              swi3_rout:
 00FFFDC8 01A010                          sei
 00FFFDCA 035002                          puls    a
 00FFFDCC 0B700090F                       sta             mon_CCRSAVE
 00FFFDCF 03507E                          puls    D,DPR,X,Y,U
 00FFFDD1 0FD000900                       std             mon_DSAVE
 00FFFDD4 0BF000902                       stx             mon_XSAVE
 00FFFDD7 1BF000904                       sty             mon_YSAVE
 00FFFDDA 0FF000906                       stu             mon_USAVE
 00FFFDDD 01F0B8                          tfr             dpr,a
 00FFFDDF 0B700090E                       sta             mon_DPRSAVE
 00FFFDE2 035002                          puls    a
 00FFFDE4 0B700090A                       sta             mon_PCSAVE
 00FFFDE7 035006                          puls    D
 00FFFDE9 0FD00090B                       std             mon_PCSAVE+1
 00FFFDEC 1FF000908                       sts             mon_SSAVE
 00FFFDEF 1CE003FFF                       lds             #$3FFF
 00FFFDF2 01C0EF                          cli
 00FFFDF4 07EFFFCE4                       jmp             DumpRegs
                              swi3_exit:
 00FFFDF7 01A010                          sei
 00FFFDF9 1FE000908                       lds             mon_SSAVE
 00FFFDFC 0FC00090B                       ldd             mon_PCSAVE+1
 00FFFDFF 034006                          pshs    d
 00FFFE01 0B600090A                       lda             mon_PCSAVE
 00FFFE04 034002                          pshs    a
 00FFFE06 0FE000906                       ldu             mon_USAVE
 00FFFE09 1BE000904                       ldy             mon_YSAVE
 00FFFE0C 0BE000902                       ldx             mon_XSAVE
 00FFFE0F 034070                          pshs    x,y,u
 00FFFE11 0B600090E                       lda             mon_DPRSAVE
 00FFFE14 034002                          pshs    a
 00FFFE16 0FC000900                       ldd             mon_DSAVE
 00FFFE19 034006                          pshs    d
 00FFFE1B 0B600090F                       lda             mon_CCRSAVE
 00FFFE1E 034002                          pshs    a
 00FFFE20 01F08A                          tfr             a,ccr
 00FFFE22 01C0EF                          cli
 00FFFE24 03B                             rti
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              firq_rout:
 00FFFE25 03B                             rti
 
                              irq_rout:
                              ;       lbsr    SerialIRQ       ; check for recieved character
                              ;       lbsr    TimerIRQ
 
                                      ; Reset the edge sense circuit in the PIC
 00FFFE26 08601F                          lda             #31                                                     ; Timer is IRQ #31
 00FFFE28 0B7FF0011                       sta             IrqSource               ; stuff a byte indicating the IRQ source for PEEK()
 00FFFE2B 0150B7FFFE3F010                 sta             PIC+16                                  ; register 16 is edge sense reset reg   
 00FFFE30 0150B6FFFE6000D                 lda             VIA+VIA_IFR
 00FFFE35 02A011                          bpl             notTimerIRQ2
 00FFFE37 085800                          bita    #$800
 00FFFE39 02700D                          beq             notTimerIRQ2
 00FFFE3B 01507FFFFE60012                 clr             VIA+VIA_T3LL
 00FFFE40 01507FFFFE60013                 clr             VIA+VIA_T3LH
 00FFFE45 07CE00037                       inc             $E00037                                 ; update timer IRQ screen flag
                              notTimerIRQ2:
 
 00FFFE48 0B6FF0014                       lda             IrqBase                 ; get the IRQ flag byte
 00FFFE4B 044                             lsra
 00FFFE4C 0BAFF0014                       ora             IrqBase
 00FFFE4F 0840E0                          anda    #$E0
 00FFFE51 0B7FF0014                       sta             IrqBase
 
                              ;       inc             TEXTSCR+54              ; update IRQ live indicator on screen
                                      
                                      ; flash the cursor
                                      ; only bother to flash the cursor for the task with the IO focus.
                              ;       lda             COREID
                              ;       cmpa    IOFocusID
                              ;       bne             tr1a
                              ;       lda             CursorFlash             ; test if we want a flashing cursor
                              ;       beq             tr1a
                              ;       lbsr    CalcScreenLoc   ; compute cursor location in memory
                              ;       tfr             d,y
                              ;       lda             $2000,y                 ; get color code $2000 higher in memory
                              ;       ldb             IRQFlag                 ; get counter
                              ;       lsrb
                              ;       lsra
                              ;       lsra
                              ;       lsra
                              ;       lsra
                              ;       lsrb
                              ;       rola
                              ;       lsrb
                              ;       rola
                              ;       lsrb
                              ;       rola
                              ;       lsrb
                              ;       rola
                              ;       sta             $E00000,y               ; store the color code back to memory
                              tr1a:
 00FFFE54 03B                             rti
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              nmi_rout:
 00FFFE55 0150F6FFFFFFFE0                 ldb             COREID
 00FFFE5A 086049                          lda             #'I'
 00FFFE5C 08EE00028                       ldx             #TEXTSCR+40
 00FFFE5F 0A788F                          sta             b,x
                              rti_insn:
 00FFFE61 03B                             rti
 
                              ; Special Register Area
                                      org             $FFFFE0
 
                              ; Interrupt vector table
 
                                      org             $FFFFF0
 00FFFFF0 FFFE61                          fcw             rti_insn                ; reserved
 00FFFFF2 FFFDC8                          fcw             swi3_rout               ; SWI3
 00FFFFF4 FFFE61                          fcw             rti_insn                ; SWI2
 00FFFFF6 FFFE25                          fcw             firq_rout               ; FIRQ
 00FFFFF8 FFFE26                          fcw             irq_rout                ; IRQ
 00FFFFFA FFE023                          fcw             start                           ; SWI
 00FFFFFC FFFE55                          fcw             nmi_rout                ; NMI
 00FFFFFE FFE023                          fcw             start                           ; RST

192 warning(s) in pass 2.

SYMBOL TABLE
      ACIA 00 FFE30100  ACIA_CMD 00 00000002 ACIA_CTRL 00 00000003 ACIA_CTRL2 00 0000000B
   ACIA_RX 00 00000000 ACIA_STAT 00 00000001   ACIA_TX 00 00000000 ASCIITODECNYBBLE 02 00FFFAE7
 ASCIITOHEXNYBBLE 02 00FFFABF    ASMBUF 00 00000160      ASMO 02 00FFF8BC     ASMOO 02 00FFF8C6
  ASMOUTCH 02 00FFF8D0 BIOS_SCREENS 00 17000000 BLANKLINE 02 00FFE26C BLKCPYDST 00 00000020
 BLKCPYSRC 00 0000001C   BLNKLN1 02 00FFE27F CALCSCREENLOC 02 00FFE2D2 CHARCOLOR 00 00000112
 CHARINVEC 00 00000804 CHAROUTVEC 00 00000800 CHECKPOINT 02 00FFE129 CLEARSCREEN 02 00FFE225
 CLEARSCREENJMP 02 00FFD300 CMDPROMPT 02 00FFF8E0 CMDPROMPTJI 00 00000808 COLORCODELOCATION 00 00000014
 COPYSCREENTOVIRTUALSCREEN 02 00FFE1F5 COPYVIRTUALSCREENTOSCREEN 02 00FFE1BE    COREID 00 FFFFFFE0        CR 00 0000000D
      CRLF 02 00FFD0D2     CRLF1 02 00FFD0D2    CRLFST 02 00FFE3F5       CS1 02 00FFE232
       CS2 02 00FFE249     CS2V1 02 00FFE201       CS3 02 00FFE24F      CSL1 02 00FFE2ED
     CTRLC 00 00000003     CTRLH 00 00000008     CTRLI 00 00000009     CTRLJ 00 0000000A
     CTRLK 00 0000000B     CTRLM 00 0000000D     CTRLS 00 00000013     CTRLT 00 00000014
     CTRLX 00 00000018 CURSORCOL 00 00000111 CURSORFLASH 00 00000114 CURSORROW 00 00000110
     CV2S1 02 00FFE1D3      DAB1 02 00FFF8DF      DAB2 02 00FFF8D6 DBGCHECKFORKEY 02 00FFEA10
     DBGK1 02 00FFEA4B    DBGK10 02 00FFEAB0    DBGK11 02 00FFEB09    DBGK12 02 00FFEB0F
    DBGK13 02 00FFEB1B    DBGK14 02 00FFEB2B    DBGK15 02 00FFEB3A    DBGK16 02 00FFEB45
    DBGK17 02 00FFEB4E    DBGK18 02 00FFEB51     DBGK2 02 00FFEA16    DBGK20 02 00FFEA38
    DBGK22 02 00FFEA54    DBGK23 02 00FFEA65    DBGK24 02 00FFEA46     DBGK3 02 00FFEA68
     DBGK4 02 00FFEA74     DBGK5 02 00FFEA80     DBGK7 02 00FFEA90     DBGK8 02 00FFEA96
     DBGK9 02 00FFEAAA DBGKNOTALT 02 00FFEB13 DBGKNOTCAPSLOCK 02 00FFEAE2 DBGKNOTCTRL 02 00FFEA9A
 DBGKNOTNUMLOCK 02 00FFEACB DBGKNOTRSHIFT 02 00FFEAB4 DBGKNOTSCROLLLOCK 02 00FFEAF9      DCCR 02 00FFE305
      DCLF 02 00FFE38F     DCX10 02 00FFE33F     DCX11 02 00FFE34F     DCX12 02 00FFE34B
     DCX13 02 00FFE35B     DCX14 02 00FFE302      DCX3 02 00FFE37D      DCX4 02 00FFE391
      DCX5 02 00FFE36C      DCX6 02 00FFE316      DCX7 02 00FFE312      DCX8 02 00FFE323
      DCX9 02 00FFE330   DELAY3S 02 00FFE1A1      DFL1 02 00FFFDBB      DFL2 02 00FFFDA8
    DIRECT 00 00000001      DIS1 02 00FFF7EF     DIS10 02 00FFF572     DIS11 02 00FFF5AE
     DIS12 02 00FFF5EB     DIS13 02 00FFF627     DIS14 02 00FFF668     DIS15 02 00FFF6A4
     DIS16 02 00FFF6E1     DIS17 02 00FFF724     DIS18 02 00FFF76C     DIS19 02 00FFF81B
      DIS2 02 00FFF411     DIS20 02 00FFF3DA     DIS21 02 00FFF40F     DIS23 02 00FFF3DD
     DIS24 02 00FFF81E     DIS25 02 00FFF82B      DIS3 02 00FFF43A     DIS30 02 00FFF7BA
      DIS4 02 00FFF457      DIS5 02 00FFF468      DIS6 02 00FFF49C      DIS7 02 00FFF4D3
      DIS8 02 00FFF507      DIS9 02 00FFF53E  DISASSEM 02 00FFF3B4  DISLOOP1 02 00FFF3BF
 DISNDXREG 02 00FFF874 DISNDXREGS 02 00FFF850 DISNEXTLINE 02 00FFF842   DISNOT9 02 00FFF44C
 DISNOTAOFFS 02 00FFF5D6  DISNOTBO 02 00FFF613 DISNOTBOFFS 02 00FFF59A DISNOTDIRECT 02 00FFF40B
 DISNOTDOFFS 02 00FFF6CC DISNOTEXT 02 00FFF7C4 DISNOTIMMB 02 00FFF7D5 DISNOTIMMW 02 00FFF7E5
 DISNOTLREL 02 00FFF41B DISNOTNDX 02 00FFF7AD DISNOTPBO 02 00FFF710 DISNOTPTO 02 00FFF79B
 DISNOTPWO 02 00FFF753   DISNOTR 02 00FFF55E DISNOTREL 02 00FFF424 DISNOTRMINUS 02 00FFF4F8
 DISNOTRMINUSMINUS 02 00FFF52F DISNOTRPLUS 02 00FFF48D DISNOTRPLUSPLUS 02 00FFF4C4 DISNOTTFR 02 00FFF7EF
  DISNOTTO 02 00FFF690  DISNOTWO 02 00FFF64F DISPBYTEASHEX 02 00FFE40A DISPDWORDASHEX 02 00FFE3F8
 DISPLAYCHAR 02 00FFE2F5 DISPLAYERR 02 00FFFAF5 DISPLAYSTRING 02 00FFE3B6 DISPLAYSTRINGCRLF 02 00FFE3CD
 DISPLAYSTRINGDX 02 00FFFAFE   DISPNYB 02 00FFE422  DISPNYB1 02 00FFE431 DISPWORDASHEX 02 00FFE401
   DISTBL1 02 00FFEDB4   DISTBL2 02 00FFF2B4   DISTBL3 02 00FFF2F4   DISTBL4 02 00FFF314
   DISTFR1 02 00FFF8A3 DISTFREXG 02 00FFF8A5 DISTFRREG 02 00FFF889 DISTFRREGS 02 00FFF854
    DLY3S1 02 00FFE1A4    DLY3S2 02 00FFE1A8     DMPM1 02 00FFFC65     DMPM2 02 00FFFC50
     DMPM3 02 00FFFC9E     DMPM4 02 00FFFC90     DMPM5 02 00FFFC88 DRAM_BASE 00 10000000
    DSPJ1B 02 00FFE3BF     DSPJ2 02 00FFE3BA    DSRETB 02 00FFE3C8 DUMPASMBUF 02 00FFF8D3
 DUMPIOFOCUSLIST 02 00FFFDA5 DUMPMEMORY 02 00FFFC48  DUMPREGS 02 00FFFCE4    DUMRTS 02 00FFE022
  EDITMEM1 02 00FFFCC2  EDITMEM2 02 00FFFCAD  EDITMEM3 02 00FFFCE1  EDITMEM4 02 00FFFCCC
  EDITMEM6 02 00FFFCD8 EDITMEMORY 02 00FFFCA4       EXT 00 00000006    FAREXT 00 00000008
   FARFLAG 00 0000015F FIRQ_ROUT 02 00FFFE25 FIRST_CORE 00 00000001   FREEMBX 02 00000002
   FREEMSG 02 00000006   FREETCB 00 0000078A GETHEXNUMBER 02 00FFFA8F    GETKEY 02 00FFEA12
  GETRANGE 02 00FFFA66 GETSCREENLOCATION 02 00FFE286 GETTWOPARAMS 02 00FFFA45     GRNG1 02 00FFFA81
      GSL1 02 00FFE294     GTDC3 02 00FFFAF2     GTHX3 02 00FFFAE4     GTHX5 02 00FFFACA
     GTHX6 02 00FFFAD7    GTHXN1 02 00FFFABB    GTHXN2 02 00FFFA9C       HC1 02 00FFE2AE
   HELPMSG 02 00FFFB0E      HEX2 02 00FFD2CE      HEX4 02 00FFD2D2 HOMECURSOR 02 00FFE298
 HOMECURSORJMP 02 00FFD308     I2CW1 02 00FFE492    I2CWR1 02 00FFE4BF   I2C_CMD 00 00000004
  I2C_CTRL 00 00000002  I2C_PREH 00 00000001  I2C_PREL 00 00000000   I2C_RXR 00 00000003
  I2C_STAT 00 00000004   I2C_TXR 00 00000003 I2C_WAIT_RX_NACK 02 00FFE4BD I2C_WAIT_TIP 02 00FFE490
 I2C_WR_CMD 02 00FFE49A      ICC1 02 00FFE3B2      ICC2 02 00FFE3B4      ICR1 02 00FFE3A4
 IGNBLANKS 02 00FFFA3C IGNBLANKS1 02 00FFFA3C      IMMB 00 00000003      IMMW 00 00000007
 INCCURSORPOS 02 00FFE393 INCCURSORROW 02 00FFE3A2      INCH 02 00FFECDA     INCH1 02 00FFECEF
     INCH2 02 00FFECDC     INCHE 02 00FFECF8    INCHEK 02 00FFECFC   INCHEK1 02 00FFED11
   INCHEK2 02 00FFED0E   INCHEK3 02 00FFED05      INIT 02 00FFE09A     INIT1 02 00FFE0A2
 INITSERIAL 02 00FFEB6F IOFOCUSID 00 00FF0010 IOFOCUSLIST 00 00FF0000 IOFOCUSNDX 00 00000100
   IRQBASE 00 00FF0014   IRQFLAG 00 00FF0012 IRQSOURCE 00 00FF0011  IRQ_ROUT 02 00FFFE26
  JTC_EXIT 02 00FFFD6A JUMP_TO_CODE 02 00FFFD2F KBDBUFFULL 02 00FFEA0D   KBDFIFO 00 00000040
 KBDFIFOALIAS 00 00C00040 KBDHEADRCV 00 00000127  KBDI0002 02 00FFE949  KBDI0004 02 00FFE98E
 KBDITRYAGAIN 02 00FFE982 KBDRCVCOUNT 02 00FFE9BD KBDTAILRCV 00 00000128     KBGS1 02 00FFE8F8
     KBGS2 02 00FFE8F0     KBGS3 02 00FFE8E1     KEYBD 00 FFE30400  KEYBDACK 00 FFFFCC00
  KEYBDBAD 00 FFFFCB00 KEYBDBLOCK 00 00000126 KEYBDBUFFER 00 FFFFC000 KEYBDCHECKFORKEYDIRECT 02 00FFECD8
 KEYBDCLOSE 02 00FFEB6B  KEYBDCLR 00 FFE30402 KEYBDCONTROLCODES 02 00FFE780 KEYBDECHO 00 FFFFCA00
 KEYBDEXTENDEDCODES 02 00FFE800 KEYBDGETID 02 00FFE91C KEYBDGETSCANCODE 02 00FFE8FD KEYBDGETSTATUS 02 00FFE8E1
 KEYBDHEAD 00 FFFFC800   KEYBDID 00 00000124 KEYBDINIT 02 00FFE940  KEYBDIRQ 02 00FFE9CF
 KEYBDLOCKS 00 FFFFCD00 KEYBDOPEN 02 00FFEB6A KEYBDREAD 02 00FFEB6C KEYBDRECVBYTE 02 00FFE880
 KEYBDSEEK 02 00FFEB6E KEYBDSENDBYTE 02 00FFE899 KEYBDSETLED 02 00FFE909 KEYBDTAIL 00 FFFFC900
 KEYBDWAITTX 02 00FFE89F KEYBDWRITE 02 00FFEB6D    KEYLED 00 00000122 KEYSTATE1 00 00000120
 KEYSTATE2 00 00000121     KGID1 02 00FFE939  KGNOTKBD 02 00FFE93C      KRB3 02 00FFE885
      KRB4 02 00FFE895    KRCXIT 02 00FFE9CE      KWT1 02 00FFE8A4      KWT2 02 00FFE8B5
      LEDS 00 FFE60001    LEDXIT 02 00FFE9A2    LETTER 02 00FFD2C1        LF 00 0000000A
     LSREL 00 00000002 MAX_TASKNO 00 0000003F MONERRVEC 00 0000080C  MONGETCH 02 00FFFA30
 MONGETNONSPACE 02 00FFFA35   MONITOR 02 00FFF92E MONITORSTART 02 00FFF910 MON_CCRSAVE 00 0000090F
 MON_DPRSAVE 00 0000090E MON_DSAVE 00 00000900 MON_NUMWKA 00 00000910 MON_PCSAVE 00 0000090A
    MON_R1 00 00000920    MON_R2 00 00000924 MON_SSAVE 00 00000908 MON_USAVE 00 00000906
 MON_XSAVE 00 00000902 MON_YSAVE 00 00000904   MSCOUNT 00 FFFFFFE4 MSGBADKEYBD 02 00FFE9AE
    MSGERR 02 00FFFB06 MSGF09STARTING 02 00FFF8EB MSGREGHEADINGS 02 00FFFC05 MSGSERIALTEST 02 00FFECC5
 MSGSTARTUP 02 00FFE108 MULTI_SIEVE 02 00FFE13F MULTI_SIEVE1 02 00FFE162 MULTI_SIEVE2 02 00FFE15E
 MULTI_SIEVE3 02 00FFE14C MULTI_SIEVE4 02 00FFE175       NDX 00 00000005     NHEX4 02 00FFFC3F
  NMAILBOX 02 00000004 NMESERIAL 02 00FFEC8E   NMIBASE 00 00FF0013  NMI_ROUT 02 00FFFE55
   NMSGBLK 02 00000008 NOTKBDIRQ 02 00FFEA0C  NOTRXINT 02 00FFEC8D NOTTIMERIRQ 02 00FFE485
 NOTTIMERIRQ2 02 00FFFE48   NXBLANK 02 00FFFC43    ONEKEY 02 00FFD1DC      OSC1 02 00FFED59
    OSCALL 02 00FFED59 OSCALLTBL 02 00FFED27      OSCX 02 00FFED69    OSSEMA 00 00EF0010
     OUTCH 02 00FFED12   OUTSEMA 00 00EF0000     PCRLF 02 00FFE3E1     PDATA 02 00FFE3EE
       PIC 00 FFE3F000    PICPTR 00 00000028     PRINT 02 00FFE3EB   PROMPT1 02 00FFF95B
   PROMPT2 02 00FFF987  PROMPT2A 02 00FFF9A5   PROMPT3 02 00FFF94C   PROMPTC 02 00FFF9C3
 PROMPTCOLON 02 00FFF9DB   PROMPTD 02 00FFF9CF   PROMPTF 02 00FFF9E2  PROMPTFL 02 00FFF9F5
 PROMPTHELP 02 00FFF9B7   PROMPTJ 02 00FFF9FC  PROMPTLN 02 00FFF948   PROMPTR 02 00FFFA01
   PROMPTT 02 00FFFA14   PROMPTU 02 00FFFA29  PROMPT_S 02 00FFFA0B    PSTRNG 02 00FFE3DD
     QNDX0 00 00000780     QNDX1 00 00000782     QNDX2 00 00000784     QNDX3 00 00000786
     QNDX4 00 00000788    RAMERR 02 00FFD42C   RAMTEST 02 00FFD400  RAMTEST1 02 00FFD40D
  RAMTEST3 02 00FFD417 RELEASEIOFOCUS 02 00FFED84 REQUESTIOFOCUS 02 00FFED6D     RIOF1 02 00FFEDAB
     RIOF2 02 00FFED9A  ROMTORAM 02 00FFE12F ROMTORAM1 02 00FFE135       RTC 00 FFE30500
    RTCBUF 00 00007FC0  RTCR0001 02 00FFE4ED  RTCW0001 02 00FFE538  RTC_READ 02 00FFE4C7
 RTC_RXERR 02 00FFE516 RTC_WRITE 02 00FFE51A  RTI_INSN 02 00FFFE61 RUNNINGID 00 00800000
 RUNNINGTCB 06 00000000 SCREENCOLOR 00 00000113 SCREENLOCATION 00 00000010 SCREENLOCATION2 00 00000018
  SCROLLUP 02 00FFE251    SCRUP1 02 00FFE25E    SC_ALT 00 00000011      SC_C 00 00000021
 SC_CAPSLOCK 00 00000058   SC_CTRL 00 00000014    SC_DEL 00 00000071 SC_EXTEND 00 000000E0
    SC_F12 00 00000007  SC_KEYUP 00 000000F0 SC_NUMLOCK 00 00000077 SC_RSHIFT 00 00000059
 SC_SCROLLLOCK 00 0000007E      SC_T 00 0000002C    SC_TAB 00 0000000D      SC_Z 00 0000001A
   SEMAABS 00 00001000 SERHEADRCV 00 00000131 SERHEADXMIT 00 00000136  SERHZERO 00 00000130
 SERIALGETCHAR 02 00FFEB9D SERIALINIT 02 00FFEB6F SERIALIRQ 02 00FFEC3B SERIALOUTPUTTEST 02 00FFECA5
 SERIALPEEKCHAR 02 00FFEBCD SERIALPEEKCHARDIRECT 02 00FFEBE4 SERIALPUTCHAR 02 00FFEC08 SERIALPUTSTRING 02 00FFEC95
 SERIALRCVCOUNT 02 00FFEC28 SERRCVBUF 00 00BFF000 SERRCVXOFF 00 00000140 SERRCVXON 00 00000139
 SERTAILRCV 00 00000133 SERTAILXMIT 00 00000138  SERTZERO 00 00000132 SETKEYBOARDECHO 02 00FFED16
      SGC2 02 00FFEBB6 SGCNOCHARS 02 00FFEBC6    SGCXIT 02 00FFEBC9 SHIFTEDSCANCODES 02 00FFE680
 SHIFTLEFT5 02 00FFE1B3 SHL_NUMWKA 02 00FFFA82 SHOWSPRITES 02 00FFED1C     SIEVE 02 00FFE179
    SIEVE1 02 00FFE191    SIEVE2 02 00FFE18D    SIEVE3 02 00FFE17E    SIEVE4 02 00FFE1A0
     SINI1 02 00FFEB82  SIRQ0001 02 00FFEC4D SIRQNXTBYTE 02 00FFEC3B SIRQRXFULL 02 00FFEC8D
 SKIPDOLLAR 02 00FFF97A SKIP_INIT 02 00FFE0D5    SOTST1 02 00FFECAF   SPC0001 02 00FFEC0A
  SPCD0001 02 00FFEC02 SPCNOCHARS 02 00FFEBDF    SPCXIT 02 00FFEBE2 SPRITE_CTRL 00 FFE10000
 SPRITE_EN 00 000003C0      SPS2 02 00FFEC99    SPSXIT 02 00FFECA3    SRCXIT 02 00FFEC3A
      SREL 00 00000004       ST1 02 00FFE0B4       ST3 02 00FFE091       ST6 02 00FFE03C
       ST7 02 00FFE046       ST8 02 00FFE046       ST9 02 00FFE05A     START 02 00FFE023
    STRPTR 00 00000024 SWI3_EXIT 02 00FFFDF7 SWI3_ROUT 02 00FFFDC8       TAB 00 00000009
 TCB_CURSORCOL 00 00000021 TCB_CURSORROW 00 00000020  TCB_HJCB 00 0000001C TCB_HWAITMBX 00 00000022
 TCB_IOF_NEXT 00 0000002C TCB_IOF_PREV 00 00000030 TCB_MBQ_NEXT 00 00000024 TCB_MBQ_PREV 00 00000028
 TCB_MMU_MAP 00 00000038 TCB_MSGPTR_D1 00 00000014 TCB_MSGPTR_D2 00 00000018 TCB_NXTRDY 00 00000000
 TCB_NXTTCB 00 00000008 TCB_PRIORITY 00 00000010 TCB_PRVRDY 00 00000004 TCB_SPSAVE 00 00000034
 TCB_STATUS 00 0000001E TCB_TIMEOUT 00 0000000C TEXTCLOSE 02 00FFE221  TEXTOPEN 02 00FFE220
  TEXTREAD 02 00FFE222   TEXTREG 00 FFE0DF00   TEXTSCR 00 FFE00000  TEXTSEEK 02 00FFE224
 TEXTWRITE 02 00FFE223 TEXT_COLS 00 00000000 TEXT_CURPOS 00 00000022 TEXT_ROWS 00 00000001
    TFREXG 00 00000009 TIMEOUTLIST 00 0000078C TIMERINIT 02 00FFE438  TIMERIRQ 02 00FFE463
      TR1A 02 00FFFE54      UCP1 02 00FFE2D0 UNSHIFTEDSCANCODES 02 00FFE580 UPDATECURSORPOS 02 00FFE2B0
       VIA 00 FFE60000   VIA_ACR 00 0000000B  VIA_DDRA 00 00000003   VIA_IER 00 0000000E
   VIA_IFR 00 0000000D    VIA_PA 00 00000001 VIA_T3CMPH 00 00000015 VIA_T3CMPL 00 00000014
  VIA_T3LH 00 00000013  VIA_T3LL 00 00000012  W10_0001 02 00FFE8C0 W300_0001 02 00FFE8D4
  WAIT10MS 02 00FFE8B9 WAIT300MS 02 00FFE8CD    XBLANK 02 00FFD0AF      XOFF 00 00000013
       XON 00 00000011
545 SYMBOLS

0 error(s), 1726 warning(s)

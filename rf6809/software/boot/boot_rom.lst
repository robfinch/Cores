0 error(s), 174 warning(s) unlisted in pass 1
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Stratford
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              CR      EQU     $0D             ;ASCII equates
                              LF      EQU     $0A
                              TAB     EQU     $09
                              CTRLC   EQU     $03
                              CTRLH   EQU     $08
                              CTRLI   EQU     $09
                              CTRLJ   EQU     $0A
                              CTRLK   EQU     $0B
                              CTRLM   EQU $0D
                              CTRLS   EQU     $13
                              CTRLT EQU $14
                              CTRLX   EQU     $18
                              XON             EQU     $11
                              XOFF    EQU     $13
 
                              FIRST_CORE      EQU     1
                              MAX_TASKNO      EQU 63
                              DRAM_BASE       EQU $10000000
 
                              ScreenLocation          EQU             $10
                              ColorCodeLocation       EQU             $14
                              ScreenLocation2         EQU             $18
                              BlkcpySrc                       EQU             $1C
                              BlkcpyDst                       EQU             $20
                              Strptr                          EQU             $24
                              PICptr                          EQU             $28
                              ; Forth Area
                              ; 0x30-0x60
 
                              RunningID                       EQU             $800000
 
                              ; Task control blocks, room for 256 tasks
                              TCB_NxtRdy              EQU             $00     ; next task on ready / timeout list
                              TCB_PrvRdy              EQU             $04     ; previous task on ready / timeout list
                              TCB_NxtTCB              EQU             $08
                              TCB_Timeout             EQU             $0C
                              TCB_Priority    EQU             $10
                              TCB_MSGPTR_D1   EQU             $14
                              TCB_MSGPTR_D2   EQU             $18
                              TCB_hJCB                        EQU             $1C
                              TCB_Status              EQU             $1E
                              TCB_CursorRow   EQU             $20
                              TCB_CursorCol   EQU             $21
                              TCB_hWaitMbx    EQU             $22     ; handle of mailbox task is waiting at
                              TCB_mbq_next    EQU             $24     ; mailbox queue next
                              TCB_mbq_prev    EQU             $28     ; mailbox queue previous
                              TCB_iof_next    EQU             $2C
                              TCB_iof_prev    EQU             $30
                              TCB_SPSave              EQU             $34     ; TCB_SPSave area
                              TCB_mmu_map             EQU             $38
 
                              KeybdHead               EQU             $FFFFFC800
                              KeybdTail               EQU             $FFFFFC900
                              KeybdEcho               EQU             $FFFFFCA00
                              KeybdBad                EQU             $FFFFFCB00
                              KeybdAck                EQU             $FFFFFCC00
                              KeybdLocks              EQU             $FFFFFCD00
                              KeybdBuffer             EQU             $FFFFFC000      ; buffer is 16 chars
 
                              COREID  EQU             $FFFFFFFE0
                              MSCOUNT EQU             $FFFFFFFE4
                              LEDS            EQU             $FFFE60000
                              TEXTSCR         EQU             $FFFE00000
                              TEXTREG         EQU             $FFFE0DF00
                              TEXT_COLS       EQU             0
                              TEXT_ROWS       EQU             1
                              TEXT_CURPOS     EQU             34
                              ACIA            EQU             $FFFE30100
                              ACIA_TX         EQU             0
                              ACIA_RX         EQU             0
                              ACIA_STAT       EQU             1
                              ACIA_CMD        EQU             2
                              ACIA_CTRL       EQU             3
 
                              KEYBD           EQU             $FFFE30400
                              KEYBDCLR        EQU             $FFFE30402
                              PIC                     EQU             $FFFE3F000
                              SPRITE_CTRL             EQU             $FFFE10000
                              SPRITE_EN                       EQU             $3C0
 
                              BIOS_SCREENS    EQU     $17000000       ; $17000000 to $171FFFFF
 
                              ; EhBASIC vars:
                              ;
                              NmiBase         EQU             $DC
                              IrqBase         EQU             $DF
 
                              ; The IO focus list is a doubly linked list formed into a ring.
                              ;
                              IOFocusNdx      EQU             $100
                              IOFocusID               EQU             $100
 
                              ; These variables use direct page access
                              CursorRow       EQU             $110
                              CursorCol       EQU             $111
                              CharColor       EQU             $112
                              ScreenColor     EQU             $113
                              CursorFlash     EQU             $114
                              KeyState1       EQU     $120
                              KeyState2       EQU     $121
                              KeyLED          EQU     $122
                              KeybdID         EQU     $124
                              KeybdBlock      EQU     $126
                              SerhZero                EQU     $130
                              SerHeadRcv      EQU     $131
                              SertZero                EQU     $132
                              SerTailRcv      EQU     $133
                              SerHeadXmit     EQU     $136
                              SerTailXmit     EQU     $138
                              SerRcvXon               EQU     $139
                              SerRcvXoff      EQU     $140
                              SerRcvBuf               EQU     $BFF000 ; 4kB serial recieve buffer
 
                              QNdx0           EQU             $780
                              QNdx1           EQU             QNdx0+2
                              QNdx2           EQU             QNdx1+2
                              QNdx3           EQU             QNdx2+2
                              QNdx4           EQU             QNdx3+2
                              FreeTCB         EQU             QNdx4+2
                              TimeoutList     EQU             FreeTCB+2
                              FreeMbx         EQU             RunningTCB + 2
                              nMailbox        EQU             FreeMbx + 2
                              FreeMsg         EQU             nMailbox + 2
                              nMsgBlk         EQU             FreeMsg + 2
 
                              IrqSource       EQU             $79A
 
                              IRQFlag         EQU             $7C6
 
                              CharOutVec      EQU             $800
                              CharInVec       EQU             $804
 
                              ; Register save area for monitor
                              mon_DSAVE       EQU             $900
                              mon_XSAVE       EQU             $902
                              mon_YSAVE       EQU             $904
                              mon_USAVE       EQU             $906
                              mon_SSAVE       EQU             $908
                              mon_PCSAVE      EQU             $90A
                              mon_DPRSAVE     EQU             $90E
                              mon_CCRSAVE     EQU             $90F
 
                              mon_numwka      EQU             $910
                              mon_r1          EQU             $920
                              mon_r2          EQU             $924
 
                              ; The ORG directive must set an address a multiple of 4 in order for the Verilog
                              ; output to work correctly.
 
                                      org             $FFD0AC
 00FFD0AC 012                             nop
 00FFD0AD 012                             nop
 00FFD0AE 012                             nop
                              XBLANK
 00FFD0AF 0C6020                          ldb             #' '
 00FFD0B1 0170029B9                       lbsr    OUTCH
 00FFD0B4 039                             rts
 
                                      org             $FFD0D0
 00FFD0D0 012                             nop
 00FFD0D1 012                             nop
                              CRLF
                              CRLF1:
 00FFD0D2 0C600D                          ldb             #CR
 00FFD0D4 017002996                       lbsr    OUTCH
 00FFD0D7 0C600A                          ldb             #LF
 00FFD0D9 017002991                       lbsr    OUTCH
 00FFD0DC 039                             rts
 
                                      org             $FFD0F0
 00FFD0F0 012                             nop
 00FFD0F1 020FDF                          bra             CRLF1
 
                                      org             $FFD1DC
                              ONEKEY
 00FFD1DC 06E90F000804                    jmp             [CharInVec]
 
                                      org             $FFD2C0
 00FFD2C0 012                             nop
                              LETTER
 00FFD2C1 0170027A9                       lbsr    OUTCH
 00FFD2C4 039                             rts
 
                                      org             $FFD2CC
 00FFD2CC 012                             nop
 00FFD2CD 012                             nop
                              HEX2
 00FFD2CE 0170020D3                       lbsr    DispByteAsHex
 00FFD2D1 039                             rts
                              HEX4
 00FFD2D2 0170020C6                       lbsr    DispWordAsHex
 00FFD2D5 039                             rts
 
                                      org             $FFD300
                              ClearScreenJmp
 00FFD300 016001ED0                       lbra    ClearScreen
                                      org             $FFD308
                              HomeCursorJmp
 00FFD308 016001F39                       lbra    HomeCursor
 
                                      org             $FFE000
 
                              ; Local RAM test routine
                              ; Checkerboard testing.
                              ; There is 70kB of local RAM
                              ; Does not use any RAM including no stack
 
                              ramtest:
 00FFE000 18E000000                       ldy             #0
 00FFE003 086001                          lda             #1
 00FFE005 0150B7FFFE60000                 sta             LEDS
 00FFE00A 0CCAAA555                       ldd             #$AAA555
                              ramtest1:
 00FFE00D 0EDA01                          std             ,y++
 00FFE00F 18CC00000                       cmpy    #$C00000
 00FFE012 025FF9                          blo             ramtest1
                                      ; now readback values and compare
 00FFE014 18E000000                       ldy             #0
                              ramtest3:
 00FFE017 0ECA01                          ldd             ,y++
 00FFE019 183AAA555                       cmpd    #$AAA555
 00FFE01C 02600E                          bne             ramerr
 00FFE01E 18C010000                       cmpy    #$10000
 00FFE021 025FF4                          blo             ramtest3
 00FFE023 086002                          lda             #2
 00FFE025 0150B7FFFE60000                 sta             LEDS
 00FFE02A 06EC04                          jmp             ,u
                              ramerr:
 00FFE02C 086080                          lda             #$80
 00FFE02E 0150B7FFFE60000                 sta             LEDS
 00FFE033 08EE00000                       ldx             #TEXTSCR
 00FFE036 0150F6FFFFFFFE0                 ldb             COREID
 00FFE03B 03A                             abx
 00FFE03C 086046                          lda             #'F'
 00FFE03E 0A7804                          sta             ,x
 00FFE040 013                             sync
 00FFE041 06EC04                          jmp             ,u
 
                                      org             $FFF000
 00FFF000 FFFA87                          FDB Monitor
 00FFF002 FFF022                          FDB DumRts      ;       NEXTCMD
 00FFF004 FFFA48                          FDB INCH
 00FFF006 FFFA54                          FDB INCHE
 00FFF008 FFFA58                          FDB INCHEK
 00FFF00A FFFA6D                          FDB OUTCH
 00FFF00C FFF388                          FDB PDATA
 00FFF00E FFF37B                          FDB PCRLF
 00FFF010 FFF377                          FDB PSTRNG
 00FFF012 FFF022                          FDB DumRts                      ; LRA
 00FFF014 FFF022                          FDB DumRts
 00FFF016 FFF022                          FDB DumRts
 00FFF018 FFF022                          FDB DumRts
 00FFF01A FFF022                          FDB DumRts                      ; VINIZ
 00FFF01C FFF29E                          FDB DisplayChar ;       VOUTCH
 00FFF01E FFF022                          FDB DumRts                      ; ACINIZ
 00FFF020 FFF022                          FDB DumRts                      ; AOUTCH
 
                              DumRts:
 00FFF022 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 
                              start:
 00FFF023 086055                          lda             #$55                    ; see if we can at least set LEDs
 00FFF025 0150B7FFFE60000                 sta             LEDS
 00FFF02A 0CEFFF030                       ldu             #st6                    ; U = return address
 00FFF02D 07EFFE000                       jmp             ramtest         ; JMP dont JSR
                              st6:
 00FFF030 1CE003FFF                       lds             #$3FFF          ; boot up stack area
 00FFF033 0150B6FFFFFFFE0                 lda             COREID
 00FFF038 081001                          cmpa    #FIRST_CORE
                              ;       beq             st8
                              ;       sync                                            ; halt cores other than 2
                              st8:
                              ;       bne             skip_init
                              ;       bsr             romToRam
                              ;       ldd             #st7 & $FFFF
                              ;       tfr             d,x
                              ;       jmp             ,x                              ; jump to the BIOS now in local RAM
                              st7:
 00FFF03A 08D122                          bsr             Delay3s         ; give some time for devices to reset
 00FFF03C 0860AA                          lda             #$AA
 00FFF03E 0150B7FFFE60000                 sta             LEDS
 00FFF043 086001                          lda             #FIRST_CORE
 00FFF045 097100                          sta             IOFocusID       ; core #2 has focus
 00FFF047 0B7800000                       sta             RunningID
 00FFF04A 0860CE                          lda             #$0CE
 00FFF04C 097113                          sta             ScreenColor
 00FFF04E 097112                          sta             CharColor
 00FFF050 08D181                          bsr             ClearScreen
 00FFF052 0CCFFF29E                       ldd             #DisplayChar
 00FFF055 0DD800                          std             CharOutVec
 00FFF057 0CCFFF83B                       ldd             #DBGGetKey
 00FFF05A 0DD804                          std             CharInVec
 00FFF05C 0150F6FFFFFFFE0                 ldb             COREID
 00FFF061 0C1001                          cmpb    #FIRST_CORE
 00FFF063 02700D                          beq             init
 00FFF065 020028                          bra             skip_init
 00FFF067 020090                          bra             multi_sieve
                              st3:
 00FFF069 0860FF                          lda             #$FF
 00FFF06B 0150B7FFFE60000                 sta             LEDS
 00FFF070 020FF7                          bra             st3
 
                                      ; initialize interrupt controller
                                      ; first, zero out all the vectors
                              init:
 00FFF072 0170008E9                       lbsr    InitSerial
 00FFF075 08E000080                       ldx             #128
 00FFF078 086001                          lda             #1                      ; set irq(bit0), clear firq (bit1), disable int (bit 6), clear edge sense(bit 7)
 00FFF07A 0C6001                          ldb             #FIRST_CORE                     ; serving core id
                              st1:
 00FFF07C 06F809E3F000                    clr             PIC,x           ; cause code
 00FFF080 0A7809E3F001                    sta             PIC+1,x
 00FFF084 0E7809E3F002                    stb             PIC+2,x
 00FFF088 030004                          leax    4,x
 00FFF08A 08C000100                       cmpx    #256
 00FFF08D 025FED                          blo             st1
                              ;       lda             #4                              ; make the timer interrupt edge sensitive
                              ;       sta             PIC+4                   ; reg #4 is the edge sensitivity setting
                              ;       sta             PIC                             ; reg #0 is interrupt enable
 
                              skip_init:
 00FFF08F 01C0EF                          andcc   #$EF                    ; unmask irq
 00FFF091 086038                          lda             #56
 00FFF093 0150B7FFFE0DF00                 sta             TEXTREG+TEXT_COLS
 00FFF098 08601D                          lda             #29
 00FFF09A 0150B7FFFE0DF01                 sta             TEXTREG+TEXT_ROWS
 00FFF09F 08D132                          bsr             ClearScreen
 00FFF0A1 08D1A1                          bsr             HomeCursor
 00FFF0A3 086005                          lda             #5
 00FFF0A5 0150B7FFFE60000                 sta             LEDS
 00FFF0AA 0CCFFF0C2                       ldd             #msgStartup
 00FFF0AD 08D2AC                          bsr             DisplayString
 00FFF0AF 08E000000                       ldx             #0
 00FFF0B2 0CC000000                       ldd             #0
 00FFF0B5 0170009BF                       lbsr    ShowSprites
 00FFF0B8 017000705                       lbsr    KeybdInit
 00FFF0BB 0DC124                          ldd             KeybdID
 00FFF0BD 08D2DC                          bsr             DispWordAsHex
 00FFF0BF 07EFFFA82                       jmp             MonitorStart
 
                              msgStartup
 00FFF0C2 072066036038030039020           fcb             "rf6809 12-bit System Starting.",CR,LF,0
 00FFF0C9 03103202D062069074020
 00FFF0D0 05307907307406506D020
 00FFF0D7 05307406107207406906E
 00FFF0DE 06702E00D00A000
 
                              ;------------------------------------------------------------------------------
                              ; The checkpoint register must be cleared within 1 second or a NMI interrupt
                              ; will occur. checkpoint should be called with a JSR so that the global ROM
                              ; routine is called.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              checkpoint:
 00FFF0E3 01507FFFFFFFFE1                 clr             $FFFFFFFE1      ; writing any value will do
 00FFF0E8 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Copy the system ROM to local RAM
                              ; Running the code from local RAM is probably an order of magnitude faster
                              ; then running from the global ROM. It also reduces the network traffic to
                              ; run from local RAM.
                              ;
                              ; Modifies:
                              ;               d,x,y
                              ;------------------------------------------------------------------------------
 
                              romToRam:
 00FFF0E9 08EFFC000                       ldx             #$FFC000
 00FFF0EC 18E00C000                       ldy             #$00C000
                              romToRam1:
 00FFF0EF 0EC801                          ldd             ,x++
 00FFF0F1 0EDA01                          std             ,y++
 00FFF0F3 08C000000                       cmpx    #0
 00FFF0F6 026FF7                          bne             romToRam1
 00FFF0F8 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Multi-core sieve program.
                              ;------------------------------------------------------------------------------
 
                              ; First fill screen chars with 'P' indicating prime positions
                              ; Each core is responsible for the Nth position where N is the
                              ; core number minus two.
                              ;
                              multi_sieve:
 00FFF0F9 086050                          lda             #'P'                                    ; indicate prime
 00FFF0FB 0150F6FFFFFFFE0                 ldb             COREID                          ; find out which core we are
 00FFF100 0C0001                          subb    #FIRST_CORE
 00FFF102 08E000000                       ldx             #0                                              ; start at first char of screen
 00FFF105 03A                             abx
                              multi_sieve3:
 00FFF106 0A7809E00000                    sta             TEXTSCR,x                       ; store 'P'
 00FFF10A 030008                          leax    8,x                                             ; advance to next position
 00FFF10C 08C000FFF                       cmpx    #4095
 00FFF10F 025FF5                          blo             multi_sieve3
 00FFF111 0BDFFF0E3                       jsr             checkpoint
*** warning 1: Long branch within short branch range could be optimized
 00FFF114 0CB002                          addb    #2                                              ; start sieve at 2 (core id)
 00FFF116 08604E                          lda             #'N'                                    ; flag position value of 'N' for non-prime
                              multi_sieve2:
 00FFF118 08E000000                       ldx             #0
 00FFF11B 03A                             abx                                                                     ; skip the first position - might be prime
                              multi_sieve1:
 00FFF11C 03A                             abx                                                                     ; increment
 00FFF11D 0A7809E00000                    sta             TEXTSCR,x
 00FFF121 08C000FFF                       cmpx    #4095
 00FFF124 025FF6                          blo             multi_sieve1
 00FFF126 0BDFFF0E3                       jsr             checkpoint
*** warning 1: Long branch within short branch range could be optimized
 00FFF129 0CB008                          addb    #8                                              ; number of cores working on it
 00FFF12B 0C1FF0                          cmpb    #4080
 00FFF12D 025FE9                          blo             multi_sieve2
                              multi_sieve4:                                   ; hang machine
 00FFF12F 013                             sync
 00FFF130 016000954                       lbra    Monitor
 
                              sieve:
 00FFF133 086050                          lda             #'P'                                    ; indicate prime
 00FFF135 08E000000                       ldx             #0                                              ; start at first char of screen
                              sieve3:
 00FFF138 0A7809E00000                    sta             TEXTSCR,x                       ; store 'P'
 00FFF13C 030001                          inx                                                                     ; advance to next position
 00FFF13E 08C000FFF                       cmpx    #4095
 00FFF141 025FF5                          blo             sieve3
 00FFF143 0C6002                          ldb             #2                                              ; start sieve at 2
 00FFF145 08604E                          lda             #'N'                                    ; flag position value of 'N' for non-prime
                              sieve2:
 00FFF147 08E000000                       ldx             #0
 00FFF14A 03A                             abx                                                                     ; skip the first position - might be prime
                              sieve1:
 00FFF14B 03A                             abx                                                                     ; increment
 00FFF14C 0A7809E00000                    sta             TEXTSCR,x
 00FFF150 08C000FFF                       cmpx    #4095
 00FFF153 025FC7                          blo             multi_sieve1
 00FFF155 05C                             incb                                                            ; number of cores working on it
 00FFF156 0C1FF0                          cmpb    #4080
 00FFF158 025FED                          blo             sieve2
                              sieve4:                                                         ; hang machine
 00FFF15A 013                             sync
 00FFF15B 016000924                       lbra    MonitorStart
 
                              ;------------------------------------------------------------------------------
                              ; Three second delay for user convenience and to allow some devices time to
                              ; reset.
                              ;------------------------------------------------------------------------------
 
                              Delay3s:
 00FFF15E 0CC895440                       ldd             #9000000
                              dly3s1:
 00FFF161 0C10FF                          cmpb    #$FF
 00FFF163 026000                          bne             dly3s2
                              dly3s2:
 00FFF165 0150B7FFFE60000                 sta             LEDS
 00FFF16A 083000001                       subd    #1
 00FFF16D 026FF2                          bne             dly3s1
 00FFF16F 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ShiftLeft5:
 00FFF170 058                             aslb
 00FFF171 049                             rola
 00FFF172 058                             aslb
 00FFF173 049                             rola
 00FFF174 058                             aslb
 00FFF175 049                             rola
 00FFF176 058                             aslb
 00FFF177 049                             rola
 00FFF178 058                             aslb
 00FFF179 049                             rola
 00FFF17A 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ;
                              CopyVirtualScreenToScreen:
 00FFF17B 034076                          pshs    d,x,y,u
 00FFF17D 08D0B4                          bsr             GetScreenLocation
 00FFF17F 01F001                          tfr             d,x
 00FFF181 18EE00000                       ldy             #TEXTSCR
 00FFF184 0CE00032C                       ldu             #56*29/2
                              cv2s1:
 00FFF187 0EC801                          ldd             ,x++
 00FFF189 0EDA01                          std             ,y++
 00FFF18B 0335FF                          leau    -1,u
 00FFF18D 283000000                       cmpu    #0
 00FFF190 026FF5                          bne             cv2s1
                                      ; reset the cursor position in the text controller
 00FFF192 0D6110                          ldb             CursorRow
 00FFF194 086038                          lda             #56
 00FFF196 03D                             mul
 00FFF197 01F001                          tfr             d,x
 00FFF199 0D6111                          ldb             CursorCol
 00FFF19B 03A                             abx
 00FFF19C 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
 00FFF1A1 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              ;
                              CopyScreenToVirtualScreen:
 00FFF1A3 034076                          pshs    d,x,y,u
 00FFF1A5 08D08C                          bsr             GetScreenLocation
 00FFF1A7 01F002                          tfr             d,y
 00FFF1A9 08EE00000                       ldx             #TEXTSCR
 00FFF1AC 0CE00032C                       ldu             #56*29/2
                              cs2v1:
 00FFF1AF 0EC801                          ldd             ,x++
 00FFF1B1 0EDA01                          std             ,y++
 00FFF1B3 0335FF                          leau    -1,u
 00FFF1B5 283000000                       cmpu    #0
 00FFF1B8 026FF5                          bne             cs2v1
 00FFF1BA 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
 00FFF1BC 054045058054053043052           fcb             "TEXTSCR "
 00FFF1C3 020
 00FFF1C4 FFF1CE                          fcw             TextOpen
 00FFF1C6 FFF1CF                          fcw             TextClose
 00FFF1C8 FFF1D0                          fcw             TextRead
 00FFF1CA FFF1D1                          fcw             TextWrite
 00FFF1CC FFF1D2                          fcw             TextSeek
 
                              TextOpen:
 00FFF1CE 039                             rts
                              TextClose:
 00FFF1CF 039                             rts
                              TextRead:
 00FFF1D0 039                             rts
                              TextWrite:
 00FFF1D1 039                             rts
                              TextSeek:
 00FFF1D2 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Clear the screen and the screen color memory
                              ; We clear the screen to give a visual indication that the system
                              ; is working at all.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              ClearScreen:
 00FFF1D3 034076                          pshs    d,x,y,u
 00FFF1D5 08E000658                       ldx             #56*29
 00FFF1D8 01F013                          tfr             x,u
 00FFF1DA 08D057                          bsr             GetScreenLocation
 00FFF1DC 01F002                          tfr             d,y
 00FFF1DE 0C6020                          ldb             #' '                            ; space char
                              cs1:
 00FFF1E0 0E7A00                          stb             ,y+                                     ; set text to space
 00FFF1E2 0301FF                          leax    -1,x                            ; decrement x
 00FFF1E4 026FFA                          bne             cs1
 00FFF1E6 0150F6FFFFFFFE0                 ldb             COREID                  ; update colors only if we have focus
 00FFF1EB 0D1100                          cmpb    IOFocusID
 00FFF1ED 02000D                          bra             cs3
 00FFF1EF 18EE02000                       ldy             #TEXTSCR+$2000
                              ;       lda             CharColor
 00FFF1F2 0860CE                          lda             #$0CE
 00FFF1F4 01F031                          tfr             u,x                                     ; get back count
                              cs2:
 00FFF1F6 0A7A00                          sta             ,y+
 00FFF1F8 0301FF                          dex                                                             ; decrement x
 00FFF1FA 026FFA                          bne             cs2
                              cs3:
 00FFF1FC 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ; Scroll text on the screen upwards
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              ScrollUp:
 00FFF1FE 034076                          pshs    d,x,y,u
 00FFF200 18E00032B                       ldy             #(56*29-1)/2    ; y = num chars/2 to move
 00FFF203 08D02E                          bsr             GetScreenLocation
 00FFF205 01F001                          tfr             d,x
 00FFF207 01F003                          tfr             d,u
 00FFF209 030038                          leax    56,x                    ; x = index to source row
                              scrup1:
 00FFF20B 0EC801                          ldd             ,x++                    ; move 2 characters
 00FFF20D 0EDC01                          std             ,u++
 00FFF20F 0313FF                          dey
 00FFF211 026FF8                          bne             scrup1
 00FFF213 08601D                          lda             #29
 00FFF215 08D002                          bsr             BlankLine
 00FFF217 0350F6                          puls    d,x,y,u,pc
 
                              ;------------------------------------------------------------------------------
                              ; Blank out a line on the display
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;       acca = line number to blank
                              ;------------------------------------------------------------------------------
 
                              BlankLine:
 00FFF219 034016                          pshs    d,x
 00FFF21B 034002                          pshs    a
 00FFF21D 08D014                          bsr             GetScreenLocation
 00FFF21F 01F001                          tfr             d,x
 00FFF221 035002                          puls    a
 00FFF223 0C6038                          ldb             #56             ; b = # chars to blank out from video controller
 00FFF225 03D                             mul                                     ; d = screen index (row# * #cols)
 00FFF226 03080B                          leax    d,x
 00FFF228 086020                          lda             #' '
 00FFF22A 0C6038                          ldb             #56             ; b = # chars to blank out from video controller
                              blnkln1:
 00FFF22C 0A7800                          sta             ,x+
 00FFF22E 05A                             decb
 00FFF22F 026FFB                          bne             blnkln1
 00FFF231 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Get the location of the screen memory. The location
                              ; depends on whether or not the task has the output focus.
                              ;
                              ; Modifies:
                              ;               d
                              ; Retuns:
                              ;               d = screen location
                              ;------------------------------------------------------------------------------
 
                              GetScreenLocation:
 00FFF233 0150B6FFFFFFFE0                 lda             COREID                  ; which core are we?
 00FFF238 091100                          cmpa    IOFocusID               ; do we have the IO focus
 00FFF23A 026004                          bne             gsl1                            ; no, go pick virtual screen address
 00FFF23C 0CCE00000                       ldd             #TEXTSCR                ; yes, we update the real screen
 00FFF23F 039                             rts
                              gsl1:
 00FFF240 0CC007800                       ldd             #$7800
 00FFF243 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; HomeCursor
                              ; Set the cursor location to the top left of the screen.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              HomeCursor:
 00FFF244 034016                          pshs    d,x
 00FFF246 00F110                          clr             CursorRow
 00FFF248 00F111                          clr             CursorCol
 00FFF24A 0150F6FFFFFFFE0                 ldb             COREID
 00FFF24F 0D1100                          cmpb    IOFocusID
 00FFF251 026006                          bne             hc1
 00FFF253 04F                             clra
 00FFF254 0150B7FFFE0DF22                 sta             TEXTREG+TEXT_CURPOS
                              hc1:
 00FFF259 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Update the cursor position in the text controller based on the
                              ;  CursorRow,CursorCol.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
                              ;
                              UpdateCursorPos:
 00FFF25B 034016                          pshs    d,x
 00FFF25D 0150F6FFFFFFFE0                 ldb             COREID                          ; update cursor position in text controller
 00FFF262 0D1100                          cmpb    IOFocusID                       ; only for the task with the output focus
 00FFF264 026014                          bne             ucp1                                    
 00FFF266 096110                          lda             CursorRow
 00FFF268 08403F                          anda    #$3F                                    ; limit of 63 rows
 00FFF26A 0150F6FFFE0DF00                 ldb             TEXTREG+TEXT_COLS
 00FFF26F 03D                             mul
 00FFF270 01F001                          tfr             d,x
 00FFF272 0D6111                          ldb             CursorCol
 00FFF274 03A                             abx
 00FFF275 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
                              ucp1:
 00FFF27A 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Calculate screen memory location from CursorRow,CursorCol.
                              ; Also refreshes the cursor location.
                              ;
                              ; Modifies:
                              ;               d
                              ; Returns:
                              ;       d = screen location
                              ;------------------------------------------------------------------------------
                              ;
                              CalcScreenLoc:
 00FFF27C 034010                          pshs    x
 00FFF27E 096110                          lda             CursorRow
 00FFF280 0C6038                          ldb             #56
 00FFF282 03D                             mul
 00FFF283 01F001                          tfr             d,x
 00FFF285 0D6111                          ldb             CursorCol
 00FFF287 03A                             abx
 00FFF288 0150F6FFFFFFFE0                 ldb             COREID                          ; update cursor position in text controller
 00FFF28D 0D1100                          cmpb    IOFocusID                       ; only for the task with the output focus
 00FFF28F 026005                          bne             csl1                                    
 00FFF291 0150BFFFFE0DF22                 stx             TEXTREG+TEXT_CURPOS
                              csl1:
 00FFF296 08DF9B                          bsr             GetScreenLocation
 00FFF298 03080B                          leax    d,x
 00FFF29A 01F010                          tfr             x,d
 00FFF29C 035090                          puls    x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Display a character on the screen.
                              ; If the task doesn't have the I/O focus then the character is written to
                              ; the virtual screen.
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;       accb = char to display
                              ;------------------------------------------------------------------------------
                              ;
                              DisplayChar:
                              ;       lbsr    SerialPutChar
 00FFF29E 034016                          pshs    d,x
 00FFF2A0 0C100D                          cmpb    #CR                                     ; carriage return ?
 00FFF2A2 026006                          bne             dccr
 00FFF2A4 00F111                          clr             CursorCol               ; just set cursor column to zero on a CR
 00FFF2A6 08DFB3                          bsr             UpdateCursorPos
                              dcx14:
 00FFF2A8 035096                          puls    d,x,pc
                              dccr:
 00FFF2AA 0C1091                          cmpb    #$91                            ; cursor right ?
 00FFF2AC 02600D                          bne             dcx6
 00FFF2AE 096111                          lda             CursorCol
 00FFF2B0 081038                          cmpa    #56
 00FFF2B2 024003                          bhs             dcx7
 00FFF2B4 04C                             inca
 00FFF2B5 097111                          sta             CursorCol
                              dcx7:
 00FFF2B7 08DFA2                          bsr             UpdateCursorPos
 00FFF2B9 035096                          puls    d,x,pc
                              dcx6:
 00FFF2BB 0C1090                          cmpb    #$90                            ; cursor up ?
 00FFF2BD 026009                          bne             dcx8            
 00FFF2BF 096110                          lda             CursorRow
 00FFF2C1 027FF4                          beq             dcx7
 00FFF2C3 04A                             deca
 00FFF2C4 097110                          sta             CursorRow
 00FFF2C6 020FEF                          bra             dcx7
                              dcx8:
 00FFF2C8 0C1093                          cmpb    #$93                            ; cursor left ?
 00FFF2CA 026009                          bne             dcx9
 00FFF2CC 096111                          lda             CursorCol
 00FFF2CE 027FE7                          beq             dcx7
 00FFF2D0 04A                             deca
 00FFF2D1 097111                          sta             CursorCol
 00FFF2D3 020FE2                          bra             dcx7
                              dcx9:
 00FFF2D5 0C1092                          cmpb    #$92                            ; cursor down ?
 00FFF2D7 02600B                          bne             dcx10
 00FFF2D9 096110                          lda             CursorRow
 00FFF2DB 08101D                          cmpa    #29
 00FFF2DD 027FD8                          beq             dcx7
 00FFF2DF 04C                             inca
 00FFF2E0 097110                          sta             CursorRow
 00FFF2E2 020FD3                          bra             dcx7
                              dcx10:
 00FFF2E4 0C1094                          cmpb    #$94                            ; cursor home ?
 00FFF2E6 02600C                          bne             dcx11
 00FFF2E8 096111                          lda             CursorCol
 00FFF2EA 027004                          beq             dcx12
 00FFF2EC 00F111                          clr             CursorCol
 00FFF2EE 020FC7                          bra             dcx7
                              dcx12:
 00FFF2F0 00F110                          clr             CursorRow
 00FFF2F2 020FC3                          bra             dcx7
                              dcx11:
 00FFF2F4 0C1099                          cmpb    #$99                            ; delete ?
 00FFF2F6 026008                          bne             dcx13
 00FFF2F8 08DF82                          bsr             CalcScreenLoc
 00FFF2FA 01F001                          tfr             d,x
 00FFF2FC 096111                          lda             CursorCol               ; acc = cursor column
 00FFF2FE 020011                          bra             dcx5
                              dcx13
 00FFF300 0C1008                          cmpb    #CTRLH                  ; backspace ?
 00FFF302 02601E                          bne             dcx3
 00FFF304 096111                          lda             CursorCol
 00FFF306 02702E                          beq             dcx4
 00FFF308 04A                             deca
 00FFF309 097111                          sta             CursorCol
 00FFF30B 08DF6F                          bsr             CalcScreenLoc
 00FFF30D 01F001                          tfr             d,x
 00FFF30F 096111                          lda             CursorCol
                              dcx5:
 00FFF311 0E6001                          ldb             1,x
 00FFF313 0E7801                          stb             ,x++
 00FFF315 04C                             inca
 00FFF316 081038                          cmpa    #56
 00FFF318 025FF7                          blo             dcx5
 00FFF31A 0C6020                          ldb             #' '
 00FFF31C 0301FF                          dex
 00FFF31E 0E7804                          stb             ,x
 00FFF320 035096                          puls    d,x,pc
                              dcx3:
 00FFF322 0C100A                          cmpb    #LF                             ; linefeed ?
 00FFF324 02700E                          beq             dclf
 00FFF326 034004                          pshs    b
 00FFF328 08DF52                          bsr     CalcScreenLoc
 00FFF32A 01F001                          tfr             d,x
 00FFF32C 035004                          puls    b
 00FFF32E 0E7804                          stb             ,x
                                      ; ToDo character color
                              ;       lda             CharColor
                              ;       sta             $2000,x
 00FFF330 08D006                          bsr             IncCursorPos
 00FFF332 035096                          puls    d,x,pc
                              dclf:
 00FFF334 08D011                          bsr             IncCursorRow
                              dcx4:
 00FFF336 035096                          puls    d,x,pc
 
                              ;------------------------------------------------------------------------------
                              ; Increment the cursor position, scroll the screen if needed.
                              ;
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              IncCursorPos:
 00FFF338 034016                          pshs    d,x
 00FFF33A 096111                          lda             CursorCol
 00FFF33C 04C                             inca
 00FFF33D 097111                          sta             CursorCol
 00FFF33F 081038                          cmpa    #56
 00FFF341 025014                          blo             icc1
 00FFF343 00F111                          clr             CursorCol               ; column = 0
 00FFF345 020002                          bra             icr1
                              IncCursorRow:
 00FFF347 034016                          pshs    d,x
                              icr1:
 00FFF349 096110                          lda             CursorRow
 00FFF34B 04C                             inca
 00FFF34C 097110                          sta             CursorRow
 00FFF34E 08101D                          cmpa    #29
 00FFF350 025005                          blo             icc1
 00FFF352 04A                             deca                                                    ; backup the cursor row, we are scrolling up
 00FFF353 097110                          sta             CursorRow
 00FFF355 08DEA7                          bsr             ScrollUp
                              icc1:
 00FFF357 08DF02                          bsr             UpdateCursorPos
                              icc2:
 00FFF359 035096                          puls    d,x,pc  
 
                              ;------------------------------------------------------------------------------
                              ; Display a string on the screen.
                              ;
                              ; Modifies:
                              ;               none
                              ; Parameters:
                              ;               d = pointer to string
                              ;------------------------------------------------------------------------------
                              ;
                              DisplayString:
 00FFF35B 034016                          pshs    d,x
 00FFF35D 01F001                          tfr             d,x
                              dspj1B:
 00FFF35F 0E6800                          ldb             ,x+                             ; move string char into acc
 00FFF361 027004                          beq             dsretB          ; is it end of string ?
 00FFF363 08D708                          bsr             OUTCH                   ; display character
 00FFF365 020FF8                          bra             dspj1B
                              dsretB:
 00FFF367 035096                          puls    d,x,pc
 
                              DisplayStringCRLF:
 00FFF369 034006                          pshs    d
 00FFF36B 08DFEE                          bsr             DisplayString
 00FFF36D 0C600D                          ldb             #CR
 00FFF36F 08D6FC                          bsr             OUTCH
 00FFF371 0C600A                          ldb             #LF
 00FFF373 08D6F8                          bsr             OUTCH
 00FFF375 035086                          puls    d,pc
                                      
                              ;
                              ; PRINT CR, LF, STRING
                              ;
                              PSTRNG
 00FFF377 08D002                          BSR             PCRLF
 00FFF379 02000D                          BRA             PDATA
                              PCRLF
 00FFF37B 034010                          PSHS    X
 00FFF37D 08EFFF38F                       LDX             #CRLFST
 00FFF380 08D006                          BSR             PDATA
 00FFF382 035010                          PULS    X
 00FFF384 039                             RTS
 
                              PRINT
 00FFF385 0BDFFFA6D                       JSR             OUTCH
                              PDATA
 00FFF388 0E6800                          LDB             ,X+
 00FFF38A 0C1004                          CMPB    #$04
 00FFF38C 026FF7                          BNE             PRINT
 00FFF38E 039                             RTS
 
                              CRLFST
 00FFF38F 00D00A004                       fcb     CR,LF,4
 
                              DispDWordAsHex:
 00FFF392 08D007                          bsr             DispWordAsHex
 00FFF394 01E001                          exg             d,x
 00FFF396 08D003                          bsr             DispWordAsHex
 00FFF398 01E001                          exg             d,x
 00FFF39A 039                             rts
 
                              DispWordAsHex:
 00FFF39B 01E089                          exg             a,b
 00FFF39D 08D005                          bsr             DispByteAsHex
 00FFF39F 01E089                          exg             a,b
 00FFF3A1 08D001                          bsr             DispByteAsHex
 00FFF3A3 039                             rts
 
                              DispByteAsHex:
 00FFF3A4 034004                    pshs  b
 00FFF3A6 054                             lsrb
 00FFF3A7 054                             lsrb
 00FFF3A8 054                             lsrb
 00FFF3A9 054                             lsrb
 00FFF3AA 054                             lsrb
 00FFF3AB 054                             lsrb
 00FFF3AC 054                             lsrb
 00FFF3AD 054                             lsrb
 00FFF3AE 08D00C                          bsr             DispNyb
 00FFF3B0 035004                          puls    b
 00FFF3B2 034004                          pshs    b
 00FFF3B4 054                             lsrb
 00FFF3B5 054                             lsrb
 00FFF3B6 054                             lsrb
 00FFF3B7 054                             lsrb
 00FFF3B8 08D002                          bsr             DispNyb
 00FFF3BA 035004                          puls    b
 
                              DispNyb
 00FFF3BC 034004                          pshs    b
 00FFF3BE 0C400F                          andb    #$0F
 00FFF3C0 0C100A                          cmpb    #10
 00FFF3C2 025006                          blo             DispNyb1
 00FFF3C4 0CB037                          addb    #'A'-10
 00FFF3C6 08D6A5                          bsr             OUTCH
 00FFF3C8 035084                          puls    b,pc
                              DispNyb1
 00FFF3CA 0CB030                          addb    #'0'
 00FFF3CC 08D69F                          bsr             OUTCH
 00FFF3CE 035084                          puls    b,pc
 
                              ;==============================================================================
                              ; Keyboard I/O
                              ;==============================================================================
 
                                      ;--------------------------------------------------------------------------
                                      ; PS2 scan codes to ascii conversion tables.
                                      ;--------------------------------------------------------------------------
                                      ;
                                      org     (* + 127) & $FFFFFF80
 
                              unshiftedScanCodes:
 00FFF400 02E0A902E0A50A30A10A2           fcb     $2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
 00FFF407 0AC
 00FFF408 02E0AA0A80A60A4009060           fcb     $2e,$aa,$a8,$a6,$a4,$09,$60,$2e
 00FFF40F 02E
 00FFF410 02E02E02E02E02E071031           fcb     $2e,$2e,$2e,$2e,$2e,$71,$31,$2e
 00FFF417 02E
 00FFF418 02E02E07A073061077032           fcb     $2e,$2e,$7a,$73,$61,$77,$32,$2e
 00FFF41F 02E
 00FFF420 02E063078064065034033           fcb     $2e,$63,$78,$64,$65,$34,$33,$2e
 00FFF427 02E
 00FFF428 02E020076066074072035           fcb     $2e,$20,$76,$66,$74,$72,$35,$2e
 00FFF42F 02E
 00FFF430 02E06E062068067079036           fcb     $2e,$6e,$62,$68,$67,$79,$36,$2e
 00FFF437 02E
 00FFF438 02E02E06D06A075037038           fcb     $2e,$2e,$6d,$6a,$75,$37,$38,$2e
 00FFF43F 02E
 00FFF440 02E02C06B06906F030039           fcb     $2e,$2c,$6b,$69,$6f,$30,$39,$2e
 00FFF447 02E
 00FFF448 02E02E02F06C03B07002D           fcb     $2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
 00FFF44F 02E
 00FFF450 02E02E02702E05B03D02E           fcb     $2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
 00FFF457 02E
 00FFF458 0AD02E00D05D02E05C02E           fcb     $ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
 00FFF45F 02E
 00FFF460 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFF467 02E
 00FFF468 02E09502E09309402E02E           fcb     $2e,$95,$2e,$93,$94,$2e,$2e,$2e
 00FFF46F 02E
 00FFF470 09807F09202E09109001B           fcb     $98,$7f,$92,$2e,$91,$90,$1b,$af
 00FFF477 0AF
 00FFF478 0AB02E09702E02E0960AE           fcb     $ab,$2e,$97,$2e,$2e,$96,$ae,$2e
 00FFF47F 02E
 
 00FFF480 02E02E02E0A702E02E02E           fcb     $2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
 00FFF487 02E
 00FFF488 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF48F 02E
 00FFF490 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF497 02E
 00FFF498 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF49F 02E
 00FFF4A0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4A7 02E
 00FFF4A8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4AF 02E
 00FFF4B0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4B7 02E
 00FFF4B8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4BF 02E
 00FFF4C0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4C7 02E
 00FFF4C8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4CF 02E
 00FFF4D0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4D7 02E
 00FFF4D8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4DF 02E
 00FFF4E0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4E7 02E
 00FFF4E8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4EF 02E
 00FFF4F0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF4F7 02E
 00FFF4F8 02E02E0FA02E02E02E02E           fcb     $2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
 00FFF4FF 02E
 
                              shiftedScanCodes:
 00FFF500 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF507 02E
 00FFF508 02E02E02E02E02E00907E           fcb     $2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
 00FFF50F 02E
 00FFF510 02E02E02E02E02E051021           fcb     $2e,$2e,$2e,$2e,$2e,$51,$21,$2e
 00FFF517 02E
 00FFF518 02E02E05A053041057040           fcb     $2e,$2e,$5a,$53,$41,$57,$40,$2e
 00FFF51F 02E
 00FFF520 02E043058044045024023           fcb     $2e,$43,$58,$44,$45,$24,$23,$2e
 00FFF527 02E
 00FFF528 02E020056046054052025           fcb     $2e,$20,$56,$46,$54,$52,$25,$2e
 00FFF52F 02E
 00FFF530 02E04E04204804705905E           fcb     $2e,$4e,$42,$48,$47,$59,$5e,$2e
 00FFF537 02E
 00FFF538 02E02E04D04A05502602A           fcb     $2e,$2e,$4d,$4a,$55,$26,$2a,$2e
 00FFF53F 02E
 00FFF540 02E03C04B04904F029028           fcb     $2e,$3c,$4b,$49,$4f,$29,$28,$2e
 00FFF547 02E
 00FFF548 02E03E03F04C03A05005F           fcb     $2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
 00FFF54F 02E
 00FFF550 02E02E02202E07B02B02E           fcb     $2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
 00FFF557 02E
 00FFF558 02E02E00D07D02E07C02E           fcb     $2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
 00FFF55F 02E
 00FFF560 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFF567 02E
 00FFF568 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF56F 02E
 00FFF570 02E07F02E02E02E02E01B           fcb     $2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
 00FFF577 02E
 00FFF578 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF57F 02E
 
 00FFF580 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF587 02E
 00FFF588 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF58F 02E
 00FFF590 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF597 02E
 00FFF598 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF59F 02E
 00FFF5A0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5A7 02E
 00FFF5A8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5AF 02E
 00FFF5B0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5B7 02E
 00FFF5B8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5BF 02E
 00FFF5C0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5C7 02E
 00FFF5C8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5CF 02E
 00FFF5D0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5D7 02E
 00FFF5D8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5DF 02E
 00FFF5E0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5E7 02E
 00FFF5E8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5EF 02E
 00FFF5F0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5F7 02E
 00FFF5F8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF5FF 02E
 
                              ; control
                              keybdControlCodes:
 00FFF600 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF607 02E
 00FFF608 02E02E02E02E02E00907E           fcb     $2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
 00FFF60F 02E
 00FFF610 02E02E02E02E02E011021           fcb     $2e,$2e,$2e,$2e,$2e,$11,$21,$2e
 00FFF617 02E
 00FFF618 02E02E01A013001017040           fcb     $2e,$2e,$1a,$13,$01,$17,$40,$2e
 00FFF61F 02E
 00FFF620 02E003018004005024023           fcb     $2e,$03,$18,$04,$05,$24,$23,$2e
 00FFF627 02E
 00FFF628 02E020016006014012025           fcb     $2e,$20,$16,$06,$14,$12,$25,$2e
 00FFF62F 02E
 00FFF630 02E00E00200800701905E           fcb     $2e,$0e,$02,$08,$07,$19,$5e,$2e
 00FFF637 02E
 00FFF638 02E02E00D00A01502602A           fcb     $2e,$2e,$0d,$0a,$15,$26,$2a,$2e
 00FFF63F 02E
 00FFF640 02E03C00B00900F029028           fcb     $2e,$3c,$0b,$09,$0f,$29,$28,$2e
 00FFF647 02E
 00FFF648 02E03E03F00C03A01005F           fcb     $2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
 00FFF64F 02E
 00FFF650 02E02E02202E07B02B02E           fcb     $2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
 00FFF657 02E
 00FFF658 02E02E00D07D02E07C02E           fcb     $2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
 00FFF65F 02E
 00FFF660 02E02E02E02E02E02E008           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
 00FFF667 02E
 00FFF668 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF66F 02E
 00FFF670 02E07F02E02E02E02E01B           fcb     $2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
 00FFF677 02E
 00FFF678 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF67F 02E
 
                              keybdExtendedCodes:
 00FFF680 02E02E02E02E0A30A10A2           fcb     $2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
 00FFF687 02E
 00FFF688 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF68F 02E
 00FFF690 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF697 02E
 00FFF698 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF69F 02E
 00FFF6A0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6A7 02E
 00FFF6A8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6AF 02E
 00FFF6B0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6B7 02E
 00FFF6B8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6BF 02E
 00FFF6C0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6C7 02E
 00FFF6C8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6CF 02E
 00FFF6D0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6D7 02E
 00FFF6D8 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6DF 02E
 00FFF6E0 02E02E02E02E02E02E02E           fcb     $2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
 00FFF6E7 02E
 00FFF6E8 02E09502E09309402E02E           fcb     $2e,$95,$2e,$93,$94,$2e,$2e,$2e
 00FFF6EF 02E
 00FFF6F0 09809909202E09109002E           fcb     $98,$99,$92,$2e,$91,$90,$2e,$2e
 00FFF6F7 02E
 00FFF6F8 02E02E09702E02E09602E           fcb     $2e,$2e,$97,$2e,$2e,$96,$2e,$2e
 00FFF6FF 02E
 
                              ; ============================================================================
                              ;        __
                              ;   \\__/ o\    (C) 2013-2022  Robert Finch, Waterloo
                              ;    \  __ /    All rights reserved.
                              ;     \/_//     robfinch<remove>@opencores.org
                              ;       ||
                              ;  
                              ;
                              ;       Keyboard driver routines to interface to a PS2 style keyboard
                              ; Converts the scancode to ascii
                              ;
                              ; This source file is free software: you can redistribute it and/or modify 
                              ; it under the terms of the GNU Lesser General Public License as published 
                              ; by the Free Software Foundation, either version 3 of the License, or     
                              ; (at your option) any later version.                                      
                              ;                                                                          
                              ; This source file is distributed in the hope that it will be useful,      
                              ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                              ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                              ; GNU General Public License for more details.                             
                              ;                                                                          
                              ; You should have received a copy of the GNU General Public License        
                              ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                              ;                                                                          
                              ; ============================================================================
                              ;
                              SC_F12  EQU     $07
                              SC_C    EQU             $21
                              SC_T    EQU         $2C
                              SC_Z            EQU     $1A
                              SC_DEL  EQU                     $71     ; extend
                              SC_KEYUP        EQU             $F0     ; should be $f0
                              SC_EXTEND EQU     $E0
                              SC_CTRL EQU                     $14
                              SC_RSHIFT               EQU     $59
                              SC_NUMLOCK      EQU     $77
                              SC_SCROLLLOCK           EQU     $7E
                              SC_CAPSLOCK             EQU             $58
                              SC_ALT  EQU                     $11
 
                              ;#define SC_LSHIFT      EQU             $12
                              ;SC_DEL         EQU             $71             ; extend
                              ;SC_LCTRL       EQU             $58
 
                              SC_TAB  EQU     $0D
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Recieve a byte from the keyboard, used after a command is sent to the
                              ; keyboard in order to wait for a response.
                              ;
                              ; Parameters: none
                              ; Returns: accd = recieved byte ($00 to $FF), -1 on timeout
                              ; Modifies: acc
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdRecvByte:
 00FFF700 034010                          pshs    x
 00FFF702 08E000064                       ldx             #100                                            ; wait up to 1s
                              krb3:
 00FFF705 08D05A                          bsr             KeybdGetStatus  ; wait for response from keyboard
 00FFF707 05D                             tstb
 00FFF708 02B00B                          bmi             krb4                                            ; is input buffer full ? yes, branch
 00FFF70A 08D02D                          bsr             Wait10ms                                ; wait a bit
 00FFF70C 0301FF                          leax    -1,x
 00FFF70E 026FF5                          bne             krb3                                            ; go back and try again
 00FFF710 0CCFFFFFF                       ldd             #-1                                                     ; return -1
 00FFF713 035090                          puls    x,pc
                              krb4:
 00FFF715 08D066                          bsr             KeybdGetScancode
 00FFF717 035090                          puls    x,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Send a byte to the keyboard.
                              ;
                              ; Parameters: accb byte to send
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 0 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdSendByte:
 00FFF719 0150F7FFFE30400                 stb             KEYBD
 00FFF71E 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait until the keyboard transmit is complete
                              ;
                              ; Parameters: none
                              ; Returns: r1 = 0 if successful, r1 = -1 timeout
                              ; Modifies: r1
                              ; Stack Space: 3 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdWaitTx:
 00FFF71F 034010                          pshs    x
 00FFF721 08E000064                       ldx             #100                            ; wait a max of 1s
                              kwt1:
 00FFF724 08D03B                          bsr             KeybdGetStatus
 00FFF726 0C4040                          andb    #$40                            ; check for transmit complete bit; branch if bit set
 00FFF728 02600B                          bne             kwt2
 00FFF72A 08D00D                          bsr             Wait10ms                ; delay a little bit
 00FFF72C 0301FF                          leax    -1,x
 00FFF72E 026FF4                          bne             kwt1                            ; go back and try again
 00FFF730 0CCFFFFFF                       ldd             #-1                                     ; timed out, return -1
 00FFF733 035090                          puls    x,pc
                              kwt2:
 00FFF735 04F                             clra                                                    ; wait complete, return 0
 00FFF736 05F                             clrb                                                    
 00FFF737 035090                          puls    x,pc                            
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for 10 ms
                              ;
                              ; Parameters: none
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              Wait10ms:
 00FFF739 034006                          pshs    d
 00FFF73B 0150B6FFFFFFFE7                 lda             MSCOUNT+3
                              W10_0001:
 00FFF740 01F089                          tfr             a,b
 00FFF742 0150F0FFFFFFFE7                 subb    MSCOUNT+3
 00FFF747 0C1FFA                          cmpb    #$FFA
 00FFF749 022FF5                          bhi             W10_0001
 00FFF74B 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Wait for 300 ms (256 ms)
                              ;
                              ; Parameters: none
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              Wait300ms:
 00FFF74D 034006                          pshs    d
 00FFF74F 0150B6FFFFFFFE7                 lda             MSCOUNT+3
                              W300_0001:
 00FFF754 01F089                          tfr             a,b
 00FFF756 0150F0FFFFFFFE7                 subb    MSCOUNT+3
 00FFF75B 0C1F00                          cmpb    #$F00
 00FFF75D 022FF5                          bhi     W300_0001
 00FFF75F 035086                          puls    d,pc
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get the keyboard status
                              ;
                              ; Parameters: none
                              ; Returns: d = status
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetStatus:
                              kbgs3:
 00FFF761 0150F6FFFE30401                 ldb             KEYBD+1
 00FFF766 0C5080                          bitb    #$80
 00FFF768 02600E                          bne             kbgs1
 00FFF76A 0C5001                          bitb    #$01            ; check parity error flag
 00FFF76C 026002                          bne             kbgs2
 00FFF76E 04F                             clra
 00FFF76F 039                             rts
                              kbgs2:
 00FFF770 0C60FE                          ldb             #$FE            ; request resend
 00FFF772 08DFA5                          bsr             KeybdSendByte
 00FFF774 08DFA9                          bsr             KeybdWaitTx
 00FFF776 020FE9                          bra             kbgs3
                              kbgs1:                                  ; return negative status
 00FFF778 0CAF00                          orb             #$F00
 00FFF77A 086FFF                          lda             #-1
 00FFF77C 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get the scancode from the keyboard port
                              ;
                              ; Parameters: none
                              ; Returns: acca = scancode
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetScancode:
 00FFF77D 04F                             clra
 00FFF77E 0150F6FFFE30400                 ldb             KEYBD                           ; get the scan code
 00FFF783 01507FFFFE30401                 clr             KEYBD+1                 ; clear receive register (write $00 to status reg)
 00FFF788 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Set the LEDs on the keyboard.
                              ;
                              ; Parameters: d LED status to set
                              ; Returns: none
                              ; Modifies: none
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdSetLED:
 00FFF789 034004                          pshs    b
 00FFF78B 0C60ED                          ldb             #$ED                                            ; set LEDs command
 00FFF78D 08DF8A                          bsr             KeybdSendByte
 00FFF78F 08DF8E                          bsr             KeybdWaitTx
 00FFF791 08DF6D                          bsr             KeybdRecvByte   ; should be an ack
 00FFF793 035004                          puls    b
 00FFF795 08DF82                          bsr             KeybdSendByte
 00FFF797 08DF86                          bsr             KeybdWaitTx
 00FFF799 08DF65                          bsr             KeybdRecvByte   ; should be an ack
 00FFF79B 039                             rts
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Get ID - get the keyboards identifier code.
                              ;
                              ; Parameters: none
                              ; Returns: d = $AB83, $00 on fail
                              ; Modifies: d, KeybdID updated
                              ; Stack Space: 2 words
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdGetID:
 00FFF79C 0C60F2                          ldb             #$F2
 00FFF79E 08DF79                          bsr             KeybdSendByte
 00FFF7A0 08DF7D                          bsr             KeybdWaitTx
 00FFF7A2 08DF5C                          bsr             KeybdRecvByte
 00FFF7A4 0C5080                          bitb    #$80
 00FFF7A6 026014                          bne             kgnotKbd
 00FFF7A8 0C10AB                          cmpb    #$AB
 00FFF7AA 026010                          bne             kgnotKbd
 00FFF7AC 08DF52                          bsr             KeybdRecvByte
 00FFF7AE 0C5080                          bitb    #$80
 00FFF7B0 02600A                          bne             kgnotKbd
 00FFF7B2 0C1083                          cmpb    #$83
 00FFF7B4 026006                          bne             kgnotKbd
 00FFF7B6 0CC00AB83                       ldd             #$AB83
                              kgid1:
 00FFF7B9 0DD124                          std             KeybdID
 00FFF7BB 039                             rts
                              kgnotKbd:
 00FFF7BC 04F                             clra
 00FFF7BD 05F                             clrb
 00FFF7BE 020FF9                          bra             kgid1
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Initialize the keyboard.
                              ;
                              ; Parameters:
                              ;               none
                              ;       Modifies:
                              ;               none
                              ; Returns:
                              ;               none
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              KeybdInit:
 00FFF7C0 034026                          pshs    d,y
 00FFF7C2 18E000005                       ldy             #5
                              kbdi0002:
 00FFF7C5 08DF72                          bsr             Wait10ms
 00FFF7C7 01507FFFFE30401                 clr             KEYBD+1                 ; clear receive register (write $00 to status reg)
 00FFF7CC 0C6FFF                          ldb             #-1                                     ; send reset code to keyboard
 00FFF7CE 0150F7FFFE30401                 stb             KEYBD+1                 ; write $FF to status reg to clear TX state
 00FFF7D3 08DF44                          bsr             KeybdSendByte   ; now write to transmit register
 00FFF7D5 08DF48                          bsr             KeybdWaitTx             ; wait until no longer busy
 00FFF7D7 08DF27                          bsr             KeybdRecvByte   ; look for an ACK ($FA)
 00FFF7D9 0C10FA                          cmpb    #$FA
 00FFF7DB 026021                          bne             kbdiTryAgain
 00FFF7DD 08DF21                          bsr             KeybdRecvByte   ; look for BAT completion code ($AA)
 00FFF7DF 0C10FC                          cmpb    #$FC                            ; reset error ?
 00FFF7E1 02701B                          beq             kbdiTryAgain
 00FFF7E3 0C10AA                          cmpb    #$AA                            ; reset complete okay ?
 00FFF7E5 026017                          bne             kbdiTryAgain
 
                                      ; After a reset, scan code set #2 should be active
                              .config:
 00FFF7E7 0C60F0                          ldb             #$F0                    ; send scan code select
 00FFF7E9 0150F7FFFE60000                 stb             LEDS
 00FFF7EE 08DF29                          bsr             KeybdSendByte
 00FFF7F0 08DF2D                          bsr             KeybdWaitTx
 00FFF7F2 05D                             tstb
 00FFF7F3 02B009                          bmi             kbdiTryAgain
 00FFF7F5 08DF09                          bsr             KeybdRecvByte   ; wait for response from keyboard
 00FFF7F7 04D                             tsta
 00FFF7F8 02B004                          bmi             kbdiTryAgain
 00FFF7FA 0C10FA                          cmpb    #$FA                                    ; ACK
 00FFF7FC 02700C                          beq             kbdi0004
                              kbdiTryAgain:
 00FFF7FE 0313FF                          dey
 00FFF800 026FC3                          bne       kbdi0002
                              .keybdErr:
 00FFF802 0CCFFF82A                       ldd             #msgBadKeybd
 00FFF805 017FFFB61                       lbsr    DisplayStringCRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFF808 020014                          bra             ledxit
                              kbdi0004:
 00FFF80A 0C6002                          ldb             #2                      ; select scan code set #2
 00FFF80C 08DF0B                          bsr             KeybdSendByte
 00FFF80E 08DF0F                          bsr             KeybdWaitTx
 00FFF810 05D                             tstb
 00FFF811 02BFEB                          bmi             kbdiTryAgain
 00FFF813 08DEEB                          bsr             KeybdRecvByte   ; wait for response from keyboard
 00FFF815 04D                             tsta
 00FFF816 02BFE6                          bmi             kbdiTryAgain
 00FFF818 0C10FA                          cmpb    #$FA
 00FFF81A 026FE2                          bne             kbdiTryAgain
 00FFF81C 08DF7E                          bsr             KeybdGetID
                              ledxit:
 00FFF81E 0C6007                          ldb             #$07
 00FFF820 08DF67                          bsr             KeybdSetLED
 00FFF822 08DF29                          bsr             Wait300ms
 00FFF824 0C6000                          ldb             #$00
 00FFF826 08DF61                          bsr             KeybdSetLED
 00FFF828 0350A6                          puls    d,y,pc
 
                              msgBadKeybd:
 00FFF82A 04B06507906206F061072           fcb             "Keyboard error",0
 00FFF831 06402006507207206F072
 00FFF838 000
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              DBGCheckForKey:
 00FFF839 020F26                          bra             KeybdGetStatus
 
 
                              ; KeyState2 variable bit meanings
                              ;1176543210
                              ; ||||||||+ = shift
                              ; |||||||+- = alt
                              ; ||||||+-- = control
                              ; |||||+--- = numlock
                              ; ||||+---- = capslock
                              ; |||+----- = scrolllock
                              ; ||+------ = <empty>
                              ; |+------- =    "
                              ; |         =    "
                              ; |         =    "
                              ; |         =    "
                              ; +-------- = extended
 
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              ; Debug versison of keyboard get routine.
                              ;
                              ; Parameters:
                              ;               b:      0 = non blocking, otherwise blocking
                              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
                              DBGGetKey:
 00FFF83B 034010                          pshs    x
 00FFF83D 0D7126                          stb             KeybdBlock                              ; save off blocking status
                              dbgk2:
 00FFF83F 0D6126                          ldb             KeybdBlock
 00FFF841 034004                          pshs    b
 00FFF843 08DF1C                          bsr             KeybdGetStatus
 00FFF845 0C4080                          andb    #$80                                                    ; is key available?
 00FFF847 035004                          puls    b
 00FFF849 026008                          bne             dbgk1                                                   ; branch if key
 00FFF84B 05D                             tstb                                                                            ; block?
 00FFF84C 026FF1                          bne             dbgk2                                                   ; If no key and blocking - loop
 00FFF84E 0CCFFFFFF                       ldd             #-1                                                             ; return -1 if no block and no key
 00FFF851 035090                          puls    x,pc
                              dbgk1:
 00FFF853 08DF28                          bsr             KeybdGetScancode
                              ;       lbsr    DispByteAsHex
                                      ; Make sure there is a small delay between scancode reads
 00FFF855 08E000014                       ldx             #20
                              dbgk3:
 00FFF858 0301FF                          dex
 00FFF85A 026FFC                          bne             dbgk3
                                      ; switch on scan code
 00FFF85C 0C10F0                          cmpb    #SC_KEYUP
 00FFF85E 026004                          bne             dbgk4
 00FFF860 0D7120                          stb             KeyState1                                       ; make KeyState1 <> 0
 00FFF862 020FDB                          bra             dbgk2                                                   ; loop back
                              dbgk4:
 00FFF864 0C10E0                          cmpb    #SC_EXTEND
 00FFF866 026008                          bne             dbgk5
 00FFF868 096121                          lda             KeyState2
 00FFF86A 08A800                          ora             #$800
 00FFF86C 097121                          sta             KeyState2
 00FFF86E 020FCF                          bra             dbgk2
                              dbgk5:
 00FFF870 0C1014                          cmpb    #SC_CTRL
 00FFF872 026016                          bne             dbgkNotCtrl
 00FFF874 00D120                          tst             KeyState1
 00FFF876 026008                          bne             dbgk7
 00FFF878 096121                          lda             KeyState2
 00FFF87A 08A004                          ora             #4
 00FFF87C 097121                          sta             KeyState2
 00FFF87E 020006                          bra             dbgk8
                              dbgk7:
 00FFF880 096121                          lda             KeyState2
 00FFF882 084FFB                          anda    #~4
 00FFF884 097121                          sta             KeyState2
                              dbgk8:
 00FFF886 00F120                          clr             KeyState1
 00FFF888 020FB5                          bra             dbgk2
                              dbgkNotCtrl:
 00FFF88A 0C1059                          cmpb    #SC_RSHIFT
 00FFF88C 026016                          bne             dbgkNotRshift
 00FFF88E 00D120                          tst             KeyState1
 00FFF890 026008                          bne             dbgk9
 00FFF892 096121                          lda             KeyState2
 00FFF894 08A001                          ora             #1
 00FFF896 097121                          sta             KeyState2
 00FFF898 020006                          bra             dbgk10
                              dbgk9:
 00FFF89A 096121                          lda             KeyState2
 00FFF89C 084FFE                          anda    #~1
 00FFF89E 097121                          sta             KeyState2
                              dbgk10:
 00FFF8A0 00F120                          clr             KeyState1
 00FFF8A2 020F9B                          bra             dbgk2
                              dbgkNotRshift:
 00FFF8A4 0C1077                          cmpb    #SC_NUMLOCK
 00FFF8A6 026013                          bne             dbgkNotNumlock
 00FFF8A8 096121                          lda             KeyState2
 00FFF8AA 088010                          eora    #16
 00FFF8AC 097121                          sta             KeyState2
 00FFF8AE 096122                          lda             KeyLED
 00FFF8B0 088002                          eora    #2
 00FFF8B2 097122                          sta             KeyLED
 00FFF8B4 01F089                          tfr             a,b
 00FFF8B6 04F                             clra
 00FFF8B7 08DED0                          bsr             KeybdSetLED
 00FFF8B9 020F84                          bra             dbgk2
                              dbgkNotNumlock:
 00FFF8BB 0C1058                          cmpb    #SC_CAPSLOCK
 00FFF8BD 026013                          bne             dbgkNotCapslock
 00FFF8BF 096121                          lda             KeyState2
 00FFF8C1 088020                          eora    #32
 00FFF8C3 097121                          sta             KeyState2
 00FFF8C5 096122                          lda             KeyLED
 00FFF8C7 088004                          eora    #4
 00FFF8C9 097122                          sta             KeyLED
 00FFF8CB 01F089                          tfr             a,b
 00FFF8CD 04F                             clra
 00FFF8CE 08DEB9                          bsr             KeybdSetLED
 00FFF8D0 020F6D                          bra             dbgk2
                              dbgkNotCapslock:
 00FFF8D2 0C107E                          cmpb    #SC_SCROLLLOCK
 00FFF8D4 026013                          bne             dbgkNotScrolllock
 00FFF8D6 096121                          lda             KeyState2
 00FFF8D8 088040                          eora    #64
 00FFF8DA 097121                          sta             KeyState2
 00FFF8DC 096122                          lda             KeyLED
 00FFF8DE 088001                          eora    #1
 00FFF8E0 097122                          sta             KeyLED
 00FFF8E2 01F089                          tfr             a,b
 00FFF8E4 04F                             clra
 00FFF8E5 08DEA2                          bsr             KeybdSetLED
 00FFF8E7 020F56                          bra             dbgk2
                              dbgkNotScrolllock:
 00FFF8E9 0C1011                          cmpb    #SC_ALT
 00FFF8EB 026016                          bne             dbgkNotAlt
 00FFF8ED 00D120                          tst             KeyState1
 00FFF8EF 026008                          bne             dbgk11
 00FFF8F1 096121                          lda             KeyState2
 00FFF8F3 08A002                          ora             #2
 00FFF8F5 097121                          sta             KeyState2
 00FFF8F7 020006                          bra             dbgk12
                              dbgk11:
 00FFF8F9 096121                          lda             KeyState2
 00FFF8FB 084FFD                          anda    #~2
 00FFF8FD 097121                          sta             KeyState2
                              dbgk12:
 00FFF8FF 00F120                          clr             KeyState1
 00FFF901 020F3C                          bra             dbgk2
                              dbgkNotAlt:
 00FFF903 00D120                          tst             KeyState1
 00FFF905 027004                          beq             dbgk13
 00FFF907 00F120                          clr             KeyState1
 00FFF909 020F34                          bra             dbgk2
                              dbgk13:
 00FFF90B 096121                          lda             KeyState2               ; Check for CTRL-ALT-DEL
 00FFF90D 084006                          anda    #6
 00FFF90F 081006                          cmpa    #6
 00FFF911 026008                          bne             dbgk14
 00FFF913 0C1071                          cmpb    #SC_DEL 
 00FFF915 026004                          bne             dbgk14
 00FFF917 06E90FFFFFFC                    jmp             [$FFFFFC]               ; jump to NMI vector
                              dbgk14:
 00FFF91B 00D121                          tst             KeyState2               ; extended code?
 00FFF91D 02A00B                          bpl             dbgk15
 00FFF91F 096121                          lda             KeyState2
 00FFF921 0847FF                          anda    #$7FF
 00FFF923 097121                          sta             KeyState2
 00FFF925 08EFFF680                       ldx             #keybdExtendedCodes
 00FFF928 020017                          bra             dbgk18
                              dbgk15:
 00FFF92A 096121                          lda             KeyState2               ; Is CTRL down?
 00FFF92C 085004                          bita    #4
 00FFF92E 027005                          beq             dbgk16
 00FFF930 08EFFF600                       ldx             #keybdControlCodes
 00FFF933 02000C                          bra             dbgk18
                              dbgk16:
 00FFF935 085001                          bita    #1                                      ; Is shift down?
 00FFF937 027005                          beq             dbgk17
 00FFF939 08EFFF500                       ldx             #shiftedScanCodes
 00FFF93C 020003                          bra             dbgk18
                              dbgk17:
 00FFF93E 08EFFF400                       ldx             #unshiftedScanCodes
                              dbgk18:
 00FFF941 03A                             abx                                                             ; index into table is scancode in accb
 00FFF942 0E6804                          ldb             ,x                                      ; load accb with ascii from table
 00FFF944 04F                             clra
 00FFF945 035090                          puls    x,pc                            ; and return
                                      
 
 00FFF947 04B04505904204F041052           fcb             "KEYBOARD"
 00FFF94E 044
 00FFF94F FFF959                          fcw             KeybdOpen
 00FFF951 FFF95A                          fcw             KeybdClose
 00FFF953 FFF95B                          fcw             KeybdRead
 00FFF955 FFF95C                          fcw             KeybdWrite
 00FFF957 FFF95D                          fcw             KeybdSeek
 
                              ; Keyboard Open:
                              ; Initialize the keyboard buffer head and tail indexes
                              ;
                              KeybdOpen:
 00FFF959 039                             rts
 
                              ; Keyboard Close:
                              ; Nothing to do except maybe clear the keyboard buffer
                              ;
                              KeybdClose:
 00FFF95A 039                             rts
                              ;
                              KeybdRead:
 00FFF95B 039                             rts
                              ;
                              KeybdWrite:
 00FFF95C 039                             rts
 
                              KeybdSeek:
 00FFF95D 039                             rts
 
                              ;==============================================================================
                              ; Serial I/O
                              ;==============================================================================
 
                              ;------------------------------------------------------------------------------
                              ; Initialize serial port.
                              ;
                              ; Modifies:
                              ;
                              ;------------------------------------------------------------------------------
 
                              InitSerial:
 00FFF95E 04F                             clra
 00FFF95F 05F                             clrb
 00FFF960 0DD130                          std             SerHeadRcv-1
 00FFF962 0DD132                          std             SerTailRcv-1
 00FFF964 0DD135                          std             SerHeadXmit-1
 00FFF966 0DD137                          std             SerTailXmit-1
 00FFF968 00F139                          clr             SerRcvXon
 00FFF96A 00F140                          clr             SerRcvXoff
 00FFF96C 0C6009                          ldb             #$09                                            ; dtr,rts active, rxint enabled, no parity
 00FFF96E 0150F7FFFE30102                 stb             ACIA+ACIA_CMD
 00FFF973 0C601E                          ldb             #$1E                                            ; baud 9600, 1 stop bit, 8 bit, internal baud gen
 00FFF975 0150F7FFFE30103                 stb             ACIA+ACIA_CTRL
 00FFF97A 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; SerialGetChar
                              ;
                              ; Check the serial port buffer to see if there's a char available. If there's
                              ; a char available then return it. If the buffer is almost empty then send an
                              ; XON.
                              ;
                              ; Stack Space:
                              ;               2 words
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;               d = character or -1
                              ;------------------------------------------------------------------------------
 
                              SerialGetChar:
 00FFF97B 034010                                  pshs    x
 00FFF97D 01A010                                  sei                                                                             ; disable interrupts
 00FFF97F 08D073                                  bsr             SerialRcvCount                  ; check number of chars in receive buffer
 00FFF981 0C1008                                  cmpb    #8                                                      ; less than 8?
 00FFF983 02500F                                  blo             sgc2
 00FFF985 0D6139                                  ldb             SerRcvXon                               ; skip sending XON if already sent
 00FFF987 02600B                                  bne       sgc2            ; XON already sent?
 00FFF989 0C6011                                  ldb             #XON                                            ; if <8 send an XON
 00FFF98B 00F140                                  clr             SerRcvXoff                      ; clear XOFF status
 00FFF98D 00F139                                  clr             SerRcvXon                               ; flag so we don't send it multiple times
 00FFF98F 0150F7FFFE30100                         stb             ACIA+ACIA_TX
                              sgc2:
 00FFF994 0D6131                                  ldb             SerHeadRcv                      ; check if anything is in buffer
 00FFF996 0D1133                                  cmpb    SerTailRcv
 00FFF998 02700B                                  beq             sgcNoChars                      ; no?
 00FFF99A 08EBFF000                               ldx             #SerRcvBuf
 00FFF99D 03A                                     abx
 00FFF99E 04F                                     clra
 00FFF99F 0E6804                                  ldb             ,x                                                      ; get byte from buffer
 00FFF9A1 00C131                                  inc             SerHeadRcv
 00FFF9A3 020003                                  bra             sgcXit
                              sgcNoChars:
 00FFF9A5 0CCFFFFFF                               ldd             #-1
                              sgcXit:
 00FFF9A8 01C0EF                                  cli
 00FFF9AA 035090                                  puls    x,pc
 
                              ;------------------------------------------------------------------------------
                              ; SerialPeekChar
                              ;
                              ; Check the serial port buffer to see if there's a char available. If there's
                              ; a char available then return it. But don't update the buffer indexes. No need
                              ; to send an XON here.
                              ;
                              ; Stack Space:
                              ;               2 words
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;   $v0 = E_Ok
                              ;               $v1 = character or -1
                              ;------------------------------------------------------------------------------
 
                              SerialPeekChar:
 00FFF9AC 01A010                          sei
 00FFF9AE 0D6131                          ldb             SerHeadRcv                              ; check if anything is in buffer
 00FFF9B0 0D1133                          cmpb    SerTailRcv
 00FFF9B2 027009                          beq             spcNoChars                              ; no?
 00FFF9B4 08EBFF000                       ldx             #SerRcvBuf
 00FFF9B7 03A                             abx
 00FFF9B8 04F                             clra
 00FFF9B9 0E6804                          ldb             ,x                                                              ; get byte from buffer
 00FFF9BB 020003                          bra             spcXit
                              spcNoChars:
 00FFF9BD 0CCFFFFFF                       ldd             #-1
                              spcXit:
 00FFF9C0 01C0EF                          cli
 00FFF9C2 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; SerialPeekChar
                              ;               Get a character directly from the I/O port. This bypasses the input
                              ; buffer.
                              ;
                              ; Stack Space:
                              ;               3 words
                              ; Parameters:
                              ;               none
                              ; Modifies:
                              ;               none
                              ; Returns:
                              ;               d = character or -1
                              ;------------------------------------------------------------------------------
 
                              SerialPeekCharDirect:
 00FFF9C3 01A010                          sei
 00FFF9C5 0150F6FFFE30101                 ldb             ACIA+ACIA_STAT
 00FFF9CA 0C5008                          bitb    #8                                                                      ; look for Rx not empty
 00FFF9CC 027009                          beq             spcd0001
 00FFF9CE 04F                             clra
 00FFF9CF 0150F6FFFE30100                 ldb             ACIA+ACIA_RX
 00FFF9D4 01C0EF                          cli
 00FFF9D6 039                             rts
                              spcd0001:
 00FFF9D7 0CCFFFFFF                       ldd             #-1
 00FFF9DA 01C0EF                          cli
 00FFF9DC 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; SerialPutChar
                              ;    Put a character to the serial transmitter. This routine blocks until the
                              ; transmitter is empty. 
                              ;
                              ; Stack Space
                              ;               0 words
                              ; Parameters:
                              ;               b = character to put
                              ; Modifies:
                              ;               none
                              ;------------------------------------------------------------------------------
 
                              SerialPutChar:
 00FFF9DD 034002                          pshs    a
 00FFF9DF 01A010                          sei
                              spc0001:
 00FFF9E1 0150B6FFFE30101                 lda             ACIA+ACIA_STAT  ; wait until the uart indicates tx empty
 00FFF9E6 085010                          bita    #16                                                     ; bit #4 of the status reg
 00FFF9E8 027FF7                          beq             spc0001                     ; branch if transmitter is not empty
 00FFF9EA 0150F7FFFE30100                 stb             ACIA+ACIA_TX            ; send the byte
 00FFF9EF 01C0EF                          cli
 00FFF9F1 035002                          puls    a
 00FFF9F3 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Calculate number of character in input buffer
                              ;------------------------------------------------------------------------------
 
                              SerialRcvCount:
 00FFF9F4 04F                             clra
 00FFF9F5 0D6133                          ldb             SerTailRcv
 00FFF9F7 0D0131                          subb    SerHeadRcv
 00FFF9F9 02C007                          bge             srcXit
 00FFF9FB 08E001000                       ldx             #$1000
 00FFF9FE 093131                          subd    SerHeadRcv
 00FFFA00 0D3133                          addd    SerTailRcv
                              srcXit:
 00FFFA02 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Serial IRQ routine
                              ;
                              ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                              ;------------------------------------------------------------------------------
 
                              SerialIRQ:
                              sirqNxtByte:
 00FFFA03 0150F6FFFE30101                 ldb             ACIA+ACIA_STAT  ; check the status
 00FFFA08 0C5008                          bitb    #$08                                            ; bit 3 = rx full
 00FFFA0A 027032                          beq             notRxInt
 00FFFA0C 0150F6FFFE30100                 ldb             ACIA+ACIA_RX            ; get data from Rx buffer to clear interrupt
 00FFFA11 0C1014                          cmpb    #CTRLT                                  ; detect special keystroke
 00FFFA13 026000                          bne     sirq0001
                              ;       bsr     DumpTraceQueue
                              sirq0001:
 00FFFA15 096133                          lda             SerTailRcv                      ; check if recieve buffer full
 00FFFA17 04C                             inca
 00FFFA18 091131                          cmpa    SerHeadRcv
 00FFFA1A 027022                          beq             sirqRxFull
 00FFFA1C 097133                          sta             SerTailRcv                      ; update tail pointer
 00FFFA1E 04A                             deca                                                                    ; backup
 00FFFA1F 01E089                          exg             a,b
 00FFFA21 08EBFF000                       ldx             #SerRcvBuf                      ; x = buffer address
 00FFFA24 03A                             abx
 00FFFA25 0A7804                          sta             ,x                                                      ; store recieved byte in buffer
 00FFFA27 00D140                          tst             SerRcvXoff                      ; check if xoff already sent
 00FFFA29 026FD8                          bne             sirqNxtByte
 00FFFA2B 08DFC7                          bsr             SerialRcvCount  ; if more than 4080 chars in buffer
 00FFFA2D 0C1FF0                          cmpb    #4080
 00FFFA2F 025FD2                          blo             sirqNxtByte
 00FFFA31 0C6013                          ldb             #XOFF                                           ; send an XOFF
 00FFFA33 00F139                          clr             SerRcvXon                               ; clear XON status
 00FFFA35 0D7140                          stb             SerRcvXoff                      ; set XOFF status
 00FFFA37 0150F7FFFE30100                 stb             ACIA+ACIA_TX
 00FFFA3C 020FC5                          bra             sirqNxtByte     ; check the status for another byte
                              sirqRxFull:
                              notRxInt:
 00FFFA3E 039                             rts
 
                              nmeSerial:
 00FFFA3F 05306507206906106C000           fcb             "Serial",0
 
                              ;------------------------------------------------------------------------------
                              ; Check if there is a keyboard character available. If so return true (<0)
                              ; otherwise return false (0) in accb.
                              ;------------------------------------------------------------------------------
                              ;
                              KeybdCheckForKeyDirect:
 00FFFA46 020DF1                          bra             DBGCheckForKey
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              INCH:
 00FFFA48 0CCFFFFFF                       ldd             #-1                             ; block if no key available
 00FFFA4B 020DEE                          bra             DBGGetKey
 00FFFA4D 017FFFF73                       lbsr    SerialPeekCharDirect
*** warning 1: Long branch within short branch range could be optimized
 00FFFA50 04D                             tsta
 00FFFA51 02BFF5                          bmi             INCH                    ; block if no key available
 00FFFA53 039                             rts
 
 
                              INCHE:
 00FFFA54 08DFF2                          bsr             INCH
 00FFFA56 020009                          bra             INCHEK3
 
                              INCHEK:
 00FFFA58 08DFEE                          bsr             INCH
 00FFFA5A 01507DFFFFFCA00                 tst             KeybdEcho
 00FFFA5F 02700B                          beq             INCHEK1
                              INCHEK3:
 00FFFA61 08100D                          cmpa    #CR
 00FFFA63 026005                          bne             INCHEK2
 00FFFA65 017FFD66A                       lbsr            CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFFA68 020002                          bra             INCHEK1
                              INCHEK2:
 00FFFA6A 08D832                          bsr             DisplayChar
                              INCHEK1:
 00FFFA6C 039                             rts
 
                              OUTCH:
 00FFFA6D 06E90F000800                    jmp             [CharOutVec]
 
                              ;------------------------------------------------------------------------------
                              ; r1 0=echo off, non-zero = echo on
                              ;------------------------------------------------------------------------------
                              ;
                              SetKeyboardEcho:
 00FFFA71 0150F7FFFFFCA00                 stb             KeybdEcho
 00FFFA76 039                             rts
 
 
                              ;------------------------------------------------------------------------------
                              ; Parameters:
                              ;               x,d     bitmap of sprites to enable
                              ;------------------------------------------------------------------------------
 
                              ShowSprites:
 00FFFA77 0150BFFFFE103C0                 stx             SPRITE_CTRL+SPRITE_EN
 00FFFA7C 0150FDFFFE103C2                 std             SPRITE_CTRL+SPRITE_EN+2
 00FFFA81 039                             rts
 
                              ;==============================================================================
                              ; System Monitor
                              ;==============================================================================
                              ;
                              MonitorStart:
 00FFFA82 0CCFFFBE2                       ldd             #HelpMsg
 00FFFA85 08D8D4                          bsr             DisplayString
                              Monitor:
 00FFFA87 03280F003FFF                    leas    $3FFF                           ; reset stack pointer
 00FFFA8B 05F                             clrb                                                    ; turn off keyboard echo
 00FFFA8C 08DFE3                          bsr             SetKeyboardEcho
                              ;       jsr             RequestIOFocus
                              PromptLn:
 00FFFA8E 017FFD641                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFFA91 0C6024                          ldb             #'$'
 00FFFA93 08DFD8                          bsr             OUTCH
 
                              ; Get characters until a CR is keyed
                                      
                              Prompt3:
 00FFFA95 0CCFFFFFF                       ldd             #-1                                     ; block until key present
 00FFFA98 08DFAE                          bsr             INCH
 00FFFA9A 0C100D                          cmpb    #CR
 00FFFA9C 027004                          beq             Prompt1
 00FFFA9E 08DFCD                          bsr             OUTCH
 00FFFAA0 020FF3                          bra             Prompt3
 
                              ; Process the screen line that the CR was keyed on
                              ;
                              Prompt1:
 00FFFAA2 0CC005050                       ldd             #$5050
 00FFFAA5 0150FDFFFE60000                 std             LEDS
 00FFFAAA 0F6800000                       ldb             RunningID
 00FFFAAD 0C103D                          cmpb    #61
 00FFFAAF 022FE4                          bhi             Prompt3
 00FFFAB1 0CC005151                       ldd             #$5151
 00FFFAB4 0150FDFFFE60000                 std             LEDS
 00FFFAB9 00F111                          clr             CursorCol                       ; go back to the start of the line
 00FFFABB 017FFF7BE                       lbsr    CalcScreenLoc   ; calc screen memory location
*** warning 1: Long branch within short branch range could be optimized
 00FFFABE 01F002                          tfr             d,y
 00FFFAC0 0CC005252                       ldd             #$5252
 00FFFAC3 0150FDFFFE60000                 std             LEDS
 00FFFAC8 08D056                          bsr             MonGetNonSpace
 00FFFACA 0C1024                          cmpb    #'$'
 00FFFACC 026009                          bne             Prompt2                 ; skip over '$' prompt character
 00FFFACE 086353                          lda             #$5353
 00FFFAD0 0150FDFFFE60000                 std             LEDS
 00FFFAD5 08D049                          bsr             MonGetNonSpace
 
                              ; Dispatch based on command character
                              ;
                              Prompt2:
 00FFFAD7 0C103F                          cmpb    #'?'                    ; $? - display help
 00FFFAD9 026007                          bne             PromptC
 00FFFADB 0CCFFFBE2                       ldd             #HelpMsg
 00FFFADE 08D87B                          bsr             DisplayString
 00FFFAE0 020FA5                          bra             Monitor
                              PromptC:
 00FFFAE2 0C1043                          cmpb    #'C'
 00FFFAE4 026008                          bne             PromptD
 00FFFAE6 017FFF6EA                       lbsr    ClearScreen
*** warning 1: Long branch within short branch range could be optimized
 00FFFAE9 017FFF758                       lbsr    HomeCursor
*** warning 1: Long branch within short branch range could be optimized
 00FFFAEC 020F99                          bra             Monitor
                              PromptD:
 00FFFAEE 0C1044                          cmpb    #'D'
 00FFFAF0 026008                          bne             PromptF
 00FFFAF2 08D027                          bsr             MonGetch
 00FFFAF4 0C1052                          cmpb    #'R'
 00FFFAF6 0261A6                          bne             DumpMemory
 00FFFAF8 0201D8                          bra             DumpRegs
                              PromptF:
 00FFFAFA 0C1046                          cmpb    #'F'
 00FFFAFC 02600F                          bne             PromptJ
 00FFFAFE 08D01B                          bsr             MonGetch
 00FFFB00 0C1049                          cmpb    #'I'
 00FFFB02 026F83                          bne             Monitor
 00FFFB04 08D015                          bsr             MonGetch
 00FFFB06 0C1047                          cmpb    #'G'
 00FFFB08 026F7D                          bne             Monitor
 00FFFB0A 07EFE0000                       jmp             $FE0000
                              PromptJ:
 00FFFB0D 0C104A                          cmpb    #'J'
 00FFFB0F 127000201                       lbeq    jump_to_code
                              PromptR:
 00FFFB12 0C1052                          cmpb    #'R'
 00FFFB14 026F71                          bne             Monitor
 00FFFB16 017FFE4E7                       lbsr    ramtest
*** warning 1: Long branch within short branch range could be optimized
 00FFFB19 020F6C                          bra             Monitor
 
                              MonGetch:
 00FFFB1B 0E6A04                          ldb             ,y
 00FFFB1D 031201                          leay    1,y
 00FFFB1F 039                             rts
 
                              MonGetNonSpace:
 00FFFB20 08DFF9                          bsr             MonGetCh
 00FFFB22 0C1020                          cmpb    #' '
 00FFFB24 027FFA                          beq             MonGetNonSpace
 00FFFB26 0C1009                          cmpb    #9              ; tab
 00FFFB28 027FF6                          beq             MonGetNonSpace
 00FFFB2A 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Ignore blanks in the input
                              ; Y = text pointer
                              ; D destroyed
                              ;------------------------------------------------------------------------------
                              ;
                              ignBlanks:
                              ignBlanks1:
 00FFFB2B 08DFEE                          bsr             MonGetch
 00FFFB2D 0C1020                          cmpb    #' '
 00FFFB2F 027FFA                          beq             ignBlanks1
 00FFFB31 0313FF                          leay    -1,y
 00FFFB33 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              GetTwoParams:
 00FFFB34 08DFF5                          bsr             ignBlanks
 00FFFB36 08D02E                          bsr             GetHexNumber    ; get start address of dump
 00FFFB38 0DC910                          ldd             mon_numwka
 00FFFB3A 0DD920                          std             mon_r1
 00FFFB3C 0DC912                          ldd             mon_numwka+2
 00FFFB3E 0DD922                          std             mon_r1+2
 00FFFB40 08DFE9                          bsr             ignBlanks
 00FFFB42 08D022                          bsr             GetHexNumber    ; get end address of dump
 00FFFB44 0DC910                          ldd             mon_numwka
 00FFFB46 0DD924                          std             mon_r2
 00FFFB48 0DC912                          ldd             mon_numwka+2
 00FFFB4A 0DD926                          std             mon_r2+2
 00FFFB4C 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Get a range, the end must be greater or equal to the start.
                              ;------------------------------------------------------------------------------
                              GetRange:
 00FFFB4D 08DFE5                          bsr             GetTwoParams
 00FFFB4F 0DC926                          ldd             mon_r2+2
 00FFFB51 093922                          subd    mon_r1+2
 00FFFB53 0DC924                          ldd             mon_r2
 00FFFB55 0D2921                          sbcb    mon_r1+1
 00FFFB57 092920                          sbca    mon_r1
 00FFFB59 12500006C                       lbcs    DisplayErr
 00FFFB5C 039                             rts
 
                              shl_numwka:
 00FFFB5D 008913                          asl             mon_numwka+3
 00FFFB5F 009912                          rol             mon_numwka+2
 00FFFB61 009911                          rol             mon_numwka+1
 00FFFB63 009910                          rol             mon_numwka
 00FFFB65 039                             rts
 
                              ;------------------------------------------------------------------------------
                              ; Get a hexidecimal number. Maximum of twelve digits.
                              ;
                              ; Modifies:
                              ;       Y = text pointer (updated)
                              ;       D = number of digits
                              ;       mon_numwka contains number
                              ;------------------------------------------------------------------------------
                              ;
                              GetHexNumber:
 00FFFB66 04F05F                          clrd
 00FFFB68 0DD910                          std             mon_numwka      ; zero out work area
 00FFFB6A 0DD912                          std             mon_numwka+2
 00FFFB6C 034010                          pshs    x
 00FFFB6E 08E000000                       ldx             #0                                      ; max 12 eight digits
                              gthxn2:
 00FFFB71 08DFA8                          bsr             MonGetch
 00FFFB73 08D01D                          bsr             AsciiToHexNybble
 00FFFB75 0C1FFF                          cmpb    #-1
 00FFFB77 027015                          beq             gthxn1
 00FFFB79 08DFE2                          bsr             shl_numwka
 00FFFB7B 08DFE0                          bsr             shl_numwka
 00FFFB7D 08DFDE                          bsr             shl_numwka
 00FFFB7F 08DFDC                          bsr             shl_numwka
 00FFFB81 0C400F                          andb    #$0f
 00FFFB83 0DA913                          orb             mon_numwka+3
 00FFFB85 0D7913                          stb             mon_numwka+3
 00FFFB87 030001                          inx
 00FFFB89 08C00000C                       cmpx    #12
 00FFFB8C 025FE3                          blo             gthxn2
                              gthxn1:
 00FFFB8E 01F010                          tfr             x,d
 00FFFB90 035090                          puls    x,pc
 
                              ;GetDecNumber:
                              ;       phx
                              ;       push    r4
                              ;       push    r5
                              ;       ldx             #0
                              ;       ld              r4,#10
                              ;       ld              r5,#10
                              ;gtdcn2:
                              ;       jsr             MonGetch
                              ;       jsr             AsciiToDecNybble
                              ;       cmp             #-1
                              ;       beq             gtdcn1
                              ;       mul             r2,r2,r5
                              ;       add             r2,r1
                              ;       dec             r4
                              ;       bne             gtdcn2
                              ;gtdcn1:
                              ;       txa
                              ;       pop             r5
                              ;       pop             r4
                              ;       plx
                              ;       rts
 
                              ;------------------------------------------------------------------------------
                              ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                              ; to a hex nybble.
                              ;------------------------------------------------------------------------------
                              ;
                              AsciiToHexNybble:
 00FFFB92 0C1030                          cmpb    #'0'
 00FFFB94 025021                          blo             gthx3
 00FFFB96 0C1039                          cmpb    #'9'
 00FFFB98 022003                          bhi             gthx5
 00FFFB9A 0C0030                          subb    #'0'
 00FFFB9C 039                             rts
                              gthx5:
 00FFFB9D 0C1041                          cmpb    #'A'
 00FFFB9F 025016                          blo             gthx3
 00FFFBA1 0C1046                          cmpb    #'F'
 00FFFBA3 022005                          bhi             gthx6
 00FFFBA5 0C0041                          subb    #'A'
 00FFFBA7 0CB00A                          addb    #10
 00FFFBA9 039                             rts
                              gthx6:
 00FFFBAA 0C1061                          cmpb    #'a'
 00FFFBAC 025009                          blo             gthx3
 00FFFBAE 0C107A                          cmpb    #'z'
 00FFFBB0 022005                          bhi             gthx3
 00FFFBB2 0C0061                          subb    #'a'
 00FFFBB4 0CB00A                          addb    #10
 00FFFBB6 039                             rts
                              gthx3:
 00FFFBB7 0C6FFF                          ldb             #-1             ; not a hex number
 00FFFBB9 039                             rts
 
                              AsciiToDecNybble:
 00FFFBBA 0C1030                          cmpb    #'0'
 00FFFBBC 024007                          bcc             gtdc3
 00FFFBBE 0C103A                          cmpb    #'9'+1
 00FFFBC0 025003                          bcs             gtdc3
 00FFFBC2 0C0030                          subb    #'0'
 00FFFBC4 039                             rts
                              gtdc3:
 00FFFBC5 0C6FFF                          ldb             #-1
 00FFFBC7 039                             rts
 
                              DisplayErr:
 00FFFBC8 08EFFFBDA                       ldx             #msgErr
 00FFFBCB 04F05F                          clrd
 00FFFBCD 08D003                          bsr             DisplayStringDX
 00FFFBCF 07EFFFA87                       jmp             Monitor
 
                              DisplayStringDX
 00FFFBD2 0DD024                          std             Strptr
 00FFFBD4 09F026                          stx             Strptr+2
 00FFFBD6 0BDFFF35B                       jsr             DisplayString
 00FFFBD9 039                             rts
 
                              msgErr:
 00FFFBDA 02A02A04507207200D00A           fcb     "**Err",CR,LF,0
 00FFFBE1 000
 
                              HelpMsg:
 00FFFBE2 03F02003D020044069073           fcb             "? = Display help",CR,LF
 00FFFBE9 07006C061079020068065
 00FFFBF0 06C07000D00A
 00FFFBF4 04304C05302003D020063           fcb     "CLS = clear screen",CR,LF
 00FFFBFB 06C065061072020073063
 00FFFC02 07206506506E00D00A
                              ;       db      "S = Boot from SD Card",CR,LF
                              ;       db      ": = Edit memory bytes",CR,LF
                              ;       db      "L = Load sector",CR,LF
                              ;       db      "W = Write sector",CR,LF
 00FFFC08 04405202003D020044075           fcb "DR = Dump registers",CR,LF
 00FFFC0F 06D070020072065067069
 00FFFC16 07307406507207300D00A
 00FFFC1D 04402003D02004407506D           fcb     "D = Dump memory",CR,LF
 00FFFC24 07002006D06506D06F072
 00FFFC2B 07900D00A
                              ;       db      "F = Fill memory",CR,LF
                              ;       db  "FL = Dump I/O Focus List",CR,LF
 00FFFC2E 04604904702003D020073           fcb "FIG = start FIG Forth",CR,LF
 00FFFC35 074061072074020046049
 00FFFC3C 04702004606F072074068
 00FFFC43 00D00A
                              ;       db      "KILL n = kill task #n",CR,LF
                              ;       db      "B = start tiny basic",CR,LF
                              ;       db      "b = start EhBasic 6502",CR,LF
 00FFFC45 04A02003D02004A07506D           fcb     "J = Jump to code",CR,LF
 00FFFC4C 07002007406F02006306F
 00FFFC53 06406500D00A
 00FFFC57 05204104D02003D020074           fcb "RAM = test RAM",CR,LF
 00FFFC5E 06507307402005204104D
 00FFFC65 00D00A
                              ;       db      "R[n] = Set register value",CR,LF
                              ;       db      "r = random lines - test bitmap",CR,LF
                              ;       db      "e = ethernet test",CR,LF
                              ;       db      "T = Dump task list",CR,LF
                              ;       db      "TO = Dump timeout list",CR,LF
                              ;       db      "TI = display date/time",CR,LF
                              ;       db      "TEMP = display temperature",CR,LF
                              ;       db      "P = Piano",CR,LF,0
 00FFFC67 000                             fcb             0
 
                              msgRegHeadings
 00FFFC68 00D00A02004402F041042           fcb     CR,LF," D/AB   X    Y    U    S     PC    DP CCR",CR,LF,0
 00FFFC6F 020020020058020020020
 00FFFC76 020059020020020020055
 00FFFC7D 020020020020053020020
 00FFFC84 020020020050043020020
 00FFFC8B 020020044050020043043
 00FFFC92 05200D00A000
 
                              nHEX4:
 00FFFC96 0BDFFD2D2                       jsr             HEX4
 00FFFC99 039                             rts
 
                              nXBLANK:
 00FFFC9A 0C6020                          ldb             #' '
 00FFFC9C 020DCF                          bra             OUTCH
 
                              ;------------------------------------------------------------------------------
                              ; Dump Memory
                              ;
                              ; Usage:
                              ;       $D FFFC12 8
                              ;
                              ; Dump formatted to look like:
                              ;               :FFFC12 012 012 012 012 555 666 777 888
                              ;
                              ;------------------------------------------------------------------------------
 
                              DumpMemory:
 00FFFC9E 08DE94                          bsr             GetTwoParams
 00FFFCA0 18E000000                       ldy             #0
                              dmpm2:
 00FFFCA3 017FFD42C                       lbsr    CRLF
*** warning 1: Long branch within short branch range could be optimized
 00FFFCA6 0C603A                          ldb             #':'
 00FFFCA8 017FFFDC2                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFCAB 0DC922                          ldd             mon_r1+2                                        ; output the address
 00FFFCAD 017FFF6EB                       lbsr    DispWordAsHex
*** warning 1: Long branch within short branch range could be optimized
 00FFFCB0 0C6020                          ldb             #' '
 00FFFCB2 017FFFDB8                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFCB5 08E000008                       ldx             #8                                                              ; number of bytes to display
                              dmpm1:
 00FFFCB8 01501B0E6B08921                 ldb             far [mon_r1+1],y
 00FFFCBD 031201                          iny
 00FFFCBF 017FFF6E2                       lbsr    DispByteAsHex                   ; display byte
*** warning 1: Long branch within short branch range could be optimized
 00FFFCC2 0C6020                          ldb             #' '                                                    ; followed by a space
 00FFFCC4 017FFFDA6                       lbsr    OUTCH
*** warning 1: Long branch within short branch range could be optimized
 00FFFCC7 0301FF                          dex
 00FFFCC9 026FED                          bne             dmpm1
 00FFFCCB 19C926                          cmpy    mon_r2+2
 00FFFCCD 025FD4                          blo             dmpm2
 00FFFCCF 016FFFDB5                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
 
                              ;------------------------------------------------------------------------------
                              ; Dump Registers
                              ;
                              ;       Usage:
                              ;               $DR
                              ;------------------------------------------------------------------------------
 
                              DumpRegs:
 00FFFCD2 0CCFFFC68                       ldd             #msgRegHeadings
 00FFFCD5 017FFF683                       lbsr    DisplayString
*** warning 1: Long branch within short branch range could be optimized
 00FFFCD8 08DFC0                          bsr             nXBLANK
 00FFFCDA 0DC900                          ldd             mon_DSAVE
 00FFFCDC 08DFB8                          bsr             nHEX4
 00FFFCDE 08DFBA                          bsr             nXBLANK
 00FFFCE0 0DC902                          ldd             mon_XSAVE
 00FFFCE2 08DFB2                          bsr             nHEX4
 00FFFCE4 08DFB4                          bsr             nXBLANK
 00FFFCE6 0DC904                          ldd             mon_YSAVE
 00FFFCE8 08DFAC                          bsr             nHEX4
 00FFFCEA 08DFAE                          bsr             nXBLANK
 00FFFCEC 0DC906                          ldd             mon_USAVE
 00FFFCEE 08DFA6                          bsr             nHEX4
 00FFFCF0 08DFA8                          bsr             nXBLANK
 00FFFCF2 0DC908                          ldd             mon_SSAVE
 00FFFCF4 08DFA0                          bsr             nHEX4
 00FFFCF6 08DFA2                          bsr             nXBLANK
 00FFFCF8 0DC90A                          ldd             mon_PCSAVE
 00FFFCFA 08DF9A                          bsr             nHEX4
 00FFFCFC 0DC90C                          ldd             mon_PCSAVE+2
 00FFFCFE 08DF96                          bsr             nHEX4
 00FFFD00 08DF98                          bsr             nXBLANK
 00FFFD02 0DC90E                          ldd             mon_DPRSAVE
 00FFFD04 0BDFFD2CE                       jsr             HEX2
 00FFFD07 08DF91                          bsr             nXBLANK
 00FFFD09 09690F                          lda             mon_CCRSAVE
 00FFFD0B 017FFD5C0                       lbsr    HEX2
*** warning 1: Long branch within short branch range could be optimized
 00FFFD0E 08DF8A                          bsr             nXBLANK
 00FFFD10 016FFFD74                       lbra    Monitor
*** warning 1: Long branch within short branch range could be optimized
 
                              ; Jump to code
                              jump_to_code:
 00FFFD13 08DE51                          bsr             GetHexNumber
 00FFFD15 01A010                          sei
 00FFFD17 1DE908                          lds             mon_SSAVE
 00FFFD19 0CCFFFD46                       ldd             #<jtc_exit
 00FFFD1C 034006                          pshs    d
 00FFFD1E 0CC000000                       ldd             #>jtc_exit
 00FFFD21 034004                          pshs    b
 00FFFD23 0DC912                          ldd             mon_numwka+2
 00FFFD25 034006                          pshs    d
 00FFFD27 0DC910                          ldd             mon_numwka
 00FFFD29 034006                          pshs    d
 00FFFD2B 0DC906                          ldd             mon_USAVE
 00FFFD2D 034006                          pshs    d
 00FFFD2F 0DC904                          ldd             mon_YSAVE
 00FFFD31 034006                          pshs    d
 00FFFD33 0DC902                          ldd             mon_XSAVE
 00FFFD35 034006                          pshs    d
 00FFFD37 09690E                          lda             mon_DPRSave
 00FFFD39 034002                          pshs    a
 00FFFD3B 0DC900                          ldd             mon_DSAVE
 00FFFD3D 034006                          pshs    d
 00FFFD3F 09690F                          lda             mon_CCRSAVE
 00FFFD41 034002                          pshs    a
 00FFFD43 0150350FF                       puls    far ccr,d,dpr,x,y,u,pc
                              jtc_exit:
 00FFFD46 034001                          pshs    ccr
 00FFFD48 0DD900                          std             mon_DSAVE
 00FFFD4A 09F902                          stx             mon_XSAVE
 00FFFD4C 19F904                          sty             mon_YSAVE
 00FFFD4E 0DF906                          stu             mon_USAVE
 00FFFD50 01F0B8                          tfr             dpr,a
 00FFFD52 09790E                          sta             mon_DPRSAVE
 00FFFD54 035002                          puls    a
 00FFFD56 09790F                          sta             mon_CCRSAVE
 00FFFD58 1DF908                          sts             mon_SSAVE
 00FFFD5A 1CE003FFF                       lds             #$3FFF
                                      ; todo set according to coreid
 00FFFD5D 07EFFFCD2                       jmp             DumpRegs
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              swi3_rout:
 00FFFD60 01A010                          sei
 00FFFD62 035002                          puls    a
 00FFFD64 09790F                          sta             mon_CCRSAVE
 00FFFD66 03507E                          puls    D,DPR,X,Y,U
 00FFFD68 0DD900                          std             mon_DSAVE
 00FFFD6A 09F902                          stx             mon_XSAVE
 00FFFD6C 19F904                          sty             mon_YSAVE
 00FFFD6E 0DF906                          stu             mon_USAVE
 00FFFD70 01F0B8                          tfr             dpr,a
 00FFFD72 09790E                          sta             mon_DPRSAVE
 00FFFD74 035006                          puls    D
 00FFFD76 0DD90A                          std             mon_PCSAVE
 00FFFD78 035006                          puls    D
 00FFFD7A 0DD90C                          std             mon_PCSAVE+2
 00FFFD7C 1DF908                          sts             mon_SSAVE
 00FFFD7E 1CE003FFF                       lds             #$3FFF
 00FFFD81 01C0EF                          cli
 00FFFD83 07EFFFCD2                       jmp             DumpRegs
                              swi3_exit:
 00FFFD86 01A010                          sei
 00FFFD88 1DE908                          lds             mon_SSAVE
 00FFFD8A 0DC90C                          ldd             mon_PCSAVE+2
 00FFFD8C 034006                          pshs    d
 00FFFD8E 0DC90A                          ldd             mon_PCSAVE
 00FFFD90 034006                          pshs    d
 00FFFD92 0DE906                          ldu             mon_USAVE
 00FFFD94 19E904                          ldy             mon_YSAVE
 00FFFD96 09E902                          ldx             mon_XSAVE
 00FFFD98 034070                          pshs    x,y,u
 00FFFD9A 09690E                          lda             mon_DPRSAVE
 00FFFD9C 034002                          pshs    a
 00FFFD9E 0DC900                          ldd             mon_DSAVE
 00FFFDA0 034006                          pshs    d
 00FFFDA2 09690F                          lda             mon_CCRSAVE
 00FFFDA4 034002                          pshs    a
 00FFFDA6 01F08A                          tfr             a,ccr
 00FFFDA8 01C0EF                          cli
 00FFFDAA 03B                             rti
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              irq_rout:
 00FFFDAB 017FFFC55                       lbsr    SerialIRQ       ; check for recieved character
*** warning 1: Long branch within short branch range could be optimized
 
                                      ; Reset the edge sense circuit in the PIC
 00FFFDAE 086002                          lda             #2                              ; Timer is IRQ #2
 00FFFDB0 0150B7FFFE3F006                 sta             PIC+6                   ; register 6 is edge sense reset reg    
 
 00FFFDB5 09779A                          sta             IrqSource               ; stuff a byte indicating the IRQ source for PEEK()
 00FFFDB7 0960DF                          lda             IrqBase                 ; get the IRQ flag byte
 00FFFDB9 044                             lsra
 00FFFDBA 09A0DF                          ora             IrqBase
 00FFFDBC 0840E0                          anda    #$E0
 00FFFDBE 0970DF                          sta             IrqBase
 
 00FFFDC0 01507CFFFE0006E                 inc             TEXTSCR+110             ; update IRQ live indicator on screen
                                      
                                      ; flash the cursor
                                      ; only bother to flash the cursor for the task with the IO focus.
 00FFFDC5 0150B6FFFFFFFE0                 lda             COREID
 00FFFDCA 091100                          cmpa    IOFocusID
 00FFFDCC 026021                          bne             tr1a
 00FFFDCE 096114                          lda             CursorFlash             ; test if we want a flashing cursor
 00FFFDD0 02701D                          beq             tr1a
 00FFFDD2 017FFF4A7                       lbsr    CalcScreenLoc   ; compute cursor location in memory
*** warning 1: Long branch within short branch range could be optimized
 00FFFDD5 01F002                          tfr             d,y
 00FFFDD7 0A6A09002000                    lda             $2000,y                 ; get color code $2000 higher in memory
 00FFFDDB 0D67C6                          ldb             IRQFlag                 ; get counter
 00FFFDDD 054                             lsrb
 00FFFDDE 044                             lsra
 00FFFDDF 044                             lsra
 00FFFDE0 044                             lsra
 00FFFDE1 044                             lsra
 00FFFDE2 054                             lsrb
 00FFFDE3 049                             rola
 00FFFDE4 054                             lsrb
 00FFFDE5 049                             rola
 00FFFDE6 054                             lsrb
 00FFFDE7 049                             rola
 00FFFDE8 054                             lsrb
 00FFFDE9 049                             rola
 00FFFDEA 0A7A0A000E00000                 sta             $E00000,y               ; store the color code back to memory
                              tr1a
 00FFFDEF 03B                             rti
 
                              ;------------------------------------------------------------------------------
                              ;------------------------------------------------------------------------------
                              nmi_rout:
 00FFFDF0 0150F6FFFFFFFE0                 ldb             COREID
 00FFFDF5 086049                          lda             #'I'
 00FFFDF7 08EE00028                       ldx             #TEXTSCR+40
 00FFFDFA 03A                             abx
 00FFFDFB 0A7804                          sta             ,x
 00FFFDFD 03B                             rti
 
                                      org             $FFFFF0
 00FFFFF0 012                             nop
 00FFFFF1 012                             nop
 00FFFFF2 FFFD60                          fcw             swi3_rout
 
                                      org             $FFFFF8
 00FFFFF8 FFFDAB                          fcw             irq_rout
 00FFFFFA FFF023                          fcw             start                           ; SWI
 00FFFFFC FFFDF0                          fcw             nmi_rout                ; NMI
 00FFFFFE FFF023                          fcw             start                           ; RST

22 warning(s) in pass 2.

SYMBOL TABLE
      ACIA 00 FFE30100  ACIA_CMD 00 00000002 ACIA_CTRL 00 00000003   ACIA_RX 00 00000000
 ACIA_STAT 00 00000001   ACIA_TX 00 00000000 ASCIITODECNYBBLE 02 00FFFBBA ASCIITOHEXNYBBLE 02 00FFFB92
 BIOS_SCREENS 00 17000000 BLANKLINE 02 00FFF219 BLKCPYDST 00 00000020 BLKCPYSRC 00 0000001C
   BLNKLN1 02 00FFF22C CALCSCREENLOC 02 00FFF27C CHARCOLOR 00 00000112 CHARINVEC 00 00000804
 CHAROUTVEC 00 00000800 CHECKPOINT 02 00FFF0E3 CLEARSCREEN 02 00FFF1D3 CLEARSCREENJMP 02 00FFD300
 COLORCODELOCATION 00 00000014 COPYSCREENTOVIRTUALSCREEN 02 00FFF1A3 COPYVIRTUALSCREENTOSCREEN 02 00FFF17B    COREID 00 FFFFFFE0
        CR 00 0000000D      CRLF 02 00FFD0D2     CRLF1 02 00FFD0D2    CRLFST 02 00FFF38F
       CS1 02 00FFF1E0       CS2 02 00FFF1F6     CS2V1 02 00FFF1AF       CS3 02 00FFF1FC
      CSL1 02 00FFF296     CTRLC 00 00000003     CTRLH 00 00000008     CTRLI 00 00000009
     CTRLJ 00 0000000A     CTRLK 00 0000000B     CTRLM 00 0000000D     CTRLS 00 00000013
     CTRLT 00 00000014     CTRLX 00 00000018 CURSORCOL 00 00000111 CURSORFLASH 00 00000114
 CURSORROW 00 00000110     CV2S1 02 00FFF187 DBGCHECKFORKEY 02 00FFF839 DBGGETKEY 02 00FFF83B
     DBGK1 02 00FFF853    DBGK10 02 00FFF8A0    DBGK11 02 00FFF8F9    DBGK12 02 00FFF8FF
    DBGK13 02 00FFF90B    DBGK14 02 00FFF91B    DBGK15 02 00FFF92A    DBGK16 02 00FFF935
    DBGK17 02 00FFF93E    DBGK18 02 00FFF941     DBGK2 02 00FFF83F     DBGK3 02 00FFF858
     DBGK4 02 00FFF864     DBGK5 02 00FFF870     DBGK7 02 00FFF880     DBGK8 02 00FFF886
     DBGK9 02 00FFF89A DBGKNOTALT 02 00FFF903 DBGKNOTCAPSLOCK 02 00FFF8D2 DBGKNOTCTRL 02 00FFF88A
 DBGKNOTNUMLOCK 02 00FFF8BB DBGKNOTRSHIFT 02 00FFF8A4 DBGKNOTSCROLLLOCK 02 00FFF8E9      DCCR 02 00FFF2AA
      DCLF 02 00FFF334     DCX10 02 00FFF2E4     DCX11 02 00FFF2F4     DCX12 02 00FFF2F0
     DCX13 02 00FFF300     DCX14 02 00FFF2A8      DCX3 02 00FFF322      DCX4 02 00FFF336
      DCX5 02 00FFF311      DCX6 02 00FFF2BB      DCX7 02 00FFF2B7      DCX8 02 00FFF2C8
      DCX9 02 00FFF2D5   DELAY3S 02 00FFF15E DISPBYTEASHEX 02 00FFF3A4 DISPDWORDASHEX 02 00FFF392
 DISPLAYCHAR 02 00FFF29E DISPLAYERR 02 00FFFBC8 DISPLAYSTRING 02 00FFF35B DISPLAYSTRINGCRLF 02 00FFF369
 DISPLAYSTRINGDX 02 00FFFBD2   DISPNYB 02 00FFF3BC  DISPNYB1 02 00FFF3CA DISPWORDASHEX 02 00FFF39B
    DLY3S1 02 00FFF161    DLY3S2 02 00FFF165     DMPM1 02 00FFFCB8     DMPM2 02 00FFFCA3
 DRAM_BASE 00 10000000    DSPJ1B 02 00FFF35F    DSRETB 02 00FFF367 DUMPMEMORY 02 00FFFC9E
  DUMPREGS 02 00FFFCD2    DUMRTS 02 00FFF022 FIRST_CORE 00 00000001   FREEMBX 02 00000002
   FREEMSG 02 00000006   FREETCB 00 0000078A GETHEXNUMBER 02 00FFFB66  GETRANGE 02 00FFFB4D
 GETSCREENLOCATION 02 00FFF233 GETTWOPARAMS 02 00FFFB34      GSL1 02 00FFF240     GTDC3 02 00FFFBC5
     GTHX3 02 00FFFBB7     GTHX5 02 00FFFB9D     GTHX6 02 00FFFBAA    GTHXN1 02 00FFFB8E
    GTHXN2 02 00FFFB71       HC1 02 00FFF259   HELPMSG 02 00FFFBE2      HEX2 02 00FFD2CE
      HEX4 02 00FFD2D2 HOMECURSOR 02 00FFF244 HOMECURSORJMP 02 00FFD308      ICC1 02 00FFF357
      ICC2 02 00FFF359      ICR1 02 00FFF349 IGNBLANKS 02 00FFFB2B IGNBLANKS1 02 00FFFB2B
 INCCURSORPOS 02 00FFF338 INCCURSORROW 02 00FFF347      INCH 02 00FFFA48     INCHE 02 00FFFA54
    INCHEK 02 00FFFA58   INCHEK1 02 00FFFA6C   INCHEK2 02 00FFFA6A   INCHEK3 02 00FFFA61
      INIT 02 00FFF072 INITSERIAL 02 00FFF95E IOFOCUSID 00 00000100 IOFOCUSNDX 00 00000100
   IRQBASE 00 000000DF   IRQFLAG 00 000007C6 IRQSOURCE 00 0000079A  IRQ_ROUT 02 00FFFDAB
  JTC_EXIT 02 00FFFD46 JUMP_TO_CODE 02 00FFFD13  KBDI0002 02 00FFF7C5  KBDI0004 02 00FFF80A
 KBDITRYAGAIN 02 00FFF7FE     KBGS1 02 00FFF778     KBGS2 02 00FFF770     KBGS3 02 00FFF761
     KEYBD 00 FFE30400  KEYBDACK 00 FFFFCC00  KEYBDBAD 00 FFFFCB00 KEYBDBLOCK 00 00000126
 KEYBDBUFFER 00 FFFFC000 KEYBDCHECKFORKEYDIRECT 02 00FFFA46 KEYBDCLOSE 02 00FFF95A  KEYBDCLR 00 FFE30402
 KEYBDCONTROLCODES 02 00FFF600 KEYBDECHO 00 FFFFCA00 KEYBDEXTENDEDCODES 02 00FFF680 KEYBDGETID 02 00FFF79C
 KEYBDGETSCANCODE 02 00FFF77D KEYBDGETSTATUS 02 00FFF761 KEYBDHEAD 00 FFFFC800   KEYBDID 00 00000124
 KEYBDINIT 02 00FFF7C0 KEYBDLOCKS 00 FFFFCD00 KEYBDOPEN 02 00FFF959 KEYBDREAD 02 00FFF95B
 KEYBDRECVBYTE 02 00FFF700 KEYBDSEEK 02 00FFF95D KEYBDSENDBYTE 02 00FFF719 KEYBDSETLED 02 00FFF789
 KEYBDTAIL 00 FFFFC900 KEYBDWAITTX 02 00FFF71F KEYBDWRITE 02 00FFF95C    KEYLED 00 00000122
 KEYSTATE1 00 00000120 KEYSTATE2 00 00000121     KGID1 02 00FFF7B9  KGNOTKBD 02 00FFF7BC
      KRB3 02 00FFF705      KRB4 02 00FFF715      KWT1 02 00FFF724      KWT2 02 00FFF735
      LEDS 00 FFE60000    LEDXIT 02 00FFF81E    LETTER 02 00FFD2C1        LF 00 0000000A
 MAX_TASKNO 00 0000003F  MONGETCH 02 00FFFB1B MONGETNONSPACE 02 00FFFB20   MONITOR 02 00FFFA87
 MONITORSTART 02 00FFFA82 MON_CCRSAVE 00 0000090F MON_DPRSAVE 00 0000090E MON_DSAVE 00 00000900
 MON_NUMWKA 00 00000910 MON_PCSAVE 00 0000090A    MON_R1 00 00000920    MON_R2 00 00000924
 MON_SSAVE 00 00000908 MON_USAVE 00 00000906 MON_XSAVE 00 00000902 MON_YSAVE 00 00000904
   MSCOUNT 00 FFFFFFE4 MSGBADKEYBD 02 00FFF82A    MSGERR 02 00FFFBDA MSGREGHEADINGS 02 00FFFC68
 MSGSTARTUP 02 00FFF0C2 MULTI_SIEVE 02 00FFF0F9 MULTI_SIEVE1 02 00FFF11C MULTI_SIEVE2 02 00FFF118
 MULTI_SIEVE3 02 00FFF106 MULTI_SIEVE4 02 00FFF12F     NHEX4 02 00FFFC96  NMAILBOX 02 00000004
 NMESERIAL 02 00FFFA3F   NMIBASE 00 000000DC  NMI_ROUT 02 00FFFDF0   NMSGBLK 02 00000008
  NOTRXINT 02 00FFFA3E   NXBLANK 02 00FFFC9A    ONEKEY 02 00FFD1DC     OUTCH 02 00FFFA6D
     PCRLF 02 00FFF37B     PDATA 02 00FFF388       PIC 00 FFE3F000    PICPTR 00 00000028
     PRINT 02 00FFF385   PROMPT1 02 00FFFAA2   PROMPT2 02 00FFFAD7   PROMPT3 02 00FFFA95
   PROMPTC 02 00FFFAE2   PROMPTD 02 00FFFAEE   PROMPTF 02 00FFFAFA   PROMPTJ 02 00FFFB0D
  PROMPTLN 02 00FFFA8E   PROMPTR 02 00FFFB12    PSTRNG 02 00FFF377     QNDX0 00 00000780
     QNDX1 00 00000782     QNDX2 00 00000784     QNDX3 00 00000786     QNDX4 00 00000788
    RAMERR 02 00FFE02C   RAMTEST 02 00FFE000  RAMTEST1 02 00FFE00D  RAMTEST3 02 00FFE017
  ROMTORAM 02 00FFF0E9 ROMTORAM1 02 00FFF0EF RUNNINGID 00 00800000 RUNNINGTCB 06 00000000
 SCREENCOLOR 00 00000113 SCREENLOCATION 00 00000010 SCREENLOCATION2 00 00000018  SCROLLUP 02 00FFF1FE
    SCRUP1 02 00FFF20B    SC_ALT 00 00000011      SC_C 00 00000021 SC_CAPSLOCK 00 00000058
   SC_CTRL 00 00000014    SC_DEL 00 00000071 SC_EXTEND 00 000000E0    SC_F12 00 00000007
  SC_KEYUP 00 000000F0 SC_NUMLOCK 00 00000077 SC_RSHIFT 00 00000059 SC_SCROLLLOCK 00 0000007E
      SC_T 00 0000002C    SC_TAB 00 0000000D      SC_Z 00 0000001A SERHEADRCV 00 00000131
 SERHEADXMIT 00 00000136  SERHZERO 00 00000130 SERIALGETCHAR 02 00FFF97B SERIALIRQ 02 00FFFA03
 SERIALPEEKCHAR 02 00FFF9AC SERIALPEEKCHARDIRECT 02 00FFF9C3 SERIALPUTCHAR 02 00FFF9DD SERIALRCVCOUNT 02 00FFF9F4
 SERRCVBUF 00 00BFF000 SERRCVXOFF 00 00000140 SERRCVXON 00 00000139 SERTAILRCV 00 00000133
 SERTAILXMIT 00 00000138  SERTZERO 00 00000132 SETKEYBOARDECHO 02 00FFFA71      SGC2 02 00FFF994
 SGCNOCHARS 02 00FFF9A5    SGCXIT 02 00FFF9A8 SHIFTEDSCANCODES 02 00FFF500 SHIFTLEFT5 02 00FFF170
 SHL_NUMWKA 02 00FFFB5D SHOWSPRITES 02 00FFFA77     SIEVE 02 00FFF133    SIEVE1 02 00FFF14B
    SIEVE2 02 00FFF147    SIEVE3 02 00FFF138    SIEVE4 02 00FFF15A  SIRQ0001 02 00FFFA15
 SIRQNXTBYTE 02 00FFFA03 SIRQRXFULL 02 00FFFA3E SKIP_INIT 02 00FFF08F   SPC0001 02 00FFF9E1
  SPCD0001 02 00FFF9D7 SPCNOCHARS 02 00FFF9BD    SPCXIT 02 00FFF9C0 SPRITE_CTRL 00 FFE10000
 SPRITE_EN 00 000003C0    SRCXIT 02 00FFFA02       ST1 02 00FFF07C       ST3 02 00FFF069
       ST6 02 00FFF030       ST7 02 00FFF03A       ST8 02 00FFF03A     START 02 00FFF023
    STRPTR 00 00000024 SWI3_EXIT 02 00FFFD86 SWI3_ROUT 02 00FFFD60       TAB 00 00000009
 TCB_CURSORCOL 00 00000021 TCB_CURSORROW 00 00000020  TCB_HJCB 00 0000001C TCB_HWAITMBX 00 00000022
 TCB_IOF_NEXT 00 0000002C TCB_IOF_PREV 00 00000030 TCB_MBQ_NEXT 00 00000024 TCB_MBQ_PREV 00 00000028
 TCB_MMU_MAP 00 00000038 TCB_MSGPTR_D1 00 00000014 TCB_MSGPTR_D2 00 00000018 TCB_NXTRDY 00 00000000
 TCB_NXTTCB 00 00000008 TCB_PRIORITY 00 00000010 TCB_PRVRDY 00 00000004 TCB_SPSAVE 00 00000034
 TCB_STATUS 00 0000001E TCB_TIMEOUT 00 0000000C TEXTCLOSE 02 00FFF1CF  TEXTOPEN 02 00FFF1CE
  TEXTREAD 02 00FFF1D0   TEXTREG 00 FFE0DF00   TEXTSCR 00 FFE00000  TEXTSEEK 02 00FFF1D2
 TEXTWRITE 02 00FFF1D1 TEXT_COLS 00 00000000 TEXT_CURPOS 00 00000022 TEXT_ROWS 00 00000001
 TIMEOUTLIST 00 0000078C      TR1A 02 00FFFDEF      UCP1 02 00FFF27A UNSHIFTEDSCANCODES 02 00FFF400
 UPDATECURSORPOS 02 00FFF25B  W10_0001 02 00FFF740 W300_0001 02 00FFF754  WAIT10MS 02 00FFF739
 WAIT300MS 02 00FFF74D    XBLANK 02 00FFD0AF      XOFF 00 00000013       XON 00 00000011
368 SYMBOLS

0 error(s), 196 warning(s)

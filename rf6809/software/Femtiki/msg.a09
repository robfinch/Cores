; ============================================================================
;        __
;   \\__/ o\    (C) 2020-2022  Robert Finch, Waterloo
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; BSD 3-Clause License
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; 1. Redistributions of source code must retain the above copyright notice, this
;    list of conditions and the following disclaimer.
;
; 2. Redistributions in binary form must reproduce the above copyright notice,
;    this list of conditions and the following disclaimer in the documentation
;    and/or other materials provided with the distribution.
;
; 3. Neither the name of the copyright holder nor the names of its
;    contributors may be used to endorse or promote products derived from
;    this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
; ============================================================================

;	bss
;	align 4
;FreeMSG	dw	0
;msgs:
;	fill.b	MSG_SIZE*1024,0
;mbxs:
;	fill.b	MBX_SIZE*32,0
;mbxs_end:

;------------------------------------------------------------------------------
; Convert a mailbox handle to a pointer.
;------------------------------------------------------------------------------

MBXHandleToPointer:
	decd
	muld	#MBX_SIZE
	tfr		w,d
	addd	#32
	addd	#mailboxes
	rts

;------------------------------------------------------------------------------
; Convert a message handle to a pointer.
;------------------------------------------------------------------------------

MSGHandleToPointer:
	decd
	muld	#MSG_SIZE
	tfr		w,d
	addd	#32
	addd	#messages
	rts

;------------------------------------------------------------------------------
; Remove the task from the list of tasks waiting at the mailbox.
;
; Parameters:
;		D = task id
;------------------------------------------------------------------------------

MbxRemoveTask:
	lbsr	TCBHandleToPointer
	tfr		d,x
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	ldw		TCBMbxNext,x
	ldd		TCBMbxPrev,x
	beq   mrtAtHead
	pshs	d											; save D
	lbsr	TCBHandleToPointer		; convert to pointer
	tfr		d,y
	stw		TCBMbxNext,y					; prev->next = next
	tfr		w,d
	beq		mrtAtTail
	lbsr	TCBHandleToPointer
	tfr		d,y
	puls	d
	std		TCBMbxPrev,y					; next->prev = prev
	clrd
	std   TCBMbxPrev,x
	std  	TCBMbxNext,x
  lbra	UnlockSysSemaphore
mrtAtHead:
	ldw		TCBWaitMbx,x					; get mailbox handle
	cmpw	#1										; is the handle good?
	lblo	UnlockSysSemaphore
	cmpw	#NR_MBX
	lbhs	UnlockSysSemaphore
	exg		w,d
	bsr		MBXHandleToPointer		; convert to pointer
	tfr		d,y
	cmpw	MBX_TQHEAD,y					; should be the same
	lbne	UnlockSysSemaphore
	exg		w,d
	tstd
	beq   mrtTqEmpty
	ldd		TCBMbxNext,x
	std		MBX_TQHEAD,y					; mailbox TQ head = next
	lbsr	TCBHandleToPointer
	tfr		d,y
	clrd
	std		TCBMbxPrev,y					; next->prev = null
mrtTqEmpty:
	clrd
	std   TCBMbxPrev,x
	std  	TCBMbxNext,x
	lbra	UnlockSysSemaphore
mrtAtTail:
	ldw		TCBWaitMbx,x
	cmpw	#1										; is the handle good?
	lblo	UnlockSysSemaphore
	cmpw	#NR_MBX
	lbhs	UnlockSysSemaphore
	exg		w,d
	bsr		MBXHandleToPointer
	tfr		d,y
	cmpw	MBX_TQTAIL,y
	lbne	UnlockSysSemaphore
	exg		w,d
	tstd
	beq		mrtTqEmpty
	ldd		TCBMbxPrev,x
	std		MBX_TQTAIL,y
	lbsr	TCBHandleToPointer
	tfr		d,y
	clrd
	std		TCBMbxNext,y
	bra		mrtTqEmpty

;------------------------------------------------------------------------------
; FMTK_AllocMbx
;   Allocate a mailbox. Get the mailbox off the free list. If there are no
; free mailboxes then allocate a block of new mailboxes.
;
; Parameters:
;		D = app id of owner
; Returns:
;		X = E_Ok
;   D = mailbox handle
;------------------------------------------------------------------------------

FMTK_AllocMbx:
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	ldd		FreeMBX
  bne   0002f
  lbsr	UnlockSysSemaphore
  ldx		#E_NotAlloc
  lbsr	FMTK_RetErr
0002: 
	tfr		d,w										; save mailbox handle
	bsr		MBXHandleToPointer
	tfr		d,u
	ldd		MBX_LINK,u
	std		FreeMBX
	lbsr	UnlockSysSemaphore
	clrd
	std		MBX_LINK,u
	stb   MBX_TQHEAD,u
	stb   MBX_TQTAIL,u
	std   MBX_MQHEAD,u
	std   MBX_MQTAIL,u
	lbsr	GetRunningTCBPtr
	tfr		d,x
	ldd		TCBxAcca,x
	stb		MBX_OWNER,u
	stw		TCBxAcca,x
	ldd		#E_Ok
	std		TCBxXR,x
	lbra	OSExit

;------------------------------------------------------------------------------
; Dequeue any waiting tasks returning to them a E_NoMsg status and removing
; them from the timeout list as well. Then move any messages that are queued
; back to the free message list.
;
; Parameters:
;		D = mailbox handle
;------------------------------------------------------------------------------

FMTK_FreeMbx:
	cmpd	#1
	blo		fmBadMbx
	cmpd	#NR_MBX
	bhs		fmBadMbx
	tfr		d,w											; save D in W
  bsr		MBXHandleToPointer
  tfr		d,x											; X = pointer to mailbox being freed
0004:
  ldd		#-1
  lbsr	LockSysSemaphore
  beq		0004b
  ldd   FreeMBX
  std   MBX_LINK,x
  stw   FreeMBX
FreeMbx1:
	ldb		MBX_TQHEAD,x
0002:
  tstb
	beq 	0001f
	clra
	lbsr	TCBHandleToPointer
	tfr		d,x
	aim		#TS_WAITMSG^$FFF,TCBStatus,x	; no longer waiting
	clra
	ldb   TCBtid,x
	tim		#TS_TIMEOUT,TCBStatus,x   ; Is the task timing out?
	beq	  0003f
	lbsr	RemoveFromTimeoutList			; Remove from the timeout list
0003:
	lbsr 	InsertIntoReadyQueue
	ldx		#E_NoMsg					; but no message
	stx		TCBxXR,x					; XR = E_NoMsg
	ldb   TCBMbxNext,x
	pshs	b
	lbsr	TCBHandleToPointer
	tfr		d,u
	clrd
	std   TCBMbxNext,x
	std   TCBMbxPrev,x
	tfr		u,x
	puls	b
	bra   0002b
0001:
  clr   MBX_TQHEAD,x
  clr   MBX_TQTAIL,x
  ; Now free any messages queued at the mailbox. We are crafty here and
  ; don't follow any links. Instead the entire chain of messages queued
  ; is transferred to the free message list.
  ldd   MBX_MQTAIL,x 				; get pointer to last message
  bsr		MSGHandleToPointer
  tfr		d,y
  ldd   FreeMSG
  std   MSG_LINK,y   				; link current free list onto it
  ldd   MBX_MQHEAD,x
  std   FreeMSG         		; set new head of free list
  lbsr	UnlockSysSemaphore
  lbra	FMTK_RetOK
fmBadMbx:
	ldx		#E_BadMbx						; return null pointer if bad mailbox
	lbra	FMTK_RetErr


;------------------------------------------------------------------------------
; AllocMsg
;
; This internally used routine to provide message space to store data in.
; First the free list is checked to see if any messages are available.
; If there are no message available then a block of 408 messages is allocated
; and added to the free list. 408 messages fit nicely into a 16kB memory page.
;
; Parameters:
;   none
; Returns:
;   X = status (E_Ok)
;   D = message handle
;------------------------------------------------------------------------------

AllocMsg:
  ldd  	FreeMSG
  beq   0004f
	pshs	d								; save MSG handle
	bsr		MSGHandleToPointer
	tfr		d,x
  ldw   MSG_LINK,x			; set new head of free message list
  stw   FreeMSG
  clrw
  stw   MSG_LINK,x
  puls	d								; return MSG handle
  ldx		#E_Ok
  rts
0004:
  ldx   #E_NotAlloc
  rts

FMTK_AllocMsg:
0002:
	ldd		#-1
  lbsr	LockSysSemaphore
  beq		0002b
  bsr		AllocMsg
  lbsr	UnlockSysSemaphore
  lbra	FMTK_RetDX

;------------------------------------------------------------------------------
; FreeMSG
;
; This internally used routine frees a message previously allocated with
; AllocMsg. The message is added to the free list. Must be called only
; when system semaphore is locked.
;
; Parameters:
;   D = message handle
; Returns:
;   none
;------------------------------------------------------------------------------

FreeMSGRout:
  pshs	d,y
  bsr		MSGHandleToPointer
  tfr		d,y
  ldd   FreeMSG
  std   MSG_LINK,y
  puls	d,y
  std   FreeMSG
  rts

;------------------------------------------------------------------------------
; Send a message to a mailbox.
; The message will be broadcast to any waiting tasks. Waiting tasks will then
; be moved to the ready list. If there are no waiting tasks then the message
; is queued at the mailbox.
; The system semaphore must be locked already when this routine is called.
;
; Register Usage:
; Modifies:
; Parameters:
;		D = mailbox handle
;		X = message d1
;		Y = message d2
;		U = message d3
;------------------------------------------------------------------------------

ISendMsg:
  bsr		MBXHandleToPointer
  tfr		d,u
	ldb		MBX_TQHEAD,u
	beq		0001f
	lbsr	TCBHandleToPointer
	tfr		d,x									; X = pointer to TCB to dequeue
	lbsr	GetRunningTCBPtr
	tfr		d,y									; Y = pointer to running TCB
	ldw		TCBxXR,y						; copy message to TCB
	stw		TCBMsgD1,x
	ldw		TCBxYR,y
	stw		TCBMsgD2,x
	ldw		TCBxUSP,y
	stw		TCBMsgD3,x
	oim		#TS_MSGRDY,TCBStatus,x
	lde   TCBMbxNext,x
	ste   MBX_TQHEAD,u
	clr   TCBMbxNext,x
	clr   TCBMbxPrev,x
	ldb  	TCBtid,x
	lbsr	InsertIntoReadyQueue
	ldx		#E_Ok
	rts
0001:
  bsr		AllocMsg
  cmpx	#E_Ok
	bne	  0002f			    ; message available?
	pshs	d										; save message handle
	bsr		MSGHandleToPointer
	tfr		d,x
	lbsr	GetRunningTCBPtr
	tfr		d,y
	ldw		TCBxXR,y						; copy message to TCB
	stw		MSG_D1,x
	ldw		TCBxYR,y
	stw		MSG_D2,x
	ldw		TCBxUSP,y
	stw		MSG_D3,x
	ldd		MBX_MQTAIL,u
	lbsr	MSGHandleToPointer
	tfr		d,x
	beq	  0003f
	puls	d										; get message handle
	std		MSG_LINK,x					; tail->link = msg
	std		MBX_MQTAIL,u				; mqtail = msg
	ldx		#E_Ok
	rts
0003:
	puls	d
	std		MBX_MQHEAD,u
	std		MBX_MQTAIL,u
	ldx		#E_Ok
	rts
0002:
	ldx		#E_NoMsg
	rts

FMTK_SendMsg:
	cmpd	#1
	blo		0001f
	cmpd	#NR_MBX
	bhs		0001f
	pshs	d
0002:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0002b
	puls	d
  jsr   ISendMsg
  lbsr	UnlockSysSemaphore
  lbra	FMTK_RetOK
0001:
  ldx   #E_BadMbx
  lbra	FMTK_RetDX

;------------------------------------------------------------------------------
; Parameters:
;		D = mailbox handle
;		X = pointer where to put message D1
;		Y = pointer where to put message D2
;		U = pointer where to put message D3
;		E = 1 = remove from queue
;------------------------------------------------------------------------------

PeekMsg:
	lbsr	GetRunningTCBPtr
	tfr		d,x
	ldd		TCBxAcca,x
	bsr		MBXHandleToPointer
	tfr		d,y
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	ldd		MBX_MQHEAD,y
	beq	  0002f
	pshs	d
	bsr		MSGHandleToPointer
	tfr		d,u
	tst   TCBxAcce,x
	beq 	0003f					; remove from queue?
	ldd		MSG_LINK,u
	std		MBX_MQHEAD,y
	; This is done here only because interrupts are disabled
	puls	d
	bsr  	FreeMSGRout
	bra		0005f
0003:
	puls	d
0005:
  tst   TCBxXR,x
	beq   0004f
	ldw		MSG_D1,u
	stw		[TCBxXR,x]
0004:
  tst   TCBxYR,x
	beq	  0006f
	ldw		MSG_D2,u
	stw		[TCBxYR,x]
0006:
  tst   TCBxUSP,x
	beq	  0007f
	ldw		MSG_D3,u
	stw		[TCBxUSP,x]
0007:
	ldx		#E_Ok
	lbsr	UnlockSysSemaphore
	rts
0002:
	lbsr	UnlockSysSemaphore
	ldx		#E_NoMsg
	rts

;------------------------------------------------------------------------------
; PeekMsg will check for a message at a mailbox optionally dequeuing it.
; If no message is available PeekMsg returns to the caller with a E_NoMsg
; status.
;
; Parameters:
;		D = mailbox handle
;		X = pointer where to put message D1
;		Y = pointer where to put message D2
;		U = pointer where to put message D3
;		E = 1 = remove from queue
;------------------------------------------------------------------------------

FMTK_PeekMsg:
	lbsr	GetRunningTCBPtr
	tfr		d,x
	ldd		TCBxAcca,x
  cmpd	#1
  blo		0001f
  cmpd	#NR_MSG
  bhs		0001f
	bsr 	PeekMsg
	lbra	FMTK_RetDX
0001:
  ldx   #E_BadMbx
  lbra	FMTK_RetDX

;------------------------------------------------------------------------------
; Calling WaitMsg will cause the task to be queued at the mailbox and a task
; switch to occur if there are no messages at the mailbox.
;
; Parameters:
;		D = mailbox handle
;		X = pointer where to put message D1
;		Y = pointer where to put message D2
;		U = pointer where to put message D3
;		W = time limit
;------------------------------------------------------------------------------

FMTK_WaitMsg:
	lbsr	GetRunningTCBPtr
	tfr		d,x
	ldd		TCBxAcca,x
	cmpd	#1
	blo		0001f
	cmpd	#NR_MBX
	bhs		0001f
	leas	-4,s
	std		,s
	ldw		TCBxAcce,x
	stw		2,s
	ldb		#1
	stb		TCBxAcce,x					; dequeue messages
	ldd		,s
	bsr 	PeekMsg							; check for a message, return if available
	ldw		2,s
	stw		TCBxAcce,x
	cmpx	#E_NoMsg
	beq		0002f
	leas	4,s
	lbra	FMTK_RetDX					; no message? Then go queue task
0002:
  bsr		MBXHandleToPointer
  tfr		d,x
  lbsr	GetRunningTCBPtr
  tfr		d,y
  lbsr	LockSysSemaphore
	ldb		MBX_TQTAIL,x				; get waiting task list tail
	beq   0003f
  stb   TCBMbxPrev,y 				; add task onto tail of waiting list
  lbsr	TCBHandleToPointer
  tfr		d,u
  ldb		RunningID
  stb   TCBMbxNext,u 				; tail->next = tid tcb pointer
  stb   MBX_TQTAIL,x
  bra   0004f
0003:	; Queue empty
	ldb		RunningID
  stb   MBX_TQHEAD,x
  stb   MBX_TQTAIL,x
0004:
	oim		#TS_WAITMSG,TCBStatus,y	; set waiting for message status
	aim		#TS_READY^$FFF,TCBStatus,y	; not ready
	ldd		TCBxAcca,y
	std		TCBWaitMbx,y				; set mailbox task is waiting for
	lbsr	UnlockSysSemaphore
	lbra	FMTK_Sleep          ; Continue by switching tasks
0001:
  ldx   #E_BadMbx
  lbra	FMTK_RetDX

MsgFinalizer:
  rts

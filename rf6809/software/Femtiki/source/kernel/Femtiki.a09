; ============================================================================
;        __
;   \\__/ o\    (C) 2020-2022  Robert Finch, Waterloo
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; BSD 3-Clause License
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; 1. Redistributions of source code must retain the above copyright notice, this
;    list of conditions and the following disclaimer.
;
; 2. Redistributions in binary form must reproduce the above copyright notice,
;    this list of conditions and the following disclaimer in the documentation
;    and/or other materials provided with the distribution.
;
; 3. Neither the name of the copyright holder nor the names of its
;    contributors may be used to endorse or promote products derived from
;    this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
; ============================================================================

include "d:\cores2022\rf6809\software\fmtk\config.a09"
include "d:\cores2022\rf6809\software\fmtk\const.a09"
include "d:\cores2022\rf6809\software\fmtk\types.a09"
;OPT include "d:\cores2022\rf6809\software\boot\io_equates.a09"
include "d:\cores2022\rf6809\software\fmtk\source\kernel\Femtiki_vars.a09"

IRQFlag			EQU		$FFC012

;------------------------------------------------------------------------------
; Operating system call dispatcher.
; On entry, the task state has been saved including the system stack pointer,
; in the task control block.
;------------------------------------------------------------------------------
	org		$FFFFF9000
OSCall:
	inc		OSActive
	oim		#$400,MMU_OKEY	; set access to OS variables
	lds		#$FFC7FF				; set stack for OS calls
	bsr		GetRunningTCBPtr
	tfr		d,x
	ldb		[TCBxPC+1,x]		; Grab op byte at PC location
	inc		TCBxPC+2,x			; Increment PC
	bne		0001f
	inc		TCBxPC+1,x
	bne		0001f
	inc		TCBxPC,x
0001:
	cmpb	#NUM_OSFUNC			; make sure function number in range
	bhs		OSCallBadFunc
	aslb									; *2 bytes per address
	ldx		#OSCallTbl
	abx
	jmp		[,x]						; jmp [b,x] does not assemble correctly here
OSCallBadFunc:
  ldx  	#E_Func

FMTK_RetErr:
	tfr		x,u
	bsr		GetRunningTCBPtr
	tfr		d,x
	stu		TCBxXR,x

  ; Fall through into exit code.

;------------------------------------------------------------------------------
; Operating system exit point.
;
; On the OS call entry, the OS variable area was mapped into the address
; space. This was okay to do since the app was not active. When exiting
; back to the app the OS vars need to be unmapped. The OS vars will still
; be present in the map until unmapped.
;
; Parameters:
;		X = pointer to TCB to restore.
;------------------------------------------------------------------------------

OSExit:
	ldb		TCBappid,x
	bsr		GetAppMid
	ldb		#$C00							; MMU enable bit
	; As soon as the operate key is set memory will be mapped according
	; to the task being returned to. That means the current stack pointer
	; is invalid and needs to be loaded from the TCB.
	stb		MMU_OKEY					; need access to OS vars to restore context
	clr		OSSEMA+1				; unlock the system semaphore
	aim		#$BFF,MMU_OKEY	; disable access to OS variables
	orcc	#$290						; disable interrupts
	dec		OSActive
	jtt		,x							; this should set interrupts back

;------------------------------------------------------------------------------
; Some useful OS return points.
;------------------------------------------------------------------------------

FMTK_RetDX:
FMTK_RetXD:
	tfr		x,u
	tfr		d,w
	bsr		GetRunningTCBPtr
	tfr		d,x
	stw		TCBxAcca,x
	stu		TCBxXR,x
	bra		OSExit

FMTK_RetOKQ:
	tfr		d,u
	tfr		w,y
	bsr		GetRunningTCBPtr
	tfr		d,x
	stu		TCBxAcca,x
	sty		TCBxAcce,x
	ldd		#E_Ok
	std		TCBxXR,x
	bra		OSExit

FMTK_RetOKD:
	tfr		d,u
	bsr		GetRunningTCBPtr
	tfr		d,x
	stu		TCBxAcca,x
	ldd		#E_Ok
	std		TCBxXR,x
	bra		OSExit

FMTK_RetOK:
	bsr		GetRunningTCBPtr
	tfr		d,x
	ldd		#E_Ok
	std		TCBxXR,x
	bra		OSExit

;------------------------------------------------------------------------------
; Map operating system variables into app address space
;------------------------------------------------------------------------------

MapOSVars:
	ldb		MMU_OKEY
	stb		MMU_AKEY
	clrd
	tfr		d,x
	ldd		#$000E00
MapOSVars1:
	std		MMU,x
	inca
	leax	2,x
	cmpx	#512
	blo		MapOSVars1
	rts

;------------------------------------------------------------------------------
; Unmap the operating system variables.
;------------------------------------------------------------------------------

UnmapOSVars:
	ldb		MMU_OKEY
	stb		MMU_AKEY
	clrd
	tfr		d,x
UnmapOSVars1:
	std		MMU,x
	leax	2,x
	cmpx	#512
	blo		UnmapOSVars1
	rts

;------------------------------------------------------------------------------
; Got the AppID, now get the mid
;
; Parameters:
;		B = app id
;------------------------------------------------------------------------------

GetAppMid:
	bsr		ACBHandleToPointer
	tfr		d,y
	ldb		ACBmid,y
	rts

;OSCallTbl2:
;  fcw    SchedulerIRQ
;  fcw    IStartTask
;  fcw    ISendMsg
;  fcw    ISleep

OSCallTbl:
	fcw		FMTK_Initialize					; 0
	fcw		FMTK_StartTask					; 1
	fcw		FMTK_ExitTask
	fcw		FMTK_KillTask
;	fcw		FMTK_SetTaskPriority
	fcw    OSCallBadFunc
	fcw		FMTK_Sleep							; 5
	fcw		FMTK_AllocMbx
	fcw		FMTK_FreeMbx
;	fcw		FMTK_PostMsg
	fcw    OSCallBadFunc
	fcw		FMTK_SendMsg
	fcw		FMTK_WaitMsg						; 10
	fcw		FMTK_PeekMsg
;	fcw		FMTK_StartApp           ; 12
;	fcw		FMTK_ExitApp            ; 13
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw		FMTK_GetCurrentTid
;	fcw		FMTK_TCBFinalizerExit   ; 15
;	fcw		FMTK_KillApp
;	fcw		FMTK_RunAsOS            ; 17
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw		FMTK_GetTaskAppId       ; 18
	fcw		FMTK_SetTaskId          ; 19
;	fcw		FMTK_HasIOFocus					; 20
;	fcw		FMTK_SwitchIOFocus			; 21
;	fcw		FMTK_ReleaseIOFocus			; 22
;	fcw		FMTK_ForceReleaseIOFocus	; 23
;	fcw		FMTK_RequestIOFocus			; 24
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
;	fcw		FMTK_MapOSVars          ; 25
;	fcw		FMTK_IO									; 26
;	fcw    FMTK_GetDCBField        ; 27
;	fcw    FMTK_SetDCBField        ; 28
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    FMTK_GetAppTaskId       ; 29
	fcw    FMTK_SetTaskAppId       ; 30
	fcw    OSCallBadFunc
;	fcw    GetPamBit               ; 32
	fcw    OSCallBadFunc
;	fcw    FetchMemoryWord         ; 33
	fcw    OSCallBadFunc
;	fcw    Monitor                 ; 34
	fcw    OSCallBadFunc
	fcw    GetIRQFlag              ; 35
	fcw    SetIRQFlag              ; 36
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc
	fcw    OSCallBadFunc         	 ; 40
	fcw    OSCallBadFunc           ; 41
	fcw    OSCallBadFunc           ; 42
	fcw    OSCallBadFunc
	fcw    FemtikiTimerIRQ         ; 44
;	fcw    FMTK_Reschedule         ; 45
	fcw    OSCallBadFunc
	fcw    FMTK_GetCurrentMid      ; 46
	fcw    FMTK_GetRunningTCBPointer	; 47
	fcw		OSCallBadFunc							 ; 48
	fcw		DumpTCBs								; 49

NUM_OSFUNC	EQU		(*-OSCallTbl) / 2

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FMTK_Initialize:
  lbsr  FMTK_Init
  bra		FMTK_RetOK
 
;------------------------------------------------------------------------------
; Get the task id for the currently running task.
;
; Returns:
;		D = task id
;------------------------------------------------------------------------------

GetCurrentTid:
	ldb		RunningID
	clra
	rts

FMTK_GetCurrentTid:
	ldb		RunningID
	clra
	bra		FMTK_RetOKD

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

GetIRQFlag:
  ldb   IRQFlag
  clra
  bra		FMTK_RetOKD

SetIRQFlag:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBxAccb,x
  stb   IRQFlag
  bra		FMTK_RetOK

; Accessors
; Parameters:
;	 	D = task id
FMTK_GetTaskAppId:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBxAccb,x
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBappid,x
	clra
	bra		FMTK_RetOKD

; Parameters:
;		D = task id
;		E = App id
;
FMTK_SetTaskAppId:
	ldb		2,s
	lda		#192
	mul											; B * 192
	addd	#32								; add in collection header (object) size
	addd	#tcbs
	tfr		d,x
	lde		3,s
	ste		TCBappid,x
	bra		FMTK_RetOK

FMTK_GetAppTaskId:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBxAccb,x
	clra
	bsr		ACBHandleToPointer
	tfr		d,x
	ldb		ACBTask,x
	clra
	bra		FMTK_RetOKD

; The following only really needed by startup code, otherwise the task id
; is completely managed by the OS.
FMTK_SetTaskId:
  ; Should get the id and see if it's currently zero (unset).
  ; but this would be more code bloat.
  ldb		2,s
  stb		RunningID
  bra		FMTK_RetOK

FMTK_GetCurrentMid:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBappid,x
	clra
	bsr		ACBHandleToPointer
	tfr		d,y
	ldb		ACBmid,y
	clra
	bra		FMTK_RetOKD

; Parameters:
;		B = task id
;
FMTK_GetMid:
	pshs	x
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBappid,x
	clra
	bsr		ACBHandleToPointer
	tfr		d,x
	ldb		ACBmid,x
	puls	x,pc
	
;------------------------------------------------------------------------------
; Get a pointer to the TCB for the currently running task.
;
; Parameters:
;		none
; Returns:
;		D = pointer to running TCB
;------------------------------------------------------------------------------

GetRunningTCBPtr:
	ldb		RunningID
	; fall through into conversion code

;------------------------------------------------------------------------------
; Convert a TCB handle into a pointer to the corresponding TCB.
; Handles vary from 1 to 4095.
;------------------------------------------------------------------------------

TCBHandleToPointer:
	decb
	lda		#TCB_SIZE
	mul
	addd	#OBJ_SIZE
	addd	#tcbs
	rts

FMTK_GetRunningTCBPointer:
	bsr		GetRunningTCBPtr
	tfr		d,x
	std		TCBxAcca,x
	bra		FMTK_RetOKD

;------------------------------------------------------------------------------
; Convert an ACB handle into a pointer to the corresponding ACB.
; Handles vary from 1 to 32.
;------------------------------------------------------------------------------

ACBHandleToPointer:
	decb
	clra
	muld	#ACB_SIZE
	tfr		w,d
	addd	#acbs
	rts

;------------------------------------------------------------------------------
; Convert a TCB pointer into a handle for the TCB.
;------------------------------------------------------------------------------

TCBPointerToHandle:
	subd	#tcbs
	subd	#OBJ_SIZE
	divd	#TCB_SIZE
	incb
	rts

;				while (TimeoutList > 0 && TimeoutList < NR_TCB) {
;					if (tcbs[TimeoutList].timeout<=0)
;						InsertIntoReadyList(PopTimeoutList());
;					else {
;						tcbs[TimeoutList].timeout = tcbs[TimeoutList].timeout - missed_ticks - 1;
;						missed_ticks = 0;
;						break;
;					}
;				}

DecrementTimeout:
	ldb		TimeoutList
	beq		0001f
	bmi		0001f
	cmpb	#NR_TCB
	bhs		0001f
	bsr		TCBHandleToPointer
	tfr		d,x										; X = pointer to TCB
	tst		TCBTimeout,x					; 
	beq		0002f
	bpl		0003f
	bmi		0004f
0002:
	tst		TCBTimeout+2,x
	bne		0003f
0004:
	bsr		PopTimeoutList
	bra		InsertIntoReadyQueue
0003:
	sec
	ldd		TCBTimeout+2,x
	sbcd	missed_ticks
	std		TCBTimeout+2,x
	ldd		TCBTimeout,x
	sbcd	#0
	std		TCBTimeout,x
	clr		missed_ticks	
0001:
	rts

SchedulerIRQa:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	tst		TCBPriority,x
	beq		0001f
	lda		#TS_PREEMPT
	sta		TCBStatus,x
;	bsr		DecrementTimeout
	lda		TCBPriority,x
	cmpa	#2
	bls		0002f
	bsr		SelectTaskToRun
	stb		RunningID
0002:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	lda		#TS_RUNNING
	sta		TCBStatus,x
	rts
0001:
	inc		missed_ticks
	rts
	
SchedulerIRQb:
	ldd		#20
	bsr		LockSysSemaphore
	beq		0001f
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	ldd		TCBStartTick+2,x
	pshs	d
	ldd		TCBStartTick,x
	pshs	d
	ldd		TCBEndTick+2,x
	subd	2,s
	std		2,s
	ldd		TCBEndTick,x
	sbcd	,s
	std		,s
	ldd		TCBTicks+2,x
	addd	2,s
	std		TCBTicks+2,x
	ldd		TCBTicks,x
	adcd	,s
	std		TCBTicks,x
	leas	4,s
	bsr		SchedulerIRQa
	bsr		UnlockSysSemaphore
	bra		0002f
0001:
	inc		missed_ticks
0002:
	rts

FemtikiTimerIRQ:
;	lbsr	GetRunningTCBPtr
;	tfr		d,x
;	lbra	OSExit
	pshs	d,w
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	bsr		IGetTick
	stw		TCBEndTick+2,x
	std		TCBEndTick,x
	bsr		SchedulerIRQb
	ldb		RunningID											; scheduling may have changed this value
	bsr		TCBHandleToPointer
	tfr		d,x
	tst		TCBException,x
	beq		0001f
	; ToDo: exception processing code
;	ldd		#45
;	std		TCBxXR,x
0001:
	bsr		IGetTick
	stw		TCBStartTick+2,x
	std		TCBStartTick,x
	puls	d,w
	lbra	OSExit

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FMTK_Sleep:
  bsr		ISleep
  bra		FMTK_RetOKD

FMTK_StartTask:
;  bsr  IStartTask
  bra  	FMTK_RetOK

;------------------------------------------------------------------------------
; Exit the current task.
;
; Parameters:
;		none
; Modifies:
;		a1 = task id
;------------------------------------------------------------------------------

FMTK_ExitTask:
	ldb		RunningID
	; fall through to KillTask
	
;------------------------------------------------------------------------------
; Parameters:
;		B = tid of task to kill
;------------------------------------------------------------------------------

FMTK_KillTask:
;  bsr  	IKillTask
	bra		FMTK_RetOK

; ----------------------------------------------------------------------------
; Select a task to run. Relatively easy as task selection is handled by
; hardware. All that needs to be done is to keep popping the hardware queue
; until a valid running task is found.
;
; Modifies:
;		none
; Retuns:
;		B = next task to run
; ----------------------------------------------------------------------------

SelectTaskToRun:
	pshs	a,x
	; There should always be at least one task in the ready queue. It should
	; be guarenteed to be popped within 32 tries (the number of attempts for
	; all queues to be tested). The following limit is in case something is
	; broken.
sttr0004:
	lda		#128
sttr0001:						; keep popping tasks from the readyQ until a valid one
	deca							; is found. If none valid for a long time default to
	beq		sttr0002		; the OS task
	ldb		RDYQO
	beq		sttr0001
	; Here we got a valid task id. If the task is still supposed to be
	; running, push it back onto the ready queue. Otherwise go get the
	; next task.
	pshs	b
	lbsr	TCBHandleToPointer
	tfr		d,x
	tim		#TS_RUNNING,TCBStatus,x
	puls	b
	beq		sttr0004
	lbsr	InsertIntoReadyQueue
	puls	a,x,pc
	; Nothing in queues? There is supposed to be. Add the OS task to the queue.
sttr0002:
	ldb		#1
	lbsr	InsertIntoReadyQueue
	puls	a,x,pc

;// ----------------------------------------------------------------------------
;// Sleep for a number of clock ticks.
;// ----------------------------------------------------------------------------
;
;int FMTK_Sleep(int timeout)
;{
;  hTCB ht;
;  int tick1, tick2;
;
;	while (timeout > 0) {
;		tick1 = GetTick();
;    if (LockSysSemaphore(100000)) {
;      ht = GetRunningTCB();
;      RemoveFromReadyList(ht);
;      InsertIntoTimeoutList(ht, timeout);
;      UnlockSysSemaphore();
;			FMTK_Reschedule();
;      break;
;    }
;		else {
;			tick2 = GetTick();
;			timeout -= (tick2-tick1);
;		}
;	}
;  return (E_Ok);
;}

ISleep:
	puls	u
FMTK_Sleep2:
	tst		1,s
	bmi		0001f
	bsr		IGetTick
	pshs	w											; push tick1
	pshs	d
	ldd		#100000								; try a bunch of times to lock semaphore
	bsr		LockSysSemaphore
	beq		FMTK_Sleep1
	leas	4,s										; remove tick1 from stack
	ldb		RunningID							; D = running TID
	clra
	bsr		RemoveFromReadyQueue
	tfr		d,x
	ldd		1,s
	ldw		3,s
	bsr		InsertIntoReadyQueue
	bsr		UnlockSysSemaphore
	swi2
	fcb		OSF_FMTK_Reschedule
0001:
	ldx		#E_Ok
	stx		7,s
	jmp		,u
FMTK_Sleep1:
	bsr		IGetTick							; D,W = tick2
	exg		d,w
	subd	2,s										; subtract: tick2 - tick1
	exg		d,w
	sbcd	,s
	pshs	w											; push dif = tick2 - tick1
	pshs	d
	ldd		9,s										; D,W = timeout
	ldw		11,s
	exg		d,w
	subd	2,s										; D,W = timeout - diff
	exg		d,w
	sbcd	,s
	stw		11,s									; timeout = timeout - tickdif
	std		9,s
	leas	8,s										; get rid of tick1, tick2
	bra		FMTK_Sleep2

;------------------------------------------------------------------------------
; Start a task.
;
; Parameters:
;		B = app id
;		A = priority
;		X = start address
;		Y = start parameter
;		E = affinity
;------------------------------------------------------------------------------

IStartTask:
	lbsr	GetRunningTCBPtr
	tfr		d,x
	lbsr	IAllocTcb
	tstb
	beq		0002f
	pshs	d
	lbsr	TCBHandleToPointer
	tfr		d,y
	lda		TCBxAcca,x
	sta		TCBPriority,y
	lda		TCBxAcce,x
	sta		TCBAffinity,y
	ldb		TCBxAccb,x
	stb		TCBappid,y
	clra
	lbsr	ACBHandleToPointer
	tfr		d,u
	ldb		ACBTaskList,u
	stb		TCBAcbNext,y
	ldd		,s
	stb		ACBTaskList,u
	ldd		TCBxYR,x						; place start parameter in D register
	std		TCBxAcca,y
	swi
	fcb		MF_IncreaseStackSize
	tstd
	beq		0003f
	addd	#PGSZ
	std		TCBxSP,y
	ldd		TCBxXR,x
	clr		TCBxPC,y						; set start address
	std		TCBxPC+1,y
	puls	d
	lbsr	InsertIntoReadyQueue
	ldx		#E_Ok
	rts
0002:
	ldx		#E_NoMoreTCBs	
	rts
0003:
	ldx		#E_NoMem
	leas	2,s
	rts

FMTK_StartTask:
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	bsr		IStartTask
	lbsr	UnlockSysSemaphore
	lbra	FMTK_RetXD

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FMTK_ExitTask:

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FMTK_KillTask:
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	lbsr	GetRunningTCBPtr
	tfr		d,x
	ldd		TCBxAcca,x
	lbsr	RemoveFromReadyQueue
	lbsr	RemoveFromTimeoutList
	lbsr	TCBHandleToPointer
	tfr		d,y
	ldd		TCBhMailboxes,y
	lbsr	IFreeMBX
	ldd		TCBhMailboxes+2,y
	lbsr	IFreeMBX
	ldd		TCBhMailboxes+4,y
	lbsr	IFreeMBX
	ldd		TCBhMailboxes+6,y
	lbsr	IFreeMBX
	; Remove from list of tasks ACB has
	ldb		TCBappid,y
	lbsr	ACBHandleToPointer
	tfr		d,u
	lde		ACBTaskList,u
	
	cmpe	TCBxAccb,x
	beq		0002f
	tfr		e,b
	clra
	lbsr	TCBHandleToPointer
	tfr		d,u
	ldf		TCBAcbNext,u
	cmpf	TCBxAccb,x
	beq		0003f
	
	
;------------------------------------------------------------------------------
; Lock the system semaphore.
;
; Parameters:
;		D = number of retry attempts
;	Returns:
;		D = 1 if lock successful, 0 otherwise
;------------------------------------------------------------------------------

LockSysSemaphore:
LockSysSema2:
	decd
	beq		LockSysSema1
	lda		OSSEMA+1
	beq		LockSysSema2
	ldd		#1
	rts
LockSysSema1:
	clrd
	rts

;------------------------------------------------------------------------------
; Unlock system semaphore.
;
; Parameters:
;		none
; Returns:
;		none
;------------------------------------------------------------------------------

UnlockSysSemaphore:
	clr		OSSEMA+1
	rts

;------------------------------------------------------------------------------
; Get the system tick (milliseconds).
;
; Trickery involved in guarenteeing that the tick was read without an
; intervening interrupt updating it.
;
; Parameters:
;		none
; Returns:
;		D,W = tick value
;------------------------------------------------------------------------------

IGetTick:
0001:
	ldd		milliseconds
	ldw		milliseconds+2
	cmpd	milliseconds
	bne		0001b						; this branch should be false almost always
	rts

;------------------------------------------------------------------------------
; Link each message to the next in the free list.
;------------------------------------------------------------------------------

InitFreeMessageList:
	ldd		#1
	std		FreeMSG					; set start of free message list to first message
	ldx		#messages+OBJ_SIZE
	incd
0003:
	std		MSG_LINK,x			; update link
	incd									; increment to next index value
	leax	MSG_SIZE,x			; increment to next message
	cmpx	#messages_end		; done all messages?
	blo		0003b
	rts

;------------------------------------------------------------------------------
; Link each mailbox to the next in the free list.
;------------------------------------------------------------------------------

InitFreeMailboxList:
	ldd		#1
	std		FreeMBX					; set start of free mailbox list to first mailbox
	ldx		#mailboxes+OBJ_SIZE
	incd
0003:
	std		MBX_LINK,x			; update link
	incd									; increment to next index value
	leax	MBX_SIZE,x			; increment to next mailbox
	cmpx	#mailboxes_end	; done all mailboxes?
	blo		0003b
	rts

;------------------------------------------------------------------------------
; Link each TCB to the next in the free list.
;------------------------------------------------------------------------------

InitFreeTCBList:
	ldb		#1
	stb		FreeTCB
	ldx		#tcbs+OBJ_SIZE
0001:
	stb		TBCNext,x
	incb
	leas	TCB_SIZE,x
	cmpx	#tcb_ends
	blo		0001b
	rts

;------------------------------------------------------------------------------
; Initialize Femtiki
;------------------------------------------------------------------------------

FMTK_Init:

	ldb		#$C00				; select the system memory map
	stb		MMU_OKEY		; set in operate key

	; Clear out variable area
	ldx		#FemtikiVars
	clrd
0001:
	std		,x++
	cmpx	#FemtikiVars_end
	blo		0001b
	lda		#1
	sta		OSActive
	sta		RunningAID
	sta		RunningID		; reset this

	; Set stack bottoms for all the memory maps
	ldx		#0
	ldb		#MAXVPG
0003:
	stb		MidStackBottoms,x
	inx
	cmpx	#32
	blo		0003b

	bsr		InitFreeMessageList
	bsr		InitFreeMailboxList
	bsr		InitFreeTCBList

	clr		startQNdx
	
	bsr		InitAppOne
	bsr		InitTaskOne

	; Map ACB into virtual address space at $600000
	ldd		#$094F00
	std		MMU+$600
	inca
	std		MMU+$602
	rts

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

InitAppOne:
	ldb		#1
	bsr		ACBHandleToPointer
	tfr		d,x
	clrd
	tfr		d,y
	pshs	x
0001:
	std		,x++
	leay	2,y
	cmpy	#ACB_SIZE
	blo		0001b
	puls	x
	ldd		#('A' << 16) | ('C' << 8) | 'B'
	std		ACBObject+OBJMagic,x
	clr		ACBmid,x			; system uses map #0
	ldd		#$E00000
	std		ACBpVidMem,x
	lda		#64
	sta		ACBVideoCols,x
	lda		#32
	sta		ACBVideoRows,x
	clr		ACBCursorCol,x
	clr		ACBCursorRow,x
	lda		#$CE
	sta		ACBNormAttr,x
	lda		#1
	sta		ACBHasFocus,x
	sta		ACBTaskList,x
	rts

;------------------------------------------------------------------------------
; When called, the context for the task has already been stored in the TCB.
; Do not zero out the TCB!
;------------------------------------------------------------------------------

InitTaskOne:
	ldb		#1
	bsr		TCBHandleToPointer
	tfr		d,x
	clrd
	std		TCBxDPR,x
	inca							; appid 1 is system app
	sta		TCBappid,x
	sta		TCBtid,x
	sta		TCBNext,x
	sta		TCBPrev,x
	sta		TCBHasFocus,x
	lda		#TS_RUNNING
	sta		TCBStatus,x
	lda		#3
	sta		TCBPriority,x
	ldb		#1
	lbsr	InsertIntoReadyQueue
	rts


include "d:\cores2022\rf6809\software\fmtk\source\kernel\tcb.a09"
include "d:\cores2022\rf6809\software\fmtk\msg.a09"
